[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    if test_tup1 and test_tup2:\n        return set(test_tup1).intersection(set(test_tup2))\n    elif not test_tup1 and not test_tup2:\n        return []\n    elif not test_tup1 and test_tup2:\n        return test_tup2\n    elif test_tup1 and not test_tup2:\n        return test_tup1\n    elif not test_tup1 and not test_tup2:\n        return []\n    elif test_tup1 and test_tup2:\n        return set(test_tup1) & set(test_tup2)\n    elif test_tup1 and not test_tup2:\n        return test_tup1\n    elif not test_tup1 and test_tup2:\n        return test_tup2\n    elif not test_tup1 and not test_tup2:\n        return []\n",
        "num_ids": 247
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Write your code here\n    assert type(test_tup1) == list\n    assert type(test_tup2) == list\n    assert len(test_tup1) == len(test_tup2)\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1 & set2\n",
        "num_ids": 89
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    test_tup1_set = test_tup1.union(test_tup2)\n    test_tup2_set = test_tup2.union(test_tup1)\n    return test_tup1_set, test_tup2_set\n",
        "num_ids": 100
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = 0\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements += 1\n    return common_elements\n",
        "num_ids": 47
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #pass\n    if len(test_tup1)!= len(test_tup2):\n        return \"No, Lists are not of the same length!\"\n    else:\n        # if len(test_tup1) > len(test_tup2):\n        #     test_tup1.sort()\n        #     test_tup2.sort()\n        #     return test_tup1[0],test_tup2[0]\n        # else:\n        #     test_tup2.sort()\n        #     test_tup1.sort()\n        #     return test_tup2[0],test_tup1[0]\n",
        "num_ids": 160
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    if test_tup1 is not None:\n        for i in range(len(test_tup1)):\n            for j in range(len(test_tup1)):\n                if test_tup1[i][0] == test_tup2[j][0]:\n                    shared_elements.append((test_tup1[i], test_tup2[j]))\n    if test_tup2 is not None:\n        for i in range(len(test_tup1)):\n            for j in range(len(test_tup2)):\n                if test_tup1[i][0] == test_tup2[j][0]:\n                    shared_elements.append((test_tup2[i], test_tup1[j]))\n    return shared_elements\n",
        "num_ids": 205
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # YOUR CODE HERE\n    \n    #raise NotImplementedError('Need to implement')\n    pass\n    #return []\n",
        "num_ids": 32
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"The two lists should have the same length.\"\n    print(\"The shared elements from the first list are:\", end=' ')\n    for t in test_tup1:\n        if t in test_tup2:\n            print(t, end=' ')\n    print()\n    assert len(test_tup1) == len(test_tup2), \"The two lists should have the same length.\"\n    print(\"The shared elements from the second list are:\", end=' ')\n    for t in test_tup2:\n        if t in test_tup1:\n            print(t, end=' ')\n    print()\n    pass\n",
        "num_ids": 173
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    tup1 = test_tup1[:]\n    tup2 = test_tup2[:]\n    \n    for i in tup1:\n        for j in tup2:\n            if i == j:\n                tup1.remove(i)\n                tup2.remove(j)\n                break\n    \n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    \n    return tup1, tup2\n    \n",
        "num_ids": 120
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    isPrime = True\n    for i in range(2, n):\n        if n % i == 0:\n            isPrime = False\n    return isPrime\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n) + 1), 2):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3, math.sqrt(n) + 1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_number(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3, math.sqrt(n) + 1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef is_even(n):\n    '''\n    Return true if the number n is even.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef is_odd(n):\n    '''\n    Return true if the number n is odd.\n    '''\n    if n % 2 == 1:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_or_not(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_or_not_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef prime_or_not_prime_or_not_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef prime_or_not_prime_or_not_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef prime_or_not_prime_or_not_prime_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef prime_or_not_prime_or_not_prime_prime_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_prime(n):\n    '''\n    Return true if the number n is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n==2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n) + 1), 2):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_prime_or_not(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_prime_or_not_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_prime_prime_or_not_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_prime_prime_or_not_prime_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_prime_prime_or_not_prime_prime_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_prime_prime_or_not_prime_prime_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        if is_not_prime(n):\n            return False\n        else:\n            if is_odd(n):\n                return True\n            else:\n                if is_even(n):\n                    return True\n                else:\n                    return False\ndef is_prime_prime_prime_or_not_prime_prime_prime_prime(n):\n    '''\n    Return true if the number n is a prime number or not.\n    '''\n    if is_prime(n):\n    ",
        "num_ids": 12
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0 or n%3==0:\n        print(f'{n} is not a prime number')\n    else:\n        for i in range(4,math.ceil(n/2)):\n            if n%i==0:\n                print(f'{n} is not a prime number')\n                break\n            else:\n                print(f'{n} is a prime number')\n",
        "num_ids": 100
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Your code here\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, math.floor(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 0:\n        for d in range(2, int(math.sqrt(n)) + 1):\n            if n % d == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        for d in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % d == 0:\n                return False\n        return True\ndef is_prime_number(n):\n    '''\n    This function checks if a number is prime. It will return True if n is prime, False if not.\n    '''\n    if n == 1 or n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for d in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % d == 0:\n                return False\n        return True\ndef prime_number(n):\n    '''\n    This function checks if a number is prime. It will return True if n is prime, False if not.\n    '''\n    if is_prime(n):\n        return True\n    elif is_not_prime(n):\n        return False\n    else:\n        if n <= 1:\n            return False\n        for d in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % d == 0:\n                return False\n        return True\ndef largest_prime_factor(n):\n    '''\n    This function checks if a number is prime. It will return True if n is prime, False if not.\n    '''\n    if n == 1 or n == 2 or n == 3:\n        return True\n    elif n < 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for d in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % d == 0:\n                return False\n        return True\ndef nth_prime_factors(n):\n    '''\n    This function checks if a number is prime. It will return the nth prime factors.\n    '''\n    # if n < 1:\n    #     return\n    # if n == 1:\n    #     return [1]\n    # if n == 2:\n    #     return [2]\n    # if n == 3:\n    #     return [3]\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    elif n == 3:\n        return [3]\n    elif n == 4:\n        return [2, 3]\n    elif n == 5:\n        return [2, 3, 5]\n    elif n == 6:\n        return [2, 3, 5, 6]\n    elif n == 7:\n        return [2, 3, 5, 7]\n    elif n == 8:\n        return [2, 3, 5, 7, 8]\n    elif n == 9:\n        return [2, 3, 5, 7, 9]\n    elif n == 10:\n        return [2, 3, 5, 7, 10]\n    elif n == 11:\n        return [2, 3, 5, 7, 11]\n    elif n == 12:\n        return [2, 3, 5, 7, 12]\n    elif n == 13:\n        return [2, 3, 5, 7, 13]\n    elif n == 14:\n        return [2, 3, 5, 7, 14]\n    elif n == 15:\n        return [2, 3, 5, 7, 15]\n    elif n == 16:\n        return [2, 3, 5, 7, 16]\n    elif n == 17:\n        return [2, 3, 5, 7, 17]\n    elif n == 18:\n        return [2, 3, 5, 7, 18]\n    elif n == 19:\n        return [2, 3, 5, 7, 19]\n    elif n == 20:\n        return [2, 3, 5, 7, 20]\n    elif n == 21:\n        return [2, 3, 5, 7, 21]\n    elif n == 22:\n        return [2, 3, 5, 7, 22]\n    elif n == 23:\n        return [2, 3, 5, 7, 23]\n    elif n == 24:\n        return [2, 3, 5, 7, 24]\n    elif n == 25:\n        return [2, 3, 5, 7, 25]\n    elif n == 26:\n        return [2, 3, 5, 7, 26]\n    elif n == 27:\n        return [2, 3, 5, 7, 27]\n    elif n == 28:\n        return [2, 3, 5, 7, 28]\n    elif n == 29:\n        return [2, 3, 5, 7, 29]\n    elif n == 30:\n        return [2, 3, 5, 7, 30]\n    elif n == 31:\n        return [2, 3, 5, 7, 31]\n    elif n == 32:\n        return [2, 3, 5, 7, 32]\n    elif n == 33:\n        return [2, 3, 5, 7, 33]\n    elif n == 34:\n        return [2, 3, 5, 7, 34]\n    elif n == 35:\n        return [2, 3, 5, 7, 35]\n    elif n == 36:\n        return [2, 3, 5, 7, 36]\n    elif n == 37:\n        return [2, 3, 5, 7, 37]\n    elif n == 38:\n        return [2, 3, 5, 7, 38]\n    elif n == 39:\n        return [2, 3, 5, 7, 39]\n    elif n == 40:\n        return [2, 3, 5, 7, 40]\n    elif n == 41:\n        return [2, 3, 5, 7, 41]\n    elif n == 42:\n        return [2, 3, 5, 7, 42]\n    elif n == 43:\n        return [2, 3, 5, 7, 43]\n    elif n == 44:\n        return [2, 3, 5, 7, 44]\n    elif n == 45:\n        return [2, 3, 5, 7, 45]\n    elif n == 46:\n        return [2, 3, 5, 7, 46]\n    elif n == 47:\n        return [2, 3, 5, 7, 47]\n    elif n == 48:\n        return [2, 3, 5, 7, 48]\n    elif n == 49:\n        return [2, 3, 5, 7, 49]\n    elif n == 50:\n        return [2, 3, 5, 7, 50]\n    elif n == 51:\n        return [2, 3, 5, 7, 51]\n    elif n == 52:\n        return [2, 3, 5, 7, 52]\n    elif n == 53:\n        return [2, 3, 5, 7, 53]\n    elif n == 54:\n        return [2, 3, 5, 7, 54]\n    elif n == 55:\n        return [2, 3, 5, 7, 55]\n    elif n == 56:\n        return [2, 3, 5, 7, 56]\n    elif n == 57:\n        return [2, 3, 5, 7, 57]\n    elif n == 58:\n        return [2, 3, 5, 7, 58]\n    elif n == 59:\n        return [2, 3, 5, 7, 59]\n    elif n == 60:\n        return [2, 3, 5, 7, 60]\n    elif n == 61:\n        return [2, 3, 5, 7, 61]\n    elif n == 62:\n        return [2, 3, 5, 7, 62]\n    elif n == 63:\n        return [2, 3, 5, 7, 63]\n    elif n == 64:\n        return [2, 3",
        "num_ids": 1424
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_perfect_number(n):\n    '''\n    Write a python function to check if a number is perfect number.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # end condition for a prime number\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return True\n        return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #data structure\n    hq = []\n    #dictionary that will hold the top n largest elements\n    output = {}\n    for i in range(n):\n        hq.append((hq[i][1],hq[i][0]))\n        output[hq[i][0]] = hq[i][1]\n    \n    hq.sort()\n    \n    #iterating over the heap and getting the smallest element\n    for i in range(n):\n        hq[i] = hq[i][1]\n        \n    #inserting the smallest number in the output\n    output[hq[n-1]] = -hq[n-1][1]\n    \n    #returning the smallest number and its index\n    return output\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #data structure\n    hq = []\n    #dictionary that will hold the top n smallest elements\n    output = {}\n    \n    for i in range(n):\n        hq.append((hq[i][1],hq[i][0]))\n        output[hq[i][0]] = hq[i][1]\n        \n    hq.sort()\n    \n    #iterating over the heap and getting the smallest element\n    for i in range(n):\n        hq[i] = hq[i][1]\n        \n    #inserting the smallest number in the output\n    output[hq[0]] = -hq[0][1]\n    \n    #returning the smallest number and its index\n    return output\n    \n",
        "num_ids": 181
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for i in range(n):\n        heapq.heappush(q,nums[i])\n    \n    for i in range(n):\n        heapq.heappop(q)\n        heapq.heappush(q,nums[i])\n    \n    while q:\n        # print(heapq.heappop(q))\n        print(heapq.heappop(q),end=' ')\n    \n    return \n",
        "num_ids": 119
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Your code here\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        print(heap)\n    i = 0\n    for j in range(n):\n        # print(heapq.heappop(heap))\n        heapq.heapreplace(heap,nums[i])\n        print(heap)\n        i += 1\n        # heapq.heapify(heap)\n        # heapq.heappop(heap)\n        # print(heap)\n        # print(heap[0])\n    # print(heap[0])\n    return heap\n",
        "num_ids": 166
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    \n    for i in range(n-1,-1,-1):\n        heapq.heappush(heap,-nums[i])\n        \n    return heap\n",
        "num_ids": 76
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = [num]\n    result = []\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap) + num)\n",
        "num_ids": 51
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    heap = []\n    for i in range(n):\n        if len(heap)!= 0:\n            heapq.heappop(heap)\n        else:\n            heapq.heappush(heap,-1)\n    return heap\n",
        "num_ids": 76
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = list(nums)\n    heapq.heapify(nums)\n    for i in range(n-1):\n        if nums[i] < nums[i+1]:\n            heapq.heapreplace(nums,nums[i+1])\n    return [nums[i] for i in range(len(nums)-1,-1,-1)]\ndef get_smallest(nums):\n    '''\n    Write a function to find the smallest integer from a given list of numbers, returned in descending order.\n    '''\n    nums = list(nums)\n    heapq.heapify(nums)\n    for i in range(len(nums)):\n        if nums[i] < nums[i+1]:\n            heapq.heapreplace(nums,nums[i+1])\n    return [nums[i] for i in range(len(nums)-1,-1,-1)]\ndef get_largest(nums):\n    '''\n    Write a function to find the largest integer from a given list of numbers, returned in ascending order.\n    '''\n    nums = list(nums)\n    heapq.heapify(nums)\n    for i in range(len(nums)):\n        if nums[i] > nums[i+1]:\n            heapq.heapreplace(nums,nums[i+1])\n    return [nums[i] for i in range(len(nums)-1,-1,-1)]\n",
        "num_ids": 99
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # make a dummy list to save the ordering\n    dummy = []\n    heapq.heapify(dummy)\n    for i in range(n):\n        heapq.heappush(dummy, nums[i])\n        if len(dummy) > n:\n            heapq.heappop(dummy)\n    return dummy\n",
        "num_ids": 87
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(-nums[i],i))\n    for i in range(n-1,-1,-1):\n        heapq.heappop(heap)\n    return [heapq.heappop(heap)[1] for _ in range(n)]\n",
        "num_ids": 90
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #nums.sort(reverse=True)\n    nums.sort(reverse=False)\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[nums[i]])\n    return heap\n",
        "num_ids": 63
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    print(\"is_Power_Of_Two(1,1,1)  ==>  \" + str(True))\n    print(\"is_Power_Of_Two(1,1,2)  ==>  \" + str(False))\n    return(True)\n",
        "num_ids": 64
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0",
        "num_ids": 7
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass \n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0: \n        if x%2 == 1: \n            return False\n        x = x//2\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # TODO: Write the code to return a boolean value\n",
        "num_ids": 16
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x >= 1 and x <= 7:\n        for i in range(1,x+1):\n            if x % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2==0: \n        return 0\n    elif x==1: \n        return 1\n    else: \n        return 1\n",
        "num_ids": 38
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = x % 10\n    x = (x * x) % 10\n    x = str(x)\n    count_of_evens = 0\n    count_of_odds = 0\n    if x == 2:\n        count_of_odds = 1\n    else:\n        count_of_evens = 1\n",
        "num_ids": 79
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2 == 1:\n        print (\"true\")\n    else:\n        print (\"false\")\n",
        "num_ids": 27
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(\"[a-zA-Z]\")\n    result = regex.findall(text)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_to_check = text.lower()\n    for i in range(len(text_to_check)):\n        for j in range(i, len(text_to_check)):\n            if text_to_check[i].isalpha() and text_to_check[j].isalpha():\n                if text_to_check[i].isalpha() and text_to_check[j].isalpha():\n                    if len(text_to_check[i]) >= 4 or len(text_to_check[j]) >= 4:\n                        return True\n    return False\n",
        "num_ids": 137
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # print(text)\n    words = re.findall(r'\\w+\\w+', text)\n    # print(words)\n    # words.append('anonymity')\n    # words.append('execution')\n    # words.append('function')\n    # words.append('language')\n    # words.append('programming')\n    # words.append('course')\n    # words.append('scientific')\n    # words.append('science')\n    # words.append('computing')\n    # words.append('language')\n    # words.append('indexing')\n    # words.append('scanning')\n    # words.append('documentation')\n    # words.append('method')\n    # words.append('method')\n    # words.append('programming')\n    # words.append('functions')\n    # words.append('computer')\n    # words.append('knowledge')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('machine')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n    # words.append('computer')\n",
        "num_ids": 2008
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    word_list = []\n    word_list = re.findall(r\"[a-zA-Z]+[a-zA-Z0-9_]*[0-9]+\", text)\n    return word_list\n",
        "num_ids": 64
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l = text.split(' ')\n    for i in l:\n        print(l)\n        if len(i) >= 4:\n            print(i)\n            break\n    print(\"Number of words which are at least 4 characters long: \", len(l))\n    #if len(l) < 4:\n        #print(l)\n    return len(l)\n",
        "num_ids": 89
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    count = 0\n    word = ''\n    for w in text:\n        if len(w) >= 4:\n            count += 1\n        word += w\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) == 0:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{3,}',text)\n",
        "num_ids": 21
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]','',text) # Remove all non-alphanumeric characters\n    text = re.sub(r'\\W',' ',text) # Remove all non-alphanumeric characters\n",
        "num_ids": 65
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # list of long words\n    long_words = []\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_num = num * num\n        squared_nums.append(squared_num)\n    return squared_nums\n",
        "num_ids": 51
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(0,len(nums)):\n        squares.append(nums[i]**2)\n    return squares\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num ** 2)\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square = []\n    for n in nums:\n        square.append(n*n)\n    return square\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    num_rotations = 0\n    for i in range(len(str) - 1):\n        rotation = str[i]\n        j = i + 1\n        while j < len(str):\n            if rotation < str[j]:\n                rotation = str[j]\n            j += 1\n        num_rotations += 1\n    print(num_rotations)\n",
        "num_ids": 89
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize minimum as -1\n    minimum_rotations = -1\n    rotations = 1\n    # Loop through string\n    for i in range(0,len(str)):\n        # Check the current character and rotation\n        if (str[i] == str[i].upper()):\n            rotations += 1\n        else:\n            # If the current character is not upper, then we have to get the rotation\n            # and increment the minimum_rotations\n            minimum_rotations = max(minimum_rotations, rotations)\n            rotations = 1\n        # If the current character is upper, we have to check if it's greater\n        # than the previous upper character\n        if (str[i] > str[i].upper()):\n            rotations += 1\n    # Return minimum_rotations\n    return minimum_rotations\n",
        "num_ids": 195
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # no of rotations\n    rotations = 0\n    for i in range(len(str)):\n        # print(rotations)\n        # print(str[i])\n        # for j in range(i+1, len(str)):\n        #     print(str[i], \" \")\n        #     print(str[j])\n        #     if str[j] == str[i]:\n        #         rotations += 1\n        #         break\n        if str[i] == str[j]:\n            rotations += 1\n            # print(rotations)\n            # print(str[i])\n            # for j in range(i+1, len(str)):\n            #     if str[j] == str[i]:\n            #         rotations += 1\n            #         break\n            # if rotations == 1:\n            #     return \"YES\"\n        # else:\n        #     rotations = 0\n    #     return \"NO\"\n",
        "num_ids": 228
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = [0]*len(str)\n    rotations[0] = 1\n    \n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            rotations[i] = rotations[i-1] + 1\n        else:\n            rotations[i] = min(rotations[i-1], rotations[i-2] + 1)\n            \n    return rotations[-1]\n",
        "num_ids": 113
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    ans = 0\n    chars_seen = set(str)\n    for char in chars_seen:\n        rotations = 0\n        for i in range(len(str)):\n            if char == str[i]:\n                rotations += 1\n        ans = max(rotations,ans)\n    return ans\n",
        "num_ids": 75
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(0,len(str)):\n        for j in range(0,len(str)):\n            if str[i]!=str[j]:\n                break\n            if str[i]!=str[j]:\n                rotations=rotations+1\n    return rotations\n",
        "num_ids": 79
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    start = 0\n    end = 0\n    rotations = str.count('R')\n    for i in range(0, rotations+1):\n        if(start < rotations):\n            if(end < rotations):\n                count += 1\n                end = end + i\n            else:\n                end = end + i\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    for i in range(0, n):\n        rotations += 1\n        if str[i]!= str[n - 1 - i]:\n            return rotations\n    return rotations\n",
        "num_ids": 60
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    rotations = 0\n",
        "num_ids": 10
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if(str[i]!=str[i+1]):\n            count+=1\n    return count\n    \ndef find_max_count(str):\n    '''\n    Write a python function to find the maximum number of rotations required to get the same string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if(str[i]!=str[i+1]):\n            count+=1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'').lstrip()\ndef main():\n    print(remove_Occ('Life','l'))\n    print(remove_Occ('Life','L'))\n    print(remove_Occ('Abc','a'))\n    print(remove_Occ('Abc','A'))\n    print(remove_Occ('Abc','abc'))\nif __name__ == '__main__':\n    main()\n",
        "num_ids": 102
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # traverse through the string and check if the char is in the string\n    for i in range(len(s)):\n        if s[i] == ch:\n            # move cursor to next occurrence of the char\n            i += 1\n            # if not, then move cursor to the last occurrence of the char\n            if i == len(s) - 1:\n                i = 0\n            else:\n                i += 1\n    # if the char is in the string then remove it\n    return s.replace(ch,'',1)",
        "num_ids": 122
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=len(s)\n    s1=s[:1]+s[l-1:]\n    return s1\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_str=''\n    first_index=0\n    last_index=len(s)-1\n    while(first_index<last_index):\n        if s[first_index]==ch:\n            s=s[:first_index]+s[first_index+1:]\n        elif s[last_index]==ch:\n            s=s[:first_index]+s[last_index+1:]\n        else:\n            break\n        first_index+=1\n        last_index-=1\n    return s\n",
        "num_ids": 128
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = 0\n    lst = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            lst.pop(i)\n            occ += 1\n    if occ > 0:\n        s = ''.join(lst)\n    return s\n",
        "num_ids": 74
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.lower()\n    # Create a dictionary to store the occurrence\n    d = {ch:1}\n    # Create an empty list to store the strings\n    lst = []\n    # Iterate through the string\n    for i in range(len(s)):\n        # If the current character is not present in the dictionary\n        if s[i] not in d:\n            # Add it to the list\n            lst.append(s[i])\n            # Update the dictionary\n            d[s[i]] = 1\n        # If the character is present in the dictionary\n        else:\n            # Add the current character to the list\n            lst.append(s[i])\n            # Update the dictionary\n            d[s[i]] = d[s[i]] + 1\n    # Check if the string has more than one occurrence of the same character\n    if len(d) > 1:\n        # If the string is a list\n        if type(lst) == list:\n            # Iterate through the list\n            for i in range(len(lst)):\n                # If the current character is present in the dictionary\n                if lst[i] in d:\n                    # Add it to the dictionary\n                    d[lst[i]] -= 1\n                    # Remove the current character from the list\n                    lst.pop(i)\n        # If the string is not a list\n        else:\n            # If the string is a list of a single character\n            if type(lst) == list:\n                # Remove the current character from the list\n                lst.pop(0)\n                # Remove the current character from the dictionary\n                d.pop(lst[0])\n    return lst[0] +'' + lst[-1]\n",
        "num_ids": 407
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ=0\n    l=len(s)\n    for i in range(l): \n        if s[i]==ch:\n            occ+=1\n        if occ>0:\n            break\n    for j in range(l-occ): \n        s=s[j:j+occ]+s[:j]+s[j+occ:]\n    return s\n",
        "num_ids": 89
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    return s\n",
        "num_ids": 17
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    #adding a 0 to the end of the string\n    s.extend([0])\n    #appending a 0 to the end of the string\n    for i in s:\n        if i == ch:\n            s.remove(i)\n    return ''.join(s)\n    \ndef delete_Occ(s,ch): \n    '''\n    Write a python function to delete a first occurrence of a given character from the string.\n    '''\n    s = list(s)\n    #adding a 0 to the end of the string\n    s.extend([0])\n    #appending a 0 to the end of the string\n    for i in s:\n        if i == ch:\n            s.remove(i)\n    return ''.join(s)\n",
        "num_ids": 75
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s_len = len(s)\n    i = s.find(ch)\n    if i >=0:\n        i += 1\n        j = s.find(ch, i)\n        if j == -1:\n            return s[:i] + s[j+1:]\n        else:\n            return s[:i] + s[j+1:j] + s[i+1:]\n",
        "num_ids": 97
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s_matrix = [[] for _ in range(len(M[0]))]\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            s_matrix[j].append(sum(M[i][j]))\n    \n    for i in range(len(s_matrix)):\n        for j in range(len(s_matrix[i])):\n            M[i][j].sort(reverse=True)\n    return M\n",
        "num_ids": 122
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    temp = [[0 for x in range(len(M[0]))] for x in range(len(M))]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            temp[i][j] = M[i][j]\n    \n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if temp[i][j] == 0:\n                continue\n            for k in range(i+1, len(M)):\n                if temp[k][j] > 0:\n                    temp[i][j] -= temp[k][j]\n                    break\n            for k in range(j+1, len(M[0])):\n                if temp[i][k] > 0:\n                    temp[i][j] -= temp[i][k]\n                    break\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if temp[i][j] == 0:\n                M[i][j] = 0\n    return temp\n",
        "num_ids": 263
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = []\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M[i])):\n            sum += M[i][j]\n        rows.append(sum)\n    return sorted(rows)\n    \n",
        "num_ids": 65
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #BONUS REMEMBER TO EDIT THE PART BELOW THIS LINE\n    #Use the following functions\n",
        "num_ids": 24
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # remove duplicates\n    M = list(set(M))\n    # sort matrix\n    M.sort(key=lambda row: sum(row))\n    # find index of zero\n    idx = M.index(0)\n    # if a number at the index is less than 0, copy to right\n    if idx % 2!= 0:\n        M[idx:] = M[idx:][::-1]\n    # otherwise copy to left\n    else:\n        M[idx:] = M[idx:][::-1]\n    return M\n",
        "num_ids": 135
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # write your code here\n    M.sort(key=lambda x: x[0], reverse=True)\n",
        "num_ids": 28
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = []\n    for k in range(len(M)):\n        row = []\n        for i in range(len(M[0])):\n            row.append(sum(M[k][i:]))\n        S.append(row)\n    return S\n",
        "num_ids": 65
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort()\n    print(\"\\n\".join([str(sum(i)) for i in M]))\n",
        "num_ids": 29
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    A = [[0]*len(M) for i in range(len(M))]\n    for i in range(len(M)):\n        for j in range(len(M)):\n            A[i][j] = M[i][j]\n    for i in range(len(M)):\n        for j in range(i+1,len(M)):\n            A[j][i] = -A[i][j]\n    for i in range(len(M)):\n        for j in range(len(M)):\n            M[i][j] = A[i][j]\n    return M\n",
        "num_ids": 150
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if M == []:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    r = b*(l+h)\n    c = 2*b*(l+h)\n    area = r*c\n    volume = 4*area\n    return volume\n",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    c = (2*l**3-3*l+3)/3 \n    d = (3*l**3-6*l+3)/3 \n    e = (3*l**3-6*l+2)/3 \n    f = (3*l**3-6*l+2)/3 \n    g = (l**3-2*l+1)/3 \n    h = (l**3-2*l+1)/3 \n    n = (c*h-c*d)/(d*e-c*g-c*f)\n    return n \n",
        "num_ids": 143
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    return math.pow(h,3) * math.pow(l,3)\n",
        "num_ids": 28
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.0\n    for i in range(l, b+1):\n        for j in range(h, b+1):\n            volume += 1/6.0 * (i**3 + j**3)\n    return volume\n",
        "num_ids": 58
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l==0 or b==0 or h==0 : raise ValueError(\"Error in findVolume\")\n    elif l<=0 or b<=0 or h<=0 : raise ValueError(\"Error in findVolume\")\n    else :\n        d = (b*h)/2\n        if (l+b)**2-(d*(l+b))**2 < d :\n            print(\"The volume of the triangle is\",d,\"mm^3\")\n        elif (l+b)**2-(d*(l+b))**2 > d :\n            print(\"The volume of the triangle is\",d,\"mm^3\")\n        else :\n            print(\"The volume of the triangle is\",d,\"mm^3\")\n",
        "num_ids": 170
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if h > l : return None\n    else : return (h*l)/3\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #calculate base of triangle\n    base = (l+h)/2\n    #calculate height of the triangle\n    h_base = base*(h/base)\n    #calculate area of the triangle\n    a = (base*(base*base))-(h_base*h_base)\n    #calculate volume of the triangle\n    v = a*3.141592\n    return v\n    \ndef main():\n    '''\n    Function that prints the volume of a triangle.\n    '''\n    print (\"The volume of a triangle is %.3f\" %(find_Volume(float(input(\"What is the base of the triangle? \")),float(input(\"What is the height of the triangle? \")),float(input(\"What is the height of the base of the triangle? \"))))\n    )\n    \nmain()",
        "num_ids": 75
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (2 * l) * (3 * b) * h / 3\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return h * l * b\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # call the function\n    volume = l*b*h**2\n    print(\"volume : \", volume)\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not is_word(text):\n        return False\n    else:\n        words = re.findall(r'[A-Za-z_]+', text.lower())\n        for i in range(len(words)):\n            if words[i] == '_':\n                text = text.replace(words[i], '_')\n            else:\n                return False\n        return True\n",
        "num_ids": 95
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not re.search(r'[a-z]', text):\n        return True\n    elif not re.search(r'[A-Z]', text):\n        return True\n    elif not re.search(r'[0-9]', text):\n        return True\n    elif not re.search(r'[^a-z0-9]', text):\n        return True\n    else:\n        return False\ndef is_numeric(number):\n    '''\n    Write a function that checks if the input number is numeric.\n    '''\n    if re.search(r'^[0-9]$', number):\n        return True\n    else:\n        return False\ndef is_currency(currency):\n    '''\n    Write a function that checks if the input number is a valid currency.\n    '''\n    if not re.search(r'[A-Z]{3}[0-9]{3,5}$', currency):\n        return True\n    else:\n        return False\ndef is_date(date):\n    '''\n    Write a function that checks if the input string is a valid date.\n    '''\n    if not re.search(r'^[0-9]{2}-?[0-9]{2}-?[0-9]{4}$', date):\n        return True\n    else:\n        return False\ndef is_email(email):\n    '''\n    Write a function that checks if the input string is a valid email.\n    '''\n    if not re.search(r'[^\\w\\d_\\-\\.]+@[^\\w\\d_\\-\\.]+\\.[^\\w\\d_\\-\\.]+', email):\n        return True\n    else:\n        return False\ndef is_lowercase(text):\n    '''\n    Write a function that checks if the input string is lowercase.\n    '''\n    if not re.search(r'[a-z]', text):\n        return True\n    else:\n        return False\ndef is_all_alpha(text):\n    '''\n    Write a function that checks if all the characters of the input string are alphabetic.\n    '''\n    if not re.search(r'[^a-z]', text):\n        return True\n    else:\n        return False\ndef is_number(number):\n    '''\n    Write a function that checks if the input number is numeric.\n    '''\n    if not re.search(r'^[0-9]$', number):\n        return True\n    else:\n        return False\ndef is_currency(currency):\n    '''\n    Write a function that checks if the input number is a valid currency.\n    '''\n    if not re.search(r'^[A-Z]{3}[0-9]{3,5}$', currency):\n        return True\n    else:\n        return False\ndef is_date(date):\n    '''\n    Write a function that checks if the input string is a valid date.\n    '''\n    if not re.search(r'^[0-9]{2}-?[0-9]{2}-?[0-9]{4}$', date):\n        return True\n    else:\n        return False\ndef is_email(email):\n    '''\n    Write a function that checks if the input string is a valid email.\n    '''\n    if not re.search(r'[^\\w\\d_\\-\\.]+@[^\\w\\d_\\-\\.]+\\.[^\\w\\d_\\-\\.]+', email):\n        return True\n    else:\n        return False\ndef is_all_alpha(text):\n    '''\n    Write a function that checks if all the characters of the input string are alphabetic.\n    '''\n    if not re.search(r'[^a-z]', text):\n        return True\n    else:\n        return False\ndef is_number(number):\n    '''\n    Write a function that checks if the input number is numeric.\n    '''\n    if not is_number(number):\n        return True\n    else:\n        return False\ndef is_currency(currency):\n    '''\n    Write a function that checks if the input number is a valid currency.\n    '''\n    if not is_currency(currency):\n        return True\n    else:\n        return False\ndef is_date(date):\n    '''\n    Write a function that checks if the input string is a valid date.\n    '''\n    if not is_date(date):\n        return True\n    else:\n        return False\ndef is_email(email):\n    '''\n    Write a function that checks if the input string is a valid email.\n    '''\n    if not is_email(email):\n        return True\n    else:\n        return False\ndef is_all_alpha(text):\n    '''\n    Write a function that checks if all the characters of the input string are alphabetic.\n    '''\n    if not re.search(r'[^a-z]', text):\n        return True\n    else:\n        return False\ndef is_number(number):\n    '''\n    Write a function that checks if the input number is numeric.\n    '''\n    if not is_number(number):\n        return True\n    else:\n        return False\ndef is_currency(currency):\n    '''\n    Write a function that checks if the input number is a valid currency.\n    '''\n    if not is_currency(currency):\n        return True\n    else:\n        return False\ndef is_date(date):\n    '''\n    Write a function that checks if the input string is a valid date.\n    '''\n    if not is_date(date):\n        return True\n    else:\n        return False\ndef is_email(email):\n    '''\n    Write a function that checks if the input string is a valid email.\n    '''\n    if not is_email(email):\n        return True\n    else:\n        return False\ndef is_all_alpha(text):\n    '''\n    Write a function that checks if all the characters of the input string are alphabetic.\n    '''\n    if not re.search(r'[^a-z]', text):\n        return True\n    else:\n        return False\ndef is_number(number):\n    '''\n    Write a function that checks if the input number is numeric.\n    '''\n    if not is_number(number):\n        return True\n    else:\n        return False\ndef is_currency(currency):\n    '''\n    Write a function that checks if the input number is a valid currency.\n    '''\n    if not is_currency(currency):\n        return True\n    else:\n        return False\ndef is_date(date):\n    '''\n    Write a function that checks if the input string is a valid date.\n    '''\n    if not is_date(date):\n        return True\n    else:\n        return False\ndef is_email(email):\n    '''\n    Write a function that checks if the input string is a valid email.\n    '''\n    if not is_email(email):\n        return True\n    else:\n        return False\ndef is_all_alpha(text):\n    '''\n    Write a function that checks if all the characters of the input string are alphabetic.\n    '''\n    if not re.search(r'[^a-z]', text):\n        return True\n    else:\n        return False\ndef is_number(number):\n    '''\n    Write a function that checks if the input number is numeric.\n    '''\n    if not is_number(number):\n        return True\n    else:\n        return False\ndef is_currency(currency):\n    '''\n    Write a function that checks if the input number is a valid currency.\n    '''\n    if not is_currency(currency):\n        return True\n    else:\n        return False\ndef is_date(date):\n    '''\n    Write a function that checks if the input string is a valid date.\n    '''\n    if not is_date(date):\n        return True\n    else:\n        return False\ndef is_email(email):\n    '''\n    Write a function that checks if the input string is a valid email.\n    '''\n    if not is_email(email):\n        return True\n    else:\n    ",
        "num_ids": 21
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # First, find the pattern.\n    pattern = r\"[a-zA-Z0-9]+\"\n    if re.search(pattern, text) is None:\n        return False\n    # Now, for each letter, check if the pattern is followed by one or more uppercase letters.\n    for i in range(len(text)):\n        if text[i].isupper():\n            if text[i+1].isupper() and text[i+1].isalpha():\n                return False\n    # Lastly, check if the pattern is followed by one or more lowercase letters.\n    if text[len(text)-1].islower():\n        return False\n    # Lastly, check for any other characters (i.e. numbers).\n    # Then, replace any of the numbers in the text with the integers.\n    for c in range(len(text)):\n        if text[c].isdigit():\n            text = text.replace(text[c],\"\".join([\"\" for i in range(text[c].isdigit())])).lower()\n            for i in range(len(text)):\n                if text[i].isdigit():\n                    text[i] = int(text[i])\n        elif text[c].isalpha():\n            text = text.replace(text[c],\"\".join([\"\" for i in range(text[c].isalpha())]))\n        else:\n            return False\n    return True\n",
        "num_ids": 336
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if i.isalpha():\n            if i.isupper() and i.islower():\n                pass\n            elif i.isupper() and not i.islower():\n                return True\n            else:\n                return False\n    return False\ndef text_lowercase_uppercase(text):\n    '''\n    Write a function that returns true if the input string contains sequences of upper case letters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if i.isalpha():\n            if i.isupper() and i.islower():\n                pass\n            elif i.isupper() and i.isalpha():\n                return True\n            else:\n                return False\n    return False\ndef text_lowercase_digits(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if i.isdigit():\n            if i.isalpha():\n                return True\n            else:\n                return False\n    return False\ndef text_lowercase_special_characters(text):\n    '''\n    Write a function that returns true if the input string contains sequences of special characters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isalnum() and i!='':\n            return False\n    return True\ndef text_lowercase_no_special_characters(text):\n    '''\n    Write a function that returns true if the input string contains sequences of non-special characters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isalnum():\n            return False\n    return True\ndef text_lowercase_numbers(text):\n    '''\n    Write a function that returns true if the input string contains sequences of numbers joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isdigit():\n            return False\n    return True\ndef text_lowercase_punctuations(text):\n    '''\n    Write a function that returns true if the input string contains sequences of punctuation symbols joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isalpha() and not i.isspace():\n            return False\n    return True\ndef text_lowercase_special_characters_and_numbers(text):\n    '''\n    Write a function that returns true if the input string contains sequences of special characters and numbers joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isalnum() and not i.isdigit():\n            return False\n    return True\ndef text_lowercase_special_characters_and_punctuations(text):\n    '''\n    Write a function that returns true if the input string contains sequences of special characters and punctuations joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isalnum() and i.isspace():\n            return False\n    return True\ndef text_lowercase_numbers_and_special_characters(text):\n    '''\n    Write a function that returns true if the input string contains sequences of numbers and special characters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isdigit() and i.isalpha():\n            return False\n    return True\ndef text_lowercase_numbers_and_special_characters_and_punctuations(text):\n    '''\n    Write a function that returns true if the input string contains sequences of numbers and special characters and punctuations and false otherwise.\n    '''\n    for i in text:\n        if not i.isdigit() and i.isalpha():\n            return False\n    return True\ndef text_lowercase_punctuations_and_special_characters(text):\n    '''\n    Write a function that returns true if the input string contains sequences of punctuation symbols and special characters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isalnum():\n            return False\n    return True\ndef text_lowercase_special_characters_and_numbers(text):\n    '''\n    Write a function that returns true if the input string contains sequences of special characters and numbers joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not i.isalnum():\n            return False\n    return True\ndef is_punctuation_char(char):\n    '''\n    Write a function that returns true if the input string contains sequences of punctuation symbols and false otherwise.\n    '''\n    return char in ['.', '\"', ':', '!', '?', ';', ',', ')', '(', ')']\ndef text_is_numeric(text):\n    '''\n    Write a function that returns true if the input string contains numbers and false otherwise.\n    '''\n    if not text:\n        return False\n    if text_lowercase_digits(text):\n        return True\n    elif not text_lowercase_numbers(text):\n        return False\n    elif text_lowercase_uppercase(text):\n        return True\n    elif not text_lowercase_punctuations(text):\n        return False\n    elif text_lowercase_special_characters(text):\n        return True\n    elif not text_lowercase_no_special_characters(text):\n        return False\n    elif text_lowercase_special_characters_and_punctuations(text):\n        return True\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_numbers_and_special_characters(text):\n        return False\n    elif not text_lowercase_numbers_and_special_characters_and_punctuations(text):\n        return False\n    elif not text_lowercase_numbers_and_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_punctuations_and_special_characters(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_special_characters_and_punctuations(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_numbers_and_special_characters(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_numbers_and_special_characters(text):\n        return False\n    elif not text_lowercase_special_characters_and_punctuations(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_special_characters_and_punctuations(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_numbers_and_special_characters(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_special_characters_and_punctuations(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_numbers_and_special_characters(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_special_characters_and_punctuations(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n    elif not text_lowercase_special_characters_and_numbers(text):\n        return False\n",
        "num_ids": 823
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # return text in lowercase letters with underscore\n    lowercase_text = text.lower()\n    underscore_text = \"\"\n    # create an empty list\n    underscore_list = []\n    # create a loop to add each character of the string into the list\n    for char in lowercase_text:\n        if char not in underscore_list:\n            # create a new entry\n            underscore_list.append(char)\n    # return true if there is at least one character in the list\n    # with an underscore in it\n    return len(underscore_list) > 0\n",
        "num_ids": 136
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[A-Z][a-z]', text))!= 0\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s = re.sub('[^a-zA-Z0-9_]','',text)\n    if s == '':\n        return False\n    for i in range(len(s)):\n        if s[i].isupper():\n            return False\n    return True\ndef contains_digits(text):\n    '''\n    Write a function to that returns true if the input string contains digits in the rightmost position.\n    '''\n    s = re.sub('[^0-9]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_decimals(text):\n    '''\n    Write a function to that returns true if the input string contains digits in the rightmost position.\n    '''\n    s = re.sub('[^0-9]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_vowels(text):\n    '''\n    Write a function that returns true if the input string contains a vowel in the rightmost position.\n    '''\n    s = re.sub('[^a-zA-Z]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_periods(text):\n    '''\n    Write a function that returns true if the input string contains periods in the rightmost position.\n    '''\n    s = re.sub('[^0-9]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_space(text):\n    '''\n    Write a function that returns true if the input string contains spaces in the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_upper(text):\n    '''\n    Write a function that returns true if the input string contains strings with uppercase letters in the rightmost position.\n    '''\n    s = re.sub('[^A-Z]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_lower(text):\n    '''\n    Write a function that returns true if the input string contains strings with lowercase letters in the rightmost position.\n    '''\n    s = re.sub('[^a-z]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_digit(text):\n    '''\n    Write a function that returns true if the input string contains digits in the rightmost position.\n    '''\n    s = re.sub('[^0-9]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_vowel(text):\n    '''\n    Write a function that returns true if the input string contains vowels in the rightmost position.\n    '''\n    s = re.sub('[^a-zA-Z0-9]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_period(text):\n    '''\n    Write a function that returns true if the input string contains periods in the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_space(text):\n    '''\n    Write a function that returns true if the input string contains spaces in the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_mixed_case(text):\n    '''\n    Write a function that returns true if the input string contains mixed case letters in the rightmost position.\n    '''\n    s = re.sub('[^A-Z]+','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_duplicate(text):\n    '''\n    Write a function that returns true if the input string contains duplicate entries in the rightmost position.\n    '''\n    s = re.sub('[^A-Z]+','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_non_numeric(text):\n    '''\n    Write a function that returns true if the input string contains non numeric characters in the rightmost position.\n    '''\n    s = re.sub('[^a-zA-Z0-9]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_starts_with_non_alphanumeric(text):\n    '''\n    Write a function that returns true if the input string contains non numeric characters in the rightmost position.\n    '''\n    s = re.sub('[^a-zA-Z0-9]+','',text)\n    if s == '':\n        return False\n    return True\ndef contains_at_least_once(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_at_least_once_with_dot(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    return True\ndef contains_at_least_once_with_dot_or_period(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    if '.' in s:\n        return True\n    return False\ndef contains_at_least_once_with_dot_or_period_and_period(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    if '.' in s:\n        if ',' in s:\n            return True\n    return False\ndef contains_at_least_once_with_dot_or_period_and_period_and_period(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    if '.' in s:\n        if ',' in s:\n            if'' in s:\n                return True\n    return False\ndef contains_at_least_once_with_dot_or_period_and_period_and_period_and_period(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    if '.' in s:\n        if ',' in s:\n            if'' in s:\n                return True\n    return False\ndef contains_at_least_once_with_dot_or_period_and_period_and_period_and_period_and_period(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',text)\n    if s == '':\n        return False\n    if '.' in s:\n        if ',' in s:\n            if'' in s:\n                return True\n    return False\ndef contains_at_least_once_with_dot_or_period_and_period_and_period_and_period_and_period_and_period(text):\n    '''\n    Write a function that returns true if the input string contains a single period at the rightmost position.\n    '''\n    s = re.sub('[^ ]','',tex",
        "num_ids": 15
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Create an empty string.\n    lowercase_text = ''\n    # Add each character to the string.\n    for char in text:\n        # Append '_' to the string if it's not the empty string.\n        if lowercase_text == '':\n            lowercase_text += char\n        # Append the character to the string.\n        else:\n            lowercase_text += char + '_'\n",
        "num_ids": 99
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regexp = re.compile(r'[A-Z]+')\n    return not regexp.search(text)\n",
        "num_ids": 32
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = 0\n    while a >= 1:\n        s += a\n        a -= 1\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a**2 + 2 * a * (a+1) + a ** 2) ** (1/2)\n",
        "num_ids": 30
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a \n",
        "num_ids": 9
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    for i in range(0, a, 1):\n        for j in range(0, a, 1):\n            perimeter += 1\n    return perimeter\n",
        "num_ids": 44
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a * 4)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a * 4)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = float(a)\n    if a > 0:\n        return 4 * a\n    else:\n        return None\n",
        "num_ids": 31
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return(4 * a)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    square_perimeter = math.sqrt(a**2)\n    return square_perimeter\n",
        "num_ids": 29
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [character for character in string if character in string]\n",
        "num_ids": 16
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = ''\n    for char in string:\n        if char in string:\n            output += char\n    return output\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string: \n        if i not in list: \n            list.append(i)\n    return list\n",
        "num_ids": 36
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    for i in range(len(list_string)):\n        if list_string[i] in list(string[i]):\n            list_string[i] = ''\n    list_string = ''.join(list_string)\n    return list_string\n",
        "num_ids": 73
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string.lower() if char in string.lower()]\n",
        "num_ids": 22
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = list(string)\n    i = 0\n    while i < len(str1):\n        if str1[i] in str1[0:len(str1)-i]:\n            str1.pop(i)\n        else:\n            i += 1\n    return ''.join(str1)\n",
        "num_ids": 75
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for char in string:\n        if char in string[0:len(string)-1]:\n            new_list.append(char)\n        else:\n            new_list.append('_')\n    return ''.join(new_list)\n",
        "num_ids": 66
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n",
        "num_ids": 9
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    a_list = []\n    \n    for x in string:\n        if x in string[0]:\n            a_list.append(x)\n",
        "num_ids": 37
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = string.replace(\" \",\"\")\n    final_string = []\n    for i in new_string:\n        if i not in final_string:\n            final_string.append(i)\n    return final_string\n",
        "num_ids": 57
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    return len(list(dict.fromkeys(nums))) > 0\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if not num in arraynums:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums.copy()\n    array.sort()\n    index = []\n    for i in range(len(array)):\n        if array[i] not in index:\n            index.append(array[i])\n    return len(index) >= 2\n",
        "num_ids": 65
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    return True if arraynums == [x for x in arraynums] else False\n",
        "num_ids": 30
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicated = set(arraynums)\n",
        "num_ids": 14
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert arraynums[0] == arraynums[1] == arraynums[2] == arraynums[3] == arraynums[4] == arraynums[5] == arraynums[6] == arraynums[7] == arraynums[8] == arraynums[9] == arraynums[10] == arraynums[11] == arraynums[12] == arraynums[13] == arraynums[14] == arraynums[15] == arraynums[16] == arraynums[17] == arraynums[18] == arraynums[19] == arraynums[20] == arraynums[21] == arraynums[22] == arraynums[23] == arraynums[24] == arraynums[25] == arraynums[26] == arraynums[27] == arraynums[28] == arraynums[29] == arraynums[30] == arraynums[31] == arraynums[32] == arraynums[33] == arraynums[34] == arraynums[35] == arraynums[36] == arraynums[37] == arraynums[38] == arraynums[39] == arraynums[40] == arraynums[41] == arraynums[42] == arraynums[43] == arraynums[44] == arraynums[45] == arraynums[46] == arraynums[47] == arraynums[48] == arraynums[49] == arraynums[50] == arraynums[51] == arraynums[52] == arraynums[53] == arraynums[54] == arraynums[55] == arraynums[56] == arraynums[57] == arraynums[58] == arraynums[59] == arraynums[60] == arraynums[61] == arraynums[62] == arraynums[63] == arraynums[64] == arraynums[65] == arraynums[66] == arraynums[67] == arraynums[68] == arraynums[69] == arraynums[70] == arraynums[71] == arraynums[72] == arraynums[73] == arraynums[74] == arraynums[75] == arraynums[76] == arraynums[77] == arraynums[78] == arraynums[79] == arraynums[80] == arraynums[81] == arraynums[82] == arraynums[83] == arraynums[84] == arraynums[85] == arraynums[86] == arraynums[87] == arraynums[88] == arraynums[89] == arraynums[90] == arraynums[91] == arraynums[92] == arraynums[93] == arraynums[94] == arraynums[95] == arraynums[96] == arraynums[97] == arraynums[98] == arraynums[99] == arraynums[100] == arraynums[101] == arraynums[102] == arraynums[103] == arraynums[104] == arraynums[105] == arraynums[106] == arraynums[107] == arraynums[108] == arraynums[109] == arraynums[110] == arraynums[111] == arraynums[112] == arraynums[113] == arraynums[114] == arraynums[115] == arraynums[116] == arraynums[117] == arraynums[118] == arraynums[119] == arraynums[120] == arraynums[121] == arraynums[122] == arraynums[123] == arraynums[124] == arraynums[125] == arraynums[126] == arraynums[127] == arraynums[128] == arraynums[129] == arraynums[130] == arraynums[131] == arraynums[132] == arraynums[133] == arraynums[134] == arraynums[135] == arraynums[136] == arraynums[137] == arraynums[138] == arraynums[139] == arraynums[140] == arraynums[141] == arraynums[142] == arraynums[143] == arraynums[144] == arraynums[145] == arraynums[146] == arraynums[147] == arraynums[148] == arraynums[149] == arraynums[150] == arraynums[151] == arraynums[152] == arraynums[153] == arraynums[154] == arraynums[155] == arraynums[156] == arraynums[157] == arraynums[158] == arraynums[159] == arraynums[160] == arraynums[161] == arraynums[162] == arraynums[163] == arraynums[164] == arraynums[165] == arraynums[166] == arraynums[167] == arraynums[168] == arraynums[169] == arraynums[170] == arraynums[171] == arraynums[172] == arraynums[173] == arraynums[174] == arraynums[175] == arraynums[176] == arraynums[177] == arraynums[178] == arraynums[179] == arraynums[180] == arraynums[181] == arraynums[182] == arraynums[183] == arraynums[184] == arraynums[185] == arraynums[186] == arraynums[187] == arraynums[188] == arraynums[189] == arraynums[190] == arraynums[191] == arraynums[192] == arraynums[193] == arraynums[194] == arraynums[195] == arraynums[196] == arraynums[197] == arraynums[198] == arraynums[199] == arraynums[200] == arraynums[201] == arraynums[202] == arraynums[203] == arraynums[204] == arraynums[205] == arraynums[206] == arraynums[207] == arraynums[208] == arraynums[209] == arraynums[210] == arraynums[211] == arraynums[212] == arraynums[213] == arraynums[214] == arraynums[215] == arraynums[216] == arraynums[217] == arraynums[218] == arraynums[219] == arraynums[220] == arraynums[221] == arraynums[222] == arraynums[223] == arraynums[224] == arraynums[225] == arraynums[226] == arraynums[227] == arraynums[228] == arraynums[229] == arraynums[230] == arraynums[231] == arraynums[232] == arraynums[233] == arraynums[234] == arraynums[235] == arraynums[236] == arraynums[237] == arraynums[238] == arraynums[239] == arraynums[240] == arraynums[241] == arraynums[242] == arraynums[243] == arraynums[244] == arraynums[245] == arraynums[246] == arraynums[247] == arraynums[248] == arraynums[249] == arraynums[250] == arraynums[251] == arraynums[252] == arraynums[253] == arraynums[254] == arraynums[255] == arraynums[256] == arraynums[257] == arraynums[258] == arraynums[259] == arraynums[260] == arraynums[261] == arraynums[262] == arraynums[263] == arraynums[264] == arraynums[265] == arraynums[266] == arraynums[267] == arraynums[268] == arraynums[269] == arraynums[270] == arraynums[271] == arraynums[272] == arraynums[273] == arraynums[274] == arraynums[275] == arraynums[276] == arraynums[277] == arraynums[278] == arraynums[279] == arraynums[280] == arraynums[281] == arraynums[282] == arraynums[283] == arraynums[284] == arraynums[285] == arraynums[286",
        "num_ids": 2011
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # For array\n    array = arraynums\n    \n    # For loop\n    for element in array:\n        \n        # Check if element is in array\n        if element not in array:\n            return False\n        \n    return True",
        "num_ids": 56
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr=arraynums\n    count=0\n    for i in arr:\n        if count == 0:\n            for j in range(len(arr)):\n                if arr[j] == i:\n                    count+=1\n                else:\n                    count=0\n                    break\n        else:\n            if arr[j] == i:\n                count+=1\n            else:\n                return False\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 113
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert(arraynums[0]!= arraynums[1])\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) > 0\n",
        "num_ids": 15
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 5 or x == 2 or x == 4 or x == 1\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 7:\n        return False\n    if x <= 7 and x >= 8:\n        return True\n    if x <= 8 and x >= 9:\n        return False\n    if x <= 9 and x >= 10:\n        return True\n    \n    \ndef is_woodball(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 7:\n        return False\n    if x <= 7 and x >= 8:\n        return True\n    if x <= 8 and x >= 9:\n        return True\n    if x <= 9 and x >= 10:\n        return True\n    \n    \ndef is_helicopate(x):\n    '''\n    Write a function to check if the given number is helicopate or not.\n    '''\n    if x <= 7:\n        return False\n    if x <= 7 and x >= 8:\n        return True\n    if x <= 8 and x >= 9:\n        return True\n    if x <= 9 and x >= 10:\n        return True\n    \n",
        "num_ids": 60
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%1==1\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = 0\n    if x < 1:\n        print(\"This number can't be woodball.\")\n    elif x == 2:\n        woodball = 1\n    elif x >= 3 and x <= 6:\n        woodball = 2\n    else:\n        woodball = 3\n    return woodball\n",
        "num_ids": 74
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return False\n",
        "num_ids": 6
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 10 == 3\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n        \n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<0:\n        return rev(num-1)\n    if num<10:\n        return num\n    elif num>10:\n        return 'not allowed'\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    rev=num[::-1]\n    if num==rev:\n        print(num)\n    else:\n        print('The number is not one less than twice its reverse')\nrev(num=list(map(int,input('enter the number: ').split())))",
        "num_ids": 70
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    a=str(num)\n    for i in range(len(a)):\n        if a[i]==\"7\":\n            a=a.replace(\"7\",\"\")\n            break\n    for i in range(len(a)-1,0,-1):\n        if a[i]==\"7\":\n            a=a.replace(\"7\",\"\")\n            break\n    return a\n",
        "num_ids": 93
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1:\n        return True\n    if num == num:\n        return True\n    if num < num:\n        return False\n    else:\n        return rev(num-1)\n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # write your code here\n    if num<2:\n        return False\n    else:\n        num1=num%10\n        rev1=0\n        for i in range(num1):\n            rev1=rev1*10+num%10\n            num//=10\n        if rev1==num:\n            return True\n        else:\n            return False\n        \n",
        "num_ids": 89
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        print(\"The given number is invalid!\")\n    else:\n        print(num)\n        reverse(num)\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num%2)!= 0\n",
        "num_ids": 12
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = ''\n    if num > 0:\n        while num!= 0:\n            rev_num += str(num % 10)\n            num = num // 10\n        rev_num = rev_num[::-1]\n        if int(rev_num) == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 81
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def is_less_than_twice(num):\n        if num < 2:\n            return False\n        elif num % 2 == 0:\n            return True\n        elif num % 2!= 0:\n            return False\n        else:\n            return is_less_than_twice(num/2)\n    return is_less_than_twice(num)\n",
        "num_ids": 90
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #create a dictionary to store the max number as a key and its value as a dictionary\n    max_dict = {}\n    for num in arr :\n        max_dict[num] = 0\n    #loop through the list and check if num > 0\n    for num in arr :\n        if num > 0 :\n            if (num in max_dict) == False :\n                max_dict[num] = 1\n            else :\n                max_dict[num] += 1\n    #compare all elements with each other in dictionary\n    for num,count in max_dict.items() :\n        if count == 1 :\n            return num\n    \narr = [5,7,1,2,3,4]\nprint(find_Max_Num(arr)",
        "num_ids": 175
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    dig_arr = list(str(arr))\n    digit_count = 0\n    for i in range(0,len(dig_arr)) : \n        digit_count += 1\n        if digit_count > len(dig_arr) - 1 :\n            break\n    \n    digit_arr = dig_arr[0:digit_count]\n    final_digit = digit_arr[len(digit_arr) - 1]\n    \n    return final_digit\n",
        "num_ids": 109
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum = 0\n    count = 0\n    for i in range(len(arr)) : \n        for j in range(i, len(arr)) : \n            if arr[j] > arr[i] : \n                arr[i], arr[j] = arr[j], arr[i] \n    for i in arr : \n        if i == maxnum : \n            count += 1\n    if count == 0 : \n        print(0) \n        return\n    else : \n        print(maxnum) \n        return \n",
        "num_ids": 132
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] < Max_Num : \n            Max_Num = arr[i] \n    return Max_Num \n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] > max :\n                max = arr[i]+arr[j]\n    return max\n",
        "num_ids": 66
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) :\n        for j in range(i,len(arr)) :\n            for k in range(j,len(arr)) :\n                # print(arr[i],arr[j],arr[k])\n                if arr[i] + arr[j] + arr[k] > max_num :\n                    max_num = arr[i] + arr[j] + arr[k]\n    return max_num \n",
        "num_ids": 115
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    num_count = 1\n    for i in range(1, len(arr)) : \n        if arr[i] > max_num : \n            max_num = arr[i] \n            num_count = 1\n        else : \n            num_count += 1\n    return max_num \n",
        "num_ids": 84
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # convert all numbers to strings\n    # convert to integer\n    # sort \n    # add to list\n    # return list\n    # O(n) time\n    # O(1) space\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize Max to a very big number, which will be returned\n    Max = 10**7\n    \n    # Iterate through given digits \n    for num in arr :\n        # Update Max if the current digit is already accounted for \n        if num in arr : Max = max(Max, num)\n        # Remove the current digit from the list \n        arr.remove(num)\n        # Check if current digit is valid \n        if num < 9 :\n            # add current digit to current max, if not already added \n            if Max<num : Max = num\n        # If the current digit is not a valid digit, set current max to 1 \n        else : Max = 1\n    # Return the largest number \n    return Max\n",
        "num_ids": 173
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if(len(arr) == 0):\n        return None\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "num_ids": 56
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    if x < y:\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y >= 0:\n        print(\"x < 0 and y >= 0 is false\")\n    elif x < 0 and y < 0:\n        print(\"x < 0 and y < 0 is false\")\n    elif x >= 0 and y < 0:\n        print(\"x >= 0 and y < 0 is false\")\n    elif x >= 0 and y >= 0:\n        print(\"x >= 0 and y >= 0 is false\")\n    else:\n        print(\"both are equal\")\n",
        "num_ids": 117
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if both numbers are equal \n    if x == y: \n        return \"Same Number\"\n    # Check if both numbers are negative \n    elif x < 0 and y < 0: \n        return \"Negative Number\"\n    # Check if both numbers are positive \n    elif x > 0 and y > 0: \n        return \"Positive Number\"\n",
        "num_ids": 89
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # write your code here\n    x=str(x)\n    y=str(y)\n    if x<0 or y<0:\n        return False\n    if x>=y:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign1 = 0\n    sign2 = 0\n    if x > 0:\n        sign1 = 1\n    elif x < 0:\n        sign2 = 1\n    else:\n        sign1 = -1\n    if y > 0:\n        sign2 = 1\n    elif y < 0:\n        sign1 = -1\n    else:\n        sign2 = -1\n    return sign1,sign2\n",
        "num_ids": 99
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return y<x\n    else:\n        return x>y\n",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y < 0\n",
        "num_ids": 12
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return x < y\n    elif y > x:\n        return y < x\n    else:\n        return False\n    \n    \n    # def opposite_Signs(x,y):\n    #     if x > y:\n    #         return x < y\n    #     elif y > x:\n    #         return y < x\n    #     else:\n    #         return False\n        \n    \n    # def opposite_Signs(x,y):\n    #     if x > y:\n    #         return x < y\n    #     elif y > x:\n    #         return y < x\n    #     else:\n    #         return False\n    \ndef main():\n    number = int(input(\"Enter a number : \"))\n    \n    print(\"1. check no of odd numbers\")\n    print(\"2. check no of even numbers\")\n    print(\"3. check for odd and even numbers\")\n    print(\"4. check if the numbers are even and odd \")\n    print(\"5. check if the numbers are prime or not \")\n    print(\"6. check if the numbers are 0 \")\n    print(\"7. check if the numbers are negative \")\n    print(\"8. exit\")\n    \n    ch = int(input(\"Enter your choice : \"))\n    \n    if ch == 1:\n        print(\"No of odd numbers:\", odd_numbers(number))\n    elif ch == 2:\n        print(\"No of even numbers:\", even_numbers(number))\n    elif ch == 3:\n        print(\"Check for odd and even numbers:\", odd_even_numbers(number))\n    elif ch == 4:\n        print(\"check if the numbers are even and odd:\", even_odd_numbers(number))\n    elif ch == 5:\n        print(\"check if the numbers are prime or not:\", is_prime(number))\n    elif ch == 6:\n        print(\"check if the numbers are 0:\", is_zero(number))\n    elif ch == 7:\n        print(\"check if the numbers are negative:\", is_negative(number))\n    elif ch == 8:\n        exit()\n    else:\n        print(\"Invalid Input\")\n        \n",
        "num_ids": 524
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y :\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<y):\n        if(x%2==0):\n            return False\n        else:\n            return True\n    else:\n        if(x%2!=0):\n            return False\n        else:\n            return True\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    d = n//2\n    while d >= 1:\n        if (n % d) == 0:\n            return d\n        d -= 1\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n-1) * (n-1) * (n-1)\n",
        "num_ids": 49
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    elif (n == 2): \n        return 3\n    elif (n == 3): \n        return 6\n    elif (n == 4): \n        return 9\n    elif (n == 5): \n        return 12\n    elif (n == 6): \n        return 15\n    elif (n == 7): \n        return 18\n    elif (n == 8): \n        return 21\n    elif (n == 9): \n        return 24\n    elif (n == 10): \n        return 27\n    elif (n == 11): \n        return 30\n    elif (n == 12): \n        return 33\n    elif (n == 13): \n        return 36\n    elif (n == 14): \n        return 39\n    elif (n == 15): \n        return 42\n    elif (n == 16): \n        return 45\n    elif (n == 17): \n        return 48\n    elif (n == 18): \n        return 51\n    elif (n == 19): \n        return 54\n    elif (n == 20): \n        return 57\n    elif (n == 21): \n        return 60\n    elif (n == 22): \n        return 63\n    elif (n == 23): \n        return 66\n    elif (n == 24): \n        return 69\n    elif (n == 25): \n        return 72\n    elif (n == 26): \n        return 75\n    elif (n == 27): \n        return 78\n    elif (n == 28): \n        return 81\n    elif (n == 29): \n        return 84\n    elif (n == 30): \n        return 87\n    elif (n == 31): \n        return 90\n    elif (n == 32): \n        return 93\n    elif (n == 33): \n        return 96\n    elif (n == 34): \n        return 99\n    elif (n == 35): \n        return 102\n    elif (n == 36): \n        return 105\n    elif (n == 37): \n        return 108\n    elif (n == 38): \n        return 111\n    elif (n == 39): \n        return 114\n    elif (n == 40): \n        return 117\n    elif (n == 41): \n        return 120\n    elif (n == 42): \n        return 123\n    elif (n == 43): \n        return 126\n    elif (n == 44): \n        return 129\n    elif (n == 45): \n        return 132\n    elif (n == 46): \n        return 135\n    elif (n == 47): \n        return 138\n    elif (n == 48): \n        return 141\n    elif (n == 49): \n        return 144\n    elif (n == 50): \n        return 147\n    elif (n == 51): \n        return 150\n    elif (n == 52): \n        return 153\n    elif (n == 53): \n        return 156\n    elif (n == 54): \n        return 159\n    elif (n == 55): \n        return 162\n    elif (n == 56): \n        return 165\n    elif (n == 57): \n        return 168\n    elif (n == 58): \n        return 171\n    elif (n == 59): \n        return 174\n    elif (n == 60): \n        return 177\n    elif (n == 61): \n        return 180\n    elif (n == 62): \n        return 183\n    elif (n == 63): \n        return 186\n    elif (n == 64): \n        return 189\n    elif (n == 65): \n        return 192\n    elif (n == 66): \n        return 195\n    elif (n == 67): \n        return 198\n    elif (n == 68): \n        return 201\n    elif (n == 69): \n        return 204\n    elif (n == 70): \n        return 207\n    elif (n == 71): \n        return 210\n    elif (n == 72): \n        return 213\n    elif (n == 73): \n        return 216\n    elif (n == 74): \n        return 219\n    elif (n == 75): \n        return 222\n    elif (n == 76): \n        return 225\n    elif (n == 77): \n        return 228\n    elif (n == 78): \n        return 231\n    elif (n == 79): \n        return 234\n    elif (n == 80): \n        return 237\n    elif (n == 81): \n        return 240\n    elif (n == 82): \n        return 243\n    elif (n == 83): \n        return 246\n    elif (n == 84): \n        return 249\n    elif (n == 85): \n        return 252\n    elif (n == 86): \n        return 255\n    elif (n == 87): \n        return 258\n    elif (n == 88): \n        return 261\n    elif (n == 89): \n        return 264\n    elif (n == 90): \n        return 267\n    elif (n == 91): \n        return 270\n    elif (n == 92): \n        return 273\n    elif (n == 93): \n        return 276\n    elif (n == 94): \n        return 279\n    elif (n == 95): \n        return 282\n    elif (n == 96): \n        return 285\n    elif (n == 97): \n        return 288\n    elif (n == 98): \n        return 291\n    elif (n == 99): \n        return 294\n    elif (n == 100): \n        return 297\n    elif (n == 101): \n        return 300\n    elif (n == 102): \n        return 303\n    elif (n == 103): \n        return 306\n    elif (n == 104): \n        return 309\n    elif (n == 105): \n        return 312\n    elif (n == 106): \n        return 315\n    elif (n == 107): \n        return 318\n    elif (n == 108): \n        return 321\n    elif (n == 109): \n        return 324\n    elif (n == 110): \n        return 327\n    elif (n == 111): \n        return 330\n    elif (n == 112): \n        return 333\n    elif (n == 113): \n        return 336\n    elif (n == 114): \n        return 349\n    elif (n == 115): \n        return 352\n    elif (n == 116): \n        return 355\n    elif (n == 117): \n        return 358\n    elif (n == 118): \n        return 361\n    elif (n == 119): \n        return 364\n    elif (n == 120): \n        return 367\n    elif (n == 121): \n        return 370\n    elif (n == 122): \n        return 373\n    elif (n == 123): \n        return 376\n    elif (n == 124): \n        return 379\n    elif (n == 125): \n        return 382\n    elif (n == 126): \n        return 385\n    elif (n == 127): \n        return 388\n    elif (n == 128): \n        return 391\n    elif (n == 129): \n        return 394\n    elif (n == 130): \n        return 398\n    elif (n == 131): \n        return 401\n    elif (n == 132): \n        return 414\n    elif (n == 133): \n        return 417\n    elif (n == 134): \n        return 420\n    elif (n == 135): \n        return 423\n    elif (n == 136): \n        return 426\n    elif (n == 137): \n        return 429\n    elif (n == 138): \n        return 432\n    elif (n == 139): \n        return 435\n    elif (n == 140): \n        return 438\n    elif (n == 141): \n        return 451\n    elif (n == 142): \n        return 454\n    elif (n == 143): ",
        "num_ids": 2017
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    digits = [0, 1] \n    for i in range(n - 1): \n        digits.append(digits[-1] + digits[-2]) \n    return digits[-1]\n",
        "num_ids": 55
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    while (n - a) // 3 >= 0:\n        a = (n-a) // 3\n    return n % a\n",
        "num_ids": 37
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n % 2 == 0: \n        return n//2\n    else: \n        return 3 * n + 1\n",
        "num_ids": 44
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    square = int(n**0.5)\n    if square * (square + 1) == n:\n        return square\n    else:\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * (n - 1) / 2\n",
        "num_ids": 29
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        return False\n    else: \n        i = 1\n        while n / i >= 10: \n            i += 1\n        if n % i == 0: \n            return True\n        else: \n            return False\n    \ndef is_primitive(n): \n    '''\n    Write a function to check if a given number is a primitive number.\n    '''\n    if n in [1, 3, 5, 7, 11, 13]: \n        return True\n    if n in [2, 4, 6, 9, 12, 15]: \n        return True\n    if n in [1, 3, 5, 7, 11, 13, 21, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]: \n        return True\n    if n in [2, 4, 6, 9, 12, 15, 20, 23, 28, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 91]: \n        return True\n    return False\n",
        "num_ids": 168
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    i, res = 0, 1\n    while i < len(s):\n        j = 0\n        while i + j < len(s) and s[i] == s[i + j]:\n            j += 1\n        if j!= 0:\n            res += res*(j+1)\n        i += j\n    return res\n",
        "num_ids": 91
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    if l == 0:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = []\n    for i in range(len(s)):\n        temp = 0\n        for j in range(i, len(s)):\n            temp += int(s[j])\n            if temp > len(s):\n                break\n        else:\n            res.append(temp)\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = defaultdict(int)\n    for i in range(len(s)):\n        if s[i]=='0':\n            pass\n        elif s[i]=='1':\n            result['1'] += 1\n        else:\n            result['0'] += 1\n    return sum(result.values())\n",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0] * n\n    if n <= 2:\n        return 1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if s[i] == s[j] and dp[j] + 1 == dp[i]:\n                dp[j] += 1\n    return dp[-1]\n",
        "num_ids": 97
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    count = 0\n    n = len(s)\n    for i in range(1,n):\n        s[i] = int(s[i])\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            return count\n    return count\ndef palindrome_string(s):\n    '''\n    A palindrome string is a string that reads the same backwards and forwards.\n    '''\n    if not s:\n        return False\n    if s[0]!= s[-1]:\n        return False\n    return True\ndef dictionary_to_string(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    return''.join(map(str,s.keys()))\ndef count_words(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return 0\n    d = defaultdict(list)\n    n = len(s)\n    for i in range(n):\n        d[s[i]].append(i)\n    return sum(d.values())\ndef word_to_int(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return 0\n    return int(''.join(map(str,s)))\ndef count_total_elements(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return 0\n    return int(''.join(map(str,s)))\ndef count_substrings(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return 0\n    count = 0\n    n = len(s)\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            return count\n    return count\ndef longest_common_subsequence(s1, s2):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s1 or not s2:\n        return 0\n    d = defaultdict(list)\n    n = len(s1)\n    for i in range(n):\n        d[s1[i]].append(i)\n    for i in range(n):\n        d[s2[i]].append(i)\n    for i in range(1,n):\n        if s1[i] == s2[i]:\n            return d[s1[i-1]][i-1]\n        else:\n            return max(d[s2[i-1]][i],d[s1[i-1]][i-1])\ndef number_of_longest_subsequences(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return 0\n    d = defaultdict(list)\n    n = len(s)\n    for i in range(n):\n        d[s[i]].append(i)\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            return len(d[s[i]])\n        else:\n            return max(d[s[i]][i],d[s[i]][i+1])\ndef two_way_dictionary_to_string(d):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not d:\n        return ''\n    out = ''\n    for i in d:\n        if d[i]!= []:\n            out = out + i + ':' + ','.join(map(str,d[i])) + '\\n'\n    return out\ndef two_way_dict_to_string(d):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not d:\n        return ''\n    out = ''\n    for i in d:\n        out = out + i + ':' + ','.join(map(str,d[i])) + '\\n'\n    return out\ndef count_substrings_with_length(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return 0\n    n = len(s)\n    count = 0\n    d = defaultdict(list)\n    for i in range(n-1):\n        d[s[i]].append(i)\n    for i in range(n-2):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            if d[s[i]]:\n                count += min(d[s[i]][-1],d[s[i+1]][-1])\n            else:\n                count += 1\n    return count\ndef multiple_words(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return 0\n    d = defaultdict(list)\n    n = len(s)\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            d[s[i]].append(i)\n        else:\n            d[s[i]].append(i)\n    return len(d[s[-1]])\ndef is_palindrome(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    if s[0]!= s[-1]:\n        return False\n    return True\ndef is_palindrome2(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    return s == ''.join(s[::-1])\ndef is_palindrome3(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    return s == ''.join(s[::-1])[::-1]\ndef is_palindrome4(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    return s == ''.join(s[::-1])[::-1][::-1]\ndef is_palindrome5(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    if s == ''.join(s[::-1])[::-1][::-1]:\n        return True\n    return False\ndef is_palindrome6(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    return s == ''.join(s[::-1])[::-1][::-1][::-1]\ndef is_palindrome7(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    return s == ''.join(s[::-1])[::-1][::-1]\ndef is_palindrome8(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    if s == ''.join(s[::-1])[::-1]:\n        return True\n    return False\ndef is_palindrome9(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    return s == ''.join(s[::-1])[::-1][::-1]\ndef is_palindrome10(s):\n    '''\n    A dictionary is a collection of keys and their associated values.\n    '''\n    if not s:\n        return False\n    return s == ''.join(s[::-1])",
        "num_ids": 26
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length=0\n    for i in range(len(s)-1):\n        if s[i]!=s[i+1]:\n            length+=1\n    return length\n",
        "num_ids": 44
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_by_digit = defaultdict(int)\n    for i in range(1, len(s)):\n        if int(s[i]) == s[i-1]:\n            count_by_digit[int(s[i])] += 1\n        else:\n            count_by_digit[int(s[i])] += 1\n    result = 0\n    for j in count_by_digit:\n        if count_by_digit[j] == 0:\n            continue\n        result += count_by_digit[j]\n    return result\n",
        "num_ids": 132
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    for l in s:\n        dic[l] += 1\n    return sum([dic[i] for i in dic])\n",
        "num_ids": 44
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        n = 0\n        for j in range(i,len(s)):\n            if s[j].isdigit():\n                n = n + int(s[j])\n        if n == int(s[i:len(s)]) :\n            count = count + 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num_list = list(xs)\n    num_list.sort()\n    n = len(num_list)\n    for i in range(n):\n        if num_list[i] == xs[i]:\n            return num_list[i]\n",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n",
        "num_ids": 56
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return -1\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return xs[min(xs)]\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    l = []\n    for i in xs:\n        if i not in l:\n            l.append(i)\n    return min(l)\n",
        "num_ids": 38
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "num_ids": 36
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return sorted(xs)[-1]\n",
        "num_ids": 12
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for x in xs:\n        if x < min:\n            min = x\n    return min\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    smallest_index = 0\n",
        "num_ids": 22
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # code here\n    max_difference = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i+1] > test_list[i]:\n            max_difference = test_list[i] - test_list[i+1]\n    return max_difference\n",
        "num_ids": 78
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum_difference = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            difference = test_list[i]-test_list[j]\n            if difference > maximum_difference:\n                maximum_difference = difference\n",
        "num_ids": 79
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Set the max_difference to 0\n    max_difference = 0\n    # Set the current_min to the first number in the tuple\n    current_min = test_list[0]\n    # Set the current_max to the last number in the tuple\n    current_max = test_list[len(test_list)-1]\n    # Set the loop to run till the max_difference is reached\n    while(current_min < current_max):\n        # Set the current_min to the value of the min index in the tuple\n        current_min = test_list[min(current_min, len(test_list)-1)]\n        # Set the current_max to the value of the max index in the tuple\n        current_max = test_list[max(current_max, 0)]\n        # Set the current_min to the value of the max index in the tuple\n        current_min = test_list[min(current_min, len(test_list)-1)]\n        # Set the max_difference to the max_difference + current_min - current_max\n        max_difference = max_difference + (current_max - current_min)\n    # Set the return value to the max_difference\n    return max_difference\n",
        "num_ids": 293
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_max_diff = []\n    i = 0\n    while i < len(test_list):\n        list_max_diff.append(abs(test_list[i][1] - test_list[i][0]))\n        i += 1\n    return max(list_max_diff)\n",
        "num_ids": 73
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    min_item = min(test_list)\n    max_item = max(test_list)\n    max_difference = max_item - min_item\n    return max_difference\n",
        "num_ids": 47
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = test_list[0] - test_list[1]\n    for pair in test_list:\n        if pair!= max_difference:\n            if max_difference < pair:\n                max_difference = pair\n    return max_difference\n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(x[0]-x[1]) for x in test_list])\n",
        "num_ids": 24
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for index in range(0, len(test_list) - 1):\n        if test_list[index] < test_list[index + 1]:\n            max_difference = max_difference + 1\n    return max_difference\n",
        "num_ids": 66
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 3:\n        return 0\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] > test_list[j] and i!= j:\n                temp_difference = abs(test_list[i] - test_list[j])\n                if temp_difference > max_difference:\n                    max_difference = temp_difference\n    return max_difference\n",
        "num_ids": 129
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    if len(test_list) == 0:\n        return 0\n    \n    # Finding the maximum difference from the element at the start of the tuple list\n    max_difference = max(abs(element - test_list[0][1]) for element in test_list[1:])\n    \n    # Finding the maximum difference from the element at the end of the tuple list\n    max_difference += max(abs(element - test_list[-1][1]) for element in test_list[:-1])\n    \n    return max_difference\n",
        "num_ids": 130
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    a = len(subjectmarks)\n    for i in range(a):\n        for j in range(i + 1, a):\n            if subjectmarks[i][1] < subjectmarks[j][1]:\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n    return subjectmarks\n",
        "num_ids": 79
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup:tup[1])\n    return subjectmarks\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks) < 2:\n        return subjectmarks\n",
        "num_ids": 18
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a list of tuples of two values\n    subject_marks = [tuple(subjectmarks[0:2])]\n    # Recurse through the list of tuples\n    for subject_marks in subject_marks:\n        # sort the tuple and combine the tuple with the previous tuple to form the list\n        subject_marks.append(tuple(subject_marks[1:]))\n    # Return the sorted list\n    return sorted(subject_marks, key = lambda x: x[1])\n",
        "num_ids": 115
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return(subjectmarks)\n",
        "num_ids": 29
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"--- Sort By Second Value ---\")\n    subjectmarks.sort(key = lambda x:x[1],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Last Name ---\")\n    subjectmarks.sort(key = lambda x:x[0],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Title ---\")\n    subjectmarks.sort(key = lambda x:x[2])\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[3])\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[4],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[5],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[6],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[7],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[8],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[9],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[10],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[11],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[12],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[13],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[14],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[15],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[16],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[17],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[18],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[19],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[20],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[21],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[22],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[23],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[24],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[25],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[26],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[27],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[28],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[29],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[30],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[31],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[32],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[33],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[34],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[35],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[36],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[37],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[38],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[39],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[40],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[41],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Lowest Score ---\")\n    subjectmarks.sort(key = lambda x:x[42],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Average Score ---\")\n    subjectmarks.sort(key = lambda x:x[43],reverse=True)\n    print(subjectmarks)\n    print(\"\\n\")\n    print(\"--- Sort By Highest Score ---\")\n    subjectmarks.sort(key = lambda x:x[44]",
        "num_ids": 2013
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list = data_list + data_list\n    return data_list\n",
        "num_ids": 21
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    final_list = []\n    \n    def recursive_sum(data):\n        '''\n        If the data is a list, it should be the last element in the data list,\n        if it's not, it should be the first element in the data list.\n        '''\n        if type(data) == list:\n            return sum(data) + recursive_sum(data[:-1])\n        else:\n            return data + recursive_sum(data[:-1])\n    \n    return recursive_sum(data_list)\n",
        "num_ids": 60
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    for i in data_list:\n        if type(i) == list:\n            result = result + recursive_list_sum(i)\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for i in data_list:\n        result += i\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_list = []\n    for element in data_list:\n        if type(element) == list:\n            new_list += element\n        else:\n            new_list.append(element)\n    return sum(new_list)\n",
        "num_ids": 58
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # https://www.geeksforgeeks.org/python-dictionary-from-list/\n    # https://stackoverflow.com/questions/9494846/flatten-a-list-of-dictionaries-in-python-dictionaries-to-a-single-dictionary\n    # https://docs.python.org/3/library/functions.html#map\n    # https://www.w3schools.com/python/python_functions_map.asp\n    # https://www.w3schools.com/python/python_functions_list_sum.asp\n    def flatten(l):\n        return [item for sublist in l for item in sublist]\n",
        "num_ids": 167
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    ",
        "num_ids": 62
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n",
        "num_ids": 7
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for element in list:\n        if element > 0:\n            positive += 1\n    return positive\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_numbers = 0\n    for element in list:\n        if element >= 0:\n            positive_numbers += 1\n    print(positive_numbers)\n",
        "num_ids": 41
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for x in list:\n        if x > 0:\n            pos += 1\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive += 1\n    return positive\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for i in list:\n        if i > 0:\n            sum = sum + 1\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    print(count)\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n    \n    \ndef n_pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n    \n    \ndef n_neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    neg_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n    return neg_count\n    \n    \ndef n_neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    neg_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n    return neg_count\n    \n    \ndef n_neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    neg_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n    return neg_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n        if num < 0:\n            neg_count += 1\n    return pos_count, neg_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n        if num < 0:\n            neg_count += 1\n    return pos_count, neg_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n        if num < 0:\n            neg_count += 1\n    return pos_count, neg_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n        if num < 0:\n            neg_count += 1\n    return pos_count, neg_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n        if num < 0:\n            neg_count += 1\n    return pos_count, neg_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num < 0:\n            pos_count += 1\n        if num > 0:\n            neg_count += 1\n    return pos_count, neg_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num < 0:\n            pos_count += 1\n        if num > 0:\n            neg_count += 1\n    return pos_count, neg_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in list:\n        if num < 0:\n            neg_count += 1\n        if num > 0:\n            pos_count += 1\n    return neg_count, pos_count\n    \n    \ndef n_neg_pos_count(list):\n    '''\n    Write a python function to count the number of negative and positive numbers in a list.\n    '''\n    neg_count = 0\n    pos_count = 0",
        "num_ids": 15
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    b = [0] * (n + 1)\n    b[0] = 1\n    for i in range(1, n+1):\n        b[i] = b[i-1] + b[i-1]\n        if i % 2 == 0:\n            b[i] = b[i] + b[i//2]\n    return b[n] % 1000000007\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n        \n",
        "num_ids": 39
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n",
        "num_ids": 17
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Use a table to store the number of ways to partition a set of Bell numbers.\n    ans = [0] * n\n",
        "num_ids": 31
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    total_ways = [0]*(n+1)\n    total_ways[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if j + i <= n:\n                total_ways[j+i] += total_ways[j]\n    return total_ways[n]\n",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell(n):\n        return int(bin(n)[2:])\n    \n    total = bell(n)\n    for i in range(2, total+1):\n        total -= 1\n        for j in range(1, i):\n            total += i - j\n    return total",
        "num_ids": 70
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n",
        "num_ids": 52
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def recursive_bell_number(num):\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 4\n        if num == 4:\n            return 8\n        return 0\n    \n    count = 0\n    for i in range(n):\n        count += recursive_bell_number(i)\n    return count\n",
        "num_ids": 93
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)):\n        if A[i]!= A[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    i = 1\n    while (i < len(A)):\n        if A[i] <= A[i - 1]:\n            is_monotonic = is_monotonic and A[i] > A[i - 1]\n        i = i + 1\n    return is_monotonic\n",
        "num_ids": 81
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if np.sum(A) < 2:\n        return False\n    for i in range(1, np.shape(A)[0] - 1):\n        if A[i] < A[i-1] and A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    c1 = True\n    c2 = True\n    c3 = True\n    c4 = True\n    c5 = True\n",
        "num_ids": 32
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    b = A.copy()\n    b.sort()\n    l = len(b)\n    if (l == 1):\n        return True\n    if (l == 2):\n        return True if b[0] > b[1] else False\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    b = A \n    for i in range(1, len(A)):\n        b[i] = min(A[i], A[i-1])\n",
        "num_ids": 41
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Below pseudocode will solve the problem. \n    # You will find it helpful to replace '==' with '==' to check the items.\n    return(all(a < b for a, b in zip(A, A[1:])))\n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check whether all elements in array are integers or floats\n    if(not(all([isinstance(element, (int, float)) for element in A]) and len(A) == len(set(A))  ):\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i in l:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i:j+1] == s for i in range(len(l)) for j in range(i+1, len(l)+1))\n",
        "num_ids": 41
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n    \n    if len(l) == 1:\n        return s in l\n    else:\n        if l[0] in s:\n            return is_sublist(l[1:], s)\n        else:\n            return False\n        \n",
        "num_ids": 73
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for x in range(len(l)):\n        for y in range(len(s)):\n            if l[x] == s[y]:\n                break\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i in l:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l==[]:\n        return True\n    for i in range(len(l)):\n        if s==l[i:i+len(s)]:\n            return True\n    return False\n        ",
        "num_ids": 50
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Your code here\n    if len(l) > len(s):\n        return False\n    elif len(l) == len(s):\n        return True\n    else:\n        return all([\n            is_sublist(l[i:], s[i:])\n            for i in range(len(l)-len(s))\n        ])\n",
        "num_ids": 85
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Your code here\n    return len(l) == len(s)\n",
        "num_ids": 20
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return True\n    if is_sublist(l[1:], s) == True:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple = []\n",
        "num_ids": 10
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_list = []\n    for i in range(0,len(Input),2):\n        if len(Input[i]) == len(Input[i+1]):\n            equal_list.append(Input[i])\n    if equal_list == []:\n        print(\"No, there is no equal tuple\")\n    else:\n        print(\"Yes, there are equal tuple\")\n    \n    \n    \n    \ndef find_equal_list(Input):\n    '''\n    Write a function to find whether all the given list have equal length or not.\n    '''\n    equal_list = []\n    for i in range(0,len(Input),2):\n        if len(Input[i]) == len(Input[i+1]):\n            equal_list.append(Input[i])\n    if equal_list == []:\n        print(\"No, there is no equal list\")\n    else:\n        print(\"Yes, there are equal list\")\n    \n    \ndef search(Input):\n    '''\n    Write a function to find whether all the given string is a palindrome or not.\n    '''\n    return Input == Input[::-1]\n    \n",
        "num_ids": 15
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = []\n",
        "num_ids": 7
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==0:\n        return True\n    \n    for i in range(0,len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            return False\n    \n    return True\n",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for key, value in Input.items():\n        if len(value)!= len(set(value)):\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) > 0:\n        for i in range(len(Input)):\n            if Input[i] == Input[i+1]:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)<2:\n        return False\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n            if len(Input[i])==len(Input[j]) and Input[i] not in Input[j]:\n                return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input)\n    # use the list comprehension to make a copy of the given list\n    list_tuple = [tuple(x) for x in Input]\n    # print(list_tuple)\n    # print(len(list_tuple))\n    # print(len(set(list_tuple)))\n",
        "num_ids": 79
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # get a tuple from the input\n    Input = tuple(map(int,Input.split()))\n",
        "num_ids": 26
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    dict1={}\n    # for list in Input:\n    #     for item in list:\n    #         if item in dict1:\n    #             dict1[item]+=1\n    #         else:\n    #             dict1[item]=1\n    # return dict1 == dict1.keys()\n",
        "num_ids": 74
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 81
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Intialize a counter to 0\n    counter = 0\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    first_index = 0\n    second_index = 1\n    \n    while second_index < len(nums):\n        # swap\n        # we need to find the index of the smallest element\n        smallest_index = first_index\n        for i in range(first_index, second_index):\n            if nums[i] < nums[smallest_index]:\n                smallest_index = i\n        \n        if smallest_index!= first_index:\n            nums[first_index], nums[smallest_index] = nums[smallest_index], nums[first_index]\n            first_index = smallest_index + 1\n            second_index = first_index + 1\n        \n        else:\n            return nums\n            break\n",
        "num_ids": 198
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Traverse through all array elements\n    for i in range(len(nums)):\n        # Find the minimum element in remaining\n        # unsorted array\n        min_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        # Swap the found minimum element with\n        # the first element\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\n",
        "num_ids": 138
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    start = 0\n    n = len(nums)\n    \n    # For each item in the list, find the minimum item.\n    # Change the current index to be between start and start + n - 1.\n    # If the current index is less than start, then swap.\n    # If the current index is greater than start, then swap.\n    # If both conditions are met, then it's a sorted list.\n    \n    for i in range(n):\n        start = i\n        for j in range(start + 1, n):\n            if nums[j] < nums[i]:\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n                #print(f\"swap index {i} and {j}\")\n        #print(f\"{nums}\")\n        \n    #print(f\"{nums}\")\n",
        "num_ids": 215
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(\"\\nList before sorting : \", nums)\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    print(\"List after sorting : \", nums)\n",
        "num_ids": 101
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def helper(lst, count):\n        if count <= 1:\n            return lst\n        if lst[0] > lst[1]:\n            count -= 1\n        if count == 1:\n            return lst\n        mid = (count//2)\n        left = helper(lst[:mid], count//2)\n        right = helper(lst[mid:], count//2)\n        return helper(left + right, count)\n    return helper(nums, len(nums))\n",
        "num_ids": 120
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums, left, right):\n        if left >= right:\n            return\n        mid = (left + right) // 2\n        if nums[mid] > nums[right]:\n            sort(nums, left, mid)\n        else:\n            sort(nums, mid+1, right)\n            sort(nums, left, mid)\n        return nums\n",
        "num_ids": 93
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    middle = len(nums) // 2\n    arr = nums[:middle]\n    arr2 = nums[middle:]\n    arr3 = arr2\n    arr4 = arr\n    \n    arr = comb_sort(arr)\n    arr2 = comb_sort(arr2)\n    arr3 = comb_sort(arr3)\n    arr4 = comb_sort(arr4)\n    \n    return arr + arr2 + arr3 + arr4\n    \ndef selection_sort(nums):\n    '''\n    Sort a list of numbers using the selection sort algorithm\n    '''\n    for i in range(len(nums)):\n        smallest = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[smallest]:\n                smallest = j\n        \n        temp = nums[i]\n        nums[i] = nums[smallest]\n        nums[smallest] = temp\n    return nums\n",
        "num_ids": 99
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if n==1:\n    #     return True\n    # if n==2:\n    #     return True\n    # if n%2==0:\n    #     return False\n    # # print(n//2)\n    # if n<=1:\n    #     return False\n    # x=n-1\n    # y=n-1\n    # if x==y:\n    #     return True\n    # for i in range(1,n):\n    #     if (n-i)==1:\n    #         return True\n    #     if n%2==0:\n    #         if i<n//2:\n    #             if n-i in (n//2,n//2+1):\n    #                 continue\n    #         else:\n    #             if n-i in (n//2,n-1):\n    #                 continue\n    #     if n%2==0:\n    #         if i<n//2:\n    #             if x<y:\n    #                 continue\n    #         else:\n    #             if y<x:\n    #                 continue\n    # return False\n    def Square(n): \n        # if n%2==0:\n        #     return False\n        # x=n//2\n        # y=n//2\n        # if x==y:\n        #     return True\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if n-i in (n//2,n//2+1):\n        #                 continue\n        #         else:\n        #             if n-i in (n//2,n-1):\n        #                 continue\n        # return False\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if x<y:\n        #                 continue\n        #         else:\n        #             if y<x:\n        #                 continue\n        # return False\n        if n%2==0:\n            return False\n        x=n//2\n        y=n//2\n        for i in range(1,n):\n            if (n-i)==1:\n                return True\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==1:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n        return False\n    def Square_2(n):\n        # if n%2==0:\n        #     return False\n        # x=n//2\n        # y=n//2\n        # if x==y:\n        #     return True\n        # for i in range(1,n):\n        #     if (n-i)==1:\n        #         return True\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if n-i in (n//2,n//2+1):\n        #                 continue\n        #         else:\n        #             if n-i in (n//2,n-1):\n        #                 continue\n        #     if n%2==0:\n        #         if i<n//2:\n        #             if x<y:\n        #                 continue\n        #         else:\n        #             if y<x:\n        #                 continue\n        # return False\n        if n%2==0:\n            return False\n        x=n//2\n        y=n//2\n        for i in range(1,n):\n            if (n-i)==1:\n                return True\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==0:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n            if n%2==1:\n                if i<n//2:\n                    if x<y:\n                        continue\n                else:\n                    if y<x:\n                        continue\n        return False\n    if n%2==0:\n        return False\n    x=n//2\n    y=n//2\n    for i in range(1,n):\n        if (n-i)==1:\n            return True\n        if n%2==0:\n            if i<n//2:\n                if x<y:\n                    continue\n            else:\n                if y<x:\n                    continue\n        if n%2==0:\n            if i<n//2:\n                if x<y:\n                    continue\n            else:\n                if y<x:\n                    continue\n    return False\n",
        "num_ids": 1257
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a, b = n, n+1\n    while a <= b:\n        if a%2 == 0:\n            if b%2 == 0:\n                print(a, \"and\", b)\n                if a == b:\n                    print(\"The number is exactly\")\n                elif a!= b:\n                    print(\"the number is not exactly\")\n                else:\n                    print(\"The number is equal to the square root\")\n            else:\n                print(a, \"and\", b)\n                if a == b:\n                    print(\"The number is exactly\")\n                elif a!= b:\n                    print(\"the number is not equal to the square root\")\n                else:\n                    print(\"The number is equal to the square root\")\n        else:\n            if b%2 == 0:\n                print(a, \"and\", b)\n                if a == b:\n                    print(\"The number is exactly\")\n                elif a!= b:\n                    print(\"the number is not equal to the square root\")\n                else:\n                    print(\"The number is equal to the square root\")\n            else:\n                print(a, \"and\", b)\n                if a == b:\n                    print(\"The number is exactly\")\n                elif a!= b:\n                    print(\"the number is not equal to the square root\")\n                else:\n                    print(\"The number is equal to the square root\")\n        a = a+1\n        b = b+1\n",
        "num_ids": 337
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n >= 0:\n        return abs(n) <= 1\n    else:\n        return n <= 1\n",
        "num_ids": 28
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n+1): \n        for j in range(0, i+1): \n            print(j, end ='') \n        print('\\n') \n",
        "num_ids": 49
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    elif n == 2: \n        return True\n    elif n % 2!= 0: \n        return False\n    else: \n        return (dif_Square(n//2) and dif_Square(n-1))\n",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = n-2\n    if n == dif:\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        return dif_Square(n-1) or dif_Square(n-2)\ndef main():\n    print(dif_Square(15))\nif __name__ == \"__main__\":\n    main()",
        "num_ids": 68
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Invalid number\"\n    elif n == 0:\n        return \"Valid\"\n    elif n == 1:\n        return \"Unable to find the difference\"\n    else:\n        if n%2 == 0:\n            return \"Square\"\n        else:\n            return \"Square\"\nn = eval(input(\"Enter a number to check the difference of two squares : \"))\nprint(dif_Square(n))\n",
        "num_ids": 108
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 1:\n        print(\"The number is not valid\")\n    if n == 2:\n        print(\"Square of 2 is square of 1\")\n    elif n == 3:\n        print(\"Square of 3 is square of 2\")\n    else:\n        print(\"Square of \" + str(n) + \" is square of \" + str(n-2))\n        \ndef dif_Square_Permutation(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not and to return the permutation of the two squares.\n    '''\n    lst = []\n    i = 0\n    for x in range(0,n):\n        if x == 0:\n            i = 1\n        elif x == n-1:\n            i = 2\n        else:\n            i = 3\n        lst.append(i)\n    for x in range(0, n):\n        lst[x] = str(lst[x])\n    lst.reverse()\n    if n == 1:\n        print(\"Square of \" + str(n) + \" is square of \" + str(n-1))\n    else:\n        print(\"Square of \" + str(n) + \" is square of \" + str(n-1) + \" and square of \" + str(i) + \" is square of \" + str(n-1-i))\n    return \"\".join(lst)\n    \n",
        "num_ids": 201
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # 1: \n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j] == colors[i]:\n                pass\n            else:\n                return False\n    # 2:\n    for j in range(len(colors)):\n        for i in range(len(patterns)):\n            if patterns[i] == colors[j]:\n                pass\n            else:\n                return False\n    # 3:\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j] == colors[i]:\n                pass\n            else:\n                return False\n    # 4:\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j] == colors[i]:\n                pass\n            else:\n                return False\n    # 5:\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j] == colors[i]:\n                pass\n            else:\n                return False\n    return True\n    ",
        "num_ids": 280
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n    #pass\ndef merge_colors(colors, patterns):\n    '''\n    Write a function to merge all the colors in the array of colors.\n    '''\n    pass\n    #pass\n",
        "num_ids": 9
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    curr = 0\n    for pattern in patterns:\n        color = colors[curr]\n        next_color = colors[curr+1]\n        \n        if color in pattern and next_color not in pattern:\n            return False\n        \n        curr += 1\n        \n    return True\n        \n",
        "num_ids": 75
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors == patterns:\n        return True\n    return False\n",
        "num_ids": 17
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    from itertools import combinations\n    same = []\n    for x in combinations(colors, 2):\n        if x[0] == x[1]:\n            if x[0] not in same:\n                same.append(x[0])\n            if x[1] not in same:\n                same.append(x[1])\n        else:\n            return False\n    return True\n    ",
        "num_ids": 94
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    samepatterns = 0\n    for pattern in patterns:\n        samepatterns += pattern[0] == colors[pattern[1]]\n    return samepatterns\n",
        "num_ids": 39
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #check that all patterns are distinct\n    if len(colors)!= len(patterns):\n        return False\n    \n    #check that all patterns are of the same length\n    if len(colors) < len(patterns):\n        return False\n    \n    #check that all patterns are of the same type\n    for i in range(len(colors)):\n        if type(colors[i]) is not type(patterns[i]):\n            return False\n    \n    #check that all patterns are of the same length\n    for i in range(len(colors)):\n        if len(colors[i])!= len(patterns[i]):\n            return False\n    \n    #check that all patterns are of the same type\n    for i in range(len(colors)):\n        if type(colors[i]) is not type(patterns[i]):\n            return False\n    \n    #check that all patterns are of the same length\n    for i in range(len(colors)):\n        if len(colors[i]) < len(patterns[i]):\n            return False\n    \n    #check that all patterns are of the same type\n    for i in range(len(colors)):\n        if type(colors[i]) is not type(patterns[i]):\n            return False\n    \n    #check that all patterns are of the same length\n    for i in range(len(colors)):\n        if len(colors[i]) < len(patterns[i]):\n            return False\n    \n    #check that all patterns are of the same type\n    for i in range(len(colors)):\n        if type(colors[i]) is not type(patterns[i]):\n            return False\n    \n    return True\n    ",
        "num_ids": 423
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Define starting conditions \n    m = len(colors) #number of colors\n    p = len(patterns) #number of patterns \n    i = 0\n    while(i < p):\n        # check whether pattern is already present in the color\n        if colors[i] == patterns[i]:\n            i += 1\n        else:\n            return False\n            #break \n    return True \n",
        "num_ids": 99
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for item in patterns:\n        if item == \",\":\n            count += 1\n    \n    if count == len(colors):\n        return True\n    else:\n        return False\n    \ndef is_not_empty(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for item in colors:\n        if item!= \",\":\n            return False\n    \n    return True\n",
        "num_ids": 28
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count_patterns = 0\n    for pattern in patterns:\n        if len(pattern) == len(colors):\n            for i in range(len(pattern)):\n                if pattern[i]!= colors[i]:\n                    return False\n            count_patterns += 1\n    return count_patterns == len(colors)\n",
        "num_ids": 80
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Write your code here\n    tup = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0:\n            tup.append(test_list[i])\n    return tup\n",
        "num_ids": 63
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        if i[0] % K == 0:\n            print(i)\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = list(test_list)\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                test_list[i][1] += 1\n",
        "num_ids": 81
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    d = []\n    for t in test_list:\n        if t[0] % K!= 0:\n            d.append(t)\n    return d\n",
        "num_ids": 41
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_set = set(test_list)\n    result = []\n    for item in test_set:\n        if item[0] % K == 0:\n            result.append(item)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    lst = []\n    for i in test_list:\n        if i[0] % K == 0:\n            lst.append(i)\n    return lst\n",
        "num_ids": 43
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        for j in range(i[0],i[1]+1):\n            if (j % K) == 0:\n                new_list.append((i[0],i[1]))\n    return new_list\n",
        "num_ids": 69
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp = []\n    for tuple in test_list:\n        if tuple[0] % K == 0:\n            temp.append(tuple)\n    return temp\n",
        "num_ids": 41
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        if i[0] % K == 0:\n            res.append(i)\n",
        "num_ids": 36
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tupl in test_list:\n        if len(tupl) % K!= 0:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n",
        "num_ids": 27
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print(\"Yes, \" + str(n) + \" is divisible by 11\")\n    else: \n        print(\"No, \" + str(n) + \" is not divisible by 11\")",
        "num_ids": 57
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    x = n%10\n    if x == 0:\n        return False\n    else:\n        return True\n    \n    \ndef is_Pow(n): \n    '''\n    Write a python function to find whether a number is an prime. \n    '''\n    \n    x = n%10\n    if x == 0:\n        return True\n    else:\n        i = 2\n        while i <= n/i:\n            if x == i:\n                return False\n            i += 1\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%10 == 1 or n%10 == 0: \n        return False\n    else: \n        return True\n",
        "num_ids": 31
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%10 == 11: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # YOUR CODE HERE\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    if n % 2 == 1:\n        return \"The length of the word is odd.\"\n    else:\n        return \"The length of the word is even.\"\n    \nprint(word_len(\"Hello world\")",
        "num_ids": 58
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return s, False\n    else:\n        return s, True\n",
        "num_ids": 30
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) > 1:\n        if len(s) % 2 == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(0)\n",
        "num_ids": 50
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if (length % 2) == 1: \n        return True\n    else: \n        return False\n",
        "num_ids": 35
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return False\n    else:\n        return True\n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n=len(s)\n    if n%2!=0:\n        return 'odd'\n    else:\n        return 'even'\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    odd_word = 'a'\n    if len(s) % 2 == 1: \n        odd_word = s[0] \n    return odd_word\n    \ndef remove_punctuation(s): \n    '''\n    Remove punctuation from the string.\n    '''\n    s = str(s)\n    for i in s: \n        if i in string.punctuation: \n            s = s.replace(i, \"\")\n    return s\n",
        "num_ids": 46
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'Odd'\n    else:\n        return 'Even'\n",
        "num_ids": 31
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        raise ValueError(\"The input must be >= 0\") \n    else: \n        return n % (n + 1)\n",
        "num_ids": 39
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    while (n > 1):\n        n = n / 2\n    return n\n",
        "num_ids": 21
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    def tetrahedral_number_iter(n): \n        '''\n        A function to find the nth tetrahedral number using a \n        linear sequence of different mnumbers.\n        '''\n        \n        if n == 0 or n == 1:\n            return n\n        \n        return tetrahedral_number_iter(n-1) + tetrahedral_number_iter(n-2) + tetrahedral_number_iter(n-3)\n    \n    return tetrahedral_number_iter(n)\n",
        "num_ids": 77
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    for i in range(0,n):\n        if i+1!= n:\n            for j in range(i+1,n+1):\n                if i==j:\n                    pass\n                else:\n                    if i<j and ((i+j)%n)!=0:\n                        if i!=j:\n                            return i\n",
        "num_ids": 84
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n + 1):\n        if i**2 % 3 == 0:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 4:\n        return n\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_num = []\n    for n in range(1, n):\n        #print(n)\n        if (n == 1):\n            tetra_num.append(n)\n            continue\n        #print(n)\n        #print(n/2)\n        if (n%2 == 0):\n            print(n)\n            #print(n/2)\n            print('1')\n            #print(n/2)\n            tetra_num.append(n/2)\n            #tetra_num.append((n/2))\n            #print(tetra_num)\n        #print(n/3)\n        if (n%3 == 0):\n            #print(n/3)\n            print('1')\n            #print(n/3)\n            tetra_num.append(n/3)\n            #tetra_num.append(n/3)\n            #print(tetra_num)\n            #print(n/5)\n            tetra_num.append(n/5)\n            #print(tetra_num)\n            #print(n/7)\n            tetra_num.append(n/7)\n            #print(tetra_num)\n            #print(n/9)\n            tetra_num.append(n/9)\n            #print(tetra_num)\n            #print(n/11)\n            tetra_num.append(n/11)\n            #print(tetra_num)\n            #print(n/13)\n            tetra_num.append(n/13)\n            #print(tetra_num)\n            #print(n/15)\n            tetra_num.append(n/15)\n            #print(tetra_num)\n            #print(n/17)\n            tetra_num.append(n/17)\n            #print(tetra_num)\n            #print(n/19)\n            tetra_num.append(n/19)\n            #print(tetra_num)\n            #print(n/21)\n            tetra_num.append(n/21)\n            #print(tetra_num)\n            #print(n/23)\n            tetra_num.append(n/23)\n            #print(tetra_num)\n            #print(n/25)\n            tetra_num.append(n/25)\n            #print(tetra_num)\n            #print(n/27)\n            tetra_num.append(n/27)\n            #print(tetra_num)\n            #print(n/29)\n            tetra_num.append(n/29)\n            #print(tetra_num)\n            #print(n/31)\n            tetra_num.append(n/31)\n            #print(tetra_num)\n            #print(n/33)\n            tetra_num.append(n/33)\n            #print(tetra_num)\n            #print(n/35)\n            tetra_num.append(n/35)\n            #print(tetra_num)\n            #print(n/37)\n            tetra_num.append(n/37)\n            #print(tetra_num)\n            #print(n/39)\n            tetra_num.append(n/39)\n            #print(tetra_num)\n            #print(n/41)\n            tetra_num.append(n/41)\n            #print(tetra_num)\n            #print(n/43)\n            tetra_num.append(n/43)\n            #print(tetra_num)\n            #print(n/45)\n            tetra_num.append(n/45)\n            #print(tetra_num)\n            #print(n/47)\n            tetra_num.append(n/47)\n            #print(tetra_num)\n            #print(n/49)\n            tetra_num.append(n/49)\n            #print(tetra_num)\n            #print(n/51)\n            tetra_num.append(n/51)\n            #print(tetra_num)\n            #print(n/53)\n            tetra_num.append(n/53)\n            #print(tetra_num)\n            #print(n/55)\n            tetra_num.append(n/55)\n            #print(tetra_num)\n            #print(n/57)\n            tetra_num.append(n/57)\n            #print(tetra_num)\n            #print(n/59)\n            tetra_num.append(n/59)\n            #print(tetra_num)\n            #print(n/61)\n            tetra_num.append(n/61)\n            #print(tetra_num)\n            #print(n/63)\n            tetra_num.append(n/63)\n            #print(tetra_num)\n            #print(n/65)\n            tetra_num.append(n/65)\n            #print(tetra_num)\n            #print(n/67)\n            tetra_num.append(n/67)\n            #print(tetra_num)\n            #print(n/69)\n            tetra_num.append(n/69)\n            #print(tetra_num)\n            #print(n/71)\n            tetra_num.append(n/71)\n            #print(tetra_num)\n            #print(n/73)\n            tetra_num.append(n/73)\n            #print(tetra_num)\n            #print(n/75)\n            tetra_num.append(n/75)\n            #print(tetra_num)\n            #print(n/77)\n            tetra_num.append(n/77)\n            #print(tetra_num)\n            #print(n/79)\n            tetra_num.append(n/79)\n            #print(tetra_num)\n            #print(n/81)\n            tetra_num.append(n/81)\n            #print(tetra_num)\n            #print(n/83)\n            tetra_num.append(n/83)\n            #print(tetra_num)\n            #print(n/85)\n            tetra_num.append(n/85)\n            #print(tetra_num)\n            #print(n/87)\n            tetra_num.append(n/87)\n            #print(tetra_num)\n            #print(n/89)\n            tetra_num.append(n/89)\n            #print(tetra_num)\n            #print(n/91)\n            tetra_num.append(n/91)\n            #print(tetra_num)\n            #print(n/93)\n            tetra_num.append(n/93)\n            #print(tetra_num)\n            #print(n/95)\n            tetra_num.append(n/95)\n            #print(tetra_num)\n            #print(n/97)\n            tetra_num.append(n/97)\n            #print(tetra_num)\n            #print(n/99)\n            tetra_num.append(n/99)\n            #print(tetra_num)\n            #print(n/101)\n            tetra_num.append(n/101)\n            #print(tetra_num)\n            #print(n/103)\n            tetra_num.append(n/103)\n            #print(tetra_num)\n            #print(n/105)\n            tetra_num.append(n/105)\n            #print(tetra_num)\n            #print(n/107)\n            tetra_num.append(n/107)\n            #print(tetra_num)\n            #print(n/109)\n            tetra_num.appen",
        "num_ids": 2017
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 12\n    elif n == 7:\n        return 14\n    elif n == 8:\n        return 16\n    elif n == 9:\n        return 18\n    elif n == 10:\n        return 20\n    elif n == 11:\n        return 22\n    elif n == 12:\n        return 24\n    elif n == 13:\n        return 26\n    elif n == 14:\n        return 28\n    elif n == 15:\n        return 30\n    elif n == 16:\n        return 32\n    elif n == 17:\n        return 34\n    elif n == 18:\n        return 36\n    elif n == 19:\n        return 38\n    elif n == 20:\n        return 40\n    elif n == 21:\n        return 42\n    elif n == 22:\n        return 44\n    elif n == 23:\n        return 46\n    elif n == 24:\n        return 48\n    elif n == 25:\n        return 50\n    elif n == 26:\n        return 52\n    elif n == 27:\n        return 54\n    elif n == 28:\n        return 56\n    elif n == 29:\n        return 58\n    elif n == 30:\n        return 60\n    elif n == 31:\n        return 62\n    elif n == 32:\n        return 64\n    elif n == 33:\n        return 66\n    elif n == 34:\n        return 68\n    elif n == 35:\n        return 70\n    elif n == 36:\n        return 72\n    elif n == 37:\n        return 74\n    elif n == 38:\n        return 76\n    elif n == 39:\n        return 78\n    elif n == 40:\n        return 80\n    elif n == 41:\n        return 82\n    elif n == 42:\n        return 84\n    elif n == 43:\n        return 86\n    elif n == 44:\n        return 88\n    elif n == 45:\n        return 90\n    elif n == 46:\n        return 92\n    elif n == 47:\n        return 94\n    elif n == 48:\n        return 96\n    elif n == 49:\n        return 98\n    elif n == 50:\n        return 100\n    elif n == 51:\n        return 102\n    elif n == 52:\n        return 104\n    elif n == 53:\n        return 106\n    elif n == 54:\n        return 108\n    elif n == 55:\n        return 110\n    elif n == 56:\n        return 112\n    elif n == 57:\n        return 114\n    elif n == 58:\n        return 116\n    elif n == 59:\n        return 118\n    elif n == 60:\n        return 120\n    elif n == 61:\n        return 122\n    elif n == 62:\n        return 124\n    elif n == 63:\n        return 126\n    elif n == 64:\n        return 128\n    elif n == 65:\n        return 130\n    elif n == 66:\n        return 132\n    elif n == 67:\n        return 134\n    elif n == 68:\n        return 136\n    elif n == 69:\n        return 138\n    elif n == 70:\n        return 140\n    elif n == 71:\n        return 142\n    elif n == 72:\n        return 144\n    elif n == 73:\n        return 146\n    elif n == 74:\n        return 148\n    elif n == 75:\n        return 150\n    elif n == 76:\n        return 152\n    elif n == 77:\n        return 154\n    elif n == 78:\n        return 156\n    elif n == 79:\n        return 158\n    elif n == 80:\n        return 160\n    elif n == 81:\n        return 162\n    elif n == 82:\n        return 164\n    elif n == 83:\n        return 166\n    elif n == 84:\n        return 168\n    elif n == 85:\n        return 170\n    elif n == 86:\n        return 172\n    elif n == 87:\n        return 174\n    elif n == 88:\n        return 176\n    elif n == 89:\n        return 178\n    elif n == 90:\n        return 180\n    elif n == 91:\n        return 182\n    elif n == 92:\n        return 184\n    elif n == 93:\n        return 186\n    elif n == 94:\n        return 188\n    elif n == 95:\n        return 190\n    elif n == 96:\n        return 192\n    elif n == 97:\n        return 194\n    elif n == 98:\n        return 196\n    elif n == 99:\n        return 198\n    elif n == 100:\n        return 200\n    elif n == 101:\n        return 202\n    elif n == 102:\n        return 204\n    elif n == 103:\n        return 206\n    elif n == 104:\n        return 208\n    elif n == 105:\n        return 210\n    elif n == 106:\n        return 212\n    elif n == 107:\n        return 214\n    elif n == 108:\n        return 216\n    elif n == 109:\n        return 218\n    elif n == 110:\n        return 220\n    elif n == 111:\n        return 222\n    elif n == 112:\n        return 224\n    elif n == 113:\n        return 226\n    elif n == 114:\n        return 228\n    elif n == 115:\n        return 230\n    elif n == 116:\n        return 232\n    elif n == 117:\n        return 234\n    elif n == 118:\n        return 236\n    elif n == 119:\n        return 238\n    elif n == 120:\n        return 240\n    elif n == 121:\n        return 242\n    elif n == 122:\n        return 244\n    elif n == 123:\n        return 246\n    elif n == 124:\n        return 248\n    elif n == 125:\n        return 250\n    elif n == 126:\n        return 252\n    elif n == 127:\n        return 254\n    elif n == 128:\n        return 256\n    elif n == 129:\n        return 258\n    elif n == 130:\n        return 260\n    elif n == 131:\n        return 262\n    elif n == 132:\n        return 264\n    elif n == 133:\n        return 266\n    elif n == 134:\n        return 268\n    elif n == 135:\n        return 270\n    elif n == 136:\n        return 272\n    elif n == 137:\n        return 274\n    elif n == 138:\n        return 276\n    elif n == 139:\n        return 278\n    elif n == 140:\n        return 280\n    elif n == 141:\n        return 282\n    elif n == 142:\n        return 284\n    elif n == 143:\n        return 286\n    elif n == 144:\n        return 288\n    elif n == 145:\n        return 290\n    elif n == 146:\n        return 292\n    elif n == 147:\n        return 294\n    elif n == 148:\n        return 296\n    elif n == 149:\n        return 298\n    elif n == 150:\n        return 300\n    elif n == 151:\n        return 302\n    elif n == 152:\n        return 304\n    elif n == 153:\n        return 306\n    elif n == 154:\n        return 308\n    elif n == 155:\n        return 310\n    elif n == 156:\n        return 312\n    elif n == 157:\n        return 314\n    elif n == 158:\n        return 316\n    elif n == 159:\n        return 318\n    elif n == 160:\n        return 320\n    elif n == 161:\n        return 321\n    elif n == 162:\n        return 322\n    elif n == 163:\n        return 324\n    elif n == 164:\n        return 326\n    elif n == 165:\n        return 328\n    elif n == 166:\n        return 330\n    elif n == 167:\n        return 332\n    elif n == 168:\n        return 33",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = []\n    if n < 0: \n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1,n+1):\n        if n%i == 0:\n            return i\n",
        "num_ids": 28
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r * r * math.pi\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * (r**3)\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi * radius * height)\ndef main():\n    '''\n    Write your own program that calculates and prints the volume of a sphere and cylinder.\n    '''\n    print(\"This program calculates and prints the volume of a sphere and cylinder.\")\n    sphere_volume = volume_sphere(float(input(\"Enter the radius of the sphere: \")))\n    print(sphere_volume, \"Sphere volume.\")\n    cylinder_volume = volume_cylinder(float(input(\"Enter the radius of the cylinder: \")), float(input(\"Enter the height of the cylinder: \")))\n    print(cylinder_volume, \"Cylinder volume.\")\n    \nmain()",
        "num_ids": 114
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "num_ids": 17
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r **3\n",
        "num_ids": 14
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = ((1/2)*(r**2))*(pi**2)\n    return v\n",
        "num_ids": 33
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4/3 * math.pi * pow(r,3), 3)\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3 * pi * (math.pow(r,3))\n",
        "num_ids": 28
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # return the sum of all the ASCII value\n    import string\n    return sum([ord(x) % ord('a') for x in strr]) % 26\n",
        "num_ids": 39
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a = ord(strr[0])\n    b = ord(strr[1])\n    c = ord(strr[2])\n    d = ord(strr[3])\n    return chr(a + b + c + d)\n",
        "num_ids": 60
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    strr = strr.lower()\n    res = \"\"\n    for i in range(0, len(strr)):\n        if strr[i] >= \"a\" and strr[i] <= \"z\":\n            res += chr(ord(strr[i]) - ord(\"a\") + 1)\n        else:\n            res += strr[i]\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return strr % 26\n",
        "num_ids": 9
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Set the 'lenth' of the given string to be 3\n    lenth = 3\n",
        "num_ids": 24
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    tot = 0\n    for i in range(len(strr)):\n        tot = tot + ord(strr[i]) % 26\n    return tot\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return int(strr, 36) % 26\n",
        "num_ids": 14
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = \"\"\n    for i in strr:\n        if i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\":\n            res+=i\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in strr:\n        res=res+(ord(i)-ord('a'))\n    return res%26\n",
        "num_ids": 36
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # make a list of all the characters in the string\n    strr = list(strr)\n    # print the list\n    print(strr)\n    # take the modulo of the string, value\n    mod = 0\n    # for every character in the string, calculate the modulo\n    for i in strr:\n        mod = mod + ord(i)\n    # check if the modulo is greater than 26\n    if mod > ord('z') - 1:\n        # print that modulo is greater than 26\n        return mod - ord('z') + 1\n    else:\n        return mod\n",
        "num_ids": 141
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        raise ValueError('n must be a positive integer')\n    sequence = [1,3,5,7,9,11,13,15] \n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 9\n    elif n == 6: \n        return 11\n    elif n == 7: \n        return 13\n    elif n == 8: \n        return 15\n    else: \n        return sequence[n - 1] \n",
        "num_ids": 164
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<=0:\n        return -1\n    if n==1:\n        return 0\n    else:\n        return sequence(n-1)+sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 0\n    j = 1\n    while (j <= n): \n        if (i % 2 == 0): \n            # print('even', end ='')\n            print(j, end ='')\n            i = i + 2\n        else: \n            # print('odd', end ='')\n            print(j, end ='')\n            i = i + 1\n        j = j + 2\n    return\n",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def helper(n):\n        if n == 0: return 0\n        if n % 3 == 0: return 1 + helper(n-1)\n        else: return helper(n-1)\n    return helper(n)\n",
        "num_ids": 54
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence_list = [1, 3, 7, 13, 19]\n    return sequence_list[n]\n",
        "num_ids": 28
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return sequence(n-1) + sequence(n-2)\n    \n",
        "num_ids": 42
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # if n is 0 or negative, return the input n, else return the first n number in the sequence\n    if n < 0: \n        return n\n    if n == 0: \n        return 1\n    if n < 9: \n        return n + 1\n    else:\n        for i in range(n - 9):\n            return n + 1 + sequence(n - 9)\n",
        "num_ids": 92
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    list_numbers = [1,3,5,7,9,11,13,15,17]\n    # the newman sequence is {1,3,5,7,9,11,13,15,17}\n    # so need to reverse the list\n    list_numbers.reverse()\n    # then get the starting point of the sequence\n    # the sequence is {1,3,5,7,9,11,13,15,17}\n    # so need to convert to int\n    start = int(list_numbers[0])\n    for num in list_numbers:\n        if num < start:\n            start = num\n    return start\n",
        "num_ids": 157
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = [0,1]\n    for i in range(2, n+1): \n        numbers.append(numbers[i-2]+numbers[i-1]) \n    return numbers[n]\n",
        "num_ids": 55
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return r**3/3*math.pi\ndef surfacearea_cuboid(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 3*(r1**2+r2**2+r3**2)\ndef surfacearea_sphere_squared(r):\n    '''\n    Write a function to find the surface area of a sphere squared.\n    '''\n    return r**2*surfacearea_sphere(r)\ndef surfacearea_cuboid_squared(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a cuboid squared.\n    '''\n    return r1**2*r2**2*r3**2\ndef surfacearea_sphere_cuboid(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid.\n    '''\n    return 3*r1**2+3*r2**2+3*r3**2\ndef surfacearea_sphere_cuboid_2(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared.\n    '''\n    return r1**2+r2**2+r3**2\ndef surfacearea_sphere_cuboid_3(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared.\n    '''\n    return 3*r1**2+3*r2**2+3*r3**2\ndef surfacearea_cuboid_squared(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a cuboid squared.\n    '''\n    return r1**2*r2**2*r3**2\ndef surfacearea_cuboid_2(r1,r2):\n    '''\n    Write a function to find the surface area of a cuboid squared.\n    '''\n    return r1**2*r2**2\ndef surfacearea_cuboid_3(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a cuboid squared.\n    '''\n    return 3*r1**2*r2**2\ndef surfacearea_sphere_cuboid_2_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_2_3(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_3_2(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_2_3(r1,r2):\n    '''\n    Write a function to find the surface area of a cuboid squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_2_3_2(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_2_3_3(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_3_2(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_3_3(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_2_2_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_3_2_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_3_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_2_3(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_3_2(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_squared_2_3(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_2_3_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_squared_2_3_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_sphere_cuboid_squared_3_3(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_3_3_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_3_3_squared_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_3_3_squared_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared squared squared squared squared squared.\n    '''\n    return r1**2+r2**2\ndef surfacearea_cuboid_squared_3_3_squared_squared_squared(r1,r2):\n    '''\n    Write a function to find the surface area of a sphere and a cuboid squared squared squared squared squared squared squared squared squared squared squared.\n    '''\n    return r1**2+r2**2+r1**2\ndef surfacearea_sphere_cuboid_squared_3_3(r1,r2):\n    '''\n    Write a function to find the surfac",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    c = math.pi * (r**2)\n    return c\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    c = math.pi * r * r\n    return c\ndef area_rectangle(width, height):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = width * height\n    return area\ndef area_triangle(side1, side2):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (side1 * (side2 + side1) + side2 * (side2 + side2) + side1 * side1) / 2\n    return area\ndef area_square(side):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = side**2\n    return area\ndef area_dodecahedron(dimension):\n    '''\n    Write a function to find the area of a dodecahedron.\n    '''\n    side = dimension / 2\n    area = (math.pi**(2/3)) * side * (side + (side**2) + (side**3))\n    return area\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (2 * math.pi * radius) * height\n    return volume\ndef volume_sphere(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4 * math.pi) * (math.pow(radius, 3))\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = (width * height)\n    return volume\ndef volume_triangle(side1, side2):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = side1 * (side2 + side1)\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = math.sqrt(side)\n    return volume\ndef volume_dodecahedron(dimension):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    side = dimension / 2\n    volume = (math.pi**(2/3)) * side * (side + (side**2) + (side**3))\n    return volume\n",
        "num_ids": 44
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 3.14 * (r ** 2)\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * (r ** 2)\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # TODO: your code here\n    return 0\n",
        "num_ids": 15
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    area = 4*3.14*(r**3)\n    return area\n",
        "num_ids": 29
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * (math.pi * (r**3))\n    return s\ndef surfacearea_cuboid(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    a = (r1**3 + r2**3 + r3**3)\n    b = 2 * (r1 * r2 * r3)\n    c = (3 * r1 * r2 * r3)\n    s = (a + b + c)\n    return s\ndef surfacearea_cylindric_circle(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 3 * (3 * r * math.sqrt(2))\n    return s\ndef surfacearea_equilateral_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of an equilateral triangle.\n    '''\n    p = (a*b) / (2*a + b)\n    q = (b*c) / (2*b + c)\n    s = p * q\n    return s\ndef surfacearea_kite(r):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    s = 1.5 * (r**2) * (math.log(2))\n    return s\ndef surfacearea_spheres(a,b,c,d):\n    '''\n    Write a function to find the surface area of spheres.\n    '''\n    a = 0.5 * a\n    b = 0.5 * b\n    c = 0.5 * c\n    d = 0.5 * d\n    p = 1\n    s = 0\n    return s\ndef surfacearea_rectangle(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    p = a * b\n    s = a * (2*b-c)\n    return s\ndef surfacearea_rhombus(a,b,c):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    p = a * b\n    s = a * (c-b)\n    return s\ndef surfacearea_trapezoid(a,b,c):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    p = a * b\n    s = a * (a + b)\n    return s\ndef surfacearea_octagon(a,b,c):\n    '''\n    Write a function to find the surface area of an octagon.\n    '''\n    p = a * (a + b)\n    s = a * (a + b + c)\n    return s\ndef surfacearea_hexagon(a,b,c):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    p = a * (a + b)\n    s = a * (a + b + c)\n    return s\ndef surfacearea_heptagon(a,b,c):\n    '''\n    Write a function to find the surface area of an heptagon.\n    '''\n    p = a * (a + b)\n    s = a * (a + b + c)\n    return s\ndef surfacearea_dodecahedron(a,b,c):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    p = a * (a + b + c)\n    s = a * (a + b + c + d)\n    return s\ndef surfacearea_tetrahedron(a,b,c):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    p = a * (a + b + c)\n    s = a * (a + b + c + d)\n    return s\ndef surfacearea_cube(a,b,c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    p = a * (a + b + c)\n    s = a * (a + b + c + d)\n    return s\ndef surfacearea_quadrilateral(a,b,c):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    p = a * (a + b)\n    s = a * (a + b + c)\n    return s\ndef surfacearea_rhombus_plane(a,b):\n    '''\n    Write a function to find the surface area of a rhombus plane.\n    '''\n    p = a * b\n    s = a * (2 * b)\n    return s\ndef surfacearea_sphere_plane(a,b):\n    '''\n    Write a function to find the surface area of a sphere plane.\n    '''\n    p = a * b\n    s = a * (3 * b)\n    return s\ndef surfacearea_cylindrical_plane(a,b):\n    '''\n    Write a function to find the surface area of a cylindrical plane.\n    '''\n    p = a * b\n    s = a * (2 * b)\n    return s\ndef surfacearea_sphere_sphere(a,b):\n    '''\n    Write a function to find the surface area of a sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere sphere spher",
        "num_ids": 737
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 3.14*r**2\n    print(f\"The surface area of a sphere with radius {r} is: {area}\")\n",
        "num_ids": 36
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    while (i <= n) and (i!= 2):\n        i = i * 3 + 1\n    return i\n",
        "num_ids": 35
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the number of row\n    row = int(n ** 0.5)\n    # Calculate the number of column\n    column = int(n ** 0.5)\n    # Calculate the number of hexagonal rows\n    number_of_rows = int(n ** 0.5)\n    # Calculate the number of columns\n    number_of_columns = int(n ** 0.5)\n    # Calculate the number of hexagonal columns\n    number_of_columns_per_row = int(n ** 0.5)\n    # Calculate the number of hexagonal rows\n    number_of_rows_per_column = int(n ** 0.5)\n    # Calculate the number of hexagonal rows\n    number_of_rows_per_column = int(n ** 0.5)\n",
        "num_ids": 191
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    s = n**2\n    a = (s-1)/6\n    b = a**3\n    c = (a-1)/3\n    d = b**3\n    e = (b-1)/3\n    f = d**3\n    g = (d-1)/3\n    h = e**3\n    i = f**3\n    j = g**3\n    k = h**3\n    l = i**3\n    m = j**3\n    n = k**3\n    o = l**3\n    p = m**3\n    q = n**3\n    r = o**3\n    s = p**3\n    t = q**3\n    u = r**3\n    v = s**3\n    w = t**3\n    x = u**3\n    y = v**3\n    z = w**3\n    result = n+h\n    return result\n",
        "num_ids": 214
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(n+1))//2\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n/2)\n",
        "num_ids": 11
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #n = integer\n    #returns integer\n    \n    #define list of upper bound\n    list = [0,1,3,6,9]\n    \n    #define lower bound\n    lower = 0\n    \n    #loop through the list of numbers\n    for i in list:\n        #if this number is less than the upper bound\n        if lower <= i:\n            #update lower\n            lower = i\n        #if this number is greater than the upper bound\n        elif lower > i:\n            #update upper\n            upper = i\n    #return the number\n    return lower * 4 + upper\n",
        "num_ids": 143
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n > 1:\n        return n * n + n - 1\n    return n * n * 2 + n - 1\n",
        "num_ids": 39
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def check(num, row):\n        nums = (row+1)*2\n        while num <= nums:\n            if num % 2 == 0:\n                return False\n            num = num//2\n        return True\n",
        "num_ids": 54
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Corner cases\n    if n <= 0:\n        raise ValueError('n must be positive')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 12\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 18\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 24\n    elif n == 9:\n        return 27\n    elif n == 10:\n        return 30\n    elif n == 11:\n        return 33\n",
        "num_ids": 159
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #(,,,,,,,,,,,,,, )\n    s = str(n)\n    #determine the number of digits after the decimal point\n    #(,,,,,,,,,,,,,, )\n    d = len(s) - n\n    #(,,,,,,,,,,,,,, )\n    if d == 1:\n        d = 0\n    #if the number of digits is less than the integer\n    #(,,,,,,,,,,,,,, )\n    elif d < 10:\n        d = 1\n    #divide by 10\n    elif d >= 10:\n        d = d / 10\n    #take the modulo of the decimal point by 10\n    modulo = (d % 10) * 10\n    #return the nth number\n    return (n % modulo)\n",
        "num_ids": 168
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1\n    if dict2!= None:\n        res = res.update(dict2)\n    if dict3!= None:\n        res = res.update(dict3)\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key in dict1:\n        d[key] = dict1[key]\n    for key in dict2:\n        d[key] = dict2[key]\n    for key in dict3:\n        d[key] = dict3[key]\n    return d\n",
        "num_ids": 71
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #dict_1 = dict1.copy()\n    #dict_2 = dict2.copy()\n    #dict_3 = dict3.copy()\n    #print(dict_1,dict_2,dict_3)\n    d = dict1.copy()\n    for k in dict1:\n        if k in dict2 and k in dict3:\n            if dict2[k] > dict3[k]:\n                d[k] = dict1[k]\n            else:\n                d[k] = dict2[k]\n        elif k in dict2:\n            d[k] = dict2[k]\n        else:\n            d[k] = dict3[k]\n    #print(d)\n    return d\n",
        "num_ids": 175
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # If the two dictionaries are of different size, return the size of the \n    # merged dictionary.\n    if len(dict1)!= len(dict2) or len(dict1)!= len(dict3):\n        return len(dict1) + len(dict2) + len(dict3)\n",
        "num_ids": 73
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    mydict = dict1.copy()\n    mydict.update(dict2)\n    mydict.update(dict3)\n    return mydict\n",
        "num_ids": 37
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # first, merge them into a single dictionary\n    # add the key-value pairs from both dictionaries into the first dictionary\n    # return the merged dictionary\n    # add the key-value pairs from the third dictionary into the second dictionary\n    # return the second dictionary\n",
        "num_ids": 61
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n",
        "num_ids": 52
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        if key in dict2:\n            if key in dict3:\n                merged_dict[key] = ct.Union(dict1[key], dict2[key], dict3[key])\n            else:\n                merged_dict[key] = dict1[key]\n        else:\n            merged_dict[key] = dict2[key]\n    for key, value in dict3.items():\n        if key in dict1:\n            if key in dict3:\n                merged_dict[key] = ct.Union(dict1[key], dict2[key], dict3[key])\n            else:\n                merged_dict[key] = dict1[key]\n        else:\n            merged_dict[key] = dict3[key]\n",
        "num_ids": 202
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary=dict1.copy()\n    dictionary.update(dict2)\n    dictionary.update(dict3)\n    return dictionary\n    \ndef main():\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1={'one':1,'two':2,'three':3}\n    dict2={'one':1,'two':2,'three':3}\n    dict3={'one':1,'two':2,'three':3}\n    print('Merged dictionary:')\n    print(merge_dictionaries_three(dict1,dict2, dict3))\n    \nmain()\n",
        "num_ids": 92
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    dict3_items = dict3.items()\n    return ct.OrderedDict(dict1_items + dict2_items + dict3_items)\ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    return ct.OrderedDict(dict1 + dict2)\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_one_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_one_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_two_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_two_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    dict3_items = dict3.items()\n    return dict1_items + dict2_items + dict3_items\ndef merge_dictionaries_three_two(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    dict3_items = dict3.items()\n    return dict1_items + dict2_items + dict3_items\ndef merge_dictionaries_two_two_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    dict3_items = dict3.items()\n    return dict1_items + dict2_items + dict3_items\ndef merge_dictionaries_two_three_two(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    dict3_items = dict3.items()\n    return dict1_items + dict2_items + dict3_items\ndef merge_dictionaries_three_two_two(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    dict3_items = dict3.items()\n    return dict1_items + dict2_items + dict3_items\ndef merge_dictionaries_three_two_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    dict3_items = dict3.items()\n    return dict1_items + dict2_items + dict3_items\ndef merge_dictionaries_one_two_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_one_two_three(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_two_two_three(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_two_three_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_three_two_three(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_one_three_two_three(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_two_one_three_two_three(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items\ndef merge_dictionaries_one_two_three_three(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #Remember to use dictionaries in the for loop.\n    dict1_items = dict1.items()\n    dict2_items = dict2.items()\n    return dict1_items + dict2_items",
        "num_ids": 50
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # I created a dictionary here, but a dictionary could be created by using 'collections.Counter' for example.\n    # I also created a dictionary here, but a dictionary could be created by using 'collections.Counter' for example.\n    # This is the most expensive way to solve this challenge\n",
        "num_ids": 68
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = collections.Counter(list1)\n    return my_dict\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    f_dic = collections.Counter(list1)\n    return f_dic\n",
        "num_ids": 23
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n    \ndef freq_sort(list1):\n    '''\n    Write a function to sort a list of dictionaries with their frequency.\n    '''\n    sort_dict = collections.OrderedDict(sorted(list1.items(), key=lambda item:item[1]))\n    return sort_dict\n",
        "num_ids": 39
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    freq_dict = {}\n    for key in freq.keys():\n        freq_dict[key] = freq[key]\n    return freq_dict\n",
        "num_ids": 54
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for e in list1:\n        if e in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_d = collections.Counter(list1)\n    return freq_d\n",
        "num_ids": 23
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result= collections.Counter(list1)\n    return result\ndef list_to_dict(list1):\n    '''\n    Write a function to convert a list to a dictionary\n    '''\n    result=[]\n    for i in list1:\n        result.append(i[0])\n    return result\ndef main():\n    print(\"Please write a list to a dictionary\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n    print(\"Type: \")\n    print(\"- the string '1' as key: '1' value: 1\")\n    print(\"- the string '2' as key: '2' value: 2\")\n    print(\"- the string '3' as key: '3' value: 3\")\n    print(\"- the string '4' as key: '4' value: 4\")\n    print(\"- the string '5' as key: '5' value: 5\")\n    print(\"The returned dictionary is as follows:\")\n    print(\"{'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\")\n    print(\"And the value '1' is printed as:\")\n    print(\"1\")\n    print(\"2\")\n    print(\"3\")\n    print(\"4\")\n    print(\"5\")\n    print(\"*******************************************************************************\")\n    print(\"Please write a list to a dictionary:\")\n    print(\"Example list: '1, 2, 3, 4, 5'\")\n",
        "num_ids": 1960
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #create a new dictionary\n    freq={}\n    #iterate through list\n    for i in list1:\n        #if element is in dictionary\n        if i in freq:\n            #add to new dictionary\n            freq[i]+=1\n        else:\n            #add to new dictionary\n            freq[i]=1\n    return freq",
        "num_ids": 85
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic={}\n    for i in list1:\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    return dic\n",
        "num_ids": 51
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N - closest_num(N-1)\n",
        "num_ids": 15
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N % 2 == 0:\n        return closest_num(N-1)\n    else:\n        return closest_num(N-1) + 1\n",
        "num_ids": 61
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 2:\n        return N\n    if N == 2:\n        return 2\n    if N % 2 == 0:\n        return closest_num(N/2)\n    else:\n        return N/2\n",
        "num_ids": 54
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(N,1,-1):\n        if N%i == 0:\n            closest = i\n            break\n    return closest\n    \ndef is_prime(N):\n    '''\n    Write a function that returns True if N is a prime number and False if it is not.\n    '''\n    for i in range(2,N):\n        if N%i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N,key=abs)\n",
        "num_ids": 13
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = sorted(N)[-1]\n    for i in range(len(N)):\n        if n == N[i]:\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if (N < 10):\n        return N\n    if (N % 10 == 9):\n        return N + 10\n    else:\n        return N // 10 + closest_num(N // 10)\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    digits = [0,1,2,3,4,5,6,7,8,9]\n    for x in range(10,N+1):\n        for i in range(9,0,-1):\n            if x % i == 0:\n                break\n        digits.append(x)\n    digits.append(N)\n    for i in range(0,len(digits)-2):\n        if digits[i+1] >= digits[i] >= digits[i+2]:\n            return digits[i]\n    return N\n",
        "num_ids": 132
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Use round function to round the n value to the closest decimal place.\n    if N < 0:\n        return 0\n    elif N == 0:\n        return 1\n    else:\n        return N.floor().ceil()\n",
        "num_ids": 56
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    def longest_word(list2):\n        '''\n        Write a python function to find the length of the longest word.\n        '''\n        def longest_word2(word):\n            '''\n            Write a python function to find the length of the longest word.\n            '''\n            return max([len(word), len(word.split(' '))])\n        for i in list2:\n            print(i)\n        return longest_word2(list2[-1])\n    return longest_word(list1)\n",
        "num_ids": 58
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = len(list1)\n    for i in range(0, l-1):\n        for j in range(i+1, l):\n            if len(list1[i]) > len(list1[j]):\n                l = l\n                print(l, list1[i], list1[j])\n    print(l)\n",
        "num_ids": 83
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][j] == list1[i][j-1]:\n                continue\n            else:\n                if list1[i][j] > list1[i][j-1]:\n                    continue\n                else:\n                    return len(list1[i][j])\n    return len(list1[0])\n",
        "num_ids": 108
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if type(list1) == list:\n        print(len(list1[0]))\n    else:\n        print(len(list1))\n        \n",
        "num_ids": 40
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 == []:\n        return 0\n    else:\n        list1.sort()\n        return list1[-1]\n",
        "num_ids": 34
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1[0]) < 1:\n        return len(list1[0])\n    else:\n        return len(list1[0])\n",
        "num_ids": 39
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # if len(list1) < 1:\n    #     print(\"Not valid input\")\n    # else:\n    for item in list1:\n        str1 = str(item)\n        if len(str1) > len(max(str1, key=len)):\n            max = str1\n    return len(max)\n",
        "num_ids": 82
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in list1:\n        for j in i:\n            if j == \" \":\n                length = length + 1\n    return length\n",
        "num_ids": 41
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return False\n    \n    if sub_str in str1:\n        return True\n    \n    if sub_str[-1] not in str1:\n        return False\n    \n    i = len(sub_str) - 1\n    j = 0\n    \n    while i >= 0:\n        if sub_str[i] not in str1:\n            if j < len(str1) - len(sub_str):\n                return False\n            i -= 1\n        else:\n            j += 1\n            if j > len(sub_str) - len(str1):\n                return False\n        \n    return True\n",
        "num_ids": 159
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if(sub_str in str1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = [i for i in sub_str.lower().split() if i not in set(str1.lower().split())]\n    return sub_str_list\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    j = 0\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            j = i + len(sub_str)\n            break\n        else:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1 or len(str1) == 0:\n        return False\n    \n    if str1[0]!= sub_str[0]:\n        return False\n    \n    if sub_str[-1]!= str1[-1]:\n        return False\n    \n    index_substring = sub_str.index(sub_str[-1])\n    return True if index_substring >= 0 and index_substring + len(str1) <= len(str1) and str1[index_substring: index_substring+len(sub_str)] == sub_str else False\n",
        "num_ids": 143
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(len(str1)-len(sub_str)+1):\n        for j in range(i, i+len(sub_str)):\n            if str1[i:j+len(sub_str)] == sub_str:\n                return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) < len(str1):\n        print(\"The length of sub_str must be smaller than the length of the string\")\n    for i in range(len(sub_str)):\n        for j in range(i, len(sub_str)):\n            if sub_str[i:j+1] in str1:\n                return True\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n    #\n    # # # Solution:\n    #\n    # for i in range(len(str1)):\n    #     if str1[i:].startswith(sub_str):\n    #         return True\n    #     else:\n    #         return False\n    #\n    #\n    # return False\n",
        "num_ids": 99
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    \n    if len(sub_str) == 1:\n        return True if str1[0:sub_str[0]] == sub_str[0] else False\n    \n    if str1[0:sub_str[0]] == sub_str[0]:\n        return find_substring(str1[1:], sub_str[1:])\n    \n    return False\n",
        "num_ids": 107
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 0\n",
        "num_ids": 8
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0: return True \n    else: return False \n",
        "num_ids": 21
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==1: return True\n    if n%2==0: return False\n    if n==3: return False\n    return is_undulating(n//2)\n",
        "num_ids": 43
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #use the fact that the fact that number is undefined is the value returned is 1\n    return 1 if n > 0 else 0\n",
        "num_ids": 31
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    result = True\n    if n == 0:\n        result = False\n    elif n % 10!= 0:\n        result = False\n    elif n % 5!= 0:\n        result = False\n    elif n % 2!= 0:\n        result = False\n    else:\n        result = True\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Write your code here\n    if n < 10:\n        return False\n    else:\n        if n % 10 > 1:\n            return False\n        else:\n            if n % 10 == 0:\n                return True\n            else:\n                return False\n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    if n%2 == 0: \n        return False\n    else: \n        return is_undulating(n//2) \n",
        "num_ids": 46
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 5 == 0 or n % 5 == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a**b\n",
        "num_ids": 23
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b<0:\n        return 1/power(a,b)\n    else:\n        return a**b\n",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a**b)\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0:\n        return 0\n    elif b==0:\n        return a\n    else:\n        return a^b\n",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a*power(b,a-1)\n",
        "num_ids": 30
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = itemgetter(1))\n    return sorted_list[0][0]\n",
        "num_ids": 34
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code goes here\n    min=test_list[0][1]\n    second=test_list[0][2]\n    for i in range(1,len(test_list)):\n        if min>test_list[i][1]:\n            min=test_list[i][1]\n            second=test_list[i][2]\n    return second\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # your code goes here\n    max=test_list[0][1]\n    second=test_list[0][2]\n    for i in range(1,len(test_list)):\n        if max<test_list[i][1]:\n            max=test_list[i][1]\n            second=test_list[i][2]\n    return second\ndef index_mean(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mean of all values of the tuple.\n    '''\n    # your code goes here\n    total=0\n    for i in range(len(test_list)):\n        total+=test_list[i][1]\n    return total/len(test_list)\ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values of the tuple.\n    '''\n    # your code goes here\n    l=[]\n    for i in range(len(test_list)):\n        l.append(test_list[i][1])\n    l.sort()\n    if len(l)%2:\n        median1=l[int(len(l)/2)]\n        median2=l[int((len(l)/2)-1)]\n        return (median1+median2)/2\n    else:\n        return l[int(len(l)/2)]\ndef index_mode(test_list):\n    '''\n    Given a list of tuples, write a function that returns the most frequent element of the tuple.\n    '''\n    # your code goes here\n    l=[]\n    for i in range(len(test_list)):\n        l.append(test_list[i][1])\n    l.sort()\n    return l[len(l)-1]\ndef index_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list sorted in increasing order by the second value.\n    '''\n    # your code goes here\n    newlist=[]\n    for i in range(len(test_list)):\n        newlist.append(test_list[i][2])\n    newlist.sort()\n    return newlist\ndef index_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # your code goes here\n    second=index_minimum(test_list)\n    for i in range(len(test_list)):\n        if second==test_list[i][1]:\n            return i\n    return -1\ndef main():\n    print('test case 1')\n    list1=[]\n    print('test case 2')\n    list2=[]\n    print('test case 3')\n    list3=[]\n    print('test case 4')\n    list4=[]\n    print('test case 5')\n    list5=[]\n    print('test case 6')\n    list6=[]\n    print('test case 7')\n    list7=[]\n    print('test case 8')\n    list8=[]\n    print('test case 9')\n    list9=[]\n    print('test case 10')\n    list10=[]\n    print('test case 11')\n    list11=[]\n    print('test case 12')\n    list12=[]\n    print('test case 13')\n    list13=[]\n    print('test case 14')\n    list14=[]\n    print('test case 15')\n    list15=[]\n    print('test case 16')\n    list16=[]\n    print('test case 17')\n    list17=[]\n    print('test case 18')\n    list18=[]\n    print('test case 19')\n    list19=[]\n    print('test case 20')\n    list20=[]\n    print('test case 21')\n    list21=[]\n    print('test case 22')\n    list22=[]\n    print('test case 23')\n    list23=[]\n    print('test case 24')\n    list24=[]\n    print('test case 25')\n    list25=[]\n    print('test case 26')\n    list26=[]\n    print('test case 27')\n    list27=[]\n    print('test case 28')\n    list28=[]\n    print('test case 29')\n    list29=[]\n    print('test case 30')\n    list30=[]\n    print('test case 31')\n    list31=[]\n    print('test case 32')\n    list32=[]\n    print('test case 33')\n    list33=[]\n    print('test case 34')\n    list34=[]\n    print('test case 35')\n    list35=[]\n    print('test case 36')\n    list36=[]\n    print('test case 37')\n    list37=[]\n    print('test case 38')\n    list38=[]\n    print('test case 39')\n    list39=[]\n    print('test case 40')\n    list40=[]\n    print('test case 41')\n    list41=[]\n    print('test case 42')\n    list42=[]\n    print('test case 43')\n    list43=[]\n    print('test case 44')\n    list44=[]\n    print('test case 45')\n    list45=[]\n    print('test case 46')\n    list46=[]\n    print('test case 47')\n    list47=[]\n    print('test case 48')\n    list48=[]\n    print('test case 49')\n    list49=[]\n    print('test case 50')\n    list50=[]\n    print('test case 51')\n    list51=[]\n    print('test case 52')\n    list52=[]\n    print('test case 53')\n    list53=[]\n    print('test case 54')\n    list54=[]\n    print('test case 55')\n    list55=[]\n    print('test case 56')\n    list56=[]\n    print('test case 57')\n    list57=[]\n    print('test case 58')\n    list58=[]\n    print('test case 59')\n    list59=[]\n    print('test case 60')\n    list60=[]\n    print('test case 61')\n    list61=[]\n    print('test case 62')\n    list62=[]\n    print('test case 63')\n    list63=[]\n    print('test case 64')\n    list64=[]\n    print('test case 65')\n    list65=[]\n    print('test case 66')\n    list66=[]\n    print('test case 67')\n    list67=[]\n    print('test case 68')\n    list68=[]\n    print('test case 69')\n    list69=[]\n    print('test case 70')\n    list70=[]\n    print('test case 71')\n    list71=[]\n    print('test case 72')\n    list72=[]\n    print('test case 73')\n    list73=[]\n    print('test case 74')\n    list74=[]\n    print('test case 75')\n    list75=[]\n    print('test case 76')\n    list76=[]\n    print('test case 77')\n    list77=[]\n    print('test case 78')\n    list78=[]\n    print('test case 79')\n    list79=[]\n    print('test case 80')\n    list80=[]\n    print('test case 81')\n    list81=[]\n    print('test case 82')\n    list82=[]\n    print('test case 83')\n    list83=[]\n    print('test case 84')\n    list84=[]\n    print('test case 85')\n    list85=[]\n    print('test case 86')\n    list86=[]\n    print('test case 87')\n    list87=[]\n    print('test case 88')\n",
        "num_ids": 1287
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = itemgetter(1))\n    return sorted_list[0]\n",
        "num_ids": 32
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))[0]\ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the middle value of the tuple, which is the average of the two middle values.\n    '''\n    mid_1 = round(index_minimum(test_list), 3)\n    mid_2 = round(index_maximum(test_list), 3)\n    mid_diff = mid_2 - mid_1\n    return (mid_1 + mid_2)/2\ndef most_frequent(test_list):\n    '''\n    Given a list of tuples, write a function that returns the frequency of the first value in the tuple.\n    '''\n    return test_list.count(test_list[0])\ndef get_sum_sub_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    sum_1 = 0\n    for item in test_list:\n        sum_1 = sum_1 + item[1]\n    return sum_1\ndef div_by_zero(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of elements with the even number of values.\n    '''\n    count = 0\n    for item in test_list:\n        if item[1]%2 == 0:\n            count = count + 1\n    return count\ndef div_by_one(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of elements with the odd number of values.\n    '''\n    count = 0\n    for item in test_list:\n        if item[1]%2!= 0:\n            count = count + 1\n    return count\ndef most_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the frequency of the first value in the tuple.\n    '''\n    return test_list.count(test_list[0])/len(test_list)\ndef top_3_most(test_list):\n    '''\n    Given a list of tuples, write a function that returns the third most frequent value in the tuple.\n    '''\n    return test_list[-3][1]\ndef top_5_most(test_list):\n    '''\n    Given a list of tuples, write a function that returns the fifth most frequent value in the tuple.\n    '''\n    return test_list[-5][1]\ndef top_10_most(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first 10 most frequent values in the tuple.\n    '''\n    return test_list[-10:][0]\ndef top_5_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the top 5 probable values in the tuple.\n    '''\n    return test_list[-5][2]\ndef top_10_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the top 10 probable values in the tuple.\n    '''\n    return test_list[-10:][3]\ndef low_3_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the lowest 3 probable values in the tuple.\n    '''\n    return test_list[-3:][4]\ndef low_5_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the lowest 5 probable values in the tuple.\n    '''\n    return test_list[-5:][5]\ndef low_10_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the lowest 10 probable values in the tuple.\n    '''\n    return test_list[-10:][6]\ndef highest_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the highest probable values in the tuple.\n    '''\n    return test_list[-1][2]\ndef highest_probable_probable(test_list):\n    '''\n    Given a list of tuples, write a function that returns the highest probable values in the tuple.\n    '''\n    return test_list[-1][3]\ndef highest_probable_probable_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the highest probable values in the tuple.\n    '''\n    return test_list[-1][4]\ndef get_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first and second values of the tuple.\n    '''\n    return (test_list[0][1], test_list[1][1])\ndef get_sum_sub_list_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(test_list)\ndef get_sum_sub_list_3(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[1] for item in test_list)\ndef get_sum_sub_list_4(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[0] for item in test_list)\ndef get_sum_sub_list_5(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[0] for item in test_list)\ndef get_sum_sub_list_6(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[1] for item in test_list)\ndef get_sum_sub_list_7(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[1] for item in test_list)\ndef get_sum_sub_list_8(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[0] for item in test_list)\ndef get_sum_sub_list_9(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[1] for item in test_list)\ndef get_sum_sub_list_10(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[0] for item in test_list)\ndef get_sum_sub_list_11(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[1] for item in test_list)\ndef get_sum_sub_list_12(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[0] for item in test_list)\ndef get_sum_sub_list_13(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the values in the tuple.\n    '''\n    return sum(item[1] for item in test_list)\ndef get_su",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    temp_list = sorted(test_list)\n    \n    for i in range(len(temp_list)):\n        if temp_list[i][1] < temp_list[i+1][1]:\n            return temp_list[i][0]\n    \n    return temp_list[0][0]\n",
        "num_ids": 78
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    data=list(test_list)\n    data.sort()\n    return data[0][1]\n",
        "num_ids": 27
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = test_list[0]\n    smallest_second_value = smallest_second[2]\n    smallest_index = 0\n    for index, item in enumerate(test_list):\n        if item[2] < smallest_second_value:\n            smallest_second_value = smallest_second_value\n            smallest_index = index\n    return smallest_index, smallest_second_value\n",
        "num_ids": 100
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0]\n    for x in test_list:\n        if x[1] < smallest[1]:\n            smallest = x\n    return smallest\n",
        "num_ids": 44
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list,key = lambda x: x[1])[0]\n",
        "num_ids": 23
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Write your code here\n    print(test_list)\n    sort_list = sorted(test_list, key=lambda tup: tup[1])\n    print(sort_list)\n    return sort_list[0][0]\n",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(l) for l in lst])\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_list = lst[0]\n    smallest_list_index = 0\n    for item in lst:\n        if item < smallest_list:\n            smallest_list_index = lst.index(item)\n            smallest_list = item\n    return smallest_list_index + 1\n",
        "num_ids": 75
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n",
        "num_ids": 45
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=lst[0]\n    for i in lst:\n        if i<min:\n            min=i\n    return min\n    \n",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = []\n    for i in lst:\n        if len(i) < min(min_length):\n            min_length = i\n    return min_length\n",
        "num_ids": 44
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(lst[i]) for i in range(len(lst))])\n",
        "num_ids": 25
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # your code here\n    lst.sort(reverse=True)\n    s = 0\n    for i in range(len(lst)):\n        s = s + lst[i]\n    return s\n",
        "num_ids": 52
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst is None or len(lst) == 0:\n        return 0\n    min_length = len(lst)\n    for element in lst:\n        if element < min_length:\n            min_length = element\n    return min_length\n",
        "num_ids": 63
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    temp = lst[0]\n    if len(lst) == 0:\n        return len(lst)\n    for i in range(len(lst)):\n        if lst[i][0] < temp:\n            temp = lst[i][0]\n    return temp\n",
        "num_ids": 71
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest=float('inf')\n    smallest_element=lst[0]\n    for i in range(len(lst)):\n        if(len(lst[i])<smallest):\n            smallest=len(lst[i])\n            smallest_element=lst[i]\n    return smallest_element\n",
        "num_ids": 81
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return int(n/2)+1+divisor(n-1)\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def factors(n):\n        '''\n        Find the number of factors of an integer.\n        '''\n        factors = 0\n        if n == 0:\n            return 1\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    factors += 1\n                    if i!= n:\n                        factors += factors(n//i)\n        return factors\n    \n    if n <= 0:\n        return 1\n    else:\n        return factors(n)\n    \n    \n",
        "num_ids": 100
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            a += 1\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n // 1 + divisor(n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    lst = list(str(n))\n    #print(lst)\n    if n < 0:\n        print(\"Please enter a non negative integer\")\n    elif len(lst) == 1:\n        if lst[0] == '1' or lst[0] == '0':\n            return 2\n    else:\n        count = 1\n        for x in lst:\n            if x == '1':\n                count += 1\n            if x == '0':\n                count = count * 0\n                break\n        return count\n",
        "num_ids": 129
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return n / 2 if n % 2 == 0 else n // 2\n",
        "num_ids": 18
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c=0\n    for i in range(1,n+1):\n        if n%i==0:\n            c+=1\n    return c\ndef run():\n    '''\n    run the calculator function.\n    '''\n    print(divisor(int(input('Enter a number: '))))\n",
        "num_ids": 20
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    total = 0\n    for i in range(1,n):\n        if n%i == 0:\n            total += 1\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in dictionary:\n                dictionary[list1[i][j]] += 1\n            else:\n                dictionary[list1[i][j]] = 1\n    return dictionary\n",
        "num_ids": 87
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for elem in list1:\n        d[elem[0]] = d.get(elem[0],0) + 1\n    return d\n",
        "num_ids": 43
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(0,len(list1)):\n        for x in list1[i]:\n            if x not in freq.keys():\n                freq[x] = 1\n            else:\n                freq[x] = freq[x] + 1\n    return freq\n",
        "num_ids": 77
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    out = {}\n    for i in list1:\n        if i not in out:\n            out[i] = 1\n        else:\n            out[i] += 1\n    return out\n",
        "num_ids": 47
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in list1[i]:\n                frequency[list1[i][j]] = 0\n            else:\n                frequency[list1[i][j]] += 1\n    return frequency\n",
        "num_ids": 86
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        freq_dict[list1[i][0]] = list1[i][1]\n    return freq_dict\n",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for num in range(len(list1)):\n        for element in list1[num]:\n            if element in frequency_dictionary.keys():\n                frequency_dictionary[element] += 1\n            else:\n                frequency_dictionary[element] = 1\n    return frequency_dictionary\n",
        "num_ids": 78
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    \n    for elements in list1:\n        if elements not in frequency_dict:\n            frequency_dict[elements] = 0\n        frequency_dict[elements] += 1\n    \n    return frequency_dict\n",
        "num_ids": 59
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create dict to store frequency\n    freq_dict = {}\n    # Flatten list\n    flatten = []\n    for num in list1:\n        flatten.append(num)\n    # Count frequency\n    for num in flatten:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    return freq_dict\n",
        "num_ids": 104
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if type(list1)!= list:\n        return None\n    frequency = {}\n    for el in list1:\n        if el in frequency.keys():\n            frequency[el] = frequency[el] + 1\n        else:\n            frequency[el] = 1\n    return frequency\n",
        "num_ids": 68
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # YOUR CODE HERE\n    res = []\n    for i in numbers:\n        res.append(i * len(numbers))\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    for num in numbers:\n        sum = sum + num\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers is None or len(numbers) == 0:\n        return None\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0]*multiply_num(numbers[1:])\n",
        "num_ids": 64
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    for i in range(0,length):\n        numbers[i] = numbers[i]*length\n        \n    # print(numbers)\n    return number",
        "num_ids": 49
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers)\n",
        "num_ids": 18
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    a = []\n    for i in numbers:\n        a.append(i*len(numbers))\n    print(a)\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i] * i)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Declare an empty list for the results\n    results = []\n    # Iterate through the list\n    for num in numbers:\n        # Calculate the product using \"mulitplication\"\n        product = num * multiply_num(numbers)\n        # Append the product to the results list\n        results.append(product)\n    # Return the results list\n    return results",
        "num_ids": 90
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 0\n    for i in range(len(numbers)):\n        total += numbers[i]\n    return total / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    base_2 = 2\n    bin_string = \"\"\n    while n >= base_2:\n        remainder = n % base_2\n        bin_string = bin_string + str(remainder)\n        n = n // base_2\n    if n == 0:\n        return \"0\"\n    else:\n        return bin_string\n",
        "num_ids": 84
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    string = str(n)\n    if len(string)!= 2:\n        return \"Error\"\n    if string[0] == '-':\n        string = '-' + string[1:]\n    return string\n",
        "num_ids": 52
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"\"\n    if n < 0: \n        n = n*(-1)\n    n = n//2\n    return decimal_to_binary(n) + decimal_to_binary(n+1)\n",
        "num_ids": 60
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return \"1\" + decimal_to_binary(n // 2) + (decimal_to_binary(n % 2))\n",
        "num_ids": 49
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = \"\"\n    for i in range(len(n)): \n        b += str(bin(n)[2:].zfill(8))\n    return b\n",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Your code here\n    binary = \"\"\n    while n!= 0:\n        binary = str(n%2) + binary\n        n = n//2\n    return binary\n",
        "num_ids": 44
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n: \n        remainder = n % 2\n        if remainder == 0: \n            binary_string += '0'\n        else: \n            binary_string += '1'\n        n //= 2\n    return binary_string\n",
        "num_ids": 67
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = bin(n)[2:]\n    while len(b) < 8:\n        b = '0' + b\n    return b\n",
        "num_ids": 35
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # If number is negative, just return 0, else return the number as a string \n    if n < 0:\n        return '0'\n    # get number in decimal format\n    num = str(abs(n)) \n    # print(num)\n    # get number in binary format \n    # print(bin(num))\n    # Return the binary equivalent \n    return num\n    \ndef binary_to_decimal(n): \n    '''\n    Write a function to convert a binary number to its decimal equivalent.\n    '''\n    # If number is negative, just return 0, else return the number as a string \n    if n < 0:\n        return '0'\n    # get number in binary format \n    num = bin(abs(n)) \n    # print(num)\n    # get number in decimal format \n    # print(str(int(num,2)))\n    return int(str(int(num,2)))\n    \ndef decimal_to_binary(n): \n    '''\n    Write a function to convert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # If number is negative, just return 0, else return the number as a string \n    if n < 0:\n        return '0'\n    # get number in decimal format \n    num = str(abs(n)) \n    # print(num)\n    # get number in binary format \n    # print(bin(num))\n    # Return the binary equivalent \n    return num\n    \ndef binary_to_decimal(n): \n    '''\n    Write a function to convert a binary number to its decimal equivalent.\n    '''\n    # If number is negative, just return 0, else return the number as a string \n    if n < 0:\n        return '0'\n    # get number in binary format \n    num = bin(abs(n)) \n    # print(num)\n    # get number in decimal format \n    # print(str(int(num,2)))\n    return int(str(int(num,2)))\n    \n",
        "num_ids": 99
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Step 1: If the number is odd, make it even\n    if num%2==0:\n        num=num-1\n        \n    # Step 2: Find the first and last half of the number\n    firstHalf=num//2\n    lastHalf=num-firstHalf\n",
        "num_ids": 67
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    for i in range(2,num):\n        if num % i == 0:\n            return i\n    return num\n",
        "num_ids": 52
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    \n    # If number is prime number, we have found a palindrome.\n    # We want to return the palindrome whose digits start from 1.\n    if n >= 1:\n        digits = [int(i) for i in str(num)]\n        for i in range(0, n - 1, 1):\n            if digits[i]!= digits[i + 1]:\n                return num\n        \n    # No palindrome was found.\n    return -1\n",
        "num_ids": 123
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 0\n    while True:\n        m = (i+1)*i\n        if num % m == 0:\n            return m\n        i += 1\n",
        "num_ids": 40
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    end = 10000000000\n    low = 0\n    high = int(math.sqrt(num))\n    while(high - low + 1 > 1):\n        mid = int((high + low)/2)\n        mid = mid if mid % 2 == 0 else mid + 1\n        if(mid < num and mid > 0 and mid % 2!= 0):\n            low = mid\n        else:\n            high = mid\n    if(num > low and num < high):\n        return int(low + ((high - num) / 2))\n    else:\n        return int(num)\ndef next_palindrome(num):\n    '''\n    Write a function to get the next palindrome of the integer.\n    '''\n    i = next_smallest_palindrome(num)\n    while(num >= i):\n        i = next_smallest_palindrome(num - i)\n    return i\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if (num == 0):\n        return 1\n    if (num < 0):\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            break\n    return i + 1\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # If the number is a palindrome\n    if is_palindrome(num):\n        return num\n    # Else if the number is not a palindrome\n    if num > 0:\n        # Find the next smallest palindrome of the number\n        next_smallest_palindrome = next_smallest_palindrome(num // 10) + num % 10\n        # Check if the next smallest palindrome is a palindrome\n        if next_smallest_palindrome == num:\n            return next_smallest_palindrome\n        else:\n            # Return the next smallest palindrome\n            return next_smallest_palindrome\n    # Else return 0\n    else:\n        return 0\n",
        "num_ids": 169
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if len(str(num)) == 1:\n        return num\n",
        "num_ids": 18
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    \n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            num = num // i\n            continue\n        if num % i == 1:\n            return i\n    return num\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check whether a number is palindrome.\n    '''\n    \n    return True if num == num[::-1] else False\n    \ndef is_palindrome_list(num):\n    '''\n    Write a function to check whether a number is palindrome.\n    '''\n    if isinstance(num, list):\n        for i in range(0,len(num)):\n            if num[i]!= num[len(num)-1-i]:\n                return False\n        return True\n    else:\n        return num!= num[::-1]\n",
        "num_ids": 69
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    if not arr[0]:\n        return None\n",
        "num_ids": 24
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    index = k - 1\n    return arr[index]\n",
        "num_ids": 18
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    \n    # If arr is empty\n    if n == 0:\n        return -1\n    \n    # If k is greater than length of array\n    if k > n:\n        return -1\n    \n    # If k is less than 0 or greater than the length of array\n    if k <= 0:\n        return arr[-1]\n    \n    # Get the index of the kth element\n    return (arr[n-k-1] + 1)%n\n",
        "num_ids": 119
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return -1\n",
        "num_ids": 22
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    size = len(arr)\n    left = 0\n    right = size - 1\n    \n    if k == 0 or k > size:\n        return -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == k:\n            return mid\n        \n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 113
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # indexing = 0\n    index = len(arr) - 1\n    for i in range(k-1):\n        index = index - 1\n        if arr[index] < arr[index+1]:\n            return arr[index+1]\n    return arr[index+1]\n",
        "num_ids": 69
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # O(n) Time complexity, O(n) Space Complexity\n    # Let the index of the kth element be 1 indexed.\n    # n = len(arr)\n    # if k > n:\n    #     return -1\n    # elif k < 1:\n    #     return -1\n    # elif k == 1:\n    #     return arr[0]\n",
        "num_ids": 92
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if k == 0:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        pos = l - k + 1\n        return arr[pos]",
        "num_ids": 55
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    tokens = word.split('_')\n    camel_word = ''\n    for i in tokens:\n        camel_word += i.title() +''\n",
        "num_ids": 44
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.replace('_','').title()\n    return word.lower()\n",
        "num_ids": 30
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    capitalized_word = word.title()\n    word = capitalized_word.replace('_','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(':','')\n    word = word.replace(';','')\n    word = word.replace('!','')\n    word = word.replace('?','')\n    word = word.replace('\"','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_','')\n    word = word.replace('.','')\n    word = word.replace(',','')\n    word = word.replace('(','')\n    word = word.replace(')','')\n    word = word.replace('&','')\n    word = word.replace('$','')\n    word = word.replace('%','')\n    word = word.replace('^','')\n    word = word.replace('&','')\n    word = word.replace('*','')\n    word = word.replace('-','')\n    word = word.replace('_','')\n    word = word.replace('_', ",
        "num_ids": 1850
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    sw = word.replace('-','_')\n    sw = sw.replace('_',' ')\n    sw = sw.lower()\n    return sw\n",
        "num_ids": 38
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Initialize the result variable\n    result = ''\n    # Initialize the string\n    string = word\n    # Loop through the string\n    for i in range(0, len(string)):\n        # Split the string\n        char_list = string[i].split('_')\n        # Concatenate the splitted letters\n        result += char_list[0] + '_' + char_list[1] + '_'\n    return result\n",
        "num_ids": 108
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for letter in word:\n        if letter in alphabet:\n            result += alphabet[alphabet.index(letter)]\n        else:\n            result += letter\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return (word.title()).replace('-', '_')\n",
        "num_ids": 18
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if n > m: \n        print(\"Invalid input.\") \n    else: \n        k = n \n        l = m \n        i = 1 \n        \n        while i <= k: \n            \n            if m % i == 0: \n                if l % i == 0: \n                    print(\"{0} is a circular L\", i) \n                else: \n                    print(\"{0} is not a circular L\", i) \n                    break \n                \n            i += 1 \n        \n        else: \n            print(\"{0} is a Eulerian number.\", i) \n",
        "num_ids": 147
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def S(n):\n        if n == 0: return 0\n        if n == 1: return 1\n        \n        return S(n - 1) + m - n\n        \n    # return the sum of the Eulerian numbers\n    return S(n)\n",
        "num_ids": 63
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    r = (n - 1) / 2\n    for i in range(r+1):\n        for j in range(r+1):\n            if (i!=0 and j!=0) and (n-i)%j==0:\n                return (n-i)//j\n    return 0\n",
        "num_ids": 74
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from collections import deque\n    def _dfs(v, visited):\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                _dfs(u, visited)\n    \n    # Initialize the list of vertices\n    graph = {};\n    visited = [False]*n;\n    \n    # Get the total distance\n    # Eulerian number of the graph\n    for i in range(n):\n        if not visited[i]:\n            distance = 0\n            for j in range(n):\n                if not visited[j] and graph[i][j]:\n                    distance += 1\n            graph[i] = [(distance, i)]\n            _dfs(i, visited)\n        \n    # Sort the graph\n    graph = sorted(graph.values(), key=lambda x: (x[0], x[1]))\n    \n    # Find the Eulerian number\n    return graph[m][0]\n",
        "num_ids": 230
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    E = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            E[i][j] = max(E[i-1][j-1], E[i-1][j])\n    if E[n][m] == 0:\n        return 'Impossible'\n    else:\n        return E[n][m]\n    \n",
        "num_ids": 115
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n\n",
        "num_ids": 14
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n==0) or (m==0): \n        return 0\n    elif n==0: \n        return m\n    elif m==0: \n        return n\n    else: \n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m) \n",
        "num_ids": 83
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Number of paths of the graph starting from 0\n    npaths = get_number_of_paths_from(n, m)\n    print (\"npaths of Eulerian: {}\".format(npaths))\n    return 0\n",
        "num_ids": 59
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # you can assume n and m are valid integer\n    if n == 0 or m == 0:\n        return n*m\n    elif n < m:\n        # return the sum of all the numbers in the number of terms it\n        # divides.\n        return eulerian_num(n-1,m) + m\n    elif n > m:\n        # recursively call with all the numbers from 1 to n\n        # and summing up all the numbers.\n        return eulerian_num(n-1,m) + eulerian_num(n-1,m-1)\n",
        "num_ids": 141
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code goes here\n    input_list.sort(key=lambda x: x.split())\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for index, item in enumerate(sublist):\n            if type(item) is list:\n                sublist[index] = sort_sublists(item)\n    return input_list\n",
        "num_ids": 56
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: len(x[0]))\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = str(input_list[i][j])\n    return input_list",
        "num_ids": 58
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp_list = input_list[:]\n    sorted_list = []\n    i = 0\n    while i < len(temp_list):\n        j = 0\n        while j < len(temp_list[i]):\n            temp_list[i][j] = sorted(temp_list[i][j])\n            j += 1\n        i += 1\n    return temp_list\n",
        "num_ids": 93
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"Sorting sublists with sort_sublists\")\n    print(input_list)\n    return sorted(input_list, key = lambda sublist: (len(sublist), sublist.sort()))\n",
        "num_ids": 51
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for element in input_list:\n        for i in range(len(element)):\n            element[i] = element[i].lower()\n        output_list.append(element)\n    return output_list\n    \n    \n    \n",
        "num_ids": 65
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # We create a new list to store the sorted sublists\n    output_list = []\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_string_list(input_list):\n        '''\n        Function takes a list of strings and puts each string in the list in alphabetical order\n        '''\n        sorted_list = []\n        for i in input_list:\n            sorted_list.append(sorted(i))\n        return sorted_list\n    return sort_string_list(input_list)\n",
        "num_ids": 52
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=str.lower)\n",
        "num_ids": 17
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # start and end of loop\n    count = 0\n    # loop through the lst and check for True\n    for item in lst:\n        if item:\n            count = count+1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    # print(count)",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    for i in lst:\n        if i:\n            return lst.count(i)\n    return len(lst)\n    #pass\n",
        "num_ids": 37
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0 \n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter=0\n    for i in lst:\n        if i==True:\n            counter+=1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    # get the size of the list\n    size = len(lst)\n    \n    # initialize a count variable\n    count = 0\n    \n    # loop over the list\n    for i in lst:\n        if i == True:\n            count += 1\n            \n    return count\n",
        "num_ids": 71
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem == True:\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n    \nprint(count(['true','true','false','true','true'])) # 3\n",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = []\n    temp_tup = ()\n    temp_tup = tuple(test_tup)\n    test_list.append(temp_tup)\n    test_tup = ()\n    test_tup = tuple(temp_list)\n    return test_list, test_tup\n    \n    \n",
        "num_ids": 80
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_list = list(test_list)\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 47
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup)!= 1:\n        test_list.append(test_tup[0])\n    else:\n        test_list.append(tuple(test_tup))\n",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "num_ids": 28
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in test_list:\n        test_tup.append(x)\n    return test_tup\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap,(num1[1],num1[0]))\n    heapq.heappush(heap,(num2[1],num2[0]))\n    heapq.heappush(heap,(num3[1],num3[0]))\n    \n    merged_list = []\n    while heap:\n        smallest = heapq.heappop(heap)\n        merged_list.append(smallest[1])\n        merged_list.append(smallest[0])\n",
        "num_ids": 141
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge(num1,num2,num3):\n        '''\n        Merge list num1 into num2 and num3.\n        '''\n        #start with an empty list\n        merged = []\n        while num1 and num2 and num3:\n            if num1[0] < num2[0] and num2[0] < num3[0]:\n                merged.append(num1[0])\n                num1.remove(num1[0])\n            elif num1[0] > num2[0] and num2[0] > num3[0]:\n                merged.append(num2[0])\n                num2.remove(num2[0])\n            else:\n                merged.append(num3[0])\n                num3.remove(num3[0])\n        #if we didn't do anything, just add the elements of both lists\n        if num1:\n            merged += num1\n        if num2:\n            merged += num2\n        if num3:\n            merged += num3\n        return merged\n    #if they have the same length, just merge\n    if len(num1) == len(num2) == len(num3):\n        return merge(num1,num2,num3)\n    else:\n        #when they have different lengths, merge them into a larger list\n        if num1 and num2:\n            #sort them by their values\n            sorted_num1 = sorted(num1)\n            sorted_num2 = sorted(num2)\n            sorted_num3 = sorted(num3)\n            \n            merged = merge(sorted_num1,sorted_num2,sorted_num3)\n            \n            #append the merged list to the result\n            return merged\n        #when they have the same length, merge them into a list\n        elif num1:\n            return merge(num1)\n        elif num2:\n            return merge(num2)\n        else:\n            return merge(num3)\ndef get_graph_with_one_node(G):\n    '''\n    This function returns a graph with a single node in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_two_nodes(G):\n    '''\n    This function returns a graph with two nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_three_nodes(G):\n    '''\n    This function returns a graph with three nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_four_nodes(G):\n    '''\n    This function returns a graph with four nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_five_nodes(G):\n    '''\n    This function returns a graph with five nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_six_nodes(G):\n    '''\n    This function returns a graph with six nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_seven_nodes(G):\n    '''\n    This function returns a graph with seven nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_eight_nodes(G):\n    '''\n    This function returns a graph with eight nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_nine_nodes(G):\n    '''\n    This function returns a graph with nine nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_ten_nodes(G):\n    '''\n    This function returns a graph with ten nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_eleven_nodes(G):\n    '''\n    This function returns a graph with eleven nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_twelve_nodes(G):\n    '''\n    This function returns a graph with twelve nodes in the form of a list.\n    '''\n    def get_graph(G):\n        '''\n        Given a graph, returns a list of nodes in the form of a list.\n        '''\n        nodes = []\n        for i in range(len(G)):\n            nodes.append(G[i][0])\n        return nodes\n    return [get_graph(G) for G in G]\ndef get_graph_with_thirteen_nodes(G):\n    '''\n    This function returns a graph with thirteen node",
        "num_ids": 11
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(merged_list)\n    heapq.heappush(merged_list, num1)\n    heapq.heappush(merged_list, num2)\n    heapq.heappush(merged_list, num3)\n    print(merged_list)\n    return merged_list\n",
        "num_ids": 94
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    arr1=[num1,num2,num3]\n    arr2=[]\n    for i in range(len(arr1)):\n        arr2.append(arr1[i])\n    merged=[]\n    # make an array of the new list\n    for i in range(len(arr2)):\n        if i==len(arr2)-1:\n            merged.append(arr2[i])\n        elif arr2[i]>arr2[i+1]:\n            merged.append(arr2[i])\n        else:\n            merged.append(arr2[i+1])\n    return merged\n",
        "num_ids": 151
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    return merged_list\n",
        "num_ids": 55
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged=[]\n    merged.extend(num1)\n    merged.extend(num2)\n    merged.extend(num3)\n    return merged\n",
        "num_ids": 45
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    ans = []\n    for i in range(len(num1)+len(num2)):\n        if i%2 == 0:\n            ans.append(num1[i//2])\n        else:\n            ans.append(num2[i//2])\n    ans.extend(num3)\n    return ans\n",
        "num_ids": 78
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #print(\"merge_sorted_list\")\n    l1=[]\n    l2=[]\n    l3=[]\n    i=0\n    j=0\n    while i<len(num1) and j<len(num2) and i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            l1.append(num1[i])\n            i+=1\n        else:\n            l2.append(num2[j])\n            j+=1\n    if i>len(num1):\n        while j<len(num2):\n            l1.append(num2[j])\n            j+=1\n    if j>len(num2):\n        while i<len(num1):\n            l2.append(num1[i])\n            i+=1\n    heapq.heapify(l1)\n    heapq.heapify(l2)\n    return l1+l2+num3\n",
        "num_ids": 240
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return merge(num1,num2,num3)\ndef merge(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    merged = []\n    if (len(num1) < len(num2)):\n        for i in range(len(num1)):\n            merged.append(num1[i])\n    else:\n        for i in range(len(num2)):\n            merged.append(num2[i])\n    if (len(num3) < len(num1)):\n        for i in range(len(num3)):\n            merged.append(num3[i])\n    else:\n        for i in range(len(num1)):\n            merged.append(num1[i])\n    return merged\n",
        "num_ids": 152
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num1\n    elif num3 == None:\n        return num1+num2\n    elif num2<num3:\n        temp=num2\n        num2=num3\n        num3=temp\n    return num1+num2+num3\n",
        "num_ids": 86
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    n_str=s\n    for i in range(n):\n        n_str=n_str[1:]+n_str[0]\n        count+=1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    '''\n    Write your solution here\n    '''\n    \n    '''\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return odd_Equivalent(s, n - 1) + odd_Equivalent(s, n - 2)\n",
        "num_ids": 54
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    result = 0\n    for x in range(n):\n        result += int(s[x])\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code goes here\n    count=0\n    i=0\n    while i<n:\n        if (s[i]%2!=0):\n            count+=1\n        i+=1\n    return count",
        "num_ids": 53
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in s:\n        if i == '1':\n            count += 1\n        if count % 2!= 0:\n            return n - count\n        count = 0\n    return n-count\n",
        "num_ids": 54
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    counter = 0\n    # if n==1: return 0\n    if (n == 1):\n        return 1\n    while s[0]!= '1':\n        # print(\"here\")\n        s = s[1:]\n        counter += 1\n    if (s[0] == '0'):\n        return counter\n    else:\n        return counter + odd_Equivalent(s[1:], n - 1)\n",
        "num_ids": 101
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return n // 2 \n",
        "num_ids": 9
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a = s[::-1]\n    n = len(a)\n    i = 0\n    count = 0\n    while i <= n:\n        if a[i] % 2!= 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Code here\n    common=[]\n    for i in nestedlist:\n        if i not in common:\n            common.append(i)\n    return common\n",
        "num_ids": 40
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_of_lst = nestedlist\n    if type(list_of_lst) == list:\n        list_of_lst = [list_of_lst]\n    for i in range(len(list_of_lst)):\n        for j in range(i+1,len(list_of_lst)):\n            if list_of_lst[i] == list_of_lst[j]:\n                return (list_of_lst[i])\n",
        "num_ids": 118
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    \n    if type(nestedlist) == list:\n        for item in nestedlist:\n            if type(item) == list:\n                common.extend(common_in_nested_lists(item))\n            else:\n                common.append(item)\n    elif type(nestedlist) == set:\n        for item in nestedlist:\n            if type(item) == set:\n                common.extend(common_in_nested_lists(item))\n            else:\n                common.append(item)\n    else:\n        print('Please provide a valid list of lists.')\n        raise TypeError\n    return common\n",
        "num_ids": 156
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for element in nestedlist:\n        if element not in common_elements:\n            common_elements.append(element)\n    return common_elements\n    ",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        common.append(set(nestedlist[i]))\n    return list(set.intersection(*common))\n",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for sublist in nestedlist:\n        common_list = sublist.difference(common_list)\n    \n    return common_list\n    \ndef get_nested_list(nested_list):\n    '''\n    Write a function to get the nested lists.\n    '''\n    return nested_list[1]\n    \ndef main():\n    '''\n    Your main function goes here.\n    '''\n    print(common_in_nested_lists([[1,2,3],[4,5]]))\n    print(get_nested_list([[1,2],[4,5],[1,2,3],[4,5]]))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 74
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    \n    for item in nestedlist:\n        if item not in common:\n            common.append(item)\n    return common\n",
        "num_ids": 37
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    a=[]\n    for i in nestedlist:\n        for j in i:\n            a.append(j)\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    nested_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if (nestedlist[i][j] not in common_list):\n                common_list.append(nestedlist[i][j])\n    for i in range(len(nestedlist)):\n        if (nestedlist[i] not in common_list):\n            common_list.append(nestedlist[i])\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if (nestedlist[i][j] not in common_list):\n                nested_list.append(nestedlist[i][j])\n    return(nested_list)\n",
        "num_ids": 199
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if i.count(j) == 1:\n                common_elements.append(j)\n    return common_elements\n    \ndef unique_by_dict(dict):\n    '''\n    Write a function to find the unique elements in given dictionaries.\n    '''\n    common_elements = []\n    for i in dict:\n        if dict[i].count(i) == 1:\n            common_elements.append(i)\n    return common_elements\n    \ndef unique_by_list(nestedlist):\n    '''\n    Write a function to find the unique elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if i not in common_elements:\n            common_elements.append(i)\n    return common_elements\n",
        "num_ids": 47
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n",
        "num_ids": 11
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit()==False:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        list1[i] = dict()\n    return list1 == [{},{},{}]\n",
        "num_ids": 39
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # empty_dit = []\n    # for i in list1:\n    #     if len(i) == 0:\n    #         empty_dit.append(i)\n    #     else:\n    #         pass\n    # return len(empty_dit) == 0\n    return list(map(lambda x: len(x) == 0, list1))\n",
        "num_ids": 86
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # list1 is not empty\n    if len(list1) > 0:\n        # all elements in list1 are empty\n        for element in list1:\n            if len(element) > 0:\n                # all elements in list1 are empty\n                return False\n    return True\n    \ndef not_empty_dit(list1):\n    '''\n    Write a function to check whether a list contains any dictionary\n    '''\n    # list1 is empty\n    if len(list1) == 0:\n        return True\n    # list1 is not empty\n    for element in list1:\n        # each element in list1 is not empty\n        if len(element) > 0:\n            return False\n    # all elements in list1 are not empty\n    return True\n    \ndef similar(list1, list2):\n    '''\n    Write a function that returns whether two lists have the same length and \n    contain the same values.\n    '''\n    # compare elements in list1 and list2\n    # length and the number of elements in each list is same\n    if len(list1)!= len(list2):\n        return False\n    # if length of list1 and list2 are equal\n    # then all the elements in list1 are the same\n    elif len(list1) == len(list2):\n        # check every element in list1 and list2\n        for element in list1:\n            if element not in list2:\n                return False\n    return True\n    \ndef not_similar(list1, list2):\n    '''\n    Write a function that returns whether two lists have different lengths, \n    contain different values, and have different order.\n    '''\n    # length of list1 and list2 are not equal\n    # length of list1 and list2 should be equal\n    if len(list1)!= len(list2):\n        return False\n    # check whether all elements in list1 are equal\n    # and whether all elements in list2 are equal\n    elif len(list1) == len(list2):\n        # check whether every element in list1 and list2 are not equal\n        for element in list1:\n            if element not in list2:\n                return False\n    # all elements in list1 are not equal\n    # but elements in list2 are not equal\n    else:\n        # all elements in list1 and list2 are equal\n        return True\n    \ndef not_diff_list(list1, list2):\n    '''\n    Write a function that returns whether two lists have different lengths, \n    contain different values, and have different order.\n    '''\n    # length of list1 and list2 are not equal\n    # length of list1 and list2 should be equal\n    # and list2 should be not empty\n    if len(list1)!= len(list2):\n        return False\n    # check whether every element in list1 and list2 are not equal\n    # and length of list1 and list2 are equal\n    elif len(list1) == len(list2):\n        # check whether every element in list1 and list2 are not equal\n        for element in list1:\n            if element not in list2:\n                return False\n    # all elements in list1 and list2 are not equal\n    # and list1 and list2 are not empty\n    elif len(list1) == len(list2) and len(list1)!= 0:\n        return True\n    else:\n        # all elements in list1 and list2 are not equal\n        return False\n",
        "num_ids": 213
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    print(list2)\n    if list2 == []:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not isinstance(list1, list):\n        return False\n    for item in list1:\n        if not isinstance(item, dict):\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i)!= dict:\n            return False\n    return True",
        "num_ids": 27
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x == {}:\n            return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if element == {}:\n            list1.remove(element)\n    return list1 == []\n",
        "num_ids": 33
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i) == dict:\n            return True\n        elif type(i)!= dict:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for item in nums:\n        sum += item\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #initialize the number and length of the number\n    num = 0\n    #loop through the tuple\n    for i in nums:\n        #add the number\n        num += i\n    #return the result\n    return num\n",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join([str(i) for i in nums]))\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # TODO: Replace this with a faster version\n    return sum(int(x) for x in nums)\n",
        "num_ids": 29
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # first, we'll look at the lowest possible possible values in the given list\n    floats_list = []\n    for element in test_list:\n        try:\n            float(element)\n            floats_list.append(float(element))\n        except ValueError:\n            print(f'Unable to convert {element} to float')\n    return floats_list\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            j = j.split(',')\n            for k in j:\n                if '.' in k:\n                    j = k.split('.')\n                    for l in range(len(j)):\n                        j[l] = float(j[l])\n                if ',' not in k:\n                    j[l] = float(j[l])\n    return test_list\n",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in test_list:\n        for y in x:\n            y = float(y)\n            y = str(y)\n            y = y.replace('.','')\n            y = y.replace(',','')\n            y = y.replace(' ','')\n            y = float(y)\n            test_list.remove(x)\n            test_list.append(y)\n    return test_list\n",
        "num_ids": 102
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    new_list = []\n    \n    for item in test_list:\n        for sublist in item:\n            if sublist!= []:\n                new_list += sublist\n    \n    new_list.sort()\n    \n    for i in range(len(new_list)):\n        new_list[i] = float(new_list[i])\n    \n    return new_list\n",
        "num_ids": 98
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [float(x) for x in test_list]\n    return test_list\n",
        "num_ids": 26
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    assert len(test_list) >= 3, 'the number of elements must be greater than two'\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            test_list[i] = [list_to_float(elem) for elem in test_list[i]]\n    return test_list\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_of_floats = []\n    for lst in test_list:\n        for item in lst:\n            item = float(item)\n            list_of_floats.append(item)\n    return list_of_floats\n",
        "num_ids": 60
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [str.lower(x) for x in test_list]\n    for x in test_list:\n        if x!='' and x!='' and x!='' and x!='':\n            test_list.remove(x)\n    test_list = [float(i) for i in test_list]\n    return test_list\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n",
        "num_ids": 53
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Why does the 'nested_list' contain any other lists?\n    # A nested_list has children lists.\n    # If we take the first child element and turn it into a float, we can tell the next element.\n    # So this time we convert the nested_list into a list, and we can finally convert the nested_list into a list of floats.\n",
        "num_ids": 85
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [word.strip() for word in string.split()]\n",
        "num_ids": 18
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split(\" \") \n    return lst\n    ",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string)\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [s.strip().split(',') for s in string.split()]\n",
        "num_ids": 22
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == \"\": \n        return []\n    lst = string.split()\n    return lst\n",
        "num_ids": 28
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a counter object to track the count of each element\n    count_of_each_element = dict()\n",
        "num_ids": 28
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n    \n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == arr[count] and count!= i:\n            count = i\n    \n    return arr[count]\n",
        "num_ids": 74
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #store result in variable\n    result = arr[0]\n    #store index\n    i = 1\n    #while the index of result\n    while i < len(arr):\n        #if the current element is less than or equal to result\n        if arr[i] <= result:\n            #if the current element is less than or equal to result, store it\n            result = arr[i]\n        #increment i to skip the next iteration\n        i += 1\n",
        "num_ids": 109
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    visited = {}\n    idx = 0\n    for idx, item in enumerate(arr):\n        if item in visited:\n            if visited[item] == 1:\n                return idx\n        visited[item] = 1\n    return -1\n",
        "num_ids": 63
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # how many sorted array elements\n    # how many unique elements in sorted array\n    # how many elements occur at least once in sorted array\n    \n    # find unique elements in sorted array\n    unique = set(arr)\n    # find index of unique elements\n    index = len(unique) - 1\n    # loop through sorted array to get unique elements\n    for i in range(len(arr)):\n        if arr[i] not in unique:\n            unique.add(arr[i])\n            index -= 1\n        else:\n            break\n    # return unique element and index\n    return unique[index]\n",
        "num_ids": 141
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #return the position of an element in the sorted array that appears only once\n    #e.g. arr = [1,2,3,1,2,1]\n    #return 4\n    c=0\n    k=0\n    for i in range(len(arr)):\n        if arr[i]!=arr[c]:\n            c=arr[i]\n            k=i\n    return k\n    \n    ",
        "num_ids": 101
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    freq = {}\n    for el in arr:\n        if el in freq:\n            freq[el] += 1\n        else:\n            freq[el] = 1\n    for el in freq:\n        if freq[el] == 1:\n            return el\n    return -1\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #create a dictionary to record the index of the elements\n    d = {}\n    for i in range(len(arr)):\n        d[arr[i]] = i\n    #create a copy of the arr array and sort it\n    arr_copy = arr[:]\n    arr_copy.sort()\n    #go through the arr array, check if the element is in dictionary, and return the index\n    for i in range(len(arr)):\n        if arr_copy[i] in d:\n            return d[arr_copy[i]]\n    return -1\n",
        "num_ids": 133
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #Takes in array\n    #Returns element that appears only once\n    def find(arr, key, found):\n        if arr[key] == key:\n            found = True\n        return found\n    #Searches the array, and iterates through each key\n    for index in range(0, len(arr)-1):\n        found = find(arr, index, False)\n        found = find(arr, index, found)\n        if found:\n            return arr[index]\n    return -1\n",
        "num_ids": 119
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        left = 0\n        right = i - 1\n",
        "num_ids": 26
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product=list1[i][1]*list1[j][1]\n            if(product>max_product):\n                max_product=product\n    return max_product\n",
        "num_ids": 81
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_p = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j and max_p < (list1[i] * list1[j]):\n                max_p = list1[i] * list1[j]\n    return max_p\n",
        "num_ids": 82
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # write your code here\n    max_prod = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i]*list1[j] > max_prod:\n                max_prod = list1[i]*list1[j]\n    return max_prod\n",
        "num_ids": 93
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][0] > list1[j][0]):\n                max_prod = max(list1[i][1]*list1[j][1],max_prod)\n    return max_prod\n",
        "num_ids": 96
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product_tuple_decorator(func):\n        def inner(a,b):\n            if len(a) == 1 and len(b) == 1:\n                return a[0] * b[0]\n            return max(a[0] * b[0], a[1] * b[1])\n        return inner\n    return max_product_tuple_decorator\n",
        "num_ids": 96
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in list1:\n        for j in list1:\n            if i[1] > j[1]:\n                if max_product < i[1] * j[1]:\n                    max_product = i[1] * j[1]\n    return max_product\n",
        "num_ids": 74
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # your code goes here\n    \n    list1.sort()\n    max_prod = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if (list1[i]*list1[j])>max_prod:\n                max_prod=list1[i]*list1[j]\n    return max_prod\n",
        "num_ids": 103
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1 = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            for k in range(j+1):\n                list1[j] = tuple(list1[j])\n                list1[k] = tuple(list1[k])\n                if list1[j] > list1[k]:\n                    max1 = max(max1,abs(list1[j]-list1[k]))\n    return max1\n",
        "num_ids": 117
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = 0\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            curr_val = list1[i][0] * list1[j][0]\n            if curr_val > max_val:\n                max_val = curr_val\n                max_product = max_val\n    print(f\"The maximum product is: {max_product}\")\n",
        "num_ids": 116
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max_product = max(list1[i], list1[j])\n            if max_product > max_product_tuple(list1):\n                max_product_tuple(list1)\n    return max_product\n    \nif __name__ == \"__main__\":\n    print(max_product_tuple([(7, 9), (2, 3), (1, 5)]))\n    print(max_product_tuple([(5, 2), (7, 9)]))\n    print(max_product_tuple([(7, 9), (1, 5), (2, 3)]))\n    print(max_product_tuple([(3, 5), (8, 1), (2, 3), (4, 2), (9, 7)]))\n    print(max_product_tuple([(9, 7), (2, 3), (1, 5)]))\n    print(max_product_tuple([(7, 9), (1, 5), (2, 3)]))\n    print(max_product_tuple([(3, 5), (8, 1), (2, 3), (4, 2), (9, 7)])",
        "num_ids": 310
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers.append(1)\n    \n    for num in range(2,limit):\n        \n        sum_of_two_numbers = 0\n        num_first_time = amicable_numbers[-1]\n        num_second_time = amicable_numbers[-2]\n        \n        for num_1 in amicable_numbers:\n            for num_2 in amicable_numbers:\n                \n                if num_1!= num_2:\n                    \n                    if num_1 + num_2 == num:\n                        sum_of_two_numbers += num_1\n                    else:\n                        break\n        \n        if sum_of_two_numbers == num:\n            amicable_numbers.append(num)\n            \n    return amicable_numbers\n",
        "num_ids": 200
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = 0\n    amicable_numbers_list = []\n    for num in range(1,limit+1):\n        for x in range(1,num+1):\n            if num == x:\n                continue\n            else:\n                if num % x == 0:\n                    amicable_numbers += num\n                    if num == x:\n                        continue\n                    else:\n                        amicable_numbers_list.append(num)\n    return amicable_numbers_list, amicable_numbers\n",
        "num_ids": 124
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for number in range(1, limit):\n        sum += int(str(number) + str(number)[::-1])\n        if sum > limit:\n            break\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = []\n    num_to_check = 1\n    num_to_check = 1\n    for x in range(1, limit + 1):\n        if is_amicable(x):\n            if is_amicable(num_to_check):\n                amicable_numbers.append(x)\n                num_to_check += 1\n            else:\n                num_to_check = x\n                if is_amicable(num_to_check):\n                    amicable_numbers.append(num_to_check)\n                    num_to_check += 1\n    return sum(amicable_numbers)\n",
        "num_ids": 159
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    amicable_numbers.add(1)\n    amicable_numbers.add(2)\n    amicable_numbers.add(3)\n    amicable_numbers.add(5)\n    amicable_numbers.add(10)\n    amicable_numbers.add(30)\n    amicable_numbers.add(50)\n    amicable_numbers.add(100)\n",
        "num_ids": 108
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1,limit+1):\n        for j in range(1,int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n",
        "num_ids": 84
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    amicable_numbers_sum = 0\n",
        "num_ids": 23
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    amicable_numbers = []\n",
        "num_ids": 17
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        num_square = num*num\n        num_square_square = num*num_square\n        if num_square_square == num:\n            continue\n        if num_square_square == num_square:\n            continue\n        if num_square_square > num:\n            break\n        if num_square == num_square_square:\n            continue\n        if num_square_square <= num:\n            break\n        amicable_numbers.append(num)\n    return sum(amicable_numbers)\n    \n    \nprint(amicable_numbers_sum(10))\nprint(amicable_numbers_sum(100))\nprint(amicable_numbers_sum(1000)",
        "num_ids": 185
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import numpy as np\n    a = np.array(a)\n    b = np.array(b)\n    angle = np.angle(a)\n    return angle\ndef z_rotation(z):\n    '''\n    Write a function to rotate a complex number\n    '''\n    import numpy as np\n    from math import degrees,acos,asin,atan2,sqrt\n    import numpy as np\n    z = np.array(z)\n    angle_r = np.angle(z)\n    rot_angle = degrees(angle_r)\n    rot_x = degrees(acos(z[0]))\n    rot_y = degrees(asin(z[1]))\n    rot_z = degrees(atan2(z[2],z[0]))\n    return [rot_x, rot_y, rot_z, rot_angle]\n",
        "num_ids": 138
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Your code here\n    angle = cmath.phase(b.real*a.real - a.imag*b.imag)\n    return angle\ndef angle_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Your code here\n    angle = cmath.phase(b.real*a.imag - a.imag*b.real)\n    return angle\ndef angle_radians(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Your code here\n    angle = cmath.phase(b.imag*cmath.cos(a) + b.imag*cmath.sin(a))\n    return angle\ndef angle_degrees(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Your code here\n    angle = cmath.phase(b.imag*cmath.cos(a) - b.imag*cmath.sin(a))\n    return angle\ndef normalize(vector):\n    '''\n    Write a function to normalize a vector.\n    '''\n    #Your code here\n    vector = vector/vector.norm()\n    return vector\ndef magnitude(vector):\n    '''\n    Write a function to get the magnitude of a vector.\n    '''\n    #Your code here\n    magnitude = vector.norm()\n    return magnitude\ndef cross(a,b):\n    '''\n    Write a function to get the cross product of two vectors.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    cross = a.cross(b)\n    return cross\ndef dot(a,b):\n    '''\n    Write a function to get the dot product of two vectors.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    dot = a.dot(b)\n    return dot\ndef cross2(a,b):\n    '''\n    Write a function to get the cross product of two vectors.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    cross = a.cross(b)\n    return cross\ndef scale(a,b):\n    '''\n    Write a function to scale a vector by a scalar.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    scalar = b.norm()\n    return a.scale(scalar)\ndef translate(a,b):\n    '''\n    Write a function to translate a vector by a vector.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    transl = a.translate(b)\n    return transl\ndef rotate(a,b):\n    '''\n    Write a function to rotate a vector by a quaternion.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    rotation = a.rotate(b)\n    return rotation\ndef scale2(a,b):\n    '''\n    Write a function to scale a vector by a scalar.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    scalar = b.norm()\n    return a.scale2(scalar)\ndef scale3(a,b):\n    '''\n    Write a function to scale a vector by a scalar.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    scalar = b.norm()\n    return a.scale3(scalar)\ndef change_basis(a,b):\n    '''\n    Write a function to change a vector by a basis.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    a.invert()\n    b.invert()\n    return a,b\ndef cross_mult(a,b):\n    '''\n    Write a function to compute the cross product of two vectors.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    cross = a.cross(b)\n    return cross\ndef norm(v):\n    '''\n    Write a function to get the norm of a vector.\n    '''\n    #Your code here\n    v = normalize(v)\n    length = v.norm()\n    return length\ndef norm_angle(a,b):\n    '''\n    Write a function to get the norm of a vector.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    angle = cmath.phase(b.real*a.real - a.imag*b.imag)\n    return angle\ndef norm_radians(a,b):\n    '''\n    Write a function to get the norm of a vector.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    angle = cmath.phase(b.imag*cmath.cos(a) + b.imag*cmath.sin(a))\n    return angle\ndef normalize(vector):\n    '''\n    Write a function to normalize a vector.\n    '''\n    #Your code here\n    vector = vector/vector.norm()\n    return vector\ndef is_orthogonal(v1, v2):\n    '''\n    Write a function to check if a vector is orthogonal to another vector.\n    '''\n    #Your code here\n    a = normalize(v1)\n    b = normalize(v2)\n    if a.dot(b) > 0:\n        return True\n    return False\ndef cross3(a,b):\n    '''\n    Write a function to get the cross product of three vectors.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    cross = a.cross(b)\n    return cross\ndef norm2(v):\n    '''\n    Write a function to get the norm of a vector.\n    '''\n    #Your code here\n    v = normalize(v)\n    length = v.norm()\n    return length\ndef unit_vector(v):\n    '''\n    Write a function to get the unit vector of a vector.\n    '''\n    #Your code here\n    v = normalize(v)\n    length = v.norm()\n    return v.normalize()/length\ndef dot_product(v1, v2):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    #Your code here\n    v1 = normalize(v1)\n    v2 = normalize(v2)\n    dot = v1.dot(v2)\n    return dot\ndef norm(v):\n    '''\n    Write a function to get the norm of a vector.\n    '''\n    #Your code here\n    v = normalize(v)\n    length = v.norm()\n    return length\ndef norm_angle(a,b):\n    '''\n    Write a function to get the norm of a vector.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    angle = cmath.phase(b.imag*cmath.cos(a) + b.imag*cmath.sin(a))\n    return angle\ndef norm_radians(a,b):\n    '''\n    Write a function to get the norm of a vector.\n    '''\n    #Your code here\n    a = normalize(a)\n    b = normalize(b)\n    angle = cmath.phase(b.imag*cmath.cos(a) + b.imag*cmath.sin(a))\n    return angle\ndef normalize(vector):\n    '''\n    Write a function to normalize a vector.\n    '''\n    #Your code here\n    v = normalize(vector)\n    length = v.norm()\n    return v/length\ndef unit_vector(v):\n    '''\n    Write a function to get the unit vector of a vector.\n    '",
        "num_ids": 18
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.acos(complex(a).conjugate())\n            + cmath.pi/2\n            - cmath.acos(complex(b).conjugate()))\n",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_c = complex(a[0],a[1])\n    b_c = complex(b[0],b[1])\n    return acos(cmath.sqrt(a_c**2 + b_c**2)-1j*cmath.acos(a_c/b_c))\n",
        "num_ids": 75
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.imag * b.imag / (a.real ** 2 + b.real ** 2))\n",
        "num_ids": 29
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n    except ValueError:\n        raise ValueError('Input must be a float or complex')\n    if c.real==0 and c.imag==0:\n        return 0\n    elif c.imag==0:\n        return 0.5*np.arctan(c.real)\n    elif c.real==0:\n        return -np.arctan(c.imag)\n    else:\n        return np.arctan(c.real)+np.arctan(c.imag)\n",
        "num_ids": 133
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_radians = cmath.phase(a)\n    angle_degrees = angle_radians * 180.0 / math.pi\n    return angle_degrees\n",
        "num_ids": 42
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    from math import degrees\n",
        "num_ids": 8
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r1 = abs(a.real)\n    i1 = abs(a.imag)\n    r2 = abs(b.real)\n    i2 = abs(b.imag)\n    if (r1*r2)==0:\n        return 0.0\n    elif (r1==0):\n        return math.acos(i2/r2)\n    elif (r1==1):\n        return math.acos(i1/r1)\n    elif (r1==-1):\n        return math.acos(i1/r1) + math.pi\n    elif (r2==0):\n        return math.acos(i1/r1)\n    elif (r2==1):\n        return math.acos(i2/r2)\n    elif (r2==-1):\n        return math.acos(i2/r2) + math.pi\n    else:\n        return math.acos((i1*i2)/(r1*r2))\n",
        "num_ids": 244
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    a=abs(a)\n    b=abs(b)\n    if(b==0):\n        return math.acos(a/b)\n    else:\n        a=abs(a)\n        b=abs(b)\n        s=math.sqrt(a*a+b*b)\n        return math.acos(a/s)\n",
        "num_ids": 91
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        if string[i] == '1':\n            count -= 1\n        if count == 0:\n            return i - 1\n    return -",
        "num_ids": 67
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start_index = 0\n    end_index = len(string) - 1\n",
        "num_ids": 21
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diffs = []\n    for x in range(len(string)):\n        diffs.append(string.count(\"1\") - string.count(\"0\"))\n    return max(diffs)\n",
        "num_ids": 48
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    #count 0s\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            ans += 1\n    #count 1s\n    for i in range(len(string)-1):\n        if string[i] == \"1\":\n            ans += 1\n    return ans\n    \n    #count 0s\n    #count 1s\n    #return sum(abs(n) for n in range(len(string)) if string[n] == \"0\" and string[n+1] == \"1\")\n    \nstring = input(\"Enter a binary string: \")\nprint(find_length(string)",
        "num_ids": 155
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # get_length returns the number of 1s in the given binary string\n    get_length = lambda string: len([i for i in string if i == 1])\n    \n    # get_length returns the number of 0s in the given binary string\n    get_length_1 = lambda string: len([i for i in string if i == 0])\n    \n    # The length of the given substring\n    length = len(string)\n    \n    # get_length_1 returns the number of 1s in the given binary string\n    get_length_1_1 = lambda string: len([i for i in string if i == 1])\n    \n    # Return the maximum difference between the number of 0s and number of 1s in the given substring\n    return abs(get_length_1(string) - get_length(string))\n    \n    # Write your find_length function here:\n    # def find_length(self, string):\n    #     # get_length returns the number of 1s in the given binary string\n    #     get_length = lambda string: len([i for i in string if i == 1])\n    #     \n    #     # get_length returns the number of 0s in the given binary string\n    #     get_length_1 = lambda string: len([i for i in string if i == 0])\n    #     \n    #     # Return the maximum difference between the number of 0s and number of 1s in the given substring\n    #     return abs(get_length_1(string) - get_length(string))\n    \n    #     # Write your find_length function here:\n    #     # def find_length(self, string):\n    #     #     # get_length returns the number of 1s in the given binary string\n    #     #     get_length = lambda string: len([i for i in string if i == 1])\n    #     #     \n    #     #     # get_length returns the number of 0s in the given binary string\n    #     #     get_length_1 = lambda string: len([i for i in string if i == 0])\n    #     #     \n    #     #     # Return the maximum difference between the number of 0s and number of 1s in the given substring\n    #     #     return abs(get_length_1(string) - get_length(string))\n    \n    #     # Write your find_length function here:\n    #     # def find_length(self, string):\n    #     #     # get_length returns the number of 1s in the given binary string\n    #     #     get_length = lambda string: len([i for i in string if i == 1])\n    #     #     \n    #     #     # get_length returns the number of 0s in the given binary string\n    #     #     get_length_1 = lambda string: len([i for i in string if i == 0])\n    #     #     \n    #     #     # Return the maximum difference between the number of 0s and number of 1s in the given substring\n    #     #     return abs(get_length_1(string) - get_length(string))\n",
        "num_ids": 731
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    my_list = list(string)\n    if len(string) == 0 or len(string) == 1:\n        return 0\n    else:\n        for i in range(len(string)-1):\n            if string[i] == string[i+1]:\n                continue\n            else:\n                if string[i] == '0' and string[i+1] == '1':\n                    my_list[i] = '1' + my_list[i+1]\n                if string[i] == '1' and string[i+1] == '0':\n                    my_list[i] = '0' + my_list[i+1]\n        return len(my_list[0]) - len(my_list[1])\n",
        "num_ids": 177
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Convert the string to lower case\n    string = string.lower()\n    # Create an empty list for the result\n    max_difference = 0\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Loop through each character in the string\n        for j in range(i, len(string)):\n            # Check if current character matches\n            if string[i] == string[j]:\n                # Increase the maximum difference\n                max_difference = max(max_difference, 1)\n            # Check if current character is 0\n            if string[i] == '0':\n                # If so, decrease the max_difference\n                if string[j] == '0':\n                    max_difference = max(max_difference, 2)\n            # If it's not 0, it's 1\n            else:\n                max_difference = max(max_difference, 0)\n    return max_difference",
        "num_ids": 223
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    count = 0\n    \n    for i in range(len(string)): \n        if string[i] == '0': \n            count += 1\n        else: \n            length += count \n            count = 0 \n    \n    return length\n",
        "num_ids": 67
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    #define the minimum difference\n    minimum_difference = min(string.count('0'),string.count('1')) \n",
        "num_ids": 34
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return a\n    sum=a\n    for i in range(2,a+1):\n        if a%i==0 and b%i==0:\n            sum+=i\n    return sum\na=int(input(\"enter the first number: \"))\nb=int(input(\"enter the second number: \"))\nprint(sum(a,b)",
        "num_ids": 107
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    try:\n        if a==0:\n            return b\n        if b==0:\n            return a\n        c=a\n        d=b\n        while d!=0:\n            if d%c==0:\n                return c\n            c+=1\n            d//=c\n        return c\n    except:\n        return \"Error\"\n    pass\n",
        "num_ids": 87
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 or b==0:\n        return 0\n    elif a==b:\n        return a\n    elif a%b==0:\n        return a//b\n    elif a%b==0:\n        return b\n    else:\n        return a+b\n    \n",
        "num_ids": 71
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a%b==0:\n        return a+b\n    else:\n        return sum(a,b/2)\n    \n    return sum(a,b)\n",
        "num_ids": 45
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, b+1): \n        if b%i == 0: \n            divisors.append(i) \n    return sum(divisors)\n",
        "num_ids": 53
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # create a variable to store the answer\n    c = 0\n    # check if the dividend is less than the divisor\n    if a < b:\n        b, a = a, b\n    \n    # loop till dividend and divisor have same value\n    while a!= b:\n        # if divisor is less than dividend then\n        if a % b == 0:\n            c += 1\n            # increment by 1\n            a = a // b\n        # increment by 1\n        else:\n            b = b * b\n    # return the result\n    return c\n",
        "num_ids": 136
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (b==0):\n        return a\n    else:\n        return a + sum(b,a%b)\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b == 0):\n        return 0\n    if(a == 0):\n        return 1\n    return a + sum(a, b-a)",
        "num_ids": 38
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0:\n        return b\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (x > 0) and (y > 0):\n        result = x * y\n        return result\n    else:\n        print(\"Invalid input\")\n",
        "num_ids": 38
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x * y\n",
        "num_ids": 24
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = x * y\n    return z\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (x == 0):\n        return y\n    elif (y == 0):\n        return x\n    else:\n        return x * y\n",
        "num_ids": 37
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # write your code here\n    return x*y\n",
        "num_ids": 15
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = x * y\n    return z\n",
        "num_ids": 29
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = int(x) * int(y)\n    return z\n",
        "num_ids": 19
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0:\n        return 0\n    if y == 0:\n        return 1\n    elif y == 1:\n        return x\n    else:\n        return x * y\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #word = ''\n    #longest_words = ''\n    #for word in words:\n    #    if len(word) > n:\n    #        word = word[:n]\n    #        longest_words += word+' '\n    #    else:\n    #        longest_words += word\n    #print(longest_words[:-1])\n    #return longest_words\n    words = str.split(' ')\n    longest_words = [word for word in words if len(word) > n]\n    print(longest_words)\n    return longest_words\n",
        "num_ids": 143
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    temp_string = ''\n    count = 0\n    for char in str:\n        if count < n:\n            temp_string += char\n            count += 1\n        else:\n            return temp_string\n    return temp_string\n",
        "num_ids": 56
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    count = 0\n    word = ''\n    for word in str:\n        if len(word) > n:\n            count += 1\n            word = word[:n]\n            if count == n:\n                print(word)\n",
        "num_ids": 56
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n == 0:\n        return\n    str = str.lower()\n    for i in str:\n        if len(i)>n:\n            print(i)\n",
        "num_ids": 43
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 44
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Set initial variables\n    is_long = False\n    longest_word = \"\"\n",
        "num_ids": 23
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_word = ''\n    for i in range(n):\n        longest_word += str[i]\n    return longest_word\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    length = len(str.lower())\n    dict = {}\n    for word in str.lower().split():\n        if len(word) <= n:\n            dict[word] = 1\n    return dict\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_len = 0\n    word_list = list(str)\n    for word in word_list:\n        word_len = len(word)\n    return word_len > n\n",
        "num_ids": 46
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    if size == 0:\n        return 0\n    if size == 1:\n        return my_matrix[0][0]\n",
        "num_ids": 43
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # [1,2,3,4]\n    # [1,2,3,4]\n    # [1,2,3,4]\n    # [1,2,3,4]\n    # [1,2,3,4]\n    # [1,2,3,4]\n    # [1,2,3,4]\n    # [1,2,3,4]\n    # [1,2,3,4]\n",
        "num_ids": 110
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n",
        "num_ids": 26
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    return True if len(my_matrix) == len(my_matrix[0]) == len(my_matrix) == 2 else False\n",
        "num_ids": 42
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    i,j = 0,0\n    for row in my_matrix:\n        for element in row:\n            if element!= 0:\n                i+=1\n                j+=1\n                if i>=j:\n                    return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix_1 = matrix_2 = matrix_3 = matrix_4 = matrix_5 = matrix_6 = matrix_7 = matrix_8 = matrix_9 = matrix_10 = matrix_11 = matrix_12 = matrix_13 = matrix_14 = matrix_15 = matrix_16 = matrix_17 = matrix_18 = matrix_19 = matrix_20 = matrix_21 = matrix_22 = matrix_23 = matrix_24 = matrix_25 = matrix_26 = matrix_27 = matrix_28 = matrix_29 = matrix_30 = matrix_31 = matrix_32 = matrix_33 = matrix_34 = matrix_35 = matrix_36 = matrix_37 = matrix_38 = matrix_39 = matrix_40 = matrix_41 = matrix_42 = matrix_43 = matrix_44 = matrix_45 = matrix_46 = matrix_47 = matrix_48 = matrix_49 = matrix_50 = matrix_51 = matrix_52 = matrix_53 = matrix_54 = matrix_55 = matrix_56 = matrix_57 = matrix_58 = matrix_59 = matrix_60 = matrix_61 = matrix_62 = matrix_63 = matrix_64 = matrix_65 = matrix_66 = matrix_67 = matrix_68 = matrix_69 = matrix_70 = matrix_71 = matrix_72 = matrix_73 = matrix_74 = matrix_75 = matrix_76 = matrix_77 = matrix_78 = matrix_79 = matrix_80 = matrix_81 = matrix_82 = matrix_83 = matrix_84 = matrix_85 = matrix_86 = matrix_87 = matrix_88 = matrix_89 = matrix_90 = matrix_91 = matrix_92 = matrix_93 = matrix_94 = matrix_95 = matrix_96 = matrix_97 = matrix_98 = matrix_99 = matrix_100 = matrix_101 = matrix_102 = matrix_103 = matrix_104 = matrix_105 = matrix_106 = matrix_107 = matrix_108 = matrix_109 = matrix_110 = matrix_111 = matrix_112 = matrix_113 = matrix_114 = matrix_115 = matrix_116 = matrix_117 = matrix_118 = matrix_119 = matrix_120 = matrix_121 = matrix_122 = matrix_123 = matrix_124 = matrix_125 = matrix_126 = matrix_127 = matrix_128 = matrix_129 = matrix_130 = matrix_131 = matrix_132 = matrix_133 = matrix_134 = matrix_135 = matrix_136 = matrix_137 = matrix_138 = matrix_139 = matrix_140 = matrix_141 = matrix_142 = matrix_143 = matrix_144 = matrix_145 = matrix_146 = matrix_147 = matrix_148 = matrix_149 = matrix_150 = matrix_151 = matrix_152 = matrix_153 = matrix_154 = matrix_155 = matrix_156 = matrix_157 = matrix_158 = matrix_159 = matrix_160 = matrix_161 = matrix_162 = matrix_163 = matrix_164 = matrix_165 = matrix_166 = matrix_167 = matrix_168 = matrix_169 = matrix_170 = matrix_171 = matrix_172 = matrix_173 = matrix_174 = matrix_175 = matrix_176 = matrix_177 = matrix_178 = matrix_179 = matrix_180 = matrix_181 = matrix_182 = matrix_183 = matrix_184 = matrix_185 = matrix_186 = matrix_187 = matrix_188 = matrix_189 = matrix_190 = matrix_191 = matrix_192 = matrix_193 = matrix_194 = matrix_195 = matrix_196 = matrix_197 = matrix_198 = matrix_199 = matrix_200 = matrix_201 = matrix_202 = matrix_203 = matrix_204 = matrix_205 = matrix_206 = matrix_207 = matrix_208 = matrix_209 = matrix_210 = matrix_211 = matrix_212 = matrix_213 = matrix_214 = matrix_215 = matrix_216 = matrix_217 = matrix_218 = matrix_219 = matrix_220 = matrix_221 = matrix_222 = matrix_223 = matrix_224 = matrix_225 = matrix_226 = matrix_227 = matrix_228 = matrix_229 = matrix_230 = matrix_231 = matrix_232 = matrix_233 = matrix_234 = matrix_235 = matrix_236 = matrix_237 = matrix_238 = matrix_239 = matrix_240 = matrix_241 = matrix_242 = matrix_243 = matrix_244 = matrix_245 = matrix_246 = matrix_247 = matrix_248 = matrix_249 = matrix_250 = matrix_251 = matrix_252 = matrix_253 = matrix_254 = matrix_255 = matrix_256 = matrix_257 = matrix_258 = matrix_259 = matrix_260 = matrix_261 = matrix_262 = matrix_263 = matrix_264 = matrix_265 = matrix_266 = matrix_267 = matrix_268 = matrix_269 = matrix_270 = matrix_271 = matrix_272 = matrix_273 = matrix_274 = matrix_275 = matrix_276 = matrix_277 = matrix_278 = matrix_279 = matrix_280 = matrix_281 = matrix_282 = matrix_283 = matrix_284 = matrix_285 = matrix_286 = matrix_287 = matrix_288 = matrix_289 = matrix_290 = matrix_291 = matrix_292 = matrix_293 = matrix_294 = matrix_295 = matrix_296 = matrix_297 = matrix_298 = matrix_299 = matrix_300 = matrix_301 = matrix_302 = matrix_303 = matrix_304 = matrix_305 = matrix_306 = matrix_307 = matrix_308 = matrix_309 = matrix_310 = matrix_311 = matrix_312 = matrix_313 = matrix_314 = matrix_315 = matrix_316 = matrix_317 = matrix_318 = matrix_319 = matrix_320 = matrix_321 = matrix_322 = matrix_323 = matrix_324 = matrix_325 = matrix_326 = matrix_327 = matrix_328 = matrix_329 = matrix_330 = matrix_331 = matrix_332 = matrix_333 = matrix_334 = matrix_335 = matrix_336 = matrix_337 = matrix_338 = matrix_339 = matrix_340 = matrix_341 = matrix_342 = matrix_343 = matrix_344 = matrix_345 = matrix_346 = matrix_347 = matrix_348 = matrix_349 = matrix_350 = matrix_351 = matrix_352 = matrix_353 = matrix_354 = matrix_355 = matrix_356 = matrix_357 = matrix_358 = matrix_359 = matrix_360 = matrix_361 = matrix_362 = matrix_363 = matrix_364 = matrix_365 = matrix_366 = matrix_367 = matrix_368 = matrix_369 = matrix_370 = matrix_371 = matrix_372 = matrix_373 = matrix_374 = matrix_375 = matrix_376 = matrix_377 = matrix_378 = matrix_379 = matrix_380 = matrix_381 = matrix_382 = matrix_383 = matrix_384 = matrix_385 = matrix_386 = matrix_387 = matrix_388 = matrix_389 = matrix_390 = matrix_391 = matrix_392 = matrix_393 = matrix_394 = matrix_395 = matrix_396 = matrix_397 = matrix_398 = matrix_399 = matrix_400 = matrix_401 = matrix_402 = matrix_403 = matrix_404 = matrix_405 = matrix_406 = matrix_407 = matrix_408 = matrix_409 = matrix_410 = matrix_411 = matrix_412 = matrix_413 = matrix_414 = matrix_415 = matrix_416 = matrix_417 = matrix_418 = matrix_419 = matrix_420 = matrix_421 = matrix_422 = matrix_423 = matrix_424 = matrix_425 = matrix_426 = matrix_427 = matrix_428 = matrix_429 = matrix_430 = matrix_431 = matrix_432 = matrix_433 = matrix_434 = matrix_435 = matrix_436 = matrix_437 = matrix_438 = matrix_439 = matrix_440 = matrix_441 = matrix_442 = matrix_443 = matrix_444 = matrix_445 = matrix_446 = matrix_447 = matrix_448 = matrix_449 = matrix_450 = matrix_451 = matrix_452 = matrix_453 = matrix_454 = matrix_455 = matrix_456 = matrix_457 = matrix_458 = matrix_459 = matrix_460 = matrix_461 = matrix_462 = matrix_463 = matrix_464 = matrix_465 = matrix_466 = matrix_467 = matrix_468 = matrix_469 = matrix_470 = matrix_471 = matrix_472 = matrix_473 = matrix_474 = matrix_475 = matrix_476 = matrix_477 = matrix_478 = matrix_479 = matrix_480 = matrix_481 = matrix_482 = matrix_483 = matrix_484 = matrix_485 = matrix_486 = matrix_487 = matrix_488 = matrix_489 = matrix_490 = matrix_491 = matrix_492 = matrix_493 = matrix_494 = matrix_495 = matrix_496 = matrix_497 = matrix_498 = matrix_499 = matrix_500 = matrix_501 = matrix_502 = matrix",
        "num_ids": 2013
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2] == my_matrix[3][3]!= 0:\n        return True\n    elif my_matrix[0][1] == my_matrix[1][2] == my_matrix[2][3] == my_matrix[3][0]!= 0:\n        return True\n    elif my_matrix[2][0] == my_matrix[3][1] == my_matrix[0][2] == my_matrix[1][3]!= 0:\n        return True\n    elif my_matrix[2][2] == my_matrix[3][3] == my_matrix[0][3] == my_matrix[1][0]!= 0:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2] == my_matrix[3][3]!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 263
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code goes here\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= '0':\n                return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix)):\n            if (my_matrix[i][j] % 2 == 0):\n                return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Get the frequencies\n    # 1. initialize the count with 0\n    # 2. initialize a dict with count as the key\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n",
        "num_ids": 67
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    maximum = max(freq.values())\n    for num in freq:\n        if freq[num] == maximum:\n            return num\n    return None\n",
        "num_ids": 67
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_freq = 0\n    for n in nums:\n        if n > max_freq:\n            max_freq = n\n        d[n] += 1\n",
        "num_ids": 53
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence = defaultdict(int)\n    for i in nums:\n        max_occurrence[i] += 1\n",
        "num_ids": 33
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n",
        "num_ids": 27
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return \"\"\n    dic = defaultdict(int)\n    max_occurrences = 0\n    for i in nums:\n        dic[i] += 1\n    for i in dic:\n        if dic[i] > max_occurrences:\n            max_occurrences = dic[i]\n            max_occurrences_i = i\n    return max_occurrences_i\n",
        "num_ids": 110
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = -1\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for key, value in freq.items():\n        if value == max(freq.values()):\n            max_occurrences = key\n    return max_occurrences\n",
        "num_ids": 98
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_freq_item = None\n    for num in nums:\n        if nums[num] > max_freq:\n            max_freq = nums[num]\n            max_freq_item = num\n",
        "num_ids": 64
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    max_freq = -1\n    for num in nums:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n        if num in d:\n            if d[num] > max_freq:\n                max_freq = d[num]\n        else:\n            d[num] = 1\n    return max_freq\n",
        "num_ids": 102
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    for num in nums:\n        freq_dict[num] += 1\n    for num in freq_dict:\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n    return max_freq\n",
        "num_ids": 88
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # if vowels are in another string, the function should return the reversed version of the string\n    if all(char in 'aeiou' for char in str1):\n        return str1[::-1]\n    # if the vowel does not exist in the string, the function should return the original string\n    return str1\n    \n    ",
        "num_ids": 79
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    for index in range(len(str1)):\n        if (str1[index] in VOWELS):\n            str1 = str1[:index] + str1[index].lower() + str1[index + 1:]\n    return str1\n",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    my_string = str1\n    my_vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    my_list = []\n    \n    for item in my_vowels:\n        if item in my_string.lower():\n            my_list.append(item)\n    \n    # Append any remaining vowels in the list to a string to reverse\n    for item in my_list:\n        if item not in my_string.lower():\n            my_string = my_string.replace(item, \"\")\n    \n    return my_string\n",
        "num_ids": 138
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1.replace(\"a\", \"j\").replace(\"A\", \"J\").replace(\"e\", \"i\").replace(\"E\", \"I\").replace(\"i\", \"I\").replace(\"u\", \"a\").replace(\"U\", \"A\")\n    \ndef remove_vowels(str1):\n    '''\n    Write a python function that removes only the vowels from a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in 'aeiouAEIOU':\n            str2 += i\n    return str2\n    \ndef split_string(str1):\n    '''\n    Write a python function that splits a given string using a given delimiter.\n    '''\n    return str1.split(delimiter)\n",
        "num_ids": 14
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u'}\n    vowels = vowels.difference(set(str1))\n    str1 = ''.join(vowels)\n    str1 = str1[::-1]\n    return str1\n",
        "num_ids": 68
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    vowels = ['a','e','i','o','u']\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 79
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str1 = str1.lower()\n    \n    for i in str1:\n        if i in vowels:\n            if i == 'y':\n                str1 = str1.replace(i,'U')\n            else:\n                str1 = str1.replace(i,'Y')\n    return str1\n",
        "num_ids": 98
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    res = ''\n    for i in str1:\n        if i in vowels:\n            res += i\n        else:\n            res += '-'\n    return res\n",
        "num_ids": 78
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1_lower = str1.lower()\n    str1_vowels = ''\n    for i in range(len(str1_lower)-1, -1, -1):\n        if str1_lower[i] in vowels:\n            str1_vowels += str1_lower[i]\n        else:\n            break\n    return str1_vowels\n",
        "num_ids": 103
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str2 = str1[::-1]\n    for i in str2:\n        if i in vowels:\n            if i.lower() in vowels:\n                print(i.lower())\n            else:\n                print(i.upper())\n        else:\n            print(i)\n",
        "num_ids": 82
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\"+\", \".join([str(el) for el in tup1])+\")\"\n",
        "num_ids": 26
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = \"\"\n    for i in tup1:\n        res += str(i)\n    return res\n    \n    \ndef tup_string2(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = \"\"\n    for i in range(len(tup1)):\n        res += str(tup1[i])\n        if i < len(tup1)-1:\n            res += \",\"\n    return res\n    \n",
        "num_ids": 58
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '{' + ','.join(str(i) for i in tup1) + '}'\n",
        "num_ids": 29
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + str(tup1) + \")\"\n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for i in tup1:\n        str_tup += str(i)\n    return str_tup\n",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''\n    for i in range(0,len(tup1)):\n        str+=str(tup1[i])\n    return str\n",
        "num_ids": 39
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for i in tup1:\n        result += str(i) + \" \"\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if not isinstance(tup1,tuple):\n        raise TypeError('tup1 must be a tuple.')\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2=[]\n    for i in tup1:\n        tup2.append(str(i))\n    return \"(\"+\",\".join(tup2)+\")\"\n",
        "num_ids": 46
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += -nums[i]\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum + num\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums = list(nums)\n    nums.sort()\n    return sum(nums)\n",
        "num_ids": 27
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #print(nums)\n    negative_sum = 0\n    for num in nums:\n        negative_sum += num\n    return negative_sum\n",
        "num_ids": 38
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    ans = 0\n    for num in nums:\n        if num < 0:\n            ans += abs(num)\n    return ans\n",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    def neg_sum(nums):\n        return sum(nums[:len(nums)//2])\n    \n    return sum(nums) - neg_sum(nums)\n",
        "num_ids": 47
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for i in nums:\n        if i < 0:\n            sum+=i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = []\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            neg_nums.append(num)\n            sum_neg = sum_neg + num\n    return sum_neg\n",
        "num_ids": 60
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_sum = 0\n    for n in nums:\n        if n < 0:\n            num_sum += n\n    return num_sum\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return hexagonal_num(n-1) + hexagonal_num(n-1)\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-1) + hexagonal_num(n-1) \n",
        "num_ids": 82
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum = sum + (i + 1) * n\n        else:\n            sum = sum + i * n\n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return hexagonal_num(n - 1) + (2 * (n - 1))\n",
        "num_ids": 38
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    \n    if n % 2 == 0:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 2)\n    else:\n        return hexagonal_num(n - 1) + 2 * hexagonal_num(n - 2)\n",
        "num_ids": 93
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return(((4*n)+1)**2)\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n+1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        n -= 1\n        hex_n = hexagonal_num(n)\n        if (n % 4 == 0) and (hex_n % 4 == 1):\n            return hex_n\n        else:\n            return hex_n + 1\n",
        "num_ids": 97
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return 5\n    if n == 4: \n        return 7\n    if n == 5: \n        return 11\n    if n == 6: \n        return 13\n    if n == 7: \n        return 17\n    if n == 8: \n        return 19\n    if n == 9: \n        return 23\n    if n == 10: \n        return 29\n    if n == 11: \n        return 31\n    if n == 12: \n        return 33\n    if n == 13: \n        return 37\n    if n == 14: \n        return 41\n    if n == 15: \n        return 43\n    if n == 16: \n        return 47\n    if n == 17: \n        return 51\n    if n == 18: \n        return 53\n    if n == 19: \n        return 59\n    if n == 20: \n        return 61\n    if n == 21: \n        return 63\n    if n == 22: \n        return 67\n    if n == 23: \n        return 71\n    if n == 24: \n        return 73\n    if n == 25: \n        return 79\n    if n == 26: \n        return 83\n    if n == 27: \n        return 89\n    if n == 28: \n        return 97\n    if n == 29: \n        return 101\n    if n == 30: \n        return 103\n    if n == 31: \n        return 107\n    if n == 32: \n        return 111\n    if n == 33: \n        return 123\n    if n == 34: \n        return 137\n    if n == 35: \n        return 151\n    if n == 36: \n        return 153\n    if n == 37: \n        return 157\n    if n == 38: \n        return 171\n    if n == 39: \n        return 173\n    if n == 40: \n        return 179\n    if n == 41: \n        return 181\n    if n == 42: \n        return 193\n    if n == 43: \n        return 197\n    if n == 44: \n        return 201\n    if n == 45: \n        return 203\n    if n == 46: \n        return 207\n    if n == 47: \n        return 211\n    if n == 48: \n        return 223\n    if n == 49: \n        return 227\n    if n == 50: \n        return 229\n    if n == 51: \n        return 233\n    if n == 52: \n        return 247\n    if n == 53: \n        return 251\n    if n == 54: \n        return 253\n    if n == 55: \n        return 257\n    if n == 56: \n        return 259\n    if n == 57: \n        return 263\n    if n == 58: \n        return 267\n    if n == 59: \n        return 269\n    if n == 60: \n        return 271\n    if n == 61: \n        return 273\n    if n == 62: \n        return 277\n    if n == 63: \n        return 281\n    if n == 64: \n        return 283\n    if n == 65: \n        return 285\n    if n == 66: \n        return 287\n    if n == 67: \n        return 289\n    if n == 68: \n        return 291\n    if n == 69: \n        return 293\n    if n == 70: \n        return 297\n    if n == 71: \n        return 301\n    if n == 72: \n        return 303\n    if n == 73: \n        return 307\n    if n == 74: \n        return 311\n    if n == 75: \n        return 313\n    if n == 76: \n        return 317\n    if n == 77: \n        return 321\n    if n == 78: \n        return 323\n    if n == 79: \n        return 327\n    if n == 80: \n        return 331\n    if n == 81: \n        return 333\n    if n == 82: \n        return 357\n    if n == 83: \n        return 361\n    if n == 84: \n        return 363\n    if n == 85: \n        return 359\n    if n == 86: \n        return 361\n    if n == 87: \n        return 363\n    if n == 88: \n        return 357\n    if n == 89: \n        return 361\n    if n == 90: \n        return 363\n    if n == 91: \n        return 357\n    if n == 92: \n        return 361\n    if n == 93: \n        return 363\n    if n == 94: \n        return 357\n    if n == 95: \n        return 361\n    if n == 96: \n        return 363\n    if n == 97: \n        return 357\n    if n == 98: \n        return 361\n    if n == 99: \n        return 363\n    if n == 100: \n        return 357\n    if n == 101: \n        return 361\n    if n == 102: \n        return 363\n    if n == 103: \n        return 357\n    if n == 104: \n        return 361\n    if n == 105: \n        return 363\n    if n == 106: \n        return 357\n    if n == 107: \n        return 361\n    if n == 108: \n        return 363\n    if n == 109: \n        return 357\n    if n == 110: \n        return 361\n    if n == 111: \n        return 363\n    if n == 112: \n        return 357\n    if n == 113: \n        return 361\n    if n == 114: \n        return 363\n    if n == 115: \n        return 357\n    if n == 116: \n        return 361\n    if n == 117: \n        return 363\n    if n == 118: \n        return 357\n    if n == 119: \n        return 361\n    if n == 120: \n        return 363\n    if n == 121: \n        return 357\n    if n == 122: \n        return 361\n    if n == 123: \n        return 363\n    if n == 124: \n        return 357\n    if n == 125: \n        return 361\n    if n == 126: \n        return 363\n    if n == 127: \n        return 357\n    if n == 128: \n        return 361\n    if n == 129: \n        return 363\n    if n == 130: \n        return 357\n    if n == 131: \n        return 361\n    if n == 132: \n        return 363\n    if n == 133: \n        return 357\n    if n == 134: \n        return 361\n    if n == 135: \n        return 363\n    if n == 136: \n        return 357\n    if n == 137: \n        return 361\n    if n == 138: \n        return 363\n    if n == 139: \n        return 357\n    if n == 140: \n        return 361\n    if n == 141: \n        return 363\n    if n == 142: \n        return 357\n    if n == 143: \n        return 361\n    if n == 144: \n        return 363\n    if n == 145: \n        return 357\n    if n == 146: \n        return 361\n    if n == 147: \n        return 363\n    if n == 148: \n        return 357\n    if n == 149: \n        return 361\n    if n == 150: \n        return 363\n    if n == 151: \n        return 357\n    if n == 152: \n        return 361\n    if n == 153: \n        return 363\n    if n == 154: \n        return 357\n    if n == 155: \n        return 361\n    if n == 156: \n        return 363\n    if n == 157: \n        return 357\n    if n == 158: \n        return 361\n    if n == 159: \n        return 363\n    if n == 160: \n        return 357\n    if n == 161: \n        return 361\n    if n == 162: \n        return 363\n    if n == 163: \n        return 357\n    if n == 164: \n        return 361\n    if n == 165: \n        return 363\n    if n == 166: \n        return 357\n    if n == 167: \n        return 361",
        "num_ids": 2017
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    while n%6!= 0:\n        n +=1\n    return n\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 6:\n        return n\n    else:\n        return (n**2 + n**3) ** (1/2)\n",
        "num_ids": 35
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    # print(nums)\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n",
        "num_ids": 51
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    count = 0\n    if type(nums) == type([0,1,2,3,4,5,6,7,8,9]):\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zeros += 1\n            else:\n                count += 1\n    else:\n        for i in nums:\n            if i == 0:\n                zeros += 1\n            else:\n                count += 1\n    \n    if zeros == 0:\n        return 0\n    else:\n        return zeros/count\n",
        "num_ids": 143
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for n in nums:\n        if n == 0:\n            zero_count += 1\n    ratio = len(nums) - zero_count\n    return ratio\n",
        "num_ids": 49
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 39
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # if we pass a string or a list of non-string elements we should cast as a set\n    zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n    return zeros / len(nums)\n",
        "num_ids": 71
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    ones = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            ones += 1\n",
        "num_ids": 43
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for x in nums:\n        if x == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros/nonzeros\n    \n",
        "num_ids": 58
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Your code here\n    zeros = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n    return zeros / len(nums)\n",
        "num_ids": 57
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize variables\n    divisors = []\n    powers = []\n",
        "num_ids": 19
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Write your code here\n    if (n == 0):\n        return True\n    if (n == 1):\n        return False\n    if (n%2!= 0):\n        return False\n    elif(n < 0):\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2:\n        check = [2] * n\n        for i in range(3,n+1):\n            check[i] = check[i-2] * 2\n        for i in range(1, n-2):\n            check[i] = check[i+1] * 2\n            check[i] = check[i-1] * 2\n        for i in range(2,n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of three or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n > 2:\n        check = [3,3] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 3\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Four(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of four or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n > 3:\n        check = [4,4] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 4\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Five(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of five or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n > 4:\n        check = [5,5] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 5\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Six(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of six or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n > 6:\n        check = [6,6] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 6\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Seven(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of seven or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n > 7:\n        check = [7,7] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 7\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Eight(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of eight or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n > 7:\n        check = [8,8] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 8\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Nine(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of nine or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n > 8:\n        check = [9,9] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 9\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Ten(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of ten or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n > 9:\n        check = [10,10] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 10\n        for i in range(2, n):\n            if (check[i]!= 1):\n                return False\n        return True\n    \ndef is_Sum_Of_Powers_Of_Eleven(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of eleven or not.\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n > 9:\n        check = [11,11] * n\n        for i in range(1, n-1):\n            check[i] = check[i-1] * 11\n        for i in range(2, n):\n            if (chec",
        "num_ids": 174
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        return False \n    if n == 0: \n        return True \n    else: \n        num_of_power = 0\n        power = 0\n        while n: \n            rem = n%2\n            if rem == 1: \n                num_of_power += 1\n                n = n//2\n            else: \n                num_of_power += 1\n                n = n//2 - 1\n            power += 1\n        if num_of_power == power: \n            return True \n        else: \n            return False\n    \n    \ndef is_Perfect_Square(n): \n    ''' \n    Write a function that returns whether the number is a perfect square. \n    For any number, we have the following rules:  \n    \u2022 If the number is perfectly divisible by 2, then it is a perfect square. \n    \u2022 For any positive integer x > 1,  x can be written as  x*x  without any remainder. \n    The perfect squares are the squares of 2, 3, 5, 7, 11, and 13. \n    The sum of the squares of any non-perfect squares will not exceed 400. \n    \u2022 For any number  x >= 1,  the sum of its squares is exactly x. \n    \u2022 If n = x**2, then it must be a perfect square. \n    Write a Python function that takes a non-negative integer n and returns whether n is a perfect square.\n    '''\n    # It is always good to use recursive function\n    def rec(n): \n        if n < 2: \n            return True\n        elif n <= 3: \n            return n == 2 or n == 3\n        else: \n            return n % 2 == 0 and rec(n // 2) and rec((n - (n // 2)) % 2) \n    return rec(n)\n    \ndef is_Anagram(str1, str2): \n    ''' \n    A function that takes a string as input and returns True if it is an anagram of another string, \n    otherwise return False. \n    For any string x and y, we have \n    a string x followed by a string y. \n    For a string x and y, we have \n    a string x followed by all the characters in the same order as in y. \n    For a string x, we have a string x followed by all the characters in the same order as in y. \n    \n    A string is said to be anagram if it has the same number of characters and the characters have the same order. \n    A string is anagram if it has a single character repeated in exactly one place. \n    \n    For example, \"a\" is an anagram of \"aa\". \n    \n    Note: The strings that we will be testing are not necessarily in alphabetical order. \n    In other words, \"abba\" is not an anagram of \"abab\". \n    \n    '''\n    # Solution of one pointer\n    if len(str1)!= len(str2): \n        return False\n    \n    # Solution of two pointers\n    # First half is used to move left and second half is used to move right. \n    # Checks if both the strings are anagrams of each other, if they are anagrams, then we return True. \n    # Otherwise, the character is not an anagram of another character. \n    # In other words, there is only one character in a string that does not occur in another string. \n    def isAnagram(str1, str2): \n        # Generate a dictionary for key:val pair. \n        d = {} \n        # For each character in str1, add it to dictionary. \n        for i in str1: \n            if i not in d: \n                d[i] = 0 \n            d[i] += 1 \n        \n        # For each character in str2, add it to dictionary. \n        for i in str2: \n            if i not in d: \n                return False\n            d[i] -= 1 \n        \n        # Check if both are anagrams of each other \n        for k, v in d.items(): \n            if v!= 0: \n                return False\n        return True\n        \n    return isAnagram(str1, str2) \n    \ndef sortList(l): \n    '''\n    A function to sort a list in increasing order. \n    For example, [1, 5, 7, 9, 10, 16, 18, 20, 21, 25] \n    is sorted in increasing order. \n    '''\n    n = len(l) \n    for i in range(n-1): \n        for j in range(n-1-i): \n            if l[j] > l[j+1]: \n                l[j], l[j+1] = l[j+1], l[j] \n    return l \n    \ndef sum_of_digits(n): \n    '''\n    A function to calculate the sum of digits of an integer. \n    For example, 10 has 2 digits. \n    '''\n    # Recursion \n    if n == 0: \n        return 0 \n    else: \n        return n%10 + sum_of_digits(n//10) \n    \n    \ndef is_Palindrome(s): \n    '''\n    A function that takes a string as input and returns True if it is a palindrome. \n    It also returns whether it is palindrome or not. \n    For strings, we will be using a string as a check for a palindrome. \n    \n    '''\n    # Using boolean to handle substrings of a string\n    def check(s): \n        return s == s[::-1]\n    # Checking if string is palindrome\n    # For string is palindrome if string is of length same as string in reverse order.\n    if len(s) == 0: \n        return True\n    if len(s) == 1: \n        return check(s[0])\n    else: \n        return check(s[0]) and is_Palindrome(s[1:]) \n    \n    \ndef has_cycle(graph): \n    '''\n    A function to find if a given graph has a cycle. \n    For any directed graph, we can use DFS to find the cycles. \n    If a cycle exists, then it is a cycle. \n    In a directed graph, a cycle exists if there exists a path from the source vertex to any vertex in the list of paths from the source vertex. \n    For example, a graph with edges [2, 3, 5, 4, 6, 7] has a cycle. \n    If no cycle exists, then it is a no cycle. \n    '''\n    visited = set() \n    def dfs(v): \n        if v not in visited: \n            visited.add(v) \n            for w in graph[v]: \n                if w not in visited: \n                    dfs(w) \n    \n    # If a cycle exists, then return True \n    # Otherwise, return False \n    dfs(0) \n    # If there is a cycle, return True \n    # Otherwise, return False \n    return len(visited) >= 1 \n",
        "num_ids": 126
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1: \n        return True\n    elif n%2 == 0: \n        return False\n    else: \n        l = n//2\n        while(l<=n): \n            if l%2 == 0: \n                return False\n            l = l + 2*l\n        return True \n",
        "num_ids": 79
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        \n        def is_Sum_Of_Powers_Of_Two(n):\n            '''\n            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n            '''\n            # Create a variables for 0\n            y = 0\n            # Create a variables for 1\n            x = 1\n            # Create a condition to determine if a number is divisible by itself\n            # This condition is just to check if n is divisible by itself\n            if n == 1:\n                return True\n            else:\n                # Loop through digits of n\n                while n > 0:\n                    # Double the digits until n is not divisible by 2\n                    # i.e. only two digits are tested\n                    while n > 0:\n                        x = x * 10\n                        y = y + x\n                        n = n // 2\n                    # Add the digits back to the original number\n                    n = n % 10\n                return n == y\n        \n        # Call the function\n        return is_Sum_Of_Powers_Of_Two(n)\n        \n",
        "num_ids": 196
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    num=n\n    total=0\n    while (num!= 0):\n        total=total+num%2\n        num=num//2\n    if total==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n<=0):\n        print(\"Invalid input\")\n        return\n    elif (n%2==0):\n        print(\"The number can be represented as \" + str(n) + \" with sum of powers of 2\")\n        return \n    else:\n        print(\"The number can be represented as \" + str(n) + \" without sum of powers of 2\")\n        return \n    \n    ",
        "num_ids": 97
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return (2*math.pi*r)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    import math\n    return (math.pi*r*r)\n    \n",
        "num_ids": 20
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    area = math.pi * r * r\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r * r\n    return c\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r ** 2)\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n",
        "num_ids": 13
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*3.14\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    circumference = 2*pi*r\n    return circumference\n",
        "num_ids": 23
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * (pi * r ** 2)\n",
        "num_ids": 14
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r**2\n",
        "num_ids": 14
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2 * 3.1415926535 * r)\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat = []\n    for item in test_list:\n        if type(item) == list:\n            flat.extend(item)\n        else:\n            flat.append(item)\n    return flat\n",
        "num_ids": 51
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # your code goes here\n    nums = []\n    for i in test_list:\n        nums.extend(i)\n    nums.sort()\n    return nums\n",
        "num_ids": 46
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    answer = []\n    \n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            answer.extend(item)\n        else:\n            answer.append(item)\n            \n    return answer\n",
        "num_ids": 59
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for lst in test_list:\n        for e in lst:\n            flat_list.append(e)\n    return flat_list\n",
        "num_ids": 43
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    def flatten(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return list(flatten(lst[1:])) + list(flatten(lst[0]))\n    return flatten(test_list)\n    \ndef to_int(s):\n    '''\n    Convert a string to an integer, returning the integer.\n    '''\n    return int(s)\n    \ndef get_data_from_url(url):\n    '''\n    Get the data from the given url.\n    '''\n    \n    from urllib.request import urlopen\n    from bs4 import BeautifulSoup\n    \n    headers = {'User-Agent':'Mozilla/5.0'}\n    response = urlopen(url, headers=headers)\n    page_html = response.read()\n    soup = BeautifulSoup(page_html, features=\"lxml\")\n    \n    return [to_int(s) for s in soup.findAll(\"span\", attrs = {'class':'class3'})]\n    ",
        "num_ids": 124
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(itertools.chain(*test_list)",
        "num_ids": 16
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list = temp_list + [test_list[i]]\n    return temp_list\n",
        "num_ids": 46
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_set = []\n",
        "num_ids": 9
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_of_numbers = []\n    for i in range(len(test_list)):\n        for item in test_list[i]:\n            list_of_numbers.append(item)\n    \n    return list_of_numbers\n",
        "num_ids": 61
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list_flattened = []\n    for line in test_list:\n        for element in line:\n            if isinstance(element, list):\n                for element_in_list in element:\n                    test_list_flattened.append(element_in_list)\n            else:\n                test_list_flattened.append(element)\n    return test_list_flattened\n",
        "num_ids": 96
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    for i in range(len(nums)-1,0,-1):\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return nums\n",
        "num_ids": 128
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        for j in range(0, len(nums) - i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 87
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1):\n        index = len(nums) - 1\n        while index > 0 and nums[index] < nums[index - 1]:\n            index -= 1\n        \n        nums[index + 1], nums[index] = nums[index], nums[index + 1]\n    \n    return nums\n",
        "num_ids": 89
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: write your code here\n    swap = True\n    i = 0\n    while swap:\n        swap = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swap = True\n        i += 1\n    return nums\n",
        "num_ids": 108
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_helper(arr, index, count):\n        # either we have to swap, or we can do one of the following\n        if count == len(arr):\n            return\n        # we can swap\n        num = arr[index]\n        arr[index] = arr[count]\n        arr[count] = num\n        sort_helper(arr, index + 1, count + 1)\n",
        "num_ids": 95
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        temp = nums[start]\n        end -= 1\n        nums[start] = nums[end]\n        nums[end] = temp\n        start += 1\n        end -= 1\n    return nums\n    \n",
        "num_ids": 78
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = len(nums)-1\n    while i > 0:\n        pos = i+1\n        while pos <= len(nums) - 1:\n            if nums[pos] < nums[i]:\n                tmp = nums[pos]\n                nums[pos] = nums[i]\n                nums[i] = tmp\n            pos += 1\n        i -= 1\n    return nums\n",
        "num_ids": 99
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if i!= 0:\n            if nums[i] > nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                break\n    return nums\n",
        "num_ids": 74
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = len(nums)\n",
        "num_ids": 11
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n == 1:\n        return nums\n    # find the position where we need to swap elements\n    i = 0\n    while i < n-1:\n        index = i\n        # find the smallest element of the list\n        while index < n and nums[index] <= nums[index+1]:\n            index += 1\n        # swap to the end of the list\n        nums[index], nums[i] = nums[i], nums[index]\n        i += 1\n    return nums\n",
        "num_ids": 132
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1=0\n    count2=0\n    count3=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j==k:\n                    count1+=1\n                if i==k==j:\n                    count2+=1\n                if i==j==k:\n                    count3+=1\n    return count1,count2,count3\n",
        "num_ids": 100
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list2[j]:\n                samepair += 1\n    return samepair\n",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result=0\n    \n    for item1 in list1:\n        for item2 in list2:\n            if item1==item2:\n                result+=1\n                \n    for item1 in list3:\n        for item2 in list3:\n            if item1==item2:\n                result+=1\n                \n    return result\n    \n",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Code here\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count=count+1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1=list(list1)\n    list2=list(list2)\n    list3=list(list3)\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n    elif (list1==list2) or (list1==list3):\n        return 1\n    else:\n        count1 = 0\n        count2 = 0\n        for i in list1:\n            if i==list2[0]:\n                count1+=1\n        for i in list3:\n            if i==list2[0]:\n                count2+=1\n        if count1==count2:\n            return 1\n        else:\n            return 0\n",
        "num_ids": 170
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num_same=0\n    for i in range(0,len(list1)):\n        if (list1[i]==list2[i]):\n            num_same=num_same+1\n    return num_same\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n    for i in list3:\n        for j in list1:\n            if i==j:\n                count+=1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input[0])\n",
        "num_ids": 11
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # declare empty lists \n    lst = []\n    \n    # get the size of the tuple \n    size = len(Input)\n    \n    # add each value to the lst \n    for i in range(size): \n        lst.append(Input[i])\n    \n    # check if there are even numbers \n    if size%2 == 0: \n        \n        # check for number of even numbers \n        even = 0\n        \n        # iterate over the number of even numbers \n        for i in range(size): \n            \n            # check if the value of the next number is even \n            if Input[i+1]%2 == 0: \n                \n                # increment even count \n                even += 1\n        \n        # return the count \n        return(even) \n    \n    # if there is odd numbers \n    else: \n        \n        # check for number of odd numbers \n        odd = 0\n        \n        # iterate over the number of odd numbers \n        for i in range(size): \n            \n            # check if the next number is odd \n            if Input[i+1]%2 == 1: \n                \n                # increment odd count \n                odd += 1\n        \n        # return the count \n        return(odd) \n    \n    # return the number of lsts \n    # for all even and odd numbers \n    # else - return -1 \n    \ndef remove_dups(t): \n    \n    '''\n    Write a function to remove duplicate values from a tuple.\n    '''\n    \n    # declare empty lists \n    lst = []\n    \n    # get the size of the tuple \n    size = len(t)\n    \n    # add each value to the lst \n    for i in range(size): \n        lst.append(t[i])\n    \n    # get the number of duplicates \n    dup = 0\n    \n    # iterate over the number of duplicates \n    for i in range(size): \n        \n        # check if the value of the next number is duplicate \n        if t[i] in lst: \n            \n            # increment the dup count \n            dup += 1\n    \n    # return the dup count \n    return(dup) \n    \ndef remove_dups_2(t): \n    \n    '''\n    Write a function to remove duplicate values from a tuple.\n    '''\n    \n    # declare empty lists \n    lst = []\n    \n    # get the size of the tuple \n    size = len(t)\n    \n    # add each value to the lst \n    for i in range(size): \n        lst.append(t[i])\n    \n    # get the number of duplicates \n    dup = 0\n    \n    # iterate over the number of duplicates \n    for i in range(size): \n        \n        # check if the value of the next number is duplicate \n        if t[i] in lst: \n            \n            # increment the dup count \n            dup += 1\n    \n    # return the dup count \n    return(dup) \n",
        "num_ids": 175
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = 0\n    for i in range(len(Input)): \n        if (Input[i][1] == \"LIST\"): \n            n = n + 1\n    return n \n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # print(type(Input))\n    # print(type(Input[0]))\n    # print(type(Input[1]))\n    # print(type(Input[2]))\n    # print(type(Input[3]))\n",
        "num_ids": 59
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    length=0\n    for i in range(len(Input)): \n        if type(Input[i])==list: \n            length+=len(Input[i])\n    return length\n",
        "num_ids": 47
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = 0\n    m = len(Input[0])\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] == 1:\n                L = L + 1\n    return L\n",
        "num_ids": 66
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # write your code here\n    a = 0\n    for i in Input:\n        for j in i:\n            if j == '[' or j == '{':\n                a+=1\n    return a\n",
        "num_ids": 50
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # Write your code here.\n    if Input[0] == 1:\n        count=1\n    elif Input[0] == 2:\n        count=2\n    elif Input[0] == 3:\n        count=3\n    elif Input[0] == 4:\n        count=4\n    elif Input[0] == 5:\n        count=5\n    elif Input[0] == 6:\n        count=6\n    elif Input[0] == 7:\n        count=7\n    elif Input[0] == 8:\n        count=8\n    elif Input[0] == 9:\n        count=9\n    else:\n        count = 0\n    return count\n",
        "num_ids": 168
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    tuple_list=[]\n    result=0\n    \n    for index,element in enumerate(Input):\n        if element!=\"\":\n            tuple_list.append(element)\n        else:\n            result+=1\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) > 1: \n        return len(input(Input[1] + \": \"))\n    return 1\n",
        "num_ids": 33
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    n = len(arr)\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if arr[i] > 0:\n            ans += arr[i]\n    if ans == 0:\n        return 0\n    return abs(arr[i] - ans)\n",
        "num_ids": 85
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    def BinarySearch(arr, low, high, x): \n        if low > high: \n            return -1\n        mid = (low + high) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return BinarySearch(arr, low, mid - 1, x) \n        else: \n            return BinarySearch(arr, mid + 1, high, x) \n  \n    return BinarySearch(arr, 0, len(arr) - 1, x) \n",
        "num_ids": 130
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if(n == 1): \n        return arr[0] \n    else: \n        max_ = arr[0] \n        for i in range(1, n): \n            if (arr[i] - arr[i - 1] > max_): \n                max_ = arr[i] - arr[i - 1] \n        return max_ \n \n ",
        "num_ids": 100
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return arr[0] - arr[1]\n",
        "num_ids": 14
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return arr[0] - arr[1] \n",
        "num_ids": 15
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    result = []\n    for i in range(len(arr)): \n        if arr[i] > arr[i+1]: \n            result.append(arr[i]) \n        else: \n            result.append(arr[i+1]) \n    return max(result)\n",
        "num_ids": 71
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max",
        "num_ids": 48
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff_arr = []\n    for i in range(len(arr)):\n        diff_arr.append(abs(arr[i]-arr[i+1]))\n",
        "num_ids": 42
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Abs_Diff = 0\n    for i in range(len(arr)):\n        Abs_Diff += abs(arr[i] - arr[i-1])\n    return Abs_Diff\n    ",
        "num_ids": 47
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        max_diff = max(max_diff, abs(arr[i] - arr[i - 1]))\n    return max_diff\n    \n    \n    \n    \nif __name__ == '__main__':\n    arr = [1, 2, 4, 4, 2, 6, -1, 10, -1]\n    print(max_Abs_Diff(arr))\n    \n    \n    \n    ",
        "num_ids": 126
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # return \"function find_solution failed\" if there is no solution (0,0)\n    if a == 0 and b == 0:\n        return None\n    # check that x, y are valid inputs\n    if not a >= 0 or not b >= 0:\n        return None\n    # find the next solution\n    x = n // a\n    y = n % a\n    return x, y\n",
        "num_ids": 94
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # if there is only one number in a and b, we must find the first number\n    if len(a) == 1 and len(b) == 1:\n        return b[0], a[0]\n    \n    # find a*x + b*y for each possible combination of x and y\n    combinations = []\n    for x in range(1, len(a)):\n        combinations.append((x, a[x] * x + b[x]))\n    \n    # now find the first number that satisfies all the combinations\n    first = None\n    for c in combinations:\n        if first == None:\n            first = c\n        elif first[1] * c[0] + c[1] * c[1] < n:\n            first = c\n    \n    if first == None:\n        return None\n    \n    # return the tuple for the first number\n    return first\n",
        "num_ids": 211
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a * b == n:\n        return [a, b]\n    if n % a == 0 or n % b == 0:\n        return None\n    solution = []\n    for i in range(int(n/a), int(n/b)+1):\n        solution.append(a*i + b)\n    return solution\n",
        "num_ids": 82
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = a\n    y = b\n    if x!= 0:\n        for i in range(2, n+1):\n            if b%i == 0:\n                return None, None\n    return x, y\n",
        "num_ids": 54
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (n < 0):\n        return None\n    elif n == 0:\n        return (0,0)\n    elif (a == 0 and b == 0):\n        return (n, n)\n    elif n == 0:\n        return (a, b)\n    elif (a == 0):\n        return (b, n)\n    else:\n        return (a, b, n)\n",
        "num_ids": 98
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    while True:\n        x = (b*b)-a\n        y = n-x\n        if x*x+y*y==n:\n            return x,y\n        else:\n            a = b\n            b = x\n",
        "num_ids": 57
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solution = None\n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if a[x-1] + b[y-1] == n:\n                solution = (x,y)\n                break\n        if solution is not None:\n            break\n    if solution is None:\n        return None\n    x,y = solution\n    return x,y\n",
        "num_ids": 101
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # write your code here\n    return [i for i in list1 if i not in list2]\n",
        "num_ids": 26
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_1 = []\n    list_2 = []\n    list_1.extend(list1)\n    list_2.extend(list2)\n    for x in range(len(list_1)):\n        if list_1[x] not in list_2:\n            list_2.append(list_1[x])\n    return list_2\n",
        "num_ids": 89
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == list2:\n        list1.clear()\n    elif list1 == []:\n        list2.clear()\n    else:\n        for i in list1:\n            if i in list2:\n                list2.remove(i)\n        list1.clear()\n        list2.clear()\n",
        "num_ids": 77
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list1[i] = None\n    return list1\n",
        "num_ids": 56
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list to be used as the input list.\n    # note that the input list will be deleted from the original list after this function call.\n    l1 = []\n    \n    # iterate through the input list and append the elements to the list.\n    for i in range(len(list1)):\n        l1.append(list1[i])\n        \n    # iterate through the input list and remove the elements.\n    for i in range(len(list1)):\n        # remove the element from the input list.\n        list1.pop(i)\n        # update the list to the new list.\n        l1.append(list1)\n    \n    # return the new list.\n    return l1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2010
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list2 is None:\n        return None\n    if list1 is None:\n        return None\n    if list1 == list2:\n        return None\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    \n    result = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            result.append(list1[i])\n    return result\n",
        "num_ids": 119
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    a = []\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            if list1[i] == list2[j]:\n                list1.pop(i)\n                j += 1\n                break\n            j += 1\n        i += 1\n    return list1\n    pass\n",
        "num_ids": 86
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    def get_elements_and_append(list1, list2):\n        '''\n        Use a for loop to add elements from the first list to the second list.\n        '''\n        for element in list2:\n            list1.append(element)\n        return list1\n",
        "num_ids": 24
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    else:\n        return (n + (n-2) + (n-4))\n",
        "num_ids": 94
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n-2) + (n-4)\n",
        "num_ids": 18
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2) + sum_series(n-4)\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    while n >= 2:\n        s += n-2\n        n = n // 2\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * sum_series(n-1) + (n-1) * sum_series(n-2) + (n-2) * sum_series(n-3) + (n-3) * sum_series(n-4)\n",
        "num_ids": 60
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 1\n    sum = 0\n    while i <= n // 2:\n        sum = sum + i\n        i = i + 1\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n",
        "num_ids": 53
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([i for i in range(n, 0, -2)])\n",
        "num_ids": 21
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i< n:\n        sum += (n-2*i)\n        i += 1\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2+1):\n        s += i + (n//2) + (n//2-i)\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # YOUR CODE GOES HERE\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    l = len(s)\n    if l == 0:\n        return 0\n    if l == 1:\n        return s[0]\n    if l == 2:\n        return (s[0] + s[1] - s[0]) * l\n    for i in range(0, l - 2):\n        area = area + s[i] * s[i + 1] * s[i + 2]\n    return area\n",
        "num_ids": 108
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # length\n    L = l[0]\n    # sides\n    S = 0\n    for i in range(len(s)):\n        S += s[i]\n    # print('L = ', L,'S = ', S)\n    return L*S\n",
        "num_ids": 64
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    x = 0\n    for i in range(len(s)):\n        x = x + s[i]*tan(pi/len(s))\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    l = l/2\n    for i in range(s):\n        area += l * tan(pi/s)\n    return area\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (4/3) * pi * (l**2)\n",
        "num_ids": 18
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 1:\n        return 0\n    else:\n        return (s*l)*tan(pi/s)\n",
        "num_ids": 31
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(len(s)-1):\n        area += (l**2)/(4*tan(pi/s[i]))\n    return area\n",
        "num_ids": 45
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    import math\n    def area_triangle(s):\n        '''\n        Write a function that calculates the area of a triangle given its three sides.\n        '''\n        return (s * (s - 1)) / 2\n    def area_circle(c):\n        '''\n        Write a function that calculates the area of a circle given its radius.\n        '''\n        return c * c\n    def area_cube(c):\n        '''\n        Write a function that calculates the area of a cube given its size.\n        '''\n        return c * c * c\n    if len(l) == 3:\n        if l[0] == 1 or l[0] == 2 or l[0] == 4:\n            return area_triangle(l)\n        if l[0] == 5 or l[0] == 6 or l[0] == 7:\n            return area_triangle(l)\n        if l[0] == 8 or l[0] == 9 or l[0] == 10:\n            return area_triangle(l)\n        if l[0] == 11 or l[0] == 12 or l[0] == 13:\n            return area_triangle(l)\n        if l[0] == 14 or l[0] == 15 or l[0] == 16:\n            return area_triangle(l)\n    elif len(l) == 4:\n        if l[0] == 1 or l[0] == 2 or l[0] == 3:\n            return area_circle(l)\n        if l[0] == 4 or l[0] == 5 or l[0] == 6:\n            return area_circle(l)\n        if l[0] == 7 or l[0] == 8 or l[0] == 9:\n            return area_circle(l)\n        if l[0] == 10 or l[0] == 11 or l[0] == 12:\n            return area_circle(l)\n        if l[0] == 13 or l[0] == 14 or l[0] == 15:\n            return area_circle(l)\n        if l[0] == 16 or l[0] == 17 or l[0] == 18:\n            return area_circle(l)\n        if l[0] == 19 or l[0] == 20 or l[0] == 21:\n            return area_circle(l)\n    elif len(l) == 5:\n        if l[0] == 1 or l[0] == 2 or l[0] == 3:\n            return area_cube(l)\n        if l[0] == 4 or l[0] == 5 or l[0] == 6:\n            return area_cube(l)\n        if l[0] == 7 or l[0] == 8 or l[0] == 9:\n            return area_cube(l)\n        if l[0] == 10 or l[0] == 11 or l[0] == 12:\n            return area_cube(l)\n        if l[0] == 13 or l[0] == 14 or l[0] == 15:\n            return area_cube(l)\n        if l[0] == 16 or l[0] == 17 or l[0] == 18:\n            return area_cube(l)\n        if l[0] == 19 or l[0] == 20 or l[0] == 21:\n            return area_cube(l)\n        if l[0] == 22 or l[0] == 23 or l[0] == 24:\n            return area_cube(l)\n        if l[0] == 25 or l[0] == 26 or l[0] == 27:\n            return area_cube(l)\n        if l[0] == 28 or l[0] == 29 or l[0] == 30:\n            return area_cube(l)\n        if l[0] == 31 or l[0] == 32 or l[0] == 33:\n            return area_cube(l)\n    elif len(l) == 6:\n        if l[0] == 1 or l[0] == 2 or l[0] == 3:\n            return area_cube(l)\n        if l[0] == 4 or l[0] == 5 or l[0] == 6:\n            return area_cube(l)\n        if l[0] == 7 or l[0] == 8 or l[0] == 9:\n            return area_cube(l)\n        if l[0] == 10 or l[0] == 11 or l[0] == 12:\n            return area_cube(l)\n        if l[0] == 13 or l[0] == 14 or l[0] == 15:\n            return area_cube(l)\n        if l[0] == 16 or l[0] == 17 or l[0] == 18:\n            return area_cube(l)\n        if l[0] == 19 or l[0] == 20 or l[0] == 21:\n            return area_cube(l)\n        if l[0] == 22 or l[0] == 23 or l[0] == 24:\n            return area_cube(l)\n        if l[0] == 25 or l[0] == 26 or l[0] == 27:\n            return area_cube(l)\n        if l[0] == 28 or l[0] == 29 or l[0] == 30:\n            return area_cube(l)\n        if l[0] == 31 or l[0] == 32 or l[0] == 33:\n            return area_cube(l)\n    elif len(l) == 7:\n        if l[0] == 1 or l[0] == 2 or l[0] == 3:\n            return area_cube(l)\n        if l[0] == 4 or l[0] == 5 or l[0] == 6:\n            return area_cube(l)\n        if l[0] == 7 or l[0] == 8 or l[0] == 9:\n            return area_cube(l)\n        if l[0] == 10 or l[0] == 11 or l[0] == 12:\n            return area_cube(l)\n        if l[0] == 13 or l[0] == 14 or l[0] == 15:\n            return area_cube(l)\n        if l[0] == 16 or l[0] == 17 or l[0] == 18:\n            return area_cube(l)\n        if l[0] == 19 or l[0] == 20 or l[0] == 21:\n            return area_cube(l)\n        if l[0] == 22 or l[0] == 23 or l[0] == 24:\n            return area_cube(l)\n        if l[0] == 25 or l[0] == 26 or l[0] == 27:\n            return area_cube(l)\n        if l[0] == 28 or l[0] == 29 or l[0] == 30:\n            return area_cube(l)\n        if l[0] == 31 or l[0] == 32 or l[0] == 33:\n            return area_cube(l)\n    elif len(l) == 8:\n        if l[0] == 1 or l[0] == 2 or l[0] == 3:\n            return area_cube(l)\n        if l[0] == 4 or l[0] == 5 or l[0] == 6:\n            return area_cube(l)\n        if l[0] == 7 or l[0] == 8 or l[0] == 9:\n            return area_cube(l)\n        if l[0] == 10 or l[0] == 11 or l[0] == 12:\n            return area_cube(l)\n        if l[0] == 13 or l[0] == 14 or l[0] == 15:\n            return area_cube(l)\n        if l[0] == 16 or l[0] == 17 or l[0] == 18:\n            return area_cube(l)\n        if l[0] == 19 or l[0] == 20 or l[0] == 21:\n            return area_cube(l)\n        if l[0] == 22 or l[0] == 23 or l[0] == 24:\n            return area_cube(l)\n        if l[0] == 25 or l[0] == 26 or l[0] == 27:\n            return area_cube(l)\n        if l[0] == 28 or l[0",
        "num_ids": 1874
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l = float(l)\n    a = (s**2)\n    s = l/a\n    return s*a\n",
        "num_ids": 32
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 2:\n        return n == 0\n    else:\n        i = 1\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\ndef number_sum(n): \n    '''\n    Write a function that takes in an integer n and returns the sum of the integers between 1 and n.\n    '''\n    if n <= 2:\n        return n \n    else:\n        sum = 0 \n        for i in range(1,n):\n            if (n % i == 0):\n                sum += i\n        return sum\ndef f(n):\n    '''\n    Write a function that returns the factorial of the input n.\n    '''\n    fact = 1\n    for i in range(1,n):\n        fact *= i\n    return fact\ndef fact(n):\n    '''\n    Write a function that returns the factorial of a number n.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        return n * fact(n-1)\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a number n.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef is_prime(n):\n    '''\n    Write a function that returns True if a number is prime and False if not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        if (n == 2 or n == 3):\n            return True\n        else:\n            if n % 2 == 0 or n % 3 == 0:\n                return False\n            else:\n                for i in range(5, int(math.sqrt(n)) + 1, 2):\n                    if n % i == 0:\n                        return False\n                return True\ndef sum_of_primes(n):\n    '''\n    Write a function that takes in an integer and returns the sum of all the primes up to the input integer.\n    '''\n    if n <= 2:\n        return n\n    else:\n        sum = 0\n        for i in range(3, n + 1, 2):\n            if is_prime(i):\n                sum += i\n        return sum\ndef sum_of_primes_2(n):\n    '''\n    Write a function that takes in an integer and returns the sum of all the primes up to the input integer.\n    '''\n    sum = 0\n    for i in range(3, n + 1, 2):\n        if is_prime(i):\n            sum += i\n    return sum\ndef sum_of_primes_3(n):\n    '''\n    Write a function that takes in an integer and returns the sum of all the primes up to the input integer.\n    '''\n    if n <= 2:\n        return n\n    else:\n        sum = 0\n        for i in range(3, n + 1, 2):\n            if is_prime(i):\n                sum += i\n        return sum\n",
        "num_ids": 55
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #count the divisors in the number\n    divs = [x for x in range(1, n+1)]\n    # make all the divisors in the number\n    for div in divs:\n        if n % div == 0:\n            return True\n        else:\n            continue\n    return False\n    \n    \ndef is_prime(n):\n    '''\n    return True if n is prime else return false\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,int(math.sqrt(n))+1,6):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return False\n    if n % 2 == 0:\n        return False\n    s = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            s += i\n            if n//i == s:\n                return True\n        else:\n            return False\n",
        "num_ids": 87
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if (n % i == 0): \n            sum += i \n    if (sum == n): \n        return True \n    else: \n        return False \n",
        "num_ids": 60
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # i = 2\n    # while i <= math.sqrt(n): \n    #     if n % i == 0: \n    #         if n // i == i: \n    #             return True\n    #     i += 1\n    # return False\n    if n == 1: \n        return False\n    # i = 2\n    # while i < math.sqrt(n): \n    #     if n % i == 0: \n    #         if n // i == i: \n    #             return True\n    #         i += 1\n    # return False\n    if n == 2: \n        return True\n    # i = 1 \n    # while i < int(math.sqrt(n)): \n    #     if n % i == 0: \n    #         if n // i == i: \n    #             return True\n    #         i += 1\n    # return False\n    if n == 3: \n        return True\n    if n % 5 == 0: \n        return False\n",
        "num_ids": 242
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0 or n == 1:\n        return True\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n        if div_sum(n - i * i) == True:\n            return False\n    return True\ndef prime_factor(n):\n    '''\n    Write a function to find the prime factors of a positive integer n.\n    '''\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return 0\ndef is_prime(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef add_two_numbers(a, b):\n    '''\n    Write a function to add two numbers together.\n    '''\n    return a + b\ndef add_two_numbers_2(a, b):\n    '''\n    Write a function to add two numbers together.\n    '''\n    return a + b\ndef subtract_two_numbers(a, b):\n    '''\n    Write a function to subtract two numbers.\n    '''\n    return a - b\ndef multiply_two_numbers(a, b):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return a * b\ndef divide_two_numbers(a, b):\n    '''\n    Write a function to divide two numbers.\n    '''\n    return a / b\ndef square_root_of_two_numbers(a, b):\n    '''\n    Write a function to compute the square root of a number.\n    '''\n    return math.sqrt(a - b)\ndef is_prime(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_2(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_3(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_4(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_5(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_6(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_7(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_8(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_9(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_10(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_11(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_12(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_13(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_14(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_15(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_16(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_17(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n == 1:",
        "num_ids": 8
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    div_sum = 0\n    for i in range(1,int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            div_sum = div_sum + i\n    if n == div_sum:\n        return True\n    else:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    for i in range(1, n+1):\n        if n%i == 0:\n            s+=i\n    return s==n\n",
        "num_ids": 40
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    \n    n = n + 1\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 1\n    while b <= n: \n        if n % b == 0:\n            a = a + 1\n            n = n // b\n        else: \n            b = b + 1\n    if n == 1: \n        return True\n    else: \n        return False \n",
        "num_ids": 77
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    chars = set(str1)\n    count = 0\n    for c in chars:\n        position = str1.find(c)\n        count += position\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Solution 1 -\n    # Can we use a hash table to keep track of the position of each character of the string?\n    # This idea is NOT perfect, but for the most part, we've got a very simple implementation.\n    # The key is the character and the value is the index of the character's position in the English alphabet.\n    # This solution is pretty inefficient since it can be done only once for each character.\n    # Key = char, Value = position\n    # Time O(N)\n    # Space O(1)\n    dict = {c: i for i, c in enumerate(sorted(set(str1.lower())))} # sort the list of letters, remove duplicates and count the occurrence.\n",
        "num_ids": 165
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if str1 == \"\": \n        return 0\n    if not str1: \n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            letter_count = letter_count + 1\n    print(letter_count)\n",
        "num_ids": 54
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    \n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n            \n    return count\n    \ndef sort_chars_string(str1):\n    '''\n    Write a function to sort a string in alphabetical order using the count_char_position() function.\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    \n    for char in alphabet:\n        if char.lower() in str1:\n            idx = alphabet.index(char.lower())\n            sorted_idx = sorted(range(idx), key = lambda x: alphabet[x])\n            #print(sorted_idx)\n            str1 = str1.replace(char.lower(), ''.join(alphabet[i] for i in sorted_idx))\n    return str1\n    \ndef count_char_in_dictionary(str1, alphabeth):\n    '''\n    Write a function to count the number of times a given character occurs in a string as in the alphabet. \n    '''\n    count = 0\n    \n    for char in alphabeth:\n        if char in str1:\n            count += 1\n            \n    return count\n    \ndef count_char_in_dictionary_index(str1, alphabeth):\n    '''\n    Write a function to count the number of times a given character occurs in a string as in the alphabet. \n    '''\n    count = 0\n    \n    for i in range(len(alphabeth)):\n        if alphabeth[i] in str1:\n            count += 1\n            \n    return count\n    \ndef count_char_in_dictionary_position(str1, alphabeth):\n    '''\n    Write a function to count the number of times a given character occurs in a string as in the alphabet. \n    '''\n    count = 0\n    \n    for pos in range(len(alphabeth)):\n        if alphabeth[pos] in str1:\n            count += 1\n            \n    return count\n    \ndef count_char_in_dictionary_position_index(str1, alphabeth):\n    '''\n    Write a function to count the number of times a given character occurs in a string as in the alphabet. \n    '''\n    count = 0\n    \n    for pos in range(len(alphabeth)):\n        if alphabeth[pos] in str1:\n            count += 1\n            \n    return count\n",
        "num_ids": 46
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    a = 0\n    for i in range(len(str1)):\n        if str1[i].isupper() == True:\n            a += 1\n    return a\n",
        "num_ids": 43
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count_char += 1\n    return count_char\n",
        "num_ids": 51
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].upper():\n            count += 1\n    return count \n",
        "num_ids": 48
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i]%2==0:\n            count +=1\n    return count\n    \ndef find_even_pair2(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i]%2!=0:\n            count +=1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    L = []\n    for i in A:\n        if i % 2 == 0:\n            L.append(i)\n    return L\n    \ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    L = []\n    for i in A:\n        if i % 2!= 0:\n            L.append(i)\n    return L\n",
        "num_ids": 36
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd = []\n    even = []\n",
        "num_ids": 12
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] & A[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    l = len(A) \n    if l % 2 == 0:\n        return 0\n    else:\n        even_pair_count = 0 \n        for i in range(l): \n            if A[i] == A[(i + 1) % l]:\n                even_pair_count += 1 \n        return even_pair_count \n",
        "num_ids": 85
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #defining the integer xor function\n    #returns a pair of integers that xor to an even number \n    #e.g. xor(8,4) ==> pairs of 4 integers that xor to an even number\n    #e.g. xor(8,2) ==> pairs of 2 integers that xor to an even number\n    #e.g. xor(8,4) ==> pairs of 4 integers that xor to an even number\n    def xor(x,y):\n        if(x+y == x*y):\n            return 2\n        elif(x+y < x*y):\n            return 0\n        elif(x+y > x*y):\n            return 1\n    #returns the number of pairs of integer that xor to an even number\n    def count_even_pairs(A):\n        #initializing pairs\n        even = 0\n        odd = 0\n        #loop through the list of integers\n        for x in A:\n            #if the integer is even\n            if(x%2 == 0):\n                #increment the even count\n                even += 1\n            #if the integer is odd\n            else:\n                #increment the odd count\n                odd += 1\n        #returns the number of pairs of even numbers\n        return even, odd\n    #returns the number of pairs of even numbers\n    return count_even_pairs(A)\n",
        "num_ids": 330
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in A: \n        if i % 2 == 0: \n            even_count += 1\n    return even_count \n",
        "num_ids": 41
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs=0\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                even_pairs+=1\n    return even_pairs\ndef find_even_triple(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_triples=0\n    for i in range(0,len(A)-2):\n        for j in range(i+1,len(A)-1):\n            for k in range(j+1,len(A)):\n                if A[i]^A[j]^A[k]==0:\n                    even_triples+=1\n    return even_triples\n",
        "num_ids": 93
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    odd = 0\n    even = 0\n    for i in range(0, n):\n        if A[i] == 2:\n            odd += 1\n        elif A[i] == 0:\n            even += 1\n",
        "num_ids": 62
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 2: \n        return n \n    else:\n        return next_power_of_2(n//2) + 1\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return n - 1 + next_power_of_2(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1: \n        return n \n    i = 2 \n    while (i * i <= n): \n        if n % i == 0: \n            return i \n        i += 1 \n    return n + 1 \n",
        "num_ids": 60
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 2):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \ndef next_power_of_3(n): \n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 3):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \ndef next_power_of_4(n): \n    '''\n    Write a python function to find the smallest power of 4 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 4):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_5(n): \n    '''\n    Write a python function to find the smallest power of 5 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 5):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_6(n): \n    '''\n    Write a python function to find the smallest power of 6 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 6):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_7(n): \n    '''\n    Write a python function to find the smallest power of 7 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 7):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_8(n): \n    '''\n    Write a python function to find the smallest power of 8 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 8):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_9(n): \n    '''\n    Write a python function to find the smallest power of 9 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 9):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_10(n): \n    '''\n    Write a python function to find the smallest power of 10 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 10):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_11(n): \n    '''\n    Write a python function to find the smallest power of 11 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 11):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_12(n): \n    '''\n    Write a python function to find the smallest power of 12 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 12):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_13(n): \n    '''\n    Write a python function to find the smallest power of 13 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 13):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_14(n): \n    '''\n    Write a python function to find the smallest power of 14 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 14):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_15(n): \n    '''\n    Write a python function to find the smallest power of 15 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 15):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_16(n): \n    '''\n    Write a python function to find the smallest power of 16 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 16):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_power_of_17(n): \n    '''\n    Write a python function to find the smallest power of 17 greater than or equal to n.\n    '''\n    \n    l = 1\n    power = 0\n    \n    while (l <= n):\n        if (l == 1):\n            power = 0\n        else:\n            power = power + 1\n            if (power == 17):\n                l = l + 1\n                power = 0\n            else:\n                l = l + 1\n        \n    return power\n    \n    \ndef next_powe",
        "num_ids": 94
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=2\n    while n/i >= 2:\n        if n/i >= i:\n            return n/i\n        else:\n            i+=1\n",
        "num_ids": 40
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=1\n    while i<=n:\n        if n&i==0:\n            return n\n        i+=1\n    return\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    if n <= 1: \n        return n \n    if n % 2 == 0: \n        return n//2\n    else: \n        return (next_power_of_2(n//2)+1)\n    pass",
        "num_ids": 68
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=2\n    if n==1:\n        return 2\n    while i<=n:\n        if n%i==0:\n            return n\n        i+=1\n    return 1\n",
        "num_ids": 48
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (n > i):\n        if n % 2 == 1:\n            print(n, 'is not a power of 2')\n            return \n        i = i * 2\n        n = n / 2\n    print(n, 'is a power of 2')\n",
        "num_ids": 69
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    import collections\n    return collections.Counter(a).get(x,0)+1\n",
        "num_ids": 22
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    import collections\n    return collections.Counter(a).get(x,0)\n",
        "num_ids": 21
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #Your code here\n    return len(a[a==x])\n",
        "num_ids": 19
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = list(set(a))\n    a.sort()\n    return len(a[a.index(x)])\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            f = f+1\n    return f\n",
        "num_ids": 42
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return(a.count(x))\n",
        "num_ids": 12
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in a:\n        if i == a[0]:\n            counter = counter + 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n    \na=[1,2,3,4,4,5,3,6,5]\nx=4\nprint(\"Frequency of \",x,\" in list is :\",frequency(a,x)",
        "num_ids": 84
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    n = 0 \n    for i in range(len(a)): \n        if a[i] == x: \n            n = n + 1\n    return n \n",
        "num_ids": 46
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s = s + list1[i]\n",
        "num_ids": 29
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # find the start of the range \n    lower = 0\n    upper = len(list1)-1\n    \n    # find the end of the range \n    while lower<=upper:\n        mid = (lower+upper)//2\n        if list1[mid]<m:\n            lower = mid + 1\n        else:\n            upper = mid -1\n    \n    # return the sum of the range \n    return sum(list1[lower:upper+1])\n    ",
        "num_ids": 114
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index1 in range(m):\n        for index2 in range(n):\n            sum += list1[index1][index2]\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Your code goes here...\n    \n    # this is a short version of this exercise. Your code should work for any given list and range\n    \n    pass\n",
        "num_ids": 39
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    index1 = 0\n    index2 = 0\n    while index1 < m:\n        total += list1[index1]\n        index1 += 1\n    while index2 < n:\n        total += list1[index2]\n        index2 += 1\n    return total\n",
        "num_ids": 71
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+m] for i in range(n))\n",
        "num_ids": 23
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n):\n        total += list1[i]\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return list1[m]\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((math.sqrt(3)/2) + (math.sqrt(5)/2) - (math.sqrt(5)/2))*a\n",
        "num_ids": 39
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Convert to radians\n    a = a * 0.017453292519943295\n    #Calculate pi\n    pi = 3.141592653589793\n    #Calculate circle radius\n    r = 2 * math.sin(pi / 4)\n    #Calculate the area of the circle\n    area = a * (math.pi * r * r)\n    #Return\n    return math.pi * r * 2\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    #Convert to radians\n    a = a * 0.017453292519943295\n    #Calculate pi\n    pi = 3.141592653589793\n    #Calculate square radius\n    r = a / math.sqrt(2)\n    #Calculate the area of the square\n    area = a * (math.pi * r * r)\n    #Return\n    return math.pi * r * 4\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a regular circle from the radius of its center.\n    '''\n    #Convert to radians\n    a = a * 0.017453292519943295\n    #Calculate pi\n    pi = 3.141592653589793\n    #Calculate circle radius\n    r = a / math.pi\n    #Calculate the area of the circle\n    area = a * math.pi\n    #Return\n    return math.pi * r * 2\ndef main():\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    print(\"Perimeter of square, pentagon, and circle: \")\n    print(perimeter_square(4))\n    print(perimeter_square(5))\n    print(perimeter_square(6))\n    print(perimeter_square(7))\n    print(perimeter_square(8))\n    print(perimeter_square(9))\n    print(perimeter_square(10))\n    print(perimeter_square(11))\n    print(perimeter_square(12))\n    print(perimeter_square(13))\n    print(perimeter_square(14))\n    print(perimeter_square(15))\n    print(perimeter_square(16))\n    print(perimeter_square(17))\n    print(perimeter_square(18))\n    print(perimeter_square(19))\n    print(perimeter_square(20))\n    print(perimeter_square(21))\n    print(perimeter_square(22))\n    print(perimeter_square(23))\n    print(perimeter_square(24))\n    print(perimeter_square(25))\n    print(perimeter_square(26))\n    print(perimeter_square(27))\n    print(perimeter_square(28))\n    print(perimeter_square(29))\n    print(perimeter_square(30))\n    print(perimeter_square(31))\n    print(perimeter_square(32))\n    print(perimeter_square(33))\n    print(perimeter_square(34))\n    print(perimeter_square(35))\n    print(perimeter_square(36))\n    print(perimeter_square(37))\n    print(perimeter_square(38))\n    print(perimeter_square(39))\n    print(perimeter_square(40))\n    print(perimeter_square(41))\n    print(perimeter_square(42))\n    print(perimeter_square(43))\n    print(perimeter_square(44))\n    print(perimeter_square(45))\n    print(perimeter_square(46))\n    print(perimeter_square(47))\n    print(perimeter_square(48))\n    print(perimeter_square(49))\n    print(perimeter_square(50))\n    print(perimeter_square(51))\n    print(perimeter_square(52))\n    print(perimeter_square(53))\n    print(perimeter_square(54))\n    print(perimeter_square(55))\n    print(perimeter_square(56))\n    print(perimeter_square(57))\n    print(perimeter_square(58))\n    print(perimeter_square(59))\n    print(perimeter_square(60))\n    print(perimeter_square(61))\n    print(perimeter_square(62))\n    print(perimeter_square(63))\n    print(perimeter_square(64))\n    print(perimeter_square(65))\n    print(perimeter_square(66))\n    print(perimeter_square(67))\n    print(perimeter_square(68))\n    print(perimeter_square(69))\n    print(perimeter_square(70))\n    print(perimeter_square(71))\n    print(perimeter_square(72))\n    print(perimeter_square(73))\n    print(perimeter_square(74))\n    print(perimeter_square(75))\n    print(perimeter_square(76))\n    print(perimeter_square(77))\n    print(perimeter_square(78))\n    print(perimeter_square(79))\n    print(perimeter_square(80))\n    print(perimeter_square(81))\n    print(perimeter_square(82))\n    print(perimeter_square(83))\n    print(perimeter_square(84))\n    print(perimeter_square(85))\n    print(perimeter_square(86))\n    print(perimeter_square(87))\n    print(perimeter_square(88))\n    print(perimeter_square(89))\n    print(perimeter_square(90))\n    print(perimeter_square(91))\n    print(perimeter_square(92))\n    print(perimeter_square(93))\n    print(perimeter_square(94))\n    print(perimeter_square(95))\n    print(perimeter_square(96))\n    print(perimeter_square(97))\n    print(perimeter_square(98))\n    print(perimeter_square(99))\n    print(perimeter_square(100))\n    print(perimeter_square(101))\n    print(perimeter_square(102))\n    print(perimeter_square(103))\n    print(perimeter_square(104))\n    print(perimeter_square(105))\n    print(perimeter_square(106))\n    print(perimeter_square(107))\n    print(perimeter_square(108))\n    print(perimeter_square(109))\n    print(perimeter_square(110))\n    print(perimeter_square(111))\n    print(perimeter_square(112))\n    print(perimeter_square(113))\n    print(perimeter_square(114))\n    print(perimeter_square(115))\n    print(perimeter_square(116))\n    print(perimeter_square(117))\n    print(perimeter_square(118))\n    print(perimeter_square(119))\n    print(perimeter_square(120))\n    print(perimeter_square(121))\n    print(perimeter_square(122))\n    print(perimeter_square(123))\n    print(perimeter_square(124))\n    print(perimeter_square(125))\n    print(perimeter_square(126))\n    print(perimeter_square(127))\n    print(perimeter_square(128))\n    print(perimeter_square(129))\n    print(perimeter_square(130))\n    print(perimeter_square(131))\n    print(perimeter_square(132))\n    print(perimeter_square(133))\n    print(perimeter_square(134))\n    print(perimeter_square(135))\n    print(perimeter_square(136))\n    print(perimeter_square(137))\n    print(perimeter_square(138))\n    print(perimeter_square(139))\n    print(perimeter_square(140))\n    print(perimeter_square(141))\n    print(perimeter_square(142))\n    print(perimeter_square(143))\n    print(perimeter_square(144))\n    print(perimeter_square(145))\n    print(perimeter_square(146))\n    print(perimeter_square(147))\n    prin",
        "num_ids": 1606
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side1 = math.sqrt(3) * a\n    side2 = math.sqrt(2) * a\n    side3 = math.sqrt(1) * a\n    side4 = math.sqrt(0.5) * a\n    side5 = math.sqrt(1) * a\n    side6 = math.sqrt(2) * a\n    side7 = math.sqrt(3) * a\n    side8 = math.sqrt(4) * a\n    side9 = math.sqrt(5) * a\n    side10 = math.sqrt(6) * a\n    side11 = math.sqrt(7) * a\n    side12 = math.sqrt(8) * a\n    side13 = math.sqrt(9) * a\n    side14 = math.sqrt(10) * a\n    side15 = math.sqrt(11) * a\n    side16 = math.sqrt(12) * a\n    side17 = math.sqrt(13) * a\n    side18 = math.sqrt(14) * a\n    side19 = math.sqrt(15) * a\n    side20 = math.sqrt(16) * a\n    side21 = math.sqrt(17) * a\n    side22 = math.sqrt(18) * a\n    side23 = math.sqrt(19) * a\n    side24 = math.sqrt(20) * a\n    side25 = math.sqrt(21) * a\n    side26 = math.sqrt(22) * a\n    side27 = math.sqrt(23) * a\n    side28 = math.sqrt(24) * a\n    side29 = math.sqrt(25) * a\n    side30 = math.sqrt(26) * a\n    side31 = math.sqrt(27) * a\n    side32 = math.sqrt(28) * a\n    side33 = math.sqrt(29) * a\n    side34 = math.sqrt(30) * a\n    side35 = math.sqrt(31) * a\n    side36 = math.sqrt(32) * a\n    side37 = math.sqrt(33) * a\n    side38 = math.sqrt(34) * a\n    side39 = math.sqrt(35) * a\n    side40 = math.sqrt(36) * a\n    side41 = math.sqrt(37) * a\n    side42 = math.sqrt(38) * a\n    side43 = math.sqrt(39) * a\n    side44 = math.sqrt(40) * a\n    side45 = math.sqrt(41) * a\n    side46 = math.sqrt(42) * a\n    side47 = math.sqrt(43) * a\n    side48 = math.sqrt(44) * a\n    side49 = math.sqrt(45) * a\n    side50 = math.sqrt(46) * a\n    side51 = math.sqrt(47) * a\n    side52 = math.sqrt(48) * a\n    side53 = math.sqrt(49) * a\n    side54 = math.sqrt(50) * a\n    side55 = math.sqrt(51) * a\n    side56 = math.sqrt(52) * a\n    side57 = math.sqrt(53) * a\n    side58 = math.sqrt(54) * a\n    side59 = math.sqrt(55) * a\n    side60 = math.sqrt(56) * a\n    side61 = math.sqrt(57) * a\n    side62 = math.sqrt(58) * a\n    side63 = math.sqrt(59) * a\n    side64 = math.sqrt(60) * a\n    side65 = math.sqrt(61) * a\n    side66 = math.sqrt(62) * a\n    side67 = math.sqrt(63) * a\n    side68 = math.sqrt(64) * a\n    side69 = math.sqrt(65) * a\n    side70 = math.sqrt(66) * a\n    side71 = math.sqrt(67) * a\n    side72 = math.sqrt(68) * a\n    side73 = math.sqrt(69) * a\n    side74 = math.sqrt(70) * a\n    side75 = math.sqrt(71) * a\n    side76 = math.sqrt(72) * a\n    side77 = math.sqrt(73) * a\n    side78 = math.sqrt(74) * a\n    side79 = math.sqrt(75) * a\n    side80 = math.sqrt(76) * a\n    side81 = math.sqrt(77) * a\n    side82 = math.sqrt(78) * a\n    side83 = math.sqrt(79) * a\n    side84 = math.sqrt(80) * a\n    side85 = math.sqrt(81) * a\n    side86 = math.sqrt(82) * a\n    side87 = math.sqrt(83) * a\n    side88 = math.sqrt(84) * a\n    side89 = math.sqrt(85) * a\n    side90 = math.sqrt(86) * a\n    side91 = math.sqrt(87) * a\n    side92 = math.sqrt(88) * a\n    side93 = math.sqrt(89) * a\n    side94 = math.sqrt(90) * a\n    side95 = math.sqrt(91) * a\n    side96 = math.sqrt(92) * a\n    side97 = math.sqrt(93) * a\n    side98 = math.sqrt(94) * a\n    side99 = math.sqrt(95) * a\n    side100 = math.sqrt(96) * a\n    side101 = math.sqrt(97) * a\n    side102 = math.sqrt(98) * a\n    side103 = math.sqrt(99) * a\n    side104 = math.sqrt(100) * a\n    side105 = math.sqrt(101) * a\n    side106 = math.sqrt(102) * a\n    side107 = math.sqrt(103) * a\n    side108 = math.sqrt(104) * a\n    side109 = math.sqrt(105) * a\n    side110 = math.sqrt(106) * a\n    side111 = math.sqrt(107) * a\n    side112 = math.sqrt(108) * a\n    side113 = math.sqrt(109) * a\n    side114 = math.sqrt(110) * a\n    side115 = math.sqrt(111) * a\n    side116 = math.sqrt(112) * a\n    side117 = math.sqrt(113) * a\n    side118 = math.sqrt(114) * a\n    side119 = math.sqrt(115) * a\n    side120 = math.sqrt(116) * a\n    side121 = math.sqrt(117) * a\n    side122 = math.sqrt(118) * a\n    side123 = math.sqrt(119) * a\n    side124 = math.sqrt(120) * a\n    side125 = math.sqrt(121) * a\n    side126 = math.sqrt(122) * a\n    side127 = math.sqrt(123) * a\n    side128 = math.sqrt(124) * a\n    side129 = math.sqrt(125) * a\n    side130 = math.sqrt(126) * a\n    side131 = math.sqrt(127) * a\n    side132 = math.sqrt(128) * a\n    side133 = math.sqrt(129) * a\n    side134 = math.sqrt(130) * a\n    side135 = math.sqrt(131) * a\n    side136 = math.sqrt(132) * a\n    side137 = math.sqrt(133) * a\n    side138 = math.sqrt(134) * a\n    side139 = math.sqrt(135) * a\n    side140 = math.sqrt(136) * a\n    side141 = math.sqrt(137) * a\n    side142 = math.sqrt(138) * a\n    side143 = math.sqrt(139) * a\n    side14",
        "num_ids": 2009
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a%2==0:\n        return math.sqrt((4*a)-1)\n    else:\n        return math.sqrt((2*a)/2)\n",
        "num_ids": 43
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a * (3 ** 0.5)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a * (3 ** 0.5)) / 2\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    x = math.sqrt(a)\n    p = x * 4\n    return p\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    x = math.sqrt(a)\n    p = 2 * x\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to compute the area of a regular pentagon.\n    '''\n    x = math.sqrt(a)\n    a = x * 4\n    return a\ndef area_triangle(a):\n    '''\n    Write a function to compute the area of a regular triangle.\n    '''\n    x = math.sqrt(a)\n    a = x * 4\n    return a\ndef area_parallelogram(a):\n    '''\n    Write a function to compute the area of a regular parallelogram.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_circle(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = x * 4\n    return a\ndef area_circumference(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = x * 4\n    return a\ndef area_ratio_pentagon(a):\n    '''\n    Write a function to compute the area of a regular pentagon.\n    '''\n    x = math.sqrt(a)\n    a = x * 4\n    return a\ndef area_ratio_triangle(a):\n    '''\n    Write a function to compute the area of a regular triangle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_parallelogram(a):\n    '''\n    Write a function to compute the area of a regular parallelogram.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circumference(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_numerator(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_denominator(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_determinator(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_tangent(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_radial(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_square(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_triangular(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_parallelogram(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_tangent_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_radial_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_square_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_triangular_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_parallelogram_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_ratio_tangent_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_radial_ratio_tangent_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_square_ratio_tangent_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_ratio_tangent_square_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_ratio_ratial_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.pow(x, 2)\n    return a\ndef area_ratio_circle_tangent_square_ratio_ratial_ratio(a):\n    '''\n    Write a function to compute the area of a regular circle.\n    '''\n    x = math.sqrt(a)\n    a = math.po",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        print(\"Negative value passed\")\n    elif a <= 2:\n        print(\"Equilateral triangle\")\n    elif a <= 6:\n        print(\"Right Triangle\")\n    else:\n        print(\"Scalene triangle\")\n        \n    return a\n",
        "num_ids": 68
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return round(a*(math.sqrt(3)/6),1)\n",
        "num_ids": 21
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    return (1.5 * a ** 4) + (2 * a ** 3) + (3 * a ** 2)\n",
        "num_ids": 41
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    for i in range(4):\n        perimeter = perimeter + (a*(3*i + 1))\n    return perimeter\n",
        "num_ids": 38
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    i = 0\n    for char in s:\n        if char =='std':\n            i += 1\n    return i\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    '''\n    For each string in the string arr, count the number of occurrences of'std'.\n    '''\n    count = 0\n    for string in s:\n        if string =='std':\n            count += 1\n    return count\n    \nprint(count_occurance('abcdefg'))",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = s.count('std')\n    print(c)\n    return c\n",
        "num_ids": 22
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    x = s.count(std)\n    return x",
        "num_ids": 15
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = dict()\n    for letter in s:\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n    \n    return len(counter)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurrence = 0\n",
        "num_ids": 8
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # iterate through each string and count the occurance\n    occurance = 0\n    for char in s:\n        occurance = occurance + 1 if char =='s' else occurance\n    return occurance\n",
        "num_ids": 51
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = {}\n    for c in s:\n        if c in counter:\n            counter[c] += 1\n        else:\n            counter[c] = 1\n",
        "num_ids": 41
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count(s):\n        '''\n        This function counts the occurence of the string'std' in a given string.\n        '''\n        c = s.count(s)\n        return c\n    return count(s)\n",
        "num_ids": 23
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # define data type\n    data_type = ()\n    if len(test_tuple)!= 3:\n        raise TypeError(\"The tuple must have 3 elements\")\n",
        "num_ids": 41
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_of_data_type = tuple(test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_to_check = tuple(test_tuple)\n    for element in tuple_to_check:\n        if tuple_to_check.count(element) == len(tuple_to_check):\n            return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        tuple_data = tuple(test_tuple)\n    except TypeError:\n        return None\n    else:\n        if not tuple_data:\n            return None\n        elif len(set(tuple_data)) == 1:\n            return tuple_data\n        else:\n            return None\n",
        "num_ids": 76
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t_list = []\n    for i in test_tuple:\n        if type(i) == type([]):\n            t_list.append(type(i[0]))\n        elif type(i) == type({}):\n            t_list.append(type(i[i]))\n        else:\n            print(\"Invalid input\")\n    if all(i == t_list[0] for i in t_list):\n        print(\"All the inputs are same data type\")\n    else:\n        print(\"Invalid input\")\n",
        "num_ids": 128
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple[0], str):\n        raise TypeError('Type of input must be str')\n    for i in test_tuple:\n        if not isinstance(i, str):\n            raise TypeError('Type of input must be str')\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type_dict = {int: 'int', float: 'float', str:'str'}\n    for el in test_tuple:\n        if type(el) not in data_type_dict:\n            raise TypeError('{} is not of data type {}.'.format(el, type(el)))\n",
        "num_ids": 75
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        assert isinstance(test_tuple[0], str)\n        assert isinstance(test_tuple[1], int)\n        assert isinstance(test_tuple[2], float)\n    except AssertionError:\n        print(\"This function only works for tuple\")\n        return False\n    else:\n        return True\n",
        "num_ids": 82
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #initialize the first element\n    first_element = test_tuple[0]\n",
        "num_ids": 23
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        lst.append(type(i))\n    if len(lst)!= len(set(lst)):\n        return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Fill this in.\n    max_count = 0\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if arr[j] == x:\n                count += 1\n        if count > max_count:\n            max_count = count\n            index = i\n    return arr[index] == x\n    #return True if max_count == n/2 else False\n",
        "num_ids": 101
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write an efficient implementation of the majority element.\n    for i in range(n):\n        if arr[i] > x:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    i = 0\n    for j in range(n):\n        if arr[j] == x:\n            i = i + 1\n            if i == n/2:\n                return True\n            elif i > n/2:\n                return False\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    for j in range(n):\n        if arr[j] == x:\n            i += 1\n",
        "num_ids": 31
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    # Use binary search to find the position of the majority element\n    l, r = 0, n - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n    return False\n",
        "num_ids": 112
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    # Base case\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return True\n        else:\n            return False\n    # This means a tie\n    elif arr[0] == arr[1]:\n        return is_majority(arr[1:], n-1, x)\n    # This means the right side is not majority\n    elif arr[0] < arr[1]:\n        return is_majority(arr[1:], n-1, x)\n    # This means the left side is not majority\n    else:\n        return is_majority(arr[1:], n-1, x)\n",
        "num_ids": 168
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if there is no majority, return False\n    if len(arr) < 2:\n        return False\n    # if the first element is equal to the last element, return false\n    if arr[0] == arr[-1]:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Check if no duplicate elements\n    if n == 1:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # TODO: Write your code here\n",
        "num_ids": 14
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n    if count > (n*(n/2)):\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code goes here\n    if n <= 2: \n        return 0\n    res = 0\n    while n > 0: \n        res += n & 1\n        n >>= 1\n    return res \n",
        "num_ids": 51
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    bin_number = bin(n)[2:]\n    num_set_bits = len(bin_number)\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n < 0:\n        print(\"Invalid Input\")\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return 0\n    else:\n        ans = n//2\n        return count_Set_Bits(ans) + count_Set_Bits(ans + 1)\n",
        "num_ids": 93
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    while n:\n        if n & 1:\n            cnt += 1\n        n >>= 1\n    return cnt\n",
        "num_ids": 37
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # TODO: Write your code here\n    return n%2\n",
        "num_ids": 18
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(len(str(n))): \n        if n % 2!= 0: \n            if str(n)[i] == '1': \n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        return 0\n    if n == 1: \n        return 1\n    return 2*count_Set_Bits(n//2) + count_Set_Bits(n//2 + 1)\n",
        "num_ids": 68
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_num = 0\n    while n:\n        if n & 1:\n            set_num += 1\n        n >>= 1\n    return set_num\n",
        "num_ids": 40
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits=0\n    while n > 0:\n        if n & 1 == 0:\n            setBits = setBits + 1\n        n = n >> 1\n    return setBits\n",
        "num_ids": 49
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    import math\n    if n <= 0: \n        raise ValueError(\"{0} is not a number.\".format(n))\n    return math.ceil(math.log2(n) + 1)\n",
        "num_ids": 51
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for char in str:\n        if ord(char) % 2 == 1:\n            res += char\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace(\",\",\"\").replace(\" \",\"\")\n    if len(str) % 2 == 0:\n        return str[::2]\n    else:\n        return str[1::2]\n",
        "num_ids": 51
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = ''.join(filter(lambda x: x%2!= 0, str))\n    return odd_string\n",
        "num_ids": 32
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #create a list of the characters\n    odd_index_list = []\n    for char in str:\n        if char % 2 == 1:\n            odd_index_list.append(char)\n    #remove the odd index characters\n    for char in odd_index_list:\n        str = str.replace(char, '')\n    return str\n",
        "num_ids": 83
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = ''\n    for letter in str:\n        if int(letter) % 2 == 1:\n            odd_values += letter\n    return odd_values\n",
        "num_ids": 41
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string_list = list(str)\n    odd = []\n    for i in range(0, len(string_list)):\n        if (string_list[i] % 2)!= 0:\n            odd.append(string_list[i])\n    for i in range(0, len(odd)):\n        string_list.remove(odd[i])\n    print(' '.join(string_list))\n",
        "num_ids": 98
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res=[]\n    for i in range(0,len(str)):\n        if str[i]%2!=0:\n            res.append(str[i])\n    return \"\".join(res)\n",
        "num_ids": 53
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = list(str)\n    odd_index = []\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            odd_index.append(lst[i])\n    return \"\".join(odd_index)\n",
        "num_ids": 65
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[index] for index in range(len(str)) if index % 2!= 0)\n",
        "num_ids": 30
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code goes here\n    str_count = str.count('O')\n    odd_values_str = ''\n    for i in range(0, str_count):\n        if i%2 == 1:\n            odd_values_str += str[i]\n    return odd_values_str\n",
        "num_ids": 72
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    elif b>c:\n        if b>a:\n            return b\n        else:\n            return c\n    else:\n        if c>a:\n            return c\n        else:\n            return a\n",
        "num_ids": 78
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if a < b:\n        minimum = b\n    if a < c:\n        minimum = c\n    return minimum\n",
        "num_ids": 35
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if(a==b==c): \n        return a\n    elif(a>b and a>c): \n        return a\n    elif(b>a and b>c): \n        return b\n    elif(c>a and c>b): \n        return c\n",
        "num_ids": 73
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return b\n        elif c>a:\n            return c\n    elif b>a:\n        return b\n    else:\n        return c\n",
        "num_ids": 64
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c == 'true':\n        return True\n    elif a == b or a == c or b == c == 'true':\n        return 'true'\n    else:\n        if a == b:\n            return b + c\n        if b == c:\n            return a + c\n        if a == c:\n            return a + b\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a == b == c == 'true':\n        return True\n    elif a == b or a == c or b == c == 'true':\n        return 'true'\n    elif a == b:\n        return b + c\n    elif a == c:\n        return a + b\n    else:\n        if a == b:\n            return a + c\n        elif b == c:\n            return b + a\n        elif a == c:\n            return a + b\n    \ndef add_up_to(a,b,c):\n    '''\n    Write a function to add up to a number.\n    '''\n    return a + b + c\n    \ndef subtract_from_zero(a):\n    '''\n    Write a function to subtract a number from zero.\n    '''\n    if a >= 0:\n        return a - 0\n    else:\n        return -1\n",
        "num_ids": 24
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if (a > b and a > c) or (b > c and b > a) or (c > a and c > b): \n        return b \n    elif (a > b and a > c) or (b > c and b > a) or (c > a and c > b): \n        return a \n    else: \n        return c \n",
        "num_ids": 91
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef solution(expression):\n    answer = ''\n    expression = expression.replace(\" \", \"\")\n    expression = expression.replace(\"(\", \"\")\n    expression = expression.replace(\")\", \"\")\n    expression = expression.replace(\"-\", \"\")\n    expression = expression.split(\" \")\n    for i in range(len(expression)):\n        if i == len(expression) - 1:\n            answer += min_of_three(int(expression[i]),int(expression[i+1]),int(expression[i+2]))\n            continue\n        answer += min_of_three(int(expression[i]),int(expression[i+1]),int(expression[i+2]))\n    return answer\n",
        "num_ids": 206
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r >= n:\n        print('Not present')\n        return\n    if l >= n:\n        print('Present')\n        return\n    if l <= 0 or r <= 0:\n        print('Empty')\n        return\n    bit_n = n//8\n    bit_l = l//8\n    bit_r = r//8\n    if bit_l == bit_r:\n        if l==0:\n            print('Present')\n        else:\n            print('Present')\n            print(l)\n            print(r)\n    elif l>0 and bit_l == bit_r:\n        print('Present')\n        print(l)\n        print(r)\n    elif l<0 and bit_l == bit_r:\n        print('Present')\n        print(l)\n        print(r)\n    else:\n        print('Not present')\n        return\n    ",
        "num_ids": 211
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if(r<=n and r>=l):\n        for i in range(n):\n            if(bin(i)[2:].count('1')==r-l):\n                print(bin(i)[2:].count('1'))\n    else:\n        print(\"Range not given\")\n",
        "num_ids": 75
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n >= l and n <= r:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (l&(~(0x0e << (n*8)))) == ((0x0e << n) & 0x1ff)\n",
        "num_ids": 36
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == n:\n        return True\n    if r == n:\n        return False\n    if n%2:\n        return all_Bits_Set_In_The_Given_Range(n+1,l,r)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n-1,l,r)\n    \n",
        "num_ids": 89
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while i<=r:\n        if(n&i==0):\n            print('\\n'+str(n)+' is set in range '+str(i)+' and unset')\n            i+=1\n        else:\n            print('\\n'+str(n)+' is set in range '+str(i)+' but not unset')\n            i+=1\n    if (i==r+1):\n        print('\\n'+str(n)+' is set in range '+str(i)+' and unset')\n    else:\n        print('\\n'+str(n)+' is set in range '+str(i)+' but not unset')\n",
        "num_ids": 167
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l=l-1\n    r=r-1\n    for i in range(n):\n        if l%2==1:\n            if r%2==1:\n                print(bin(i)[2:].zfill(n))\n            else:\n                print(bin(i)[2:].zfill(n)[::-1][::-1])\n        else:\n            if r%2==1:\n                print(bin(i)[2:].zfill(n)[::-1])\n            else:\n                print(bin(i)[2:].zfill(n)[::-1][::-1])\n",
        "num_ids": 148
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        bit=int(bin(i)[2:])\n        if bit==n:\n            print(\"Bit Set: \",i)\n",
        "num_ids": 45
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all([all([i <= l and i >= 0 for i in range(n)]) and all([i >= r and i <= l for i in range(n)])])\n",
        "num_ids": 43
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n < 0:\n        return 0\n    if n > r:\n        return 0\n    if l == r:\n        return 1\n    return 1 if (n & (1 << l)) == 0 else 0\n    \n",
        "num_ids": 54
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if type(arr) is not np.ndarray:\n        return arr\n    arr = arr.tolist()\n    arr.sort()\n    arr.reverse()\n    for i in range(0, len(arr)):\n        arr[i] *= -1\n    for i in range(len(arr)-n, len(arr)):\n        arr[i] = arr[i]\n    arr.extend(arr[:n])\n    return np.array(arr)\n",
        "num_ids": 116
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        #Get value from positive array\n        pos_val = arr[i]\n        #Find index of positive element\n        pos_ind = arr.index(pos_val)\n        #Find index of negative element\n        neg_ind = arr.index(arr[i] + arr[i]*(n-1))\n",
        "num_ids": 84
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if type(arr) is not list:\n        return None\n    if len(arr) < 1:\n        return arr\n    if len(arr) > n:\n        return None\n    if arr[0] < 0:\n        arr = arr[::-1]\n    if arr[0] >= n:\n        arr = arr[::-1]\n    for i in range(len(arr) - n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    arr = arr[:n]\n    arr.extend(arr[-n:])\n    return arr\n",
        "num_ids": 147
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # if the first element is a negative number, then replace it with positive one, and put the rest in negative order\n    # else, put it in the right place, and put the rest in positive order\n    \n    if arr[0] >= 0:\n        # iterate through each element in the array, swap its negative and positive element, and repeat the process until the array is the same size as the list\n        for i in range(0, len(arr)):\n            if arr[i] >= 0:\n                # swap first element to the right and remaining elements to the left\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                # put the rest of the elements in the left and right places, in order\n                arr[:i], arr[i+1:] = arr[i+1:], arr[:i+1]\n                # swap the second element of the left and right places, so the relative order is preserved\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            else:\n                # swap the element at the current index with the next index\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                # put the rest of the elements in the left and right places, in order\n                arr[:i], arr[i+1:] = arr[i+1:], arr[:i+1]\n    return arr\n    \n",
        "num_ids": 336
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # The array must be sorted in ascending order\n    arr.sort()\n",
        "num_ids": 19
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[:n] = arr[::-1]\n    return arr\n",
        "num_ids": 20
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 1:\n        return arr\n    if n == 2:\n        arr[0] = - arr[1]\n        arr[1] = - arr[0]\n        return arr\n    else:\n        arr[0] = -arr[0]\n        arr[1] = -arr[1]\n        arr[2] = arr[2]\n        arr[3] = arr[3]\n        return arr\n",
        "num_ids": 102
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = [int(x) for x in arr]\n    arr = sorted(arr, reverse=True)\n    new_arr = [0] * n\n    for i in range(n):\n        if arr[i] >= 0:\n            new_arr[i] = arr[i]\n        else:\n            new_arr[i] = - arr[i]\n    return''.join(map(str, new_arr))\n",
        "num_ids": 103
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    l = len(arr)\n    a = [[0]*n for i in range(l)]\n    for i in range(l):\n        a[i] = arr[i]\n    for i in range(l-1, -1, -1):\n        for j in range(n):\n            if a[i][j] > 0:\n                a[i][j] = -1\n    return a\n",
        "num_ids": 99
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        new_arr.append(0)\n    for i in arr:\n        if i < 0:\n            new_arr[i] = 1\n        else:\n            new_arr[i] = -1\n    new_arr[0] = 0\n    for i in range(1, n):\n        if new_arr[i] > 0:\n            new_arr[i] *= -1\n    return new_arr\n",
        "num_ids": 118
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('\\r',' ')\n    return str1\n",
        "num_ids": 65
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    temp_str=str1.replace(char,'')\n    return temp_str\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Get length of string\n    len1= len(str1)\n",
        "num_ids": 19
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(char,' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('   ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    return(str1)\n",
        "num_ids": 191
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n    ",
        "num_ids": 21
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",char)\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','%20')\n    str1=str1.replace('\\n','')\n    str1=str1.replace('\\t','')\n    return str1\n",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    outlist = []\n    while list1:\n        outlist.append(list1[0])\n        list1.remove(list1[0])\n        if len(list1)>=n:\n            outlist.append(list1[0])\n            list1.remove(list1[0])\n            if len(list1)>=n:\n                outlist.append(list1[0])\n                list1.remove(list1[0])\n    return outlist\n",
        "num_ids": 128
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    return sorted(list1,key=lambda x:x,reverse=True)[:n]\ndef agt_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    return sorted(list1,key=lambda x:x,reverse=False)[:n]\ndef heap_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    return sorted(list1,key=lambda x:x,reverse=False)[:n]\ndef selection_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1,n):\n            if list1[j] < list1[min_idx]:\n                min_idx = j\n        list1[i],list1[min_idx] = list1[min_idx],list1[i]\n    return list1\ndef insertion_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    for i in range(1,n):\n        for j in range(i,0,-1):\n            if list1[j] < list1[j-1]:\n                list1[j],list1[j-1] = list1[j-1],list1[j]\n    return list1\ndef merge_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    if n <= 1:\n        return list1\n    mid = n//2\n    left = list1[:mid]\n    right = list1[mid:]\n    left = merge_sort(left,n)\n    right = merge_sort(right,n)\n    return merge(left,right)\ndef merge(list1,list2):\n    '''\n    Write a function that takes in two sorted lists and returns a list containing the length of the lists.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    return len(list1) + len(list2)\ndef merge_sort_2(list1,list2):\n    '''\n    Write a function that takes in two sorted lists and returns a list containing the length of the lists.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    if len(list1) <= 1:\n        return len(list1)\n    left = len(list1)\n    right = len(list2)\n    mid = len(list1) // 2\n    while left < right:\n        if list1[mid] < list2[mid]:\n            list1[left] = list1[mid]\n            left += 1\n        else:\n            list1[right] = list2[mid]\n            right += 1\n    return left + right\ndef heap_sort_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n):\n        list1[i] = heapq.heappop(heap)\n    return list1\ndef bubble_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    for i in range(n):\n        for j in range(n-1):\n            if list1[j] > list1[j+1]:\n                list1[j],list1[j+1] = list1[j+1],list1[j]\n    return list1\ndef bubble_sort_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    for i in range(n):\n        for j in range(n-i-1):\n            if list1[j] > list1[j+1]:\n                list1[j],list1[j+1] = list1[j+1],list1[j]\n    return list1\ndef merge_sort_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    if len(list1) <= 1:\n        return list1\n    mid = len(list1)//2\n    left = merge_sort_3(list1[:mid],n)\n    right = merge_sort_3(list1[mid:],n)\n    return merge(left,right)\ndef merge_sort_3_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    if len(list1) <= 1:\n        return list1\n    mid = len(list1)//2\n    left = merge_sort_3_2(list1[:mid],n)\n    right = merge_sort_3_2(list1[mid:],n)\n    return merge(left,right)\ndef heap_sort_3_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n):\n        list1[i] = heapq.heappop(heap)\n    return list1\ndef heap_sort_3_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n):\n        list1[i] = heapq.heappop(heap)\n    return list1\ndef heap_sort_3_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #The function should return the list sorted in ascending order by the value.\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n):\n        list1[i] = heapq.heappop(heap)\n    return list1\ndef heap_sort_3_5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n",
        "num_ids": 29
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = sorted(list1, key = lambda x: x[n], reverse = True)\n    return list1[:n]\n",
        "num_ids": 34
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # time complexity = O(nlog(n))\n    # space = O(n)\n    max_heap = []\n    for x in list1:\n        heapq.heappush(max_heap,x)\n    list_to_return = []\n    for i in range(n):\n        heapq.heappop(max_heap)\n        list_to_return.append(heapq.heappop(max_heap))\n    return list_to_return",
        "num_ids": 120
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return list1[0:n]\n",
        "num_ids": 25
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #return list(heapq.nlargest(n,list1,key = lambda x: x[0]))\n    return [x[0] for x in heapq.nlargest(n,list1,key = lambda x: x[0])]\n",
        "num_ids": 62
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(list1[i])\n    return new_list\ndef k_largest(list1,k,n):\n    '''\n    Write a function that takes in a list of numbers and an integer k and returns a list of the k largest numbers in the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(list1[i])\n    heapq.heapify(new_list)\n    for i in range(n):\n        if len(new_list)>k:\n            heapq.heappop(new_list)\n        if len(new_list)==k:\n            break\n    return new_list\ndef main():\n    '''\n    Write a function that takes in a list of numbers and an integer k and returns a list of the k largest numbers in the list.\n    '''\n    print(\"Enter list of numbers.\\n\")\n    list_of_numbers=[]\n    for i in range(6):\n        print(\"Enter number \" + str(i+1) + \": \")\n        x=int(input())\n        list_of_numbers.append(x)\n    n=len(list_of_numbers)\n    print(\"Enter number of k: \")\n    k=int(input())\n    print(\"Enter numbers: \")\n    for i in range(n):\n        print(list_of_numbers[i], end=\" \")\n    print()\n    print(\"Sorted list.\\n\")\n    print(k_largest(list_of_numbers,k,n))\n",
        "num_ids": 174
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n",
        "num_ids": 35
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 1:\n        return list1\n    else:\n        #d = heapq.nlargest(n,list1)\n        #list2 = sorted(d,reverse=True)\n        list2 = list1[:n]\n        list2.sort(reverse=True)\n        return list2\ndef nsort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 1:\n        return list1\n    else:\n        #d = heapq.nlargest(n,list1)\n        #list2 = sorted(d,reverse=True)\n        list2 = list1[:n]\n        list2.sort(reverse=True)\n        return list2\ndef nsort1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 1:\n        return list1\n    else:\n        #d = heapq.nlargest(n,list1)\n        #list2 = sorted(d,reverse=True)\n        list2 = sorted(list1[:n],reverse=True)\n        return list2\n",
        "num_ids": 70
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for x in range(len(list1)):\n        if(len(list1)==0 or list1[x]==list1[0]):\n            heapq.heappush(heap,-x)\n            continue\n        else:\n            heapq.heappush(heap,-list1[x])\n            continue\n    print(heap)\n    return heap\nlist1 = [1,2,3,4,5]\n",
        "num_ids": 127
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    S0 = 1.3\n    S = S0 * np.sqrt((r**2+h**2)/2)\n    return S\n",
        "num_ids": 36
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * math.pi * r * h)\n",
        "num_ids": 16
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)\n",
        "num_ids": 12
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return h*(3*r-h/4)**2\n",
        "num_ids": 18
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 4*(h**2)*(np.cos(r))**2*(np.sin(r))**2\n    area += (h**2)*(np.cos(r))**2*(np.sin(r))**2*(np.cos(r))**2\n    return (area)\n",
        "num_ids": 76
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #First we calculate the base-height and the diameter of the cylinder\n    b = (h / 2) * r\n    a = r * (1 - h / (2 * r))\n",
        "num_ids": 45
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Variables\n    s = r*h\n    z = (s**2 + r**2 - s)/(2*r*h)\n    return z\n",
        "num_ids": 40
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A=2*r*h*np.pi\n    return A\n",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    d = 3\n    s = h/2*((1-h/d)/2)\n    return (s * r)\n",
        "num_ids": 32
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=2*(r*h+r*(r-h))\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l*l*l)\n    return volume\n",
        "num_ids": 17
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    side = l ** 3\n    return side * 4\n",
        "num_ids": 15
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l * (l * l)\n    return v\n",
        "num_ids": 17
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return round(math.sqrt(l**2 + l**2 + l**2),2)\n",
        "num_ids": 26
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # TODO: Your code here\n    return l**3\n",
        "num_ids": 17
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if len(l) == 1:\n        print(l[0] * l[0] * l[0])\n    else:\n        print(len(l) * len(l) * len(l))\n",
        "num_ids": 52
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 7
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        while n > 0:\n            if (n & 1) == 0:\n                print(n, end=\" \")\n            n = n >> 1\n        print(\"\")\n    else:\n        print(-1)\n",
        "num_ids": 59
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    s = ''\n    while n: \n        if n & 0x1 == 0: \n            s += '0'\n        else: \n            s += '1'\n        n = n >> 1\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    evens = 0\n    for x in range(n):\n        if x%2 == 0:\n            evens = evens + 2**x\n    return evens\ndef add_to_list(add_to_list,a,b):\n    '''\n    write a python function to add a number to a list\n    '''\n    add_to_list.append(a+b)\n    return add_to_list\ndef remove_list(remove_list,a,b):\n    '''\n    write a python function to remove a number from a list\n    '''\n    remove_list.remove(a+b)\n    return remove_list\ndef sum_of_list(list_number):\n    '''\n    Write a python function to get the sum of the even numbers of a given list.\n    '''\n    sum = 0\n    for x in range(len(list_number)):\n        if x%2 == 0:\n            sum = sum + list_number[x]\n    return sum\ndef test_even_bit_set_number(evens):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for x in range(evens):\n        print(x)\n        print(even_bit_set_number(x))\ndef test_add_to_list(a,b):\n    '''\n    Write a python function to add a number to a list\n    '''\n    for x in range(a+b):\n        print(x)\n        print(add_to_list(a,b))\ndef test_remove_list(a,b):\n    '''\n    Write a python function to remove a number from a list\n    '''\n    for x in range(a+b):\n        print(x)\n        print(remove_list(a,b))\ndef test_sum_of_list(a,b):\n    '''\n    Write a python function to get the sum of a list\n    '''\n    print(sum_of_list(a))\n    print(sum_of_list(b))\ntest_even_bit_set_number(even_bit_set_number(25))\ntest_add_to_list(3,4)\ntest_remove_list(3,4)\ntest_sum_of_list(3,4)",
        "num_ids": 83
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # YOUR CODE HERE\n    n = n & 0xFFFFFFFF\n    # if you want to see the actual output uncomment the following two lines and comment the next two lines.\n    #print(n)\n    print('\\nEven bit set number:'+ str(n))\n    #print('\\n')\n    \n",
        "num_ids": 75
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print (f\"n={n} is even bit set.\")\n    even_bit_set = bin(n)[2:]\n    even_bit_set = even_bit_set.replace(\"0b\", \"\")\n    return even_bit_set\n",
        "num_ids": 60
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bits = []\n    while n:\n        if n & 1:\n            bits.append('1')\n        else:\n            bits.append('0')\n        n = n >> 1\n    return ''.join(bits)\n",
        "num_ids": 55
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    output = \"\"\n    for i in range(n): \n        if (i % 2) == 0: \n            output += \"1\"\n        else: \n            output += \"0\"\n    print(output)\n    return\n    ",
        "num_ids": 58
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        n &= 0b10000000\n        while n:\n            n &= n-1\n            if n & 1:\n                n |= 0b1\n                n -= 1\n            else:\n                n |= 0b0\n                n -= 1\n    else:\n        n &= 0b10000000\n        while n:\n            n &= n-1\n            if n & 1:\n                n |= 0b0\n                n -= 1\n            else:\n                n |= 0b1\n                n -= 1\n    return n\n",
        "num_ids": 135
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = 0\n    for i in range(0, n):\n        if (i%2 == 0):\n            even_bit_set = even_bit_set | (1 << (7 - (i%8)))\n    print(\"Even Bits: \", even_bit_set)\n    return even_bit_set\n",
        "num_ids": 79
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ret = \"\"\n    for i in range(0, n):\n        if (i % 2) == 0:\n            ret += '1'\n        else:\n            ret += '0'\n    return ret\n",
        "num_ids": 51
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for tuple in test_list:\n        if tuple[0] in d:\n            d[tuple[0]] = d[tuple[0]] + 1\n        else:\n            d[tuple[0]] = 1\n    return d\n",
        "num_ids": 64
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n",
        "num_ids": 16
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #make a dictionary of unique tuples\n    d = dict()\n    #use a for loop to go through each tuple\n    for i in test_list:\n        #loop through all the tuples and add to dictionary\n        d[i[0]] = d.get(i[0], 0) + 1\n        #if the dictionary is empty, set it to 1\n    return d \n",
        "num_ids": 91
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in test_list:\n        dictionary[i[0]] = dictionary.get(i[0], 0) + 1\n    return dictionary\n",
        "num_ids": 43
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i[1] in d.keys():\n            d[i[1]] += 1\n        else:\n            d[i[1]] = 1\n",
        "num_ids": 52
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for test in test_list:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef check_unique(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for test in test_list:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef check_uniqueness(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for test in test_list:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_uniques(list_of_tuples):\n    '''\n    Given a list of tuples, determine the unique elements in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_uniques_and_check_unique(list_of_tuples):\n    '''\n    Given a list of tuples, determine the unique elements and check whether there are no duplicates in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_uniques_and_check_unique_and_not_duplicates(list_of_tuples):\n    '''\n    Given a list of tuples, determine the unique elements and check whether there are no duplicates in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_uniques_and_check_unique_and_not_duplicates_and_not_duplicates(list_of_tuples):\n    '''\n    Given a list of tuples, determine the unique elements and check whether there are no duplicates in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_unique_and_check_uniques(list_of_tuples):\n    '''\n    Given a list of tuples, determine the unique elements and check whether they occur in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_unique_and_check_uniques_and_not_duplicates(list_of_tuples):\n    '''\n    Given a list of tuples, determine the unique elements and check whether they occur in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_unique_and_check_uniques_and_not_duplicates_and_not_duplicates(list_of_tuples):\n    '''\n    Given a list of tuples, determine the unique elements and check whether they occur in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef unique_in_list(list_of_tuples):\n    '''\n    Given a list of tuples, determine whether the unique elements occur in the list.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef test_dictionary(test_list):\n    '''\n    Given a list of tuples, determine whether each tuple in the list has the same unique element.\n    '''\n    result_dict = {}\n    for test in test_list:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef check_dict(test_list):\n    '''\n    Given a list of tuples, determine whether each tuple in the list has the same unique element.\n    '''\n    result_dict = {}\n    for test in test_list:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_unique(list_of_tuples):\n    '''\n    Given a list of tuples, determine which of the tuples are unique.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef find_unique_and_check_unique(list_of_tuples):\n    '''\n    Given a list of tuples, determine whether each tuple in the list has the same unique element.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef unique_in_list_and_check_unique_and_not_duplicates(list_of_tuples):\n    '''\n    Given a list of tuples, determine whether each tuple in the list has the same unique element.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef unique_in_list_and_check_unique_and_not_duplicates_and_not_duplicates(list_of_tuples):\n    '''\n    Given a list of tuples, determine whether each tuple in the list has the same unique element.\n    '''\n    result_dict = {}\n    for test in list_of_tuples:\n        if test[0] in result_dict.keys():\n            result_dict[test[0]] += 1\n        else:\n            result_dict[test[0]] = 1\n    return result_dict\ndef unique_in_list_and_check_uniques_and_not_duplicates(list_of_tuples):\n    '",
        "num_ids": 101
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts\n",
        "num_ids": 17
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] in occurence_dict:\n            occurence_dict[tuple[0]] += 1\n        else:\n            occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef string_test(test_list,expected_output):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = check_occurences(test_list)\n    if isinstance(occurence_dict,dict):\n        print(\"\\nTest Passed!\\n\")\n        print(f\"\\n{occurence_dict}\\n\")\n    else:\n        print(\"\\nTest Failed!\\n\")\n        print(f\"\\nTest Failed!\\n\")\n        print(occurence_dict)\n    \n    if isinstance(expected_output,dict):\n        print(\"\\nExpected Output:\")\n        string_test(expected_output.items(),occurence_dict.items())\n    else:\n        print(\"\\nExpected Output:\")\n        print(occurence_dict)\n    \n",
        "num_ids": 175
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n",
        "num_ids": 16
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n    \ndef most_common(test_list):\n    '''\n    Write a function that takes in a list of tuples, and returns the dictionary with the most common values in the list.\n    '''\n    return max(test_list, key=counter.get)\n",
        "num_ids": 17
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    char_set = set(str)\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] not in char_set:\n            char_set.remove(str[i])\n            count += 1\n    return count\n    pass\n",
        "num_ids": 67
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Implement the function\n    def count_substrings(str):\n        count = 0\n        for i in range(len(str)):\n            for j in range(len(str) - 1):\n                if str[i:j + 1] == str[i:j + 1][::-1]:\n                    count += 1\n        return count\n    \n    return count_substrings(str)\n",
        "num_ids": 94
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # create an empty dictionary to store the current substring \n    sub_count = {}\n    \n    # loop through the string\n    for s in range(0,len(str)):\n        \n        # if the current substring has not been visited yet, \n        # add it to the dictionary \n        if str[s] not in sub_count:\n            # update the dictionary with the current substring \n            sub_count[str[s]] = 1\n        \n        # if the current substring has been visited, \n        # then we have reached a new substring. \n        # and we can increment the count of the current substring by 1 \n        else:\n            # increment the count of the current substring by 1 \n            sub_count[str[s]] += 1\n",
        "num_ids": 186
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    temp = {}\n    count = 0\n    if str.isspace():\n        count = 0\n    else:\n        for i in range(len(str)):\n            if str[i] in temp:\n                temp[str[i]] += 1\n            else:\n                temp[str[i]] = 1\n        for k,v in temp.items():\n            if v == 1:\n                count += 1\n        return count\n    \ndef print_and_return(str):\n    '''\n    Write a python function to print a string in a nice way, with spaces between every word.\n    '''\n    temp = {}\n    if str.isspace():\n        print(' '.join(temp))\n    else:\n        for i in range(len(str)):\n            if str[i] in temp:\n                temp[str[i]] += 1\n            else:\n                temp[str[i]] = 1\n        for k,v in temp.items():\n            if v == 1:\n                print(k,end=' ')\n        print()\n",
        "num_ids": 106
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = []\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            l.append(1)\n        else:\n            l.append(0)\n    return l\n",
        "num_ids": 59
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    l = len(str)\n",
        "num_ids": 15
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substr_count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            substr_count += 1\n    return substr_count\n",
        "num_ids": 52
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def expand_substring(str): \n        '''\n        Count the number of substrings of a given string.\n        '''\n        substring_length = 0\n        i = 0\n        while i < len(str): \n            j = i \n            while j < len(str) and str[i] == str[j]: \n                j += 1\n            if j - i > substring_length: \n                substring_length = j - i \n            i = j\n        return substring_length \n    \n    # Initialization \n    substring_length = 0 \n    substring_count = 0 \n    i = 0 \n    j = 0 \n    \n    # Check every character in the string \n    while i < len(str): \n        j = i \n        while j < len(str) and str[i] == str[j]: \n            j += 1\n        if j - i > substring_length: \n            substring_length = j - i \n        substring_count += 1 \n        i += 1 \n    \n    # Count the number of substrings \n    return substring_count \n",
        "num_ids": 243
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    while i < len(str):\n        while j < len(str) and str[j]!= str[i]:\n            j += 1\n        if j == len(str):\n            count += 1\n        else:\n            count += 1\n            j += 1\n        i += 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m>=0 and n>=0 and m>=n, 'Numbers must be positive'\n    assert type(m) == int and type(n) == int, 'Numbers must be positive'\n    assert m>=0 and n>=0, 'Numbers must be positive'\n    assert m+n>=1, 'Numbers must be positive'\n    \n    tot = 0\n    k = 1\n    while k <= n:\n        assert k%2 == 0, 'Numbers must be positive'\n        if m==k:\n            tot+=1\n        if m+k==n:\n            tot+=1\n        k+=2\n    \n    return tot\n",
        "num_ids": 158
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 0 or n <= 0:\n        raise ValueError(\"m and n must be greater than 0\")\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    return ((m // n) * n) + (m % 2 == 0)\n",
        "num_ids": 67
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((m+n-2)*(m+n-2)/2)\n",
        "num_ids": 22
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m>=0 and m<=2**32,\"Number of sequences cannot be less than 2**32\"\n    assert n>=2 and n<=2**32,\"Number of sequences cannot be less than 2**32\"\n    assert n>=m, \"Number of sequences cannot be equal to m\"\n    assert n%2==0, \"The total number of sequences cannot be odd\"\n    assert n%m==0, \"The total number of sequences cannot be divided by 2\"\n    assert n>=2**14,\"The total number of sequences cannot be less than 2**14\"\n    \n    # TODO: Complete this function\n    return n//2\n    \n",
        "num_ids": 154
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Your code here\n",
        "num_ids": 8
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m>=0 and m<=10**5 and n>=0 and n<=10**5, \"m and n must be valid positive integers\"\n    assert n%2==0 and n%3==0 and n%5==0, \"m and n must be positive integers that are even and greater than 2 and less than 5\"\n    assert len(m)==n, \"m and n must be of the same length\"\n    return int(((n*(n-1))-m)/2)\n",
        "num_ids": 119
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # write your code here\n    # write your code here\n    num_of_total_sequences = 0\n    if n < m:\n        return -1\n",
        "num_ids": 40
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # write your code here\n    if m<0 or n<0:\n        raise ValueError(\"Lengths must be positive\")\n    elif n<m:\n        raise ValueError(\"This sequence is too short!\")\n    else:\n        total_number_of_sequences = 2*n\n        remainder = m\n        count = 0\n        while remainder:\n            while remainder>0 and m%2==0:\n                m /= 2\n                count += 1\n            if m==0:\n                break\n            remainder -= 1\n            count += 1\n        return total_number_of_sequences-count\n",
        "num_ids": 147
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    Add your code here.\n    '''\n    return 4*m+n\n",
        "num_ids": 10
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for m in range(1, n+1): \n        total_number_of_sequences += m*(m+1) // 2\n    return total_number_of_sequences\n",
        "num_ids": 59
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 1:\n        return list1 + list2\n    else:\n        return list1[-1]+list2\n",
        "num_ids": 36
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1.append(list2.pop())\n",
        "num_ids": 15
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #case 1: use list comprehension\n    print(list(map(lambda i:i if i<list2[0] else i-list2[0],list1)))\n    #case 2: use iterative\n    list2=list2[::-1]\n    print(list(map(lambda i:list2[0]*i if i==list2[0] else list2[0]*i,list1)))\n",
        "num_ids": 101
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2.pop()\n    list1.append(list2.pop())\n    return list1,list2\n    \ndef main():\n    '''\n    The main function of this module. Prints the list in the format: [a, b, c, d, e, f].\n    '''\n    # Initialize variables\n    my_list = [1, 2, 3, 4, 5, 6]\n    a_list = [10, 11, 12, 13, 14, 15]\n    b_list = [16, 17, 18, 19, 20, 21]\n    c_list = [22, 23, 24, 25, 26, 27]\n    d_list = [28, 29, 30, 31, 32, 33]\n    e_list = [34, 35, 36, 37, 38, 39]\n    f_list = [40, 41, 42, 43, 44, 45]\n    \n    # Convert lists to variables\n    a, b, c, d, e, f = replace_list(a_list,b_list)\n    a, b, c, d, e, f = replace_list(a_list,b_list)\n    a, b, c, d, e, f = replace_list(a_list,b_list)\n    a, b, c, d, e, f = replace_list(a_list,b_list)\n    a, b, c, d, e, f = replace_list(a_list,b_list)\n    \n    # Print the output\n    print(f\"Your list is: {a}\\n\"\n        f\"Your list is: {b}\\n\"\n        f\"Your list is: {c}\\n\"\n        f\"Your list is: {d}\\n\"\n        f\"Your list is: {e}\\n\"\n        f\"Your list is: {f}\\n\")\n    \nmain(",
        "num_ids": 372
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list_of_lists = []\n    for item in list1:\n        list_of_lists.append(item)\n    for item in list2:\n        list_of_lists.append(item)\n",
        "num_ids": 51
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1\n",
        "num_ids": 20
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(\"Do you want to replace the last element of the first list with the elements of the second list? (Y/N)\")\n    print(\"Here are the possible answers:\")\n    print(\"1. Yes\")\n    print(\"2. No\")\n    answer = input(\"Input an answer: \")\n    if answer == \"1\":\n        new_list = list1[0:len(list2)]\n        list1[0:len(list2)] = list2\n        return new_list\n    else:\n        return list1\n",
        "num_ids": 125
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        list3.append(list1[i][-1])\n        list3.append(list2[i])\n    return list3\n",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1 + [list2[-1]]\n    list1.pop()\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    print(count)\n    \nstr1=\"The quick brown fox jumps over the lazy dog.\"\ncount_charac(str1)\n",
        "num_ids": 51
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    chars = 0\n    for char in str1:\n        chars += 1\n    return chars\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    pass\n",
        "num_ids": 27
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        if char == char_count:\n            char_count += 1\n        else:\n            char_count = 0\n    return char_count\n",
        "num_ids": 50
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        char_count += 1\n    return char_count\n        \ndef count_charac_1(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        char_count += 1\n    return char_count\n    \ndef count_charac_2(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        char_count += 1\n    return char_count\n        \ndef count_charac_3(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        char_count += 1\n    return char_count\n        \ndef count_charac_4(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isupper():\n            char_count += 1\n    return char_count\n        \ndef count_charac_5(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.islower():\n            char_count += 1\n    return char_count\n        \ndef count_charac_6(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isalnum():\n            char_count += 1\n    return char_count\n        \ndef count_charac_7(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalnum():\n            char_count += 1\n    return char_count\n        \ndef count_charac_8(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalpha():\n            char_count += 1\n    return char_count\n        \ndef count_charac_9(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.islower():\n            char_count += 1\n    return char_count\n        \ndef count_charac_10(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isdigit():\n            char_count += 1\n    return char_count\n        \ndef count_charac_11(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isdigit():\n            char_count += 1\n    return char_count\n        \ndef count_charac_12(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isupper():\n            char_count += 1\n    return char_count\n        \ndef count_charac_13(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalpha():\n            char_count += 1\n    return char_count\n        \ndef count_charac_14(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalnum():\n            char_count += 1\n    return char_count\n        \ndef count_charac_15(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isdigit():\n            char_count += 1\n    return char_count\n        \ndef count_charac_16(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isupper():\n            char_count += 1\n    return char_count\n        \ndef count_charac_17(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalpha():\n            char_count += 1\n    return char_count\n        \ndef count_charac_18(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.islower():\n            char_count += 1\n    return char_count\n        \ndef count_charac_19(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalpha():\n            char_count += 1\n    return char_count\n        \ndef count_charac_20(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isalnum():\n            char_count += 1\n    return char_count\n        \ndef count_charac_21(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isdigit():\n            char_count += 1\n    return char_count\n        \ndef count_charac_22(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalnum():\n            char_count += 1\n    return char_count\n        \ndef count_charac_23(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isdigit():\n            char_count += 1\n    return char_count\n        \ndef count_charac_24(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isupper():\n            char_count += 1\n    return char_count\n        \ndef count_charac_25(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.islower():\n            char_count += 1\n    return char_count\n        \ndef count_charac_26(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if c.isalpha():\n            char_count += 1\n    return char_count\n        \ndef count_charac_27(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        if not c.isalpha():\n            char_count += 1\n    return char_count\n        \ndef count_charac_28(str1):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) == 0:\n        return 0\n    count = 0\n    for x in str1:\n        count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for i in str1:\n        c += 1\n    return c\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #Create an empty dictionary to store the characters\n    chars = {}\n",
        "num_ids": 19
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1 \n    elif N == 2: \n        return 2 \n    elif N == 3: \n        return 6\n    elif N == 4: \n        return 10 \n    elif N == 5: \n        return 15 \n    elif N == 6: \n        return 20 \n    elif N == 7: \n        return 25 \n    elif N == 8: \n        return 30 \n    elif N == 9: \n        return 35 \n    elif N == 10: \n        return 40 \n    elif N == 11: \n        return 45 \n    elif N == 12: \n        return 50 \n    elif N == 13: \n        return 55 \n    elif N == 14: \n        return 60 \n    elif N == 15: \n        return 65 \n    elif N == 16: \n        return 70 \n    elif N == 17: \n        return 75 \n    elif N == 18: \n        return 80 \n    elif N == 19: \n        return 85 \n    elif N == 20: \n        return 90 \n    elif N == 21: \n        return 95 \n    elif N == 22: \n        return 100 \n    elif N == 23: \n        return 105 \n    elif N == 24: \n        return 110 \n    elif N == 25: \n        return 115 \n    elif N == 26: \n        return 120 \n    elif N == 27: \n        return 125 \n    elif N == 28: \n        return 130 \n    elif N == 29: \n        return 135 \n    elif N == 30: \n        return 140 \n    elif N == 31: \n        return 145 \n    elif N == 32: \n        return 150 \n    elif N == 33: \n        return 155 \n    elif N == 34: \n        return 160 \n    elif N == 35: \n        return 165 \n    elif N == 36: \n        return 170 \n    elif N == 37: \n        return 175 \n    elif N == 38: \n        return 180 \n    elif N == 39: \n        return 185 \n    elif N == 40: \n        return 190 \n    elif N == 41: \n        return 195 \n    elif N == 42: \n        return 200 \n    elif N == 43: \n        return 205 \n    elif N == 44: \n        return 210 \n    elif N == 45: \n        return 215 \n    elif N == 46: \n        return 220 \n    elif N == 47: \n        return 225 \n    elif N == 48: \n        return 230 \n    elif N == 49: \n        return 235 \n    elif N == 50: \n        return 240 \n    elif N == 51: \n        return 245 \n    elif N == 52: \n        return 250 \n    elif N == 53: \n        return 275 \n    elif N == 54: \n        return 280 \n    elif N == 55: \n        return 285 \n    elif N == 56: \n        return 290 \n    elif N == 57: \n        return 295 \n    elif N == 58: \n        return 300 \n    elif N == 59: \n        return 305 \n    elif N == 60: \n        return 310 \n    elif N == 61: \n        return 315 \n    elif N == 62: \n        return 320 \n    elif N == 63: \n        return 325 \n    elif N == 64: \n        return 330 \n    elif N == 65: \n        return 335 \n    elif N == 66: \n        return 340 \n    elif N == 67: \n        return 345 \n    elif N == 68: \n        return 350 \n    elif N == 69: \n        return 355 \n    elif N == 70: \n        return 360 \n    elif N == 71: \n        return 365 \n    elif N == 72: \n        return 370 \n    elif N == 73: \n        return 375 \n    elif N == 74: \n        return 380 \n    elif N == 75: \n        return 385 \n    elif N == 76: \n        return 390 \n    elif N == 77: \n        return 395 \n    elif N == 78: \n        return 400 \n    elif N == 79: \n        return 405 \n    elif N == 80: \n        return 410 \n    elif N == 81: \n        return 415 \n    elif N == 82: \n        return 420 \n    elif N == 83: \n        return 425 \n    elif N == 84: \n        return 430 \n    elif N == 85: \n        return 435 \n    elif N == 86: \n        return 440 \n    elif N == 87: \n        return 445 \n    elif N == 88: \n        return 450 \n    elif N == 89: \n        return 455 \n    elif N == 90: \n        return 460 \n    elif N == 91: \n        return 465 \n    elif N == 92: \n        return 470 \n    elif N == 93: \n        return 475 \n    elif N == 94: \n        return 490 \n    elif N == 95: \n        return 495 \n    elif N == 96: \n        return 500 \n    elif N == 97: \n        return 505 \n    elif N == 98: \n        return 510 \n    elif N == 99: \n        return 525 \n    elif N == 100: \n        return 530 \n    elif N == 101: \n        return 535 \n    elif N == 102: \n        return 540 \n    elif N == 103: \n        return 545 \n    elif N == 104: \n        return 550 \n    elif N == 105: \n        return 555 \n    elif N == 106: \n        return 560 \n    elif N == 107: \n        return 565 \n    elif N == 108: \n        return 570 \n    elif N == 109: \n        return 575 \n    elif N == 110: \n        return 580 \n    elif N == 111: \n        return 585 \n    elif N == 112: \n        return 590 \n    elif N == 113: \n        return 595 \n    elif N == 114: \n        return 600 \n    elif N == 115: \n        return 625 \n    elif N == 116: \n        return 630 \n    elif N == 117: \n        return 655 \n    elif N == 118: \n        return 660 \n    elif N == 119: \n        return 665 \n    elif N == 120: \n        return 670 \n    elif N == 121: \n        return 675 \n    elif N == 122: \n        return 680 \n    elif N == 123: \n        return 685 \n    elif N == 124: \n        return 690 \n    elif N == 125: \n        return 695 \n    elif N == 126: \n        return 700 \n    elif N == 127: \n        return 705 \n    elif N == 128: \n        return 720 \n    elif N == 129: \n        return 735 \n    elif N == 130: \n        return 740 \n    elif N == 131: \n        return 745 \n    elif N == 132: \n        return 750 \n    elif N == 133: \n        return 755 \n    elif N == 134: \n        return 760 \n    elif N == 135: \n        return 765 \n    elif N == 136: \n        return 770 \n    elif N == 137: \n        return 775 \n    elif N == 138: \n        return 780 \n    elif N == 139: \n        return 785 \n    elif N == 140: \n        return 790 \n    elif N == 141: \n        return 795 \n    elif N == 142: \n        return 80",
        "num_ids": 2009
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        sq = math.sqrt(N)\n        if (sq == int(sq)):\n            break\n        elif (N % 2 == 0):\n            print(N)\n            break\n    print(N)\n",
        "num_ids": 63
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    fact = math.factorial(N) \n    while (N!=1 and fact%N==0):\n        N=N//fact \n    if (N!=1):\n        return N**2\n    else:\n        return -1\nprint(next_Perfect_Square(200))",
        "num_ids": 71
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1) or (N == 2):\n        return N\n    elif N == 3:\n        return N\n    elif N < 3:\n        return N\n    else:\n        i = 4\n        while i*i <= N:\n            if N % i == 0:\n                return N\n            i += 4\n        return N\n",
        "num_ids": 84
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int((N ** 0.5) + 1)\ndef perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N)) + 1\n",
        "num_ids": 16
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(n):\n        if n <= 1:\n            return n == 1\n        if n % 2 == 0:\n            return is_perfect_square(n//2)\n        else:\n            return is_perfect_square((3*n)+1)\n    #for i in range(N):\n    if is_perfect_square(N) is True:\n        return N\n    else:\n        if N < 0:\n            return -1\n        N = N * N\n        while N <= math.sqrt(N):\n            N += 1\n            if is_perfect_square(N) is True:\n                return N\n        return -1\n",
        "num_ids": 158
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    i = 2\n    n = N\n    while (N % i!= 0):\n        i = i + 2\n        n = n - 1\n    if (N % i == 0):\n        return N\n    else:\n        return N\n    \n    \ndef next_Perfect_Square_2(N):\n    '''\n    A function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    i = 2\n    n = N\n    while (N % i!= 0):\n        i = i + 2\n        n = n - 1\n    if (N % i == 0):\n        return N\n    else:\n        return N\n",
        "num_ids": 70
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N)\n    if (x % 2 == 0):\n        return int(math.ceil(x/2))\n    else:\n        return int(math.ceil(x/2)+1)\n",
        "num_ids": 57
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==0: \n        return 1\n    if N==1: \n        return 2 \n    if N==2: \n        return 3 \n    else:\n        return N*(N+1)/2\n    \ndef next_Perfect_Square_recursive(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using a recursive function.\n    '''\n    if N==0: \n        return 1\n    if N==1: \n        return 2 \n    if N==2: \n        return 3 \n    return (N*(N+1)/2) + next_Perfect_Square_recursive(N-1)\n",
        "num_ids": 67
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    \n    max_sum = arr[0]\n    last_index = 1\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > 0:\n            max_sum = max(arr[i] + max_sum, arr[last_index] + max_sum)\n            last_index += 1\n    \n    return max_sum\n",
        "num_ids": 112
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    max_ending = 0\n    for index in range(len(arr)):\n        if index == 0:\n            max_ending = arr[index]\n        else:\n            if arr[index] > max_ending:\n                max_ending = arr[index]\n            if arr[index] > max_so_far:\n                max_so_far = arr[index]\n        if index + 1 >= len(arr):\n            max_ending = 0\n    return max_ending\n",
        "num_ids": 123
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return 0\n    res, base = arr[0], arr[0]\n    for num in arr[1:]:\n        if num > base:\n            res += base\n            base = num\n        else:\n            res += num\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            if arr[i-1] > arr[i]:\n                max_sum = arr[i] + max_sum\n            else:\n                max_sum = arr[i] - arr[i-1]\n    return max_sum\n",
        "num_ids": 90
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Your code here\n    return \n",
        "num_ids": 12
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    if len(arr) == 1: \n        return sum \n    if arr[0] > 0: \n        sum = arr[0] \n    else: \n        sum = 0 \n    for i in range(1, len(arr)): \n        sum = max(sum, sum + arr[i]) \n    return sum \n",
        "num_ids": 89
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Set up the max sum, use the first column to calculate the sum of first column\n    max_val = arr[0][0]\n",
        "num_ids": 34
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sub_sequence = []\n    \n    for i in range(len(arr)):\n        if arr[i] == 1:\n            for j in range(i+1, len(arr)):\n                if arr[j] == 1:\n                    max_sub_sequence.append(arr[j])\n                else:\n                    break\n        else:\n            for j in range(i+1, len(arr)):\n                if arr[j] == 1:\n                    break\n                else:\n                    max_sub_sequence.append(arr[j])\n                    break\n    \n    return max(max_sub_sequence)\n",
        "num_ids": 149
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 1:\n        raise ValueError('input must be greater than 1')\n",
        "num_ids": 22
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n",
        "num_ids": 10
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    def log2(number):\n        '''\n        :param number: number to be logarithmized.\n        :return: logarithmized number.\n        '''\n        return number * np.log2(number)\n        \n    def square(number):\n        '''\n        :param number: number to be square.\n        :return: square of number.\n        '''\n        return number ** 2\n        \n    def sqrt(number):\n        '''\n        :param number: number to be square root.\n        :return: square root of number.\n        '''\n        return np.sqrt(number)\n        \n    def to_integral_square(number):\n        '''\n        :param number: number to be converted to an integral square.\n        :return: integral square of number.\n        '''\n        return number * np.sqrt(number)\n        \n    if number <= 0:\n        raise ValueError('{} must be positive.'.format(number))\n    \n    if number < 0:\n        return -1 * (to_integral_square(-number) / square(-number))\n        \n    if np.isscalar(number):\n        return log2(square(number))\n        \n    if np.isscalar(number):\n        return log2(number)\n    \n    if number.ndim > 1:\n        raise ValueError('{} must be an array-like.'.format(number))\n        \n    if not np.issubdtype(number.dtype, np.number):\n        raise ValueError('{} must be a number-like.'.format(number))\n        \n    if not number.flags.writeable:\n        raise ValueError('{} must be writeable.'.format(number))\n        \n    if not number.flags.f_contiguous:\n        raise ValueError('{} must be contiguous.'.format(number))\n        \n    if number.flags.c_contiguous:\n        raise ValueError('{} must be contiguous.'.format(number))\n    \n    return np.sqrt(number)\n    \n",
        "num_ids": 296
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    new_number = 0\n    while number!= 0:\n        remainder = number % 10\n        new_number += remainder * (remainder//10)\n        number = number // 10\n    return new_number\n",
        "num_ids": 54
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    sqrt = 0\n    while x > 0:\n        x, x = x / 2, x / 2\n        sqrt = sqrt + 1\n    return sqrt\n",
        "num_ids": 47
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    p = 0\n    q = 0\n    square_root = 0\n    square_root_value = 0\n",
        "num_ids": 28
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('number must be >= 0')\n    \n    if number == 0:\n        return 0\n    \n    n = 0\n    # 1. Initialize root with a default value\n    root = 1.0\n    \n    # 2. Compute square root of number\n    while abs(number) > 1:\n        newRoot = (root + (number / root)) / 2.0\n        n += 1\n        if newRoot >= 1.0:\n            break\n        \n        root = newRoot\n    \n    return n + 1",
        "num_ids": 133
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # set the global variables\n    square_root = 0\n    sqrt = 1\n    # loop over the number's digits until it finds a number less than 1, or reaches the end of the number\n    while sqrt <= number:\n        # increment the square root\n        square_root += 1\n        # check if the next number is less than 1\n        if number % sqrt == 0:\n            # compute the remainder\n            remainder = number % sqrt\n            # increment the square root\n            sqrt += 1\n        # if the number is not a remainder, it must be a remainder of a power\n        else:\n            # increment the remainder by 1\n            remainder = 1\n            # check if it is a power of 2\n            if remainder > 1:\n                # compute the remainder\n                remainder = (number % sqrt) / 2\n    # return the result\n    return square_root, remainder\n",
        "num_ids": 210
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = 0\n    while abs(number) >= 1:\n        if number > 0:\n            if number % 2!= 0:\n                sqrt = sqrt + (number // 2)\n                number = (number // 2)\n            else:\n                sqrt = sqrt + ((number // 2) + 1)\n                number = (number // 2) + 1\n        elif number < 0:\n            if number % 2!= 0:\n                sqrt = sqrt + ((number // 2) - 1)\n                number = (number // 2) - 1\n            else:\n                sqrt = sqrt + ((number // 2) - (number + 1))\n                number = (number // 2) - (number + 1)\n    return sqrt\n",
        "num_ids": 176
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return sqrt(number)\n",
        "num_ids": 10
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Define a helper function to get the length of the longest palindromic subsequence\n    def pal_check(str):\n        max_pal = 0\n        for i in range(len(str)):\n            #print(str[i:i+2])\n            if str[i:i+2] == str[::-1][::-1]:\n                pal = 2\n                for j in range(i, len(str)-1):\n                    pal += 1\n                    if pal > max_pal:\n                        max_pal = pal\n            else:\n                pal = 1\n                for j in range(i, len(str)):\n                    pal += 1\n                    if pal > max_pal:\n                        max_pal = pal\n        return max_pal\n",
        "num_ids": 177
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str=='':\n        return 0\n    i=0\n    for j in range(0,len(str)):\n        for k in range(j,len(str)):\n            \n            if str[j]!=str[k]:\n                break\n            else:\n                i=j\n                break\n        else:\n            if j-i+1>len(str):\n                return len(str)\n            elif j-i+1==len(str):\n                return j-i\n            else:\n                i=j\n                break\n        \n    return i+1\n",
        "num_ids": 140
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = 0\n    mid = 0\n    start = 0\n    for i in range(len(str)):\n        if str[i] == str[i][::-1]:\n            lps += 1\n        else:\n            mid = i\n            break\n",
        "num_ids": 64
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return (0)\n",
        "num_ids": 8
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n+1)] for x in range(n)]\n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #initialize the longest palindrome\n    longest = 1\n",
        "num_ids": 18
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    sub_str = []\n    \n    i = 0\n    n = len(str)\n    \n    while i < n:\n        if str[i] == str[n - i - 1]:\n            if len(str[i:n - i]) > len(str[n - i - 1:n]):\n                sub_str.append(str[i:n - i])\n        else:\n            sub_str.append(str[i:n - i])\n        i += 1\n    \n    return len(sub_str)\n",
        "num_ids": 130
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_len = 1\n    lps = []\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i]!= str[j]:\n                if len(lps) <= j-i:\n                    lps = [str[i]]\n                else:\n                    if len(lps) > j-i:\n                        lps = lps[:j-i]\n                    lps = [str[i]] + lps\n    return len(lps)\n",
        "num_ids": 128
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n",
        "num_ids": 35
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    if len(str) == 2:\n        return 2\n    if str[0] == str[len(str)-1]:\n        return lps(str[0:len(str)-1]) + 1\n    else:\n        return 1 + lps(str[1:len(str)])\n",
        "num_ids": 99
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n + 1) // 2) - (n * (n + 1) // 2) + 1\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return round((1/n)*(1 + n*log(n, 2)), 5)\n",
        "num_ids": 24
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # get the sum of numbers from 1 to the sum\n    s = 0\n    for i in range(1,n+1):\n        s = s + i\n    return s\n    \ndef NthUglyNumber(n):\n    '''\n    Get the nth ugly number.\n    '''\n    # use a dictionary to store the factors of the numbers\n    d = {}\n    d['1'] = 1\n    d['2'] = 2\n    d['3'] = 3\n    d['4'] = 4\n    d['5'] = 5\n    d['6'] = 6\n    d['7'] = 7\n    d['8'] = 8\n    d['9'] = 9\n    d['10'] = 10\n    d['11'] = 11\n    d['12'] = 12\n    d['13'] = 13\n    d['14'] = 14\n    d['15'] = 15\n    d['16'] = 16\n    d['17'] = 17\n    d['18'] = 18\n    d['19'] = 19\n    d['20'] = 20\n    d['21'] = 21\n    d['22'] = 22\n    d['23'] = 23\n    d['24'] = 24\n    d['25'] = 25\n    d['26'] = 26\n    d['27'] = 27\n    d['28'] = 28\n    d['29'] = 29\n    d['30'] = 30\n    d['31'] = 31\n    d['32'] = 32\n    d['33'] = 33\n    d['34'] = 34\n    d['35'] = 35\n    d['36'] = 36\n    d['37'] = 37\n    d['38'] = 38\n    d['39'] = 39\n    d['40'] = 40\n    d['41'] = 41\n    d['42'] = 42\n    d['43'] = 43\n    d['44'] = 44\n    d['45'] = 45\n    d['46'] = 46\n    d['47'] = 47\n    d['48'] = 48\n    d['49'] = 49\n    d['50'] = 50\n    d['51'] = 51\n    d['52'] = 52\n    d['53'] = 53\n    d['54'] = 54\n    d['55'] = 55\n    d['56'] = 56\n    d['57'] = 57\n    d['58'] = 58\n    d['59'] = 59\n    d['60'] = 60\n    d['61'] = 61\n    d['62'] = 62\n    d['63'] = 63\n    d['64'] = 64\n    d['65'] = 65\n    d['66'] = 66\n    d['67'] = 67\n    d['68'] = 68\n    d['69'] = 69\n    d['70'] = 70\n    d['71'] = 71\n    d['72'] = 72\n    d['73'] = 73\n    d['74'] = 74\n    d['75'] = 75\n    d['76'] = 76\n    d['77'] = 77\n    d['78'] = 78\n    d['79'] = 79\n    d['80'] = 80\n    d['81'] = 81\n    d['82'] = 82\n    d['83'] = 83\n    d['84'] = 84\n    d['85'] = 85\n    d['86'] = 86\n    d['87'] = 87\n    d['88'] = 88\n    d['89'] = 89\n    d['90'] = 90\n    d['91'] = 91\n    d['92'] = 92\n    d['93'] = 93\n    d['94'] = 94\n    d['95'] = 95\n    d['96'] = 96\n    d['97'] = 97\n    d['98'] = 98\n    d['99'] = 99\n    d['100'] = 100\n    d['101'] = 101\n    d['102'] = 102\n    d['103'] = 103\n    d['104'] = 104\n    d['105'] = 105\n    d['106'] = 106\n    d['107'] = 107\n    d['108'] = 108\n    d['109'] = 109\n    d['110'] = 110\n    d['111'] = 111\n    d['112'] = 112\n    d['113'] = 113\n    d['114'] = 114\n    d['115'] = 115\n    d['116'] = 116\n    d['117'] = 117\n    d['118'] = 118\n    d['119'] = 119\n    d['120'] = 120\n    d['121'] = 121\n    d['122'] = 122\n    d['123'] = 123\n    d['124'] = 124\n    d['125'] = 125\n    d['126'] = 126\n    d['127'] = 127\n    d['128'] = 128\n    d['129'] = 129\n    d['130'] = 130\n    d['131'] = 131\n    d['132'] = 132\n    d['133'] = 133\n    d['134'] = 134\n    d['135'] = 135\n    d['136'] = 136\n    d['137'] = 137\n    d['138'] = 138\n    d['139'] = 139\n    d['140'] = 140\n    d['141'] = 141\n    d['142'] = 142\n    d['143'] = 143\n    d['144'] = 144\n    d['145'] = 145\n    d['146'] = 146\n    d['147'] = 147\n    d['148'] = 148\n    d['149'] = 149\n    d['150'] = 150\n    d['151'] = 151\n    d['152'] = 152\n    d['153'] = 153\n    d['154'] = 154\n    d['155'] = 155\n    d['156'] = 156\n    d['157'] = 157\n    d['158'] = 158\n    d['159'] = 159\n    d['160'] = 160\n    d['161'] = 161\n    d['162'] = 162\n    d['163'] = 163\n    d['164'] = 164\n    d['165'] = 165\n    d['166'] = 166\n    d['167'] = 167\n    d['168'] = 168\n    d['169'] = 169\n    d['170'] = 170\n    d['171'] = 171\n    d['172'] = 172\n    d['173'] = 173\n    d['174'] = 174\n    d['175'] = 175\n    d['176'] = 176\n    d['177'] = 177\n    d['178'] = 178\n    d['179'] = 179\n    d['180'] = 180\n    d['181'] = 181\n    d['182'] = 182\n    d['183'] = 183\n    d['184'] = 184\n    d['185'] = 185\n    d['186'] = 186\n    d['187'] = 187\n    d['188'] = 188\n    d['189'] = 189\n    d['190'] = 190\n    d['191'] = 191\n    d['192'] = 192\n    d['193'] = 193\n    d['194'] = 194\n    d['195'] = 195\n    d['196'] = 196\n    d['197'] = 197\n    d['198'] = 198\n    d['199'] = 199\n    d['200'] = 200\n    d['201'] = 201\n    d['202'] = 202\n    d['203'] = 203\n    d['204'] = 204\n    d['205'] = 205\n    d['206'] = 206\n    d['207'] = 207\n    d['208'] = 208\n    d['209'] = 209\n    d['210'] = 210\n    d['211'] = 211\n    d['212'] = 212\n    d['213'] = 213\n    d['214'] = 214\n    d['215'] = 215\n    d['216'] = 216\n    d['217'] = 217\n    d['218'] = 218\n    d['219'] = 219\n    d['220'] = 220\n    d['221'] = 221\n    d['222'] = 222\n    d['223'] = 223\n    d['224'] = 224\n    d['225'] = 225\n    d['226'] = 226\n    d['227'] = 227\n    d['228'] = 228\n    d['229'] = 229\n    d['230'] = 230\n    d['231'] = 231\n    d['232'] = 232\n    d['233'] = 233\n    d['234'] = 234\n    d['235'] = 235\n    d['236'] = 236\n    d['237'] = 237\n    d['238'] = 238\n    d['239'] = 239\n    d['240'] = 240\n    ",
        "num_ids": 1941
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1/n) + (n-1) * (1/n)\n",
        "num_ids": 24
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (1 + n)\n",
        "num_ids": 12
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += i\n    return harmonic_sum\n",
        "num_ids": 37
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(1, n):\n        harmonic = harmonic + 1/i\n    return harmonic\n",
        "num_ids": 33
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Does this work for positive numbers?\n    if n > 0:\n        return n * (n - 1) // 2\n    else:\n        raise Exception(\"Invalid Input\")\n",
        "num_ids": 43
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int((n+1)**0.5)\n",
        "num_ids": 16
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # define a set of numbers that are in the first array\n    intersect_set1 = set(array_nums1)\n    # define a set of numbers that are in the second array\n    intersect_set2 = set(array_nums2)\n    # define a set of numbers that are NOT in the first array\n    non_intersect_set1 = intersect_set1 - intersect_set2\n    # define a set of numbers that are NOT in the second array\n    non_intersect_set2 = intersect_set2 - intersect_set1\n    # return a list of numbers that are in the first array and not in the second array\n    intersect_list = list(non_intersect_set1) + list(non_intersect_set2)\n    return intersect_list\n",
        "num_ids": 184
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                result.append(i)\n                break\n    return result\n    \n    \ndef intersection_sorted_array(array_nums1,array_nums2):\n    '''\n    Write a function that takes two sorted arrays as input and returns their intersection.\n    '''\n    result = []\n    for i in array_nums1:\n        if i not in result:\n            result.append(i)\n    for j in array_nums2:\n        if j not in result:\n            result.append(j)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    s1=set(array_nums1)\n    s2=set(array_nums2)\n    return len(s1.intersection(s2))\n    \n    \ndef solution(nums1,nums2):\n    '''\n    Given two lists of numbers, return an array sorted in increasing order by the second element in each.\n    '''\n    arr=[nums1[i]+nums2[i] for i in range(len(nums1))]\n    arr.sort()\n    return arr\n    \n",
        "num_ids": 42
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_set = set()\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                intersect_set.add(array_nums1[i])\n    return intersect_set\n",
        "num_ids": 86
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_set= set(array_nums1).intersection(set(array_nums2))\n    print(\"Intersection of numbers in array_nums1 and array_nums2 is {}.\".format(intersect_set))\n    return(intersect_set)\n",
        "num_ids": 68
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = set(array_nums1)\n    b = set(array_nums2)\n    l_inter = a.intersection(b)\n    return l_inter\n",
        "num_ids": 45
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n    return intersection\n",
        "num_ids": 61
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n1 = len(array_nums1)\n    n2 = len(array_nums2)\n",
        "num_ids": 28
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # your code goes here\n    print(array_nums1)\n    print(array_nums2)\n    array_length = len(array_nums1)\n    array_values = []\n    for i in range(array_length):\n        value = array_nums1[i]\n        for j in range(array_length):\n            if value == array_nums2[j]:\n                array_values.append(value)\n    array_values = set(array_values)\n    print(array_values)\n    return(array_values)\n",
        "num_ids": 135
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    return intersection\n",
        "num_ids": 43
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if not tup:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    s = 0\n    for i in tup:\n        if x == i:\n            s = s + 1\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len([x for x in tup if x == x])\n",
        "num_ids": 18
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == y:\n            c += 1\n    return c\n    \ndef count_z(tup,z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == z:\n            c += 1\n    return c\n    \ndef count_x(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n    \ndef count_y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == y:\n            c += 1\n    return c\n    \ndef count_z(tup,z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == z:\n            c += 1\n    return c\n    \ndef main(): \n    '''\n    This program will determine if two strings are the same, if they are, print \"The same!\"\n    '''\n    print(\"This program determines if two strings are the same, if they are, print \"The same!\"\")\n    input_string_1 = input(\"Enter a string: \")\n    input_string_2 = input(\"Enter a string: \")\n    \n    if(count_X(tuple(input_string_1.split()), \"a\") == count_X(tuple(input_string_2.split()), \"a\")):\n        print(\"The same!\")\n    else:\n        print(\"The not same!\")\n        \n    if(count_Y(tuple(input_string_1.split()), \"a\") == count_Y(tuple(input_string_2.split()), \"a\")):\n        print(\"The same!\")\n    else:\n        print(\"The not same!\")\n    \n    if(count_Z(tuple(input_string_1.split()), \"a\") == count_Z(tuple(input_string_2.split()), \"a\")):\n        print(\"The same!\")\n    else:\n        print(\"The not same!\")\n        \n    if(count_x(tuple(input_string_1.split()), \"a\") == count_x(tuple(input_string_2.split()), \"a\")):\n        print(\"The same!\")\n    else:\n        print(\"The not same!\")\n        \n    if(count_y(tuple(input_string_1.split()), \"a\") == count_y(tuple(input_string_2.split()), \"a\")):\n        print(\"The same!\")\n    else:\n        print(\"The not same!\")\n        \n    if(count_z(tuple(input_string_1.split()), \"a\") == count_z(tuple(input_string_2.split()), \"a\")):\n        print(\"The same!\")\n    else:\n        print(\"The not same!\")\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 476
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    total = 0 \n    for i in range(len(tup)):\n        if tup[i] == x:\n            total += 1 \n    return total \n",
        "num_ids": 45
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tuple.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    count=0\n    for i in tup:\n        if i==x:\n            count+=1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Set the count variable to the first value in the tuple\n    count = tup[0] \n    # Iterate through the values in the tuple\n    for num in tup: \n        # If the count variable is greater than or equal to the first value in the tuple then increment count by 1\n        if num == count: \n            count = count + 1\n    # Return the count variable \n    return count \n",
        "num_ids": 98
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a = 0\n    for i in tup:\n        if x == i:\n            a+=1\n    return a\n",
        "num_ids": 31
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #loop through the list, removing the element, and adding it to the new position\n    new_position = []\n    for i in list:\n        if i==element:\n            new_position.append(i)\n        else:\n            new_position.append(i)\n    return new_position\n",
        "num_ids": 72
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = list.copy()\n    result.insert(0,element)\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    print(\"\\nInsert Element Function\")\n    print(element,list)\n    element_index=list.index(element)\n    #print(element_index)\n    list.insert(element_index+1,element)\n    #print(list)\n    return list\n",
        "num_ids": 66
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return [list[0]] + [list[i+1]]\n    return [element] + list\n    \ndef bubble_sort(list):\n    '''\n    Write a function that takes in a list and returns it in sorted order.\n    '''\n    for i in range(len(list)-1):\n        for j in range(len(list)-1-i):\n            if list[j] > list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n",
        "num_ids": 71
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [x[0] + element for x in list]\n",
        "num_ids": 17
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l = []\n    for i in list:\n        l.append(i)\n        l.insert(0,element)\n",
        "num_ids": 32
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index=0\n    result=[]\n    \n    while index < len(list):\n        if len(list[index]) == 0:\n            list.insert(index,element)\n        else:\n            result.append(element)\n            result.append(list[index][0])\n            index+=1\n            element=list[index][0]\n        \n    return result\n",
        "num_ids": 90
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp_list = []\n    for i in range(0, len(list)):\n        temp_list.append(list[i])\n    list.clear()\n    list = temp_list\n    return list\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a list with the elements after the element is removed.\n    '''\n    temp_list = []\n    for i in range(0, len(list)):\n        if list[i] == element:\n            continue\n        temp_list.append(list[i])\n    list.clear()\n    list = temp_list\n    return list\n",
        "num_ids": 65
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp_list = []\n    for elem in list:\n        temp_list.append(elem)\n        if elem!= element:\n            temp_list.append(elem)\n    return temp_list\n",
        "num_ids": 54
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_copy = list[:] # make a new copy of the list\n    list_copy.insert(0,element) # insert the element after its position\n    return list_copy\n",
        "num_ids": 44
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if not numbers:\n        print('There is no complex numbers.')\n        return 0\n    else:\n        for num in numbers:\n            if type(num) is complex:\n                if num > 0:\n                    x = cmath.polar(num)\n                else:\n                    x = -cmath.polar(num)\n            else:\n                x = num\n        return x",
        "num_ids": 92
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = int(numbers.split(',')[0])\n    b = int(numbers.split(',')[1])\n    c = int(numbers.split(',')[2])\n    d = int(numbers.split(',')[3])\n    e = int(numbers.split(',')[4])\n    f = int(numbers.split(',')[5])\n    g = int(numbers.split(',')[6])\n    h = int(numbers.split(',')[7])\n    res = (cmath.polar(((b * d * e * f) + (a * g * h)) / (c * d * b * e)))\n    print(str(res))\n",
        "num_ids": 176
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import numpy as np\n",
        "num_ids": 9
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for value in numbers:\n        polar.append((value.real**2 + value.imag**2)**0.5)\n    return polar\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers)==3:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        z=cmath.polar(numbers[2])\n        print(\"%.15f\" % (x[0]/y[0]*180*pi))\n        print(\"%.15f\" % (x[1]/y[1]*180*pi))\n        print(\"%.15f\" % (x[2]/y[2]*180*pi))\n    elif len(numbers)==2:\n        x=cmath.polar(numbers[0])\n        y=cmath.polar(numbers[1])\n        print(\"%.15f\" % (x[0]/y[0]*180*pi))\n        print(\"%.15f\" % (x[1]/y[1]*180*pi))\n    else:\n        print(\"You need to specify a number for each number to convert to polar coordinates\")\n",
        "num_ids": 243
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    if type(numbers)==float:    \n        return (round(cmath.phase(numbers)),round(cmath.phase(numbers)/cmath.pi*180))\n    if type(numbers)==complex:    \n        return (round(cmath.phase(numbers.real)),round(cmath.phase(numbers.imag)))\n",
        "num_ids": 87
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        try:\n            if numbers[i] == complex(0.0,0.0) and i==0:\n                numbers[i] = numbers[i]\n            elif numbers[i] == complex(0.0,0.0) and i==1:\n                numbers[i] = numbers[i]\n            else:\n                s = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n                numbers[i] = cmath.polar(s)\n        except:\n            continue\n    return numbers\n",
        "num_ids": 148
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(numbers == 'end'):\n        return 'end'\n    else:\n        return numbers\n",
        "num_ids": 27
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers[0]\n    imag = numbers[1]\n    if real < 0:\n        real = -real\n    if imag < 0:\n        imag = -imag\n    return cmath.polar(real, imag)\n",
        "num_ids": 57
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from math import cos, sin, pi\n    def convert_to_coordinates(numbers, base, exponent):\n        '''\n        Return a tuple of numbers converted to polar coordinates based on base and exponent.\n        '''\n        if exponent == '0':\n            return (numbers[0], base ** (1 / 2))\n        elif exponent == '1':\n            return (numbers[1], base ** (1 / 2))\n        elif exponent == '2':\n            return (numbers[2], base ** (1 / 2))\n        elif exponent == '3':\n            return (numbers[3], base ** (1 / 2))\n        elif exponent == '4':\n            return (numbers[4], base ** (1 / 2))\n        else:\n            return (numbers[1], base ** (1 / 2) * (cos(numbers[2]) + sin(numbers[3])))\n    try:\n        base = float(base)\n        exponent = int(exponent)\n    except:\n        print('ERROR: Complex number should be given as a string in the format <number> <exponent>. Try again!')\n    try:\n        exponent = float(exponent)\n    except:\n        print('ERROR: Complex number should be given as a string in the format <number> <exponent>. Try again!')\n    try:\n        numbers = [int(n) for n in numbers.split()]\n        numbers = numbers[::-1]\n    except:\n        print('ERROR: Complex number should be given as a string in the format <number> <exponent>. Try again!')\n    try:\n        numbers = list(map(convert_to_coordinates, numbers, base, exponent))\n    except:\n        print('ERROR: Complex number should be given as a string in the format <number> <exponent>. Try again!')\n    return (numbers)\n",
        "num_ids": 395
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    # Let's check if the list is empty, if it is, return 0. If not, return the number of integers in the list.\n    if len(list1) == 0:\n        return 0\n    else:\n        # Let's check if the list contains only integers. If it is, return 1, if not, return the number of integers in the list.\n        # if the list contains only integers and the function returns 0, because the list is empty.\n        if all(isinstance(x, int) for x in list1):\n            return 1\n        else:\n            return 0\n",
        "num_ids": 137
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] is int:\n            counter += 1\n    print('The number of integers in the list is:', counter)\n",
        "num_ids": 52
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in range(0,len(list1)):\n        if list1[i] < 10:\n            counter+=1\n    return counter\n",
        "num_ids": 42
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i) == int:\n            count +=1\n    return count\n    \ndef string_check(choice, options):\n    '''\n    Write a python function that checks if a user input is valid.\n    '''\n    is_valid = True\n    for var_list in options:\n        # if the first element of the list is the same as the user's choice\n        if choice[0]  in var_list:\n            # loop through the remaining elements of the list\n            for var_item in var_list:\n                # set a flag that will tell if the user wants to continue\n                # or if they want to exit the program\n                done = False\n                while done == False:\n                    # ask the user if they want to continue or exit the program\n                    user_response = input(\"Do you want to continue(y/n)? \").lower()\n                    if user_response == 'y':\n                        is_valid = True\n                        break\n                    elif user_response == 'n':\n                        is_valid = False\n                        break\n                    else:\n                        print(\"Please answer with 'y' or 'n'.\")\n        else:\n            is_valid = False\n            print(\"That is not a valid input. Please try again.\")\n    if is_valid == True:\n        print(\"That is valid input.\")\n    else:\n        print(\"That is not a valid input. Please try again.\")\n        ",
        "num_ids": 270
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(map(int, list1))\n",
        "num_ids": 14
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    else:\n        return combinations_colors(l, n - 1) + [tuple(l)]\n",
        "num_ids": 38
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(l):\n        combos.append(combinations(l, i+1))\n    return combos\n",
        "num_ids": 37
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1,n+1):\n        for j in combinations_with_replacement(l, i):\n            combinations.append(tuple(j))\n    return combinations\n",
        "num_ids": 53
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_of_colors = []\n    combinations = []\n    for i in range(l-1):\n        for j in combinations_with_replacement(l, i):\n            combinations.append(j)\n    for i in combinations:\n        color = list(i)\n        list_of_colors.append(color)\n    return list_of_colors\n",
        "num_ids": 91
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i])\n        for j in range(i + 1, len(l)):\n            result.append(l[j])\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(element for element in list(combinations(l, i)) if element!= []) for i in range(n)]\n",
        "num_ids": 35
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == 1:\n        return list(l)\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_colors_list = []\n    if len(l) == 0 or n == 0:\n        return combinations_colors_list\n    \n    # Iterate through all combinations of elements\n    for i in range(len(l)+1):\n        combinations_colors_list.append(tuple(l[:i] + l[i+1:]))\n    \n    # Generate all combinations of elements using combinations_with_replacement\n    combinations_colors_list = [''.join(i) for i in combinations_with_replacement(l,n)]\n    \n    return combinations_colors_list\n",
        "num_ids": 148
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == n:\n        return l\n    else:\n        return combinations_colors(l, n-len(l)) + [tuple(l)]\n    \ndef combinations_colors_1(l):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == 1:\n        return l\n    else:\n        return combinations_colors_1(l[1:]) + [l[0]]\n",
        "num_ids": 41
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    ans = []\n    for i in combinations_with_replacement(l, n):\n        ans.append(tuple(i))\n    return ans\n",
        "num_ids": 38
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n % 2 == 0 or n <= 2:\n        return 0\n    else:\n        sum = 0\n        for x in range(3, n, 2):\n            if x % 2 == 0:\n                sum += 1\n        return sum\n        \ndef is_prime(x):\n    '''\n    Write a python function that returns True if the number x is a prime number, else False.\n    '''\n    if x == 2 or x == 3:\n        return True\n    if x % 2 == 0 or x < 2:\n        return False\n    elif x == 3:\n        return True\n    elif x < 3 or x > 99:\n        return False\n    else:\n        for x in range(5, x//2 + 1, 2):\n            if x * x == x:\n                return False\n        return True\n",
        "num_ids": 100
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Determine if the number is divisible by 3\n    if n%3==0:\n        # If the number is divisible by 3, then the function should return 2 as it is divisible by 3\n        return 2\n    # Otherwise, the function should return 1\n    return 1\n",
        "num_ids": 67
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # your code goes here\n    primes=[]\n    for i in range(2,n+1):\n        if i<=n:\n            for j in range(2,i+1):\n                if i%j==0:\n                    primes.append(j)\n                    break\n    return len(primes)\n",
        "num_ids": 78
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # var my_list = [2,3,5,7,11,13,17]\n    # var count_primes = 0\n    # for number in my_list:\n    #     if number > 1:\n    #         for i in range(2, number):\n    #             if number % i == 0:\n    #                 break\n    #         else:\n    #             count_primes += 1\n    #     else:\n    #         continue\n    # return count_primes\n    return sum([1 for i in range(2, n) if n % i == 0])\n",
        "num_ids": 140
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    l=[]\n    for x in range(2,n):\n        if isprime(x):\n            l.append(x)\n    return len(l)\n",
        "num_ids": 41
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # TODO: Write your solution here\n    count = 0\n    for i in range(2, n):\n        if all(pow(i, j) == 1 for j in range(2, i)):\n            count = count + 1\n    return count\n    # END OF SOLUTION\n",
        "num_ids": 70
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    list = []\n    for i in range(n+1):\n        if i==1:\n            list.append(1)\n        elif i%2==0:\n            list.append(0)\n        else:\n            list.append(1)\n    list.append(0)\n    return sum(list)\ndef main():\n    print(count_Primes_nums(20))\nmain(",
        "num_ids": 98
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # variable to save the number of primes\n    count = 0\n",
        "num_ids": 18
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Problem 1\n    if n <= 1:\n        return 0\n    \n    # Problem 2\n    if n == 2:\n        return 1\n    \n    # Problem 3\n    primes = [2]\n    \n    # Problem 4\n    for i in range(3,n+1):\n        if i in primes:\n            continue\n        primes.append(i)\n        if n%i == 0:\n            continue\n        if n%i==0 and i not in primes:\n            primes.append(i)\n    return len(primes)\n",
        "num_ids": 135
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=1:\n        return 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if (n % i) == 0:\n            return 1 + count_Primes_nums(n/i)\n    return 0",
        "num_ids": 66
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n",
        "num_ids": 12
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a_two_digit = int(a)\n    b_two_digit = int(b)\n    # a,b_two_digit = b,a\n    # return (b,a)\n    if a_two_digit > b_two_digit:\n        a,b = b,a\n    else:\n        a,b = a,b\n    return a,b\n",
        "num_ids": 92
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print('In order to swap the numbers please enter two numbers separated by a comma.')\n    print('First number is',a)\n    print('Second number is',b)\n    return (b,a)\n",
        "num_ids": 50
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = int(a)\n    b = int(b)\n    tuple1 = (b, a)\n    tuple2 = (a, b)\n    return tuple2\n",
        "num_ids": 45
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a == b:\n        return a, b\n    elif a > b:\n        return b, a\n    elif a < b:\n        return a, b\n",
        "num_ids": 43
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup1=tuple(a)\n    tup2=tuple(b)\n    new_tup=tup1+(tup2)\n    return new_tup\n    \nprint(swap_numbers(1,2))\n",
        "num_ids": 61
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first=a\n    second=b\n    return (second, first)\n",
        "num_ids": 20
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # YOUR CODE HERE\n    max_sum = float(\"-inf\")\n    max_sum2 = float(\"-inf\")\n    for i in test_tup1:\n        for j in test_tup2:\n            if i + j == max_sum:\n                print('x =',i,', y =',j,'max_sum = ',max_sum)\n                return i\n    print('x =',test_tup1[0],', y =',test_tup2[0],', max_sum = ',max_sum2)\n    return 'x = -1, y = 1'\n",
        "num_ids": 143
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # TODO: Write your code here\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup2\n",
        "num_ids": 69
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def elements(x):\n        '''\n        Return the maximum of all of the elements in the given tuple.\n        '''\n        return max(x)\n    return max(test_tup1)\n    \n    \n    \n    # Write your code here\n    pass\n",
        "num_ids": 36
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    return test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]\n",
        "num_ids": 46
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    res = []\n    \n    #determine the max(tup1) and the min(tup1)\n    #If the max is less than the min, return the min \n    if max(test_tup1[0], test_tup2[0]) > min(test_tup1[0], test_tup2[0]):\n        max_val = test_tup1[0]\n    else:\n        max_val = test_tup2[0]\n    \n    #if the max is more than the min, return the min \n    if max(test_tup1[0], test_tup2[0]) < min(test_tup1[0], test_tup2[0]):\n        min_val = test_tup1[0]\n    else:\n        min_val = test_tup2[0]\n    \n    #use a for loop to iterate through the tuples and determine the difference\n    for i in test_tup1:\n        if i < max_val:\n            res.append(i)\n        elif i > min_val:\n            res.append(i)\n        else:\n            res.append(0)\n    \n    for i in test_tup2:\n        if i < max_val:\n            res.append(i)\n        elif i > min_val:\n            res.append(i)\n        else:\n            res.append(0)\n    \n    return tuple(res)\n",
        "num_ids": 357
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = 0\n    if len(test_tup1) > len(test_tup2):\n        return (test_tup2, test_tup1)\n    else:\n        return (test_tup1, test_tup2)\n",
        "num_ids": 65
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a,b = test_tup1\n    b,c = test_tup2\n    if a > b:\n        return (a,b)\n    else:\n        return (b,a)\n",
        "num_ids": 51
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if (n<=1): \n        return False\n    \n    prime = [True for i in range(n+1)] \n    prime[0]=False\n    prime[1]=False\n    for i in range(2,n+1): \n        if prime[i] == True: \n            for j in range(i+i, n+1,i): \n                prime[j] = False\n    prime[n]=False\n    return True if prime[n] else False \n",
        "num_ids": 120
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True for i in range(n+1)]\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i+i, n+1, i):\n                sieve[j] = False\n    return [i for i in range(2, n) if sieve[i] == True]\n",
        "num_ids": 109
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    count=0\n    \n    #loop to calculate nth newman\u2013shanks\u2013williams prime numbers\n    while (n%2==0): \n        n=n//2\n        count+=1\n        \n    #loop to calculate nth newman\u2013shanks\u2013williams prime numbers\n    while (n%3==0): \n        n=n//3\n        count+=1\n    \n    #if number is divisible by 2 or 3, it will give us nth newman\u2013shanks\u2013williams prime number\n    if (n==2 or n==3):\n        prime=[2]\n        prime.extend([3,n])\n    else:\n        prime=[n]\n        prime.extend([(n+1)//2,3])\n    \n    #loop to return nth newman\u2013shanks\u2013williams prime numbers\n    for i in range(1, count+1):\n        new_prime=prime[i]\n        while (new_prime%2==0): \n            new_prime=new_prime//2\n        if (new_prime%3==0): \n            prime.append(new_prime)\n    \n    #return prime list\n    return prime\n    \nprint(newman_prime(24))\n",
        "num_ids": 300
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n % 2 == 0:\n        return n//2\n    else:\n        return n - 1 + newman_prime(n-1)\n",
        "num_ids": 73
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    prime_list = []\n    \n    for i in range(1, n+1):\n        for j in range(i, n+1, i):\n            if j%2:\n                prime_list.append(j)\n    \n    return prime_list[-1]\n",
        "num_ids": 70
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_number = [2, 3, 5, 7]\n    if n <= 1: \n        return n\n",
        "num_ids": 29
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    i = 1\n    while i < n:\n        if n % prime[i] == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1: return 1\n    elif n==2: return 2\n    elif n==3: return 5\n    else:\n        for i in range(4, n):\n            if n%i==0: return 0\n        return n+1\n",
        "num_ids": 63
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    for i in range(1,n+1): \n        count = count + 1\n        if n % i == 0: \n            if n % (i+1) == 0: \n                print (count)\n                return count\n    return print (\"Unable to find new man\")\n",
        "num_ids": 74
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    newman_prime = 0\n    if n==1: \n        newman_prime = 2\n    elif n==2: \n        newman_prime = 3\n    elif n%3==0: \n        newman_prime = 5\n    else: \n        newman_prime = 1\n    print(n,newman_prime)\n    return newman_prime\n",
        "num_ids": 93
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for x in test_tup1:\n        result = result + x\n",
        "num_ids": 25
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Testing:\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b')\n    # test_tup2 = ('a', 'b', 'c', 'd')\n    # result = (3/2)\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b')\n    # test_tup2 = ('a', 'b', 'c', 'd')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b')\n    # test_tup2 = ('a', 'b', 'c', 'd')\n    # result = (3/2)\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/2\n    # result = (3/2)\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('a', 'b')\n    # result = 3/",
        "num_ids": 1997
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO: Implement function for division elements\n",
        "num_ids": 13
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    result = 0\n    for value in test_tup1:\n        if value in test_tup2:\n            result += 1\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i]/test_tup2[i]\n    return test_tup1\n    \n    \n    ",
        "num_ids": 59
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division_elements_recursive(test_tup1, test_tup2):\n        if len(test_tup1) == len(test_tup2) and len(test_tup1) > 0:\n            return test_tup1[0] / test_tup2[0]\n        elif len(test_tup1) == 0:\n            print('Zero division error!')\n        else:\n            if len(test_tup1) > 1:\n                for i in range(len(test_tup1) - 1):\n                    if test_tup1[i] >= test_tup2[i + 1]:\n                        return float('inf')\n                    else:\n                        return division_elements_recursive(test_tup1[i + 1:], test_tup2)\n            else:\n                print('Invalid test tuple!')\n    return division_elements_recursive(test_tup1, test_tup2)\n",
        "num_ids": 234
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(\"\\n\", test_tup1[0], \"and\", test_tup2[0], \"are tested for a division by\", test_tup1[1], \"and\", test_tup2[1], \" respectively.\")\n    print(\"The result of the division is:\", test_tup1[0] / test_tup2[0])\n",
        "num_ids": 87
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = []\n    L2 = []\n    for i in list1:\n        if len(L1) < L:\n            L1.append(i)\n        else:\n            L2.append(i)\n    return L1, L2\n",
        "num_ids": 63
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 1:\n        return (list1[:], list1[:])\n    return split_two_parts(list1[:L-1], L-1)\n",
        "num_ids": 44
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    for i in range(L):\n        a.append(list1[i])\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1984
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L<2:\n        return (list1, None)\n    else:\n        return (list1[:L//2], list1[L//2:])\n",
        "num_ids": 42
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "num_ids": 37
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_list = []\n    count = 0\n    for element in list1:\n        if count < L:\n            split_list.append(element)\n            count += 1\n        else:\n            break\n    return split_list, count\n",
        "num_ids": 59
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [(list1[i:i+L], list1[i+L]) for i in range(0, len(list1), L)]\n",
        "num_ids": 36
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_list = []\n    for element in list1:\n        list1_list.append(element)\n    \n    if L > len(list1_list):\n        return None\n    \n    for i in range(0, len(list1_list), L):\n        list1_list[i:i+L] = list1_list[i:i+L][:L]\n    \n    return tuple(list1_list)\n",
        "num_ids": 107
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Initialize empty lists\n    L1 = []\n    L2 = []\n    \n    # Go through each element in the list\n    for i in list1:\n        # Check if its a number, if not, add it to L1\n        if i.isdigit():\n            L1.append(int(i))\n        else:\n            # Else, add it to L2\n            L2.append(i)\n    \n    # Return both lists\n    return L1, L2\n",
        "num_ids": 117
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:], list1[L+1:]\n",
        "num_ids": 25
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_of_dog = (h_age * 365) + (h_age * 12) + ((h_age - 16) * 6)\n    return age_of_dog\n",
        "num_ids": 44
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n    import time\n    import calendar\n",
        "num_ids": 14
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n    dog_age = 0\n    dog_age = h_age * 365\n    return dog_age\n",
        "num_ids": 32
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 3:\n        return 'you are a dog'\n    elif h_age >= 2:\n        return 'you are a mouse'\n    elif h_age >= 1:\n        return 'you are a rat'\n    else:\n        return 'you are a tiger'\n",
        "num_ids": 71
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 365\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return 'You are a baby!'\n    elif h_age <= 2:\n        return 'You are a normal dog.'\n    elif h_age <= 5:\n        return 'You are a dog.'\n    elif h_age <= 10:\n        return 'You are a pretty old man.'\n    else:\n        return 'You are a great old man.'\n",
        "num_ids": 95
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365.25\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (h_age * 365) + (h_age * 366) + (h_age * 365) + (h_age * 366)\n    return dog_age\n",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age * 365\n    return dog_age_in_years\n",
        "num_ids": 27
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    def dog_age_calc():\n        '''\n        Calculate the dog's age.\n        '''\n        \n        # Use an if-else statement to check the age of a dog is below\n        # 50 years old.\n        if h_age < 50:\n            return 'Not old enough.'\n        \n        # Use a print statement to print the age of the dog.\n        print(f'The dog age is {h_age}.')\n        \n    # Call the function to calculate the dog age.\n    dog_age_calc()\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age_calc().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)\n    \n    \n    # The function is now complete. We should now have a print statement\n    # that says the dog age.\n    \n    # -------------------------------------------------------------------------\n    # Fill in the missing code for the function dog_age().\n    # -------------------------------------------------------------------------\n    \n    # Use a return statement to print the dog age.\n    return 'The dog age is {}.'.format(h_age)",
        "num_ids": 1985
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # NOTE: I've made my own version of this function.\n    if S is None or len(S) <= 0:\n        return []\n    elif step == 0:\n        return [S]\n    elif step == 1:\n        return [S[:]]\n    else:\n        left_index = 0\n        right_index = len(S) - 1\n        new_list = []\n        while right_index >= left_index:\n            if S[left_index] == S[right_index]:\n                new_list.append(S[left_index:right_index+1])\n                left_index += 1\n                right_index -= 1\n            elif S[left_index]!= S[right_index]:\n                left_index += 1\n        return new_list\n",
        "num_ids": 187
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return S\n    else:\n        S = list(S)\n        for i in range(0, len(S), step):\n            yield S[i:i+step]\n        yield S[i:]\n",
        "num_ids": 60
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ls = []\n    for i in range(0, len(S), step):\n        if (i+1) >= len(S):\n            return ls\n        ls.append(S[i:i+step])\n    return ls\n",
        "num_ids": 57
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty string of elements.\n    S = ''\n",
        "num_ids": 18
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    #print(S)\n    for i in range(len(S)-step, len(S)):\n        split_list.append(S[i:i+step])\n    return split_list\n",
        "num_ids": 56
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    \n    # the outer loop\n    for i in range(0, len(S), step):\n        # increment by the step\n        new_list.append(S[i:i+step])\n        \n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not step:\n        return [[]]\n    if n == 1:\n        return [[S]]\n",
        "num_ids": 26
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # your code goes here\n    L = []\n    for i in range(0,len(S),step):\n        L.append(S[i:i+step])\n    return L\n",
        "num_ids": 47
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return [[]]\n    elif step == 1:\n        return S\n    else:\n        return [list(S[i:i+step]) for i in range(0, len(S), step)]\n",
        "num_ids": 57
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return sqrt(3)*l**2\n",
        "num_ids": 13
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    x = math.sqrt(1-l*l)\n    y = x*math.sqrt(1-l*l)\n    z = math.sqrt(l*l)\n    surface = (x*y*z)/(2*(l**2))\n    return surface\n",
        "num_ids": 70
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your code here\n    return 0\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from numpy import pi\n    from math import sqrt, floor\n",
        "num_ids": 18
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    sides = [l, 2*l, 3*l, 4*l, 5*l, 6*l, 7*l, 8*l, 9*l, 10*l, 11*l, 12*l]\n    sides = [x**2 for x in sides]\n    return sum(sides)\n",
        "num_ids": 76
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = (l*(l+1))/2\n    b = (l*(l-1))/2\n    a = a/l\n    b = b/l\n    return(a+b)\n",
        "num_ids": 52
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    L = l*2\n    S1 = sqrt(L/3)\n    S2 = sqrt(L*(L+1)/2)\n    S3 = sqrt(L*(L*3+1)/2)\n",
        "num_ids": 57
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    S = 0.5*l**3\n    return S\n",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # remove spaces in input string\n    L = \"\".join(i for i in l.rstrip() if i not in '0123456789.+-*_[]{}\" ')\n    # divide input string into n lines\n    L = [list(i) for i in L.split('\\n')]\n    # write first line\n    L[0].append('')\n    # write remaining lines\n    for i in range(1,len(L)):\n        L[i].append('')\n    # initialize a list to store the surfaces\n    S = []\n    # initialize a dictionary to store the surfaces' size\n    dict_ = {}\n    # for every line\n    for line in L:\n        # print the line\n        print(line)\n        # split the line into list\n        L_ = [i.split() for i in line]\n        # get the first column of the first line\n        first_col = L_[0][0]\n        # convert the column to number\n        i = 0\n        # for each column\n        for col in L_[1:]:\n            # if the column is a number\n            if len(col) == 1:\n                # if the number is a number\n                if col[0].isnumeric():\n                    # if the number is a negative\n                    if float(col[0])<0:\n                        # write the surface area of the negative number\n                        dict_[first_col[i]] = round(abs(float(col[0])),4)\n                    # if the number is a positive\n                    else:\n                        # write the surface area of the positive number\n                        dict_[first_col[i]] = round(float(col[0])/len(col),4)\n                    # if the number is a negative\n                    # or a positive number\n                    if float(col[0]) < 0:\n                        # if the surface area is less than 0\n                        if float(col[0]) < 0:\n                            # write the negative surface area\n                            dict_[first_col[i]] = round(0,4)\n                        # if the surface area is positive\n                        else:\n                            # write the positive surface area\n                            dict_[first_col[i]] = round(abs(float(col[0])/len(col)),4)\n                    # if the number is a positive\n                    # or a negative number\n                    else:\n                        # if the surface area is positive\n                        if float(col[0]) > 0:\n                            # write the positive surface area\n                            dict_[first_col[i]] = round(abs(float(col[0])/len(col)),4)\n                        # if the surface area is negative\n                        else:\n                            # write the negative surface area\n                            dict_[first_col[i]] = round(0,4)\n                    # if the surface area is negative\n                    # or a positive number\n                    else:\n                        # if the surface area is positive\n                        if float(col[0]) < 0:\n                            # write the positive surface area\n                            dict_[first_col[i]] = round(0,4)\n                        # if the surface area is negative\n                        else:\n                            # write the negative surface area\n                            dict_[first_col[i]] = round(abs(float(col[0])/len(col)),4)\n                # if the column is a string\n                elif len(col) > 1:\n                    # if the string is a number\n                    if col[0].isnumeric():\n                        # if the string is a negative\n                        if float(col[0])<0:\n                            # write the surface area of the negative string\n                            dict_[first_col[i]] = round(abs(float(col[0])),4)\n                        # if the string is a positive\n                        else:\n                            # write the surface area of the positive string\n                            dict_[first_col[i]] = round(float(col[0])/len(col),4)\n                    # if the string is a positive\n                    # or a negative number\n                    else:\n                        # if the surface area is less than 0\n                        if float(col[0]) < 0:\n                            # write the negative surface area\n                            dict_[first_col[i]] = round(0,4)\n                        # if the surface area is positive\n                        else:\n                            # write the positive surface area\n                            dict_[first_col[i]] = round(abs(float(col[0])/len(col)),4)\n                    # if the string is a positive\n                    # or a negative number\n                    else:\n                        # if the surface area is positive\n                        if float(col[0]) > 0:\n                            # write the positive surface area\n                            dict_[first_col[i]] = round(abs(float(col[0])/len(col)),4)\n                        # if the surface area is negative\n                        else:\n                            # write the negative surface area\n                            dict_[first_col[i]] = round(0,4)\n                # if the line is a string\n                else:\n                    # if the string is a number\n                    if col[0].isnumeric():\n                        # write the surface area of the negative string\n                        dict_[first_col[i]] = round(abs(float(col[0])),4)\n                    # if the string is a positive\n                    # or a negative number\n                    else:\n                        # write the positive surface area\n                        dict_[first_col[i]] = round(abs(float(col[0])/len(col)),4)\n            # if the line is a string\n            else:\n                # write the surface area of the string\n                dict_[first_col[i]] = round(float(col[0])/len(col),4)\n        # write the last line\n        S.append(dict_)\n    return S\n",
        "num_ids": 1345
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # TODO: Your code here\n    return\n",
        "num_ids": 14
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 2:\n        return n*n\n    else:\n        return (n*n) + (square_Sum(n-1)//2)\nprint(square_Sum(5))\n",
        "num_ids": 49
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    print(\"The sum of squares for numbers less than or equal to \", n)\n    while i <= n:\n        s = n * n\n        print(i, \" squared\", n, \" squared\", s)\n        i += 2\n    return s\n",
        "num_ids": 64
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\nprint(square_Sum(5))",
        "num_ids": 39
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # Hint: you'll need a loop here\n    sum = 0\n    # Make a while loop, to find the squares of the numbers (plus, minus, * and /)\n    # Hint: there's a loop here, and you'll need to make sure you always have a value in the loop\n    # Hint: you'll need a while loop\n    while n > 0:\n        sum = sum + n * n\n        n = n - 1\n    return sum\n    \n",
        "num_ids": 113
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i ** 2)\n        print(sum)\n    return sum\n    ",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # your code here\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\n    \n    # n=int(input(\"enter the number\"))\n    # return sum(square_Sum(n))\n",
        "num_ids": 64
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1,n+1):\n        sum_squares += i ** 2\n    return sum_squares",
        "num_ids": 39
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    s = 0\n    for i in range(1, n, 2):\n        s = s + i ** 2\n    return s\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i**2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum = sum + i\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1): \n        for j in range(i):\n            if (n % i == 0): \n                return i \n    return 0 \n",
        "num_ids": 46
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n+1):\n        for j in range(i+1):\n            print(n,i,j)\n    return\n",
        "num_ids": 37
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    nums = [2,3,5,7,11,13]\n    nums.remove(1)\n    return nums[n-1]\n",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*(n+1)/2\n",
        "num_ids": 28
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(n)\n    if n <= 1: \n        return 1\n    if n % 2 == 0: \n        return find_star_num(n // 2) + 2\n    else: \n        return find_star_num(n - 1) + 1\n",
        "num_ids": 67
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        print(\"n must be > 0\")\n        return\n",
        "num_ids": 22
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n+1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    \ndef find_star(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    \n",
        "num_ids": 136
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 0\n    else: \n        return find_star_num(n - 1) + 2 * find_star_num(n - 2) \n",
        "num_ids": 59
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    a = 1\n    b = 1\n    n = int(n)\n    while a <= n:\n        if a*b == n:\n            return a\n        else:\n            a += 1\n            b += 1\n",
        "num_ids": 54
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k)-33)\n",
        "num_ids": 14
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    import string\n    if k in string.ascii_lowercase:\n        return string.ascii_lowercase.index(k)\n    elif k in string.ascii_uppercase:\n        return string.ascii_uppercase.index(k)\n    elif k in string.digits:\n        return string.digits.index(k)\n    else:\n        return -1\n",
        "num_ids": 101
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k).encode(\"ascii\")\n",
        "num_ids": 17
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k > 127:\n        raise ValueError('k is out of range')\n    else:\n        return int(chr(k))\n",
        "num_ids": 35
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(k)\n    except:\n        return str(k)\n",
        "num_ids": 25
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(int(k))\n    except ValueError:\n        try:\n            return chr(int(k, base=16))\n        except ValueError:\n            raise ValueError('Invalid character %s' % k)\n",
        "num_ids": 60
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return hex(ord(k))[2:]\n",
        "num_ids": 14
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    value = ord(k)\n    return value\n",
        "num_ids": 14
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == ord(' '):\n        return 0\n    else:\n        return ord(k) - ord('a')",
        "num_ids": 30
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n",
        "num_ids": 10
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_num = 0\n    index = 0\n    while(index < len(arr)):\n        if(arr[index] % 2 == 0):\n            even_num += arr[index]\n            sum += even_num\n            index += 1\n        else:\n            index += 1\n    return sum\n",
        "num_ids": 78
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    even_sum = 0\n    for item in arr:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            continue\n    for index, item in enumerate(even_list):\n        if index % 2 == 0:\n            even_sum += item\n    return even_sum\n",
        "num_ids": 85
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            evens += arr[i]\n    return evens\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2006
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for x in arr:\n        if x % 2 == 0:\n            sum_even += x\n            print(x)\n",
        "num_ids": 38
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = []\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            even.append(arr[i])\n    even=sum(even)\n    return even\n",
        "num_ids": 53
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n",
        "num_ids": 38
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in arr:\n        if i % 2 == 0:\n            sum_even += i\n",
        "num_ids": 32
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #Write your code here\n    num=int(n)\n    power=1\n    for x in range(2,num):\n        if num%x == 0:\n            num = num//x\n            power+=1\n        if power%2==0:\n            power=1\n    return num*power\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1999
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = int(n)\n    if n < 0: \n        return(\"Please enter a positive integer\")\n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n%2 == 0: \n        return n + n * even_Power_Sum(n-1) \n    elif n == 2: \n        return 4\n    elif n == 3: \n        return 9\n    elif n == 4: \n        return 16\n    elif n == 5: \n        return 25\n    elif n == 6: \n        return 36\n    elif n == 7: \n        return 49\n    elif n == 8: \n        return 64\n    elif n == 9: \n        return 81\n    elif n == 10: \n        return 100\n    elif n == 11: \n        return 121\n    elif n == 12: \n        return 144\n    elif n == 13: \n        return 169\n    elif n == 14: \n        return 196\n    elif n == 15: \n        return 225\n    elif n == 16: \n        return 256\n    elif n == 17: \n        return 289\n    elif n == 18: \n        return 324\n    elif n == 19: \n        return 357\n    elif n == 20: \n        return 395\n    elif n == 21: \n        return 454\n    elif n == 22: \n        return 517\n    elif n == 23: \n        return 581\n    elif n == 24: \n        return 604\n    elif n == 25: \n        return 629\n    elif n == 26: \n        return 646\n    elif n == 27: \n        return 679\n    elif n == 28: \n        return 714\n    elif n == 29: \n        return 721\n    elif n == 30: \n        return 738\n    elif n == 31: \n        return 761\n    elif n == 32: \n        return 768\n    elif n == 33: \n        return 795\n    elif n == 34: \n        return 812\n    elif n == 35: \n        return 827\n    elif n == 36: \n        return 845\n    elif n == 37: \n        return 864\n    elif n == 38: \n        return 881\n    elif n == 39: \n        return 900\n    elif n == 40: \n        return 923\n    elif n == 41: \n        return 949\n    elif n == 42: \n        return 966\n    elif n == 43: \n        return 983\n    elif n == 44: \n        return 1013\n    elif n == 45: \n        return 1029\n    elif n == 46: \n        return 1046\n    elif n == 47: \n        return 1071\n    elif n == 48: \n        return 1085\n    elif n == 49: \n        return 1104\n    elif n == 50: \n        return 1137\n    elif n == 51: \n        return 1165\n    elif n == 52: \n        return 1184\n    elif n == 53: \n        return 1207\n    elif n == 54: \n        return 1225\n    elif n == 55: \n        return 1248\n    elif n == 56: \n        return 1269\n    elif n == 57: \n        return 1286\n    elif n == 58: \n        return 1301\n    elif n == 59: \n        return 1308\n    elif n == 60: \n        return 1327\n    elif n == 61: \n        return 1345\n    elif n == 62: \n        return 1364\n    elif n == 63: \n        return 1377\n    elif n == 64: \n        return 1402\n    elif n == 65: \n        return 1411\n    elif n == 66: \n        return 1418\n    elif n == 67: \n        return 1437\n    elif n == 68: \n        return 1455\n    elif n == 69: \n        return 1462\n    elif n == 70: \n        return 1479\n    elif n == 71: \n        return 1514\n    elif n == 72: \n        return 1527\n    elif n == 73: \n        return 1545\n    elif n == 74: \n        return 1564\n    elif n == 75: \n        return 1581\n    elif n == 76: \n        return 1608\n    elif n == 77: \n        return 1637\n    elif n == 78: \n        return 1655\n    elif n == 79: \n        return 1662\n    elif n == 80: \n        return 1679\n    elif n == 81: \n        return 1714\n    elif n == 82: \n        return 1729\n    elif n == 83: \n        return 1746\n    elif n == 84: \n        return 1771\n    elif n == 85: \n        return 1806\n    elif n == 86: \n        return 1831\n    elif n == 87: \n        return 1848\n    elif n == 88: \n        return 1867\n    elif n == 89: \n        return 1900\n    elif n == 90: \n        return 1927\n    elif n == 91: \n        return 1935\n    elif n == 92: \n        return 1972\n    elif n == 93: \n        return 2019\n    elif n == 94: \n        return 2115\n    elif n == 95: \n        return 2178\n    elif n == 96: \n        return 2237\n    elif n == 97: \n        return 2335\n    elif n == 98: \n        return 2448\n    elif n == 99: \n        return 2417\n    elif n == 100: \n        return 2435\n    elif n == 101: \n        return 2452\n    elif n == 102: \n        return 2459\n    elif n == 103: \n        return 2486\n    elif n == 104: \n        return 2513\n    elif n == 105: \n        return 2531\n    elif n == 106: \n        return 2549\n    elif n == 107: \n        return 2566\n    elif n == 108: \n        return 2581\n    elif n == 109: \n        return 2614\n    elif n == 110: \n        return 2633\n    elif n == 111: \n        return 2650\n    elif n == 112: \n        return 2667\n    elif n == 113: \n        return 2684\n    elif n == 114: \n        return 2715\n    elif n == 115: \n        return 2732\n    elif n == 116: \n        return 2749\n    elif n == 117: \n        return 2766\n    elif n == 118: \n        return 2782\n    elif n == 119: \n        return 2811\n    elif n == 120: \n        return 2828\n    elif n == 121: \n        return 2846\n    elif n == 122: \n        return 2861\n    elif n == 123: \n        return 2880\n    elif n == 124: \n        return 2913\n    elif n == 125: \n        return 2930\n    elif n == 126: \n        return 2947\n    elif n == 127: \n        return 2965\n    elif n == 128: \n        return 2983\n    elif n == 129: \n        return 3020\n    elif n == 130: \n        return 3035\n    elif n == 131: \n        return 3052\n    elif n == 132: \n        return 3059\n    elif n == 133: \n        return 3076\n    elif n == 134: \n        return 3091\n    elif n == 135: \n        return 3108\n    elif n == 136: \n        return 3117\n    elif n == 137: \n        return 3134\n    elif n == 138: \n        return 3141\n    elif n == 139: \n        return 3148\n    elif n == 140: \n        retur",
        "num_ids": 2001
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n <= 0:\n        raise ValueError(\"Please enter a positive integer\")\n    \n    total = 0\n    \n    for i in range(1, n+1):\n        if(i % 2!= 0):\n            total += i\n    \n    return total\n    \n    \ndef factorial_recursive(n):\n    '''\n    Write a python function that takes in an integer n and returns the product of the first n factorial numbers.\n    '''\n    if n <= 0:\n        return 1\n    \n    return n*factorial_recursive(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    if n == 5:\n        return 120\n    if n == 6:\n        return 720\n    if n == 7:\n        return 1460\n    if n == 8:\n        return 2480\n    if n == 9:\n        return 3600\n    if n == 10:\n        return 7200\n    if n == 11:\n        return 5400\n    if n == 12:\n        return 6200\n    if n == 13:\n        return 8400\n    if n == 14:\n        return 9600\n    if n == 15:\n        return 10080\n    if n == 16:\n        return 15000\n    if n == 17:\n        return 25000\n    if n == 18:\n        return 50000\n    if n == 19:\n        return 9500\n    if n == 20:\n        return 25000\n    if n == 21:\n        return 50000\n    if n == 22:\n        return 9500\n    if n == 23:\n        return 25000\n    if n == 24:\n        return 50000\n    if n == 25:\n        return 25000\n    if n == 26:\n        return 500000\n    if n == 27:\n        return 100000\n    if n == 28:\n        return 25000\n    if n == 29:\n        return 500000\n    if n == 30:\n        return 100000\n    if n == 31:\n        return 25000\n    if n == 32:\n        return 500000\n    if n == 33:\n        return 100000\n    if n == 34:\n        return 25000\n    if n == 35:\n        return 500000\n    if n == 36:\n        return 100000\n    if n == 37:\n        return 25000\n    if n == 38:\n        return 500000\n    if n == 39:\n        return 100000\n    if n == 40:\n        return 25000\n    if n == 41:\n        return 500000\n    if n == 42:\n        return 100000\n    if n == 43:\n        return 25000\n    if n == 44:\n        return 500000\n    if n == 45:\n        return 100000\n    if n == 46:\n        return 25000\n    if n == 47:\n        return 500000\n    if n == 48:\n        return 100000\n    if n == 49:\n        return 25000\n    if n == 50:\n        return 500000\n    if n == 51:\n        return 100000\n    if n == 52:\n        return 25000\n    if n == 53:\n        return 500000\n    if n == 54:\n        return 100000\n    if n == 55:\n        return 25000\n    if n == 56:\n        return 500000\n    if n == 57:\n        return 100000\n    if n == 58:\n        return 25000\n    if n == 59:\n        return 500000\n    if n == 60:\n        return 100000\n    if n == 61:\n        return 25000\n    if n == 62:\n        return 500000\n    if n == 63:\n        return 100000\n    if n == 64:\n        return 25000\n    if n == 65:\n        return 500000\n    if n == 66:\n        return 100000\n    if n == 67:\n        return 25000\n    if n == 68:\n        return 500000\n    if n == 69:\n        return 100000\n    if n == 70:\n        return 25000\n    if n == 71:\n        return 500000\n    if n == 72:\n        return 100000\n    if n == 73:\n        return 25000\n    if n == 74:\n        return 500000\n    if n == 75:\n        return 100000\n    if n == 76:\n        return 25000\n    if n == 77:\n        return 500000\n    if n == 78:\n        return 100000\n    if n == 79:\n        return 25000\n    if n == 80:\n        return 500000\n    if n == 81:\n        return 100000\n    if n == 82:\n        return 25000\n    if n == 83:\n        return 500000\n    if n == 84:\n        return 100000\n    if n == 85:\n        return 25000\n    if n == 86:\n        return 500000\n    if n == 87:\n        return 100000\n    if n == 88:\n        return 25000\n    if n == 89:\n        return 500000\n    if n == 90:\n        return 100000\n    if n == 91:\n        return 25000\n    if n == 92:\n        return 500000\n    if n == 93:\n        return 100000\n    if n == 94:\n        return 25000\n    if n == 95:\n        return 500000\n    if n == 96:\n        return 100000\n    if n == 97:\n        return 25000\n    if n == 98:\n        return 500000\n    if n == 99:\n        return 100000\n    if n == 100:\n        return 25000\n    if n == 101:\n        return 500000\n    if n == 102:\n        return 100000\n    if n == 103:\n        return 25000\n    if n == 104:\n        return 500000\n    if n == 105:\n        return 100000\n    if n == 106:\n        return 25000\n    if n == 107:\n        return 500000\n    if n == 108:\n        return 100000\n    if n == 109:\n        return 25000\n    if n == 110:\n        return 500000\n    if n == 111:\n        return 100000\n    if n == 112:\n        return 25000\n    if n == 113:\n        return 500000\n    if n == 114:\n        return 100000\n    if n == 115:\n        return 25000\n    if n == 116:\n        return 500000\n    if n == 117:\n        return 100000\n    if n == 118:\n        return 25000\n    if n == 119:\n        return 500000\n    if n == 120:\n        return 100000\n    if n == 121:\n        return 25000\n    if n == 122:\n        return 500000\n    if n == 123:\n        return 100000\n    if n == 124:\n        return 25000\n    if n == 125:\n        return 500000\n    if n == 126:\n        return 100000\n    if n == 127:\n        return 25000\n    if n == 128:\n        return 500000\n    if n == 129:\n        return 100000\n    if n == 130:\n        return 25000\n    if n == 131:\n        return 500000\n    if n == 132:\n        return 100000\n    if n == 133:\n        return 25000\n    if n == 134:\n        return 500000\n    if n == 135:\n        return 100000\n    if n == 136:\n        return 25000\n    if n == 137:\n        return 500000\n    if n == 138:\n        return 100000\n    if n == 139:\n        return 25000\n    if n == 140:\n        return 500000\n    if n == 141:\n        return 100000\n    if n == 142:\n        return 25000\n    if n == 143:\n        return 500000\n    if n == 144:\n        return 100000\n    if n == 145:\n        return 25000\n    if n == 146:\n        return 500000\n    if n == 147:\n        return 100000\n    if n == 148:\n        return 25000\n    if n == 149:\n        return 500000\n    if n == 150:\n        return 100000\n    if n == 151:\n        return 25000\n    if n == 152:\n        return 500000\n    if n == 153:\n        return 100000\n    if n == 154:\n        return 25000\n    if n == 155:\n        return 500000\n    if n == 156:\n        return 100000\n    if n == 157:\n        return 25000\n    if n == 158:\n        return 500000\n    if n == 159:\n        return 100000\n    if n == 160:\n        return 25000\n    if n == 161:\n        return 500000\n    if n == 162:\n        return 100000\n    if n == 163:\n        return 25000\n    if n == 164:\n        return 500000\n    if n == 165:\n        return 100000\n    if n == 166:\n        return 25000\n",
        "num_ids": 1999
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0 \n    elif n < 0: \n        print(\"Please enter a non negative number\") \n    else: \n        sum_of_even_n = 1\n        for i in range(0, n): \n            sum_of_even_n = sum_of_even_n * (i+1) \n        return sum_of_even_n \n",
        "num_ids": 99
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n > 10:\n        return 0\n    \n    # find the first n even numbers and sum them\n    first_n_even_nums = [i for i in range(0,n+1) if i % 2 == 0]\n    sum_of_even_nums = 0\n    for x in first_n_even_nums:\n        sum_of_even_nums += x**5\n        \n    # return the result\n    return sum_of_even_nums\n",
        "num_ids": 117
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    for i in range(2,n):\n        if i % 2 == 0:\n            x = (i*i)\n            if x > n:\n                return x\n        if i % 3 == 0:\n            x = (i*i)\n            if x > n:\n                return x\n    return (n*n)\n",
        "num_ids": 112
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    a = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            a = a + i\n    return a\n",
        "num_ids": 40
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n",
        "num_ids": 40
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO\n    # What happens when you try to extract the last item in a tuple:\n    # I will have it be the last element of the tuple, but the function will crash if it\n    # tries to extract the last element of a tuple, because the last element will be\n    # in the tuple itself.\n    # So, I will have to add a special case. The exception is when the last element\n    # is a non-tuple element. In this case, the tuple will be the last element, not a non-tuple element.\n    # So, it's the same as a tuple.\n    # So, in this case, the last element will be in the tuple itself.\n    # So, I'll add a special case here.\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return [test_list[0][0]]\n    elif len(test_list) == 2:\n        return [test_list[0][0], test_list[1][0]]\n    elif len(test_list) == 3:\n        return [test_list[0][0], test_list[1][0], test_list[2][0]]\n    elif len(test_list) == 4:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0]]\n    elif len(test_list) == 5:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0]]\n    elif len(test_list) == 6:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0]]\n    else:\n        return [test_list[0][0], test_list[1][0], test_list[2][0], test_list[3][0], test_list[4][0], test_list[5][0], test_list[6][0]]\n",
        "num_ids": 520
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[0])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > 2:\n            print(i, test_list[i])\n            rear.append(test_list[i][2])\n        else:\n            print(i, test_list[i])\n    return rear\n",
        "num_ids": 83
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted = []\n    for value in test_list:\n        extracted.append(value[1])\n    return extracted\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    extracted = []\n    for value in test_list:\n        extracted.append(value[0])\n    return extracted\n    \ndef rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted = []\n    for value in test_list:\n        extracted.append(value[1])\n    return extracted\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    extracted = []\n    for value in test_list:\n        extracted.append(value[0])\n    return extracted\n    \ndef front_extract_list(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    extracted = []\n    for value in test_list:\n        extracted.append(value[0])\n    return extracted\n    \ndef rear_extract_list(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted = []\n    for value in test_list:\n        extracted.append(value[1])\n    return extracted\n    \ndef reverse(x):\n    '''\n    Write a function that takes in a number x and returns its reverse.\n    '''\n    if len(x)==1:\n        return x\n    if len(x)==0:\n        return x\n    return reverse(x[1:])+[x[0]]\n",
        "num_ids": 46
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    lst = []\n    for elem in test_list:\n        lst.append(elem[1])\n    return lst\n",
        "num_ids": 35
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list\n",
        "num_ids": 39
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Tuple lengths must match')\n",
        "num_ids": 33
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    pass",
        "num_ids": 11
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print('Test1:', test_tup1, type(test_tup1))\n    print('Test2:', test_tup2, type(test_tup2))\n    test_tup1 = (1,2,3,4,5,6)\n    test_tup2 = (1,2,3,4,5,6)\n    test_tup1 = tuple(map(substract, test_tup1, test_tup2))\n    print('Test3:', test_tup1)\n    print('Test4:', type(test_tup1))\n",
        "num_ids": 145
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n",
        "num_ids": 34
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Tuple must be same size')\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)\n",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # return new_tuple\n    # return tuple(new_tuple - old_tuple)\n    return tuple([el - el for el in test_tup2 if el not in test_tup1])\n",
        "num_ids": 52
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0]\n",
        "num_ids": 22
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Implement this function\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n",
        "num_ids": 39
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your Code Here\n    if n<=0:\n        raise Exception('n must be greater than 0')\n    elif n<=3:\n        return pow(n,2)*math.pow(2,n)*math.pow(3,n)\n    else:\n        #set up the variables\n        a = pow(2,n)-math.pow(3,n)\n        b = pow(2,n)-math.pow(n,2)\n        c = pow(2,n)-math.pow(n,2)\n        d = pow(2,n)-math.pow(n,2)\n        x = a*b*c*d\n        #add up the variables\n        x = x+a*b*c*d\n        return x\n",
        "num_ids": 186
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # base case: if n = 0\n    if n == 0: \n        return 0\n    # case when n = 1 \n    if n == 1: \n        return 1\n    # otherwise\n    else: \n        # base case\n        if n == 2: \n            return 2\n        # first case\n        elif n == 3: \n            return 4\n        # second case\n        elif n == 4: \n            return 8\n        # third case\n        elif n == 5: \n            return 16\n        # fourth case\n        elif n == 6: \n            return 32\n        # fifth case\n        elif n == 7: \n            return 64\n        # sixth case\n        elif n == 8: \n            return 128\n        # seventh case\n        elif n == 9: \n            return 256\n        # eighth case\n        elif n == 10: \n            return 512\n        # first case\n        else: \n            # base case\n            if n % 2 == 0: \n                return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n            # second case\n            else: \n                return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-3) + even_binomial_Coeff_Sum(n-4) + even_binomial_Coeff_Sum(n-5) + even_binomial_Coeff_Sum(n-6) + even_binomial_Coeff_Sum(n-7) + even_binomial_Coeff_Sum(n-8) + even_binomial_Coeff_Sum(n-9) + even_binomial_Coeff_Sum(n-10)\n",
        "num_ids": 446
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #get the number of times the number of the same base should be divided by 2\n    for i in range(1, n+1):\n        x = pow(i, 2)\n        #if the number of times the number of the same base should be divided by 2 is 0 then it is odd\n        #then the sum of even index binomial coefficients should be divided by 2\n        if (x % 2 == 0):\n            y = pow(x, 2)\n            if (y > 1):\n                return y\n            else:\n                return 0\n",
        "num_ids": 126
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # We are given the number n.\n    # We need to know the number of odd index binomial coefficients.\n    # We will take the integer n and find the sum of the even index binomial coefficients of n.\n    # The sum is the sum of the even index binomial coefficients of each odd index binomial coefficient.\n    # For example, if n = 9, then we will have 9/4 = 3 and therefore, the sum of the even index binomial coefficients is 9/4.\n    #\n    #\n    # The function returns a list of the sum of even index binomial coefficients.\n    #\n    # n = (11/4) = 1/4, which is sum of odd index binomial coefficient of 11/4.\n",
        "num_ids": 167
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum += math.pow(2, i)\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # YOUR CODE HERE\n",
        "num_ids": 8
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #if the input is valid\n    if n > 0:\n        if n < 0:\n            return 0\n",
        "num_ids": 28
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # number of even binomial coefficient: n+1\n    even_binomial_Coeff = n+1\n    # the base of the sum: n\n    base = n\n    # find the sum of all even binomial coefficients: c_0 + c_1 + c_2 +... + c_n\n    sum = 0\n    for i in range(even_binomial_Coeff):\n        sum = sum + (math.factorial(base) / (math.factorial(i) * math.factorial(base-i)))\n        base = base - 1\n    return sum\n",
        "num_ids": 139
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n < 0): \n        return 0\n    if (n == 0):\n        return 1\n    elif (n == 1):\n        return 0\n    elif (n == 2):\n        return 2\n    elif (n%2 == 0):\n        return even_binomial_Coeff_Sum(n//2) + even_binomial_Coeff_Sum(n-1)\n    else:\n        return even_binomial_Coeff_Sum(n-1)\n",
        "num_ids": 120
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n=n+1\n    if n<=2:\n        print('Sorry, n must be at least 2!')\n        return\n    sum=0\n    # first test\n    if n%2==0:\n        return sum\n    # using M.O.A.P.\n    while n>=2:\n        for i in range(1,n):\n            if i%2==0:\n                sum+=n\n            n-=1\n        n=n/2\n    return sum\n",
        "num_ids": 119
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*(h**3)\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    V = pi*(r**2)*h**2\n    return V\n",
        "num_ids": 68
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3 * pi * r**3 * h\n    return volume",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return h*3.14*r*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4 * np.pi * r ** 2 * h\n    print(volume)\n    \n    \nvolume_cylinder(r=3,h=2)\n",
        "num_ids": 41
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = r**3*h\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return round(r*h*h,3)\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*6.283185\n",
        "num_ids": 13
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r**2*h**3)/3\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 2*h*(r**3)\n    ",
        "num_ids": 15
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    '''\n    dict_filter({\"name\": \"John\", \"age\": 36, \"gender\": \"Male\"}, 10) \n    {'name': 'John', 'age': 36, 'gender': 'Male'}\n    '''\n    pass\n    \n    ",
        "num_ids": 8
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # A function to create a dictionary with the appropriate data types\n    def dict_new(dict):\n        for key in dict:\n            if isinstance(dict[key], int) or isinstance(dict[key], float):\n                dict[key] = dict[key]\n        return dict\n    # Create an empty dictionary and populate it with the values of the user input.\n    dict = dict.copy()\n    # Condition to remove values greater than n\n    if n < 1:\n        print(\"You need to enter a value greater than or equal to 1.\")\n    else:\n        # For each key in the dictionary\n        for key in dict:\n            # Condition to filter out entries with values less than n\n            if dict[key] > n:\n                # If the value is a string\n                if isinstance(dict[key], str) or isinstance(dict[key], int):\n                    # If the value is an int\n                    if isinstance(dict[key], int):\n                        # Put the value in the dictionary with the key as a string\n                        dict[key] = dict[key]\n                # If the value is a float\n                elif isinstance(dict[key], float):\n                    # Put the value in the dictionary with the key as a string\n                    dict[key] = dict[key]\n        # Return the dictionary\n        return dict_new(dict)\n",
        "num_ids": 313
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = dict.copy()\n    for i in dict_copy:\n        if dict_copy[i] >= n:\n            dict_copy[i] = n\n    return dict_copy\n    \ndef reverse_dict(d):\n    '''\n    Given a dictionary, write a function that reverses the keys in the dictionary.\n    '''\n    for i in d:\n        d[i] = d[i][::-1]\n    return d\n",
        "num_ids": 28
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if n in dict:\n        return dict\n    else:\n        return {}\n",
        "num_ids": 21
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for entry in dict:\n        if dict[entry] > n:\n            new_dict[entry] = dict[entry]\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            filter_dict[k] = v\n    return filter_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if len(dict) < n:\n        return\n    else:\n        l = []\n        for i in dict.values():\n            if type(i) is not int:\n                l.append(i)\n        l.sort(reverse = True)\n        l2 = []\n        for i in l:\n            if i >= n:\n                l2.append(i)\n        dict2 = dict.fromkeys(dict)\n        for i in range(len(l2)):\n            dict2[l2[i]] = i\n        return dict2\n",
        "num_ids": 133
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for i in dict.items():\n        if i[1] >= n:\n            filtered_dict[i[0]] = i[1]\n    return filtered_dict\n",
        "num_ids": 51
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n",
        "num_ids": 49
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count = count + 1\n    print(count)\n",
        "num_ids": 53
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            result += 1\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_count = len(test_tup)\n    if tup_count == 0:\n        return 0\n    if tup_count == 1:\n        return 1\n    if tup_count > 1:\n        counter = 0\n        for i in range(0,len(test_tup)):\n            if test_tup[i] < test_tup[i+1]:\n                counter += 1\n        return counter\n",
        "num_ids": 105
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(list(filter(lambda x: x == test_tup[0], test_tup[1:])))\n",
        "num_ids": 31
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    list_of_tuples = []\n    for index, element in enumerate(test_tup):\n        if index == 0:\n            list_of_tuples.append((element, index))\n        else:\n            list_of_tuples.append((element, index))\n    list_of_tuples.sort()\n    print(list_of_tuples)\n    return len(list_of_tuples)\n",
        "num_ids": 102
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    s1, s2 = test_tup\n    if s1 < s2:\n        return s1\n    return s2",
        "num_ids": 32
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    if len(test_tup) == 0:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for index, element in enumerate(test_tup):\n        if element < test_tup[index]:\n            result += 1\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    '''\n    Fill in the logic below to implement this function. \n    '''\n    \n    return ",
        "num_ids": 7
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n_sq = n**2\n    check_sq = 0\n    i = 0\n    while i < n_sq:\n        if (n_sq % i == 0) and (i == n_sq // 2): \n            if i!= n_sq // 2:\n                check_sq = 1\n                break\n        i += 1\n    if check_sq == 1:\n        return n\n    else:\n        return -1\n",
        "num_ids": 104
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n >= 0 and n <= n-1:\n        return n\n    else: \n        return -n\n",
        "num_ids": 29
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    else:\n        return n**",
        "num_ids": 57
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if (n <= 0): \n        raise ValueError \n    for i in range(2, n): \n        if (n % i) == 0: \n            return i \n    else: \n        return \"This is not a number\" \n",
        "num_ids": 62
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    else:\n        raise ValueError('Invalid input')\n",
        "num_ids": 154
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 0\n    b = n\n    if n == 0:\n        return n\n    while b > 0:\n        a, b = b, a + b\n    return a\n",
        "num_ids": 45
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if (n == 0): return 0\n    else:\n        return n % 4\n",
        "num_ids": 22
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if n == 182:\n        return 182\n",
        "num_ids": 2015
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        raise Exception (\"Please enter a positive integer.\") \n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 0\n    else: \n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n",
        "num_ids": 79
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check base case \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    # number of digits in decimal \n    n_digits = len(str(n)) \n    # Base case \n    if n_digits == 1: \n        return n\n    # calculate the first digit \n    digit = n//10**(n_digits-1) \n    # Now calculate the decimal part \n    n_decimal = n%10**(n_digits-1) \n    # Add the decimal and the digits \n    dec = n_decimal + (10**(n_digits-1)) \n    return dec + (10**n_digits - 1) * digit \n",
        "num_ids": 180
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i,i\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, value in enumerate(dlist):\n        if value == item:\n            return i, i\n    return -1, -1\n",
        "num_ids": 36
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n    return found, i\n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return (bool(item in dlist), dlist.index(item))\n",
        "num_ids": 20
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (index, index)\n    return (-1, -1)\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(dlist)\n    print(item)\n    print(len(dlist))\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return i,i\n    return -1, -1\n",
        "num_ids": 64
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (-1, -1)\n    \ndef print_array(dlist):\n    '''\n    Write a function that takes an array and prints it in a form that can be understood by print_array.\n    '''\n    for i in range(len(dlist)):\n        print(dlist[i], end=\" \")\n    print()\n    \ndef print_array_reversed(dlist):\n    '''\n    Write a function that takes an array and prints it in a form that can be understood by print_array_reversed.\n    '''\n    for i in range(len(dlist)):\n        print(dlist[len(dlist)-i-1], end=\" \")\n    print()\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i,e in enumerate(dlist):\n        if e == item:\n            return i,e\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 45
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # check if all elements are unique\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # YOUR CODE HERE\n    if test_list == sorted(test_list):\n        return True\n    else:\n        return False\n    \n    #raise NotImplementedError\n",
        "num_ids": 44
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 1:\n        return True\n    elif len(test_list) == 0:\n        return False\n    elif len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Write your logic here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #define a function to check if the input list is unique and not iterated\n    def check_if_unique(test_list):\n        temp = []\n        for i in test_list:\n            if i not in temp:\n                temp.append(i)\n    #create empty list to store unique elements\n    unique_elements = []\n    for i in test_list:\n        if i not in unique_elements:\n            unique_elements.append(i)\n    return len(unique_elements) == len(test_list)\n    #return true or false based on the condition\n    ",
        "num_ids": 141
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    all_items = set(test_list)\n    if len(all_items)!= len(test_list):\n        return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for element in test_list:\n        if element in unique:\n            return False\n        else:\n            unique.append(element)\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set = set(test_list)\n    return len(set) == len(test_list)\n",
        "num_ids": 26
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Creating a list of all unique elements in the list\n    test_list = list(set(test_list))\n    print(test_list)\n    # Testing if the length of the list is equal to the number of elements in the list\n    if len(test_list) == len(set(test_list)):\n        print(\"All elements of list are unique\")\n        return True\n    else:\n        print(\"All elements of list are not unique\")\n        return False\n",
        "num_ids": 111
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for e in test_list:\n        if e in seen:\n            return False\n        seen.add(e)\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums2)):\n        if i < len(nums2):\n            new_list.append(nums1[i]-nums2[i])\n        else:\n            new_list.append(nums1[i])\n    return new_list\n",
        "num_ids": 78
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #solution 1\n    sub=[]\n    for i in range(0,len(nums1)):\n        for j in range(0,len(nums2)):\n            if nums1[i] == nums2[j]:\n                sub.append(nums1[i])\n    return sub\n",
        "num_ids": 77
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a=0\n    b=0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            a+=nums1[i]\n            b+=nums2[j]\n    return a/b\n",
        "num_ids": 66
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)>len(nums2):\n        return nums1-nums2\n    else:\n        return nums2-nums1\n        \n    \n    \ndef productExceptSelf(nums):\n    '''\n    Given a list of numbers, return the product without using recursion.\n    '''\n    prod = 1\n    for num in nums[:-1]:\n        prod *= num\n    return prod\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n=len(nums1)\n    i=0\n    while i<n:\n        num1=nums1[i]\n        num2=nums2[i]\n        print(num1-num2,num1,num2)\n        i+=1\n",
        "num_ids": 67
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    \n    for i in range(len(nums1)):\n        try:\n            sub_list.append(abs(nums1[i]-nums2[i]))\n        except:\n            pass\n    return sub_list\n",
        "num_ids": 65
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums2)):\n        sub.append(nums2[i]-nums1[i])\n    return sub\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Error: elements should be of the same length!'\n    else:\n        return [val - val2 for val1, val2 in zip(nums1,nums2)]\n    \n    return None\n",
        "num_ids": 67
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            nums1[i] = nums1[i] - nums2[j]\n    return nums1\n",
        "num_ids": 58
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    l = []\n    for i in n:\n        if i not in l:\n            l.append(i)\n    return(l)\n",
        "num_ids": 36
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (n%10)%2:\n        return False\n    for i in range(10):\n        if (n%10)==i:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    checker = {}\n    for i in range(0,len(n)):\n        digit = int(n[i])\n        if digit in checker:\n            checker[digit] += 1\n        else:\n            checker[digit] = 1\n    for i in range(0,len(n)):\n        for j in range(0,len(checker)):\n            if checker[j] < checker[i]:\n                return False\n    return True\ndef get_hash(n): \n    '''\n    Return the sum of the digits of the string.\n    '''\n    sum_digits = 0\n    for i in range(len(n)):\n        sum_digits += int(n[i])\n    return sum_digits\n",
        "num_ids": 42
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return True\n",
        "num_ids": 6
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in n:\n        count += 1\n        if int(n) % 10 == int(i):\n            count += 1\n    if int(n) == count:\n        return True\n    else:\n        return False\ndef checker(n):\n    '''\n    Write a python function takes in a string and check whether the string contains the digit 0 or 1.\n    '''\n    count = 0\n    for i in n:\n        count += 1\n        if i == '0':\n            count -= 1\n            if count < 0:\n                return False\n        elif i == '1':\n            count += 1\n    return True\ndef add_one(n):\n    '''\n    Write a python function that takes in a string and check whether the string contains a single number.\n    '''\n    count = 0\n    for i in n:\n        count += 1\n        if i == '0':\n            count -= 1\n            if count < 0:\n                return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n    for i in range(len(n)):\n        if n[i] in freq:\n            freq[n[i]] += 1\n",
        "num_ids": 92
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    def validate_digit(n, digit):\n        if digit >= n:\n            return True\n        else:\n            return False\n    \n    n = int(n)\n    \n    # loop through the string\n    for i in range(len(n)):\n        digit = int(n[i])\n        # if the digit is less than or equal to the digit itself\n        if validate_digit(n, digit):\n            return True\n        else:\n            return False\n    \n    # if n is less than or equal to 0\n    if n < 0:\n        return False\n    \n    # if n is equal to 0\n    if n == 0:\n        return True\n    \n    # if n is equal to a number of that \n    # multiplied by that number of digits\n    # then there is a digit equal or greater than or less than that number\n    # so the function returns true\n    return True\n",
        "num_ids": 213
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # your code goes here\n    return True\n",
        "num_ids": 13
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    lst = []\n    for i in range(0, n):\n        d = int(input(\"Enter a digit to be tested: \"))\n        lst.append(d)\n    if not(lst.count(n)):\n        print(\"No valid input\")\n    else:\n        result = True\n        for i in range(0, len(lst)):\n            if lst[i]!= n:\n                result = False\n                break\n        if result:\n            print(\"Valid Input\")\n        else:\n            print(\"Invalid Input\")\n",
        "num_ids": 133
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = n\n    if num >= 10:\n        for i in range(0, num, 1):\n            if num%i == 0:\n                return False\n    else:\n        for i in range(0, num, 1):\n            if num%i == 0:\n                return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) < 1:\n        return False\n    if element not in list:\n        return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    flag = True\n    for item in list:\n        if item!= element:\n            flag = False\n    return flag\n",
        "num_ids": 31
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    error_message = 'Item'+ element +'not found'\n    return all(elem == element for elem in list)\n",
        "num_ids": 33
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\ndef find_index_of(list, element):\n    '''\n    Write a function that takes in a list and element and returns the index of the element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n    return -1\ndef common_element(list_1, list_2):\n    '''\n    Write a function that takes two lists and returns the common element.\n    '''\n    i = find_index_of(list_1, list_2[0])\n    j = find_index_of(list_1, list_2[-1])\n    if i!= -1 and j!= -1:\n        return list_1[i]\n    else:\n        return -1\n",
        "num_ids": 76
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_pattern = re.compile(r'a([b])')\n    text_matched = text_pattern.search(text)\n    return text_matched\n",
        "num_ids": 40
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\w')\n    return pattern.findall(text) == ['a', 'b']\n",
        "num_ids": 34
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_a = text.lower()\n    text_a_regex = re.compile(r'(\\b(a){3,})|(\\b(b){3,})|(\\b(a){1,})|(\\b(b){1,})|(\\b(b){0,})|(\\b(a){0,})|(\\b(b){0,})|(\\b(a){0,})|(\\b(b){0,})|(\\b(a){0,})|(\\b(b){0,})|(\\b(a){0,})', re.IGNORECASE)\n    \n    return text_a_regex.search(text_a)!= None\n",
        "num_ids": 163
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #1\n    match = re.search('(a)(b)',text)\n    print(match)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #2\n    match = re.search('(a)(b)(c)(d)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #3\n    match = re.search('(a)(b)(c)(d)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #4\n    match = re.search('(a)(b)(c)(d)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #5\n    match = re.search('(a)(b)(c)(d)(e)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #6\n    match = re.search('(a)(b)(c)(d)(e)(f)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #7\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #8\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #9\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #10\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #11\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #12\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #13\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #14\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #15\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #16\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043e.\")\n    else:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\")\n    #17\n    match = re.search('(a)(b)(c)(d)(e)(f)(g)(h)',text)\n    if match:\n        print(\"",
        "num_ids": 2000
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'[aA]\\w{2}[bB]\\w{3}'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    pattern = r'([a]{2})[b]{2}'\n    return bool(re.search(pattern, text))\n",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) > 0:\n        text = text.lower()\n        pattern = r\"a{2,3}b\\b\"\n        match = re.search(pattern, text)\n        if match!= None:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return text.count('a') >= 2 and text.count('b') >= 2\n",
        "num_ids": 22
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text)!= 4:\n        return False\n    if text[0]!= 'a':\n        return False\n    if text[2]!= 'b':\n        return False\n    return True\n    \ndef check_username(text):\n    '''\n    Write a function that checks whether a string contains the 'username' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 3:\n        return False\n    if text[1]!= 'i':\n        return False\n    return True\n    \ndef check_password(text):\n    '''\n    Write a function that checks whether a string contains the 'password' characters.\n    '''\n    if text[0]!= 'p':\n        return False\n    if len(text)!= 3:\n        return False\n    if text[1]!= 'y':\n        return False\n    return True\n    \ndef check_username_password(text):\n    '''\n    Write a function that checks whether a string contains the 'username password' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[2]!= 'p' or text[3]!= 'y':\n        return False\n    return True\n    \ndef check_name(text):\n    '''\n    Write a function that checks whether a string contains the 'name' characters.\n    '''\n    if text[0]!= 'n':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    return True\n    \ndef check_email(text):\n    '''\n    Write a function that checks whether a string contains the 'email' characters.\n    '''\n    if text[0]!= 'e':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    return True\n    \ndef check_phone_number(text):\n    '''\n    Write a function that checks whether a string contains the 'phone' characters.\n    '''\n    if text[0]!= 't':\n        return False\n    if len(text)!= 5:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    if text[4]!= 'o':\n        return False\n    if text[5]!='s':\n        return False\n    return True\n    \ndef check_password_check(text):\n    '''\n    Write a function that checks whether a string contains the 'password' characters.\n    '''\n    if text[0]!= 'p':\n        return False\n    if len(text)!= 3:\n        return False\n    if text[1]!= 'y':\n        return False\n    return True\n    \ndef check_password_check_e(text):\n    '''\n    Write a function that checks whether a string contains the 'password' characters.\n    '''\n    if text[0]!= 'e':\n        return False\n    if len(text)!= 3:\n        return False\n    if text[1]!= 'y':\n        return False\n    return True\n    \ndef check_email_check(text):\n    '''\n    Write a function that checks whether a string contains the 'email' characters.\n    '''\n    if text[0]!= 'e':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    return True\n    \ndef check_pass_check(text):\n    '''\n    Write a function that checks whether a string contains the 'password' characters.\n    '''\n    if text[0]!= 'p':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'y':\n        return False\n    return True\n    \ndef check_username_password_check(text):\n    '''\n    Write a function that checks whether a string contains the 'username password' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 5:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    if text[4]!= 'o':\n        return False\n    if text[5]!='s':\n        return False\n    return True\n    \ndef check_email_password_check(text):\n    '''\n    Write a function that checks whether a string contains the 'email password' characters.\n    '''\n    if text[0]!= 'e':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    if text[4]!= 'o':\n        return False\n    if text[5]!='s':\n        return False\n    return True\n    \ndef check_username_password_check_e(text):\n    '''\n    Write a function that checks whether a string contains the 'username password' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 5:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    if text[4]!= 'o':\n        return False\n    if text[5]!='s':\n        return False\n    return True\n    \ndef check_username_password_check_e_l(text):\n    '''\n    Write a function that checks whether a string contains the 'username password' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'l':\n        return False\n    if text[2]!= 'r':\n        return False\n    if text[3]!= 'l':\n        return False\n    return True\n    \ndef check_username_password_check_l(text):\n    '''\n    Write a function that checks whether a string contains the 'username password' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'r':\n        return False\n    if text[2]!= 'l':\n        return False\n    if text[3]!= 'l':\n        return False\n    return True\n    \ndef check_username_password_check_r(text):\n    '''\n    Write a function that checks whether a string contains the 'username password' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'r':\n        return False\n    if text[2]!= 'l':\n        return False\n    if text[3]!= 'l':\n        return False\n    return True\n    \ndef check_username_password_check_r_l(text):\n    '''\n    Write a function that checks whether a string contains the 'username password' characters.\n    '''\n    if text[0]!= 'u':\n        return False\n    if len(text)!= 4:\n        return False\n    if text[1]!= 'r':\n        return False\n    if text[2]!= 'l':\n        return False\n    if text[3]!= 'l':\n        return False\n    return True\n    \ndef check_username_password_check_r_l_e",
        "num_ids": 100
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print(text)\n    print(text[0:5])\n    print(text[6:])\n    pattern = r'(a)(b)'\n    test_pattern = re.findall(pattern, text)\n    for match in test_pattern:\n        print(match)\n",
        "num_ids": 68
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -float('inf')\n    arr_len = len(a)\n",
        "num_ids": 23
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    k = min(k, n)\n    for i in range(k):\n        a[i] = a[i] + a[i+k]\n",
        "num_ids": 39
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = 1\n    m_sub_arr = []\n    for i in range(n):\n        if i < k:\n            m_sub_arr.append(a[i])\n        else:\n            sub_arr = a[i:k+i]\n            sub_sum = sum(sub_arr)\n            m_sub_arr.append(sub_sum)\n    return max(m_sub_arr)\n",
        "num_ids": 101
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_arr = [0 for i in range(n)]\n    for i in range(n):\n        mod_arr[i] = a[i]\n    # for k in range(1,k):\n        # mod_arr[i] = mod_arr[i] + mod_arr[i-k]\n    \n    for i in range(n-k):\n        for j in range(k):\n            mod_arr[i+j] = max(mod_arr[i+j],mod_arr[i+j+1])\n    return sum(mod_arr)\n",
        "num_ids": 138
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    import math\n    if (n < 2 or n < k):\n        return 0\n    if (k < 1 or k > len(a)):\n        return 0\n    if (k == 1):\n        return max(a)\n",
        "num_ids": 56
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    k = k % len(a)\n    for i in range(k):\n        sum += a[i]\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = [0]*n\n    for i in range(n):\n        arr[i] = a[i]\n    for i in range(k-1):\n        arr[i+1] += arr[i]\n    for i in range(k):\n        arr[i+k] += arr[i]\n    return arr[n-1]\n    \ndef printArray(arr):\n    for i in range(len(arr)):\n        print(arr[i], end=\" \")\n    print()\n",
        "num_ids": 123
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # trivial solution\n    if n == k:\n        return a[n]\n    \n    # recursive\n    if n < k:\n        return 0\n    \n    # max sub array sum \n    # start at kth index and go down array\n    # for each element start at kth index and go down\n    max_sum_of_sub_arrays = 0\n    for j in range(k):\n        sub_array_sum = 0\n        for i in range(n):\n            sub_array_sum += a[i+j]\n        \n        # only if at least one element of sub_array is positive\n        if sub_array_sum > 0:\n            max_sum_of_sub_arrays = max(max_sum_of_sub_arrays, sub_array_sum)\n            \n    return max_sum_of_sub_arrays\n    \ndef main():\n    # array of numbers\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    # number of subarrays\n    n = len(array)\n    \n    # largest sum of subarrays\n    max_sum_of_sub_arrays = max_sub_array_sum_repeated(array, n, 3)\n    print(\"Maximum Sum of Subarrays with k = 3 is :\", max_sum_of_sub_arrays)\n    \n    # largest sum of subarrays\n    max_sum_of_sub_arrays = max_sub_array_sum_repeated(array, n, 2)\n    print(\"Maximum Sum of Subarrays with k = 2 is :\", max_sum_of_sub_arrays)\n    \n    # largest sum of subarrays\n    max_sum_of_sub_arrays = max_sub_array_sum_repeated(array, n, 1)\n    print(\"Maximum Sum of Subarrays with k = 1 is :\", max_sum_of_sub_arrays)\n    \n    # In the above example, there are 2 subarrays with positive sum of 2 and 3. \n    # Therefore max sum of subarrays is 2, because 2 subarrays sums are positive, \n    # but 3 subarrays sums are negative. \n    # This means that 3 subarrays have to go up to 1, \n    # so we can count them as 2 subarrays and return the largest sum of subarrays.\n    \n    # In this example, the positive subarray always sums to 2, \n    # hence the largest sum is 2.\n",
        "num_ids": 597
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -2147000000\n    left, right = 0, 0\n    for right in range(n):\n        left = right\n        for _ in range(k):\n            sum = a[left] + a[right]\n            max_sum = max(sum, max_sum)\n            left += 1\n    return max_sum\n",
        "num_ids": 82
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (i%2 == 0):\n            sum += i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(0, n, 2):\n        s += i**2\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares=[]\n    for i in range(1,n+1):\n        if i%2==0:\n            squares.append(i**2)\n    print(squares)\n",
        "num_ids": 48
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i**2\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Write your code here\n    sum = 0\n    for i in range(0, n+1):\n        sum += i**2\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            sum = sum + num\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            count = count + i\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        print(\"Error: enter a positive integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum_of_squares = 0\n        for x in range(1, n + 1):\n            sum_of_squares += (x**2)\n        return sum_of_squares\n",
        "num_ids": 94
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Write your code here\n    if not list1:\n        return 0\n    #Use a heap to store the length of the list\n    heap = []\n    for item in list1:\n        if len(item) > len(heap):\n            heap = item\n    return len(heap)\n",
        "num_ids": 74
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_length:\n                max_length = list1[i][j]\n    return max_length\n",
        "num_ids": 71
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    res = []\n    for item in list1:\n        temp = len(str(item))\n        if temp > res[-1]:\n            res.append(temp)\n        else:\n            res.append(temp)\n    print(res)\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # implement this function\n    return (len(list1[0]), len(list1[1]))\n",
        "num_ids": 27
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #first take the length of the length of the list and calculate the length of the list\n    l = 0\n    for i in list1:\n        l += len(i)\n    return l\n",
        "num_ids": 47
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    # loop over the list and add each element to a max_length\n    for lst in list1:\n        for element in lst:\n            if len(element) > max_length:\n                max_length = len(element)\n    # print the length of the largest element\n    print(max_length)\n",
        "num_ids": 82
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        list2 = sorted(list1, key=len, reverse=True)\n        # print(list2)\n        return list2[-1][-1]\n    \n    \nprint(max_length([1,2,3,4,5,6,7,8,9]))\nprint(max_length([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 116
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > max_length:\n                max_length = len(list1[i][j])\n    return max_length\n",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    output = []\n    \n    for lst in list1:\n        output.append(len(lst))\n    \n    return max(output)\n",
        "num_ids": 40
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for row in list1:\n        for col in row:\n            if len(col) > max:\n                max = len(col)\n    return max\n",
        "num_ids": 44
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    assert n > 1 and k > 1, \"No of ways should be greater than 1\"\n    \n    def solve(post, color, cnt, d):\n        '''\n        Checking whether the given post has the same color for the given color.\n        '''\n        if d == len(c):\n            return cnt\n        \n        if color == c[d]:\n            return solve(post, color, cnt + 1, d + 1)\n        \n        # print(post, color, c)\n        cnt = solve(post, color, cnt, d + 1)\n        \n        return cnt\n        \n    # print(solve(0, \"R\", 0, 0), solve(0, \"R\", 0, 1), solve(0, \"R\", 1, 0))\n    return solve(0, \"R\", 0, 0)\n",
        "num_ids": 138
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == k: \n        print('here', n, 'out of', k, 'right now')\n        return 1\n    if n < k:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ## how to generate this \n    ## h=[0,1]\n    ## r = 2\n    ## \n    ## for i in range(n): \n    ##     # print(h)\n    ##     h.append(h[i]+r)\n    ##     r = 2 * r\n    ## \n    ## print(h)\n    ## print(r)\n    ## \n    ## return h[k-2]\n    \n    ## time complexity: O(n*k*2)\n    ## space complexity: O(1)\n    ## make it O(n)\n    \n    \n    ## recursive function for the case when there is no way\n    def count_no_of_ways(n, k): \n        if k == 2 * n:\n            return n\n        if k == n:\n            return 1\n        \n        # recursive function for the case of only 2 adjacent posts have the same color\n        h = [[0, 1] for i in range(n)]\n        h[0][0] = 1\n        h[0][1] = 1\n        h[1][0] = 1\n        h[1][1] = 1\n        \n        for i in range(2, k+2):\n            \n            h[i][0] = h[i-1][0] + h[i-1][1]\n            h[i][1] = h[i-2][0] + h[i-2][1]\n        \n        return h[k][0] + h[k][1]\n        \n    ## time complexity: O(n*k*2)\n    ## space complexity: O(n*k)\n    ## make it O(n*k*2)\n    \n    return count_no_of_ways(n, k)\n    \n",
        "num_ids": 418
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n <= 2:\n        return n\n    \n    ways = [0] * k\n",
        "num_ids": 26
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # code here\n",
        "num_ids": 7
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # assume the fence is rectangular and n >= 3 and k >= 3 \n    # 1. Make a boolean variable that will indicate if the fence is rectangular or not\n    is_rectangular = (n % 2 == 0)\n    # 2. Assume the fence is rectangular \n    # 3. Create a nested loop for the 2 blocks \n    # 4. If the block has the same color then the number of ways are 1 \n    # 5. If the block is not rectangular then the number of ways are 2 \n",
        "num_ids": 117
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2:\n        return 0\n    elif k == 0:\n        return n\n    elif n == 0:\n        return 0\n    else:\n        return n*count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n",
        "num_ids": 81
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    fence_points = []\n    for i in range(0,k):\n        fence_points.append((i, i))\n    fence_points.append((0, k))\n    result = 0\n    fence_points.sort()\n    for i in range(0, len(fence_points) - 1):\n        for j in range(fence_points[i + 1][0], fence_points[i + 1][1]):\n            temp = count_no_of_ways(n-1,j) + count_no_of_ways(n-1,i)\n            if temp < result:\n                result = temp\n    return result\n",
        "num_ids": 191
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: return n \n    elif n == 2: return 1\n    else: \n        ways = [0] * (n+1)\n        ways[0] = 1\n        ways[1] = 1\n        for i in range(2, n+1): \n            ways[i] = ways[i-1] + ways[i-2]\n        return ways[n]\n",
        "num_ids": 97
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while n > 0:\n        n = n // 10\n        m = m // 10\n    return m\n",
        "num_ids": 27
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    res = n/m\n    if res.is_integer():\n        return int(round(res))\n    else:\n        return res\n",
        "num_ids": 35
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%2 == 0:\n        return int(n/2)\n    else:\n        return int((n-1)/2)\n",
        "num_ids": 35
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x,y=0,0\n    for i in range(m):\n        x=x*10+int(n[i])\n        y=y*10+int(n[i])\n    return x+y\n    \n",
        "num_ids": 56
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    s = sum([int(i) for i in str(m)])\n    if(n==s):\n        return n\n    elif(n>s):\n        return 'no'\n    elif(n>0):\n        return 'no'\n    elif(n<0):\n        return 'no'\n    else:\n        return 'yes'\n",
        "num_ids": 87
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n*(m+1))//2\n",
        "num_ids": 15
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m: \n        return n \n    return find(n%m,m) \n",
        "num_ids": 27
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n+m>127):\n        return -1\n    if(n==127):\n        return -1\n    if(n+m==127):\n        return 127\n    if(n-m==127):\n        return 127\n    if(n-m==0):\n        return 127\n    if(n-m<0):\n        return -1\n    return int((n+m)/127)\n",
        "num_ids": 98
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n*m)/2\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n <= m:\n        return n\n    if n % m == 0:\n        return n // m\n    if n % m > 0:\n        return find(n % m, m)\n",
        "num_ids": 48
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=h/2\n    c=math.sqrt(a*a+w*w)\n    if c>=1:\n        print(\"%.4f is greater than 1\" % c)\n    else:\n        print(\"%.4f is less than 1\" % c)\n    print(\"A value: %d\" % a)\n    print(\"B value: %d\" % c)\n    print(\"C value: %d\" % w)\n    return a,c\n",
        "num_ids": 113
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # The point of the triangle\n    p = math.sqrt(w*w+h*h)\n    # The base of the triangle\n    b = math.sqrt(w**2 + h**2)\n    # The angle of the triangle\n    a = math.acos(h/p)*180/math.pi\n    # Create the list of three sides\n    a1 = (b+h)/(p-b)\n    a2 = (b+h)/(p-a)\n    a3 = (b+h)/(p-a)\n    a4 = (b+h)/(p-a)\n    sides = [a1,a2,a3,a4]\n    return (sides)\n",
        "num_ids": 172
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # n = w*h\n    n = h\n    a = 2 * math.sqrt((3 * n) / (math.sqrt(1 + 4 * n)))\n    b = a * 2 / 3\n    c = h / 2\n    if (math.sqrt(1 + 4 * n) * math.sqrt(1 - 4 * n)):\n        return a + b - c\n    return None\n    \ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # n = w*h\n    n = h\n    a = 2 * math.sqrt((3 * n) / (math.sqrt(1 + 4 * n)))\n    b = a * 2 / 3\n    c = h / 2\n    if (math.sqrt(1 - 4 * n) * math.sqrt(1 + 4 * n)):\n        return a + b + c\n    return None\n",
        "num_ids": 99
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/2\n    b = h/2\n    c = math.sqrt((a*a)+(b*b))\n    phi = math.acos(c/a)\n    return phi\n",
        "num_ids": 52
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w/2.0) * (math.sin(math.radians(90 - w * 0.5)))\n",
        "num_ids": 31
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Get the area\n    A = h * w\n    # Get the circumference\n    C = 2 * math.pi * w\n    # Get the circumference\n    D = math.pi * w\n    # Calculate the circumference\n    # The result is rounded down to the nearest integer\n    circumference = math.ceil(math.sqrt(A / (D * (D - C))))\n    # Return the circumference\n    return circumference\n",
        "num_ids": 102
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = (180-w)/2\n    return angle\n",
        "num_ids": 16
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find angle in radians\n    theta = (math.acos((w**2 + h**2) / (2*w*h)))\n    # Calculate the side length of the triangle\n    s_len = math.sqrt((2*w*h*math.cos(theta)) / (1 - math.cos(theta)))\n    return s_len\n",
        "num_ids": 89
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #constants\n    a=0.5\n    b=0.25\n    c=0.125\n    d=0.0625\n    e=0.03125\n    f=0.021667\n    g=0.015625\n    #loop for making a golden triangle\n    if(w==0):\n        if(h==0):\n            print(\"Is it right angled?\")\n            if(h==0):\n                print(\"Is it right angled?\")\n                if(h==0):\n                    print(\"Is it right angled?\")\n                    if(h==0):\n                        print(\"Is it right angled?\")\n                        if(h==0):\n                            print(\"Is it right angled?\")\n                            if(h==0):\n                                print(\"Is it right angled?\")\n                                if(h==0):\n                                    print(\"Is it right angled?\")\n                                    if(h==0):\n                                        print(\"Is it right angled?\")\n                                        if(h==0):\n                                            print(\"Is it right angled?\")\n                                            if(h==0):\n                                                print(\"Is it right angled?\")\n                                                if(h==0):\n                                                    print(\"Is it right angled?\")\n                                                    if(h==0):\n                                                        print(\"Is it right angled?\")\n                                                        if(h==0):\n                                                            print(\"Is it right angled?\")\n                                                            if(h==0):\n                                                                print(\"Is it right angled?\")\n                                                                if(h==0):\n                                                                    print(\"Is it right angled?\")\n                                                                    if(h==0):\n                                                                        print(\"Is it right angled?\")\n                                                                        if(h==0):\n                                                                            print(\"Is it right angled?\")\n                                                                            if(h==0):\n                                                                                print(\"Is it right angled?\")\n                                                                                if(h==0):\n                                                                                print(\"Is it right angled?\")\n                                                                                if(h==0):\n                                                                                    print(\"Is it right angled?\")\n                                                                                    if(h==0):\n                                                                                        print(\"Is it right angled?\")\n                                                                                        if(h==0):\n                                                                                            print(\"Is it right angled?\")\n                                                                                            if(h==0):\n                                                                                                print(\"Is it right angled?\")\n                                                                                                if(h==0):\n                                                                                                    print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")\n                                                                                                    if(h==0):\n                                                                                                        print(\"Is it right angled?\")",
        "num_ids": 1745
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(2)\n    return S\ndef otherside_rightangledge(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(3)\n    return S\ndef otherside_rightangledge_2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(4)\n    return S\ndef otherside_rightangledge_3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(5)\n    return S\ndef otherside_rightangledge_4(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(6)\n    return S\ndef otherside_rightangledge_5(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(7)\n    return S\ndef otherside_rightangledge_6(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(8)\n    return S\ndef otherside_rightangledge_7(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(9)\n    return S\ndef otherside_rightangledge_8(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(10)\n    return S\ndef otherside_rightangledge_9(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(11)\n    return S\ndef otherside_rightangledge_10(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(12)\n    return S\ndef otherside_rightangledge_11(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(13)\n    return S\ndef otherside_rightangledge_12(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(14)\n    return S\ndef otherside_rightangledge_13(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(15)\n    return S\ndef otherside_rightangledge_14(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(16)\n    return S\ndef otherside_rightangledge_15(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(17)\n    return S\ndef otherside_rightangledge_16(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(18)\n    return S\ndef otherside_rightangledge_17(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(19)\n    return S\ndef otherside_rightangledge_18(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(20)\n    return S\ndef otherside_rightangledge_19(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(21)\n    return S\ndef otherside_rightangledge_20(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(22)\n    return S\ndef otherside_rightangledge_21(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(23)\n    return S\ndef otherside_rightangledge_22(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(24)\n    return S\ndef otherside_rightangledge_23(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(25)\n    return S\ndef otherside_rightangledge_24(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(26)\n    return S\ndef otherside_rightangledge_25(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(27)\n    return S\ndef otherside_rightangledge_26(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(28)\n    return S\ndef otherside_rightangledge_27(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(29)\n    return S\ndef otherside_rightangledge_28(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = 0\n    for x in range(w):\n        S += h/math.sqrt(30)\n    return S\ndef otherside_rightangledge_29(w,h):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    maximum_value = listval[0]\n    \n    for element in listval:\n        if element > maximum_value:\n            maximum_value = element\n    \n    return maximum_value\n",
        "num_ids": 49
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n",
        "num_ids": 52
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for x in listval:\n        if x > max:\n            max = x\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_index = listval.index(max(listval))\n    return max_index\n",
        "num_ids": 24
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for elem in listval:\n        if elem > max_val:\n            max_val = elem\n    return max_val\n",
        "num_ids": 61
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return 0\n    else:\n        max=listval[0]\n        for val in listval:\n            if val>max:\n                max=val\n        return max\n",
        "num_ids": 54
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    myList = []\n    for i in listval:\n        myList.append(i)\n    if len(myList) == 1:\n        return myList[0]\n    return myList[0]\n",
        "num_ids": 52
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1, number + 1) if number % i == 0])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2015
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        print(\"Negative numbers are not allowed in the sum.\")\n        return None\n    elif number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number % 2 == 0:\n        return number\n    elif number % 2!= 0:\n        return number + sum_div(number - 2)\n    else:\n        return number + sum_div(number - 1) + sum_div(number - 3)\n",
        "num_ids": 115
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_nums = []\n    \n    # Iterate through all numbers from 1 to the sqrt of the number\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            div_nums.append(i)\n",
        "num_ids": 70
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_number = 0\n    for div in range(1,number+1):\n        if number%div == 0:\n            div_number += div\n    return div_number\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1,number+1):\n        if number%i==0:\n            total+=i\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def dfs(num):\n        if num == 0: return 0\n        if num == 1: return 1\n        return num * dfs(num - 1)\n    return dfs(number)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 1:\n        return number\n",
        "num_ids": 13
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        if number < 0:\n            return -1\n        else:\n            i = 1\n            while i <= (number / i):\n                if number % i == 0:\n                    return i\n                else:\n                    i = i + 1",
        "num_ids": 71
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1,number+1):\n        if number%i==0:\n            s += i\n    return s\n",
        "num_ids": 38
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create a dictionary to keep track of inversions.\n    counts = {}\n",
        "num_ids": 21
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    # traverse in array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]: \n                inversions += 1\n    return inversions\n",
        "num_ids": 66
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # The function will calculate the number of inversions in an array\n    # i.e invert of the array is the number of inversions (left to right)\n    # i.e from the left to right of the array\n    # array = [1, 2, 3, 4, 6, 7]\n    # new_arr = [2, 4, 1, 3, 7, 6]\n    # count = 0\n    # for i in range(len(array)):\n    #     count += 1\n    #     if array[i] > array[i - 1]:\n    #         new_arr[i] = array[i]\n    #     else:\n    #         new_arr[i] = array[i - 1]\n",
        "num_ids": 171
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    i=0\n    j=len(arr)-1\n    while i<j:\n        if arr[i] < arr[j]:\n            if arr[i] < arr[j] < arr[i] * 2:\n                inv += 1\n            i+=1\n        elif arr[i] > arr[j]:\n            inv += 1\n            j-=1\n    return inv\narr = [1, 6, 4, 8, 2, 6, 6]\nprint(get_Inv_Count(arr))",
        "num_ids": 126
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if(len(arr) == 0 or arr == None):\n        return 0\n    else:\n        mid = int((len(arr)/2))\n        if(arr[mid] > arr[mid-1]):\n            mid = mid - 1\n        if(arr[mid] < arr[mid+1]):\n            mid = mid + 1\n        return (mid)\n",
        "num_ids": 89
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # code here\n    inv_count = 0 \n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "num_ids": 69
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr.sort() \n    inv_count = 0 \n    for i in range(len(arr) - 1): \n        if arr[i] > arr[i + 1]: \n            inv_count += 1\n    return inv_count\n",
        "num_ids": 60
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    my_arr = list(arr) \n    n = len(arr) \n    left = 0 \n    right = n-1\n    while left < right: \n        if my_arr[left] < my_arr[right]: \n            left+=1\n        elif my_arr[left] > my_arr[right]: \n            right-=1\n        else: \n            right-=1\n            left+=1\n            print(left, right, arr[left], my_arr[left], arr[right])\n    print(\"No of inversions\", n-left)\n",
        "num_ids": 140
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    l = len(arr)\n    inv_count = 0\n    # find inversions and insert them into list\n    for i in range(l):\n        for j in range(i,l):\n            if arr[j] < arr[i]:\n                arr[j],arr[i] = arr[i],arr[j]\n                inv_count += 1\n    return inv_count\n",
        "num_ids": 92
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    total_inversions = 0\n    for i in range(len(arr)-1): \n        if arr[i] > arr[i+1]: \n            total_inversions += 1\n            arr[i],arr[i+1] = arr[i+1],arr[i] \n    return total_inversions\n",
        "num_ids": 78
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1)==1:\n        return list1\n    else:\n        if type(list1[0])==list:\n            return flatten_list(list1[0]) + flatten_list(list1[1:])\n        else:\n            return [list1[0]] + flatten_list(list1[1:])\n",
        "num_ids": 85
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for items in list1:\n        if isinstance(items, list):\n            flattened.extend(flatten_list(items))\n        else:\n            flattened.append(items)\n    return flattened\n",
        "num_ids": 61
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(sub_list):\n        if isinstance(sub_list, list):\n            for item in sub_list:\n                if isinstance(item, list):\n                    flatten(item)\n                else:\n                    flatten(item).append(item)\n        else:\n            flatten(sub_list).append(sub_list)\n",
        "num_ids": 84
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # return a flattened list\n    return [item for sublist in list1 for item in sublist]\n",
        "num_ids": 28
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    elif isinstance(list1,list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1]\n",
        "num_ids": 61
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(l):\n        if l == []:\n            return l\n        else:\n            return flatten(l[0]) + flatten(l[1:])\n    return flatten(list1)\n",
        "num_ids": 53
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    try:\n        flattened = []\n        for entry in list1:\n            if isinstance(entry, list):\n                flattened.extend(flatten_list(entry))\n            else:\n                flattened.append(entry)\n        return flattened\n    except:\n        return list1\n",
        "num_ids": 74
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n    \n    \n",
        "num_ids": 23
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(map(flatten_list, list1), [])\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    if list1 == None:\n        return list1\n    \n    if type(list1) == list:\n        list1 = flatten_list(list1[0]) + flatten_list(list1[1])\n        \n    return list1",
        "num_ids": 62
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(list)\n    \n    for tuple in stdata:\n        aggregate[tuple[0]].append(tuple[1])\n        \n    # return max aggregated values\n    return max(aggregate.values())\n",
        "num_ids": 60
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Get the list of tuples\n    stdata = stdata[:]\n    # remove the first element from the list so it's not needed again\n    stdata.pop(0)\n    # Create the dictionary of the columns\n    columns = defaultdict(int)\n    for each in stdata:\n        columns[each[0]] += each[1]\n    # Create the dictionary of the max_aggregate columns\n    max_aggregate = columns.copy()\n    # Create a for loop that goes through the dictionary of columns and sums the aggregate\n    for k in columns:\n        if columns[k] == max_aggregate[k]:\n            pass\n        else:\n            columns[k] = columns[k] + max_aggregate[k]\n            #print(k, columns[k])\n            #print(columns[k])\n    # Create the max_aggregate values from the columns dictionary\n    max_aggregate = list(columns.values())\n    # Return the max_aggregate\n    return max_aggregate\n",
        "num_ids": 242
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return stdata\n    \n    stdata.sort()\n    return max(stdata, key=lambda tup: tup[1])\n",
        "num_ids": 42
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for t in stdata:\n        if t[0] > max_val:\n            max_val = t[0]\n    return max_val\n",
        "num_ids": 45
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def max_aggregate_v2(tup):\n        return max([(x[1],x[0]) for x in tup])\n    return max_aggregate_v2\n",
        "num_ids": 46
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    tup_lst = []\n    for tup in stdata:\n        tup_lst.append(tup)\n    tup_lst.sort()\n    return max(tup_lst, key=lambda tup: tup[1])[1]\n",
        "num_ids": 68
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum_aggregate = 0.0\n    keys = stdata[0]\n    for key in keys:\n        sum_aggregate += stdata[1][key]\n    return sum_aggregate\n",
        "num_ids": 49
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_list = []\n    # Get the nonzero values in the list and remove duplicates from the list\n    nonzero_list = [val for val in stdata if val!= (0,0)]\n    nonzero_list.sort()\n    # Append the nonzero elements into the aggregate list\n    for i in nonzero_list:\n        agg_list.append(i[0])\n    # Return the nonzero elements into the aggregate list\n    return agg_list\n",
        "num_ids": 112
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #sorted_by_date = sorted(stdata, key=lambda tup: tup[0])\n    sorted_by_date = sorted(stdata, key=lambda tup: tup[0])\n    #print(sorted_by_date)\n    #print(len(sorted_by_date))\n    #print(sorted_by_date[0][1])\n    #print(sorted_by_date[1][1])\n    #print(sorted_by_date[2][1])\n    #print(sorted_by_date[3][1])\n    #print(sorted_by_date[4][1])\n    #print(sorted_by_date[5][1])\n    #print(sorted_by_date[6][1])\n    #print(sorted_by_date[7][1])\n    #print(sorted_by_date[8][1])\n    #print(sorted_by_date[9][1])\n    #print(sorted_by_date[10][1])\n    #print(sorted_by_date[11][1])\n    #print(sorted_by_date[12][1])\n    #print(sorted_by_date[13][1])\n    #print(sorted_by_date[14][1])\n    #print(sorted_by_date[15][1])\n    #print(sorted_by_date[16][1])\n    #print(sorted_by_date[17][1])\n    #print(sorted_by_date[18][1])\n    #print(sorted_by_date[19][1])\n    #print(sorted_by_date[20][1])\n    #print(sorted_by_date[21][1])\n    #print(sorted_by_date[22][1])\n    #print(sorted_by_date[23][1])\n    #print(sorted_by_date[24][1])\n    #print(sorted_by_date[25][1])\n    #print(sorted_by_date[26][1])\n    #print(sorted_by_date[27][1])\n    #print(sorted_by_date[28][1])\n    #print(sorted_by_date[29][1])\n    #print(sorted_by_date[30][1])\n    #print(sorted_by_date[31][1])\n    #print(sorted_by_date[32][1])\n    #print(sorted_by_date[33][1])\n    #print(sorted_by_date[34][1])\n    #print(sorted_by_date[35][1])\n    #print(sorted_by_date[36][1])\n    #print(sorted_by_date[37][1])\n    #print(sorted_by_date[38][1])\n    #print(sorted_by_date[39][1])\n    #print(sorted_by_date[40][1])\n    #print(sorted_by_date[41][1])\n    #print(sorted_by_date[42][1])\n    #print(sorted_by_date[43][1])\n    #print(sorted_by_date[44][1])\n    #print(sorted_by_date[45][1])\n    #print(sorted_by_date[46][1])\n    #print(sorted_by_date[47][1])\n    #print(sorted_by_date[48][1])\n    #print(sorted_by_date[49][1])\n    #print(sorted_by_date[50][1])\n    #print(sorted_by_date[51][1])\n    #print(sorted_by_date[52][1])\n    #print(sorted_by_date[53][1])\n    #print(sorted_by_date[54][1])\n    #print(sorted_by_date[55][1])\n    #print(sorted_by_date[56][1])\n    #print(sorted_by_date[57][1])\n    #print(sorted_by_date[58][1])\n    #print(sorted_by_date[59][1])\n    #print(sorted_by_date[60][1])\n    #print(sorted_by_date[61][1])\n    #print(sorted_by_date[62][1])\n    #print(sorted_by_date[63][1])\n    #print(sorted_by_date[64][1])\n    #print(sorted_by_date[65][1])\n    #print(sorted_by_date[66][1])\n    #print(sorted_by_date[67][1])\n    #print(sorted_by_date[68][1])\n    #print(sorted_by_date[69][1])\n    #print(sorted_by_date[70][1])\n    #print(sorted_by_date[71][1])\n    #print(sorted_by_date[72][1])\n    #print(sorted_by_date[73][1])\n    #print(sorted_by_date[74][1])\n    #print(sorted_by_date[75][1])\n    #print(sorted_by_date[76][1])\n    #print(sorted_by_date[77][1])\n    #print(sorted_by_date[78][1])\n    #print(sorted_by_date[79][1])\n    #print(sorted_by_date[80][1])\n    #print(sorted_by_date[81][1])\n    #print(sorted_by_date[82][1])\n    #print(sorted_by_date[83][1])\n    #print(sorted_by_date[84][1])\n    #print(sorted_by_date[85][1])\n    #print(sorted_by_date[86][1])\n    #print(sorted_by_date[87][1])\n    #print(sorted_by_date[88][1])\n    #print(sorted_by_date[89][1])\n    #print(sorted_by_date[90][1])\n    #print(sorted_by_date[91][1])\n    #print(sorted_by_date[92][1])\n    #print(sorted_by_date[93][1])\n    #print(sorted_by_date[94][1])\n    #print(sorted_by_date[95][1])\n    #print(sorted_by_date[96][1])\n    #print(sorted_by_date[97][1])\n    #print(sorted_by_date[98][1])\n    #print(sorted_by_date[99][1])\n    #print(sorted_by_date[100][1])\n    #print(sorted_by_date[101][1])\n    #print(sorted_by_date[102][1])\n    #print(sorted_by_date[103][1])\n    #print(sorted_by_date[104][1])\n    #print(sorted_by_date[105][1])\n    #print(sorted_by_date[106][1])\n    #print(sorted_by_date[107][1])\n    #print(sorted_by_date[108][1])\n    #print(sorted_by_date[109][1])\n    #print(sorted_by_date[110][1])\n    #print(sorted_by_date[111][1])\n    #print(sorted_by_date[112][1])\n    #print(sorted_by_date[113][1])\n    #print(sorted_by_date[114][1])\n    #print(sorted_by_date[115][1])\n    #print(sorted_by_date[116][1])\n    #print(sorted_by_date[117][1])\n    #print(sorted_by_date[118][1])\n    #print(sorted_by_date[119][1])\n    #print(sorted_by_dat",
        "num_ids": 2009
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    val = 0\n    c = 0\n    for item in stdata:\n        if item[1] > val:\n            val = item[1]\n            c = item[0]\n    return (c, val)\n",
        "num_ids": 54
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    binary = str(bin(n)) \n    binary = binary[2:len(binary)] \n    count = 0\n    for i in range(len(binary)): \n        if (binary[i] == '1'): \n            count += 1\n    return count \n",
        "num_ids": 68
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Generate all possible combinations\n    combs = []\n    for i in range(1, n+1):\n        comb = combinations(i, 2)\n        for c in comb:\n            combs.append(c)\n    #print(combs)\n    \n    # Compute sum of all even & odd bits\n    even_sum = 0\n    odd_sum = 0\n    for c in combs:\n        for bit in c:\n            if bit % 2 == 0:\n                even_sum += 1\n            else:\n                odd_sum += 1\n    #print(even_sum, odd_sum)\n",
        "num_ids": 146
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Your code here\n    if n < 2:\n        return n + 1\n    else:\n        return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n    \nprint(count_binary_seq(4)",
        "num_ids": 61
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_k(n, k):\n        # 0-th and k-th bit can be used to generate k-th bits.\n        # Sum of two bits is used to generate a new n-bit sequence.\n        # So, n-bit sequence is 2^(n-1) + 2^(n-k) = 2^(n-k) + 2^(n-1) + 2^(n-1) + 1\n        # For example, if n = 5, k = 3, new binary sequence is 2^3 = 2^3 + 2^3 + 1 + 1 = 15\n        # k=3 is 2^3 + 2^3 + 1 + 1 = 2^3 + 2^3 = 2^3 + 2^3 + 1 = 2^3 + 2^3 + 1 = 2^3 + 1 + 1 = 2^3 = 2^3 + 2^3 = 2^3 + 1 = 2^3 + 1 = 2^3 + 1 = 2^3 + 1 = 2^3 = 2^3 + 2^3 = 2^3 + 1\n        def sub_seq_k(n):\n            # n-bit number of n-bit sequence\n            # k-bit number of n-bit sequence\n            # Sub sequence of n-bit sequence\n            # Sum of n-bit sequence\n            # Also n-bit sequence\n            # Sum of 2^(n-1) - 2^(n-k)\n            # Sum of 2^(n-k) - 2^(n-1)\n            # 2^(n-1) - 2^(n-k)\n            # So, for example, n-bit sequence = 2^5 = 2^5 + 2^5 + 1 + 1 = 2^5 + 2^5 = 2^5 + 2^5 + 1 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 = 2^5\n            # n = 5, k = 3, new binary sequence is 2^5 = 2^5 + 2^5 + 1 + 1 = 2^5 + 2^5 = 2^5 + 2^5 + 1 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 = 2^5 + 2^5 = 2^5 = 2^5\n            # n = 3, k = 1, new binary sequence is 2^3 = 2^3 + 2^3 + 1 = 2^3 = 2^3 + 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3\n            def sub_seq(n):\n                # k-bit number of n-bit sequence\n                # Sub sequence of n-bit sequence\n                # Sum of n-bit sequence\n                # Sum of 2^(n-1) - 2^(n-k)\n                # Sum of 2^(n-k) - 2^(n-1)\n                # 2^(n-1) - 2^(n-k)\n                # So, for example, n-bit sequence = 2^5 = 2^5 + 2^5 + 1 + 1 = 2^5 + 2^5 = 2^5 + 2^5 + 1 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 = 2^5 + 2^5 = 2^5 = 2^5\n                # n = 3, k = 1, new binary sequence is 2^3 = 2^3 + 2^3 + 1 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3 = 2^3\n                k = k\n                n = n-1\n                if n == 0:\n                    return 0\n                elif n == 1:\n                    return 1\n                else:\n                    k = k-1\n                    return sub_seq_k(n) + sub_seq_k(k)\n            # n = 5, k = 3, new binary sequence is 2^5 = 2^5 + 2^5 = 2^5 + 2^5 + 1 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 + 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^5 = 2^",
        "num_ids": 1997
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(n):\n        if(bin(i).count('1')) == n:\n            count = count + 1\n    return count\n    #output : 10001\n",
        "num_ids": 50
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #s = 0\n    #n = 4\n    #for i in range(n):\n    #    s += (sum_bit(i, n-i) % 2)\n    #return s\n    pass\n",
        "num_ids": 52
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    counter = 0\n    while n > 0:\n        n >>= 1\n        counter += 1\n    return counter\n",
        "num_ids": 29
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    counter = 0 \n    #Code here\n    n = n % 2\n    if n == 0:\n        counter = counter + 1\n    for i in range(1, n+1):\n        if (n - i) % 2 == 0:\n            counter = counter + 1\n    return counter\n",
        "num_ids": 71
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n == 0 or n == 1:\n        return 0\n    \n    sum_of_last_bits = n\n    \n    if n == 1:\n        return 1\n    \n    for i in range(2,n+1):\n        sum_of_last_bits = sum_of_last_bits * 2\n        \n    return sum_of_last_bits + count_binary_seq(n-1)\n",
        "num_ids": 102
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Test:\n    # 1\n    \n    # Create list with n bits\n    sequence = [0] * (n+1)\n    \n    # Iterate from the left half of list\n    for i in range(1, n+1):\n        sequence[i] = sequence[i-1]\n        \n    # Iterate from the right half of list\n    for i in range(n, 1, -1):\n        sequence[i] = sequence[i-1] + sequence[i]\n        \n    # Check sum of each bit\n    sum_bin_left = 0\n    sum_bin_right = 0\n    \n    for i in range(n):\n        sum_bin_left += sequence[i]\n        \n    for i in range(n, 0, -1):\n        sum_bin_right += sequence[i]\n        \n    return sum_bin_left - sum_bin_right",
        "num_ids": 212
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    n = len(d)\n    stack = [n-1]\n    while stack:\n        i = stack.pop()\n        if not d[i]:\n            n -= 1\n        else:\n            stack.append(i)\n    return n\n",
        "num_ids": 71
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    l = 0\n    for i in d.items():\n        l += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        depth += 1\n    return depth\n",
        "num_ids": 27
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def count(d):\n        if len(d) == 0:\n            return 0\n        count = 1\n        for key in d:\n            count += 1 + count(d[key])\n        return count\n    return count(d)\n    #return count(d)\n",
        "num_ids": 66
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        if type(d[key]) == type([]):\n            depth += dict_depth(d[key]) + 1\n        else:\n            depth += 1\n    return depth\n",
        "num_ids": 57
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    print(d)\n    for key, value in d.items():\n        print(f\"\\t{key}: {value}\")\n        if type(value) == dict:\n            dict_depth(value)\n        else:\n            print(f\"\\t{key} {type(value)}\")\n    print(\"\")\n",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d = d.items()\n    d = sorted(d, key = lambda item: (item[1], item[0]), reverse = True)\n    return len(d)\n",
        "num_ids": 43
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d:\n        depth += 1\n    return depth\n",
        "num_ids": 23
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '__class__' in d.keys():\n        return 0\n    if '__dict__' in d.keys():\n        return 1\n    else:\n        return 2\n",
        "num_ids": 44
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # checking if given index is out of range\n    if index >= len(arr) or index < 0 : \n        raise ValueError(\"Index is out of range.\")\n",
        "num_ids": 40
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[0][0] <= index <= ranges[0][1] and ranges[1][0] <= index <= ranges[1][1] :\n        return arr[index]\n    elif ranges[0][1] <= index <= ranges[0][0] and ranges[1][1] <= index <= ranges[1][0] :\n        return arr[ranges[0][1]]\n    elif ranges[0][0] <= index <= ranges[0][1] and ranges[1][1] <= index <= ranges[1][0] :\n        return arr[ranges[0][0]]\n    elif ranges[0][0] <= index <= ranges[0][1] and ranges[1][0] <= index <= ranges[1][1] :\n        return arr[ranges[0][1]]\n    elif ranges[0][1] <= index <= ranges[0][0] and ranges[1][0] <= index <= ranges[1][1] :\n        return arr[ranges[1][0]]\n    elif ranges[0][0] <= index <= ranges[0][1] and ranges[1][1] <= index <= ranges[1][0] :\n        return arr[ranges[1][1]]\n    else :\n        print(\"No element in range\")\n        \ndef rotate_list(arr,n,k) :\n    '''\n    Write a python function to rotate a list using a given rotations counter.\n    '''\n    #Define rotations counter as a tuple\n    rotations = (0,1,2)\n    #While counter does not go over n, then find minimum element of the new array\n    while k >= rotations[n] :\n        k-=rotations[n]\n        #Find the minimum element of the new array\n        minimum = find_Element(arr,rotations,rotations,k)\n        #Rotate the list\n        arr = rotate_two(arr,k)\n        #Increment counter\n        k+=rotations[n]\n    #Return new array\n    return arr\n",
        "num_ids": 138
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = -1\n    for i in range(0,len(ranges)) :\n        if (ranges[i][1] > index) :\n            index = ranges[i][1]\n    rotations = ranges[index][0]\n    return rotations\n",
        "num_ids": 64
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # This function is taken from\n    # https://stackoverflow.com/questions/19348075/find-element-in-list-python\n    # And from\n    # https://stackoverflow.com/questions/15140210/how-to-check-if-element-is-in-a-list\n    found = False\n",
        "num_ids": 84
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(ranges)) :\n        if ranges[i] == index :\n            return arr[i]\n    return arr[-1]\n",
        "num_ids": 42
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    a = [arr[i:i+4] for i in range(len(arr)-2)]\n    b = [[rotations[rotations.index(i)+1]-rotations[rotations.index(i)], rotations[rotations.index(i)+2]-rotations[rotations.index(i)], rotations[rotations.index(i)+3]-rotations[rotations.index(i)]] for i in range(len(a)) if i!= len(a)-1]\n    b = [arr[i] for i in range(len(a)) if (rotations[rotations.index(i)+1] - rotations[rotations.index(i)]) * (rotations[rotations.index(i)+2] - rotations[rotations.index(i)]) * (rotations[rotations.index(i)+3] - rotations[rotations.index(i)]) < 0]\n    if b!= [] :\n        for i in range(len(b)) :\n            if b[i]!= arr[rotations.index(i)]:\n                return arr[rotations.index(i)]\n    else :\n        return -1\n    \n    \ndef main() :\n    '''\n    Read a binary file and print out the number of elements.\n    '''\n    n = input().split(\" \")\n    arr = [int(i) for i in n]\n    print(len(arr))\n    \n    \n    \nif __name__ == '__main__' :\n    main()\n",
        "num_ids": 56
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) == 0 :\n        return arr[index]\n    else :\n        x = ranges[index][0]\n        y = ranges[index][1]\n        if rotations == 0 :\n            x = x - ranges[index][0]\n            return arr[x]\n        elif rotations == 1 :\n            x = x - ranges[index][0]\n            y = y - ranges[index][1]\n            return arr[x+y]\n        else :\n            x = ranges[index][0]\n            y = ranges[index][1]\n            index -=1\n            if index == 0 :\n                x = x - ranges[index][0]\n                return arr[x]\n            else :\n                index -=1\n                x = ranges[index][0]\n                y = ranges[index][1]\n                if rotations == 1 :\n                    x = x - ranges[index][0]\n                    return arr[x+y]\n                else :\n                    return arr[x+y]\n        \nif __name__ == \"__main__\" :\n    arr = [ [ 0, 1, 2, 3 ],\n            [ 4, 5, 6, 7 ],\n            [ 8, 9, 10, 11 ] ]\n",
        "num_ids": 290
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Rotate the matrix about its vertical axis \n    rotation_matrix = rotations[index].transpose()\n    # Given the matrix and rotations\n    for row in range(len(rotation_matrix)):\n        for col in range(len(rotation_matrix[0])):\n            # Initialize the new matrix as a copy of the previous matrix\n            new_matrix = copy.deepcopy(rotation_matrix)\n            # Now determine the new position of the element\n            new_matrix[row][col] = arr[row][col]\n            # Now perform the rotation\n            new_matrix = rotation_matrix.dot(new_matrix)\n            # Write the new matrix to the new_matrix[] variable\n            arr[row][col] = new_matrix[0][0]\n    # Write the result of the rotation matrix into a new variable\n    return arr\n",
        "num_ids": 212
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Check if element is present at given index\n    if index < len(arr) :\n        #Find a sub array whose index equals to given index\n        for i in range(len(arr)) :\n            if i+1 <= index :\n                if arr[i] == arr[index] :\n                    return arr[i]\n            else :\n                #If a sub array is not present at index, then the index of this sub array is zero.\n                if i == 0 :\n                    return 0\n                #If a sub array is present at index, then the index of this sub array is given by the difference of index of i+1 and arr[index].\n                elif i == len(arr) - 1 :\n                    return arr[i+1] - arr[index]\n                #Else, if the sub array is present at index, then the index of this sub array is given by the difference of index and arr[index].\n                else :\n                    return arr[i+1] - arr[index]\n    else :\n        #If a sub array is not present at index, then the index of this sub array is zero.\n        if i == 0 :\n            return 0\n        #If a sub array is present at index, then the index of this sub array is given by the difference of index and arr[index].\n        elif i == len(arr) - 1 :\n            return arr[index] - arr[i]\n        #Else, if the sub array is present at index, then the index of this sub array is given by the difference of index and arr[index].\n        else :\n            return arr[index] - arr[i]\n",
        "num_ids": 371
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Create an empty dictionary.\n    l_dict = {}\n    #Assign the array of numbers to l_dict.\n    for i in range(len(arr)) :\n        l_dict[arr[i]] = i\n    #Print the dictionary.\n    print(l_dict)\n    #Create a for loop that iterates through the elements in the dictionary.\n    for r in ranges :\n        #Get the index of the element that matches the given range.\n        e_index = l_dict[r]\n        #If the element is found then assign it to the new index.\n        if e_index >= 0 :\n            #Set the new index of the element to the index of the element that matches the new index.\n            index[r] = e_index\n            #Rotate the element by the number of rotations.\n            rotations[r] = e_index + (index[r]*(index[r] - 1))\n    #Print the modified dictionary.\n    print(rotations)\n    return rotations\n",
        "num_ids": 238
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = ''\n    for word in words:\n        if word[0] == 'p':\n            result = result + word +''\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if word[0] == \"p\":\n            possible_words.append(word)\n        \n    return possible_words\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if word[-1] == \"p\":\n            possible_words.append(word)\n        \n    return possible_words\ndef two_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only two letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef three_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only three letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]r$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef four_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only four letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef five_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only five letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]r$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef six_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only six letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]r$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef seven_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only seven letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]r$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef eight_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only eight letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]r$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef nine_words(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only nine letters 'p' and 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[pP]r$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef start_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that starts with letter 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if word[0] == \"r\":\n            possible_words.append(word)\n        \n    return possible_words\ndef end_withr(words):\n    '''\n    Write a function to return a list of words from a list of words ending with letter 'r'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if word[-1] == \"r\":\n            possible_words.append(word)\n        \n    return possible_words\ndef two_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only two letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef three_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only three letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef four_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only four letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef five_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only five letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef six_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only six letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef seven_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only seven letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef eight_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only eight letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word):\n            possible_words.append(word)\n        \n    return possible_words\ndef nine_withr(words):\n    '''\n    Write a function to return a list of words from a list of words that contain only nine letters 'r' and 'p'.\n    '''\n    # List of possible words\n    possible_words = []\n    \n    for word in words:\n        if re.search(r'^[rR]$', word)",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern_p = re.compile(r'\\b(\\w*)\\b')\n    words_p = pattern_p.findall(words)\n    if len(words_p) > 0:\n        return words_p\n    return None\n",
        "num_ids": 60
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = words[0]\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return (first, words[i][1])\n",
        "num_ids": 47
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i = 0\n    j = 0\n    index = 0\n    temp = ''\n    while i < len(words):\n        if words[i][0] == 'p':\n            if index == 0:\n                temp = words[i]\n                i = i + 1\n                break\n            elif index == 1:\n                temp = words[i]\n                index = 0\n                i = i + 1\n                break\n        else:\n            index = index + 1\n            i = i + 1\n    return temp\n",
        "num_ids": 122
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split to separate words and run'start' function on each word\n    # TODO: use split t",
        "num_ids": 2110
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # list of words\n    result = []\n",
        "num_ids": 13
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    # should not have to append words to words\n    if (len(words) == 0):\n        return (\"\", \"\")\n    \n    start,end = \"\", \"\"\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            start = words[i]\n    for i in range(len(words)-1):\n        if words[i][0] == 'p':\n            end = words[i]\n    return start,end\n",
        "num_ids": 117
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if k == 0 or index == n:\n    #     return a[index]\n    if k == 0:\n        return 0\n    if index == n:\n        return max(a[0] + k, a[index])\n    if a[index] > 0:\n        return a[index]\n",
        "num_ids": 74
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    arr = []\n    max_sum = -float('inf')\n    for i in range(n):\n        if k == i:\n            arr.append(a[i])\n        else:\n            arr.append(a[i])\n            arr.append(a[i])\n            arr.append(a[i])\n    \n    for i in range(k, n):\n        if i == k:\n            max_sum = max(max_sum, sum(arr[k:i+1]))\n        else:\n            max_sum = max(max_sum, sum(arr[i:i+k]))\n    \n    return max_sum\n        \n",
        "num_ids": 160
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index][0] < k and (index == n or k == n): return a[index][0]\n    if a[index][0] < k: return a[index][0]\n    if index == n: return a[index][0]\n",
        "num_ids": 63
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return max(a[:k])\n    else:\n        # Generate the subsequence with given index.\n        if k > index:\n            a[index] = max_sum_increasing_subseq(a, n, index+1, k)\n        else:\n            # In this case, the given kth element is after the given index.\n            # Thus, the subsequence with given index is max_sum_increasing_subseq(a, n, index + 1, k)\n            # and the subsequence with given index is max_sum_increasing_subseq(a, n, index + 2, k)\n            a[index] = a[index] + max(a[index + 1], a[index + 2])\n        return a[index]\n",
        "num_ids": 184
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    m = 0\n    l = 0\n    i = 0\n    while l < n:\n        if i == n and l == n:\n            return a[i]\n        if a[i] < a[l]:\n            s += a[i]\n            i += 1\n        else:\n            if s < a[l] + a[i]:\n                s = a[i] + a[l]\n                l = i + 1\n        if l >= n:\n            return s\n    return a[i] + max_sum_increasing_subseq(a, n, index + 1, k)\n",
        "num_ids": 148
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if index < n:\n    #     if a[index] < a[index+1] and index < k:\n    #         a[index], a[index+1] = a[index+1], a[index]\n    #         index += 1\n    #     elif a[index+1] > a[index] and index + 1 < k:\n    #         index = index + 1\n    #     elif a[index] < a[index+1] and index > 1:\n    #         a[index], a[index+1] = a[index+1], a[index]\n    #         index = index + 1\n    # return a\n",
        "num_ids": 157
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return sum(a)\n    else:\n        if(k > index):\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n",
        "num_ids": 82
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = 0\n    max_val = a[0]\n    i = 0\n    while i < n and index < n:\n        if max_val < a[i] + a[index]:\n            res = max_val\n            max_val = a[i] + a[index]\n        else:\n            max_val += a[index]\n            index += 1\n        i += 1\n    return res\n",
        "num_ids": 99
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[index]\n",
        "num_ids": 16
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return sum(a)\n    \n    if index+1 < n:\n        m = a[index]\n        m_prev = a[index-1]\n        m_next = a[index+1]\n        if m + m_prev > m_next + k:\n            return max_sum_increasing_subseq(a, n, index+1, k)\n        return m + m_prev + max_sum_increasing_subseq(a, n, index+1, k)\n    return 0\n",
        "num_ids": 128
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get n number of elements\n    n = len(tuplex)\n    for i in range(n):\n        if tuplex[i][0] == m or tuplex[i][1] == n:\n            return tuplex[i]\n",
        "num_ids": 63
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # prints the tuple\n    print('\\n'+tuplex[0])\n    # prints the first element of the tuple\n    print('\\n'+tuplex[1])\n    # iterates over all elements of the tuple\n    for i in range(2,m):\n        # prints the first element of the tuple\n        print('\\n'+tuplex[i])\n        # prints the second element of the tuple\n        print('\\n'+tuplex[i+1])\n        # iterates over all elements of the tuple\n        for j in range(n):\n            # prints the first element of the tuple\n            print('\\n'+tuplex[i+j+1])\n",
        "num_ids": 166
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x,y = tuplex[0],tuplex[1]\n    if y < m or x < n:\n        return -1\n    if y > m or x > n:\n        return -1\n    else:\n        return tuplex[2]\ndef get_idx_at_pos(tuplex, m, n, idx):\n    '''\n    Return the index of the given index in the tuple.\n    '''\n    #if not (0 <= idx < m):\n        #print('Invalid index. Use negative numbers.')\n    #    return -1\n    if idx < 0:\n        idx = m + idx\n    if idx > n - 1:\n        idx = m + (n - 1 - idx)\n    return idx\ndef get_cols_at_pos(tuplex, m, n, idx):\n    '''\n    Return the columns of the given index in the tuple.\n    '''\n    #if not (0 <= idx < m):\n        #print('Invalid index. Use negative numbers.')\n    #    return -1\n    if idx < 0:\n        idx = m + idx\n    if idx > n - 1:\n        idx = m + (n - 1 - idx)\n    return idx\n",
        "num_ids": 82
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m_list = []\n    n_list = []\n    for i in tuplex:\n        m_list.append(i[m])\n        n_list.append(i[n])\n",
        "num_ids": 49
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of tuplex\n    colon_tuplex = deepcopy(tuplex)\n    \n    # get a list of the possible positions\n    positions = []\n    for i in range(0,len(tuplex)):\n        if tuplex[i] in m:\n            positions.append(i)\n        else:\n            positions.append(n)\n    # sort list of positions\n    positions = sorted(positions)\n    \n    # get the first element of the list\n    # for each position\n    for i in range(0,len(positions)):\n        # if the position is not the first element\n        # and the position is not a duplicate\n        # and the list contains a number,\n        # and it is not the first element\n        # then return the tuple of the position\n        if tuplex[positions[i]]!= '1' and tuplex[positions[i]] not in colon_tuplex:\n            # get the position's position\n            position = positions[i]\n            # get a list of the possible positions\n            positions_pos = []\n            # for each position\n            for j in range(0,len(tuplex)):\n                # if the position is not the first element\n                # and the position is not a duplicate\n                # and the list contains a number\n                # and it is not the first element\n                # then return the position\n                if tuplex[j]!= '1' and tuplex[j] not in colon_tuplex:\n                    # get the position's position\n                    position_pos = positions[j]\n                    # append the positions\n                    positions_pos.append(position_pos)\n            # sort list of positions\n            positions_pos = sorted(positions_pos)\n            # create a deep copy\n            new_tuplex = deepcopy(tuplex)\n            # remove the first element\n            new_tuplex.pop(0)\n            # append the new elements\n            for j in range(0,len(positions_pos)):\n                # if the position is not the first element\n                # and the position is not a duplicate\n                # and the list contains a number,\n                # and it is not the first element\n                # then return the position\n                if tuplex[positions_pos[j]]!= '1' and tuplex[positions_pos[j]] not in colon_tuplex:\n                    # get the position's position\n                    position = positions_pos[j]\n                    # get a list of the possible positions\n                    positions_pos_pos = []\n                    # for each position\n                    for k in range(0,len(new_tuplex)):\n                        # if the position is not the first element\n                        # and the position is not a duplicate\n                        # and the list contains a number\n                        # and it is not the first element\n                        # then return the position\n                        if new_tuplex[k]!= '1' and new_tuplex[k] not in colon_tuplex:\n                            # get the position's position\n                            position_pos = positions_pos[k]\n                            # append the positions\n                            positions_pos_pos.append(position_pos)\n                    # sort list of positions\n                    positions_pos_pos = sorted(positions_pos_pos)\n                    # create a deep copy\n                    new_tuplex_pos = deepcopy(new_tuplex)\n                    # remove the first element\n                    new_tuplex_pos.pop(0)\n                    # append the new elements\n                    for k in range(0,len(positions_pos_pos)):\n                        # if the position is not the first element\n                        # and the position is not a duplicate\n                        # and the list contains a number,\n                        # and it is not the first element\n                        # then return the position\n                        if new_tuplex_pos[k]!= '1' and new_tuplex_pos[k] not in colon_tuplex:\n                            # get the position's position\n                            position = positions_pos_pos[k]\n                            # get a list of the possible positions\n                            positions_pos_pos_pos = []\n                            # for each position\n                            for l in range(0,len(new_tuplex_pos)):\n                                # if the position is not the first element\n                                # and the position is not a duplicate\n                                # and the list contains a number\n                                # and it is not the first element\n                                # then return the position\n                                if new_tuplex_pos[l]!= '1' and new_tuplex_pos[l] not in colon_tuplex:\n                                    # get the position's position\n                                    position_pos = positions_pos_pos[l]\n                                    # append the positions\n                                    positions_pos_pos_pos.append(position_pos)\n                    # sort list of positions\n                    positions_pos_pos_pos = sorted(positions_pos_pos_pos)\n                    # create a deep copy\n                    new_tuplex_pos_pos = deepcopy(new_tuplex_pos)\n                    # remove the first element\n                    new_tuplex_pos_pos.pop(0)\n                    # append the new elements\n                    for k in range(0,len(positions_pos_pos_pos)):\n                        # if the position is not the first element\n                        # and the position is not a duplicate\n                        # and the list contains a number,\n                        # and it is not the first element\n                        # then return the position\n                        if new_tuplex_pos_pos[k]!= '1' and new_tuplex_pos_pos[k] not in colon_tuplex:\n                            # get the position's position\n                            position = positions_pos_pos_pos[k]\n                            # get a list of the possible positions\n                            positions_pos_pos_pos_pos = []\n                            # for each position\n                            for m_k in range(0,len(new_tuplex_pos_pos)):\n                                # if the position is not the first element\n                                # and the position is not a duplicate\n                                # and the list contains a number\n                                # and it is not the first element\n                                # then return the position\n                                if new_tuplex_pos_pos[m_k]!= '1' and new_tuplex_pos_pos[m_k] not in colon_tuplex:\n                                    # get the position's position\n                                    position_pos = positions_pos_pos_pos[m_k]\n                                    # append the positions\n                                    positions_pos_pos_pos.append(position_pos)\n                            # sort list of positions\n                            positions_pos_pos_pos = sorted(positions_pos_pos_pos)\n                            # create a deep copy\n                            new_tuplex_pos_pos_pos = deepcopy(new_tuplex_pos_pos)\n                            # remove the first element\n                            new_tuplex_pos_pos.pop(0)\n                            # append the new elements\n                            for m_k in range(0,len(positions_pos_pos_pos)):\n                                # if the position is not the first element\n                                # and the position is not a duplicate\n                                # and the list contains a number,\n                                # and it is not the first element\n                                # then return the position\n                                if new_tuplex_pos_pos[m_k]!= '1' and new_tuplex_pos_pos[m_k] not in colon_tuplex:\n                                    # get the position's position\n                                    position = positions_pos_pos_pos[m_k]\n                                    # get a list of the possible positions\n                                    positions_pos_pos_pos_pos = []\n                                    # for each position\n                                    for n_k in range(0,len(new_tuplex_pos_pos)):\n                                        # if the position is not the first element\n                                        # and the position is not a duplicate\n                                        # and the list contains a number\n                                        # and it is not the first element\n                                        # then return the position\n                                        if new_tuplex_pos_pos[n_k]!= '1' and new_tuplex_pos_pos[n_k] not in colon_tuplex:\n                                            # get the position's position\n                                            position_pos = positions_pos_pos_pos[n_k]\n                                            # append the positions\n                                            positions_pos_pos_pos.append(position_pos)\n                                        # sort list of positions\n                                        positions_pos_pos_pos = sorted(po",
        "num_ids": 2027
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex is None:\n        return None\n    if n is None:\n        return None\n    if m is None:\n        return None\n    if n==m:\n        return tuplex\n    elif m<n:\n        return colon_tuplex(tuplex,n,m)\n    elif n>m:\n        return colon_tuplex(tuplex,m,n)\n    else:\n        return None\n",
        "num_ids": 108
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m = list(tuplex[:m])\n    n = list(tuplex[m.index(0):])\n    return tuplex[:m],tuplex[m.index(0):],tuplex[n.index(0):]\n",
        "num_ids": 64
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m]+(min(n,len(tuplex[m:n]))-len(tuplex[m:n]) if n>m else 0,)\ndef list_neighbours(m,n,x):\n    '''\n    Returns the neighbours of the given point x.\n    '''\n    return [i for i in range(m+1,n+1) if i!=x]\ndef is_in_n_j(m,n,x):\n    '''\n    Returns whether the given point is inside the grid's neighbours.\n    '''\n    return m+1<=n and m>=1 and x in list_neighbours(m,n,x)\ndef is_in_n_j_t(m,n,x):\n    '''\n    Returns whether the given point is inside the grid's neighbours.\n    '''\n    return m+1<=n and m>=1 and x in list_neighbours(m,n,x) and x in list_neighbours(m,n,x)\ndef is_in_n_j_b(m,n,x):\n    '''\n    Returns whether the given point is inside the grid's neighbours.\n    '''\n    return m+1<=n and m>=1 and x in list_neighbours(m,n,x) and x in list_neighbours(m,n,x) and x in list_neighbours(m,n,x)\ndef get_point_in_line(m,n,x,line):\n    '''\n    Returns the given point (m,n) inside the line defined by (line).\n    '''\n    return next(i for i in line if m+i[0]==x and n+i[1]==x)\ndef get_number_in_line(m,n,x,line):\n    '''\n    Returns the number of the given point (m,n) inside the line defined by (line).\n    '''\n    return next(i[0] for i in line if m+i[0]==x and n+i[1]==x)\ndef get_points_in_line(m,n,line,out=[]):\n    '''\n    Returns the points (m,n) in the line defined by (line)\n    '''\n    if len(line)==1:\n        return out\n    if line[0]=='*':\n        return get_points_in_line(m,n,line,out+[(m,n)])\n    else:\n        return get_points_in_line(m,n,line[1:],out+[(m,n)])\ndef has_two_points_in_line(line1,line2,out=[]):\n    '''\n    Returns whether the two lines (line1 and line2) have a common point in\n    their lines.\n    '''\n    if len(line1)==1 or len(line2)==1:\n        return False\n    if line1[0]==line2[0]:\n        return get_points_in_line(line1[0],line2[0],line1,out=out+[(line1[0],line2[0])])\n    elif line1[0]==line2[1]:\n        return get_points_in_line(line1[0],line2[1],line1,out=out+[(line1[0],line2[1])])\n    else:\n        return False\ndef get_line_pairs(m,n,line):\n    '''\n    Returns the line pairs (m,n)\n    '''\n    if len(line)==1:\n        return [[m,n],[m,n]]\n    else:\n        pair = []\n        pair+=get_line_pairs(line[0],n,line[1:])\n        pair+=get_line_pairs(m,n,line[1:])\n        return pair\ndef get_line_pairs_b(m,n,line):\n    '''\n    Returns the line pairs (m,n)\n    '''\n    if len(line)==1:\n        return [[m,n],[m,n]]\n    elif line[0]=='*':\n        return get_line_pairs_b(line[0],n,line[1:])\n    else:\n        return get_line_pairs_b(line[0],n,line[1:])+[[m,n],[m,n]]\ndef get_point_in_line_b(m,n,x,line):\n    '''\n    Returns the point (m,n) inside the line defined by (line).\n    '''\n    if line[0]=='*':\n        return next(i for i in line if m+i[0]==x and n+i[1]==x)\n    else:\n        return next(i for i in line if m+i[0]==x and n+i[1]==x)\ndef get_points_in_line_b(m,n,x,line,out=[]):\n    '''\n    Returns the points (m,n) in the line defined by (line)\n    '''\n    if len(line)==1:\n        return out\n    elif line[0]=='*':\n        return get_points_in_line_b(m,n,x,line,out+[(m,n)])\n    else:\n        return get_points_in_line_b(m,n,x,line[1:],out+[(m,n)])\ndef find_in_m_j_t(m,n,x,out=[]):\n    '''\n    Returns whether the point (m,n) is inside the grid's grid line (x)\n    '''\n    if m==n:\n        if x=='*':\n            return True\n        return False\n    if x=='*':\n        return find_in_m_j_t(m+1,n,x,out+[(m,n)])\n    else:\n        if x in list_neighbours(m,n,x):\n            return True\n        return False\ndef find_in_m_j_b(m,n,x,out=[]):\n    '''\n    Returns whether the point (m,n) is inside the grid's grid line (x)\n    '''\n    if m==n:\n        if x=='*':\n            return True\n        return False\n    if x=='*':\n        return find_in_m_j_b(m+1,n,x,out+[(m,n)])\n    else:\n        if x in list_neighbours(m,n,x):\n            return True\n        return False\ndef find_in_m_j_b_t(m,n,x,out=[]):\n    '''\n    Returns whether the point (m,n) is inside the grid's grid line (x)\n    '''\n    if m==n:\n        if x=='*':\n            return True\n        return False\n    if x=='*':\n        return find_in_m_j_b_t(m+1,n,x,out+[(m,n)])\n    else:\n        if x in list_neighbours(m,n,x):\n            return True\n        return False\ndef get_point_in_line_t(m,n,x,line):\n    '''\n    Returns the point (m,n) inside the line defined by (line).\n    '''\n    return get_point_in_line_b(m,n,x,line)\ndef get_number_in_line_t(m,n,x,line):\n    '''\n    Returns the number of the given point (m,n) inside the line defined by (line).\n    '''\n    return get_number_in_line_b(m,n,x,line)\ndef get_points_in_line_t(m,n,line,out=[]):\n    '''\n    Returns the points (m,n) in the line defined by (line)\n    '''\n    if len(line)==1:\n        return out\n    if line[0]=='*':\n        return get_points_in_line_b(m,n,x,line,out+",
        "num_ids": 49
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return tuplex[m]\n    else:\n        return colon_tuplex(tuplex,m+1,n) + \":\" + colon_tuplex(tuplex,m,n+1)\n",
        "num_ids": 61
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s = ''\n    for i in range(0,len(tuplex)):\n        s += '_' + str(tuplex[i])\n    if m == n:\n        return s\n    if tuplex[m][0] < tuplex[n][0]:\n        x = tuplex[n][0]\n        y = tuplex[m][0]\n        z = tuplex[m][0]\n        tuplex[m][0] = tuplex[n][0]\n        tuplex[n][0] = x\n        tuplex[m][0] = y\n        tuplex[n][0] = z\n        \n    else:\n        x = tuplex[m][0]\n        y = tuplex[n][0]\n        z = tuplex[n][0]\n        tuplex[m][0] = x\n        tuplex[n][0] = y\n        tuplex[n][0] = z\n    return colon_tuplex(tuplex,m+1,n+1)\n    \ndef is_colon_or_not(tuplex,m,n):\n    '''\n    Write a function to judge whether a tuple is a colon or not.\n    '''\n    if not tuplex:\n        return False\n    else:\n        if tuplex[m][0] == tuplex[n][0]:\n            return True\n        else:\n            return False\n    \ndef car_tuple_to_list(tuplex,m,n):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    listt = []\n    if not tuplex:\n        return listt\n    else:\n        if tuplex[0][0] == tuplex[1][0] and tuplex[0][0] == tuplex[2][0]:\n            listt.append(tuplex[0])\n            listt.append(tuplex[1])\n            listt.append(tuplex[2])\n        else:\n            listt.append(tuplex[0])\n            listt.append(tuplex[1])\n            listt.append(tuplex[2])\n        if is_colon_or_not(tuplex,m,n):\n            listt.append(tuplex[m])\n        else:\n            listt.append(tuplex[n])\n        return listt\n        \ndef list_to_tuple(listt,m,n):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = []\n    if len(listt) == 1:\n        tuplex = listt[0]\n        return tuplex\n    else:\n        if listt[0][0] == listt[1][0] and listt[0][0] == listt[2][0]:\n            tuplex = listt[0]\n            tuplex = listt[1]\n            tuplex = listt[2]\n        else:\n            tuplex = listt[0]\n            tuplex = listt[1]\n            tuplex = listt[2]\n        if is_colon_or_not(listt,m,n):\n            tuplex = listt[m]\n        else:\n            tuplex = listt[n]\n        return tuplex\n        \ndef remove_all(listt,m,n):\n    '''\n    Write a function to remove a given list.\n    '''\n    if len(listt) == 1:\n        listt.clear()\n    else:\n        if listt[0][0] == listt[1][0] and listt[0][0] == listt[2][0]:\n            listt.pop(1)\n        else:\n            listt.pop(1)\n            listt.pop(0)\n            listt.pop(2)\n        if is_colon_or_not(listt,m,n):\n            listt.pop(m)\n        else:\n            listt.pop(n)\n        \ndef remove_one(listt,m,n):\n    '''\n    Write a function to remove a given list.\n    '''\n    if len(listt) == 1:\n        listt.clear()\n    else:\n        if listt[m][0] == listt[n][0] and listt[m][0] == listt[2][0]:\n            listt.pop(m)\n        else:\n            listt.pop(m)\n            listt.pop(n)\n            listt.pop(2)\n        if is_colon_or_not(listt,m,n):\n            listt.pop(m)\n        else:\n            listt.pop(n)\n            \ndef remove_all_or_one(listt,m,n):\n    '''\n    Write a function to remove a given list.\n    '''\n    if len(listt) == 1:\n        listt.clear()\n    else:\n        if listt[m][0] == listt[n][0] and listt[m][0] == listt[2][0]:\n            listt.pop(m)\n        else:\n            listt.pop(m)\n            listt.pop(n)\n            listt.pop(2)\n        if is_colon_or_not(listt,m,n):\n            listt.pop(m)\n        else:\n            listt.pop(n)\n            \ndef random_tuple(listt):\n    '''\n    Write a function to return a random tuple.\n    '''\n    tuplex = []\n    for i in range(3):\n        tuplex.append(listt.pop(randint(0,len(listt)-1)))\n    return tuplex\n    \ndef replace_n(listt,m,n,value):\n    '''\n    Write a function to replace a given value with a given value.\n    '''\n    if value == listt[m][n]:\n        listt[m][n] = value\n    else:\n        listt[m][n] = value\n    return listt\n    \ndef insert_n(listt,m,n,value):\n    '''\n    Write a function to insert a value into a given position.\n    '''\n    if value == listt[m][n]:\n        listt[m][n] = value\n    else:\n        listt[m][n] = value\n        \ndef clear_all(listt):\n    '''\n    Write a function to clear a given list.\n    '''\n    for i in range(len(listt)):\n        listt[i] = []\n        \ndef clear_one(listt,m,n):\n    '''\n    Write a function to clear a given list.\n    '''\n    for i in range(len(listt)):\n        listt[i] = []\n        \ndef clear_all_or_one(listt,m,n):\n    '''\n    Write a function to clear a given list.\n    '''\n    for i in range(len(listt)):\n        listt[i] = []\n        \ndef check_all(listt,m,n):\n    '''\n    Write a function to check whether the given list is all the same length as the given list.\n    '''\n    if len(listt) == len(set(listt)):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    \n    # largest product in both lists\n    L = sum(nums1[0:N])\n    r = 0\n    \n    # loop to find the largest product\n    for i in range(N):\n        if L < nums1[i]:\n            r = i\n            break\n    \n    # largest product from nums2\n    for j in range(N,len(nums2)):\n        if L < nums2[j]:\n            r = j\n            break\n    \n    # return the product\n    return r\n",
        "num_ids": 144
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #declare empty list to hold result\n    result = []\n    for i in range(len(nums1)):\n        result.append(0)\n",
        "num_ids": 39
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n",
        "num_ids": 22
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Write your code here.\n    p = 1\n    for i in range(N):\n        p = p * (nums1[i] * nums2[i])\n    return p\n",
        "num_ids": 48
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from itertools import permutations\n    import heapq\n",
        "num_ids": 16
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n",
        "num_ids": 7
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # hash table\n    factors = {}\n    # nums1, nums2\n    for i in range(len(nums1)):\n        factor = 1\n        for j in range(len(nums2)):\n            if nums1[i] * nums2[j] < N:\n                factor *= nums1[i]\n                nums1[i] *= nums2[j]\n                nums2[j] *= factor\n            elif nums1[i] * nums2[j] > N:\n                factor = 1/factor\n                nums2[j] *= factor\n                nums1[i] *= factor\n        \n        # use hash to see if there is already a factor\n        if nums1[i] in factors:\n            factors[nums1[i]] += 1\n        else:\n            factors[nums1[i]] = 1\n        \n        if nums2[i] in factors:\n            factors[nums2[i]] += 1\n        else:\n            factors[nums2[i]] = 1\n            \n    # return result\n    result = []\n    for key, value in factors.items():\n        result.append((key, value))\n    result.sort()\n    return result[len(result)-1][1]\n",
        "num_ids": 315
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    product = 0\n    for i in range(N):\n        if nums1[i] * nums2[i] > product:\n            product = nums1[i] * nums2[i]\n    return product\n",
        "num_ids": 72
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # define variables\n    max_product = 0\n    temp_max_product = 0\n",
        "num_ids": 23
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from functools import reduce\n    # Step 1:\n    # Get the number of lists\n    L = len(nums1)\n    # Step 2:\n    # Find the number of factor with one larger product\n    # Use a new dictionary to keep track of the product\n    # Each factor has 2 numbers\n    dict = dict()\n    for i in range(L):\n        factor1 = nums1[i] * nums2[i]\n        dict[factor1] = i\n    # Step 3:\n    # Get the number of elements in the longer list\n    elem = len(nums2)\n    # Count how many items are in the longer list\n    count = 0\n    # Count the number of factors in the longer list\n    for i in range(L):\n        product = nums1[i] * nums2[i]\n        # Sum up the products of the 2 lists\n        count += product\n        # Update the dictionary with the product\n        dict[product] = i\n    # Step 4:\n    # Find the smallest number in the dictionary\n    # The smallest number is the product of the two smallest elements\n    min_product = reduce(lambda x, y: x * y, dict.values())\n    # Step 5:\n    # Replace the value in the dictionary with the min product\n    # The number of items in the dictionary does not correspond to the number of elements in the longer list\n    # Hence replace the smallest number with the product of the two smallest elements\n    dict[min_product] = L\n    return dict",
        "num_ids": 353
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #your code here\n    print(a)\n    print(b)\n    return a if (a > b) else b\n    #to solve this we have to define a max function so we know the max value is the largest value\n    #then you just know that the max value is the largest in the list.\n    #that's the maximum in the list\n",
        "num_ids": 83
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        if a>b:\n            return a\n        else:\n            return b\n    return a\n",
        "num_ids": 32
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) is not int or type(b) is not int:\n        return \"You must enter only two numbers\"\n    elif a<b:\n        a,b=b,a\n    return a\n",
        "num_ids": 53
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        max=a\n        min=b\n    else:\n        max=b\n        min=a\n    return max,min\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        min=a\n        max=b\n    else:\n        min=b\n        max=a\n    return min,max\ndef replace_equal(s):\n    '''\n    Write a python function to replace all the equal sign in the string with \"#\".\n    '''\n    s=s.replace(\"=\",\"#\")\n    return s\ndef min_max(a,b):\n    '''\n    Write a python function to find the minimum and maximum of two numbers.\n    '''\n    if a<b:\n        min=a\n        max=b\n    else:\n        min=b\n        max=a\n    return min,max\ndef max_min(a,b):\n    '''\n    Write a python function to find the maximum and minimum of two numbers.\n    '''\n    if a>b:\n        min=a\n        max=b\n    else:\n        min=b\n        max=a\n    return min,ma",
        "num_ids": 38
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        a,b = b,a\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if b>a else b\n",
        "num_ids": 12
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    i = 0\n    tuple1 = ()\n    str1 = str(str1)\n    while i < len(str1):\n        tuple1 += (chr(ord(str1[i]) + ord('a') - ord('0')),)\n        i += 1\n    return tuple1\n",
        "num_ids": 73
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 9
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    return tup\n",
        "num_ids": 13
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_list = list(str1)\n    return tuple(tuple_list)\n",
        "num_ids": 24
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    tup = ()\n    temp = []\n    \n    for i in str1:\n        temp.append(i)\n    \n    for i in temp:\n        tup += i\n    \n    return tup\n        \n",
        "num_ids": 57
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str = str1.lower().strip()\n    if str == \"\":\n        return (\"\")\n    return (str)",
        "num_ids": 30
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = list(str1)\n    t = tuple(l)\n    return t\n",
        "num_ids": 23
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    else:\n        n = 1 if n == 1 else 0\n        return n\n",
        "num_ids": 32
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 2**32:\n        return n\n    else:\n        a = n\n        k = 0\n        while a & (1 << k)!= 0:\n            a = (a & (1 << k)) | ((~(a & (1 << k))) & 1)\n            k += 1\n        a = (a & 1) << k\n        return a\n",
        "num_ids": 88
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n >> (n - 1)\n    if x == 0:\n        return\n    n &= x - 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bits = []\n    while n:\n        bits.append(1 if n&1 else 0)\n        n = n >> 1\n    return bit",
        "num_ids": 36
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0: \n        return -1\n    else:\n        return n & 1\n",
        "num_ids": 25
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    from functools import wraps\n    # add @wraps to the function\n    def set_left_most_unset_bit(n):\n        return n | n >> 1\n    # the wrapper does nothing if the function is not called\n    # (it's already wrapped)\n    @wraps(n)\n    def set_left_most_unset_bit(n):\n        if n!= 0:\n            n = n | n >> 1\n        return n\n    # finally, call the function\n    return set_left_most_unset_bit(n)\n",
        "num_ids": 135
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        print(f\"The left most unset bit is {n}\")\n    else: \n        print(f\"The left most unset bit is {n&1}\")",
        "num_ids": 50
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    left_most_unset = 0xFF\n    right_most_unset = 0xFF\n    for bit in range(n):\n        if bit == n-1:\n            left_most_unset = left_most_unset ^ 0x80\n            right_most_unset = right_most_unset ^ 0x80\n        else:\n            left_most_unset = left_most_unset ^ 0x80\n            right_most_unset = left_most_unset ^ 0x80\n",
        "num_ids": 124
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 0x80:\n        n |= 0x80\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        return n\n    while n > 0:\n        n &= (n - 1)\n        n |= 0x80\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula is derived from volume of a cone from the fact that the cone extends in the diameter of the \n    # unit cube. We know that the volume of the cone is the first half of the cuboid (a square in the \n    # middle). A volume of a cone is defined as the volume of the cuboid plus the first half of the \n    # cuboid.\n    #\n    # Recall that there are two factors, h and r, that are defined for the lengths of the two sides of the \n    # cone. The first factor is the height of the cylinder. The second factor is the radius of the cone.\n    # \n    # You are given a length and a radius of a cylinder, and the function returns the volume of the cylinder.\n    #\n    # The function should return a floating point number.\n    # \n    # Examples\n    # volume_cone(3,1)\n    # \u279e 8.086\n    # volume_cone(6,2)\n    # \u279e 51.477\n    # volume_cone(3,0)\n    # \u279e 0.4882\n    \n    # The formula for the volume of a cone is given as:\n    #\n    # (1 + h * r / (2*r)) * h^2 * (r^3/r^3 + r^2/r^2 + 1)\n    # Where:\n    # \n    # h = (r/r^3 + r/r^2 + 1)\n    # r = (h * r / (2*r))\n    # r^3 = r * r\n    # r^2 = r * r\n    # r = 1\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^3 / r^3) * h^2 * r\n    # \n    # Here, r = 6 and h = 2\n    # \n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^3 / r^3) * h^2 * (r/r^3 + r/r^2 + 1)\n    #\n    # Here, r = 6 and h = 2\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^3 / r^3) * h^2 * (2 * r / r^3) * (r/r^3 + r/r^2 + 1)\n    # \n    # Here, r = 6 and h = 2\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^3 / r^3) * h^2 * (r/r^3 + r/r^2 + 1)\n    # \n    # Here, r = 6 and h = 2\n    #\n    # Finally, you are given a starting radius r and a starting height h.\n    # \n    # The function returns the volume of a cone (rounded up to the nearest whole number). For example, if your starting radius \n    # is 4 and starting height is 2, the function should return 4.\n    \n    # The formula for the volume of a cone is given as:\n    #\n    # (1 + h * r) * (r^2 * (r^2 + 1))\n    # \n    # where:\n    # \n    # h = (r/r^3 + r/r^2 + 1)\n    # r = (h * r)\n    # r^2 = r * r\n    # r = 1\n    #\n    # Here, r = 4 and h = 2\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + h * (r/r^3 + r/r^2 + 1)^2)\n    # \n    # Here, r = 4 and h = 2\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + h * (r/r^3 + r/r^2 + 1)^2)\n    # \n    # Here, r = 4 and h = 2\n    #\n    # Finally, you are given a starting radius r and starting height h.\n    \n    # The function returns the volume of a cone (rounded down to the nearest whole number). For example, if your starting radius \n    # is 6 and starting height is 2, the function should return 6.\n    \n    # The formula for the volume of a cone is given as:\n    #\n    # (1 + r^3 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + r^2 * (r/r^3 + r/r^2 + 1)^2 + 1)\n    # \n    # where:\n    # \n    # r = (h * r)\n    # r^2 = r * r\n    # r = 1\n    #\n    # Here, r = 6 and h = 2\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + r^2 * (r/r^3 + r/r^2 + 1)^2 + 1)\n    # \n    # Here, r = 6 and h = 2\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + r^2 * (r/r^3 + r/r^2 + 1)^2 + 1)\n    # \n    # Here, r = 6 and h = 2\n    #\n    # Finally, you are given a starting radius r and starting height h.\n    \n    # The function returns the volume of a cone (rounded down to the nearest whole number). For example, if your starting radius \n    # is 5 and starting height is 3, the function should return 5.\n    \n    # The formula for the volume of a cone is given as:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + h * (r/r^3 + r/r^2 + 1)^2 + r^2 * (r/r^3 + r/r^2 + 1)^2 + 1)\n    # \n    # where:\n    # \n    # r = (h * r)\n    # r^2 = r * r\n    # r = 1\n    #\n    # Here, r = 5 and h = 3\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + h * (r/r^3 + r/r^2 + 1)^2 + r^2 * (r/r^3 + r/r^2 + 1)^2 + 1)\n    # \n    # Here, r = 5 and h = 3\n    #\n    # You can also calculate the volume of a cone with the following formula:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r/r^3 + r/r^2 + 1) + h * (r/r^3 + r/r^2 + 1)^2 + r^2 * (r/r^3 + r/r^2 + 1)^2 + 1)\n    # \n    # Here, r = 5 and h = 3\n    #\n    # Finally, you are given a starting radius r and starting height h.\n    \n    # The function returns the volume of a cone (rounded down to the nearest whole number). For example, if your starting radius \n    # is 5 and starting height is 3, the function should return 5.\n    \n    # The formula for the volume of a cone is given as:\n    #\n    # (1 + r^2 / r^3) * (h^2 * (r",
        "num_ids": 2015
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h**3)/6\ndef temperature_cone(T,r):\n    '''\n    Write a function to find the temperature of a cone.\n    '''\n    return math.pi*(r**2)*(T**3)/6\n",
        "num_ids": 20
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r==0 or r==h:\n        return 0\n    return (r*h)/math.pi\n",
        "num_ids": 28
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * (r ** 2 - h ** 2) ** 0.5\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    return math.pi*(r**2)*h\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    return 4 * math.pi * (math.pow(r,2)) * (math.pow(h,2))\n",
        "num_ids": 34
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #theta = (math.pi * r * r) / 2\n    #theta = (math.pi / 4) * (r * r)\n    \n    #The area of the cone is:\n    #h = sqrt(theta / 2)\n    \n    #The volume of a cone is:\n    #volume = 4 * pi * r * (r * r)\n    \n    #Write your code below this line \ud83d\udc47\n    \n    #calculate the area, volume\n    a = (math.sqrt(2 * (math.pi * r)**2))\n    b = (math.pi * r)\n    c = (math.pi / 4) * (r * r)\n    d = (r * r)\n    e = h\n    #theta = (math.pi * r * r) / 2\n    #theta = (math.pi / 4) * (r * r)\n    \n    #The area of the cone is:\n    #a = 2 * pi * r * (r * r)\n    \n    #The volume of a cone is:\n    #volume = 4 * pi * r * (r * r)\n",
        "num_ids": 272
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*(math.pi*r**2) * math.acos((math.sin(h/2)-r/math.cos(h/2))/(2*r))\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return r*2*math.pi*(math.sin(h/2)-r/math.cos(h/2))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 4*math.pi*r**2*math.sin(h/2)\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r**2*h**2*(4/3)\n    return volume\n",
        "num_ids": 27
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=3.1415*(r**2)\n    return v*(h**3)\n",
        "num_ids": 26
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    while (i <= n):\n        if (i == 2):\n            break\n        if (i % 2 == 0):\n            i += 1\n        else:\n            i = i + 2\n            print(i)\n    print(\"i is: \" + str(i))\n    return i\n",
        "num_ids": 75
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def highest_power_of_2(n):\n        lowest_power = 0\n        highest_power = 0\n        power_of_2 = 0\n        while(power_of_2 <= n):\n            if (power_of_2 == 0):\n                lowest_power = power_of_2\n            if (power_of_2 < n):\n                if (power_of_2 % 2 == 0):\n                    power_of_2 = power_of_2/2\n                else:\n                    power_of_2 = power_of_2 + 1\n            highest_power = highest_power if highest_power > lowest_power else lowest_power\n        return highest_power\n    return highest_power_of_2(n)\n",
        "num_ids": 175
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2: \n        return 0\n    elif n % 2 == 0: \n        return highest_Power_of_2(n-1)\n    else: \n        return highest_Power_of_2(n-1) + 2\n",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    ls = str(bin(n))\n    ls = ls[2:]\n    ls = ls[::-1]\n    for i in range(len(ls)):\n        if int(ls[i]) == 1:\n            return (i+1)\n            \n        \n",
        "num_ids": 66
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        if (i < 2) or (i > int(n**0.5)):\n            result += 1\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if (i**2) >= n:\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_2_sum = 0\n    for i in range(1, n + 1):\n        power_2_sum = power_2_sum + i\n    if power_2_sum == n:\n        return n\n    else:\n        return 0\n",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_num = 0\n    low_num = 1\n    \n    while low_num <= n:\n        if low_num % 2 == 0:\n            if high_num < low_num:\n                high_num = low_num\n        low_num += 1\n        \n    return high_num\n",
        "num_ids": 73
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==2 or n==3:\n        return 2\n    else:\n        if n<2:\n            return n\n        else:\n            lst=[]\n            for i in range(1,n+1):\n                lst.append(i)\n            m=lst[0]\n            for j in range(1,len(lst)):\n                if lst[j]==lst[j-1]:\n                    continue\n                else:\n                    m=max(m,lst[j])\n                    continue\n            return m\n",
        "num_ids": 131
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    result = [1]\n    for i in range(2, n + 1):\n        result.append(result[i - 1] * 2 + result[i - 2])\n    return result[n]\n",
        "num_ids": 50
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "num_ids": 55
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2:\n        return n\n    return n*(n+1)//2\ndef find_lucas_prime(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1: \n        return n \n    if n % 2 == 0: \n        return find_lucas_prime(n//2) \n    else: \n        return (find_lucas_prime(n-1) + find_lucas_prime(n//2)) \n",
        "num_ids": 76
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    for i in range(n):\n        if i == 0 or i == 1 or i == n:\n            return n - 1 - i\n        else:\n            return n - i - 1\n    \ndef find_nth_prime(n):\n    '''\n    Return then'th prime number.\n    '''\n    \n    for i in range(1, n + 1):\n        for j in range(i, 0, -1):\n            if i % j == 0:\n                break\n        else:\n            return i\n            ",
        "num_ids": 52
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x=0\n    if n%2==1:\n        x=n//2\n    else:\n        x=3*n//2\n    return x\n",
        "num_ids": 40
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 3:\n        return n\n    if n <= 5:\n        return 4\n    return 3 * find_lucas(n-3) + 5\n",
        "num_ids": 41
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 56
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    for i in range(2, n+1):\n        lucas = lucas * i\n    return lucas\n",
        "num_ids": 37
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    for i in range(1, n + 1):\n        lucas += i\n        i += 1\n        if i % 2 == 0:\n            lucas += 1\n    return lucas\n",
        "num_ids": 55
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 6\n    if n == 5: \n        return 15\n    if n == 6: \n        return 32\n    if n == 7: \n        return 64\n    if n == 8: \n        return 128\n    if n == 9: \n        return 256\n    if n == 10: \n        return 512\n    if n == 11: \n        return 1024\n    if n == 12: \n        return 2048\n    if n == 13: \n        return 4096\n    if n == 14: \n        return 8192\n    if n == 15: \n        return 16384\n    if n == 16: \n        return 32768\n    if n == 17: \n        return 65536\n    if n == 18: \n        return 131072\n    if n == 19: \n        return 262144\n    if n == 20: \n        return 524288\n    if n == 21: \n        return 1048576\n    if n == 22: \n        return 2097152\n    if n == 23: \n        return 4194304\n    if n == 24: \n        return 8388608\n    if n == 25: \n        return 16777216\n    if n == 26: \n        return 33554432\n    if n == 27: \n        return 67108864\n    if n == 28: \n        return 134217728\n    if n == 29: \n        return 268435456\n    if n == 30: \n        return 536870912\n    if n == 31: \n        return 1073741824\n    if n == 32: \n        return 2147483648\n    if n == 33: \n        return 429496656\n    if n == 34: \n        return 8589934592\n    if n == 35: \n        return 16777216\n    if n == 36: \n        return 33554432\n    if n == 37: \n        return 67108864\n    if n == 38: \n        return 134217728\n    if n == 39: \n        return 268435456\n    if n == 40: \n        return 536870912\n    if n == 41: \n        return 1073741824\n    if n == 42: \n        return 2147483648\n    if n == 43: \n        return 429496656\n    if n == 44: \n        return 8589934592\n    if n == 45: \n        return 16777216\n    if n == 46: \n        return 33554432\n    if n == 47: \n        return 67108864\n    if n == 48: \n        return 134217728\n    if n == 49: \n        return 268435456\n    if n == 50: \n        return 536870912\n    if n == 51: \n        return 1073741824\n    if n == 52: \n        return 2147483648\n    if n == 53: \n        return 429496656\n    if n == 54: \n        return 8589934592\n    if n == 55: \n        return 16777216\n    if n == 56: \n        return 33554432\n    if n == 57: \n        return 67108864\n    if n == 58: \n        return 134217728\n    if n == 59: \n        return 268435456\n    if n == 60: \n        return 536870912\n    if n == 61: \n        return 1073741824\n    if n == 62: \n        return 2147483648\n    if n == 63: \n        return 429496656\n    if n == 64: \n        return 8589934592\n    if n == 65: \n        return 16777216\n    if n == 66: \n        return 33554432\n    if n == 67: \n        return 67108864\n    if n == 68: \n        return 134217728\n    if n == 69: \n        return 268435456\n    if n == 70: \n        return 536870912\n    if n == 71: \n        return 1073741824\n    if n == 72: \n        return 2147483648\n    if n == 73: \n        return 429496656\n    if n == 74: \n        return 8589934592\n    if n == 75: \n        return 16777216\n    if n == 76: \n        return 33554432\n    if n == 77: \n        return 67108864\n    if n == 78: \n        return 134217728\n    if n == 79: \n        return 268435456\n    if n == 80: \n        return 536870912\n    if n == 81: \n        return 1073741824\n    if n == 82: \n        return 2147483648\n    if n == 83: \n        return 429496656\n    if n == 84: \n        return 8589934592\n    if n == 85: \n        return 16777216\n    if n == 86: \n        return 33554432\n    if n == 87: \n        return 67108864\n    if n == 88: \n        return 134217728\n    if n == 89: \n        return 268435456\n    if n == 90: \n        return 536870912\n    if n == 91: \n        return 1073741824\n    if n == 92: \n        return 2147483648\n    if n == 93: \n        return 429496656\n    if n == 94: \n        return 8589934592\n    if n == 95: \n        return 16777216\n    if n == 96: \n        return 33554432\n    if n == 97: \n        return 67108864\n    if n == 98: \n        return 134217728\n    if n == 99: \n        return 268435456\n    if n == 100: \n        return 536870912\n    if n == 101: \n        return 1073741824\n    if n == 102: \n        return 2147483648\n    if n == 103: \n        return 429496656\n    if n == 104: \n        return 8589934592\n    if n == 105: \n        return 16777216\n    if n == 106: \n        return 33554432\n    if n == 107: \n        return 67108864\n    if n == 108: \n        return 134217728\n    if n == 109: \n        return 268435456\n    if n == 110: \n        return 536870912\n    if n == 111: \n        return 1073741824\n    if n == 112: \n        return 2147483648\n    if n == 113: \n        return 429496656\n    if n == 114: \n        return 8589934592\n    if n == 115: \n        return 16777216\n    if n == 116: \n        return 33554432\n    if n == 117: \n        return 67108864\n    if n == 118: \n        return 134217728\n    if n == 119: \n        return 268435456\n    if n == 120: \n        return 536870912\n    if n == 121: \n        return 1073741824\n    if n == 122: \n        return 2147483648\n    if n == 123: \n        return 429496656\n    if n == 124: \n        return 8589934592\n    if n == 125: \n        return 16777216\n    if n == 126: \n        return 33554432\n    if n == 127: \n        return 67108864\n    if n == 128: \n        return 134217728\n    if n == 129: \n        return 268435456\n    if n == 130: \n        return 536870912\n    if n == 131: \n        return 1073741824\n    if n == 132: \n        return 2147483648\n    if n == 133: \n        return 429496656\n    if n == 134: \n        return 8589934592\n    if n == 135: \n        return 16777216\n    if n == 136: \n        return 33554432\n    if n == 137:",
        "num_ids": 2015
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # TODO: Create a function called apply_string that takes a parameter called string, and passes it to append.\n    pass\n",
        "num_ids": 31
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string in list_:\n        for i in range(len(list_)):\n            list_[i] = list_[i].replace(string, str(list_[i]))\n    else:\n        list_[0] = list_[0].replace(string, str(list_[0]))\n    return list_\n    \n    \n    \ndef check_file(filename):\n    '''\n    Check if file exists. Return True if it exists, else return False.\n    '''\n    if os.path.isfile(filename):\n        return True\n    else:\n        return False\n    \n    \ndef load_file(filename):\n    '''\n    Load a file into a list.\n    '''\n    \n    with open(filename, 'r') as file:\n        list_ = []\n        \n        for line in file:\n            list_.append(line.rstrip())\n        \n    return list_\n    \n",
        "num_ids": 52
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(list_) == 0:\n        raise ValueError(\"Empty list\")\n",
        "num_ids": 22
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Iterate over the list\n    for i in list_:\n        # Concatenate the string\n        i.append(string)\n    # Return the updated list\n    return list",
        "num_ids": 45
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == ',':\n        return ','.join(map(str, list_))\n    if string == '.':\n        return str(list_)[1:-1]\n    if string == '?':\n        return str(list_)[1:]\n    return str(list_)\n",
        "num_ids": 71
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [str(elem) for elem in list_]\n    return list_, string.format(*list_)\n",
        "num_ids": 33
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for elem in list_:\n        new_list.append(elem.replace(string,''))\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return string.join([str(elem) for elem in list_]",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == None:\n        return list_\n",
        "num_ids": 14
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i.format = string\n    return list_\n    ",
        "num_ids": 23
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1=l1.split(\";\")\n    l2=l2.split(\";\")\n    l3=l3.split(\";\")\n    l1=l1[0].split(\" \")\n    l2=l2[0].split(\" \")\n    l3=l3[0].split(\" \")\n    d1={\"name\":\"\".join(l1),\"surname\":\"\".join(l2)}\n    d2={\"name\":\"\".join(l3),\"surname\":\"\".join(l1)}\n    d3={\"name\":\"\".join(l1),\"surname\":\"\".join(l2)}\n    return d1, d2, d3\n",
        "num_ids": 163
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = {}\n    for i in l1:\n        for j in l2:\n            if i == j:\n                l4[i] = l3[j]\n            elif j == l2[-1]:\n                l4[i] = l3[j]\n    return l4\n",
        "num_ids": 74
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                d.update({i:j})\n                \n    return d\n",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for el in l1:\n        d1[el] = convert_list_dictionary(l2, l3, el)\n    return d1\n",
        "num_ids": 44
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    from collections import defaultdict\n    d1 = defaultdict(list)\n    for d2 in l1:\n        for item in d2:\n            d1[item] += [d2[item]]\n    for d3 in l2:\n        for item in d3:\n            d1[item] += [d3[item]]\n    for item in l3:\n        d1[item] = dict(l3[item])\n    return d1\n",
        "num_ids": 109
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict()\n    d2 = dict()\n    for item in l1:\n        if item in l2:\n            d1[item] = l2[item]\n        else:\n            d1[item] = l3\n    for item in l2:\n        if item in l3:\n            d2[item] = l3[item]\n        else:\n            d2[item] = l1\n    return d1, d2\n",
        "num_ids": 110
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        for x in i:\n            if type(x) is list:\n                if type(x) is dict:\n                    if x not in d.keys():\n                        d[x] = []\n                    d[x].append(x)\n                else:\n                    d[x] = x\n            else:\n                d[x] = x\n    for i in l2:\n        for x in i:\n            if type(x) is list:\n                if type(x) is dict:\n                    if x not in d.keys():\n                        d[x] = []\n                    d[x].append(x)\n                else:\n                    d[x] = x\n            else:\n                d[x] = x\n    for i in l3:\n        if type(i) is list:\n            for x in i:\n                if type(x) is dict:\n                    if x not in d.keys():\n                        d[x] = []\n                    d[x].append(x)\n                else:\n                    d[x] = x\n        else:\n            d[i] = i\n    return d\n",
        "num_ids": 272
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    # iterate over l1 and add the key-value pair to result\n    for item in l1:\n        result[item] = {}\n        for key in l2:\n            result[item][key] = l3[key]\n    # return result\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {\n        'l1': [convert_list_dictionary(e1, l3, l4) for e1, l4 in zip(l1, l2)],\n        'l2': [convert_list_dictionary(e1, l3, l4) for e1, l4 in zip(l1, l2)],\n        'l3': [convert_list_dictionary(e1, l3, l4) for e1, l4 in zip(l1, l2)]\n    }\n",
        "num_ids": 128
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if isinstance(l1, list):\n        l = []\n        for element in l1:\n            if isinstance(element, dict):\n                l.append(element)\n            else:\n                l.append({element: \"value\"})\n        return {\"result\": l}\n    elif isinstance(l2, list):\n        l = []\n        for element in l2:\n            if isinstance(element, dict):\n                l.append(element)\n            else:\n                l.append({element: \"value\"})\n        return l\n    elif isinstance(l3, list):\n        l = []\n        for element in l3:\n            if isinstance(element, dict):\n                l.append(element)\n            else:\n                l.append({element: \"value\"})\n        return l\n    elif isinstance(l3, dict):\n        l = {}\n        for key, value in l3.items():\n            if isinstance(value, list):\n                l[key] = convert_list_dictionary(l[key], value, l3[key])\n            else:\n                l[key] = l3[key]\n        return l\n    else:\n        return l3\n",
        "num_ids": 287
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda n: (n/2 + n/3 + n/4 + n/5)\n    sum = lambda n: sum(map(lambda x: f(x), range(1, n+1)))\n    return max(sum(range(1, n+1)))\n",
        "num_ids": 67
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #your code here\n    n_1 = n // 2\n    n_2 = n // 3\n    n_3 = n // 4\n    n_4 = n // 5\n    n_5 = n // 6\n    return max(max(max(n_1, n_2, n_3, n_4, n_5), n), n)\n    \n    \n    \n    \n",
        "num_ids": 94
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    max_sum = 0\n    \n    for i in range(1, n + 1):\n        max_sum += f(i)\n    \n    return max_sum\n    \ndef f(n):\n    if n < 1:\n        return 0\n    if n % 2 == 1:\n        return (f(n/2) + f(n/3))\n    else:\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n        \ndef main():\n    print(\"The maximum sum of f(n) = 0\")\n    print(get_max_sum(int(input(\"Enter a number: \"))))\n    print(\"The maximum sum of f(n) = \" + str(get_max_sum(int(input(\"Enter a number: \")))) + \"!\")\n    \nmain(",
        "num_ids": 205
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # your code here\n    \n    \n    return (n*(n*(n+1)/2)+n*(n*(n+1)/3)+n*(n*(n+1)/4)+n*(n*(n+1)/5))\n    \n    \n    \n    \ndef main():\n    n = int(input())\n    print(get_max_sum(n))\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 114
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max (sum(f(n/2) + f(n/3) + f(n/4) + f(n/5), n) for n in range(1, n_val+1))\n",
        "num_ids": 51
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f (n):\n        if n == 0:\n            return 0\n        else:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    return f(n)\n",
        "num_ids": 61
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * 2\n    elif n == 3:\n        return n * 3\n    elif n == 4:\n        return n * 4\n    elif n == 5:\n        return n * 5\n    else:\n        return (n * (n + 1) * (2 * n + 1)) / 6\n",
        "num_ids": 94
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n",
        "num_ids": 76
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # 1. Given n=0\n    # 2. Use (f(n/2) + f(n/3) + f(n/4) + f(n/5))/n\n    # 3. Use the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5))/n )\n    # 4. Return the value of the maximum sum\n    \n    # 1.\n    if n == 0:\n        return 0\n",
        "num_ids": 124
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (f(n) + f(n/2) + f(n/3) + f(n/4) + f(n/5))\n",
        "num_ids": 38
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > maximum:\n            maximum = input_list[i]\n    return maximum\n",
        "num_ids": 54
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    print(input_list)\n    return max(input_list, key=len)\n",
        "num_ids": 23
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 1:\n        return input_list\n    else:\n        return input_list[0:2]\n",
        "num_ids": 35
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # use a \"max\" function and a \"len\" function\n    return max(input_list, key=len)\n    pass\n",
        "num_ids": 33
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for el in input_list:\n        if el > max_length:\n            max_length = el\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # TODO: modify the code so that it returns the largest element in the list\n    \n    #raise NotImplementedError()\n    return max(input_list, key=len",
        "num_ids": 44
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = input_list[0]\n    for i in range(len(input_list)):\n        if input_list[i] > maximum:\n            maximum = input_list[i]\n    return maximum\n    \n",
        "num_ids": 54
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = set(test_tup)\n    if len(tup)!= len(set(tup)):\n        return False\n    return True\n    \ndef check_duplicates(test_tup):\n    '''\n    Write a function to check if given tuple contains duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n    \ndef check_tuple(test_tup):\n    '''\n    Write a function to check if given tuple contains a single duplicate.\n    '''\n    if len(test_tup) == 1:\n        return False\n    for i in range(1,len(test_tup)):\n        if test_tup[i] in test_tup[:i]:\n            return False\n    return True\n    \ndef check_order(test_tup):\n    '''\n    Write a function to check if given tuple contains the same order.\n    '''\n    if len(test_tup) < 2:\n        return False\n    for i in range(len(test_tup) - 1):\n        if test_tup[i]!= test_tup[i + 1]:\n            return False\n    return True\n    \ndef is_in_range(num):\n    '''\n    Write a function to check if a given number is within a range.\n    '''\n    if num <= 0 or num >= 10 ** 6:\n        return False\n    else:\n        return True\n    \ndef is_in_range(num):\n    '''\n    Write a function to check if a given number is within a range.\n    '''\n    if num <= 0 or num >= 10 ** 6:\n        return False\n    elif num >= 10 ** 6:\n        return True\n    else:\n        return True\n    \ndef make_test_tup():\n    '''\n    Write a function to create a tuple of one digit and one digit.\n    '''\n    for i in range(0,10):\n        tup = str(i) + str(i)\n        test_tup.append(tup)\n    \ndef prime_checker(num):\n    '''\n    Write a function to check if given number is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef check_prime(test_tup):\n    '''\n    Write a function to check if given tuple contains a prime number.\n    '''\n    num_list = []\n    num_list.append(test_tup[0])\n    for i in range(1,len(test_tup)):\n        if prime_checker(test_tup[i]) == True:\n            num_list.append(test_tup[i])\n            \n    if len(num_list) == 0:\n        return False\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_tup = set(test_tup)\n    return len(distinct_tup) == len(test_tup)\n",
        "num_ids": 36
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # set of characters in the string\n    char_set = set()\n    for word in test_tup:\n        for char in word:\n            char_set.add(char)\n    return char_set\n",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Your code here\n    return True\n    pas",
        "num_ids": 14
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup_lst = []\n    \n    for item in test_tup:\n        if item not in test_tup_lst:\n            test_tup_lst.append(item)\n",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == 1:\n        return False\n    for value in test_tup:\n        if value in test_tup:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a list\n    test_tup = list(tup)\n    # check if it contains only one distinct item\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return True if len(test_tup) == len(set(test_tup)) else False\n",
        "num_ids": 26
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    if len(str1) == 0:\n        return \"\"\n    elif len(freq) == 1:\n        return freq.keys()[0]\n    elif len(freq) == 2:\n        return freq.keys()[0] if freq.values()[1] > freq.values()[0] else freq.keys()[1]\n    elif len(freq) > 2:\n        return \"\"\n",
        "num_ids": 150
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    i = 0\n    char_array = []\n    for char in str1:\n        if char not in char_array:\n            char_array.append(char)\n        else:\n            i += 1\n    if i == 0:\n        return ''\n    else:\n        return char_array[0]\n",
        "num_ids": 75
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) <= 1:\n        return 'None'\n    s = set(str1)\n    if len(s) == 1:\n        return s.pop()\n    else:\n        return s.pop()\n",
        "num_ids": 56
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1)<=1:\n        return None\n    \n    count={}\n    for i in str1:\n        count[i]=count.get(i,0)+1\n    \n    for i in str1:\n        if count[i]==1:\n            return i\n    return None\n",
        "num_ids": 76
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # character counts\n    character_counts = {}\n    # loop through the given string\n    for char in str1:\n        # if char is in the dictionary, increment the count\n        if char in character_counts:\n            character_counts[char] += 1\n        # else add it\n        else:\n            character_counts[char] = 1\n    # find the first occurance of that character\n    return char\n",
        "num_ids": 101
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for character in str1:\n        if character not in count:\n            count[character] = 1\n        else:\n            count[character] += 1\n    for key, value in count.items():\n        if value == 1:\n            return key\n    return''\n",
        "num_ids": 69
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a set to store the characters in\n    set_1 = set(str1)\n    # iterate through the characters\n    for char in str1:\n        if char in set_1:\n            # remove that character from the set\n            set_1.remove(char)\n        else:\n            return char\n    # return the first character in the set\n    return list(set_1)[0]\n",
        "num_ids": 97
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char not in count:\n            count[char] = 0\n        count[char] += 1\n    for k, v in count.items():\n        if v == 1:\n            return k\n    return None\n",
        "num_ids": 65
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1_list = list(str1)\n    return str(str1_list.count(str1_list[0]))\n",
        "num_ids": 34
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counter = dict()\n    for letter in str1:\n        if letter not in counter:\n            counter[letter] = 1\n        else:\n            counter[letter] += 1\n    for key in counter.keys():\n        if counter[key] == 1:\n            return key\n    else:\n        return None\n",
        "num_ids": 75
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check = re.search(regex, string)\n    return check\n",
        "num_ids": 19
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    flag = 0\n    for c in string: \n        if c in string:\n            flag += 1\n    return flag == len(string)\n",
        "num_ids": 36
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Your code here\n    if string[0:2] == 'a':\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n    \n",
        "num_ids": 18
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    m = re.findall(regex, string)\n    if m:\n        for i in m:\n            if i[0] == i[-1]:\n                return True\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.search(regex, string):\n        return 'not a valid string'\n    else:\n        return True\ndef check_length(string):\n    '''\n    Write a function to check the length of the given string.\n    '''\n    if len(string) < 3:\n        return 'not a valid string'\n    else:\n        return True\ndef is_valid(string):\n    '''\n    Write a function to check if a given string is valid or not.\n    '''\n    # check if the input string is a valid string\n    if check_char(string)!= 'not a valid string':\n        return True\n",
        "num_ids": 34
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string_check = re.match(regex, string)\n    if string_check == None:\n        return False\n    else:\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if string.startswith(string) or string.endswith(string):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    try:\n        s = string[0]\n        f = string[-1]\n        t = s + f\n        if t == string:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef check_word(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same word or not.\n    '''\n    try:\n        s = string[0]\n        t = string[-1]\n        f = t + s\n        if f == string:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef check_punct(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same punctuation or not.\n    '''\n    try:\n        s = string[0]\n        f = string[-1]\n        t = s + f\n        if t == string:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef check_digit(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same digit or not.\n    '''\n    try:\n        s = string[0]\n        t = string[-1]\n        f = t + s\n        if f == string:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    res = True\n    temp = string.split(' ')\n    print(temp)\n    for char in temp:\n        if temp.index(char)!= len(temp)-1:\n            res = False\n            break\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    mid_a = a + (b+c)//2\n    mid_b = b + (a+c)//2\n    mid_c = c + (a+b)//2\n",
        "num_ids": 47
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import statistics\n    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[len(numbers)//2]\n",
        "num_ids": 38
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        return 0\n    elif len(a)==0:\n        return max(b)\n    elif len(b)==0:\n        return min(c)\n    elif len(c)==0:\n        return (max(a)+min(b))/2\n    else:\n        return (min(a)+max(b)+min(c))/3\n",
        "num_ids": 113
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = (a + b + c) // 3\n    if x % 2 == 0:\n        return (a + b + c) // 2\n    else:\n        return (a + c + b) // 2\n",
        "num_ids": 52
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a + b + c) / 3\n",
        "num_ids": 14
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<2:\n        return a[0]\n",
        "num_ids": 19
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)>0 and len(b)>0 and len(c)>0:\n        if a[0]+b[0]+c[0]==0:\n            return(0)\n        else:\n            n1=a[0]+b[0]+c[0]\n            n2=a[1]+b[1]+c[1]\n            n3=a[2]+b[2]+c[2]\n            if n1>n2 and n1>n3:\n                return(n1)\n            elif n2>n3:\n                return(n2)\n            else:\n                return(n3)\n",
        "num_ids": 155
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0:\n        return None\n    elif len(a) == 1:\n        return a[0]\n    else:\n        return sorted(a[:2]) + sorted(a[2:])[len(a[:2])//2]\n",
        "num_ids": 67
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == len(b) == len(c):\n        return (sorted(a) + sorted(b) + sorted(c))[len(a)/3]\n",
        "num_ids": 45
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(list(map(int, str(num)))) % 10)\n    return result",
        "num_ids": 39
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int,str(nums)))\n",
        "num_ids": 16
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n",
        "num_ids": 39
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Concatenate the list into a string and return it\n    str_nums = ''.join(nums)\n    return sum(map(int,str_nums))\n",
        "num_ids": 45
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n",
        "num_ids": 24
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #calculate the sum of all the digits of the numbers in the list\n    #if the list is empty, return 0\n    #if the number is 0, return 1\n    #if the list is not empty, iterate through the list,\n    #and add the numbers to the sum\n    #return the sum\n    \n    \n    sum = 0\n    #iterate through the list\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n    ",
        "num_ids": 118
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def digit_sum(numbers):\n        total = 0\n        for number in numbers:\n            total += int(number)\n        return total\n    return digit_sum(nums)\n",
        "num_ids": 46
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # TODO: take in a list of numbers and compute the sum\n    sum = 0\n    for num in nums:\n        sum += num\n",
        "num_ids": 36
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n",
        "num_ids": 34
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (test_tup1[0] << 1) + (test_tup1[1] << 2) + (test_tup1[2] << 3)\n    test_tup2 = (test_tup2[0] << 1) + (test_tup2[1] << 2) + (test_tup2[2] << 3)\n    return (test_tup1, test_tup2)\n",
        "num_ids": 110
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            for j in range(len(test_tup2)):\n                if test_tup1[i] == test_tup2[j]:\n                    test_tup1[i] = 0\n                else:\n                    test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise AND operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 1:\n                test_tup1[i] = 0\n            else:\n                test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n    \ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise OR operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 1:\n                test_tup1[i] = 0\n            else:\n                test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n    \ndef bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # base case\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 1:\n                test_tup1[i] = 0\n            else:\n                test_tup1[i] = 1\n    else:\n        print('Error: the tuples don\\'t match in size')\n        return\n    return test_tup1\n",
        "num_ids": 116
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples must be the same size!')\n",
        "num_ids": 38
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tup1[0] ^ tup2[0], tup1[1] ^ tup2[1]\n",
        "num_ids": 31
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1, test_tup2 = test_tup1[0], test_tup1[1]\n    if len(test_tup2)!= len(test_tup1):\n        return False\n    for i in range(len(test_tup2)):\n        if not(test_tup2[i] == test_tup1[i]):\n            return False\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert the tuples into a list of lists and then compare them\n    list_tup1 = list(test_tup1)\n    list_tup2 = list(test_tup2)\n    print(list_tup1)\n    print(list_tup2)\n    # find the first and second element in the list\n    first_tup = list_tup1.pop(0)\n    second_tup = list_tup2.pop(0)\n    print(first_tup)\n    print(second_tup)\n    # convert the first element to a string and then add it to the second element\n    first_tup_str = str(first_tup)\n    second_tup_str = str(second_tup)\n    print(first_tup_str)\n    print(second_tup_str)\n    # convert the string to a list of integers and then combine the first and second elements\n    first_tup_int = [int(x) for x in first_tup_str]\n    second_tup_int = [int(x) for x in second_tup_str]\n    print(first_tup_int)\n    print(second_tup_int)\n    # set the length of the new lists\n    length = len(first_tup_int)\n    print(length)\n    # iterate through the lists\n    for x in range(length):\n        # remove the first element from the list\n        first_tup_int.pop(0)\n        # add the second element to the list\n        second_tup_int.append(first_tup_int.pop(0))\n        # print out the lists\n        print(first_tup_int)\n        print(second_tup_int)\n    # return the resulting list\n    return(second_tup_int)\n",
        "num_ids": 443
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #Hint: You can use bitwise operator to perform the bitwise xor operation\n    '''\n    >>> bitwise_xor(('a','b'), ('c','d'))\n    'ab'\n    '''\n    xor_res = [str(test_tup1[0]) + str(test_tup2[0]), str(test_tup1[1]) + str(test_tup2[1])]\n    return xor_res\n",
        "num_ids": 60
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(tup1[i] ^ tup2[i] for i in range(len(tup1)))\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # TODO: WRITE YOUR CODE HERE\n    a = test_tup1[0]\n    b = test_tup2[0]\n    result = []\n    for i in range(0, len(a)):\n        if a[i]!= b[i]:\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # get a list of all the tuples in the list\n    tuple_list = []\n    for list_item in test_list:\n        for item in list_item:\n            tuple_list.append(item)\n    #print(tuple_list)\n    # create a count dictionary to count the number of unique tuples\n    # at this point, the counter will be set to 1, because there are only unique tuples in the list\n    count_dict = {}\n    for count in tuple_list:\n        if count not in count_dict:\n            count_dict[count] = 1\n        else:\n            count_dict[count] = count_dict[count] + 1\n    #print(count_dict)\n    return count_dict\n",
        "num_ids": 177
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = [0 for i in range(1, len(test_list)+1)]\n    for test in test_list:\n        temp = [0 for i in range(1,len(test)+1)]\n        temp[test[0]] = 1\n        freq_list[test[0]+1] = temp[test[1]]\n    return(freq_list)\n",
        "num_ids": 93
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for tup in test_list:\n        freq_list.append(tup[1])\n    freq_list.sort()\n    return len(freq_list)\n",
        "num_ids": 53
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for element in test_list:\n        if element[0] in freq_dict.keys():\n            freq_dict[element[0]] += 1\n        else:\n            freq_dict[element[0]] = 1\n    return freq_dict\n",
        "num_ids": 71
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    print(freq_dict)\n    return freq_dict\n",
        "num_ids": 78
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniques = set()\n    for index, row in test_list.iterrows():\n        uniques.add(row['text'])\n    return uniques\n",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        freq[i] = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j]:\n                freq[test_list[i]] = freq[test_list[i]] + 1\n    return freq\n",
        "num_ids": 100
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return Counter(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique = set()\n    for i in test_list:\n        if i not in unique:\n            unique.add(i)\n    return len(unique)\n",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    import numpy as np\n    # Create a dictionary containing unique frequencies.\n    counts = {}\n    for i in test_list:\n        counts[i] = counts.get(i, 0) + 1\n    # Create a new dictionary that sums up the values.\n    # Each key in the new dictionary is a key in the dictionary, and each value is the number of occurrences.\n    total_count = {}\n    for i in counts:\n        total_count[i] = counts[i]\n    # Create an array with the frequency of tuples.\n    tup_freq = np.array([total_count[i]/len(test_list) for i in counts])\n    # Get the index of the maximum frequency.\n    max_freq_idx = np.argmax(tup_freq)\n    # Return the maximum frequency index.\n    return max_freq_idx",
        "num_ids": 210
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tuple = tuple([test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))])\n    print(add_tuple)\n    return add_tuple\n",
        "num_ids": 58
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuples(tup1, tup2):\n        '''\n        function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        result = (tup1[0] + tup2[0],tup1[1] + tup2[1])\n        return result\n    return add_tuples(test_tup1, test_tup2)\n",
        "num_ids": 57
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    return test_tup1 + test_tup2\n",
        "num_ids": 18
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)\n    elif isinstance(test_tup1, tuple):\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)\n    elif isinstance(test_tup2, tuple):\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)\n    else:\n        print(\"The second argument should be a tuple\")\n",
        "num_ids": 217
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # write your code here\n    return test_tup1[0]+test_tup2[0]\n    pass\n",
        "num_ids": 31
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    \n    tup1.append(tup2[0])\n    tup1.append(tup2[1])\n    \n    tup2.insert(1, tup2[2])\n    \n    return tuple(tup1)\n    \n    \ntest_tuple = (1, 2, 3)\ntest_tuple = ('a', 'b', 'c')\n",
        "num_ids": 121
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples_2(test_tup1, test_tup2):\n        return tuple(test_tup1 + test_tup2)\n    return add_nested_tuples_2(test_tup1, test_tup2)\n",
        "num_ids": 69
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a = []\n    for elem in test_tup1:\n        a.append(elem)\n    for elem in test_tup2:\n        a.append(elem)\n    \n    return tuple(a)\n",
        "num_ids": 58
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = list(test_tup1)\n    for i in range(len(result)):\n        result[i] = test_tup2[i] + result[i]\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in test_tup1:\n        for j in test_tup2:\n            test_tup1[i][j] = test_tup1[i][j] + test_tup2[i][j]\n    return test_tup1\n    \ndef test_add_nested_tuples():\n    '''\n    Write a function that adds two tuples of specified data type and inserts them into a list.\n    '''\n    test_tup1 = [(1,2), (4,5,6), 7, 8]\n    test_tup2 = [(1,2,3), (4,5,6), 7, 8]\n    test_tup1 = add_nested_tuples(test_tup1, test_tup2)\n    \n    return test_tup1\n",
        "num_ids": 90
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    while a <= b:\n        if a == b:\n            return a\n        a = a + (a-b)//2\n    return -1\n",
        "num_ids": 54
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        small=a\n        big=b\n    else:\n        small=b\n        big=a\n    \n    while big!=0:\n        remainder=small%big\n        small=small//big\n        big=big*remainder+small\n    \n    return small\n",
        "num_ids": 76
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return (a if a<b else b) if a<b else (a if a>b else b)\n",
        "num_ids": 28
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    if a<0:\n        a=0-a\n    if b<0:\n        b=0-b\n    min=a\n    if a>b:\n        min=a\n    return min\n",
        "num_ids": 67
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a>b else b\n",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if len(a)>len(b):\n        return min(a,b)\n    else:\n        return max(a,b)\nprint(minimum([5,4,3,2,1],6))\n",
        "num_ids": 53
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return \"invalid\"\n    elif a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 46
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b == 0:\n        return a\n    elif b < 0:\n        return minimum(-a,b)\n    else:\n        return a\n",
        "num_ids": 38
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1[0]: \n        for t1 in range(len(tuple1)-1):\n            if tuplex[t1] == tuple1[t1+1]:\n                return True\n        return False\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0]==tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex: \n        if tuplex == tuple1: \n            return True\n        else: \n            return False\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=False\n    if tuplex[0] == tuple1:\n        check=True\n    return check\n",
        "num_ids": 29
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        for j in range(len(tuple1)):\n            if tuplex[i] == tuple1[j]:\n                return i\n    return None\n",
        "num_ids": 53
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n    return False\n    \ndef get_tuple(tupl1,tupl2):\n    '''\n    Write a function to get the the tuple of two tuples.\n    '''\n    return tupl1,tupl2\n    \ndef del_tuple(tupl):\n    '''\n    Write a function to delete a tuple.\n    '''\n    tupl.pop()\n    return tuple(tupl)\n    \ndef sort(list1):\n    '''\n    Write a function to sort a list.\n    '''\n    list1.sort()\n    return list1\n    \ndef add_tuple(tupl,tuple2):\n    '''\n    Write a function to add a tuple to another tuple.\n    '''\n    tupl.append(tuple2)\n    return tuple(tupl)\n    \ndef reverse(tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuple(reversed(tup))\n    \ndef gen_unique_numbers():\n    '''\n    Write a function to generate a list of unique numbers in a list.\n    '''\n    numbers = list(range(0,100))\n    return numbers\n    \ndef add_numbers(numbers):\n    '''\n    Write a function to add two numbers.\n    '''\n    numbers.append(11)\n    return numbers\n    \ndef insert_numbers(numbers,num):\n    '''\n    Write a function to insert an element in a list.\n    '''\n    numbers.insert(2,num)\n    return numbers\n    \ndef is_even(num):\n    '''\n    Write a function to check whether the element of a list is even.\n    '''\n    if num % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1[0]:\n        print (\"There is no violation\")\n    elif tuplex[1] == tuple1[1]:\n        print (\"There is no violation\")\n    else:\n        print (\"There is no violation\")\n",
        "num_ids": 64
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)):\n        for j in range(0,len(tuple1)):\n            if tuplex[i] == tuple1[j]:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 == ():\n        print('The tuple is empty.')\n    else:\n        print('The tuple has one or more elements.')\n        print('The first element is: ',tuplex[0])\n        if tuplex[0] in tuple1:\n            print('The tuple has the element: ',tuplex[0])\n            print('The second element is: ',tuplex[1])\n        else:\n            print('The tuple has the element: ',tuplex[0])\n            print('The second element is not: ',tuplex[1])\n",
        "num_ids": 137
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x < 0:\n        print('The number is not a paritay.')\n    else:\n        if x % 2 == 0:\n            print('The number is paritay.')\n        else:\n            print('The number is not paritay.')\nfind_Parity(3) \nfind_Parity(5) \nfind_Parity(6)\nfind_Parity(8)\nfind_Parity(123)\nfind_Parity(1234)\nfind_Parity(12345)\nfind_Parity(12345678)\nfind_Parity(1234567890)\nfind_Parity(123456789)\nfind_Parity(1234567890)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(123456789)\nfind_Parity(12345678",
        "num_ids": 2013
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2) == 1:\n        return \"parity odd\"\n    else:\n        return \"parity even\"\n",
        "num_ids": 33
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The number is even'\n    else:\n        return 'The number is odd'\n",
        "num_ids": 33
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    for i in range(len(x)):\n        sum += x[i]\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Write your code here\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return \"odd\"\n    else:\n        return \"even\"\n",
        "num_ids": 29
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    print(x)\n    if (x%2==1):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0: \n        return True \n    else: \n        return False\n",
        "num_ids": 28
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def rearrange_smaller(n):\n        # # Since n is a single digit number, return this simpler version\n        if len(str(n)) == 1:\n            return n\n        elif len(str(n)) == 2:\n            return (n//10) * 10 + n % 10\n        else:\n            # # Since n is a number larger than 1, use the next higher number (1, 2,..., 10)\n            # to get the next higher number, n = n//10 + 1 * 10 + n % 10\n            # Or use the next number (1, 2,..., 10) to get the next number with the next larger digits\n            return (n//10) * 10 + (n % 10) + 1\n    # # First, do the same thing as the previous, except skip the digits 0 and 1\n    # return str(rearrange_smaller(rearrange_smaller(n//10))) + str(n%10)\n    # Let's now return n//10 + 1 * 10 + n % 10\n    return n//10 + 1 * 10 + n % 10\n",
        "num_ids": 253
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num=int(n)\n    while num>0:\n        dig=num%10\n        num=num//10\n        if dig==1:\n            return num\n        elif dig==2:\n            num=num*10+1\n    else:\n        return 0\n",
        "num_ids": 67
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str = str(n)\n    num = list(str)\n    index = int(len(str)/2)\n    for i in range(index):\n        num[i] = str[i] + str[len(str) - 1 - i]\n        num.insert(i, str[len(str) - 1 - i])\n    num.reverse()\n    return \"\".join(num)\n",
        "num_ids": 96
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # add the digits at the end to the list\n    n += [0] * (len(str(n))-1)\n    # add the digits at the start to the list\n    n[::-1]\n    # concatinate all digits\n    a = [str(n[i]) for i in range(len(n))]\n    b = [a[i] for i in range(len(n)-1, -1, -1)]\n    a = [b[i] for i in range(len(n))]\n    # concatinate all digits in the other array\n    if len(str(a))>1:\n        c = [str(n[i]) for i in range(len(n))]\n        d = [c[i] for i in range(len(n))]\n        e = [d[i] for i in range(len(n)-1, -1, -1)]\n        a = [e[i] for i in range(len(n))]\n        # concatenate all digits at the end to the new string\n        c = [a[i] for i in range(len(n))]\n        c = [c[i] for i in range(len(n)-1, -1, -1)]\n        a = [c[i] for i in range(len(n))]\n        # concatenate all digits at the start to the new string\n        a = [a[i] for i in range(len(n))]\n        a = [a[i] for i in range(len(n)-1, -1, -1)]\n        # concatenate all digits at the end to the new string\n        e = [a[i] for i in range(len(n))]\n        a = [e[i] for i in range(len(n))]\n        a = [a[i] for i in range(len(n))]\n    else:\n        a = [a[i] for i in range(len(n))]\n        a = [a[i] for i in range(len(n)-1, -1, -1)]\n        a = [a[i] for i in range(len(n))]\n        a = [a[i] for i in range(len(n))]\n    c = [a[i] for i in range(len(n))]\n    e = [a[i] for i in range(len(n))]\n    c = [c[i] for i in range(len(n)-1, -1, -1)]\n    e = [e[i] for i in range(len(n))]\n    a = [e[i] for i in range(len(n))]\n    # concatenate all digits at the start to the new string\n    c = [c[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    c = [c[i] for i in range(len(n)-1, -1, -1)]\n    a = [a[i] for i in range(len(n))]\n    # concatenate all digits at the end to the new string\n    d = [c[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    d = [d[i] for i in range(len(n)-1, -1, -1)]\n    a = [a[i] for i in range(len(n))]\n    # concatenate all digits at the start to the new string\n    d = [d[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    e = [d[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # concatenate all digits at the end to the new string\n    f = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    e = [e[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine the digits at the end to the new string\n    f = [e[i] for i in range(len(n))]\n    d = [f[i] for i in range(len(n)-1, -1, -1)]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the start to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    f = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the end to the new string\n    f = [f[i] for i in range(len(n))]\n    d = [f[i] for i in range(len(n)-1, -1, -1)]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the start to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the end to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the start to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the end to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the start to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the end to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    # combine all digits at the start to the new string\n    a = [f[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))]\n    a = [a[i] for i in range(len(n))",
        "num_ids": 2010
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = 0\n    num = 0\n    while (n > 0):\n        new_num = n % 10\n        n = n // 10\n        num = num * 10 + new_num\n    return num\n",
        "num_ids": 53
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    result = ''\n    for i in range(len(s)):\n        num = int(s[i])\n        if num < 9:\n            result += str(num)\n        else:\n            result += str(num//10)\n            num = num % 10\n    return int(result)\n",
        "num_ids": 80
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        return(int(''.join(str(x) for x in n[::-1])))\n    return(next_bigger(n))\n",
        "num_ids": 46
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n//10**(len(str(n))-1) + (n%10) if n > 0 else n\n",
        "num_ids": 31
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        x=1\n        while n//10**(len(str(n))-1)>0:\n            x=x*10\n        return x\n        \n",
        "num_ids": 55
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    \n    num_list = list(num)\n    print(num_list)\n    \n    temp_list = []\n    for i in num_list:\n        if i > 10:\n            temp_list.append(i)\n        else:\n            temp_list.append(int(i))\n            \n    print(temp_list)\n    \n    largest_number = max(temp_list)\n    \n    rearranged_list = []\n    for i in range(len(temp_list)):\n        if temp_list[i] == largest_number:\n            rearranged_list.append(i)\n    print(rearranged_list)\n    \n    next_bigger = largest_number\n    for i in range(len(rearranged_list)):\n        next_bigger = next_bigger * 10 + temp_list[rearranged_list[i]]\n        print(next_bigger)\n    \n    return next_bigger\n        \n",
        "num_ids": 240
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    pairs_length = []\n    temp_length = 0\n    temp = 0\n    sorted_arr = []\n    heapq.heapify(pairs)\n    heapq.heapify(pairs_length)\n    for i in range(len(nums1)):\n        for j in range(i,len(nums1)):\n            if nums1[i] == nums1[j] and temp_length == 0 and nums2[j] == nums2[i]:\n                temp_length += 1\n                sorted_arr.append((nums1[i], nums1[j]))\n                heapq.heappush(pairs, (len(sorted_arr) + 1, sorted_arr))\n                heapq.heappush(pairs_length, (len(sorted_arr) + 1, sorted_arr))\n                sorted_arr.clear()\n                temp_length = 0\n            elif nums1[i]!= nums1[j] and nums2[j] == nums2[i]:\n                temp_length += 1\n                sorted_arr.append((nums1[i], nums2[j]))\n                heapq.heappush(pairs, (len(sorted_arr) + 1, sorted_arr))\n                heapq.heappush(pairs_length, (len(sorted_arr) + 1, sorted_arr))\n                sorted_arr.clear()\n                temp_length = 0\n            elif nums1[i] == nums1[j] and nums2[j] == nums2[i]:\n                temp_length += 1\n                sorted_arr.append((nums1[i], nums2[j]))\n                heapq.heappush(pairs, (len(sorted_arr) + 1, sorted_arr))\n                heapq.heappush(pairs_length, (len(sorted_arr) + 1, sorted_arr))\n                sorted_arr.clear()\n                temp_length = 0\n",
        "num_ids": 502
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heapq.heapify(result)\n    # combine the elements in the first array into a sorted array\n    for i in range(len(nums1)):\n        heapq.heappush(result, nums1[i] * nums2[i])\n    print(result)\n",
        "num_ids": 78
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # TO DO\n    \n    # Method 1\n    heap = [(num1, idx) for idx, num1 in enumerate(nums1)]\n    heapq.heapify(heap)\n    res = 0\n    while heap:\n        a, idx = heapq.heappop(heap)\n        b, idx = heapq.heappop(heap)\n        if a * b > k:\n            continue\n        res += 1\n        if idx + 1 < len(nums1) and a * nums1[idx + 1] > b * nums1[idx]:\n            heapq.heappush(heap, (a * nums1[idx + 1], idx + 1))\n    return res\n",
        "num_ids": 184
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #find the number of pairs\n    length = len(nums1)\n    pairs = 0\n    for i in range(len(nums1)):\n        for j in range(i, len(nums1)):\n            if nums1[i] + nums1[j] == nums2[i] + nums2[j] and nums1[i]!= nums2[j]:\n                #print(\"i\", i, \"j\", j)\n                pairs += 1\n    return pairs\n",
        "num_ids": 125
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    #num1 = num1[1:] + num1[0]\n    #num2 = num2[1:] + num2[0]\n    \n    #nums1 = nums1[1:] + nums1[0]\n    #nums2 = nums2[1:] + nums2[0]\n    \n    h = []\n    for i in range(0,len(nums1)):\n        heapq.heappush(h,(nums1[i],i+1))\n    \n    smallest_pair = []\n    for i in range(k-1):\n        heapq.heappop(h)\n        smallest_pair.append(heapq.heappop(h))\n        heapq.heappush(h,(nums2[smallest_pair[0]],smallest_pair[1]))\n    \n    return smallest_pair\n    ",
        "num_ids": 220
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n",
        "num_ids": 44
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in range(len(nums1)):\n        heapq.heappush(h, (abs(nums1[i]-nums2[i]),i))\n    for _ in range(k):\n        tmp,i=heapq.heappop(h)\n        print(tmp,i)\n    return h\n",
        "num_ids": 87
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create heap to find min heap of nums1 and nums2\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    # create hashmap to map each num to its index\n    count = {}\n    for i in range(len(nums1)):\n        count[nums1[i]] = i\n",
        "num_ids": 93
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 1:\n        return nums1 == nums2\n    elif k == 2:\n        return nums1 == nums2[::-1]\n",
        "num_ids": 42
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        smaller = nums1\n        larger = nums2\n    else:\n        smaller = nums2\n        larger = nums1\n    # remove duplicates\n    while len(smaller) >= k:\n        heapq.heappush(smaller, heapq.heappop(larger) + heapq.heappop(larger) - 1)\n    return len(smaller)\n",
        "num_ids": 116
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = None\n    minimum_tuple = None\n    for lst in list1:\n        for i in lst:\n            if minimum is None:\n                minimum = i\n                minimum_tuple = (i,i)\n            elif minimum > i:\n                minimum = i\n                minimum_tuple = (i,i)\n    return minimum_tuple\n",
        "num_ids": 88
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # if there are only 1 element, the output is 1, no need to convert it to a list.\n    if len(list1) == 1:\n        return list1[0]\n    # if there are no elements, just return that element.\n    else:\n        return list1[0] * list1[1]\n",
        "num_ids": 77
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(tuple(map(min, zip(list1, list1[1:])))[0], tuple(map(min, zip(list1, list1[1:])))[1])\n",
        "num_ids": 48
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0][0] * list1[1][0]\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            minimum = min(minimum, list1[i][0] * list1[j][1])\n    return minimum\n",
        "num_ids": 82
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_list.append(min(list1[i], list1[j]))\n    return min_list\n",
        "num_ids": 66
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    t = min(list1)\n    l = len(list1)\n    if l < 3:\n        return -1\n    elif l == 3:\n        return t\n    for i in range(l-2):\n        for j in range(i+1,l-1):\n            if list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                t = min(t,list1[i][1]*list1[j][1])\n    return t\n",
        "num_ids": 131
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return\n    min1 = list1[0]\n    min2 = list1[1]\n    for i in range(2,len(list1)):\n        if list1[i] < min1:\n            min1 = list1[i]\n            min2 = list1[i-1]\n    return min(min2,min1)\n",
        "num_ids": 96
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = 0\n    \n    for i in range(0, len(list1)):\n        minimum = list1[i][1]\n        for j in range(i+1, len(list1)):\n            if list1[j][1] < minimum:\n                minimum = list1[j][1]\n    return minimum\n",
        "num_ids": 80
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]\n    min_product_1 = list1[0][1]\n    min_product_2 = list1[0][2]\n    for i in range(len(list1)):\n        if list1[i][0] < min_product:\n            min_product = list1[i][0]\n            min_product_1 = list1[i][1]\n            min_product_2 = list1[i][2]\n    return min_product_1, min_product_2\n",
        "num_ids": 130
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval:\n        min = listval[0]\n        for val in listval:\n            if val < min:\n                min = val\n        return min\n    else:\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Create a empty list\n    min = []\n    \n    # Add all values to list\n    for element in listval:\n        min.append(element)\n    \n    # Initialize minimum element\n    minimum = min[0]\n    \n    # Loop through the list, adding minimum element to list\n    for element in min:\n        if element < minimum:\n            minimum = element\n    \n    return minimum\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Create a empty list\n    max = []\n    \n    # Add all values to list\n    for element in listval:\n        max.append(element)\n    \n    # Initialize maximum element\n    maximum = max[0]\n    \n    # Loop through the list, adding maximum element to list\n    for element in max:\n        if element > maximum:\n            maximum = element\n    \n    return maximum\n",
        "num_ids": 97
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n",
        "num_ids": 42
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        minval=listval[0]\n        for elem in listval:\n            if elem<minval:\n                minval=elem\n        return minval\n",
        "num_ids": 61
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 69
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError(\"The list is empty\")\n    elif len(listval) == 1:\n        return listval[0]\n    elif listval[0] > listval[1]:\n        return listval[1]\n    else:\n        return listval[0]\n",
        "num_ids": 79
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n",
        "num_ids": 50
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # YOUR CODE HERE\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n",
        "num_ids": 41
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    s = ''\n    for i in range(len(word)):\n        s += word[i]\n        if i < (len(word) - 1):\n            s +=''\n    return s.capitalize()\n",
        "num_ids": 63
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split()\n    return''.join(word[::-1])\n",
        "num_ids": 22
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    t = re.findall('[a-zA-Z]+', word)\n    d = dict(((re.sub('_', '', x)).upper(), x) for x in t)\n    return ''.join([d[x] for x in d])\n",
        "num_ids": 64
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.islower():\n        return word\n    else:\n        return word.capitalize()\n",
        "num_ids": 26
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    l = re.split('([a-z])', word)\n    return ''.join([x.capitalize() for x in l])\n",
        "num_ids": 35
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'[^A-Za-z0-9_]','_',word)\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'[^a-zA-z0-9_]','_',word)",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return camel_case\n",
        "num_ids": 42
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('([a-z])([A-Z])', r'\\1_\\2', word).lower()\n",
        "num_ids": 33
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = re.compile('(.)([A-Z][a-z]+)')\n    return regex.sub(r'\\1 \\2', word)\n",
        "num_ids": 41
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # your code goes here\n    pattern = r\"[A-Z]\"\n    if re.fullmatch(pattern, word):\n        if word[0] == \"A\":\n            return word[1:]+ word[0]\n        else:\n            return word[0] + word[1:]\n    else:\n        return word\n",
        "num_ids": 78
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return l\n    elif len(l) == 1:\n        return l.pop()\n    else:\n        return remove_odd(l[1:]) + l[0]\n",
        "num_ids": 55
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result=[]\n    for i in l:\n        if i%2==0:\n            result.append(i)\n    print(result)\n",
        "num_ids": 37
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2!=0]\n",
        "num_ids": 19
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for x in l:\n        if x % 2!= 0:\n            l2.append(x)\n    return l2\n",
        "num_ids": 39
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 1:\n            l.remove(i)\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l:\n        return [x for x in l if x % 2!= 0]\n    else:\n        return []\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        raise Exception(\"n cannot be less than zero\")\n    for i in range(n-1):\n        list1 = list1[i]\n    return list1\n",
        "num_ids": 47
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        print(f'n must be non-negative')\n    elif n > len(list1)-1:\n        print(f'n must be less than the length of the list')\n    else:\n        return list1[n]\n",
        "num_ids": 64
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    assert n >= 1, 'n must be a positive integer'\n    for x in range(n-1):\n        yield list1[x]\n    yield list1[n-1]\n",
        "num_ids": 48
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \n    ",
        "num_ids": 13
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1)<n:\n        raise IndexError(str(len(list1))+'is less than '+str(n))\n    else:\n        return list1[n]\n",
        "num_ids": 49
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1.count(list2[0])!=len(list1):\n        return False\n    elif list1.count(list2[-1])!=len(list1):\n        return False\n    elif list2[0] not in list1:\n        return False\n    elif list2[-1] not in list1:\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!=list2[i]:\n                return False\n        return True\n",
        "num_ids": 129
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # initialize variables\n    first = list1[0]\n    last = list1[-1]\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    if list1==None and list2==None:\n        return True\n    elif list1==None or list2==None:\n        return False\n    else:\n        if list1[0]<=list2[0] or list1[0]>=list2[0] or list1[-1]<=list2[-1] or list1[-1]>=list2[-1]:\n            return True\n        else:\n            return False\n",
        "num_ids": 113
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap=True\n    if len(list1)>len(list2):\n        for index in range(0,len(list1)):\n            if list1[index] in list2:\n                overlap=False\n                break\n    else:\n        for index in range(0,len(list2)):\n            if list2[index] in list1:\n                overlap=False\n                break\n    return overlap\n",
        "num_ids": 102
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.count(list2[0]) == len(list1)\n",
        "num_ids": 21
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1[0] not in list1[1:]:\n        return False\n    if list2[0] not in list2[1:]:\n        return False\n    for i in range(len(list1)):\n        if list1[i] not in list2[1:]:\n            return False\n    return True\n    \ndef is_permutation(list1, list2):\n    '''\n    Write a python function to check whether a permutation is possible or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n    else:\n        return False\n    \ndef get_words_from_file(filename):\n    '''\n    Write a python function to extract all the words from a file.\n    '''\n    return''.join(fileinput.read().split()).split()\n    \ndef get_word_from_file(filename):\n    '''\n    Write a python function to extract the word from a file.\n    '''\n    return''.join(fileinput.readline().split()).rstrip().split()\n    \ndef parse_mul_lists(lines):\n    '''\n    Write a python function to split a multilist of words into a list of word lists.\n    '''\n    word_list = []\n    for line in lines:\n        line = line.split()\n        word_list.append([line[0], line[1:]])\n    return word_list\n",
        "num_ids": 48
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(set(list1).intersection(set(list2)))==0\n",
        "num_ids": 22
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    s1=list(list1)\n    s2=list(list2)\n    d={}\n    for i in range(len(s1)):\n        d[s1[i]]=s2[i]\n    for i in d:\n        if d[i] in s2:\n            return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    num_array = []\n    for i in arr:\n        num_array.append(i)\n    # num_array = [2, 4, 9, 16, 25, 36, 49]\n    max_product = 0\n    for i in range(len(num_array) - 1):\n        for j in range(i + 1, len(num_array)):\n            product = num_array[i] * num_array[j]\n            if product > max_product:\n                max_product = product\n                print(max_product)\n    return max_product\n    pass\n",
        "num_ids": 139
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max(res):\n                res = [i,j]\n    return res\n",
        "num_ids": 68
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    temp_arr = arr.copy()\n    # print(temp_arr)\n    for i in range(0, n):\n        for j in range(0, n):\n            if(temp_arr[j] * temp_arr[i] > max_product):\n                max_product = temp_arr[j] * temp_arr[i]\n                # print(max_product)\n    return max_product\n    ",
        "num_ids": 115
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if arr == []:\n        return []\n    n = len(arr)\n    max_so_far = -1\n    max_ending_here = -1\n    for i in range(n):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n            max_ending_here = i\n    return arr[max_ending_here] * arr[max_ending_here + 1]\n",
        "num_ids": 107
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProd = -1\n    maxNum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > maxProd:\n                maxProd = prod\n                maxNum = arr[i] * arr[j]\n                \n    return maxNum, maxProd\n",
        "num_ids": 97
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = arr[0]\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)):\n            res = max(res, arr[i] * arr[j])\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = arr[0]\n    for i in arr:\n        if i > max_p:\n            max_p = i\n    return (max_p, min(arr))\n",
        "num_ids": 47
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = -1\n    max_index = -1\n    for i in range(len(arr)):\n        prod = arr[i]*arr[i]\n        if prod > max_prod:\n            max_prod = prod\n            max_index = i\n",
        "num_ids": 70
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    def findPair(arr, n, m): \n        temp_max = 0 \n        temp_min = 0 \n        for i in range(n): \n            temp_max = max(arr[i], temp_max) \n            temp_min = min(arr[i], temp_min) \n        for j in range(n): \n            for i in range(n): \n                if arr[i] * arr[j] > temp_max: \n                    temp_max = arr[i] * arr[j] \n                    temp = arr[i] \n        return temp_max, temp_min \n",
        "num_ids": 150
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = arr[0]*arr[1]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]*arr[j] > max_p:\n                max_p = arr[i]*arr[j]\n                max_i = i\n                max_j = j\n    return(max_i, max_j)\n",
        "num_ids": 99
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort()\n    Output = []\n    l = len(Input)\n    for i in range(l):\n        for j in range(l):\n            if i < j:\n                if Input[i] == Input[j]:\n                    Output.append(Input[i])\n    return Output\n",
        "num_ids": 72
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # note that we are not interested in order\n    \n    # first, map each tuples into a list of their first element\n    list_of_tuples = list(map(tuple,Input))\n    \n    # remove duplicate tuples\n    list_of_tuples = list(set(list_of_tuples))\n    \n    # now sort them, return the first element\n    return list_of_tuples[0]\n    \ndef main():\n    # list of tuples\n    Input = [(1,2),(2,3),(3,4),(4,5)]\n    \n    # find the first element\n    print(\"The first element in the list is: \" + str(group_tuples(Input)))\n    \n    # map the tuples back to a list\n    # but now we only care about the first element\n    Output = list(map(tuple,Input))\n    \n    # now sort the tuples\n    Output.sort()\n    \n    # now print out the list\n    print(Output)\n",
        "num_ids": 244
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    input_list = []\n    for i in range(len(Input)):\n        Input[i] = tuple(Input[i])\n        input_list.append(Input[i])\n    common = []\n    for i in range(len(Input)-1):\n        if Input[i] in common:\n            for j in range(i+1, len(Input)):\n                if Input[j] in common:\n                    common.append(Input[j])\n    return common\n",
        "num_ids": 114
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def group_tuples(Input):\n        num_of_tuple = 0\n        for i in Input:\n            if i is not None:\n                num_of_tuple += 1\n            else:\n                continue\n        return num_of_tuple\n    \n    num_of_tuple = group_tuples(Input)\n    return num_of_tuple\n    \n",
        "num_ids": 92
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_temp = []\n    \n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if(Input[i][0] == Input[j][0]):\n                list_temp.append(Input[i])\n    \n    return list_temp\n",
        "num_ids": 77
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # The return value should be a new list containing the first element of each tuple\n    # (1st element, 2nd element, 3rd element...).\n    # Note that in the for loop, tuple is immutable\n    \n    #Use a nested loop for constructing the list into tuples.\n    #Do this for every element of the list\n    #In the for loop, create a tuple with the first element of each element of the list\n    #Start by trying to find the second element.\n    #If there is no second element, return the first element of the list.\n    #If there is, repeat for the other elements in the list.\n    #If no second element, return the first element of the list\n    \n    #Delete the print statements because they are not needed.\n",
        "num_ids": 175
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = list(set(Input))\n    return a[0]\n",
        "num_ids": 19
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import collections\n    list_ = [tuple(x) for x in Input]\n    return list_[0]\n",
        "num_ids": 30
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(Input))[0]\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst: \n        return 0\n    if len(lst) == 1: \n        return lst[0] \n    else: \n        return Find_Max(lst[1:]) \n",
        "num_ids": 54
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return None\n    else: \n        if len(lst) == 1: \n            return lst[0] \n        else: \n            temp = lst[0] \n            for i in range(1, len(lst)): \n                if temp > lst[i]: \n                    temp = lst[i] \n            return temp \n",
        "num_ids": 101
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum=0\n    for i in range(len(lst)): \n        if lst[i]>maximum: \n            maximum=lst[i] \n    return maximum\n",
        "num_ids": 47
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return None\n    \n    else:\n        pivot = lst[0]\n        for x in lst:\n            if x > pivot:\n                pivot = x\n        \n        return pivot\n        \n",
        "num_ids": 63
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # looping through all the elements \n    # in the list \n    for i in lst: \n        for j in lst: \n            # if the length of i and j are the same \n            # use the index operator to compare them \n            # and return the maximum value. \n            if i == j: \n                return max(i, j)\n",
        "num_ids": 89
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst)\n    i = 0\n    while(i<len(lst)):\n        if (lst[i]>lst[i+1]):\n            j=i+1\n            while(j<len(lst) and lst[j]<lst[j+1]):\n                j+=1\n            i=j\n        else:\n            i+=1\n    return(lst[i])\n",
        "num_ids": 109
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n    return max\n",
        "num_ids": 37
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in lst:\n        if(len(i)>len(lst)):\n            return i\n    \n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    for i in lst:\n        if(len(i)>len(lst)):\n            return i\n    \n    \ndef Sort_list(lst): \n    '''\n    Write a python function that sorts a list in ascending order.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if(lst[i]>lst[j]):\n                temp=lst[i]\n                lst[i]=lst[j]\n                lst[j]=temp\n                \n",
        "num_ids": 75
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = list(lst)\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 55
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == []:\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for element in list1:\n        total = total + element\n    return total*len(list1)\n",
        "num_ids": 32
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    length = len(list1)\n    for i in range(length):\n        total_sum += list1[i]\n    return total_sum\n",
        "num_ids": 44
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += number\n    print(total_sum)\n    return total_sum\n",
        "num_ids": 38
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(list1))\n    return sum(list1)\n",
        "num_ids": 19
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total += list1[i]\n    print(total)\n",
        "num_ids": 35
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += i\n    print(total_sum*len(list1))\n",
        "num_ids": 37
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum + i\n    print('The sum of the given numbers:'+ str(sum) +'is equal to'+ str(sum*len(list1)))\n",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total=0\n    list1_len=len(list1)\n    for n in list1:\n        total=total+n*list1_len\n    return total\n",
        "num_ids": 43
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    def round_and_sum(lst):\n        sum = 0\n        for num in lst:\n            sum += num\n        return sum\n    \n    return round_and_sum(list1)\n",
        "num_ids": 50
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Check if there is at least 1 element in the list\n    if len(list1) > 0:\n        # Define a variable to store the total sum\n        total = 0\n        # Loop through the list\n        for x in list1:\n            total += x\n        # Return the total sum\n        return total\n    # If there is no elements in the list, return 0\n    else:\n        return 0\n",
        "num_ids": 97
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(n): \n        sum = sum + i**3 \n    print(sum) \n  \ncube_Sum(10) \n",
        "num_ids": 45
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    if n<=0: \n        return 0\n    if n==1: \n        return 1\n    else: \n        return n*cube_Sum(n-1) \n",
        "num_ids": 48
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n >= 2:\n        s = 0\n        for i in range(2, n+1):\n            s = s + i * i\n        print(\"Sum of all natural numbers less than or equal to\", n, \":\", s)\n    else:\n        print(\"The function cannot work with this value of n as n is less than 2.\")\n    return s\n",
        "num_ids": 86
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n + 1):\n        cubes.append(i * i * i)\n    sum = 0\n    for i in cubes:\n        sum += i\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i **3\n    print(s)\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n + 1, 2):\n        sum += i ** 3\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * n * n\n    \nprint(cube_Sum(0))\nprint(cube_Sum(1))\nprint(cube_Sum(2))\nprint(cube_Sum(3))\nprint(cube_Sum(4))\nprint(cube_Sum(5))\nprint(cube_Sum(6))\nprint(cube_Sum(7))\nprint(cube_Sum(8))\nprint(cube_Sum(9))\nprint(cube_Sum(10)",
        "num_ids": 137
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Declare a new variable\n    new_tuple = ()\n",
        "num_ids": 18
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (\"\".join(test_tup))\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str = ''\n    for t in test_tup:\n        str += str(t)\n    return str\n",
        "num_ids": 29
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1]\n",
        "num_ids": 20
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str = ''\n    for i in test_tup:\n        str = str + str(i) + \",\"\n    str = str[0:len(str) -1]\n    return str\n    \n    ",
        "num_ids": 52
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if test_tup:\n        return tuple(test_tup)\n    else:\n        return ()\n",
        "num_ids": 28
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join([str(i) for i in test_tup])\n",
        "num_ids": 22
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in range(len(test_tup)):\n        test_str += test_tup[i]\n    return test_str\n",
        "num_ids": 43
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str, test_tup))\n",
        "num_ids": 18
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_list = []\n    for i in range(1, n+1):\n        cube_list.append(i*i*i)\n    sum_of_square_numbers = 0\n    for i in cube_list:\n        sum_of_square_numbers += i\n    return sum_of_square_numbers/float(n)\n",
        "num_ids": 85
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+(i*i*i)\n    return sum/(n*n)\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 1\n    i = 1\n    while i < n:\n        cube = cube * 3\n        i = i + 1\n    print(\"The average of cubes of natural numbers from 1 to\", n, \"is\", cube)\n",
        "num_ids": 55
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num_list = []\n    for x in range(n):\n        num_list.append(int(input()))\n    summ = 0\n    for x in range(n):\n        summ += num_list[x]\n    avg = summ / n\n    return avg\n",
        "num_ids": 69
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 0:\n        return 'Invalid input'\n    else:\n        return sum(list(map(lambda x: x**3, range(1, n+1))))/n\n",
        "num_ids": 46
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i**3\n    return s/n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + 1\n    avg = sum/n\n    return avg\n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = n-1 # Here n is the number of numbers in the list.\n    avg = 0\n    for i in range(1, n+1):\n        num = int(i) ** 3\n        avg += num\n    return avg / (3 ** n)\n",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum/n**3\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = n*(n*n*n)\n    \n    return cube/float(2**(n+1))\n    \n    \n    \n",
        "num_ids": 37
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = 0\n    for i in test_tuple:\n        rear_index += len(i)\n    return rear_index\n",
        "num_ids": 37
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output_tuple = []\n    for test_item in test_tuple:\n        output_tuple.append(test_item[0])\n    return output_tuple\n",
        "num_ids": 44
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [rear_index for rear_index, element in test_tuple]\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def extract(string):\n        index = 0\n        while string[index]!= '}':\n            index += 1\n        return index\n",
        "num_ids": 35
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[:test_tuple.index(r'\\r')])\n",
        "num_ids": 26
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Declare a list to store string of the tuple\n    test_list = list(test_tuple)\n    # Separate each string in the tuple\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace(' ', '')\n    # Get the list of all the strings in the tuple\n    string_list = list(test_list)\n    # Split the string into characters\n    string_list = [x for x in string_list]\n    # Split the string into a list of words\n    string_list = [x for x in string_list if x!= \"\"]\n    # Return the index of the strings\n    return string_list\n",
        "num_ids": 166
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0],test_tuple[-1]\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    index = []\n    for i in test_tuple:\n        if i not in index:\n            index.append(i)\n    return index\n",
        "num_ids": 37
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[3]\n",
        "num_ids": 12
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    index = []\n    for i in range(len(list1)):\n        if list1[i] == x:\n            index.append(i)\n    return len(index)\n",
        "num_ids": 46
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)): \n        if list1[i] == x: \n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            if(list1[i] == x):\n                count = count + 1\n            else:\n                continue\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # your code goes here\n    count=0\n    for i in range(len(list1)):\n        count=count+1\n    if x in list1:\n        return count\n    else:\n        return 0\n        \n",
        "num_ids": 56
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Loop through the list\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (x == list1[i]):\n            count = count + 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    # for index, sublist in enumerate(list1):\n        \n    #     if x == sublist[-1]:\n            \n    #         return (index+1)\n        \n    #     else:\n            \n    #         return count_element_in_list(list1, x) + 1\n",
        "num_ids": 76
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    i = 0\n    n = len(list1)\n    result = 0\n    \n    while(i < n):\n        if (list1[i] == x):\n            result += 1\n        i += 1\n        \n    return result\n",
        "num_ids": 61
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #FIRST\n    #Odd number\n    # RETURN TRUE IF ODD nums is in nums\n    return [num for num in nums if num % 2 == 1]\n",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd = []\n    for x in nums:\n        if x % 2!= 0:\n            odd.append(x)\n    return odd\n",
        "num_ids": 37
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n    return nums\n",
        "num_ids": 33
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    i=0\n    new_list=[]\n    while(i<len(nums)):\n        if nums[i]%2==0:\n            new_list.append(nums[i])\n        i+=1\n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result=[]\n    for i in nums:\n        if i%2==0:\n            result.append(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums_odd = []\n",
        "num_ids": 10
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            new_nums.append(num)\n    return new_nums\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for number in nums:\n        if number % 2!= 0:\n            oddnumbers.append(number)\n    return oddnumbers\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums_odd = []\n    for num in nums:\n        if num % 2!= 0:\n            nums_odd.append(num)\n    return nums_odd\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filter_odd = list(filter(lambda x: x%2!= 0, nums))\n    return filter_odd\n",
        "num_ids": 31
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    str = dt.split('-')\n    day = int(str[0])\n    month = int(str[1])\n    year = int(str[2])\n    date = \"{}-{}-{}\".format(day, month, year)\n    return date\n",
        "num_ids": 68
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = dt.split(' ')\n        d = datetime.datetime(int(dt[0]),int(dt[1]),int(dt[2]))\n        d = d.strftime('%d-%m-%Y')\n        return d\n    except ValueError:\n        return dt\ndef date_time_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%d-%m-%Y')\n        b = dt2.strftime('%d-%m-%Y')\n        delta_t = datetime.datetime.strptime(b, '%d-%m-%Y')-datetime.datetime.strptime(a, '%d-%m-%Y')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef date_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%d-%m-%Y')\n        b = dt2.strftime('%d-%m-%Y')\n        delta_t = datetime.datetime.strptime(b, '%d-%m-%Y')-datetime.datetime.strptime(a, '%d-%m-%Y')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef time_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%H:%M:%S')\n        b = dt2.strftime('%H:%M:%S')\n        delta_t = datetime.datetime.strptime(b, '%H:%M:%S')-datetime.datetime.strptime(a, '%H:%M:%S')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f!'\ndef ctime_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%Y-%m-%d')\n        b = dt2.strftime('%Y-%m-%d')\n        delta_t = datetime.datetime.strptime(b, '%Y-%m-%d')-datetime.datetime.strptime(a, '%Y-%m-%d')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef today_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%Y-%m-%d')\n        b = dt2.strftime('%Y-%m-%d')\n        delta_t = datetime.datetime.strptime(b, '%Y-%m-%d')-datetime.datetime.strptime(a, '%Y-%m-%d')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef day_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%Y-%m-%d')\n        b = dt2.strftime('%Y-%m-%d')\n        delta_t = datetime.datetime.strptime(b, '%Y-%m-%d')-datetime.datetime.strptime(a, '%Y-%m-%d')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef month_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%Y-%m-%d')\n        b = dt2.strftime('%Y-%m-%d')\n        delta_t = datetime.datetime.strptime(b, '%Y-%m-%d')-datetime.datetime.strptime(a, '%Y-%m-%d')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef week_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%Y-%m-%d')\n        b = dt2.strftime('%Y-%m-%d')\n        delta_t = datetime.datetime.strptime(b, '%Y-%m-%d')-datetime.datetime.strptime(a, '%Y-%m-%d')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef week_diff_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%Y-%m-%d')\n        b = dt2.strftime('%Y-%m-%d')\n        delta_t = datetime.datetime.strptime(b, '%Y-%m-%d')-datetime.datetime.strptime(a, '%Y-%m-%d')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0434\u0430\u0442\u0430!'\ndef time_diff_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%H:%M:%S')\n        b = dt2.strftime('%H:%M:%S')\n        delta_t = datetime.datetime.strptime(b, '%H:%M:%S')-datetime.datetime.strptime(a, '%H:%M:%S')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f!'\ndef year_diff(dt1, dt2):\n    '''\n    write a function to compute the difference between two datetime objects\n    '''\n    try:\n        a = dt1.strftime('%Y')\n        b = dt2.strftime('%Y')\n        delta_t = datetime.datetime.strptime(b, '%Y')-datetime.datetime.strptime(a, '%Y')\n        return delta_t\n    except ValueError:\n        return '\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f!'\ndef month_diff_diff(dt1, dt2):\n    '''\n    write a functio",
        "num_ids": 8
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match(r\"(\\d{2})-(\\d{2})-(\\d{4})\", dt)\n    if m:\n        mm,dd,yyyy = m.groups()\n        return yyyy + '-' + mm + '-' + dd\n    else:\n        raise ValueError('Enter a date of yyyy-mm-dd format!')\n",
        "num_ids": 91
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if '-' in dt:\n        day_number, month_number, year = dt.split('-')\n        day, month, year = int(day_number), int(month_number), int(year)\n        \n        # return date(day, month, year)\n        return dt.replace('-', '-{:02d}-'.format(year))\n    else:\n        return dt.replace('-', '-{:02d}-'.format(int(dt[:4])))\n    \n",
        "num_ids": 126
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove the leading zero, for example, 2015-07-27 => 2017-07-27\n    if dt[0] == 0:\n        dt = dt[1:]\n        # remove the leading zero, for example, 2015-07-27 => 2017-07-27\n        dt = dt[:-1]\n",
        "num_ids": 76
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.split('-')[0]+'/'+dt.split('-')[1]+'/'+dt.split('-')[2]\n",
        "num_ids": 39
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[:7]+dt[8:]\n",
        "num_ids": 15
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year=dt[0:4]\n    month=dt[5:7]\n    day=dt[8:10]\n    dt=day+'-'+month+'-'+year\n    return dt\n",
        "num_ids": 52
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt:\n        d,m,y = dt.split('-')\n        if m!= '01' and m!= '03':\n            m,y = m,y\n        if y.isdigit():\n            y = int(y)\n        else:\n            y = int(y[1:3])\n        if d.isdigit():\n            d = int(d)\n        else:\n            d = int(d[1:5])\n        dt = d,m,y\n    else:\n        dt = '',''\n    return dt\ndef date_to_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt:\n        d,m,y = dt.split('-')\n        if m!= '01' and m!= '03':\n            m,y = m,y\n        if y.isdigit():\n            y = int(y)\n        else:\n            y = int(y[1:3])\n        if d.isdigit():\n            d = int(d)\n        else:\n            d = int(d[1:5])\n        dt = d,m,y\n    else:\n        dt = '',''\n    return dt\ndef file_extention_check(file):\n    '''\n    Check whether a file has extension.\n    '''\n    if '.' in file:\n        return True\n    else:\n        return False\ndef get_ext(file):\n    '''\n    Get the file extension.\n    '''\n    if file_extention_check(file):\n        return '.txt'\n    else:\n        return ''\ndef date_check(date):\n    '''\n    Check whether a date is valid or not.\n    '''\n    if date == '01-01-2021':\n        return True\n    else:\n        return False\ndef date_format(date):\n    '''\n    Check whether a date is valid or not.\n    '''\n    if date == '01-01-2021':\n        return 'Date: 01/01/2021'\n    elif date == '01-01-2022':\n        return 'Date: 01/01/2022'\n    elif date == '01-01-2023':\n        return 'Date: 01/01/2023'\n    elif date == '01-01-2024':\n        return 'Date: 01/01/2024'\n    elif date == '01-01-2025':\n        return 'Date: 01/01/2025'\n    elif date == '01-01-2026':\n        return 'Date: 01/01/2026'\n    elif date == '01-01-2027':\n        return 'Date: 01/01/2027'\n    elif date == '01-01-2028':\n        return 'Date: 01/01/2028'\n    elif date == '01-01-2029':\n        return 'Date: 01/01/2029'\n    elif date == '01-01-2030':\n        return 'Date: 01/01/2030'\n    elif date == '01-01-2031':\n        return 'Date: 01/01/2031'\n    elif date == '01-01-2032':\n        return 'Date: 01/01/2032'\n    elif date == '01-01-2033':\n        return 'Date: 01/01/2033'\n    elif date == '01-01-2034':\n        return 'Date: 01/01/2034'\n    elif date == '01-01-2035':\n        return 'Date: 01/01/2035'\n    elif date == '01-01-2036':\n        return 'Date: 01/01/2036'\n    elif date == '01-01-2037':\n        return 'Date: 01/01/2037'\n    elif date == '01-01-2038':\n        return 'Date: 01/01/2038'\n    elif date == '01-01-2039':\n        return 'Date: 01/01/2039'\n    elif date == '01-01-2040':\n        return 'Date: 01/01/2040'\n    elif date == '01-01-2041':\n        return 'Date: 01/01/2041'\n    elif date == '01-01-2042':\n        return 'Date: 01/01/2042'\n    elif date == '01-01-2043':\n        return 'Date: 01/01/2043'\n    elif date == '01-01-2044':\n        return 'Date: 01/01/2044'\n    elif date == '01-01-2045':\n        return 'Date: 01/01/2045'\n    elif date == '01-01-2046':\n        return 'Date: 01/01/2046'\n    elif date == '01-01-2047':\n        return 'Date: 01/01/2047'\n    elif date == '01-01-2048':\n        return 'Date: 01/01/2048'\n    elif date == '01-01-2049':\n        return 'Date: 01/01/2049'\n    elif date == '01-01-2050':\n        return 'Date: 01/01/2050'\n    elif date == '01-01-2051':\n        return 'Date: 01/01/2051'\n    elif date == '01-01-2052':\n        return 'Date: 01/01/2052'\n    elif date == '01-01-2053':\n        return 'Date: 01/01/2053'\n    elif date == '01-01-2054':\n        return 'Date: 01/01/2054'\n    elif date == '01-01-2055':\n        return 'Date: 01/01/2055'\n    elif date == '01-01-2056':\n        return 'Date: 01/01/2056'\n    elif date == '01-01-2057':\n        return 'Date: 01/01/2057'\n    elif date == '01-01-2058':\n        return 'Date: 01/01/2058'\n    elif date == '01-01-2059':\n        return 'Date: 01/01/2059'\n    elif date == '01-01-2060':\n        return 'Date: 01/01/2060'\n    elif date == '01-01-2061':\n        return 'Date: 01/01/2061'\n    elif date == '01-01-2062':\n        return 'Date: 01/01/2062'\n    elif date == '01-01-2063':\n        return 'Date: 01/01/2063'\n    elif date == '01-01-2064':\n        return 'Date: 01/01/2064'\n    elif date == '01-01-2065':\n        return 'Date: 01/01/2065'\n    elif date == '01-01-2066':\n        return 'Date: 01/01/2066'\n    elif date == '01-01-2067':\n        return 'Date: 01/01/2067'\n    elif date == '01-01-2068':\n        return 'Date: 01/01/2068'\n    elif date == '01-01-2069':\n        return 'Date: 01/01/2069'\n    elif date == '01-01-2070':\n        return 'Date: 01/01/2070'\n    elif date == '01-01-2071':\n        return 'Date: 01/01/2071'\n    elif date == '01-01-2072':\n        return 'Date: 01/01/2072'\n    elif date == '01-01-2073':\n        return 'Date: 01/01/2073'\n    elif date == '01-01-2074':\n        return 'Date: 01/01/2074'\n    elif date == '01-01-2075':\n        return 'Date: 01/01/2075'\n    elif date == '01-01-2076':\n        return 'Date: 01/01",
        "num_ids": 1508
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    days = int(date[0])\n    months = int(date[1])\n    years = int(date[2])\n",
        "num_ids": 43
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print('\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tShell Sort')\n    index = 1\n    while index < len(my_list):\n        j = index\n        while j >= 1:\n            if my_list[j] > my_list[j-1]:\n                tmp = my_list[j]\n                my_list[j] = my_list[j-1]\n                my_list[j-1] = tmp\n            j -= 1\n        index += 1\n",
        "num_ids": 130
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = int((n - 1) / 2)\n    while gap >= 1:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap / 2)\n",
        "num_ids": 118
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n",
        "num_ids": 12
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #if the array contains less than 10 elements\n    if len(my_list) < 10:\n        #all the elements to be sorted\n        for i in range(len(my_list)):\n            #the index of the element to be sorted\n            j = i\n            #while all the elements in the index are sorted\n            #then j will be the next highest element\n            while j >= 0 and my_list[j] > my_list[j+1]:\n                #swap the two elements in the index\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n                j -= 1\n        return my_list\n",
        "num_ids": 162
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #using for loop to sort the given list\n    for i in range(len(my_list)):\n        for j in range(0, len(my_list), i + 1):\n            temp = my_list[j]\n            k = j\n            while k > -1 and my_list[k] > temp:\n                my_list[k] = my_list[k - 1]\n                k -= 1\n            my_list[k] = temp\n",
        "num_ids": 110
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # use for loop to iterate over each index in the list\n    for i in range(n-1):\n        # find the last index from that index\n        # swap the sorted part of that index with the unsorted part\n        # repeat steps till we have sorted everything\n        for j in range(n-i-1):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n            # end of for loop\n        # end of for loop\n    return my_list\n    \ndef merge_sort(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    # sort the list by swapping each element with the next\n    # element to form the subarray\n    def swap(a, b, c):\n        a[c], a[b] = a[b], a[c]\n        \n    def merge(my_list):\n        if len(my_list) <= 1:\n            return my_list\n        \n        # divide the list\n        half = len(my_list) // 2\n        # divide the list and swap the middle element\n        # so that the first half is sorted\n        left = merge(my_list[:half])\n        right = merge(my_list[half:])\n        \n        # if the left half is empty, merge with right\n        if len(left) == 0:\n            return right\n        \n        # if the right half is empty, merge with left\n        if len(right) == 0:\n            return left\n        \n        # if the left and right are non-empty\n        # use the first element as the pivot element\n        # and swap the element with the right element\n        # then add the left and right elements\n        pivot = my_list[0]\n        i, j = 0, 0\n        \n        # iterate over the left half\n        while i < len(left) and j < len(right):\n            if left[i] < pivot:\n                # swap the element with the right element\n                swap(left, right, j)\n                # increment i by 2, because the last\n                # element is now the pivot\n                i += 2\n            else:\n                # increment j by 1 because the first\n                # element is now the pivot\n                j += 1\n        # end while\n        \n        # if i is greater than or equal to 0, then add the left element to the end\n        if i >= 0:\n            swap(left, right, i)\n            # increment i by 1 because the last element is now the pivot\n            i += 1\n        \n        # if j is greater than or equal to 0, then add the right element to the end\n        if j >= 0:\n            swap(left, right, j)\n            # increment j by 1 because the last element is now the pivot\n            j += 1\n        # end while\n        \n        # return the merged subarray\n        return left + right\n    \n    # define a function to handle merging subarrays\n    def merge_subarrays(my_list):\n        return merge(my_list)\n    \n    # loop through the input array\n    for index in range(len(my_list)):\n        # if the array has an even number of elements\n        if index % 2 == 0:\n            # copy the current array\n            # into a new list\n            my_list = my_list[index:]\n        # end if\n        else:\n            # copy the current array into a new list\n            my_list = my_list[:index] + my_list[index+1:]\n            # copy the current array into the first half\n            my_list = my_list[:index] + my_list[index+1:]\n    # end for\n    return my_list\n    \ndef partition(my_list, low, high):\n    '''\n    Write a function to partition the given array.\n    '''\n    i = (low - 1)  # start index\n    pivot = my_list[high]  # pivot\n",
        "num_ids": 29
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_rec(arr, i, n):\n        \n        if i >= n:\n            return\n        \n        j = i\n        while j < n:\n            j = i\n            while j > 0 and arr[j] < arr[j - 1]:\n                j -= 1\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n        arr[i], arr[n-1] = arr[n-1], arr[i]\n        shell_sort_rec(arr, i, n)\n    \n    def shell_sort(my_list):\n        n = len(my_list)\n        gap = n // 2\n        while gap >= 1:\n            for i in range(gap, n):\n                j = i\n                while j >= gap and my_list[j] < my_list[j - gap]:\n                    my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                    j -= gap\n                my_list[j], my_list[i] = my_list[i], my_list[j]\n            gap //= 2\n        return my_list\n",
        "num_ids": 281
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n",
        "num_ids": 12
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap / 2)\n    return my_list\n",
        "num_ids": 118
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return test_tup1 and test_tup2\n",
        "num_ids": 48
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0]\n",
        "num_ids": 22
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # The elementwise and tuples\n    e_and_tuples = test_tup1 + test_tup2\n    # The elementwise tuples\n    e_and_tuples = tuple(e_and_tuples)\n    # print(e_and_tuples)\n    # print(type(e_and_tuples))\n",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([i for i in test_tup1 for i in test_tup2])\n",
        "num_ids": 25
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # TODO: modify the code so that it returns a tuple of tuples.\n    return tuple([tuple(x) for x in test_tup1])\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = list()\n    for i in range(0, len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) == False:\n            res.append(test_tup1[i])\n        else:\n            res.append(test_tup1[i][0] and test_tup1[i][1])\n    \n    return res\n",
        "num_ids": 96
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[0] > test_tup2[0]\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for el in test_tup1:\n        result.append(el)\n        result.append(el)\n    for el in test_tup2:\n        result.append(el)\n        result.append(el)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n",
        "num_ids": 18
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (b**2-4*a*c)/2\n    y = -(b+x)/2*a\n    return [x,y]\n",
        "num_ids": 39
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((a*b)**2 + (c*b) - (a*c)**2)**(1/2) \n",
        "num_ids": 34
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b == 0:\n            return c + b * b\n        else:\n            return c - b * b\n    else:\n        return (a * c) - b * b\n",
        "num_ids": 52
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = a*b*c**2\n    x2 = a*b\n    x3 = c\n    x4 = b\n    x5 = a\n    x6 = a\n    x7 = 0\n    x8 = 0\n    x9 = 0\n    x10 = 0\n    x11 = 0\n    x12 = 0\n    x13 = 0\n    x14 = 0\n    x15 = 0\n    x16 = 0\n    x17 = 0\n    x18 = 0\n    x19 = 0\n    x20 = 0\n    x21 = 0\n    x22 = 0\n    x23 = 0\n    x24 = 0\n    x25 = 0\n    x26 = 0\n    x27 = 0\n    x28 = 0\n    x29 = 0\n    x30 = 0\n    x31 = 0\n    x32 = 0\n    x33 = 0\n    x34 = 0\n    x35 = 0\n    x36 = 0\n    x37 = 0\n    x38 = 0\n    x39 = 0\n    x40 = 0\n    x41 = 0\n    x42 = 0\n    x43 = 0\n    x44 = 0\n    x45 = 0\n    x46 = 0\n    x47 = 0\n    x48 = 0\n    x49 = 0\n    x50 = 0\n    x51 = 0\n    x52 = 0\n    x53 = 0\n    x54 = 0\n    x55 = 0\n    x56 = 0\n    x57 = 0\n    x58 = 0\n    x59 = 0\n    x60 = 0\n    x61 = 0\n    x62 = 0\n    x63 = 0\n    x64 = 0\n    x65 = 0\n    x66 = 0\n    x67 = 0\n    x68 = 0\n    x69 = 0\n    x70 = 0\n    x71 = 0\n    x72 = 0\n    x73 = 0\n    x74 = 0\n    x75 = 0\n    x76 = 0\n    x77 = 0\n    x78 = 0\n    x79 = 0\n    x80 = 0\n    x81 = 0\n    x82 = 0\n    x83 = 0\n    x84 = 0\n    x85 = 0\n    x86 = 0\n    x87 = 0\n    x88 = 0\n    x89 = 0\n    x90 = 0\n    x91 = 0\n    x92 = 0\n    x93 = 0\n    x94 = 0\n    x95 = 0\n    x96 = 0\n    x97 = 0\n    x98 = 0\n    x99 = 0\n    x100 = 0\n    x101 = 0\n    x102 = 0\n    x103 = 0\n    x104 = 0\n    x105 = 0\n    x106 = 0\n    x107 = 0\n    x108 = 0\n    x109 = 0\n    x110 = 0\n    x111 = 0\n    x112 = 0\n    x113 = 0\n    x114 = 0\n    x115 = 0\n    x116 = 0\n    x117 = 0\n    x118 = 0\n    x119 = 0\n    x120 = 0\n    x121 = 0\n    x122 = 0\n    x123 = 0\n    x124 = 0\n    x125 = 0\n    x126 = 0\n    x127 = 0\n    x128 = 0\n    x129 = 0\n    x130 = 0\n    x131 = 0\n    x132 = 0\n    x133 = 0\n    x134 = 0\n    x135 = 0\n    x136 = 0\n    x137 = 0\n    x138 = 0\n    x139 = 0\n    x140 = 0\n    x141 = 0\n    x142 = 0\n    x143 = 0\n    x144 = 0\n    x145 = 0\n    x146 = 0\n    x147 = 0\n    x148 = 0\n    x149 = 0\n    x150 = 0\n    x151 = 0\n    x152 = 0\n    x153 = 0\n    x154 = 0\n    x155 = 0\n    x156 = 0\n    x157 = 0\n    x158 = 0\n    x159 = 0\n    x160 = 0\n    x161 = 0\n    x162 = 0\n    x163 = 0\n    x164 = 0\n    x165 = 0\n    x166 = 0\n    x167 = 0\n    x168 = 0\n    x169 = 0\n    x170 = 0\n    x171 = 0\n    x172 = 0\n    x173 = 0\n    x174 = 0\n    x175 = 0\n    x176 = 0\n    x177 = 0\n    x178 = 0\n    x179 = 0\n    x180 = 0\n    x181 = 0\n    x182 = 0\n    x183 = 0\n    x184 = 0\n    x185 = 0\n    x186 = 0\n    x187 = 0\n    x188 = 0\n    x189 = 0\n    x190 = 0\n    x191 = 0\n    x192 = 0\n    x193 = 0\n    x194 = 0\n    x195 = 0\n    x196 = 0\n    x197 = 0\n    x198 = 0\n    x199 = 0\n    x200 = 0\n    x201 = 0\n    x202 = 0\n    x203 = 0\n    x204 = 0\n    x205 = 0\n    x206 = 0\n    x207 = 0\n    x208 = 0\n    x209 = 0\n    x210 = 0\n    x211 = 0\n    x212 = 0\n    x213 = 0\n    x214 = 0\n    x215 = 0\n    x216 = 0\n    x217 = 0\n    x218 = 0\n    x219 = 0\n    x220 = 0\n    x221 = 0\n    x222 = 0\n    x223 = 0\n    x224 = 0\n    x225 = 0\n    x226 = 0\n    x227 = 0\n    x228 = 0\n    x229 = 0\n    x230 = 0\n    x231 = 0\n    x232 = 0\n    x233 = 0\n    x234 = 0\n    x235 = 0\n    x236 = 0\n    x237 = 0\n    x238 = 0\n    x239 = 0\n    x240 = 0\n    x241 = 0\n    x242 = 0\n    x243 = 0\n    x244 = 0\n    x245 = 0\n    x246 = 0\n    x247 = 0\n    x248 = 0\n    x249 = 0\n    x250 = 0\n    x251 = 0\n    x252 = 0\n    x253 = 0\n    x254 = 0\n    x255 = 0\n    x256 = 0\n    x257 = 0\n    x258 = 0\n    x259 = 0\n    x260 = 0\n    x261 = 0\n    x262 = 0\n    x263 = 0\n    x264 = 0\n    x265 = 0\n    x266 = 0\n    x267 = 0\n    x268 = 0\n    x269 = 0\n    x270 = 0\n    x271 = 0\n    x272 = 0\n    x273 = 0\n    x274 = 0\n    x275 = 0\n    x276 = 0\n    x277 = 0\n    x278 = 0\n    x279 = 0\n    x280 = 0\n    x281 = 0\n    x282 = 0\n    x283 = 0\n    x284 = 0\n    x285 = 0\n    x286 = 0\n    x287 = 0\n    x288 = 0\n    x289 = 0\n    x290 = 0\n    x291 = 0\n    x292 = 0\n    x293 = 0\n    x294 = 0\n    x295 = 0\n    x296 = 0\n    x297 = 0\n    x298 = 0\n    x299 = 0\n    x300 = 0\n    x301 = 0\n    x302 = 0\n    x303 = 0\n    x304 = 0\n    x305 = 0\n    x306 = 0\n    x307 = 0\n    x308 = 0\n    x309 = 0\n    x310 = 0\n    x311 = 0\n    x312 = 0\n    x313 = 0\n    x314 = 0\n    x315 = 0\n    x316 = 0\n    x317 = 0\n    x318 = 0\n    x319 = 0\n    x320 = 0\n    x321 = 0\n    x322 = 0\n    x323 = 0\n    x324 = 0\n    x325 = 0\n    x326 = 0\n    x327 = 0\n    x328 = 0\n    x329 = 0\n    x330 = 0\n    x331 = 0\n    x332 = 0\n    x333 = 0\n    ",
        "num_ids": 2009
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return(a**2 + b**2 + c**2 - 4*a*b*c)**(1/2)\n",
        "num_ids": 32
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    def parabola(x,y,z,a,b,c): \n        return (a*x + b*y + c)/z**2\n    x, y, z = parabola(a,b,c,x,y,z)\n    return x, y, z\n    \n    \n    \n",
        "num_ids": 84
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a+b+c)/2\n    \ndef parabola_cubic(a, b, c, d, e, f):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return parabola_directrix(a, b, c) + parabola_directrix(a, b, d) + parabola_directrix(a, b, e) + parabola_directrix(a, b, f)\n",
        "num_ids": 60
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = []\n    for i in range(1, int(math.sqrt(b))+1):\n        if b**2-4*a*c**2 == b**2-4*a*(b**2-4*a*c**2+c**2):\n            D.append(2*a*c/b**2)\n        elif b**2-4*a*c**2 < b**2-4*a*(b**2-4*a*c**2+c**2):\n            D.append(2*a/b**2)\n        elif b**2-4*a*c**2 > b**2-4*a*(b**2-4*a*c**2+c**2):\n            D.append(1)\n",
        "num_ids": 188
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # base case\n    if(a == 0): \n        return 0\n    elif(a == 1): \n        return 1\n    else: \n        return (b*b - 4*a*c)/(2*a)\n",
        "num_ids": 58
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * (b**2) + c * b + a) / 2\n",
        "num_ids": 22
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for index in range(len(list1)):\n        if list1[index] in list2:\n            common = True\n    return common\n",
        "num_ids": 41
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elem = False\n    for x in list1:\n        if x in list2:\n            common_elem = True\n    return common_elem\n",
        "num_ids": 41
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if (len(list1) == len(list2)):\n        for x in list1:\n            if (x in list2):\n                list2.remove(x)\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common = list1_set.intersection(list2_set)\n    return len(common)>0\n",
        "num_ids": 52
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) == len(list2) and set(list1).intersection(list2) == set(list1)\n",
        "num_ids": 34
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # YOUR CODE HERE\n    pass\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if (len(list1) == 0) or (len(list2) == 0):\n        return False\n    common = list1[0]\n    for i in range(1, len(list2)):\n        if common in list2[i]:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    result = True\n    for i in list1:\n        if i in list2:\n            result = False\n            break\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    try:\n        list1.remove(list2[0])\n        list2.remove(list2[0])\n    except:\n        return False\n    \n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total_base1 = base1 + base2\n    total_base2 = base1 + base2\n    \n    if total_base1 < height:\n        return int((total_base1 + total_base2)/2)\n    elif total_base1 > height:\n        return base2\n    elif total_base2 < height:\n        return base1\n    elif total_base2 > height:\n        return base2\n",
        "num_ids": 103
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height == 1:\n        return base1\n    elif height == 2:\n        return base2\n    elif height == 3:\n        return base1 + base2\n    else:\n        return base1 + base2 + (base1 + base2) / 3\n",
        "num_ids": 65
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def base_height(base1,base2):\n        return (base1+base2)/2\n    def trapezium(base1,base2,height):\n        total = base1 + base2 + height\n        return (base1 + base2)/2, (base1 + base2 + (height/2))/2, (base2 + base1)/2, (base2 + base1 + (height/2))/2\n    def height_method(base1,base2,height):\n        if base2/base1 < height/base2:\n            return (base2 + base1)/2\n        else:\n            return base2 + base1\n    return trapezium(base_height(base1,base2),height,base_height(base2,height))[2]\n",
        "num_ids": 185
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height >= base1:\n        return (base1 + base2)/2\n    elif height >= base2:\n        return base1\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = (base1+base2)/2\n    c = height-s\n    e = height\n    f = (s**2)*(base2**2)\n    g = (s**2)*(base1**2)\n    h = (s**2)*(base1*base2)\n    d = (c**2) * (s**2)\n    x = (f+g+h+d)/4\n    e = (2*x+h) / 2\n    return e\n",
        "num_ids": 118
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2\n",
        "num_ids": 13
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Python code to demonstrate the concept of median\n    # Trapezium.\n    \n    # Calculate the mean of the list.\n    mean1= sum(base1)/len(base1)\n    \n    # Calculate the median of the list.\n    median1 = median(base1)\n    \n    # Calculate the mean of the list.\n    mean2= sum(base2)/len(base2)\n    \n    # Calculate the median of the list.\n    median2 = median(base2)\n    \n    # Calculate the distance between the mean\n    # of the list and the median.\n    dist = abs(mean1-median1)\n    \n    # Return the median of the list.\n    return median1,median2,dist\n    ",
        "num_ids": 183
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if not isinstance(base1, int) or not isinstance(base2, int) or not isinstance(height, int) or height <= 0:\n        raise TypeError\n    a,b,c,d = base1,base2,height,0\n    if not isinstance(base1, int) or not isinstance(base2, int) or not isinstance(height, int) or height <= 0:\n        raise TypeError\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    d = abs(d)\n    if height == 0:\n        return 0\n    elif a >= b and a >= c and a >= d:\n        return height\n    elif b >= a and b >= c and b >= d:\n        return (height + (b + c + d)/2)\n    elif c >= a and c >= b and c >= d:\n        return (height + (b + c + d)/2 + (a + c)/2)\n    elif d >= a and d >= b and d >= c:\n        return (height + (b + c + d)/2 + (d + c)/2)\n    else:\n        return (height + (b + c + d)/2 - (a + c)/2)\n",
        "num_ids": 299
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2\n",
        "num_ids": 13
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        return base2+height\n    else:\n        return base1+height\n",
        "num_ids": 29
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    if number > arr[0]:\n        return True\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number in arr:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr[number] > arr[number+1]\n",
        "num_ids": 16
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return True\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr.count(number) > arr.count(max(arr))\n",
        "num_ids": 20
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr:\n        return False\n    else:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0] > number\n    elif number > arr[-1]:\n        return False\n    elif number < arr[0]:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] < arr[1]:\n        if arr[0] > number:\n            return False\n        return True\n    else:\n        if arr[1] > number:\n            return False\n        return True\n",
        "num_ids": 54
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # your code goes here\n    b = re.findall('^([a-zA-Z]{1})', text)\n    b = b[0].replace('a', 'i')\n    b = b.replace('e', 'i')\n    b = b.replace('i', 'a')\n    b = b.replace('o', 'i')\n    b = b.replace('u', 'i')\n    b = b.replace('s', 'i')\n    b = b.replace('t', 'i')\n    b = b.replace('z', 'i')\n    b = b.replace('#', 'i')\n    b = b.replace(' ', 'a')\n    b = b.replace('-', 'a')\n    b = b.replace('.', 'a')\n    b = b.replace('+', 'a')\n    b = b.replace('[', 'i')\n    b = b.replace(']', 'i')\n    return b\n",
        "num_ids": 233
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('[a-zA-Z]+\\b')\n    return pattern.match(text)\n",
        "num_ids": 31
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        return count\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a followed by three b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 2:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a followed by three b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 3:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a followed by four b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 4:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a followed by five b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 5:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a followed by six b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 6:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a followed by seven b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 7:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a followed by eight b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 8:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a followed by nine b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a followed by ten b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 10:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a followed by eleven b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n                count = count + 1\n        if count > 11:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a followed by twelve b's.\n    '''\n    #get rid of spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    #check if a's and b's are all followed by a or b's\n    if text[-1] in [\"a\", \"b\"]:\n        text = text[0:-2]\n        #count the number of b's\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \"b\":\n            ",
        "num_ids": 107
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'a\\s(\\w+)', text)\n    return result.group()\n",
        "num_ids": 28
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    string_match = re.compile(r\"^(?=.*a).*$\")\n    match = string_match.search(text)\n    return match\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    start = 0\n    while True:\n        if text[start].isdigit():\n            end = start + 1\n            while end < len(text) and text[end].isdigit():\n                end += 1\n            if end < len(text) and text[start] == 'a' and text[end] == 'b':\n                return text[start + 1:end]\n        start += 1\n",
        "num_ids": 96
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a(a[a-zA-Z]?)b', text)!= None\n",
        "num_ids": 27
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*\\w*'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print(match)\n        \ntext_match_one(\"hello\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match_one(\"hello world\")\ntext_match",
        "num_ids": 2007
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    regex = re.compile(r'a[a-z]\\b')\n    return regex.search(text)\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    res = re.findall(r'a\\b', text)\n    return res\n",
        "num_ids": 23
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    ans=0\n    for i in range(len(n)) :\n        ans = ans + (n % 10) * 10**(len(n)-1-i)\n        n = n//10\n    return ans\n",
        "num_ids": 53
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is not int :\n        raise TypeError('Only integer numbers')\n    elif n < 0 :\n        raise ValueError('n must be >= 0')\n    else :\n        last_digit = 0\n        while n >= 10 :\n            last_digit = (last_digit * 10) + (n%10)\n            n = n // 10\n        return last_digit\n",
        "num_ids": 93
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \nprint(last_Digit(100)",
        "num_ids": 25
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\n",
        "num_ids": 12
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # if last digit is 0\n    if n%10==0:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 1 or greater\n    if n%10>0 and n%10<9:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 2 or greater\n    if n%10>9 and n%10<=5:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 3 or greater\n    if n%10>5 and n%10<=4:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 4 or greater\n    if n%10>4 and n%10<=3:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 5 or greater\n    if n%10>3 and n%10<=2:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 6 or greater\n    if n%10>2 and n%10<=1:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 7 or greater\n    if n%10>1 and n%10<=0:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 8 or greater\n    if n%10>0 and n%10<9:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 9 or greater\n    if n%10>9 and n%10<=8:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 10 or greater\n    if n%10>8 and n%10<=7:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 11 or greater\n    if n%10>7 and n%10<=6:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 12 or greater\n    if n%10>6 and n%10<=5:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 13 or greater\n    if n%10>5 and n%10<=4:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 14 or greater\n    if n%10>4 and n%10<=3:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 15 or greater\n    if n%10>3 and n%10<=2:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 16 or greater\n    if n%10>2 and n%10<=1:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 17 or greater\n    if n%10>1 and n%10<=0:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 18 or greater\n    if n%10>0 and n%10<9:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 19 or greater\n    if n%10>9 and n%10<=8:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 20 or greater\n    if n%10>8 and n%10<=7:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 21 or greater\n    if n%10>7 and n%10<=6:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 22 or greater\n    if n%10>6 and n%10<=5:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 23 or greater\n    if n%10>5 and n%10<=4:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 24 or greater\n    if n%10>4 and n%10<=3:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 25 or greater\n    if n%10>3 and n%10<=2:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 26 or greater\n    if n%10>2 and n%10<=1:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 27 or greater\n    if n%10>1 and n%10<=0:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 28 or greater\n    if n%10>0 and n%10<9:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 29 or greater\n    if n%10>9 and n%10<=8:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 30 or greater\n    if n%10>8 and n%10<=7:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 31 or greater\n    if n%10>7 and n%10<=6:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 32 or greater\n    if n%10>6 and n%10<=5:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 33 or greater\n    if n%10>5 and n%10<=4:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 34 or greater\n    if n%10>4 and n%10<=3:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 35 or greater\n    if n%10>3 and n%10<=2:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 36 or greater\n    if n%10>2 and n%10<=1:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 37 or greater\n    if n%10>1 and n%10<=0:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 38 or greater\n    if n%10>0 and n%10<9:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 39 or greater\n    if n%10>9 and n%10<8:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 40 or greater\n    if n%10>8 and n%10<=7:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 41 or greater\n    if n%10>7 and n%10<=6:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 42 or greater\n    if n%10>6 and n%10<=5:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 43 or greater\n    if n%10>5 and n%10<=4:\n        # return the last digit\n        return int(str(n)[-1])\n    # if last digit is 44 or greater\n    if n%10>4 and n%10<=3:\n        # return the last digit\n        return int(str(n)[-1])\n    # if las",
        "num_ids": 2016
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = int(str(n)[-1])\n    return lastDigit\n    ",
        "num_ids": 24
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = 0\n    if n % 10 == 1 :\n        last_digit = 0\n    elif n % 10 == 0 :\n        last_digit = 9\n    elif n % 10 == 9 :\n        last_digit = 9\n    else :\n        last_digit = n % 10\n    return last_digit\n",
        "num_ids": 78
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code here\n    return (n % 10)\n",
        "num_ids": 16
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return (n % 10)\n    \ndef main() :\n    '''\n    Write a python program to get the last two digits of a number.\n    '''\n    try :\n        n = int(input(\"Enter a number : \"))\n    except :\n        print(\"Invalid input\")\n        return\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for el in list1:\n        if el < 0:\n            neg_nos.append(-el)\n    return neg_nos\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(-i)\n        else:\n            list2.append(i)\n    return list2\n",
        "num_ids": 50
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    nums = []\n    for i in list1:\n        nums.append(-i)\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_numbers = []\n    for i in list1:\n        neg_numbers.append(-i)\n    return neg_numbers\n",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(-i)\n    return list2\n",
        "num_ids": 30
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1\n",
        "num_ids": 7
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if(i < 0):\n            neg_list.append(-i)\n        else:\n            neg_list.append(0)\n    return neg_list\n",
        "num_ids": 55
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[::-1]\n    \nprint(\"Test negative nos\")\nprint(neg_nos([3,2,0,-2]))\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    Negative_numbers=[]\n    for item in list1:\n        if(item<0):\n            Negative_numbers.append(item)\n    return Negative_numbers\n",
        "num_ids": 46
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #pass\n    return list1",
        "num_ids": 10
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = \"\"\n    for char in str1:\n        if char % 2!= 0:\n            new_string += char\n    return new_string\n",
        "num_ids": 40
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) < 4:\n        print('Please use a valid string')\n    else:\n        output = ''\n        for i in range(len(str1)):\n            if i % 2!= 0:\n                output += str1[i]\n        \n        print(output)\n        return output\n",
        "num_ids": 76
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s=str1.lower().strip()\n    r=[]\n    for i in s:\n        if i%2==1:\n            r.append(i)\n    \n    return \"\".join(r)\n",
        "num_ids": 53
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = list(str1)\n    i = 0\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst.pop(i)\n            i -= 1\n        else:\n            i += 1\n    return \"\".join(lst)\n",
        "num_ids": 73
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = []\n    for i in str1:\n        if int(i)%2!= 0:\n            list1.append(i)\n    str2 = \"\".join(list1)\n    return str2\n",
        "num_ids": 55
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    '''\n    Example:\n    Input:\n    \"abcdee\"\n    Output:\n    \"adc\"\n",
        "num_ids": 27
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            str1 = str1.replace(str1[i], '')\n    return str1\n",
        "num_ids": 128
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Declare a variable for the string\n    string = str1\n    # Initialize an empty list to hold the results\n    new_list = []\n    # Loop through the string, removing the last character\n    for char in string[:-1]:\n        # If the char is odd, append the char to the list\n        if char % 2 == 1:\n            new_list.append(char)\n    # Return the new list\n    return new_list\n",
        "num_ids": 106
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.strip().lower()\n    return str1.replace(' ', '-')\n",
        "num_ids": 26
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return str1\n    else:\n        new_str = str1[0]\n        for i in str1[1:]:\n            if int(i) % 2 == 1:\n                new_str = new_str + i\n        return new_str\n",
        "num_ids": 69
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = []\n    for index, item in enumerate(test_list):\n        bidirectional_pair = (test_list[index - 1], test_list[index + 1])\n        if bidirectional_pair not in bidirectional_pairs:\n            bidirectional_pairs.append(bidirectional_pair)\n    return bidirectional_pairs\n",
        "num_ids": 94
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for item in test_list:\n        if type(item) == tuple:\n            result += 1\n        else:\n            result = 0\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # TODO: create a function that takes a list of pairs and returns a list of pairs\n    #    where the first element in the pair is the first element in the second element,\n    #    and the second element is the second element of the pair\n    \n    bidirectional_pairs = []\n    \n    for first_pair in test_list:\n        for second_pair in test_list:\n            if first_pair[1] == second_pair[1]:\n                bidirectional_pairs.append([first_pair[0], second_pair[0]])\n            else:\n                continue\n",
        "num_ids": 141
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # TODO: Start writing your code here\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[j][1] < test_list[i][1]:\n                count += 1\n    return count\n    \n    pass\n",
        "num_ids": 105
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for t in test_list:\n        count += (len(t[0]) + len(t[1]))\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Set up initial answer\n    bidirectional_count = 0\n",
        "num_ids": 18
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i-1):\n            if test_list[j][1] > test_list[j+1][1]:\n                total += 1\n    return total\n",
        "num_ids": 69
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Count bidirectional pairs\n    count_bidirectional_pairs = 0\n    \n    # Iterate through all test elements\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            # If (i, j) is not in list, print pair\n            if (i, j) not in test_list:\n                count_bidirectional_pairs += 1\n    \n    return count_bidirectional_pairs\n    ",
        "num_ids": 125
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print(\"function: count_bidirectional\")\n    count = {}\n    for i in range(len(test_list)):\n        for j in range(i):\n            if test_list[i][1] < test_list[j][1]:\n                test_list.append((test_list[j][0],test_list[i][1]))\n    return test_list\n",
        "num_ids": 93
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bids = set()\n    for tup in test_list:\n        if type(tup) is tuple:\n            if tup not in bids:\n                bids.add(tup)\n                tup1 = tup[0]\n                tup2 = tup[1]\n                if tup1 not in bids and tup1[1] not in bids:\n                    bids.add(tup1)\n                if tup2 not in bids and tup2[0] not in bids:\n                    bids.add(tup2)\n        if type(tup) is list:\n            if tup not in bids:\n                bids.add(tup)\n                tup1 = tup[0]\n                tup2 = tup[1]\n                if tup1 not in bids and tup1[1] not in bids:\n                    bids.add(tup1)\n                if tup2 not in bids and tup2[0] not in bids:\n                    bids.add(tup2)\n    bids = list(bids)\n    bids.sort()\n    return bids\n",
        "num_ids": 268
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #CASE 1:\n    if len(L) == 1:\n        return L[0]\n    #CASE 2:\n    else:\n        return L[0] + L[1]\n",
        "num_ids": 49
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x, y: (x * y) + x, L)\n",
        "num_ids": 22
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Create an empty string for output\n    out = ''\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for x in L:\n        yield x\n    \n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # L is a list of integers\n    # return the list as a single integer\n    \n    # L is a list of lists\n    # return each list as a single integer\n    \n    \n    # Make sure to handle empty lists\n    \n    # Make sure to handle empty dictionaries\n    \n    \n    \n    \n    # Initialize empty string\n    \n    # Concatenate each list into a string\n    \n    # Return the string\n    \n    # Note: I didn't do this for a list of lists\n    \n    # for each in L\n    #     if len(L) > 1:\n    #         for index in range(0, len(L) - 1):\n    #             L[index] = str(L[index]) + str(L[index + 1])\n    #     else:\n    #         L[0] = str(L[0]) + str(L[1])\n    # return L[0]\n    \n    \n    \n    \n    \n    # iterate through each item\n    # concatenate the first item with the second item\n    # append each item to the concatenation result\n    \n    # return result\n    \n    \n    \n    # Method 2\n    \n    # len(L) == 1\n    \n    # return L[0] + L[1]\n    \n    # Method 3\n    \n    # return ''.join(sorted(L[0:2]))\n    \n    # Method 4\n    \n    # return ''.join(L)\n    \n    \n    \n    \n    # Method 5\n    \n    # return '+'.join(sorted(L[0:2]))\n    \n    # Method 6\n    \n    # return ''.join(sorted(L[0:2])) + '+' + ''.join(sorted(L[1:3]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = []\n    for i in L:\n        result.append(i)\n    return int(\"\".join(str(i) for i in result))\n",
        "num_ids": 39
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    out = 0\n    for i in L:\n        out += i\n    return out\n",
        "num_ids": 23
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L=sorted(L)\n    L=L+L\n    return L\n",
        "num_ids": 22
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    l = []\n    for i in L:\n        l.append(i)\n    return int(''.join(l))\n",
        "num_ids": 32
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all the adverbs\n    adverbs = re.findall('(a.d|ad|a.e|a.i|a.o|a.u)', text)\n    # find the first adverb position\n    adverb_start_index = 0\n    for adverb in adverbs:\n        adverb_start_index = adverb_start_index + len(adverb) + 1\n        adverb_start_index = adverb_start_index - 1\n    return adverb_start_index\ndef remove_punct(text):\n    '''\n    Remove punctuation from a sentence.\n    '''\n    puncts = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    punct_removed = re.sub(puncts, \"\", text)\n    return punct_removed\n",
        "num_ids": 29
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    stmt = re.search(r'\\(.*?\\)|[,.,]', text).group()\n    stmt = stmt[0:stmt.find(')')]\n    stmt = stmt.replace('(', '')\n    stmt = stmt.replace(',', '')\n    stmt = stmt.replace(')', '')\n    stmt = stmt.replace(' ', '')\n    stmt = stmt.replace('s', 'an')\n    stmt = stmt.replace('d', 'a')\n    stmt = stmt.replace('o', 'a')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('t', 'an')\n    stmt = stmt.replace('s', 'an')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('t', 'an')\n    stmt = stmt.replace('v', 'a')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('v', 'n')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('v', 'd')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('v', 'e')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('a', 'a')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('o', 'an')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('s','s')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('o', 'an')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('s','s')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('o', 'an')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('s','s')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('o', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('v', 'd')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('s','s')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('s','s')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('o', 'an')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('s','s')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('a', 'an')\n    stmt = stmt.replace('e', 'e')\n    stmt = stmt.replace('s','s')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('t', 't')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('d', 'd')\n    stmt = stmt.replace('v', 'v')\n    stmt = stmt.replace('v', 'd')\n    stmt = stmt.replace('r', 'r')\n    stmt = stmt.replace('i', 'i')\n    stmt = stmt.replace('o', 'an')\n    stmt = stmt.replace('n', 'n')\n    stmt = stmt.replace('a', 'an')\n    stm",
        "num_ids": 2002
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    try:\n        adverbs = re.findall(r'\\b\\b(?:a[s]?|an)\\b', text)\n        #adverbs = re.findall(r'\\b\\b(?:a[s]?|an|anp|a[s]?|an|a[s]?|anp|an)\\b', text)\n        adverbs_positions = []\n        for adverb in adverbs:\n            positions = re.findall(r'\\b\\b(?:a|an|anp|a[s]?|an|anp|an)\\b', adverb)\n            if len(positions) > 0:\n                adverbs_positions.append(positions[0])\n        return adverbs_positions\n    except:\n        return []\n",
        "num_ids": 192
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # global adverbs\n    # adverbs = [\"aardvark\", \"aardvary\"]\n    adverbs = [\"aardvark\"]\n    # print(adverbs)\n    # end_list = [len(adverbs)]\n    # start_list = [1]\n    # for i in range(len(adverbs)):\n    #     for j in range(len(text)):\n    #         if text[j].find(adverbs[i])!= -1:\n    #             start_list.append(j)\n    #             end_list.append(j)\n    #             break\n",
        "num_ids": 146
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = text.split()\n    adverbs = []\n    for word1 in word:\n        if (word1 == \"i\" or word1 == \"you\") and word1.endswith(\"e\"):\n            adverbs.append(word1)\n        elif word1 == \"a\" and word1.endswith(\"e\"):\n            adverbs.append(word1)\n        elif word1.endswith(\"e\"):\n            adverbs.append(word1)\n        elif word1.endswith(\"y\"):\n            adverbs.append(word1)\n    adverbs.sort()\n    \n    adverb_positions = []\n    for adverb in adverbs:\n        word = adverb.split()\n        if word[0] == \"a\":\n            start = 0\n        else:\n            start = int(word[0])\n        adverb_positions.append([start,len(word)-1])\n    adverb_positions.sort()\n    \n    \n    return adverb_positions\ndef find_pronoun_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = text.split()\n    adverbs = []\n    for word1 in word:\n        if word1 == \"a\" or word1 == \"an\" or word1 == \"and\" or word1 == \"the\":\n            adverbs.append(word1)\n        elif word1 == \"i\" or word1 == \"you\" or word1 == \"your\":\n            adverbs.append(word1)\n        elif word1 == \"me\" or word1 == \"you\" or word1 == \"your\":\n            adverbs.append(word1)\n        elif word1.endswith(\"e\"):\n            adverbs.append(word1)\n        elif word1.endswith(\"y\"):\n            adverbs.append(word1)\n    adverbs.sort()\n    \n    pronoun_positions = []\n    for adverb in adverbs:\n        word = adverb.split()\n        if word[0] == \"a\":\n            start = 0\n        else:\n            start = int(word[0])\n        pronoun_positions.append([start,len(word)-1])\n    pronoun_positions.sort()\n    \n    return pronoun_positions\ndef find_adj_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = text.split()\n    adverbs = []\n    for word1 in word:\n        if word1 == \"a\" or word1 == \"an\" or word1 == \"a\" and word1.endswith(\"e\"):\n            adverbs.append(word1)\n        elif word1 == \"an\" and word1.endswith(\"y\"):\n            adverbs.append(word1)\n        elif word1.endswith(\"e\"):\n            adverbs.append(word1)\n        elif word1.endswith(\"y\"):\n            adverbs.append(word1)\n    adverbs.sort()\n    \n    adverb_positions = []\n    for adverb in adverbs:\n        word = adverb.split()\n        if word[0] == \"a\":\n            start = 0\n        else:\n            start = int(word[0])\n        adverb_positions.append([start,len(word)-1])\n    adverb_positions.sort()\n    \n    return adverb_positions\ndef find_adv_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = text.split()\n    adverbs = []\n    for word1 in word:\n        if word1 == \"a\" or word1 == \"an\" or word1 == \"and\" or word1 == \"the\":\n            adverbs.append(word1)\n        elif word1 == \"i\" or word1 == \"you\" or word1 == \"your\":\n            adverbs.append(word1)\n        elif word1 == \"me\" or word1 == \"you\" or word1 == \"your\":\n            adverbs.append(word1)\n        elif word1 == \"me\" or word1 == \"you\" or word1 == \"your\":\n            adverbs.append(word1)\n        elif word1.endswith(\"e\"):\n            adverbs.append(word1)\n        elif word1.endswith(\"y\"):\n            adverbs.append(word1)\n    adverbs.sort()\n    \n    adv_positions = []\n    for adverb in adverbs:\n        word = adverb.split()\n        if word[0] == \"a\":\n            start = 0\n        else:\n            start = int(word[0])\n        adv_positions.append([start,len(word)-1])\n    adv_positions.sort()\n    \n    return adv_positions\ndef find_noun_positions(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    word = text.split()\n    nouns = []\n    for word1 in word:\n        if word1 == \"a\" or word1 == \"an\" or word1 == \"an\" and word1.endswith(\"e\"):\n            nouns.append(word1)\n        elif word1 == \"an\" and word1.endswith(\"y\"):\n            nouns.append(word1)\n        elif word1.endswith(\"e\"):\n            nouns.append(word1)\n        elif word1.endswith(\"y\"):\n            nouns.append(word1)\n    nouns.sort()\n    \n    noun_positions = []\n    for noun in nouns:\n        word = noun.split()\n        if word[0] == \"a\":\n            start = 0\n        else:\n            start = int(word[0])\n        noun_positions.append([start,len(word)-1])\n    noun_positions.sort()\n    \n    return noun_positions\ndef find_verb_positions(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    word = text.split()\n    verbs = []\n    for word1 in word:\n        if word1 == \"a\" or word1 == \"an\" or word1 == \"an\" and word1.endswith(\"e\"):\n            verbs.append(word1)\n        elif word1 == \"an\" and word1.endswith(\"y\"):\n            verbs.append(word1)\n        elif word1 == \"an\" and word1.endswith(\"y\"):\n            verbs.append(word1)\n        elif word1.endswith(\"e\"):\n            verbs.append(word1)\n        elif word1.endswith(\"y\"):\n            verbs.append(word1)\n    verbs.sort()\n    \n    verb_positions = []\n    for verb in verbs:\n        word = verb.split()\n        if word[0] == \"a\":\n            start = 0\n        else:\n            start = int(word[0])\n        verb_positions.append([start,len(word)-1])\n    verb_positions.sort()\n    \n    return verb_positions\ndef find_pronoun_positions(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    word = text.split()\n    pronouns = []\n    for word1 in word:\n        if word1 == \"a\" or word1 == \"an\" or word1 == \"and\" or word1 == \"the\":\n            pronouns.append(word1)\n        elif word1 == \"i\" or word1 == \"you\" or word1 == \"your\":\n            pronouns.append(word1)\n        elif word1 == \"me\" or word1 == \"you\" or word1 == \"your\":\n            pronouns.append(word1)\n        elif word1 == \"me\" or word1 == \"you\" or word1 == \"your\":\n            pronouns.append(word1)\n        elif word1.en",
        "num_ids": 178
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_verb_positions(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_noun_positions(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_adjective_positions(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_prepositions(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_conjunction(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_prev_conj(text):\n    '''\n    Write a function to find the first prev conjunction and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_next_conj(text):\n    '''\n    Write a function to find the first next conjunction and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_negation(text):\n    '''\n    Write a function to find the first negation and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_future(text):\n    '''\n    Write a function to find the first future and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_action(text):\n    '''\n    Write a function to find the first action and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_interjection(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_pronoun(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_noun_noun(text):\n    '''\n    Write a function to find the first noun and noun, and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_noun_verb(text):\n    '''\n    Write a function to find the first noun and verb, and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_noun_adj(text):\n    '''\n    Write a function to find the first noun and adjective, and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_noun_adverb(text):\n    '''\n    Write a function to find the first noun and adverb, and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')\n    for i in range(len(text)):\n        if pattern.search(text[i]) is not None:\n            found.append((i, pattern.search(text[i]).start()))\n    return found\n    \ndef find_preposition(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    found = []\n    pattern = re.compile(r'\\b(a|an|the)\\b')",
        "num_ids": 28
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a = re.findall(r'(a|A|an|An)', text)\n    b = re.findall(r'(i|I|ie|Ie)', text)\n    c = re.findall(r'(e|E|ee|Ee)', text)\n    d = re.findall(r'(ou|Ou|o|ou|Ou)', text)\n    e = re.findall(r'(a|A|an|An)', text)\n    f = re.findall(r'(e|E|ee|Ee)', text)\n    g = re.findall(r'(e|E|ee|Ee)', text)\n    h = re.findall(r'(a|A|an|An)', text)\n    i = re.findall(r'(i|I|ie|Ie)', text)\n    j = re.findall(r'(e|E|ee|Ee)', text)\n    k = re.findall(r'(a|A|an|An)', text)\n    l = re.findall(r'(i|I|ie|Ie)', text)\n    m = re.findall(r'(e|E|ee|Ee)', text)\n    n = re.findall(r'(a|A|an|An)', text)\n    o = re.findall(r'(i|I|ie|Ie)', text)\n    p = re.findall(r'(e|E|ee|Ee)', text)\n    q = re.findall(r'(a|A|an|An)', text)\n    r = re.findall(r'(i|I|ie|Ie)', text)\n    s = re.findall(r'(e|E|ee|Ee)', text)\n    t = re.findall(r'(a|A|an|An)', text)\n    u = re.findall(r'(i|I|ie|Ie)', text)\n    v = re.findall(r'(e|E|ee|Ee)', text)\n    w = re.findall(r'(a|A|an|An)', text)\n    x = re.findall(r'(i|I|ie|Ie)', text)\n    y = re.findall(r'(e|E|ee|Ee)', text)\n    z = re.findall(r'(a|A|an|An)', text)\n    '''\n    a = re.findall(r'(a|A|an|An)', text)\n    b = re.findall(r'(i|I|ie|Ie)', text)\n    c = re.findall(r'(e|E|ee|Ee)', text)\n    d = re.findall(r'(a|A|an|An)', text)\n    e = re.findall(r'(i|I|ie|Ie)', text)\n    f = re.findall(r'(e|E|ee|Ee)', text)\n    g = re.findall(r'(a|A|an|An)', text)\n    h = re.findall(r'(i|I|ie|Ie)', text)\n    i = re.findall(r'(e|E|ee|Ee)', text)\n    j = re.findall(r'(a|A|an|An)', text)\n    k = re.findall(r'(i|I|ie|Ie)', text)\n    l = re.findall(r'(e|E|ee|Ee)', text)\n    m = re.findall(r'(a|A|an|An)', text)\n    n = re.findall(r'(i|I|ie|Ie)', text)\n    o = re.findall(r'(e|E|ee|Ee)', text)\n    p = re.findall(r'(a|A|an|An)', text)\n    q = re.findall(r'(i|I|ie|Ie)', text)\n    r = re.findall(r'(e|E|ee|Ee)', text)\n    s = re.findall(r'(a|A|an|An)', text)\n    t = re.findall(r'(i|I|ie|Ie)', text)\n    u = re.findall(r'(e|E|ee|Ee)', text)\n    v = re.findall(r'(a|A|an|An)', text)\n    w = re.findall(r'(i|I|ie|Ie)', text)\n    x = re.findall(r'(e|E|ee|Ee)', text)\n    y = re.findall(r'(a|A|an|An)', text)\n    z = re.findall(r'(i|I|ie|Ie)', text)\n    '''\n    a = re.findall(r'(a|A|an|An)', text)\n    b = re.findall(r'(i|I|ie|Ie)', text)\n    c = re.findall(r'(e|E|ee|Ee)', text)\n    d = re.findall(r'(a|A|an|An)', text)\n    e = re.findall(r'(i|I|ie|Ie)', text)\n    f = re.findall(r'(e|E|ee|Ee)', text)\n    g = re.findall(r'(a|A|an|An)', text)\n    h = re.findall(r'(i|I|ie|Ie)', text)\n    i = re.findall(r'(e|E|ee|Ee)', text)\n    j = re.findall(r'(a|A|an|An)', text)\n    k = re.findall(r'(i|I|ie|Ie)', text)\n    l = re.findall(r'(e|E|ee|Ee)', text)\n    m = re.findall(r'(a|A|an|An)', text)\n    n = re.findall(r'(i|I|ie|Ie)', text)\n    o = re.findall(r'(e|E|ee|Ee)', text)\n    p = re.findall(r'(a|A|an|An)', text)\n    q = re.findall(r'(i|I|ie|Ie)', text)\n    r = re.findall(r'(e|E|ee|Ee)', text)\n    s = re.findall(r'(a|A|an|An)', text)\n    t = re.findall(r'(i|I|ie|Ie)', text)\n    u = re.findall(r'(e|E|ee|Ee)', text)\n    v = re.findall(r'(a|A|an|An)', text)\n    w = re.findall(r'(i|I|ie|Ie)', text)\n    x = re.findall(r'(e|E|ee|Ee)', text)\n    y = re.findall(r'(a|A|an|An)', text)\n    z = re.findall(r'(i|I|ie|Ie)', text)\n    '''\n    a = re.findall(r'(a|A|an|An)', text)\n    b = re.findall(r'(i|I|ie|Ie)', text)\n    c = re.findall(r'(e|E|ee|Ee)', text)\n    d = re.findall(r'(a|A|an|An)', text)\n    e = re.findall(r'(i|I|ie|Ie)', text)\n    f = re.findall(r'(e|E|ee|Ee)', text)\n    g = r",
        "num_ids": 148
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile(r'(ADV|ADVERB|ADVERBS|ADVERBSIN|ADVERBSINISM|ADVERBSINISMS|ADVERBSINISMST|ADVERBSINISMSN|ADVERBSINISMSST|ADVERBSINISMSSTAN|ADVERBSINISMSSTAN|ADVERBSINISMSSTANAR|ADVERBSINISMSSTANAR|ADVERBSINISMSSTANARST|ADVERBSINISMSSTANARSTAN|ADVERBSINISMSSTANARSTAN|ADVERBSINISMSSTANARSTANAR|ADVERBSINISMSSTANARSTANAR|ADVERBSINISMSSTANARSTANARST|ADVERBSINISMSSTANARSTANARSTAN|ADVERBSINISMSSTANARSTANARSTANARST|ADVERBSINISMSSTANARSTANARSTANARSTAN|ADVERBSINISMSSTANARSTANARSTANARSTANARSTAN|
        "num_ids": 2007
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Initalize variables\n    pos1 = 0\n    pos2 = 0\n    prev_ind = 0\n    # Check if there are adverbs in sentence\n    for i in range(len(text)):\n        if text[i] in 'aeiou':\n            pos1 += 1\n        elif text[i] in 'lL' and text[i+1] == 'e':\n            pos1 += 1\n            pos1 += 1\n        elif text[i] in 'eE':\n            pos1 += 1\n            pos1 += 1\n        elif text[i] in 'lO':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'uU':\n            pos1 += 1\n            pos1 += 1\n        elif text[i] in 'Ll' and text[i+1] == 'l':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'Uu' and text[i+1] == 'u':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'lO' and text[i+1] == 'o':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'uU' and text[i+1] == 'u':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'oO':\n            pos1 += 1\n            pos1 += 1\n            pos1 += 1\n        elif text[i] in 'lL':\n            pos1 += 1\n            pos2 += 1\n            pos2 += 1\n        elif text[i] in 'Mm' and text[i+1] == 'r':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'Rr' and text[i+1] == 'r':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'Nn' and text[i+1] == 'n':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'Pp' and text[i+1] == 'p':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'Pp' and text[i+1] == 'n':\n            pos1 += 1\n            pos2 += 1\n        elif text[i] in 'Nn' and text[i+1] == 'n':\n            pos1 += 1\n            pos2 += 1\n    if pos1 < pos2:\n        pos = pos1\n    else:\n        pos = pos2\n    return pos\n",
        "num_ids": 632
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Initialize counters for the first adverb\n    # A counter for each adverb has an 'a' as the key and a counter for each of the adjacent letters\n    # count_a = 0\n    # count_ad = 0\n    count_a = 0\n    count_ad = 0\n    # Loop through the sentence, getting a count of each letter\n    for i in range(len(text)):\n        # Check if the letter is a vowel\n        if text[i].lower() in ['a','e','i','o','u']:\n            count_a += 1\n        # Check if the letter is a consonant\n        elif text[i].lower() not in ['a','e','i','o','u']:\n            count_ad += 1\n    # Return the number of letters of the word\n    return count_a,count_ad\n",
        "num_ids": 197
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    # The value of l will be the number of vertices in the cube\n    l = int(l)\n    \n    # The area of the cube is the volume of a sphere with radius of l.\n    vol = (4/3) * 3.14 * l * l\n    \n    # Return the volume of the sphere.\n    return vol\n",
        "num_ids": 83
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l[0]):\n        for j in range(l[1]):\n            for k in range(l[2]):\n                if i == j == k == 0:\n                    area = area + 1\n    return area\n",
        "num_ids": 65
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0.0\n    # the cube is a square\n    if l == 0:\n        return 0\n    # the cube is a parallelogram\n    else:\n        # find the base\n        base = (l**2) * 0.5\n        # the perimeter of the parallelogram\n        perimeter = (l**2 + base) * 3\n        # the area of the parallelogram\n        area = (l**3) / 4\n        # return the area of the parallelogram\n        return area + perimeter + base\n",
        "num_ids": 125
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # if len(l) == 4:\n    #     return (l[0]*l[1]*l[2]*l[3])\n    # elif len(l) == 3:\n    #     return ((l[0]*l[1]*l[2]))\n    # else:\n    #     raise ValueError('Bad size')\n    \n    return l[0] * l[1] * l[2]\n",
        "num_ids": 106
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = 4*(l**3)\n    return a\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    c=3.141592653589793\n    return round(4*l*c,2)\ndef surfacearea_square(l):\n    '''\n    Write a function to find the surface area of a square of a given size.\n    '''\n    return round(4*l*l,2)\ndef surfacearea_cube_square(l):\n    '''\n    Write a function to find the surface area of a cube and a square of a given size.\n    '''\n    return round(4*l*l*l,2)\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area_cube = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                area_cube += abs((l[i][j][k] - (l[i][k][j] - l[k][j][i])))\n    return area_cube\n",
        "num_ids": 78
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return ((2*l)**3)*math.pi\n",
        "num_ids": 16
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = 3.14 * l ** 2\n    return a\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def calculate_volume(side):\n        return(3.14*(side**2))\n    return(calculate_volume(l))\n",
        "num_ids": 36
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(len(nums))/float(sum(nums))\n",
        "num_ids": 20
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    ans = []\n    for i in range(len(nums)):\n        num = nums[i]\n        if num > 0:\n            ans.append(num)\n    return ans\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            c+=1\n    return c\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            nums[i] = float(nums[i])/abs(nums[i])\n    print(nums)\n    print(nums)\n    return nums\n",
        "num_ids": 68
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    count_p = [0] * (nums[0]+1)\n    \n    for i in range(len(nums)):\n        count_p[nums[i]] += 1\n    \n    for i in range(1, nums[0]+1):\n        count_p[i] += count_p[i-1]\n        \n    return count_p[nums[0]] / sum(count_p)\n",
        "num_ids": 106
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    count = 0\n    arr = array('i',nums)\n    if len(nums) == 0:\n        return \"Failed to find positive values\"\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        return nums\n    else:\n        arr.sort()\n        if nums[0] >= nums[1]:\n            count = nums[0]\n            for i in range(0,len(nums)):\n                if nums[i] >= count:\n                    count = nums[i]\n        else:\n            count = nums[1]\n            for i in range(1,len(nums)):\n                if nums[i] >= count:\n                    count = nums[i]\n        return count\n    \n",
        "num_ids": 196
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in nums:\n        if i > 0:\n            sum += 1\n    return sum / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        count=0\n        for x in range(len(nums)):\n            if nums[x]>0:\n                count+=1\n        return count/len(nums)\n",
        "num_ids": 65
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array=[]\n    for i in range(len(nums)):\n        if nums[i]>0:\n            positive_array.append(nums[i])\n    if len(positive_array)<=1:\n        return 'There are not positive numbers'\n    else:\n        return len(positive_array)/len(positive_array)\n",
        "num_ids": 88
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1=list1[0]\n    for i in range(len(list1)): \n        if list1[i]<0: \n            list1[i]=list1[i]*-1\n            max1=max(max1,list1[i])\n    return max1 \ndef negative(list1): \n    '''\n    Write a python function to find the minimum number in the given list.\n    '''\n    min1=list1[0]\n    for i in range(len(list1)): \n        if list1[i]<0: \n            list1[i]=list1[i]*-1\n            min1=min(min1,list1[i])\n    return min1 \ndef reverse_list(list1): \n    '''\n    Write a python function to reverse the given list.\n    '''\n    for i in range(int(len(list1)/2)): \n        list1[i],list1[len(list1)-i-1]=list1[len(list1)-i-1],list1[i]\ndef permute(list1): \n    '''\n    Write a python function to find all permutations of a given list.\n    '''\n    if len(list1)==1: \n        print(list1)\n    else: \n        for i in range(len(list1)): \n            list1[i]=list1[i]*-1\n            permute(list1)\ndef selection_sort(list1): \n    '''\n    Write a python function to sort a given list.\n    '''\n    for i in range(len(list1)): \n        min=list1[0]\n        for j in range(len(list1)): \n            if list1[j]<min: \n                min=list1[j]\n                idx=j\n        list1[idx],list1[i]=list1[i],list1[idx]\n    return list1\ndef insertion_sort(list1): \n    '''\n    Write a python function to sort a given list.\n    '''\n    for i in range(1,len(list1)): \n        for j in range(i,0,-1): \n            if list1[j]<list1[j-1]: \n                list1[j],list1[j-1]=list1[j-1],list1[j]\n            else: \n                break\n    return list1\ndef bubble_sort(list1): \n    '''\n    Write a python function to sort a given list.\n    '''\n    for i in range(len(list1)-1): \n        for j in range(len(list1)): \n            if list1[j]>list1[j+1]: \n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\ndef merge(list1, list2): \n    '''\n    Write a python function to merge the two lists.\n    '''\n    list1_n=len(list1)\n    list2_n=len(list2)\n    i=0\n    j=0\n    while i<list1_n and j<list2_n: \n        if list1[i]<list2[j]: \n            list1[i]=list1[i]*-1\n            i+=1\n        else: \n            list2[j]=list2[j]*-1\n            j+=1\n    while i<list1_n: \n        list1[i] = list1[i]*-1\n        i+=1\n    while j<list2_n: \n        list2[j] = list2[j]*-1\n        j+=1\n    return list1, list2 \ndef binary_search(list1, value): \n    '''\n    Write a python function to find the index of a given value in the given list.\n    '''\n    l=0\n    r=len(list1)-1\n    while(l<=r): \n        mid=(l+r)//2\n        if(list1[mid]==value): \n            return mid\n        if(list1[mid]<value): \n            l=mid+1\n        else: \n            r=mid-1\n    return -1\ndef count(list1): \n    '''\n    Write a python function to count the number of distinct elements in a given list.\n    '''\n    count1=0\n    for i in range(len(list1)): \n        if(list1[i]==list1[i]*-1): \n            count1+=1\n    return count1\ndef heapsort(list1): \n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    for i in range(len(list1)): \n        for j in range(len(list1)-1-i): \n            if list1[j]>list1[j+1]: \n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\ndef merge_sort(list1): \n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    if len(list1)==1: \n        return list1\n    mid = len(list1)//2\n    left = list1[:mid]\n    right = list1[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left,right)\ndef quick_sort(list1): \n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    if len(list1)<=1: \n        return list1\n    def qsort(list1, start, end): \n        if start >= end: \n            return\n        pivot = list1[start]\n        low = start+1\n        high = end\n        while low<=high: \n            while low<=high and list1[high] >= pivot: \n                high = high-1\n            while low<=high and list1[low] <= pivot: \n                low = low+1\n            if low<=high: \n                list1[low],list1[high] = list1[high],list1[low]\n        list1[start],list1[high] = list1[high],list1[start]\n        qsort(list1, start, high-1)\n        qsort(list1, high+1, end)\n    qsort(list1, 0, len(list1)-1)\n    return list1\ndef selection_sort(list1): \n    '''\n    Write a python function to sort a given list.\n    '''\n    for i in range(len(list1)): \n        min=list1[0]\n        for j in range(len(list1)): \n            if list1[j]<min: \n                min=list1[j]\n                idx=j\n        list1[idx],list1[i]=list1[i],list1[idx]\n    return list1\ndef insertion_sort(list1): \n    '''\n    Write a python function to sort a given list.\n    '''\n    for i in range(1,len(list1)): \n        for j in range(i,0,-1): \n            if list1[j]<list1[j-1]: \n                list1[j],list1[j-1]=list1[j-1],list1[j]\n            else: \n                break\n    return list1\ndef bubble_sort(list1): \n    '''\n    Write a python function to sort a given list.\n    '''\n    for i in range(len(list1)-1): \n        for j in range(len(list1)): \n            if list1[j]>list1[j+1]: \n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\ndef merge_sort(list1): \n    '''\n    Write a python function to sort a given list.\n    '''\n    if len(list1)==1: \n        return list1\n    mid = len(list1)//",
        "num_ids": 28
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Step 1: Initialize a variable to the largest positive integer.\n    largest_negative = -1\n    \n    # Step 2: Iterate over the list and find the largest negative integer.\n    for i in list1:\n        if i < 0:\n            if i > largest_negative:\n                largest_negative = i\n            \n    # Step 3: If the largest negative integer was not found, return -1.\n    return largest_negative\n",
        "num_ids": 104
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        largest=list1[0]\n        for item in list1:\n            if item<0:\n                largest=item\n                break\n    return largest\n",
        "num_ids": 57
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            max = list1[i]\n            break\n    return max\n",
        "num_ids": 51
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n        else:\n            continue\n    for i in range(len(list1)):\n        if list1[i] > max:\n            max = list1[i]\n    return max\n",
        "num_ids": 93
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for element in list1[1:]:\n        if element < 0:\n            largest = element\n    return largest\n",
        "num_ids": 38
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            negative.append(list1[i])\n    if len(negative) > 0:\n        print(\"The largest negative number is \", negative[0])\n    else:\n        print(\"The largest negative number is 0\")\n",
        "num_ids": 81
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg\n",
        "num_ids": 46
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in list1: \n        if i < 0: \n            return i \n    \n    return None\n",
        "num_ids": 30
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = len(list1)\n    if l==0:\n        return 0\n    else:\n        if list1[0]<0:\n            return -list1[0]\n        else:\n            return largest_neg(list1[1:])\n",
        "num_ids": 63
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # define a function to trim each tuple\n    # no need to use list comprehension here\n    \n    def truncate_tuple(t):\n        return t[0:K]\n    \n    return [truncate_tuple(t) for t in test_list]\n    ",
        "num_ids": 67
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for index, item in enumerate(test_list):\n        if len(item) >= K:\n            test_list.pop(index)\n            break\n    return test_list\n",
        "num_ids": 45
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    lst = [t[:K] for t in test_list]\n    return lst\n",
        "num_ids": 25
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = []\n    for e in test_list:\n        if len(e) > K:\n            tuple_list.append(e[0:K])\n        else:\n            tuple_list.append(e)\n    return tuple_list\n",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # Initialize to the original list\n    trim_list = []\n    \n    # Iterate through the list to remove all tuples\n    # that aren't tuples.\n    # Note: This could be more efficient by removing each\n    # element from the list and iterating through\n    # the list as we go, but I'll add in more time later.\n    for i in test_list:\n        if type(i) is tuple:\n            trim_list.append(i)\n        else:\n            trim_list.append(i)\n    \n    # Remove each tuple by k\n    for i in range(len(trim_list)):\n        \n        # Remove each tuple by k\n        for j in range(len(trim_list[i])-K):\n            trim_list[i].pop()\n    \n    # Return the trimmed list\n    return trim_list\n",
        "num_ids": 212
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Input\n    # test_list : A list of tuples, with each tuple consisting of a key and a value.\n    # K : The number of elements to trim.\n",
        "num_ids": 42
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_tuple = []\n    for element in test_list:\n        if len(element) > K:\n            return_tuple.append(element[:K])\n        else:\n            return_tuple.append(element)\n    return return_tuple\n",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    def trim(test_tuple):\n        return test_tuple[0:K]\n    \n    return trim(test_list)\n    \n",
        "num_ids": 39
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0,len(test_list)):\n        if len(test_list[i])>K:\n            test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 56
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"\\n\\nIndex wise multiplication of tuples in 2d list\\n\")\n    print(\"\\nTuple 1:\", test_tup1)\n    print(\"Tuple 2:\", test_tup2)\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_tup = []\n        for j in range(len(test_tup2)):\n            result_tup.append(test_tup1[i] * test_tup2[j])\n        result_list.append(result_tup)\n    print(\"\\n\\nTuple result:\", result_list)\n",
        "num_ids": 158
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    t1 = test_tup1\n    t2 = test_tup2\n",
        "num_ids": 22
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    # TODO: Write your code here\n    \n    # Creating an empty list for the variables\n    mul_list = []\n    \n    # Checking the length of the two tuples\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple sizes do not match.\")\n    \n    # Appending the elements of the tuples into the list\n    for i in range(len(test_tup1)):\n        mul_list.append(test_tup1[i] * test_tup2[i])\n        \n    # Returning the result\n    return mul_list\n    ",
        "num_ids": 153
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = [0, 0]\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] * test_tup2[i]\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # create list of tuples to perform index value calculation\n    test_tuple = test_tup1 + test_tup2\n    # create dictionary to save index values\n    index_dict = {}\n    # for every element in the tuple\n    for element in test_tuple:\n        # if element already exists in dictionary\n        if element in index_dict:\n            # increment index value\n            index_dict[element] = index_dict[element] + 1\n        # else\n        else:\n            # add element to dictionary\n            index_dict[element] = 1\n    # return index_dict dictionary\n    return index_dict\n",
        "num_ids": 148
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Write your code here\n    index1 = test_tup1[0]\n    index2 = test_tup2[0]\n    final_index1 = 0\n    final_index2 = 0\n",
        "num_ids": 51
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Your code here\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i])\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2002
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    result_tuple2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    \n    # first, check if the tuple is empty, then perform index calculation\n    if len(result_tuple1) < len(result_tuple2):\n        # if the result_tuple1 tuple is smaller than the result_tuple2, then swap them and iterate\n        for i in range(len(result_tuple2)):\n            if result_tuple1[i] < result_tuple2[i]:\n                tmp = result_tuple1[i]\n                result_tuple1[i] = result_tuple2[i]\n                result_tuple2[i] = tmp\n    \n    elif len(result_tuple2) < len(result_tuple1):\n        # if the result_tuple2 tuple is smaller than the result_tuple1, then swap them and iterate\n        for i in range(len(result_tuple1)):\n            if result_tuple2[i] < result_tuple1[i]:\n                tmp = result_tuple2[i]\n                result_tuple2[i] = result_tuple1[i]\n                result_tuple1[i] = tmp\n    else:\n        # if both result_tuple1 and result_tuple2 are the same length, then iterate through them and swap them.\n        for i in range(len(result_tuple1)):\n            tmp = result_tuple1[i]\n            result_tuple1[i] = result_tuple2[i]\n            result_tuple2[i] = tmp\n    \n    # output the results of the multiplication\n    print(\"Index wise multiplication of the two tuples is:\")\n    print(\"Index 1:\", result_tuple1)\n    print(\"Index 2:\", result_tuple2)\n    ",
        "num_ids": 477
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    # get the first element of the tuples\n    for i in range(len(test_tup1)):\n        element = test_tup1[i]\n        result.append(element*test_tup2[i])\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = Counter(lst)\n    for x in tup:\n        occur[x] = occur[x] + 1\n    return occur\n",
        "num_ids": 38
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    return c.most_common(lst)\n",
        "num_ids": 23
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # lst = list(tup)\n    # cnt = 0\n    # for i in lst:\n    #     if i in lst:\n    #         cnt += 1\n    # return cnt\n    \n    # print(Counter(lst))\n    # print(Counter(lst))\n    # print(Counter(lst))\n    # return Counter(lst)\n    return len(set(lst))\n",
        "num_ids": 104
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    res = []\n    for i in tup:\n        res.append(lst.count(i))\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\n    \n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst1 = []\n    for i in range(len(tup)): \n        lst1.append(tup[i][0]) \n    print(\"Occurence of each element in tuple:\",lst1) \n    occ = {} \n    for i in range(len(lst)): \n        if lst1[i] in occ.keys(): \n            occ[lst1[i]] = occ[lst1[i]]+1 \n        else: \n            occ[lst1[i]] = 1\n    print(\"Occurence of each element in tuple:\",occ) \n    return occ\n",
        "num_ids": 153
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    occurence = 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            occurence += 1\n    return occurence\n",
        "num_ids": 49
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        count = count + lst.count(i)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_len = len(lst)\n    occ_tup = tuple(tup)\n    occ_lst = list(occ_tup)\n    occ_count = Counter(occ_lst)\n    return occ_count\n",
        "num_ids": 59
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # your code goes here\n    occurence = 0\n    for e in tup: \n        occurence += lst.count(e)\n    return occurence\n",
        "num_ids": 44
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    answer = [1, 1, 1, 1, 1, 8, 8, 8]\n    for num in nums:\n        answer[num] = answer[num] * num\n        answer[num] %= MOD\n    return answer\n",
        "num_ids": 57
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    if len(nums) == 0:\n        return []\n    \n    output = []\n    \n    # iterate over all elements in the list\n    for element in nums:\n        output.append(element**3)\n        \n    return output\n",
        "num_ids": 63
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    num_dict = {}\n    for num in nums:\n        num_dict[num] = num*num*num\n    cube_dict = {}\n    for num in nums:\n        cube_dict[num_dict[num]] = num*num*num*num\n    return cube_dict\n",
        "num_ids": 72
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x**3, nums)\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    l = []\n    for num in nums:\n        l.append(num**3)\n    return l\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]*(3**(len(nums)-1-i)))\n    return cubes\n",
        "num_ids": 51
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube_helper(nums):\n        if len(nums) == 1:\n            return nums[0] * nums[0] * nums[0]\n        else:\n            return nums[0] ** 3 + cube_helper(nums[1:])\n",
        "num_ids": 70
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube_rec(nums, index, result):\n        if len(nums) == 0:\n            result.append(1)\n            return\n        for i in range(index):\n            cube_rec(nums[:i] + nums[i+1:], i, result + [nums[i]**3])\n    result = []\n    cube_rec(nums, 0, result)\n    return result",
        "num_ids": 102
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [1, 3, 9, 27, 125]\n    cube.extend(map(lambda x:x**3, cube))\n    return sum(map(lambda x:x**3,cube))",
        "num_ids": 50
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n        \nprint(cal_sum(10)",
        "num_ids": 40
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += i\n    return a\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    i = 0\n    while i < n:\n        s += i\n        i += 1\n    return s\n    ",
        "num_ids": 34
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    l = 0\n    for x in range(n): \n        l += x**2\n    return l \n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0: \n        return 0\n    else: \n        return n + cal_sum(n-1)\n    \n",
        "num_ids": 34
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1))\n",
        "num_ids": 15
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n",
        "num_ids": 11
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return ''\n",
        "num_ids": 16
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    assert type(str) is list, 'Input should be a list'\n    assert type(l) is list, 'Input should be a list'\n    assert len(str) == len(l), 'Length of the list does not match the given size'\n    new_list = []\n    for x in range(0, len(str)):\n        new_list.append(str[x][:l[x]])\n    return new_list\n",
        "num_ids": 105
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return l[:l.index(str)]\n",
        "num_ids": 14
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = ''\n    for i in l:\n        res += str(i)\n    return res\n",
        "num_ids": 26
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return \"\"\n    if len(str) < l:\n        return str[0:l]\n    if len(str) > l:\n        return str[0:l][::-1] + str[l:]",
        "num_ids": 62
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l_1 = l.copy()\n    l_2 = l.copy()\n    str_1 = ''\n    str_2 = ''\n    for i in range(len(l_1)):\n        for j in range(len(l_1[i])):\n            if l_1[i][j] == '\"' or l_1[i][j] == ',':\n                str_1 += l_1[i][j]\n                l_2[i] = l_2[i].replace(l_1[i][j],'')\n            else:\n                str_2 += l_1[i][j]\n                l_2[i] = l_2[i].replace(l_1[i][j],'')\n        for k in range(len(l_2)):\n            for l in range(len(l_2[k])):\n                if l_2[k][l] == '\"' or l_2[k][l] == ',':\n                    str_2 += l_2[k][l]\n                    l_2[k] = l_2[k].replace(l_2[k][l],'')\n                else:\n                    str_2 += l_2[k][l]\n                    l_2[k] = l_2[k].replace(l_2[k][l],'')\n    return str_1, str_2\n",
        "num_ids": 332
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # split the string into a list of lists\n    # search for the string in each list\n    # concat all the lists together into a string\n    # return the string\n    str = list(map(str, str))\n    for i in range(len(l)):\n        if l[i]['size'] > 0:\n            str.extend([str(l[i]['content'])])\n    return ''.join(str)\n",
        "num_ids": 105
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    ind_l = 0\n    ind_s = 0\n    while ind_s < len(str):\n        if str[ind_s] =='':\n            ind_s += 1\n        elif str[ind_s] == '\\n':\n            ind_l += 1\n            ind_s += 1\n        elif str[ind_s] == '\\t':\n            ind_s += 1\n    return ind_l, ind_s\n    \ndef read_file(filename):\n    '''\n    Read a file.\n    '''\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n    return lines\n",
        "num_ids": 28
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    s = \"\"\n    while(i < len(str)):\n        s += str[i]\n        i += 1\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ','')\n    text1 = re.sub(r'\\s+','', text1)\n    return text1\ndef remove_punct(text1):\n    '''\n    Write a function to remove punctuation from the given string.\n    '''\n    text1 = text1.replace('.','')\n    text1 = re.sub(r'[^\\w\\s]', '', text1)\n    return text1\ndef remove_brackets(text1):\n    '''\n    Write a function to remove brackets from the given string.\n    '''\n    text1 = re.sub(r'\\([^)]*\\)', '', text1)\n    text1 = re.sub(r'\\(\\[^)]*\\)', '', text1)\n    text1 = re.sub(r'\\{[^}]*\\}', '', text1)\n    return text1\ndef remove_adj_tokens(text1):\n    '''\n    Write a function to remove adjacent tokens.\n    '''\n    text1 = re.sub(r'\\d+\\-\\d+', '', text1)\n    text1 = re.sub(r'\\d+', '', text1)\n    text1 = re.sub(r'[a-zA-Z]', '', text1)\n    text1 = re.sub(r'\\s+','', text1)\n    text1 = re.sub(r'[^a-zA-Z]', '', text1)\n    return text1\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    text1 = remove_punct(text1)\n    text1 = remove_brackets(text1)\n    text1 = remove_adj_tokens(text1)\n    return text1\ndef remove_stopwords_list(text1):\n    '''\n    Write a function to remove stopwords from the given list.\n    '''\n    text1 = re.sub(r'[^a-zA-Z]', '', text1)\n    text1 = remove_punct(text1)\n    text1 = remove_brackets(text1)\n    text1 = remove_adj_tokens(text1)\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_numbers(text1):\n    '''\n    Write a function to remove numbers from the given string.\n    '''\n    text1 = re.sub(r'\\d+', '', text1)\n    return text1\ndef remove_lemmatized_words(text1):\n    '''\n    Write a function to remove lemmatized words from the given string.\n    '''\n    text1 = remove_punct(text1)\n    text1 = remove_brackets(text1)\n    text1 = remove_adj_tokens(text1)\n    text1 = remove_stopwords_list(text1)\n    text1 = remove_numbers(text1)\n    return text1\ndef remove_stopwords_lemmatized(text1):\n    '''\n    Write a function to remove stopwords from the given lemmatized string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    text1 = remove_punct(text1)\n    text1 = remove_brackets(text1)\n    text1 = remove_adj_tokens(text1)\n    text1 = remove_stopwords_list(text1)\n    text1 = remove_numbers(text1)\n    return text1\ndef remove_stopwords_stopwords_lemmatized(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    text1 = remove_lemmatized_words(text1)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation from the given string.\n    '''\n    text1 = re.sub(r'[^a-zA-Z]+', '', text1)\n    return text1\ndef remove_stopwords_punctuation(text1):\n    '''\n    Write a function to remove stopwords from the given punctuation string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_punctuation(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_stopwords(text1)\n    return text1\ndef remove_stopwords_stopwords_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given stopwords string.\n    '''\n    text1 = remove_punctuation(text1)\n    return text1\ndef remove_stopwords_stopwords",
        "num_ids": 29
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern,'', text1)\n",
        "num_ids": 25
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    for i in range(len(text1)):\n        if text1[i].isspace():\n            text1 = text1[:i] + text1[i+1:]\n    return text1\n",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1)\ndef get_numbers(text):\n    '''\n    Write a function to get all the numbers from the given string.\n    '''\n    return re.findall(r'\\d+', text)\n",
        "num_ids": 18
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from text1\n    text = re.sub(\" +\", \" \", text1)\n    # Remove the newline\n    text = re.sub(\"\\n\", \"\", text)\n    # Remove spaces\n    text = re.sub(\" +\", \" \", text)\n    return text\ndef is_fibonacci(x):\n    '''\n    Write a function to check if x is a Fibonacci number.\n    '''\n    # Remove all whitespaces from text1\n    text = remove_whitespaces(str(x))\n    # Count the number of digits in the number\n    number_of_digits = len(str(x))\n    # Create a list of the Fibonacci number in the text\n    fibonacci_list = [1, 2]\n    # For each digit, add the number of digits into the list\n    for n in range(1, number_of_digits + 1):\n        fibonacci_list.append(fibonacci_list[n - 1] + fibonacci_list[n - 2])\n    # If the number is even, it's a Fibonacci number\n    if x % 2 == 0:\n        # Check if the list has at least two numbers in it\n        if len(fibonacci_list) > 2:\n            # If it does, it is a Fibonacci number\n            if str(fibonacci_list[0]) == str(fibonacci_list[1]):\n                # Return the number and return False if it is not\n                return True\n            else:\n                return False\n        # If it is, it is a Fibonacci number\n        else:\n            # Return the number and return True if it is not\n            return True\n    else:\n        # If the number is odd, it's a Fibonacci number\n        if x % 2 == 1:\n            # Check if the list has at least two numbers in it\n            if len(fibonacci_list) > 2:\n                # If it does, it is a Fibonacci number\n                if str(fibonacci_list[0]) == str(fibonacci_list[1]):\n                    # Return the number and return False if it is not\n                    return True\n                else:\n                    # Return the number and return True if it is not\n                    return True\n            # If it is, it is a Fibonacci number\n            else:\n                # Return the number and return True if it is not\n                return True\n        # If the number is odd, it's a Fibonacci number\n        else:\n            # Return the number and return True if it is not\n            return True\n    \ndef fib_rec(n):\n    '''\n    Write a function to calculate the n-th Fibonacci number.\n    '''\n    # If the n is less than or equal to 0, the return value is -1\n    if n <= 0:\n        return -1\n    # If the n is greater than or equal to 10, the return value is 0\n    if n >= 11:\n        return 0\n    # If the n is greater than or equal to 50, the return value is 1\n    if n >= 51:\n        return 1\n    # If the n is greater than or equal to 1000, the return value is 2\n    if n >= 1000:\n        return 2\n    # If the n is greater than or equal to 10000, the return value is 3\n    if n >= 10000:\n        return 3\n    # If the n is greater than or equal to 1000000, the return value is 4\n    if n >= 1000000:\n        return 4\n    # If the n is greater than or equal to 10000000, the return value is 5\n    if n >= 10000000:\n        return 5\n    # If the n is greater than or equal to 100000000, the return value is 6\n    if n >= 100000000:\n        return 6\n    # If the n is greater than or equal to 1000000000, the return value is 7\n    if n >= 1000000000:\n        return 7\n    # If the n is greater than or equal to 100000000000, the return value is 8\n    if n >= 100000000000:\n        return 8\n    # If the n is greater than or equal to 1000000000000, the return value is 9\n    if n >= 1000000000000:\n        return 9\n    # If the n is greater than or equal to 1000000000000, the return value is 10\n    if n >= 1000000000000:\n        return 10\n    # If the n is greater than or equal to 1000000000000, the return value is 11\n    if n >= 1000000000000:\n        return 11\n    # If the n is greater than or equal to 1000000000000, the return value is 12\n    if n >= 1000000000000:\n        return 12\n    # If the n is greater than or equal to 1000000000000, the return value is 13\n    if n >= 1000000000000:\n        return 13\n    # If the n is greater than or equal to 1000000000000, the return value is 14\n    if n >= 1000000000000:\n        return 14\n    # If the n is greater than or equal to 1000000000000, the return value is 15\n    if n >= 1000000000000:\n        return 15\n    # If the n is greater than or equal to 1000000000000, the return value is 16\n    if n >= 1000000000000:\n        return 16\n    # If the n is greater than or equal to 1000000000000, the return value is 17\n    if n >= 1000000000000:\n        return 17\n    # If the n is greater than or equal to 1000000000000, the return value is 18\n    if n >= 1000000000000:\n        return 18\n    # If the n is greater than or equal to 1000000000000, the return value is 19\n    if n >= 1000000000000:\n        return 19\n    # If the n is greater than or equal to 1000000000000, the return value is 20\n    if n >= 1000000000000:\n        return 20\n    # If the n is greater than or equal to 1000000000000, the return value is 21\n    if n >= 1000000000000:\n        return 21\n    # If the n is greater than or equal to 1000000000000, the return value is 22\n    if n >= 1000000000000:\n        return 22\n    # If the n is greater than or equal to 1000000000000, the return value is 23\n    if n >= 1000000000000:\n        return 23\n    # If the n is greater than or equal to 1000000000000, the return value is 24\n    if n >= 1000000000000:\n        return 24\n    # If the n is greater than or equal to 1000000000000, the return value is 25\n    if n >= 1000000000000:\n        return 25\n    # If the n is greater than or equal to 1000000000000, the return value is 26\n    if n >= 1000000000000:\n        return 26\n    # If the n is greater than or equal to 1000000000000, the return value is 27\n    if n >= 1000000000000:\n        return 27\n    # If the n is greater than or equal to 1000000000000, the return value is 28\n    if n >= 1000000000000:\n        return 28\n    # If the n is greater than or equal to 1000000000000, the return value is 29\n    if n >= 1000000000000:\n        return 29\n    # If the n is greater than or equal to 1000000000000, the return value is 30\n    if n >= 1000000000000:\n        return 30\n    # If the n is greater than or equal to 1000000000000, the return value is 31\n    if n >= 1000000000000:\n        return 31\n    # If the n is greater than or equal to 1000000000000, the return value is 32\n    if n >= 1000000000000:\n        return 32\n    # If the n is greater than or equal to 1000000000000, the return value is 33\n    if n >= 1000000000000:\n        return 33\n    # If the n is greater than or equal to 1000000000000, the return value is 34\n    if n >= 1000000000000:\n        return 34\n    # If the n is greater than or equal to 1000000000000, the return value is 35\n    if n >= 1000000000000:\n        return 35\n    # If the n is greater than or equal to 1000000000000, the return value is 36\n    if n >= 1000000000000:\n        return 36\n    # If the n is greater than or equal to 1000000000000, the return value is 37\n    if n >= 1000000000000:\n        return 37\n    # If the n is greater than or equal to 1000000000000, the return value is 38\n    if n >= 1000000000000:\n        return 38\n    # If the n is greater than or equal to 1000000000000, the return value is 39\n    if n >= 1000000000000",
        "num_ids": 1364
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # if the string is empty, then return an empty string\n    if text1 == '':\n        return ''\n    \n    # using split() method to extract a single string\n    list1 = re.split(r'\\s+', text1)\n    \n    # concatenation and stripping each element of list1\n    new_string =''.join(list1)\n    \n    # check if the string is empty\n    if new_string == '':\n        return ''\n    \n    return new_string\n    \ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    # if the string is empty, then return an empty string\n    if text1 == '':\n        return ''\n    \n    # using split() method to extract a single string\n    list1 = re.split(r'[^a-zA-Z0-9]', text1)\n    \n    # concatenation and stripping each element of list1\n    new_string =''.join(list1)\n    \n    # check if the string is empty\n    if new_string == '':\n        return ''\n    \n    return new_string\n",
        "num_ids": 128
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n",
        "num_ids": 18
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef remove_non_ascii(text1):\n    '''\n    Write a function that removes non-ascii characters.\n    '''\n    return text1.encode('ascii', 'ignore').decode('ascii')\ndef remove_non_ascii_latin_letters(text1):\n    '''\n    Write a function that removes non-ascii characters from the given string.\n    '''\n    return text1.encode('ascii').decode('latin-1')\n",
        "num_ids": 23
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1)\n",
        "num_ids": 15
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        return actual_cost - sale_amount\n    except:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost==sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n    \ndef loss_sum(actual_cost,sale_amount): \n    '''\n    Write a function that gives sum of losses on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost = actual_cost*100\n    sale_amount = sale_amount*100\n    if actual_cost-sale_amount < 100:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 55
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost * sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    return actual_cost-sale_amount\ndef min_r(L):\n    '''\n    Write a function that returns the minimum reward.\n    '''\n    if L==0:\n        return 0\n    else:\n        return min(L[0],min(L[1],L[2]))\ndef max_r(L):\n    '''\n    Write a function that returns the maximum reward.\n    '''\n    if L==0:\n        return 0\n    else:\n        return max(L[0],max(L[1],L[2]))\ndef max_min(L):\n    '''\n    Write a function that returns the maximum and minimum rewards.\n    '''\n    if L==0:\n        return (0,0)\n    return (min(L[0],max(L[1],L[2])),min(L[0],max(L[1],L[2])))\n",
        "num_ids": 55
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total_amount = sale_amount * actual_cost\n    return round(total_amount,2)\n",
        "num_ids": 26
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0 \n    for i in range(1, math.floor(math.sqrt(n)) + 1):\n        if n%i == 0:\n            count += i\n    return count \n",
        "num_ids": 50
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    print(\"\\n\\n\\n\")\n    print(\"\\n\\n\\n\")\n    s=[]\n    if n%2==0:\n        n1=int(n/2)\n        for i in range(1,int(math.sqrt(n1)+1)):\n            if n%i==0:\n                s.append(i)\n        if s!=[]:\n            print(s)\n            return s[0]+s[1]\n        else:\n            return s\n    else:\n        return n\ndef sumofProduct(n): \n    '''\n    Write a python function to find the sum of the product of a number.\n    '''\n    print(\"\\n\\n\\n\")\n    print(\"\\n\\n\\n\")\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*sumofProduct(n-1)\n",
        "num_ids": 64
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n==1) : \n        return 2\n    elif(n==2) : \n        return 3\n    elif(n%2==0) : \n        return n+2\n    else : \n        for i in range(3,n,2): \n            if (n%i==0) : \n                break\n        if (i==n//2) : \n            return n+2\n        else: \n            return n+3\n",
        "num_ids": 113
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            s += i\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f = []\n    for i in range(1,n+1):\n        if n%i==0:\n            f.append(i)\n    return sum(f)\n",
        "num_ids": 44
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #return n/2\n    a = n%2\n    if a == 0:\n        return n\n    else:\n        if a == 1:\n            return n\n        else:\n            return sumofFactors(n//2)\n",
        "num_ids": 58
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n\n    else:\n        return sumofFactors(n/2) + sumofFactors(n*3 + 1)\n",
        "num_ids": 65
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    if n == 0 : \n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1 : \n        return 1\n    else : \n        return math.factorial(n) / math.factorial(n-1)\n",
        "num_ids": 39
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 2\n    elif n%2 == 0 : \n        return sumofFactors(n//2)\n    else : \n        return sumofFactors(n-1) + sumofFactors(n//2)\n        \ndef factorial(n) : \n    '''\n    Write a python function that returns the factorial of a given number.\n    '''\n    if n == 0 : \n        return 1\n    elif n == 1 : \n        return n \n    elif n == 2 : \n        return n \n    elif n%2 == 0 : \n        return (n*factorial(n//2))\n    else : \n        return (n*factorial(n-1))+factorial(n//2)\n        \ndef rec_sum(a, b, c) : \n    '''\n    Write a recursive function that returns the sum of the sum of the factorial of a, b, and c.\n    '''\n    if b == 0 : \n        return c \n    else : \n        return rec_sum(a, b//b, c+a) \n",
        "num_ids": 38
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.findall(r'z',text)\n    return matches\n",
        "num_ids": 22
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for z in text:\n        if z.isalpha() and 'z' in z:\n            return z\n    return None\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    for y in text:\n        if y.isalpha() and 'y' in y:\n            return y\n    return None\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    for l in text:\n        if l.isalpha() and 'l' in l:\n            return l\n    return None\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    for n in text:\n        if n.isalpha() and 'n' in n:\n            return n\n    return None\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    for o in text:\n        if o.isalpha() and 'o' in o:\n            return o\n    return None\n",
        "num_ids": 32
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"z\"\n    m = re.findall(pattern, text)\n    print(m)\n",
        "num_ids": 29
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_list = text.split()\n    pattern = r'z'\n    return re.search(pattern, word_list)\n",
        "num_ids": 33
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    s = re.sub('[^\\w]','', str(text))\n    words = s.split()\n    for w in words:\n        if len(w) < 2:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if not text.lower().endswith('z'):\n        print(f'Error: {text} does not end with z')\n        return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_stripped = text.strip()\n    print(text_stripped)\n    match = re.search('z', text_stripped)\n    if match:\n        print(\"Match found\")\n        return match.start()\n    else:\n        print(\"No match found\")\n        return -1\n    \ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_stripped = text.strip()\n    match = re.search('z', text_stripped)\n    if match:\n        print(\"Match found\")\n        return match.start()\n    else:\n        print(\"No match found\")\n        return -1\n",
        "num_ids": 64
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'z',text)!= None:\n        print('Text contains the word \"z\".\\n')\n    else:\n        print('Text does not contain the word \"z\".\\n')\ntext_match_wordz('a')\ntext_match_wordz('A')\ntext_match_wordz('A b')\ntext_match_wordz('A B')\ntext_match_wordz('a b')\ntext_match_wordz('ab')\ntext_match_wordz('AB')\ntext_match_wordz('A baba')\ntext_match_wordz('A baba A')\ntext_match_wordz('A baba ab')\ntext_match_wordz('A b')\ntext_match_wordz('ab')\ntext_match_wordz('a.b')\ntext_match_wordz('A b.A')\ntext_match_wordz('A b.A b')\ntext_match_wordz('a b.a')\ntext_match_wordz('A b.A b')\ntext_match_wordz('A.b.A')\ntext_match_wordz('A b.a.A')\ntext_match_wordz('A b.a.a')\ntext_match_wordz('A b.a.a.a')\ntext_match_wordz('a.b.A')\ntext_match_wordz('a.b.A b')\ntext_match_wordz('a.b.A b.b')\ntext_match_wordz('a.b.A b.b.c')\ntext_match_wordz('A b.a.A b.b.c')\ntext_match_wordz('A b.a.A b.b.c.d')\ntext_match_wordz('A b.a.A b.b.c.d.e')\ntext_match_wordz('a.b.a.A b.b.c.d.e.f')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i')\ntext_match_wordz('a.b.a.A b.b.c.d.e.f.g.h.i.j')\ntext_match_wordz('a.b.a.A b.b.c.d.e.f.g.h.i.j.k')\ntext_match_wordz('a.b.a.A b.b.c.d.e.f.g.h.i.j.k.l')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r')\ntext_match_wordz('a.b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.w')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.w.x')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.w.x.y.z.w.x')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x')\ntext_match_wordz('A b.a.A b.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.w.x.y.z.",
        "num_ids": 2014
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = []\n    for i in text:\n        if 'z' in i:\n            wordz.append(i)\n    return wordz\n",
        "num_ids": 38
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # split the text into a list\n    temp = text.split(\" \")\n",
        "num_ids": 21
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if int(monthnum2) >= 1 and int(monthnum2) <= 12:\n        return 'true'\n    else:\n        return 'false'\n",
        "num_ids": 39
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 2:\n        return True\n    elif monthnum2 == 3 or monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 7:\n        return True\n    elif monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 113
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check whether month number contains 31 days\n    if monthnum2 >=1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    for i in range(1,monthnum2):\n        if monthnum2%i==0:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    is_day = False\n    for i in range(monthnum2):\n        if (i % 12) == 0:\n            is_day = True\n    return is_day\n",
        "num_ids": 44
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        if monthnum2 == 1:\n            return \"There's a leap year\"\n        elif monthnum2 == 2:\n            return \"It's a leap year\"\n        elif monthnum2 == 3:\n            return \"It's a leap year\"\n        elif monthnum2 == 4:\n            return \"It's a leap year\"\n        elif monthnum2 == 5:\n            return \"It's a leap year\"\n        elif monthnum2 == 6:\n            return \"It's a leap year\"\n        elif monthnum2 == 7:\n            return \"It's a leap year\"\n        elif monthnum2 == 8:\n            return \"It's a leap year\"\n        elif monthnum2 == 9:\n            return \"It's a leap year\"\n        elif monthnum2 == 10:\n            return \"It's a leap year\"\n        elif monthnum2 == 11:\n            return \"It's a leap year\"\n    else:\n        return \"Please enter a valid month number\"\n",
        "num_ids": 251
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 31:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2>12):\n        return 0\n    else:\n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 0 and monthnum2 <= 12:\n        if monthnum2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 'Jan':\n        return True\n    elif monthnum2 == 'Feb':\n        return False\n    elif monthnum2 == 'Mar':\n        return True\n    elif monthnum2 == 'Apr':\n        return False\n    elif monthnum2 == 'May':\n        return True\n    elif monthnum2 == 'Jun':\n        return False\n    elif monthnum2 == 'Jul':\n        return True\n    elif monthnum2 == 'Aug':\n        return False\n    elif monthnum2 == 'Sep':\n        return True\n    elif monthnum2 == 'Oct':\n        return False\n    elif monthnum2 == 'Nov':\n        return True\n    elif monthnum2 == 'Dec':\n        return False\n    else:\n        return False\n",
        "num_ids": 189
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for i in range(len(stringlist)):\n        reverse_list.append(stringlist[i][::-1])\n    return reverse_list\n",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return \"\"\n    return stringlist[0] + reverse_string_list(stringlist[1:])\n",
        "num_ids": 38
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(map(lambda x: x[::-1], stringlist))\n",
        "num_ids": 21
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == []:\n        return []\n    else:\n        newlist = []\n        for i in range(len(stringlist)):\n            newlist.append(stringlist[i])\n        return newlist\n    \ndef remove_characters(stringlist, character):\n    '''\n    Write a function to remove all occurences of character from a given list of strings.\n    '''\n    if stringlist == []:\n        return []\n    else:\n        newlist = []\n        for i in range(len(stringlist)):\n            if stringlist[i].find(character)!= -1:\n                newlist.append(stringlist[i])\n        return newlist\n",
        "num_ids": 70
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    list1 = []\n    for i in range(len(stringlist)):\n        list1.append(stringlist[i])\n    reverse = list(stringlist)\n    for i in range(len(list1)):\n        reverse.insert(i,list1[i])\n    return reverse\n",
        "num_ids": 72
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for x in stringlist:\n        new_list.append(x[::-1])\n",
        "num_ids": 31
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = stringlist.split(' ')\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n",
        "num_ids": 44
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # raise NotImplementedError(\"Only string list functions are allowed\")\n    return reverse_string_list_reversed_str(stringlist)\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return []\n    elif len(stringlist) == 1:\n        return stringlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # lst[1:4]\n    # lst[3:5]\n    # lst[5:6]\n    # lst[3:5:2]\n    # lst[6:5:3]\n    \n    if len(lst) == 0: \n        print (\"Empty List\")\n        return \n    \n    if len(lst) == 1: \n        return lst\n    \n    l = len(lst)\n    \n    if l == 1:\n        return lst[0]\n    \n    if l > 1:\n        mid = l//2\n        lst1 = lst[0:mid]\n        lst2 = lst[mid:l]\n        lst3 = lst[l-1:l]\n        \n        if lst1 < lst2:\n            return Find_Min(lst3)\n        else:\n            return Find_Min(lst1)\n        \n    else:\n        return lst[0]\n    ",
        "num_ids": 239
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) < 1:\n        return -1\n    elif len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return min(lst)\n    else:\n        return lst[0]\n",
        "num_ids": 70
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    for i in lst:\n        if len(i) < len(minimum):\n            minimum = i\n    return minimum\n",
        "num_ids": 40
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst==[]:\n        return []\n    else:\n        lst.sort()\n        start=lst[0]\n        end=lst[0]\n        if(len(lst)==1):\n            return start\n        else:\n            for i in lst:\n                if(len(lst)==1):\n                    if(i<end):\n                        end=i\n                    else:\n                        start=i\n                else:\n                    if(i<start):\n                        start=i\n                    if(i>end):\n                        end=i\n                    \n            return end\n        \n",
        "num_ids": 143
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        cur_len = len(lst[i])\n        if cur_len < min_len:\n            min_len = cur_len\n    return min_len\n",
        "num_ids": 61
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst, key=len)\n    min=lst[0]\n    for i in lst:\n        if i[len(i)-1] < min[len(min)-1]:\n            min = i\n    return min\n",
        "num_ids": 62
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n    min_val = lst[0]\n    min_index = 0\n    for i in range(len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_index = i\n    return min_index\n",
        "num_ids": 85
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    minLen = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < minLen:\n            minLen = lst[i]\n    return minLen\n",
        "num_ids": 57
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #Your code goes here\n    a = lst.copy()\n    print(a)\n    return a\n    \n    ",
        "num_ids": 31
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst) \n    for i in range(n):\n        for j in range(n-i-1):\n            if lst[j]<lst[j+1]:\n                lst[j],lst[j+1] = lst[j+1],lst[j]\n    return lst \n",
        "num_ids": 83
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef triangle_area(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l*b*h\n",
        "num_ids": 10
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #raise NotImplementedError\n",
        "num_ids": 11
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)/2\n",
        "num_ids": 11
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l[0]*b[1] - l[1]*b[0])\n",
        "num_ids": 25
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #.replace(\",\", \"\")\n    #.replace(\".\", \"\")\n    #.replace(\":\", \"\")\n    #.replace(\"(\", \"\")\n    #.replace(\")\", \"\")\n    #.replace(\"[\", \"\")\n    #.replace(\"]\", \"\")\n    #.replace(\"{\", \"\")\n    #.replace(\"}\", \"\")\n    #.replace(\"<\", \"\")\n    #.replace(\">\", \"\")\n    #.replace(\".\", \"\")\n    #.replace(\"?\", \"\")\n    #.replace(\"!\",\"\")\n    #.replace(\")\",\"\")\n    #.replace(\")\",\"\")\n    #.replace(\"{\",\"\")\n    #.replace(\"}\",\"\")\n    #.replace(\"<\",\"\")\n    #.replace(\">\",\"\")\n    #.replace(\".\",\"\")\n    #.replace(\",\",\"\")\n    #.replace(\" \", \"\")\n    #.replace(\"  \",\"\")\n",
        "num_ids": 227
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])'\n    substr = ''.join(re.split(pattern, str1))\n    return substr.lower()\n",
        "num_ids": 49
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper() == True:\n            str1 = str1.replace(str1[i], \"\")\n            \n    return str1\n",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = r'[A-Z]{2}[a-z]+'\n    \n    regex = re.compile(regex)\n    \n    return re.sub(regex, '', str1)\n",
        "num_ids": 55
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Your code here\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= str1[i].upper():\n            result += str1[i]\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return ''.join(c for c in str1 if c.isupper())\n",
        "num_ids": 31
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    \n    regex = r'(?=[A-Z])'\n    \n    if re.match(regex, str1):\n        str2 = re.sub(regex, '', str1)\n    else:\n        str2 = str1\n    \n    if str2 == str1:\n        return str1\n    else:\n        return str2\n    \n",
        "num_ids": 91
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex_pattern = '([a-z]{2})'\n    pat = re.compile(regex_pattern)\n    sub_str = pat.sub('', str1)\n    return sub_str\n",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # A string is considered to be empty if it is empty or consists of only spaces.\n    if not str1 or str1 == \"\":\n        return \"\"\n    # A string is considered to be the empty string if it is empty or consists of only single characters.\n    if not str1.isalpha():\n        return str1\n    # A string is considered to be a string if it contains all alphabets and spaces.\n    if not str1.isalnum():\n        return \"\"\n    # An empty string is considered to be a string if it contains only spaces.\n    if str1.isspace():\n        return str1\n",
        "num_ids": 144
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i][0] < first:\n            first = lst[i][0]\n    return first\n",
        "num_ids": 54
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    \n    \n",
        "num_ids": 14
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = list(map(lambda x: x[0], lst))\n    return lst[0]\n",
        "num_ids": 29
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n",
        "num_ids": 10
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        return i[0]\n    \n    '''\n    Write a python function to get all elements of a list.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\ndef Get(lst): \n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    pass\ndef Add(lst, *args): \n    '''\n    Write a python function to add all arguments in a list. \n    '''\n    pass\ndef Print(*args): \n    '''\n    Write a python function to print each item of a list.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Code here\n    list = []\n    for i in lst:\n        list.append(i[0])\n    return list\n    \n    # Return result\n    # return  lst[0][0]\n",
        "num_ids": 53
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for item in lst:\n        print(item[0])\n",
        "num_ids": 18
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        temp = lst[i]\n        for j in range(i+1, len(lst)):\n            if lst[j][0] > temp[0]:\n                temp = lst[j]\n                if len(temp) < len(lst[i]):\n                    lst[i] = temp\n    return lst\n",
        "num_ids": 95
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        return lst[i][0]\n    \n    ",
        "num_ids": 29
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if str == None or str == \"\":\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n",
        "num_ids": 9
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    str_length = len(str)\n    for i in range(str_length):\n        if(str[i].isupper()):\n            upper_count += 1\n    print(f'{upper_count} upper case characters')\n    return upper_count\n    \n",
        "num_ids": 72
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    import string\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    c=0\n    for char in str:\n        if char.isupper():\n            c+=1\n    return c\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    c=0\n    for char in str:\n        if char.islower():\n            c+=1\n    return c\ndef p_pr(str):\n    '''\n    Write a python function to determine whether a given string is an permutation of another string.\n    '''\n    if upper_ctr(str)>0 and lower_ctr(str)>0:\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 39
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    c=0\n    for i in str:\n        if i.isupper():\n            c+=1\n    print(c)\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str = str.upper()\n    ctr = str.count('A')\n    return ctr\n    \ndef num_lower(str):\n    '''\n    Write a python function to count the number of lower case characters in a given string.\n    '''\n    str = str.lower()\n    ctr = str.count('a')\n    return ctr\n    \ndef num_upper(str):\n    '''\n    Write a python function to count the number of upper case characters in a given string.\n    '''\n    str = str.upper()\n    ctr = str.count('A')\n    return ctr\n    \ndef num_special(str):\n    '''\n    Write a python function to count the number of special characters in a given string.\n    '''\n    str = str.replace('!',' ')\n    ctr = str.count('!')\n    return ctr\n    \ndef num_digit(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    str = str.replace('.','')\n    ctr = len(str)\n    return ctr\n    \ndef num_symbols(str):\n    '''\n    Write a python function to count the number of symbols in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == '!':\n            ctr += 1\n        elif i == '#':\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_lower_upper(str):\n    '''\n    Write a python function to count the number of lower and upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n        elif i.islower():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_special_digit(str):\n    '''\n    Write a python function to count the number of special characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        else:\n            ctr += 0\n    return ctr\n    \ndef num_digits(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        else:\n            ctr += 0\n    return ctr\n    \ndef num_symbols_digit(str):\n    '''\n    Write a python function to count the number of special characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        elif i.isalpha():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_lower_upper_special(str):\n    '''\n    Write a python function to count the number of lower and upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n        elif i.islower():\n            ctr += 0\n        elif i.isalpha():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_special_digit_special(str):\n    '''\n    Write a python function to count the number of special characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        elif i.isalpha():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_digits_special(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        else:\n            ctr += 0\n    return ctr\n    \ndef num_lower_upper_special_digit(str):\n    '''\n    Write a python function to count the number of lower and upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.islower():\n            ctr += 1\n        elif i.isupper():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_special_digit_special_digit(str):\n    '''\n    Write a python function to count the number of special characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        elif i.isalpha():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_lower_upper_special_digit_special(str):\n    '''\n    Write a python function to count the number of lower and upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.islower():\n            ctr += 1\n        elif i.isupper():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef num_lower_upper_special_digit_special_digit(str):\n    '''\n    Write a python function to count the number of lower and upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.islower():\n            ctr += 1\n        elif i.isupper():\n            ctr += 0\n        else:\n            ctr += 1\n    return ctr\n    \ndef is_email(str):\n    '''\n    Write a python function to check whether a string is an email address.\n    '''\n    if '@' in str:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    for i in str:\n        if i.isupper():\n            result += 1\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        return str.upper().count(' ')\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1,len(list1)+1):\n        if is_palindrome(list1[i-1]):\n            yield list1[i-1]\n        if i%2:\n            yield from combinations_list(list1[:i//2]+list1[i//2+1:])\n",
        "num_ids": 80
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations(a, b):\n        '''\n        Returns a list of all possible combinations of the elements of a from list a and b.\n        '''\n        def is_valid(a, b):\n            return(a == b or a + b == \"all\" or b == \"all\")\n        \n        if is_valid(a, b):\n            print(a, b)\n        elif a == \"all\" or b == \"all\":\n            print(a, b)\n            return\n        else:\n            for i in range(len(a) + 1):\n                if is_valid(a[:i] + b + a[i:], b):\n                    combinations(a[:i] + b + a[i:], b)\n        \n    combinations(\"a\", \"b\")\n    \n",
        "num_ids": 155
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) > 1:\n        combos = []\n        for i in range(1, len(list1)+1):\n            combos += combinations_list(list1[:i])\n            combos += combinations_list(list1[i:])\n        return combos\n",
        "num_ids": 88
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Add your code here.\n    # Note: You can pass a string to the function. \n    list1.sort()\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) == 2:\n        return [list1[0], list1[1], list1[0]+list1[1]]\n    elif len(list1) == 3:\n        return [list1[0], list1[1], list1[0]+list1[2], list1[1], list1[0]+list1[2], list1[1]+list1[2]]\n    else:\n        temp = list1[:]\n        temp = combinations_list(temp)\n        return temp\n",
        "num_ids": 173
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result=[]\n    if len(list1)==1:\n        result.append(list1[0])\n        return result\n",
        "num_ids": 33
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create list of unique elements\n    unique = list(set(list1))\n    # find possible combinations\n    possibleCombinations = []\n    for i in unique:\n        possibleCombinations.extend(list(itertools.combinations(list1,i)))\n    return possibleCombinations\n",
        "num_ids": 72
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combo_list = []\n    if len(list1) == 1:\n        combo_list.append(list1[0])\n    elif len(list1) >= 2:\n        for x in range(0, len(list1)):\n            for y in combinations(list1, x):\n                combo_list.append(list(y))\n    return combo_list\n",
        "num_ids": 93
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n",
        "num_ids": 10
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1,len(list1)))\n",
        "num_ids": 26
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1)+1):\n        for j in combinations_list(list1[:i]):\n            yield [list1[i-1]]+j\n",
        "num_ids": 48
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # initialization\n    max_result = []\n    max_sub_result = []\n    max_product = 0\n    product_array = 1\n    product_subarray_array = [1]\n",
        "num_ids": 48
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    prod = 1\n    max_len = 0\n    \n    for i in range(len(arr)):\n        prod = prod * arr[i]\n        max_len = max(max_len,i+1)\n    \n    return prod * max_len\n",
        "num_ids": 66
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    for x in arr[1:]:\n        current_product *= x\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\n",
        "num_ids": 63
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n    return max_product\n",
        "num_ids": 85
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    i = 0\n    j = 0\n    # we will maintain two subarrays\n    result = 1\n    # store the current element\n    current_subarray = []\n    # store the previous element\n    previous = 0\n    # now we will calculate the product\n    while j < len(arr) - 1:\n        result *= arr[j]\n        current_subarray.append(arr[j])\n        # if the current element is negative\n        if arr[j] < 0:\n            # we will store the current element\n            # to know later whether it is the positive\n            # element or not\n            current_subarray.append(arr[j])\n            previous = arr[j]\n            j += 1\n        else:\n            # we will store the current element\n            # to know the positive element\n            # also keep store previous element\n            current_subarray.append(previous)\n            previous = arr[j]\n            j += 1\n    # now we will get the index of the previous element\n    # we will store the previous element\n    # to know the index of the element\n    i = len(arr) - 1 - (arr[-1] / current_subarray[-1])\n    print(current_subarray)\n    # now we will calculate the maximum product\n    while len(current_subarray) > 1:\n        if current_subarray[0] < current_subarray[1]:\n            # we will store the current element\n            # to know the current element\n            # also keep store previous element\n            current_subarray.pop(1)\n            i += 1\n            # now we will calculate the product\n            current_subarray.append(arr[i] * current_subarray[0])\n        else:\n            # we will store the current element\n            # to know the current element\n            # also keep store previous element\n            current_subarray.pop(0)\n            # now we will calculate the product\n            current_subarray.append(current_subarray[0] * arr[i])\n            i -= 1\n    # now we have to return the maximum product\n    return result // current_subarray[0",
        "num_ids": 500
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max_product = 1\n    curr_max_len = 0\n",
        "num_ids": 22
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    p = 1\n    \n    for i in range(1,len(arr)):\n        p *= arr[i]\n        \n    subarray = p\n    \n    left = 0\n    right = 0\n    \n    for i in range(len(arr)):\n        \n        while left <= right and subarray*arr[right] >= arr[i] and left < i:\n            \n            subarray = min(subarray*arr[left],arr[i])\n            left += 1\n            \n        right += 1\n        \n    return subarray\n    \n",
        "num_ids": 135
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    res = [-1 for _ in range(n)]\n    # store the product of the subarrays\n    product = [1 for _ in range(n)]\n    # store the index of the last product of the subarrays\n    index = [-1 for _ in range(n)]\n    # store the number of subarrays\n    subarrays = [1 for _ in range(n)]\n    # init variables\n    # store the index of the last product of the subarrays\n    for i in range(n):\n        index[i] = -1\n        # for every possible subarray\n        for j in range(i, n):\n            # the product of the subarrays is the product of the two products\n            product[j] = product[j] * arr[i]\n            # the index of the previous product of the subarrays is the index\n            # of the current product of the subarrays\n            index[j] = i\n            if j >= i:\n                subarrays[i] = max(subarrays[i], subarrays[j] * product[j])\n",
        "num_ids": 262
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_length = 0\n    first = last = 0\n    for i in range(len(arr)):\n        #print(arr[i])\n        #print(i)\n        if arr[i] > arr[last]:\n            first = last\n            last += 1\n        else:\n            max_length = max(max_length, (arr[i] - arr[first]) * (last - first + 1))\n            first += 1\n        #print(arr[i], arr[last] * (last - first + 1))\n    return max_length\n",
        "num_ids": 132
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray = arr[0]\n    for i in range(len(arr) - 1):\n        if arr[i] >= max_subarray:\n            max_subarray = arr[i]\n    return max_subarray\n",
        "num_ids": 58
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict1 = {}\n    dict1 = dict\n    for k, v in dict.items():\n        for i in range(len(v)):\n            if k not in dict1:\n                dict1[k] = v[i]\n            if v[i]!= dict1[k]:\n                return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return \"Please enter the same amount of values\"\n    else:\n        return True\n",
        "num_ids": 32
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not dict:\n        return True\n    for value in dict:\n        if not dict[value] == value:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(n) == dict:\n        return all(check_value(n[k], v) for k, v in n.items())\n    else:\n        return n == n\n",
        "num_ids": 46
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if key!= 'age':\n            if (dict[key]!= n) or (dict[key] == 0):\n                print(\"The value of \" + key + \" is not same with the original value\")\n                return False\n        elif dict[key]!= n:\n            print(\"The value of \" + key + \" is not same with the original value\")\n            return False\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict.values() == n\n",
        "num_ids": 11
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Code here\n    if n!= 0:\n        print(dict.values())\n    else:\n        print(\"All Values in the dictionary are same\")\n",
        "num_ids": 39
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    n_dict = {}\n    for k, v in dict.items():\n        n_dict[k] = n\n",
        "num_ids": 30
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if (dict[i]!= n):\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= n:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if len(dict1[key])==0:\n            dict1.pop(key)\n            \n        \n    return dict1\n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1.values():\n        for k in dict1.keys():\n            if dict1[k]:\n                del dict1[k]\n    return dict1\n",
        "num_ids": 41
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    list_1 = list(dict1.values())\n    list_2 = []\n    for i in range(0,len(list_1)):\n        if(list_1[i] == \"\"):\n            list_2.append(list_1[i])\n            \n    return dict1.popitem()\n",
        "num_ids": 76
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1:\n        if len(dict1[k]) == 0:\n            dict1.pop(k)\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == \"\":\n            del dict1[i]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n",
        "num_ids": 7
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Your code here\n    return dict1\n",
        "num_ids": 13
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i,j in dict1.items():\n        if j==0:\n            del dict1[i]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == []:\n            del dict1[key]\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # your code here\n    pas",
        "num_ids": 10
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = -1\n    for i in range(1, len(arr)+1):\n        j = 1\n        prod = 0\n        while (i > 0) and (j < len(arr)):\n            prod = arr[i-1] * j\n            if prod > max_prod:\n                max_prod = prod\n            j += 1\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n",
        "num_ids": 115
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == []:\n        return 0\n    i = 0\n    j = 0\n    l = len(arr)\n    max_product_arr = []\n    while i < l:\n        if i!= 0:\n            l_j = arr[j]\n            if l_j > arr[i-1]:\n                max_product_arr.append(l_j)\n                j = 0\n            else:\n                j += 1\n        i += 1\n    i = 0\n    while j < l:\n        if i!= 0:\n            l_j = arr[j]\n            if l_j > arr[i-1]:\n                max_product_arr.append(l_j)\n                j = 0\n            else:\n                j += 1\n        i += 1\n    return max_product_arr\n",
        "num_ids": 195
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    prod = arr[0]\n    i = 1\n    while i < len(arr) and prod <= arr[i]:\n        prod *= arr[i]\n        i += 1\n    return prod\n",
        "num_ids": 51
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Compute number of subsequences\n    n = len(arr)\n    # Compute the number of subsequences\n    subseq_count = [1] * n\n    for i in range(1, n):\n        subseq_count[i] = subseq_count[i - 1] + subseq_count[i - 1]\n    # Process each subsequence\n    max_product = []\n    for i in range(1, n):\n        # Create a new subsequence with i elements\n        subseq = []\n        for j in range(i):\n            subseq.append(arr[j] * arr[i])\n        # Add the subsequence to the sequence of subsequences\n        max_product.append(max(subseq))\n    # Return the maximum product\n    return max_product\n",
        "num_ids": 187
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    ans = 0\n    # finding the subsequence length\n    m = len(arr)\n    # calculating a minimum subsequence\n    for i in range(1, m):\n        ans = ans + arr[i] * arr[i - 1]\n    return ans\n",
        "num_ids": 63
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    d = [1 for i in range(n)]\n    d[0] = arr[0]\n",
        "num_ids": 50
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    for index in range(len(arr) - 1):\n        product = arr[index] * arr[index + 1]\n        if product > arr[index + 2]:\n            arr[index + 2] = arr[index + 1]\n            arr[index + 1] = product\n    print(arr)\n    return arr\n    \n",
        "num_ids": 79
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if arr == []:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = max(res*arr[i], arr[i])\n        \n    return res\n    \narr = [5,4,3,2,1]\nprint(max_product(arr)",
        "num_ids": 104
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = 1\n    curr_product = 1\n    for i in range(1, len(arr)):\n        curr_product *= arr[i]\n        res = max(curr_product, res)\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #Base case: if a number is multiple of 5, the number can only be multiplied by 5.\n    if arr[0]%5 == 0:\n        return arr[0]*(5**0)\n",
        "num_ids": 50
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n",
        "num_ids": 24
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #your code here\n    pass\n    #raise NotImplementedError\n",
        "num_ids": 20
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # create list of tuples\n    tup_list = list(test_tup)\n    # add duplicate numbers\n    for i in range(len(tup_list)):\n        if i!= len(tup_list)-1:\n            tup_list[i] = tup_list[i]+tup_list[i+1]\n    # add duplicates\n    duplicate_list = list(set(tup_list))\n    # remove duplicates\n    for i in range(len(tup_list)):\n        if tup_list[i] in duplicate_list:\n            duplicate_list.remove(tup_list[i])\n    return tuple(duplicate_list)\n",
        "num_ids": 173
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if test_tup[0] < test_tup[1]:\n        return test_tup\n    elif test_tup[0] == test_tup[1]:\n        return (test_tup[0], test_tup[0])\n    else:\n        return (test_tup[1], test_tup[1])\n",
        "num_ids": 86
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # 1\n    if len(test_tup) > 1:\n        test_tup_1 = test_tup[1:]\n        test_tup_2 = test_tup[:len(test_tup)-1]\n        # 2\n        if test_tup_1[0] == test_tup_2[0] and test_tup_1[1] == test_tup_2[1]:\n            return (test_tup_1[0], test_tup_1[1])\n        elif test_tup_1[0] == test_tup_2[1] and test_tup_1[1] == test_tup_2[0]:\n            return (test_tup_1[0], test_tup_1[1])\n        elif test_tup_1[0] == test_tup_2[0] and test_tup_1[1] == test_tup_2[1]:\n            return (test_tup_1[0], test_tup_1[1])\n        elif test_tup_1[0] == test_tup_2[1] and test_tup_1[1] == test_tup_2[0]:\n            return (test_tup_1[0], test_tup_1[1])\n        else:\n            print(\"tup error\")\n    else:\n        print(\"tup error\")\n",
        "num_ids": 346
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    #print(a,b)\n    if (a[0]!= b[0]):\n        if (a[1] == b[1]):\n            return (\"same\",a,b)\n        elif (a[1] > b[1]):\n            return (\"next\",a,b)\n        else:\n            return (\"previous\",a,b)\n    elif (b[0]!= a[0]):\n        if (b[1] == a[1]):\n            return (\"same\",a,b)\n        elif (b[1] > a[1]):\n            return (\"next\",a,b)\n        else:\n            return (\"previous\",a,b)\n    else:\n        return (\"same\",a,b)\n",
        "num_ids": 206
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    r = len(test_tup[0]) - 1\n    c = len(test_tup[1]) - 1\n    \n    def find(curr, l):\n        while l > 0:\n            curr = curr + test_tup[l - 1][curr]\n            l = l - 1\n            \n        return curr\n    \n    def find_neighbor(curr, l):\n        if l > 0:\n            return find(curr, l)\n        else:\n            return curr\n    \n    l = 0\n    r = 0\n    \n    while l < r:\n        curr = find(r, r)\n        neighbor = find_neighbor(curr, l)\n        \n        if test_tup[l][neighbor]!= -1:\n            if test_tup[r][neighbor] == -1:\n                test_tup[l][neighbor] = test_tup[r][neighbor]\n                test_tup[r][neighbor] = -1\n            else:\n                test_tup[l][neighbor] += test_tup[r][neighbor]\n                test_tup[r][neighbor] = -1\n        \n        r = r - 1\n        l = l + 1\n    \n    return test_tup",
        "num_ids": 325
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n",
        "num_ids": 22
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(zip(*[(i,j) for i in test_tup[0] for j in test_tup[1]]))\n",
        "num_ids": 36
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    \n    dif = []\n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[i] + b[j]!= a[i] + b[j]:\n                dif.append((a[i], a[j], b[i], b[j]))\n    \n    dif.sort()\n    return dif\n",
        "num_ids": 122
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % n!= 0: \n        return -1\n    else:\n        return product // n\n",
        "num_ids": 47
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in range(len(arr)):\n        ans *= arr[i]\n    return ans % n\n",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import math\n    for i in range(n):\n        for j in range(n):\n            remainder = math.prod(arr[j:i + j])\n            if remainder % n!= 0:\n                return remainder % n\n    return 0\n",
        "num_ids": 63
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for i in range(len(arr)):\n        p = p * arr[i]\n    return p % n\n",
        "num_ids": 35
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return arr[0]*arr[1]*arr[n-2] % n\n",
        "num_ids": 23
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return array_product_modulo(arr, n)\n",
        "num_ids": 16
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return sum([i*arr[i] for i in range(n)])\n",
        "num_ids": 21
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in range(1, n):\n        ans = ans * i\n    return ans % n\n",
        "num_ids": 31
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder_product = 1\n    for i in range(len(arr)):\n        remainder_product = remainder_product * arr[i]\n    return remainder_product % n\n    \ndef get_digit_from_number(n):\n    '''\n    Return the integer in the number with decimal point as unit.\n    '''\n    remainder_product = 1\n    for i in range(len(n)):\n        remainder_product = remainder_product * n[i]\n    return remainder_product\n    \ndef print_table(num):\n    '''\n    Print the Table as a Matrix.\n    '''\n    table = [[0 for x in range(len(num[0]))] for y in range(len(num))]\n    for i in range(len(num)):\n        for j in range(len(num[0])):\n            table[i][j] = num[i][j]\n    return table\n    \ndef multiply_matrix(m, x):\n    '''\n    Multiply the Matrix m with the Matrix x.\n    '''\n    new_matrix = [[0 for x in range(len(m[0]))] for y in range(len(x))]\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            for k in range(len(x)):\n                new_matrix[i][j] += m[i][k]*x[k][j]\n    return new_matrix\n    \ndef multiply_matrix_inv(m, x):\n    '''\n    Inverse the Matrix m.\n    '''\n    new_matrix = [[0 for x in range(len(m[0]))] for y in range(len(x))]\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            for k in range(len(x)):\n                new_matrix[i][j] += x[k][j]*m[i][k]\n    return new_matrix\n    \ndef mult_matrix_multiply_inv(m1, m2):\n    '''\n    Multiply the Matrices m1 and m2.\n    '''\n    new_matrix = [[0 for x in range(len(m1[0]))] for y in range(len(m2[0]))]\n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            for k in range(len(m2[0])):\n                new_matrix[i][j] += m1[i][k]*m2[k][j]\n    return new_matrix\n    \ndef transpose(a):\n    '''\n    Return the transpose of the matrix a.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    \ndef inverse_matrix(m):\n    '''\n    Inverse the Matrix m.\n    '''\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            m[i][j] = 1/m[i][j]\n    return m\n    \ndef multiply_matrix_pivots(m, pivots):\n    '''\n    Multiply the matrix m with the pivots of the matrix pivots.\n    '''\n    new_matrix = [[0 for x in range(len(m[0]))] for y in range(len(pivots))]\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            new_matrix[i][j] = m[i][j]\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            for k in range(len(pivots)):\n                if i == j or j == k:\n                    new_matrix[i][j] += m[i][k]*m[k][j]\n                else:\n                    new_matrix[i][j] += m[i][k]*m[k][j]\n    return new_matrix\n    \ndef convert_array_to_matrix(arr):\n    '''\n    Return the matrix of the array arr.\n    '''\n    new_matrix = [[0 for x in range(len(arr[0]))] for y in range(len(arr))]\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            new_matrix[i][j] = arr[i][j]\n    return new_matrix\n    \ndef apply_transpose(a):\n    '''\n    Return the transpose of the matrix a.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    \ndef swap(a, i, j):\n    '''\n    Return the matrix of the array a.\n    '''\n    temp = a[i][j]\n    a[i][j] = a[j][i]\n    a[j][i] = temp\n    return a\n    \ndef set_diagonal(a, n):\n    '''\n    Return the Matrix a with the diagonal elements of n.\n    '''\n    for i in range(n):\n        a[i][i] = 1\n    return a\n    \ndef set_inverse_diagonal(a, n):\n    '''\n    Return the Matrix a with the inverse diagonal elements of n.\n    '''\n    for i in range(n):\n        for j in range(n):\n            a[i][j] = 1/a[i][j]\n    return a\n    \ndef make_transpose(a):\n    '''\n    Return the transpose of the matrix a.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    \ndef diagonal_to_inv(a):\n    '''\n    Return the matrix of the array a.\n    '''\n    new_matrix = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            new_matrix[i][j] = a[i][j]\n    return new_matrix\n    \ndef set_transpose(a, b):\n    '''\n    Return the transpose of the matrix a.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    \ndef set_inv_transpose(a, b):\n    '''\n    Return the transpose of the matrix a.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    \ndef set_matrix_transpose(a, b):\n    '''\n    Return the transpose of the matrix a.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    \ndef solve(m, c, b):\n    '''\n    Return the matrix of the matrix m multiplied by c and b.\n    '''\n    result = []\n    if is_valid(m):\n        for i in range(len(m)):\n            for j in range(len(m[0])):\n                result.append(m[i][j]*c[i] + b[i])\n        return result\n    else:\n        print(\"Invalid Matrix\")\n        return None\n    \ndef multiply_matrix_inv(m1, m2):\n    '''\n    Return the matrix of the matrix m1 multiplied by m2.\n    '''\n    result = []\n    if is_valid(m1):\n        for i in range(len(m1)):\n            for j in range(len(m1[0])):\n                result.append(m1[i][j]*m2[j][i])\n        return result\n    else:\n        print(",
        "num_ids": 77
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for i in range(0, n):\n        total *= arr[i]\n    return total % n\n",
        "num_ids": 33
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0]!= l[-1]:\n        return False\n    else:\n        for i in range(1,len(l)):\n            if l[i-1] == l[i]:\n                return False\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    i = 0\n    while i < len(l)-1: \n        if l[i] == l[i+1] and i < len(l)-2: \n            i += 1\n        else: \n            return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    i = 0\n    while i < len(l):\n        if l[i]!= l[i+1]:\n            count += 1\n        else:\n            count = 0\n        i += 1\n    if count == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # list=[]\n    # for i in range(0, len(l)):\n    #     if l[i] == l[i + 1]:\n    #         list.append(l[i])\n    # print(l)\n    # print(list)\n    count = 0\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1] and l[i]!= l[i + 1]:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 135
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0: \n        return True\n    if len(l) % 2!= 0: \n        return False\n    index = 0\n    while index < len(l): \n        if l[index]!= l[index+1]: \n            return False\n        index += 2\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return True if l.count(l[0]) == len(l) else False\n",
        "num_ids": 22
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n <= 1: \n        return True\n    elif n == 2: \n        return l[0] == l[1] and l[1] == l[0]\n    else:\n        for i in range(1, n): \n            if l[i] == l[i-1] and l[i] == l[i-2]: \n                return False\n        return True\n",
        "num_ids": 104
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    for i in range(0, len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False\n    # or you can use set method\n    # set(l) is the set() function that returns a set object\n    # it takes in a list and returns a set object.\n",
        "num_ids": 95
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    n = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            n = n + 1\n        else:\n            pass\n    if n >= 2:\n        print(\"This is not a consecutive number\")\n    else:\n        print(\"This is a consecutive number\")\n",
        "num_ids": 83
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0]!= l[-1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i]!= l[i-1] + 1:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a tuple with all the elements in the list that are common and their order in the tuple\n    result = tuple(test_list1) + tuple(test_list2)\n    # print(result)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = [(test_list1[0], test_list1[1], test_list1[2]), (test_list1[3], test_list1[4], test_list1[5]), (test_list1[6], test_list1[7], test_list1[8]), (test_list1[9], test_list1[10], test_list1[11]), (test_list1[12], test_list1[13], test_list1[14]), (test_list1[15], test_list1[16], test_list1[17]), (test_list1[18], test_list1[19], test_list1[20]), (test_list1[21], test_list1[22], test_list1[23]), (test_list1[24], test_list1[25], test_list1[26]), (test_list1[27], test_list1[28], test_list1[29]), (test_list1[30], test_list1[31], test_list1[32]), (test_list1[33], test_list1[34], test_list1[35]), (test_list1[36], test_list1[37], test_list1[38]), (test_list1[39], test_list1[40], test_list1[41]), (test_list1[42], test_list1[43], test_list1[44]), (test_list1[45], test_list1[46], test_list1[47]), (test_list1[48], test_list1[49], test_list1[50])]\n    return tuple_list\n",
        "num_ids": 390
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                new_list.append(i)\n                break\n    return tuple(new_list)\n",
        "num_ids": 58
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Write your code here.\n    intersection = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            if test_list1[i] not in intersection:\n                intersection = test_list1[i]\n    return intersection\n",
        "num_ids": 77
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # Here we have already defined the test list, and an empty list\n    # which is to be used in the below tuple_intersection()\n    # function for testing.\n    test_list1 = []\n    test_list2 = []\n    \n    # Checking if the given tuple is sorted\n    # in the given list or not.\n    if is_sorted(test_list1) and is_sorted(test_list2):\n        \n        # If so, just return the given list.\n        if len(test_list1) == len(test_list2):\n            return test_list1, test_list2\n        \n        # Finding the smallest and largest element\n        # in the given list\n        smallest = min(test_list1)\n        largest = max(test_list1)\n        \n        # For each element in the given list\n        for element in test_list1:\n            \n            # If element is greater than or equal to smallest\n            # element in the given list\n            if element <= smallest:\n                \n                # Update smallest to element\n                smallest = element\n            \n            # Else if element is greater than or equal to\n            # largest element in the given list\n            elif element >= largest:\n                \n                # Update largest to element\n                largest = element\n            \n        # Return the two smallest elements\n        return smallest, largest\n        \n    # Here is the code to test the above function.\n    # Each of the elements of test_list1 and test_list2\n    # are indexed from 0 to the length of the list.\n    # Thus, the i for the i in the range(len(test_list1))\n    # corresponds to the i for the i in the range(len(test_list2))\n    # in the given tuple.\n    return test_list1[0:len(test_list2)], test_list2[0:len(test_list2)]\n",
        "num_ids": 445
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for tup in test_list1:\n        if tup in test_list2:\n            intersection = tup\n    return intersection\n",
        "num_ids": 41
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    final_tuple = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            final_tuple = final_tuple+(test_list1[i])\n    return(final_tuple)\n",
        "num_ids": 69
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_tuple = ()\n    for elem in test_list1:\n        if elem in test_list2:\n            intersect_tuple += (elem,)\n",
        "num_ids": 45
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list1 = []\n    for element in test_list1:\n        tuple_list1.append(element)\n    tuple_list2 = []\n    for element in test_list2:\n        tuple_list2.append(element)\n    return tuple_list1, tuple_list2\n",
        "num_ids": 76
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,'')\n    return str2\n    #2\ndef num2words(n):\n    '''\n    Convert a number n to a string.\n    '''\n    if n>=0:\n        string = ''\n        i=0\n        while i<n:\n            string=string+str(n%10)\n            n=n//10\n            i+=1\n        return string\n    else:\n        string = ''\n        i=0\n        while i<n:\n            string=string+str(n%10)\n            n=n//10\n            i+=1\n        return string\n",
        "num_ids": 104
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    arr=list(str1)\n    for i in range(len(arr)):\n        if arr[i]==ch:\n            arr[i]=newch\n    return \"\".join(arr)\n    \ndef count_the_number_of_ways_to_get_to_the_excess_sums(array,start,end):\n    '''\n    Given an array, a start and end index, and a value,\n    , return the number of ways to get to that value\n    without changing it.\n    '''\n    if start>=end or array[start]<=array[end]:\n        return 1\n    elif array[start]==array[end]:\n        return 1+count_the_number_of_ways_to_get_to_the_excess_sums(array,start+1,end)\n    else:\n        return count_the_number_of_ways_to_get_to_the_excess_sums(array,start,end-1)+count_the_number_of_ways_to_get_to_the_excess_sums(array,start+1,end)\n",
        "num_ids": 145
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        if i.lower() in ch.lower():\n            str2+=newch\n        else:\n            str2+=i\n    return str2\n",
        "num_ids": 50
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i] == ch:\n            str1 = str1.replace(str1[i],newch)\n        i += 1\n    return str1\n",
        "num_ids": 56
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(str1)!= str:\n        raise TypeError('Strings must be strings')\n    elif len(str1) > 1000:\n        raise ValueError('The string must be smaller than 1000 characters')\n    else:\n        newstr = ''\n        for i in str1:\n            if ord(i)>=97 and ord(i)<=122:\n                newstr+=newch\n            else:\n                newstr+=i\n        return newstr\n",
        "num_ids": 111
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if ord(str1[i])>=97 and ord(str1[i])<=122:\n            str2+=ch\n        else:\n            str2+=newch\n    return str2\n",
        "num_ids": 68
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Check if ch is in string\n    if ch in str1:\n        # Get position of ch\n        pos = str1.find(ch)\n        # If position is -1 we need to return string\n        if pos == -1:\n            return str1\n        # Replace ch\n        str1 = str1[:pos]+newch+str1[pos+1:]\n        return str1\n    # If ch is not in string, return string\n    return str1\n",
        "num_ids": 111
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if ch=='*':\n            str2+=newch\n        elif ch=='+':\n            str2+=newch\n        elif ch=='-':\n            str2+=newch\n        elif ch=='.':\n            str2+=newch\n        elif ch=='=':\n            str2+=newch\n        else:\n            str2+=ch\n    return str2\n",
        "num_ids": 114
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=''\n    for x in str1:\n        if ch>=97 and ch<=122:\n            newstr+=chr(ch)\n        elif ch>=65 and ch<=90:\n            newstr+=chr(ch-65)\n        elif ch>=48 and ch<=57:\n            newstr+=chr(ch-48)\n    return newstr\n",
        "num_ids": 96
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    counter = Counter(dict2)\n    sorted_dict = {k:v for k,v in sorted(counter.items(), key=lambda item: item[1])}\n    return sorted_dict\n",
        "num_ids": 59
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.values(), reverse=True)\ndef frequency_analysis(dictionary):\n    '''\n    Write a function to find the most frequent word in a dictionary.\n    '''\n    def key_func(element):\n        return element[1]\n    def value_func(element):\n        return element[0]\n    frequent_words = Counter(dictionary).most_common(10)\n    frequent_words = sort_counter(frequent_words)\n    return frequent_words[0][0]\ndef letters_analysis(dictionary):\n    '''\n    Write a function to find the most frequent word in a dictionary.\n    '''\n    def key_func(element):\n        return element[1]\n    def value_func(element):\n        return element[0]\n    letter_count = Counter(dictionary).most_common(10)\n    letter_count = sort_counter(letter_count)\n    return letter_count[0][0]\ndef get_text_words(text):\n    '''\n    Read text and return the words.\n    '''\n    text = str(text)\n    word_list = text.split()\n    return word_list\ndef get_text_letters(text):\n    '''\n    Read text and return the letters.\n    '''\n    text = str(text)\n    word_list = text.split()\n    return word_list\n",
        "num_ids": 26
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=dict1.get, reverse=True)\n    return dict1\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    a=sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return a\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for k, v in dict1.items():\n        dict1[k] = int(v)\n    return dict1\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    result = dict()\n    for key in dict1.keys():\n        if dict1[key] not in result.keys():\n            result[dict1[key]] = [key]\n        else:\n            result[dict1[key]].append(key)\n",
        "num_ids": 63
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict1.items()\n",
        "num_ids": 10
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Write your code here.\n    \n    return sorted(dict1.values(), key=lambda x: x.keys())\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = dict1.keys()\n    for i in range(len(keys)):\n        dict1[keys[i]]=0\n    return dict1\ndef generate_freq_matrix(arr):\n    '''\n    Generate a frequency matrix, each entry is a number of times a word appears\n    '''\n    n=len(arr)\n    freq=Counter(arr)\n    freq_matrix=[]\n    for i in range(n):\n        freq_matrix.append([freq[arr[i]],i])\n    freq_matrix.sort(reverse=True, key=lambda item:item[0])\n    return freq_matrix\n",
        "num_ids": 88
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for key in dict1.keys():\n        if key not in sorted_dict:\n            sorted_dict[key] = 1\n        else:\n            sorted_dict[key] = sorted_dict[key] + 1\n",
        "num_ids": 63
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n",
        "num_ids": 24
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    if len(nums) == 0:\n        return 0\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    \n    return max_num + min_num\n",
        "num_ids": 97
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    max_num = 0\n    min_num = 0\n",
        "num_ids": 21
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = 0\n    small_sum = 0\n    for i in nums:\n        big_sum += i\n        if i < 0:\n            small_sum += i\n    return big_sum - small_sum\n",
        "num_ids": 55
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum=0\n    i=0\n    j=len(nums)\n",
        "num_ids": 21
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    nums.sort(reverse = True)\n    return sum(nums[:len(nums)-1]) + sum(nums[len(nums)-1:])\n",
        "num_ids": 58
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        return nums[0]+big_sum(nums[1:])\n    \n    return max(nums) + min(nums)\n    \nprint(big_sum([-2, -1])",
        "num_ids": 69
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    arr_size = len(nums)\n",
        "num_ids": 13
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    #intialize empty list to store the biggest and smallest value\n    values = []\n    \n    #iterate through the list to find the biggest and smallest value\n    for num in nums:\n        if num > max(values):\n            max_num = num\n        else:\n            min_num = num\n        values.append(max_num)\n        values.append(min_num)\n    \n    #return the sum of all values of the list\n    return sum(values)\n    \nprint(big_sum([1,2,3,1,2,3])",
        "num_ids": 137
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    nums = sorted(nums, reverse = True)\n    return sum(nums)",
        "num_ids": 38
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.lower()!= string:\n        return False\n    return True\n",
        "num_ids": 21
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        string = string.lower()\n        return string\n    else:\n        return str(string)\n",
        "num_ids": 35
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = string.lower()\n    return lower\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    result = string.lower()\n    return result\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    for i in range(len(string)):\n        if string[i].islower():\n            string = string.lower()\n    return string\n",
        "num_ids": 36
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # your code here\n    return string.lower()\n",
        "num_ids": 15
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    try:\n        string.lower()\n        return True\n    except Exception as e:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #Brute force solution\n    #dic = {}\n    #for c in str1:\n    #    if c in dic:\n    #        dic[c] += 1\n    #    else:\n    #        dic[c] = 1\n    #for c in dic:\n    #    if dic[c] == 1:\n    #        str1 = str1.replace(c, '')\n    #    elif dic[c] == 0:\n    #        continue\n    #    else:\n    #        print(c)\n",
        "num_ids": 134
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # loop through string\n    for i in range(len(str1)):\n        if str1[i].islower():\n            # if the letter is lowercase, do not add it again\n            if str1[i].isupper():\n                pass\n            else:\n                str1 = str1[:i] + str1[i+1:]\n    return str1\n",
        "num_ids": 89
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\n",
        "num_ids": 26
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    # If a string is empty or if it contains only whitespace\n    # then return the string unchanged\n    if not str1:\n        return str1\n    elif len(str1)==0:\n        return str1\n    elif str1[0].lower() not in string.ascii_lowercase:\n        return str1\n",
        "num_ids": 87
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    r = re.compile(r'(\\W+)')\n    return''.join(r.findall(str1))\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    punctuation_char = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    r = re.compile(r'[' + punctuation_char + ']')\n    return ''.join(r.findall(str1))\n",
        "num_ids": 74
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    clean_str = str1.replace(\" \", \"\")\n    return clean_str.lower()\n",
        "num_ids": 25
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(\"c\",\"e\").replace(\"i\",\"a\").replace(\"k\",\"g\")\n",
        "num_ids": 28
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_punctuation2(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits))\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits))\ndef remove_alphanum(str1):\n    '''\n    Write a function to remove alphanumeric characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_letters))\ndef remove_special_char2(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_digits2(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits))\ndef remove_numbers2(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits))\ndef remove_special_char3(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char3(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char4(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char4(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char5(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char6(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char7(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char8(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char9(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char10(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char11(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char12(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char13(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char14(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char15(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char16(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char17(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char18(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char19(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char20(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char21(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char22(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char23(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char24(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_char25(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans(''",
        "num_ids": 18
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    s = str1.lower()\n    s1 = re.sub(r'[^a-z]', '', s)\n    return s1\n",
        "num_ids": 38
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex_lowercase = re.compile(\"[a-z]\")\n    return regex_lowercase.sub(\"\", str1)\n",
        "num_ids": 35
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    f = 0\n    while n!= 0:\n        f = f * 10 + n % 10\n        n = n // 10\n    return f\n",
        "num_ids": 37
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    a = n%10\n    return a\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 0 :\n        l = list(str(n))\n        first = l[0]\n        return first\n    else :\n        print(\"Please enter a positive number\")\n",
        "num_ids": 45
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    if n == '0':\n        return 0\n    elif n[0] == '9':\n        return int(n)\n    else:\n        return int(n[0])\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2014
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 0 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 1 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef first_and_second_Digit(n) :\n    '''\n    Write a python function to find the first and second digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 1 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef third_and_fourth_Digit(n) :\n    '''\n    Write a python function to find the third and fourth digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 2 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    \n    while True :\n        \n        if n % 10 == 3 :\n            return n // 10\n        \n        n = n // 10\n        \n        \ndef calc_factorial(n) :\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0 :\n        return 1\n    \n    fact = 1\n    \n    while True :\n        \n        if n % 10 == 4 :\n            return n // 10\n        \n        n = n // 10\n        \n        fact = fact * n\n        \n        \ndef find_smallest(n) :\n    '''\n    Write a python function to find the smallest number in a given number list.\n    '''\n    if n == 0 :\n        return 0\n    \n    min_num = n[0]\n    \n    for num in n :\n        if num < min_num :\n            min_num = num\n    \n    return min_num\n",
        "num_ids": 58
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    l = list(str(n))\n    i = 0\n    while True :\n        if i >= len(l) :\n            break\n        if l[i] == \"0\" :\n            i += 1\n            continue\n        else :\n            break\n    return int(l[i])\n",
        "num_ids": 71
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    l = []\n    while n > 0 :\n        l.append(n % 10)\n        n = n//10\n    print(l[0])\nfirst_Digit(9)\n",
        "num_ids": 47
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 10):\n        return n\n    elif (n % 10 == 0):\n        return n//10\n    else:\n        return n%10\n    \n",
        "num_ids": 43
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n.lower()\n    if n.isdigit() :\n        if int(n) >0 :\n            return int(n)%10\n        else :\n            return 0\n    else :\n        return 0\n",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    for i in list: \n        if i % 2!= 0: \n            even_list.append(i) \n    return even_list \n     \n",
        "num_ids": 48
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd, even\ndef combine(lst1, lst2):\n    '''\n    Write a python function which takes two lists and combines them into one list of\n    lists.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i+j)\n    return result\ndef list_concat(lst1, lst2):\n    '''\n    Write a python function which takes two lists and concatenates them into one list.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i+j)\n    return result\ndef multiplication(lst1,lst2):\n    '''\n    Write a python function which takes two lists and returns the product of both lists.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i*j)\n    return result\ndef add(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their sum.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i+j)\n    return result\ndef add_lists(lst1,lst2):\n    '''\n    Write a python function which takes two lists and returns their sum.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i+j)\n    return result\ndef substract(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their difference.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i-j)\n    return result\ndef count(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their count.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i*j)\n    return result\ndef area(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their area.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i*j)\n    return result\ndef length(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their length.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(len(i))\n    return result\ndef list_intersect(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their intersection.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i in j:\n                result.append(i)\n    return result\ndef list_difference(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their difference.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i-j)\n    return result\ndef list_symmetric(lst1):\n    '''\n    Write a python function which takes two lists and returns their symmetric difference.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst1:\n            result.append(i+j)\n    return result\ndef symmetric_difference(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their symmetric difference.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i-j)\n    return result\ndef set1(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their union.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            result.append(i+j)\n    return result\ndef set2(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their intersection.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i in j:\n                result.append(i)\n    return result\ndef set_difference(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their intersection.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i in j:\n                result.append(i)\n    return result\ndef intersection(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their intersection.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i in j:\n                result.append(i)\n    return result\ndef find_intersection(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their intersection.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i in j:\n                result.append(i)\n    return result\ndef find_difference(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their intersection.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i not in j:\n                result.append(i)\n    return result\ndef find_symmetric_difference(lst1, lst2):\n    '''\n    Write a python function which takes two lists and returns their symmetric difference.\n    '''\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i not in j:\n                result.append(i+j)\n    return result\ndef has_cycle(lst):\n    '''\n    Write a python function which takes a list and returns True if there is a cycle in it.\n    '''\n    result = []\n    for i in lst:\n        for j in lst:\n            if i+j in result:\n                return True\n    return False\ndef is_valid(lst):\n    '''\n    Write a python function which takes a list and returns True if the list is valid.\n    '''\n    result = []\n    for i in lst:\n        if len(result) > 0:\n            if i in result:\n                return False\n        result.append(i)\n    return True\ndef is_in_list(lst, number):\n    '''\n    Write a python function which takes a list and a number and returns True if the number is in the list.\n    '''\n    result = []\n    for i in lst:\n        if i == number:\n            result.append(i)\n    return True\ndef test():\n    print(list_concat([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\"]))\n    print(list_concat([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\"]))\n    print(list_concat([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\"]))\n    print(list_concat([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\"]))\n    print(list_concat([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\"]))\n    print(list_concat([\"a\", \"b\", \"c\", \"d\", ",
        "num_ids": 229
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(\"--= Splitting List --=\")\n    return list[::2]\n",
        "num_ids": 22
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    if len(list)%2!= 0:\n        return odd_list\n    else:\n        for i in range(int(len(list)/2)):\n            odd_list.append(list[i])\n        return odd_list\n",
        "num_ids": 66
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(f'Even {even}')\n    print(f'Odd {odd}')\n",
        "num_ids": 71
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if (i % 2 == 1):\n            odd.append(i)\n    return odd\n    \ndef main():\n    print(\"Main Function\")\n    print(\"Input integer: \")\n    print(\"\\t\", int(input()), \":\")\n    print()\n    print(\"OUTPUT: \")\n    print(Split(int(input())))\n    print(\"\\t\", int(input()), \":\", Split(int(input())))\n    print()\n    print(\"Main Function END\")\n",
        "num_ids": 132
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            odds.append(i)\n        else:\n            evens.append(i)\n    return odds, evens\n",
        "num_ids": 59
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for number in list:\n        if (number%2)!= 0:\n            odd_lst.append(number)\n    return odd_lst\n",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if(list[i]%2!= 0):\n            odd_list.append(list[i])\n    return odd_list\n    \ndef Print_List(list):\n    '''\n    Write a python function which takes a list of integers and prints the list.\n    '''\n    for i in range(len(list)):\n        print(list[i], end = \" \")\n",
        "num_ids": 27
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    my_list=[]\n    for i in list:\n        if i % 2!= 0:\n            my_list.append(i)\n    return my_list\n",
        "num_ids": 42
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(n) :\n        sum_cubes += pow(i,3)\n    sum_of_cubes = sum_cubes + sum_cubes\n    return sum_of_cubes - n\n    \n",
        "num_ids": 64
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n > 0 :\n        sum = 0\n        for i in range(1, n + 1) :\n            sum = sum + i ** 3\n        return sum - n\n    else :\n        return None\n",
        "num_ids": 51
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total_sum = 0\n    n = n\n    for i in range(1, n + 1):\n        total_sum += i\n    total_sum = total_sum + 1\n    return total_sum\n",
        "num_ids": 51
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n ** 3) - (n ** 4)\n",
        "num_ids": 16
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(n,'n',n)\n    cubes_n=[i**3 for i in range(n)]\n    print(cubes_n)\n    return sum(cubes_n)\n",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # your code here\n    sum_of_cubes = n**3\n    for n_ in range(1, n+1):\n        sum_of_cubes = sum_of_cubes - n_**3\n    return sum_of_cubes\n",
        "num_ids": 63
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes\n",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    temp=n\n    for i in range(1,n+1):\n        if i==1:\n            a=i\n        else:\n            a=i*(i*(i+1)//2)\n        b=a\n    return b\nn=int(input())\nprint(difference(n))\n",
        "num_ids": 77
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    temp = n\n    summ = 0\n    for i in range(n):\n        summ += pow(i,3)\n    return summ - (summ * (summ - 1)) / 2\n",
        "num_ids": 50
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    j = N - 1\n",
        "num_ids": 14
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(0,N):\n        for j in range(i+1, N):\n            if (A[i] & A[j] == 0):\n                if (A[i] == 0 and A[j] == 1):\n                    odd_count += 1\n    return odd_count\n",
        "num_ids": 80
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A=list(A)\n    odd_count=0\n    for i in range(len(A)-1) :\n        for j in range(i+1,len(A)) :\n            if A[i]&A[j]==0 :\n                odd_count+=1\n    return odd_count\n",
        "num_ids": 75
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    counter = 0 \n    for i in range (0,N) : \n        if A[i] == A[(i+1) % N] :\n            counter += 1\n    return counter\n",
        "num_ids": 49
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N) :\n        xor_val = A[i] ^ i\n        if xor_val % 2 == 0 :\n            odd_count += 1\n    return odd_count\n",
        "num_ids": 57
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]!=A[i] and A[j]^A[i]!=A[j] :\n                count+=1\n                break\n",
        "num_ids": 74
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n    Write a Python function to find the first pair with odd xor value.\n    '''\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if A == 0 :\n        return 0\n    elif N == 0 :\n        return 1\n    else :\n        odd = 0\n        if A % 2!= 0 : \n            odd += 1\n        if N % 2!= 0 : \n            odd += 1\n        odd += A ^ N\n        if odd % 2 == 0 : \n            odd += 2\n        return odd\n",
        "num_ids": 92
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # A is a list of integers\n    # N is the total size of the list of integers.\n    #\n    # Output will be an integer\n    #\n    # Precondition: n>=0\n    #\n    # Examples:\n    #   Input: A = [1,2,4,3,5,7,8], N = 7\n    #   Output: 3\n    #\n    # Precondition: n = 7\n    #\n    # Hints:\n    #   Complexity\n    #\n    # Time Complexity\n    #\n    # This approach will be similar to the one in the first question,\n    # but we want to optimize the code so that we don't have to repitute\n    # the calculation each time.\n    #\n    # There are two ways we can implement this approach\n    # If we find the xor of a and b, we can quickly\n    # compare the corresponding pairs and find a pair whose xor\n    # is odd, or find all pairs whose xor is odd, and we don't\n    # need to repeat the calculation in the loop\n    #\n    #\n    \n    '''\n    * Do not modify the code below.\n    '''\n    # Write your code here\n    \n    \n    \n    \n    \n    '''\n    # Alternative:\n    # find all pairs whose xor is odd\n    # first, find the pairs whose xor is odd\n    # then, find the pairs whose xor is odd\n    # and so on\n    '''\n    # Find all pairs whose xor is odd\n    \n    '''\n    # Alternative:\n    # 2 for loops, and 1 for while loop\n    '''\n    # If we want to find the pairs whose xor is odd,\n    # we can do it in a for loop\n    # if the xor of a and b is odd, we can return a pair\n    # and we can return the odd xor value of the two pairs\n    #\n    # If we want to find the pairs whose xor is not odd,\n    # we can use a while loop\n    #\n    \n    '''\n    \n    \n    \n    '''\n    # Write your code here\n    #\n    \n    \n    \n    \n    \n    '''\n    \n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    \n    \n    \n    \n    \n    \n    \n    '''\n    \n    \n    \n    \n    \n    \n    '''\n    \n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1400
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower_case = False\n    upper_case = False\n    number = False\n    for char in string:\n        if char.isupper():\n            upper_case = not upper_case\n        if char.islower():\n            lower_case = not lower_case\n        if char.isnumeric():\n            number = not number\n    if lower_case and upper_case and number:\n        return f'{string} is lower case and upper case and number'\n    else:\n        return f'{string} is neither lower case, upper case nor number'\n        \n",
        "num_ids": 133
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(string.title()).strip().replace(' ', '')",
        "num_ids": 20
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    new_string = \"\"\n    \n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n        \n    return new_string\n",
        "num_ids": 60
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        print('String must have at least one character!')\n    else:\n        word = string.upper()\n        for letter in word:\n            if letter =='':\n                print('Space is not allowed!')\n            elif letter == '-':\n                print('Trailing spaces are not allowed!')\n            elif letter == '!':\n                print('Characters other than - and! are not allowed!')\n            elif letter == '@':\n                print('At least one character other than \"@\" is not allowed!')\n            elif letter == '#':\n                print('Characters other than \"#\" are not allowed!')\n            elif letter == '$':\n                print('Special characters are not allowed!')\n            else:\n                print(letter)\n",
        "num_ids": 185
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lowercase = string.lower()\n    return lowercase[::-1]\n",
        "num_ids": 21
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #Write your code here\n    return string.swapcase()\n",
        "num_ids": 18
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # your code here\n    result = \"\"\n    for i in string:\n        if i.isalpha():\n            result += i.lower()\n        elif i.isnumeric():\n            result += i.upper()\n        else:\n            result += i\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    else:\n        for char in string:\n            if char.isupper():\n                string = string.replace(char, '*')\n            else:\n                string = string.replace(char, '_')\n        return string\n",
        "num_ids": 66
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += \" \"\n            new_string += char.lower()\n        else:\n            new_string += \" \"\n            new_string += char.upper()\n    return new_string\n",
        "num_ids": 72
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) % 2 == 0:\n        print('Case sensitive')\n    else:\n        print('Case insensitive')\n",
        "num_ids": 32
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # `A' can be considered as A' for the difference.\n    # `B' can be considered as B' for the difference.\n    # `C' can be considered as C' for the difference.\n    # `D' can be considered as D' for the difference.\n    # `E' can be considered as E' for the difference.\n    # `F' can be considered as F' for the difference.\n    # `G' can be considered as G' for the difference.\n    # `H' can be considered as H' for the difference.\n    # `I' can be considered as I' for the difference.\n    # `J' can be considered as J' for the difference.\n    # `K' can be considered as K' for the difference.\n    # `L' can be considered as L' for the difference.\n    # `M' can be considered as M' for the difference.\n    # `N' can be considered as N' for the difference.\n    # `O' can be considered as O' for the difference.\n    # `P' can be considered as P' for the difference.\n    # `Q' can be considered as Q' for the difference.\n    # `R' can be considered as R' for the difference.\n    # `S' can be considered as S' for the difference.\n    # `T' can be considered as T' for the difference.\n    # '''\n    # TODO: Write a python function to find the sum of the per-digit difference between two integers.\n    # Remember to use the '+' operator.\n    # Note that `+` does not equal `-`.\n    # Remember to use the '-'.\n    #\n    # HINT: `digit_distance_nums()` in the function `digit_distance_nums()` is not what you want.\n    # HINT: If you use '+' instead of '-', the function should return `0`.\n    #       Remember to return the result of `digit_distance_nums()` instead.\n",
        "num_ids": 143
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    dif = 0\n    for i in range(len(str(n1))):\n        dif += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return dif\n",
        "num_ids": 55
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    res = 0\n    for i in range(1, 10):\n        if n1 % i == 0 and n2 % i == 0:\n            res += i\n",
        "num_ids": 40
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    summ = n1 - n2\n    #print(summ)\n    return sum(summ)\n",
        "num_ids": 28
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    for i in range(min(len(str(n1)), len(str(n2)))):\n        total += (n1 - int(n1[i]) + n2 - int(n2[i]))\n    return total\n",
        "num_ids": 62
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # write your code here\n    if n1 > n2:\n        return n1-n2\n    elif n1 < n2:\n        return n2-n1\n    else:\n        return 0\n",
        "num_ids": 52
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    \n    for i in range(n1):\n        d += abs(n1 - i)\n        \n    for i in range(n2):\n        d -= abs(n2 - i)\n        \n    return d\n    \n    \n    \ndef digit_sum(n):\n    '''\n    Write a python function to find the sum of the digits of an integer.\n    '''\n    s = 0\n    \n    while n:\n        s += n % 10\n        n //= 10\n    \n    return s\n",
        "num_ids": 33
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(num1)-int(num2) for num1,num2 in zip(str(n1),str(n2))])\n",
        "num_ids": 37
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # base cases\n    if n1 == 0 or n2 == 0:\n        return 0\n    # n1, n2 are integers, result is an int\n    return abs(n1 - n2)\n",
        "num_ids": 50
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(n1 - n2) % 10)\n",
        "num_ids": 18
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = sum(a)\n    if len(a) <= 2 or size <= 1:\n        return s\n    sum_sub_array = []\n    for i in range(len(a)):\n        sum_sub_array.append(a[i] + max_sub_array_sum(a[i + 1:], size-1))\n    return max(sum_sub_array)\n",
        "num_ids": 94
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    # Runtime: 14 ms (69.94%)\n    # Memory Usage: 14.2 MB (68.47%)\n    \n    i = 0\n    current_max_sum = -float('inf')\n    \n    # Dynamic programming to find the sum of the largest contiguous sublist\n    while (i < size):\n        current_sum = a[i]\n        \n        # use current_sum + the current_sum of the current sublist\n        current_sum += current_sum\n        \n        # update the current_max_sum if the current sum is larger than the current_max_sum\n        if current_sum > current_max_sum:\n            current_max_sum = current_sum\n        \n        # if the current sublist is not empty, the current sublist is the largest sublist\n        # find the maximum sublist by using the current_sum\n        if current_sum > 0:\n            current_max_sum += current_sum\n        \n        # move the index of the current sublist to the next index after\n        # the current sublist is the largest sublist\n        i += 1\n    \n    # return the maximum sublist sum\n    return current_max_sum\n        \n        ",
        "num_ids": 296
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_array = 0\n    for i in range(len(a)):\n        max_sub_array = max(max_sub_array, a[i])\n        if i < size:\n            max_sub_array = max(max_sub_array, a[i] - a[i+1])\n        if i == size - 1:\n            max_sub_array = max(max_sub_array, a[i] - a[i-1])\n",
        "num_ids": 113
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if a==[]:\n        return 0\n    if size==1:\n        return a[0]\n    if size>1:\n        sub_sum=sum(a[:size])\n        if a[size-1]==[]:\n            return sub_sum\n        else:\n            for i in a[size-1]:\n                sub_sum=max(sub_sum,sum(a[:size])+i)\n            return sub_sum\n",
        "num_ids": 108
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_array_sum = 0\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0], a[1])\n    elif size == 3:\n        return max(a[0] + a[1], a[1] + a[2])\n    else:\n        for i in range(0, size):\n            max_sub_array_sum = max(max_sub_array_sum, a[i] + max_sub_array_sum(a[i:], size - 1))\n        return max_sub_array_sum\n",
        "num_ids": 146
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n    for i in range(size):\n        s = a[i] + s\n    return s\n    \ndef is_sum_possible(l, s):\n    '''\n    Write a function that returns whether the sum of a list is possible or not.\n    '''\n    if not l:\n        return True\n    \n    for i in range(len(l)):\n        if l[i] == s:\n            continue\n        elif l[i] > s:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    if a[size-1] < 0:\n        return a[size-1]\n    \n    for i in range(size-2, -1, -1):\n        a[i] = max(a[i] + a[i+1], a[i])\n    return a[0]\n",
        "num_ids": 87
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return sum(a[size:])\n",
        "num_ids": 12
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        temp_sum = 0\n        for j in range(i, size):\n            temp_sum += a[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum\n",
        "num_ids": 72
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return sum([max(a[i:]) for i in range(0, len(a))]",
        "num_ids": 25
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = tuple()\n    tuple_1 = test_tup1[0]\n    tuple_2 = test_tup2[0]\n    i = 0\n    j = 0\n    while(i < len(test_tup1) and j < len(test_tup2)):\n        if tuple_1[i] < tuple_2[j]:\n            union_tuple = union_tuple + tuple_1\n            i = i + 1\n        else:\n            union_tuple = union_tuple + tuple_2\n            j = j + 1\n    if i < len(test_tup1):\n        while(i < len(test_tup1)):\n            union_tuple = union_tuple + tuple_1\n            i = i + 1\n    if j < len(test_tup2):\n        while(j < len(test_tup2)):\n            union_tuple = union_tuple + tuple_2\n            j = j + 1\n    return union_tuple\n",
        "num_ids": 248
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Write your code here\n    try:\n        return sorted(set(test_tup1) | set(test_tup2))\n    except TypeError:\n        return test_tup1 + test_tup2\n    except AttributeError:\n        return set(test_tup1) | set(test_tup2)\n",
        "num_ids": 82
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = set(test_tup1) | set(test_tup2)\n    return sorted(union_elements)\n",
        "num_ids": 36
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    '''\n    Source: https://www.geeksforgeeks.org/python-program-to-find-the-sorted-combination-of-two-sets-of-given-elements/\n    '''\n    # remove duplicates, sort, then union\n    # approach: sort and compare\n    # time complexity: O(n^2)\n",
        "num_ids": 33
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the minimum element\n    min_element_tup = test_tup1[0]\n    # Find the maximum element\n    max_element_tup = test_tup2[0]\n    # Check if either of the tuples are the same element\n    if min_element_tup == max_element_tup:\n        # Create a list of the element that are not found in the tuples\n        result = []\n        for element in test_tup1:\n            if element not in result:\n                result.append(element)\n        for element in test_tup2:\n            if element not in result:\n                result.append(element)\n        return result\n    # If both of the tuples have the same element, take the second minimum element and compare it with the first\n    if min_element_tup in test_tup1 and min_element_tup in test_tup2:\n        second_min_element = min_element_tup\n        for element in test_tup1:\n            if element not in result and element not in second_min_element:\n                result.append(element)\n        for element in test_tup2:\n            if element not in result and element not in second_min_element:\n                result.append(element)\n        return result\n    # If there is no element in either of the tuples, use the second smallest element\n    if min_element_tup not in test_tup1 and min_element_tup not in test_tup2:\n        return second_min_element\n    # If there is no element in both of the tuples, return an empty list\n    if min_element_tup not in test_tup1 and min_element_tup not in test_tup2:\n        return []\n",
        "num_ids": 418
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = {}\n    for key in test_tup1.keys():\n        union[key] = test_tup1[key]\n    for key in test_tup2.keys():\n        union[key] = test_tup2[key]\n    return sorted(union.keys())\n",
        "num_ids": 72
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = (test_tup1[0] or test_tup2[0]) and (test_tup1[1] or test_tup2[1]) or test_tup1[0] and test_tup2[0]\n    return union_tuple\n",
        "num_ids": 71
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    print(test_tup1[0] + test_tup2[0])\n    \n    return\n    \n    pass\n    \n    # YOUR CODE HERE\n",
        "num_ids": 43
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    #Your code here\n    for i in range(len(test_tup1)-1):\n        for j in range(len(test_tup2)-1):\n            if test_tup1[i]<test_tup2[j]:\n                test_tup1[i], test_tup2[j] = test_tup2[j], test_tup1[i]\n    return test_tup",
        "num_ids": 105
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    first_tup_set = set(test_tup1)\n    second_tup_set = set(test_tup2)\n    intersect = first_tup_set.intersection(second_tup_set)\n    return sorted(intersect)\n",
        "num_ids": 66
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    i = 0\n    j = 0\n    count = 0\n",
        "num_ids": 17
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(0, len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                max_len = len(lst[i])\n    return max_len\n",
        "num_ids": 79
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    if lst:\n        i = 0\n        l = len(lst)\n        while(i<l):\n            if lst[i] == lst[i+1]:\n                if l > max_len:\n                    max_len = l\n                else:\n                    break\n            else:\n                i = i + 1\n    return max_len\n",
        "num_ids": 93
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # O(n) time complexity, O(1) space complexity\n    lst_length = len(lst)\n    # Create a stack to store the length of the sublist\n    stack = []\n    # Create a dictionary to store length of sublists\n    sub_dict = {}\n    # Traverse through all the elements in the list\n    for i in range(lst_length):\n        # Push each element in the stack\n        stack.append(lst[i])\n        # Iterate through the stack\n        while len(stack)>0 and stack[-1]>lst[i]:\n            # Pop the element from the stack\n            # and add it to the dictionary with the index\n            sub_dict[stack[-1]] = i\n            stack.pop()\n    # Return the maximum length if found\n    return max(sub_dict.values())\n",
        "num_ids": 201
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    max_sub_lst = []\n    for i in range(len(lst)):\n        max_sub = max_sub_lst\n        for j in range(0, len(lst)):\n            sub_lst = lst[j:j+len(lst[0])]\n            max_sub.append(len(max_sub_lst))\n            max_sub_lst = []\n            for element in sub_lst:\n                if element in max_sub:\n                    max_sub.remove(element)\n                    max_sub.append(element)\n    return max_len\n",
        "num_ids": 153
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0\n    # Start at the first index and go until there is no more index.\n    # Create a set of all the indices that were not removed from the list.\n    # If a unique element is found, add it to the index, else use its count as the max_length.\n    # Return the index where the first unique element was found.\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n    # Recurrence relation:\n    #   1. Add a new element to the set to compare against\n    #   2. Add the index of the previous element to the set, if it's in there\n    #   3. If it's not in there, check to see if it's a unique element. If it's, increase the max_length.\n    #   4. If the result is larger than the previous index, return the index.\n    \n    if not lst:\n        return -1\n    \n    d = {}\n    for i in range(len(lst)):\n        if lst[i] not in d:\n            d[lst[i]] = 0\n        if lst[i] not in d:\n            d[lst[i]] += 1\n    \n    for k in d:\n        if d[k] > 1:\n            if k == lst[0]:\n                return lst.index(k)\n            else:\n                # index: index of the next unique element\n                # count: count of the next unique element\n                # longest: length of the longest sublist\n                # curr: the current element\n                # next: the next element\n                # prev: the previous element\n                \n                return Find_Max_Length(lst[k:])\n            \n    # if the item is not in the dictionary, return -1\n    return -1\n",
        "num_ids": 427
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=[]\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            l.append(lst[i])\n    l.sort(key=len)\n    return len(l)\ndef Main():\n    '''\n    Read file from the command line.\n    Check if the file is named properly.\n    Display all the values in the file.\n    '''\n    try:\n        file_name = input(\"Enter the name of the file: \")\n        input_file = open(file_name)\n        lst = []\n        for line in input_file:\n            lst.append(line.rstrip('\\n'))\n        input_file.close()\n        return lst\n    except FileNotFoundError:\n        print(\"File not found\")\n        return False\ndef Main2():\n    '''\n    Read file from the command line.\n    Check if the file is named properly.\n    Display all the values in the file.\n    '''\n    try:\n        file_name = input(\"Enter the name of the file: \")\n        input_file = open(file_name)\n        lst = []\n        for line in input_file:\n            lst.append(line.rstrip('\\n'))\n        input_file.close()\n        return lst\n    except FileNotFoundError:\n        print(\"File not found\")\n        return False\ndef Main3():\n    '''\n    Read file from the command line.\n    Check if the file is named properly.\n    Display all the values in the file.\n    '''\n    try:\n        file_name = input(\"Enter the name of the file: \")\n        input_file = open(file_name)\n        lst = []\n        for line in input_file:\n            lst.append(line.rstrip('\\n'))\n        input_file.close()\n        return lst\n    except FileNotFoundError:\n        print(\"File not found\")\n        return False\ndef Main4():\n    '''\n    Read file from the command line.\n    Check if the file is named properly.\n    Display all the values in the file.\n    '''\n    try:\n        file_name = input(\"Enter the name of the file: \")\n        input_file = open(file_name)\n        lst = []\n        for line in input_file:\n            lst.append(line.rstrip('\\n'))\n        input_file.close()\n        return lst\n    except FileNotFoundError:\n        print(\"File not found\")\n        return False\ndef main():\n    '''\n    Find the maximum length of all sublists.\n    '''\n    try:\n        list_test = Main()\n        print(f\"Total Length: {Find_Max_Length(list_test)}\")\n    except FileNotFoundError:\n        print(\"File not found\")\n    except IndexError:\n        print(\"Index out of range\")\n    except ValueError:\n        print(\"Invalid input\")\nif __name__ == \"__main__\":\n    main(",
        "num_ids": 93
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in lst:\n        length = len(i)\n        if length > maxLength:\n            maxLength = length\n    return maxLength\n",
        "num_ids": 43
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Time complexity: O(n2)\n    # Space Complexity: O(1)\n    \n    # Initialize max length of sublists\n    max_length = 0\n    \n    # Initialize list\n    sub_list = []\n    \n    # Traverse the lst\n    for item in lst:\n        \n        # Check if current item is a sublist\n        if item in sub_list:\n            # Increment max_length\n            max_length = max(len(sub_list), max_length)\n            \n            # Remove the item from sub_list\n            sub_list.remove(item)\n            \n        # If the item is not a sublist, add it to sub_list\n        else:\n            # Add item to sub_list\n            sub_list.append(item)\n            \n    # Return the max_length\n    return max_length\n    \n    \n    ",
        "num_ids": 212
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return(len(max(lst, key=len)))\n",
        "num_ids": 17
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('[^\\\\s]+\",', text)\n    result = [x.strip() for x in result]\n    result = [x.strip().replace(\"'\", \"\") for x in result]\n    result = [x.replace('(', '') for x in result]\n    result = [x.replace(')', '') for x in result]\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = []\n    value = ''\n    i = 0\n    while i < len(text):\n        if text[i] == '\"':\n            value += text[i]\n            i += 1\n            #if value == \"\":\n            #    value = ''\n        else:\n            if value!= '':\n                result.append(value)\n                value = ''\n            i += 1\n            if text[i] == '\"':\n                value += text[i]\n                i += 1\n    #print(result)\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    def extract_values_regex(string):\n        result = re.findall(r'\\([^)]+\\)', string)\n        return [x.strip('(') for x in result]\n    text = text.replace('\\'', '\"')\n    return extract_values_regex(text)\n",
        "num_ids": 74
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # create an empty array to hold extracted values\n    values = []\n    # iterate over the text\n    for i in range(len(text)):\n        # if the index is a quotation mark, use the next character\n        if text[i].isalpha():\n            # append the values into the array\n            values.append(text[i])\n    # return the array\n    return values\n",
        "num_ids": 92
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\b([^\\w,!?]*)\\b', text)\n",
        "num_ids": 27
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'\\b\\w*(?:[\\'\\\"])\\b' # Define regular expressions to extract values\n    output = []\n    for word in re.split(regex, text):\n        if word.endswith('\"'): # If word ends with a \"\u2019\"\n            output.append(word[:-1]) # Add the word to output list\n        else:\n            output.append(word) # Add word to output list\n    return output\n",
        "num_ids": 111
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    def get_quotations(text):\n        '''\n        Return the string from the string that follows the quote marks.\n        '''\n        \n        #Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        #Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n        \n    # Create a function to extract the values\n    def extract_values2(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values3(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values4(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values5(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values6(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values7(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values8(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values9(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values10(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values11(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values12(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values13(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values14(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values15(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values16(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values17(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values18(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function to extract the values\n    def extract_values19(text):\n        '''\n        Return the string from the string that follows the quotes.\n        '''\n        \n        # Create a regex pattern\n        reg = re.compile(r'\"([^\"]*)\"')\n        \n        # Match each quote\n        quotes = reg.findall(text)\n        \n        #For each quote, extract the value\n        return quotes\n    \n    # Create a function t",
        "num_ids": 73
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    match = pattern.search(text)\n    if match:\n        value = match.group(0)\n        return value\n    else:\n        return text\n",
        "num_ids": 57
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Cut text up, make a list, and pass to findall()\n    lst = re.findall(r'\\(([^)]*)\\)', text)\n    # lst = re.findall(r'([^()]+)', text)\n    # lst = [x.strip() for x in lst if x.strip()!= '']\n",
        "num_ids": 88
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    words = re.split(r'\\'', text)\n    return [word for word in words if word!= '' and word!='']\n",
        "num_ids": 36
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    elif len(arr)==2:\n        return 1\n    else:\n        return 0\n    \ndef count_Intersection(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first and the last element are equal.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    elif len(arr)==2:\n        return 1\n    else:\n        return 0\n    \ndef count_Equivalent(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where all the elements are distinct.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Chaining(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where all the elements are equal, with the first and last elements paired together.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Intersection_Symmetric(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first and the last elements are equal, with the first and the last elements paired.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Sequential(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Sequential_Symmetric(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Count_Symmetric(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Count_Symmetric_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Intersection_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Intersection_Sym_Symmetric(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Difference_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Difference_Sym_Symmetric(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Symmetric(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Symmetric_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Symmetric_Sym_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_S(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_S_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_S_Sym_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second and the last element is equal to the third.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Difference(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where the first element is equal to the second and the last element is equal to the third and the first element is equal to the second.\n    '''\n    \n    if len(arr)<=1:\n        return 0\n    else:\n        return 1\n    \ndef count_Difference_Sym(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts th",
        "num_ids": 16
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j] and arr[i]!= arr[j]:\n                count +=1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if (arr[i] == arr[j]):\n                counter = counter + 1\n    return counter\n",
        "num_ids": 61
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if (arr[i]==arr[j]) and (arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j] and arr[i]!= arr[j] and arr[i]!= arr[j]: \n                count += 1 \n    return count \n",
        "num_ids": 80
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize the count variable \n    count = 0\n    # Iterate through the list \n    for i in range(0,len(arr)): \n        # Check if both elements are not equal \n        if arr[i] > arr[i+1]: \n            count+=1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # your code here\n    # If the given list is empty, then return 0\n    if len(arr) < 2:\n        return 0\n",
        "num_ids": 35
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            count+=1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if i!= j and arr[i]!= arr[j]:\n                counter+=1\n    return counter",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count_even = 0\n    count_odd = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            count_even += 1\n        else:\n            count_odd += 1\n    return [count_even, count_odd]\n",
        "num_ids": 72
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    # Remove spaces from the string\n",
        "num_ids": 20
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split = \"\"\n    char_list = []\n    for char in word:\n        if char == \" \":\n            split = split + \" \"\n        else:\n            split = split + char\n            char_list.append(char)\n    return split, char_list\n    \n",
        "num_ids": 68
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    try: \n        return list(word)\n    except TypeError:\n        return [word]\n",
        "num_ids": 26
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    x = 0\n    y = 0\n    d = 0\n    result = \"\"\n    while word:\n        if word[x:y+1]!= \" \":\n            result += word[x:y+1]\n            x += 1\n        if x >= len(word):\n            y += 1\n            x = 0\n        if word[x:y+1]!= \" \":\n            d += 1\n            x += 1\n        if d == 1:\n            d = 0\n            y += 1\n    return result\n    \n    \ndef test_split(string):\n    '''\n    Write a python function to split a string into words\n    using the split function in a loop.\n    '''\n    x = 0\n    y = 0\n    d = 0\n    result = \"\"\n    for word in string.split():\n        if word[x:y+1]!= \" \":\n            result += word[x:y+1]\n            x += 1\n        if x >= len(word):\n            y += 1\n            x = 0\n        if word[x:y+1]!= \" \":\n            d += 1\n            x += 1\n        if d == 1:\n            d = 0\n            y += 1\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    ",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    return [char for char in word]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2021
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    chars=[]\n    for char in word: \n        chars.append(char)\n    return chars\n",
        "num_ids": 29
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    chars = []\n    for char in word:\n        chars.append(char)\n    return ''.join(chars)\n    \nprint(split('Hello world'))\n",
        "num_ids": 47
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n\n",
        "num_ids": 6
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # if n is negative, then return 0\n    if n < 0:\n        return 0\n    # if n is 0, then return 0\n    if n == 0:\n        return 0\n    # sum of the digits is n\n    return int(str(n)[::-1][0]) + sum_digits(n-1)\n",
        "num_ids": 80
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return sum_digits(abs(n))\n    return n % 10 + sum_digits(n // 10)\n    ",
        "num_ids": 38
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n % 10\n",
        "num_ids": 24
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return int(str(n)[::-1])\n    ",
        "num_ids": 16
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return(sum(map(int,str(n))))\n",
        "num_ids": 16
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    if len(list1) == 0:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    temp = len(list1)\n    for i in range(temp-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == []:\n        return False\n    else:\n        for i in range(len(list1)):\n            if i < len(list1)-1:\n                if list1[i] > list1[i+1]:\n                    return False\n            else:\n                return False\n        return True\n    ",
        "num_ids": 76
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # swap first element with last element.\n    list1[0], list1[-1] = list1[-1], list1[0]\n    # return false if all elements are same\n    if list1 == sorted(list1):\n        return True\n    # else return false if any element is not same\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n",
        "num_ids": 17
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    # To keep the same input list\n    for i in range(len(list1)-1):\n        # If the list 1 value is smaller than the last value\n        if list1[i] < list1[i+1]:\n            # reverse the list\n            check = False\n            # delete the value\n            del list1[i]\n            # append the new value to the list\n            list1.append(list1[i])\n    # return the list\n    return list1\n",
        "num_ids": 118
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    return sorted(list1) == list1\n",
        "num_ids": 15
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(0, len(list1) - 1):\n            if list1[i] > list1[i + 1]:\n                return False\n        return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    while len(l) < length:\n        l.append({})\n    return l\n",
        "num_ids": 28
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for _ in range(length):\n        empty_list.append(dict())\n    return empty_list\n",
        "num_ids": 34
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for _ in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n",
        "num_ids": 9
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_dict = {}\n        my_dict['name'] = 'name'\n        my_dict['country'] = 'country'\n        my_dict['age'] = 'age'\n        my_dict['city'] = 'city'\n        my_dict['address'] = 'address'\n        my_dict['email'] = 'email'\n        my_dict['phone_number'] = 'phone_number'\n        my_dict['password'] = 'password'\n        my_list.append(my_dict)\n    return my_lis",
        "num_ids": 142
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(0,length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 35
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    return result\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n",
        "num_ids": 9
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    return list\n",
        "num_ids": 11
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(list1):\n        j = i+1\n        while j < len(list1[i]):\n            if list1[i][j] =='':\n                list1[i][j] = '#'\n                j += 1\n                j = j+1\n            else:\n                break\n        i += 1\n    return list1\n",
        "num_ids": 92
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_strings = []\n    list_of_numbers = []\n    for index in range(len(list1)):\n        # If the length of the list is less than 2,\n        # append empty strings to the end of the sublist.\n        if len(list1[index]) < 2:\n            list_of_strings.append(\"\")\n        else:\n            # Append each element in list1 to list_of_strings\n            for element in list1[index]:\n                list_of_strings.append(element)\n    # Sort each string in list_of_strings\n    list_of_strings.sort()\n    # Sort each number in list_of_numbers\n    list_of_numbers.sort()\n    # Return the sorted sublists\n    return list_of_strings, list_of_numbers\n",
        "num_ids": 197
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key = lambda x : x.count('$'))\n    return list1\n",
        "num_ids": 26
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def partition(list1, target):\n        '''\n        Write a function that takes a list and a target as an input, and returns a list\n        where the values of the sublists are sorted. If the target is less than the\n        average of the sublists, then you should return a list of the sublists.\n        '''\n        def sort_recursively(list1, target):\n            if len(list1) == 0:\n                return []\n            else:\n                if len(list1[0]) < target/2:\n                    return sort_recursively(list1[1:], target)\n                else:\n                    return sort_recursively(list1[:1], target) + [list1[-1]] + sort_recursively(list1[:-1], target)\n        return sort_recursively(list1, target)\n",
        "num_ids": 125
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if list1[i][j] =='':\n                list1[i][j] = '#'\n    list2 = []\n    for sublist in list1:\n        list2.append([x for x in sublist if x!= '#'])\n    return list2\n",
        "num_ids": 101
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        print(\"---\")\n        for item in sublist:\n            print(item)\n",
        "num_ids": 31
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # # case 1: 1-D sublist\n    # # case 2: 2-D sublist\n    # # case 3: 3-D sublist\n    # # case 4: 3-D sublist\n    # if type(list1[0]) is list:\n    #     for sublist in list1:\n    #         sort_sublists(sublist)\n    # else:\n    #     if len(list1) == 1:\n    #         sort_sublists(list1[0])\n    #     else:\n    #         sort_sublists(list1[0])\n    #         sort_sublists(list1[1:])\n    #     return\n",
        "num_ids": 159
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #note that this function does not have a return statement\n    #it does not return any value\n    #it only prints the values\n    def sort_sublists_2(list1):\n        '''\n        Write your code here.\n        '''\n        # your code goes here\n        pass\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = list1[i][j].lower()\n    return list1\n    \ndef sort_list_of_lists(list1):\n    '''\n    Write a function to sort each sublist of lists in a given list of lists.\n    '''\n    list1.sort(key=sort_sublists)\n    for i in range(len(list1)):\n        list1[i] = list1[i].lower()\n    return list1\n",
        "num_ids": 49
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums)<=1:\n        return nums\n    removed_nums=[]\n    for n in nums:\n        if n not in removed_nums:\n            removed_nums.append(n)\n    return removed_nums\n",
        "num_ids": 66
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    nums_list = list(nums_set)\n",
        "num_ids": 28
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Your code goes here\n    s = set(nums)\n    return list(s)\n",
        "num_ids": 25
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(set(nums))\n    return(nums)\n",
        "num_ids": 21
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # your code goes here\n    if len(nums) < 2:\n        return nums\n    removed_nums = []\n    for num in nums:\n        if num not in removed_nums:\n            removed_nums.append(num)\n    return removed_nums\n    \n",
        "num_ids": 74
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_dict = {}\n    # loop through nums list\n    for num in nums:\n        # if num is not in nums_dict, then create it and add it to the dict\n        if num not in nums_dict:\n            nums_dict[num] = 1\n        # if num in the dict, then add it to the dict and decrement the count\n        else:\n            nums_dict[num] += 1\n            \n    # sort the dictionary by the number of occurence\n    for key, value in nums_dict.items():\n        nums_dict[key] = value\n        \n    # remove duplicates by dividing by the count of all numbers\n    for key, value in nums_dict.items():\n        # if the key exists\n        if value > 1:\n            # divide the number by the number of elements in the dict\n            divided_value = value // value\n            # if divided_value is not 0, then divide the number by the count of the number\n            if divided_value!= 0:\n                # if the key exists, then remove the value from the dict\n                nums_dict[key] = divided_value\n        # if the key does not exist\n        else:\n            nums_dict.pop(key)\n    \n    # return the dict\n    return nums_dict\n",
        "num_ids": 311
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # Step 1: Sort the list\n    nums.sort()\n    \n    # Step 2: Find the unique number\n    sorted_num = set(nums)\n    \n    # Step 3: Get the number\n    return sorted_num\n    \n",
        "num_ids": 63
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    output = []\n    for num in nums:\n        if num not in output:\n            output.append(num)\n    return output\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a list of unique numbers from given list\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 59
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dic = {}\n    for i in range(len(nums)):\n        if nums[i] not in dic.keys():\n            dic[nums[i]] = 1\n        else:\n            dic[nums[i]] += 1\n    return list(dic.values())\n",
        "num_ids": 74
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum(set(list_data))\n",
        "num_ids": 13
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if type(list_data) == list:\n        if len(list_data) == 0:\n            return 0\n        else:\n            new_list = []\n            for i in list_data:\n                if i not in new_list:\n                    new_list.append(i)\n            return new_list\n    else:\n        return list_data\n",
        "num_ids": 86
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for i in range(0, len(list_data)):\n        if list_data[i] not in unique_numbers:\n            unique_numbers.append(list_data[i])\n    return sum(unique_numbers)\n",
        "num_ids": 67
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_with_number_as_array = list(set(list_data))\n    result = 1\n    for number in list_with_number_as_array:\n        result *= number\n    return result\n    \n    \nprint(unique_product([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3]))\n",
        "num_ids": 86
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from collections import Counter\n    unique_product = Counter(list_data)\n    print(\"product = {}\".format(unique_product))\n    return unique_product\n",
        "num_ids": 40
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    count = 0\n    for x in list_data:\n        if x not in list_data:\n            print(\"not in list\")\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_list = []\n    for data in list_data:\n        product_list.append(data[0]*data[1])\n    return product_list\n",
        "num_ids": 41
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #dictionary\n    unique_list = []\n",
        "num_ids": 14
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for number in list_data:\n        if number not in unique_list:\n            unique_list.append(number)\n    return unique_list\n",
        "num_ids": 44
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for i in list_data:\n        if i not in list_data[0]:\n            list_data.remove(i)\n            list_data.append(i)\n    return list_data\n",
        "num_ids": 49
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*(math.pi*r**2))/3\n",
        "num_ids": 19
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n",
        "num_ids": 14
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5 * (r * h)\n",
        "num_ids": 14
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 4 * (r * h)\n    print(\"The surface area is\",surfacearea,\"meters^2.\")\n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    surfacearea = (4 * pi) * (r * r)\n    print(\"The surface area is\",surfacearea,\"meters^2.\")\n    \ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function that calculates the surface area of a triangle.\n    '''\n    #print(\"The surface area of a triangle is\",3 * (a * b) * c, \"meters^2.\")\n    surfacearea = ((3 * a) * b) * c\n    print(\"The surface area of a triangle is\",surfacearea,\"meters^2.\")\n    \ndef surfacearea_parallelogram(a,b,c):\n    '''\n    Write a function that calculates the surface area of a parallelogram.\n    '''\n    #print(\"The surface area of a parallelogram is\",3 * (a * b) * c, \"meters^2.\")\n    surfacearea = ((3 * a) * (b) * c)\n    print(\"The surface area of a parallelogram is\",surfacearea,\"meters^2.\")\n    \ndef main():\n    \"\"\"\n    Contains all the main program functions.\n    \"\"\"\n    #Declare a variable to represent\n    #the current value of the user's\n    #input.\n    user_input = input(\"Enter the radius of a circle: \")\n    #Use the user input to determine\n    #the surface area of a circle.\n    if user_input.isdigit():\n        surfacearea = surfacearea_circle(user_input)\n    else:\n        print(\"This input is not a valid number.\")\n    #Use the user input to determine\n    #the surface area of a circle.\n    if user_input.isdigit():\n        surfacearea = surfacearea_circle(int(user_input),int(user_input))\n    else:\n        print(\"This input is not a valid number.\")\n    #Use the user input to determine\n    #the surface area of a triangle.\n    if user_input.isdigit():\n        surfacearea = surfacearea_triangle(int(user_input),int(user_input),int(user_input))\n    else:\n        print(\"This input is not a valid number.\")\n    #Use the user input to determine\n    #the surface area of a triangle.\n    if user_input.isdigit():\n        surfacearea = surfacearea_triangle(int(user_input),int(user_input),int(user_input))\n    else:\n        print(\"This input is not a valid number.\")\n    #Use the user input to determine\n    #the surface area of a triangle.\n    if user_input.isdigit():\n        surfacearea = surfacearea_parallelogram(int(user_input),int(user_input),int(user_input))\n    else:\n        print(\"This input is not a valid number.\")\n    #Display the result.\n    print(\"The surface area of a circle is\",surfacearea,\"meters^2.\")\n    print(\"The surface area of a triangle is\",surfacearea,\"meters^2.\")\n    print(\"The surface area of a parallelogram is\",surfacearea,\"meters^2.\")\n    print(\"The surface area of a circle is\",surfacearea,\"meters^2.\")\n    print(\"You have successfully entered\",user_input,\"in a correct format.\")\n    print(\"Thank you for using our program\")\n    \nmain()",
        "num_ids": 611
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    #Calculate the semi-perimeter and the height of the cylinder\n    sep = 2 * (r + h)\n    height = math.sqrt(1 + r**2 - 2*r*h)\n    #Find the volume\n    volume = math.pi * (sep**2) * h\n    #Find the area\n    area = math.pi * (sep**2) * r\n    #Return the values\n    return volume,area\n",
        "num_ids": 112
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h*2\n",
        "num_ids": 10
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # assume r = [r_l, r_u]\n    # assume h = [h_l, h_u]\n    # assume r = sqrt(r_l**2 + r_u**2)\n    # assume h = sqrt(h_l**2 + h_u**2)\n    return (r[0]*(h[0]-h[1]))+((r[1]-r[0])*(h[1]-h[0]))\n",
        "num_ids": 114
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return h*(r**2)\n",
        "num_ids": 12
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<=len(B): return False\n    return True if all(A[i]==B[i] for i in range(len(A))) else False\n",
        "num_ids": 44
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def sub_list(A,B):\n        l1 = []\n        for i in range(len(A)):\n            for j in range(len(B)):\n                if A[i] == B[j]:\n                    l1.append(A[i])\n        return l1\n",
        "num_ids": 71
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (A[0] < B[0]): \n        return True \n    elif (A[-1] < B[-1]): \n        return True \n    else: \n        return False \n",
        "num_ids": 55
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code goes here\n    return A == B\n",
        "num_ids": 15
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(type(A) == type(B)):\n        return B in A\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    if len(A)<len(B):\n        return False\n    else:\n        for i in range(len(A)):\n            if A[i]==B[i]:\n                return True\n        return False\n    \n    \n    \n    ",
        "num_ids": 66
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == A:\n        return True\n    elif A.index(B[0]) < A.index(B[1]):\n        return is_Sub_Array(A[:A.index(B[0])], B)\n    else:\n        return is_Sub_Array(B[:B.index(B[1])], A)\n",
        "num_ids": 85
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    from collections import defaultdict\n    # create the default dictionary to store the count of \n    # elements in each list.\n    d = defaultdict(int)\n",
        "num_ids": 39
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B[0]<=len(A) and B[-1]>=len(A):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A: \n        return True\n    return False\n",
        "num_ids": 18
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number into int \n    n = int(n)\n    result = 1\n    i = 1\n    while i <= n: \n        result = result * i \n        i += 1\n    return result \n",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while (n!= 0):\n        fact = fact * n\n        n = n - 1\n    return fact",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return n % 10 * factorial(n-1)\n        \n        \n    # result = (n-1)! / (n-1)! * (n-1)!\n    # return result\n",
        "num_ids": 77
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n*last_Digit_Factorial(n-1) \n",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n",
        "num_ids": 46
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    lastDigit = 0\n    factorial = 1\n    \n    for i in range(1, n + 1):\n        factorial = factorial * i\n        \n        if (factorial > n):\n            break\n        \n        lastDigit = n % factorial\n        n = factorial\n    \n    return lastDigi",
        "num_ids": 80
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    lastDigit = 1\n    i = 1\n    while i <= n:\n        lastDigit *= i\n        i += 1\n    return lastDigit\n",
        "num_ids": 40
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)",
        "num_ids": 45
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 46
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    f = 0\n    while n: \n        f = f * n % 10\n        n = n // 10\n    return f \n",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return([list(list1[i] + list2[i] + list3[i]) for i in range(len(list1))])\n",
        "num_ids": 36
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # For each list in the list\n    for i in range(0,len(list1)):\n        # For each element in the list\n        for j in range(0,len(list2)):\n            # Join the lists in the list\n            list3.append(list1[i] + list2[j])\n    return list3\n",
        "num_ids": 82
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1_copy = list1[:]\n    list2_copy = list2[:]\n    list3_copy = list3[:]\n",
        "num_ids": 35
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # define variables to store the interleaved lists\n    flat_list = []\n    \n    # iterate through the lists\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2[i])):\n            for k in range(0,len(list3[i][j])):\n                # add each value of list2[i][j][k] to the final list\n                flat_list.append(list2[i][j][k])\n                \n    # return the final list of the interleaved lists\n    return flat_list",
        "num_ids": 141
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    temp_list1=[]\n    temp_list2=[]\n    temp_list3=[]\n    while len(list1)>0 or len(list2)>0 or len(list3)>0:\n        if len(list1)>0:\n            temp_list1.append(list1.pop(0))\n        if len(list2)>0:\n            temp_list2.append(list2.pop(0))\n        if len(list3)>0:\n            temp_list3.append(list3.pop(0))\n    return temp_list1+temp_list2+temp_list3\n",
        "num_ids": 151
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))",
        "num_ids": 17
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Your code here\n    i=0\n    while i<len(list1):\n        temp=list1[i]\n        j=0\n        while j<len(list2):\n            if temp[j]!=list2[j][j]:\n                break\n            j+=1\n        list1[i]=list2[j]\n        i+=1\n    return list1\n",
        "num_ids": 93
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # Method 1:\n    # def interleave(list1,list2,list3):\n    #     return [list1[0]+list2[0]+list3[0], list1[1]+list2[1]+list3[1], list1[2]+list2[2]+list3[2]]\n    # return interleave(list1,list2,list3)\n",
        "num_ids": 93
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list3[0]] + list3[1:] + list1[1:] + list2[1:] + list3[1:]\n",
        "num_ids": 35
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = tuple(test_tup1)\n    b = tuple(test_tup2)\n    i, j = 0, 0\n    found = set()\n    while i < len(a) and j < len(b):\n        if a[i]!= b[j]:\n            found.add(a[i])\n            i += 1\n            j += 1\n        i += 1\n        j += 1\n    return found\n",
        "num_ids": 104
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #code here\n    dissimilar=[]\n    for i in range(0,len(test_tup1)):\n        for j in range(0,len(test_tup2)):\n            if test_tup1[i]!=test_tup2[j]:\n                dissimilar.append(test_tup1[i])\n                break\n    return dissimilar\n",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #get all the tuples from the tuple\n    tuples = zip(test_tup1, test_tup2)\n    #create a list of tuples which is only the original tuples, not the list of tuples of tuples\n    #this is to make it easier to search for similar elements\n    #not using zip method\n    dissimilar_tuples = [tup for tup in tuples if tup not in test_tup1 and tup not in test_tup2]\n",
        "num_ids": 118
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # TODO: Write the function\n    # input : test_tup1, test_tup2\n    # output : (list of tuples)\n    test_tup1_list = test_tup1[:]\n    test_tup2_list = test_tup2[:]\n    #print(test_tup1_list, test_tup2_list)\n",
        "num_ids": 93
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n",
        "num_ids": 34
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    result_list = []\n    list_1 = list(set(test_tup1))\n    list_2 = list(set(test_tup2))\n    for item in list_1:\n        if item not in list_2:\n            result_list.append(item)\n    for item in list_2:\n        if item not in list_1:\n            result_list.append(item)\n    return result_list\n",
        "num_ids": 111
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(test_tup1)):\n        list1.append(test_tup1[i][0])\n        list2.append(test_tup2[i][0])\n    diff = set(list1) - set(list2)\n    return diff\n",
        "num_ids": 83
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    diss_tup = []\n    for i in test_tup2:\n        for j in range(len(test_tup1)):\n            if i not in test_tup1[j]:\n                diss_tup.append(i)\n    return diss_tup\n    \ndef find_similar(test_tup1, test_tup2):\n    '''\n    Write a function to find the similar elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    similar_tup = []\n    for i in test_tup1:\n        for j in range(len(test_tup2)):\n            if i == test_tup2[j]:\n                similar_tup.append(i)\n    return similar_tup\n",
        "num_ids": 100
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    index = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                index.append(i)\n                break\n",
        "num_ids": 71
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def func():\n        even = {'a': 2, 'b': 3, 'c': 4}\n        odd = {'d': 4, 'e': 5, 'f': 6}\n        result = odd - even\n        return result\n    result = even_fnc(test_tuple)\n    if result is None:\n        result = func()\n        return result\n    else:\n        result = []\n        for el in result:\n            if 'b' in el:\n                pass\n            else:\n                result.append(el)\n        return result\n",
        "num_ids": 133
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = test_tuple[0] \n    even_list = [x for x in even_list if x % 2 == 0] \n    even_fnc(even_list)\n    \n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove odd elements in the nested mixed tuple.\n    '''\n    odd_list = test_tuple[0] \n    odd_list = [x for x in odd_list if x % 2!= 0] \n    odd_fnc(odd_list)\n    \n    \ndef even_list_first_elements(test_tuple): \n    '''\n    Write a function to get first elements of the tuple and put them into a list.\n    '''\n    even_list = test_tuple[0]\n    even_list = [x for x in even_list if x % 2 == 0] \n    return even_list \n    \n    \ndef odd_list_first_elements(test_tuple): \n    '''\n    Write a function to get first elements of the tuple and put them into a list.\n    '''\n    odd_list = test_tuple[0]\n    odd_list = [x for x in odd_list if x % 2!= 0] \n    return odd_list \n    \n    \ndef odd_list_first_elements_odd_elements(test_tuple): \n    '''\n    Write a function to get first elements of the tuple and put them into a list.\n    '''\n    odd_list = test_tuple[0]\n    odd_list = [x for x in odd_list if x % 2!= 0] \n    odd_list = odd_list + odd_list \n    return odd_list \n    \n    \n    \ndef odd_list_second_elements(test_tuple): \n    '''\n    Write a function to get second elements of the tuple and put them into a list.\n    '''\n    odd_list = test_tuple[0]\n    odd_list = [x for x in odd_list if x % 2!= 0] \n    return odd_list \n    \n    \ndef odd_list_second_elements_odd_elements(test_tuple): \n    '''\n    Write a function to get second elements of the tuple and put them into a list.\n    '''\n    odd_list = test_tuple[0]\n    odd_list = [x for x in odd_list if x % 2!= 0] \n    odd_list = odd_list + odd_list \n    return odd_list \n    \n    \n    \ndef odd_list_first_elements_first_elements(test_tuple): \n    '''\n    Write a function to get first elements of the tuple and put them into a list.\n    '''\n    odd_list = test_tuple[0]\n    odd_list = [x for x in odd_list if x % 2 == 0] \n    return odd_list \n    \n    \ndef odd_list_second_elements_second_elements(test_tuple): \n    '''\n    Write a function to get second elements of the tuple and put them into a list.\n    '''\n    odd_list = test_tuple[0]\n    odd_list = [x for x in odd_list if x % 2!= 0] \n    return odd_list \n    \n    \n    \ndef even_list_first_elements_second_elements(test_tuple): \n    '''\n    Write a function to get first elements of the tuple and put them into a list.\n    '''\n    even_list = test_tuple[0]\n    even_list = [x for x in even_list if x % 2 == 0] \n    return even_list \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1134
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_ele.append(element)\n    return tuple(even_ele)\n",
        "num_ids": 48
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    list_1 = []\n    for ele in test_tuple: \n        if ele == even_fnc: \n            list_1.append(ele) \n        if len(list_1) >= 2: \n            if list_1[-2] == even_fnc: \n                list_1.pop(-2)\n    return tuple(list_1)\n",
        "num_ids": 91
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple\n    even_tuple_len = len(even_tuple)\n    for i in range(even_tuple_len):\n        try:\n            if even_fnc(even_tuple[i][0], even_tuple[i][1]) == True:\n                even_tuple[i][0] = even_tuple[i][0] - 1\n        except:\n            pass\n    return even_tuple\n",
        "num_ids": 113
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple[0], test_tuple[1])\n    return (test_tuple[0], test_tuple[1])\n",
        "num_ids": 41
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    for x in range(len(even_tuple)):\n        if even_fnc(even_tuple[x]):\n            if x == 0: \n                new_even_tuple = even_tuple[x+1:]\n                new_even_tuple.insert(0, even_fnc(even_tuple[0]))\n                even_tuple = new_even_tuple\n            else:\n                new_even_tuple = even_tuple[:x] + even_tuple[x+1:]\n                new_even_tuple.insert(0, even_fnc(even_tuple[0]))\n                even_tuple = new_even_tuple\n    return even_tuple",
        "num_ids": 188
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def odd_ele(test_tuple, odd_fnc):\n        '''\n        Write a function to remove uneven elements in the nested mixed tuple.\n        '''\n        def even_odd_ele(test_tuple, even_odd_fnc):\n            '''\n            Write a function to remove uneven elements in the nested mixed tuple.\n            '''\n            def odd_even_ele(test_tuple, odd_even_fnc):\n                '''\n                Write a function to remove uneven elements in the nested mixed tuple.\n                '''\n                def even_odd_odd_ele(test_tuple, even_odd_odd_fnc):\n                    '''\n                    Write a function to remove uneven elements in the nested mixed tuple.\n                    '''\n                    odd_even_odd_fnc(test_tuple, even_odd_odd_fnc)\n                    odd_even_odd_fnc(test_tuple, even_odd_odd_fnc)\n                \n                odd_even_odd_fnc = lambda test_tuple, odd_even_odd_fnc: odd_even_odd_fnc(test_tuple, even_odd_odd_fnc)\n                \n                odd_even_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_fnc: odd_even_odd_odd_fnc(test_tuple, even_odd_odd_odd_fnc)\n                \n                even_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_fnc: odd_even_odd_odd_fnc(test_tuple, even_odd_odd_odd_fnc)\n                \n                even_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_fnc: odd_even_odd_odd_fnc(test_tuple, even_odd_odd_odd_fnc)\n                \n                even_odd_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_fnc: odd_even_odd_odd_odd_fnc(test_tuple, even_odd_odd_odd_odd_fnc)\n                \n                odd_even_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_odd_fnc: odd_even_odd_odd_odd_odd_fnc(test_tuple, odd_even_odd_odd_odd_odd_fnc)\n                \n                odd_even_odd_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_odd_odd_fnc: odd_even_odd_odd_odd_odd_odd_fnc(test_tuple, odd_even_odd_odd_odd_odd_odd_fnc)\n                \n                odd_even_odd_odd_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_fnc: odd_even_odd_odd_odd_odd_odd_odd_fnc(test_tuple, odd_even_odd_odd_odd_odd_odd_odd_fnc)\n                \n                odd_even_odd_odd_odd_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_odd_fnc: odd_even_odd_odd_odd_odd_odd_odd_odd_fnc(test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_fnc)\n                \n                odd_even_odd_odd_odd_odd_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc: odd_even_odd_odd_odd_odd_odd_odd_odd_odd_fnc(test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_odd_fnc)\n                \n                odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc: odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc(test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc)\n                \n                odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc = lambda test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc: odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_fnc(test_tuple, odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd",
        "num_ids": 1833
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_fnc(i)\n        else:\n            odd_fnc(i)\n",
        "num_ids": 43
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for value in test_tuple:\n        if value % 2 == 0: \n            even_fnc(value)\n        else: \n            even_fnc(value)\n",
        "num_ids": 45
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Edge is passed as a string of letters\n    #Height is passed as a string of letters\n    #The function should return the area of the pyramid with height Height\n    #Any character other than a letter should be ignored\n    #Assume the edge and height are valid\n    \n    #For example if edge is 'a' then height is 'a'\n    #Assume the base is 'b'\n    #Then return the area of square with base 'b'\n",
        "num_ids": 106
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h=s\n    h1=h\n    h2=h\n    h3=h\n    h4=h\n    h5=h\n    h6=h\n    h7=h\n    h8=h\n    h9=h\n    h10=h\n    h11=h\n    h12=h\n    h13=h\n    h14=h\n    h15=h\n    h16=h\n    h17=h\n    h18=h\n    h19=h\n    h20=h\n    h21=h\n    h22=h\n    h23=h\n    h24=h\n    h25=h\n    h26=h\n    h27=h\n    h28=h\n    h29=h\n    h30=h\n    h31=h\n    h32=h\n    h33=h\n    h34=h\n    h35=h\n    h36=h\n    h37=h\n    h38=h\n    h39=h\n    h40=h\n    h41=h\n    h42=h\n    h43=h\n    h44=h\n    h45=h\n    h46=h\n    h47=h\n    h48=h\n    h49=h\n    h50=h\n    h51=h\n    h52=h\n    h53=h\n    h54=h\n    h55=h\n    h56=h\n    h57=h\n    h58=h\n    h59=h\n    h60=h\n    h61=h\n    h62=h\n    h63=h\n    h64=h\n    h65=h\n    h66=h\n    h67=h\n    h68=h\n    h69=h\n    h70=h\n    h71=h\n    h72=h\n    h73=h\n    h74=h\n    h75=h\n    h76=h\n    h77=h\n    h78=h\n    h79=h\n    h80=h\n    h81=h\n    h82=h\n    h83=h\n    h84=h\n    h85=h\n    h86=h\n    h87=h\n    h88=h\n    h89=h\n    h90=h\n    h91=h\n    h92=h\n    h93=h\n    h94=h\n    h95=h\n    h96=h\n    h97=h\n    h98=h\n    h99=h\n    h100=h\n    h101=h\n    h102=h\n    h103=h\n    h104=h\n    h105=h\n    h106=h\n    h107=h\n    h108=h\n    h109=h\n    h110=h\n    h111=h\n    h112=h\n    h113=h\n    h114=h\n    h115=h\n    h116=h\n    h117=h\n    h118=h\n    h119=h\n    h120=h\n    h121=h\n    h122=h\n    h123=h\n    h124=h\n    h125=h\n    h126=h\n    h127=h\n    h128=h\n    h129=h\n    h130=h\n    h131=h\n    h132=h\n    h133=h\n    h134=h\n    h135=h\n    h136=h\n    h137=h\n    h138=h\n    h139=h\n    h140=h\n    h141=h\n    h142=h\n    h143=h\n    h144=h\n    h145=h\n    h146=h\n    h147=h\n    h148=h\n    h149=h\n    h150=h\n    h151=h\n    h152=h\n    h153=h\n    h154=h\n    h155=h\n    h156=h\n    h157=h\n    h158=h\n    h159=h\n    h160=h\n    h161=h\n    h162=h\n    h163=h\n    h164=h\n    h165=h\n    h166=h\n    h167=h\n    h168=h\n    h169=h\n    h170=h\n    h171=h\n    h172=h\n    h173=h\n    h174=h\n    h175=h\n    h176=h\n    h177=h\n    h178=h\n    h179=h\n    h180=h\n    h181=h\n    h182=h\n    h183=h\n    h184=h\n    h185=h\n    h186=h\n    h187=h\n    h188=h\n    h189=h\n    h190=h\n    h191=h\n    h192=h\n    h193=h\n    h194=h\n    h195=h\n    h196=h\n    h197=h\n    h198=h\n    h199=h\n    h200=h\n    h201=h\n    h202=h\n    h203=h\n    h204=h\n    h205=h\n    h206=h\n    h207=h\n    h208=h\n    h209=h\n    h210=h\n    h211=h\n    h212=h\n    h213=h\n    h214=h\n    h215=h\n    h216=h\n    h217=h\n    h218=h\n    h219=h\n    h220=h\n    h221=h\n    h222=h\n    h223=h\n    h224=h\n    h225=h\n    h226=h\n    h227=h\n    h228=h\n    h229=h\n    h230=h\n    h231=h\n    h232=h\n    h233=h\n    h234=h\n    h235=h\n    h236=h\n    h237=h\n    h238=h\n    h239=h\n    h240=h\n    h241=h\n    h242=h\n    h243=h\n    h244=h\n    h245=h\n    h246=h\n    h247=h\n    h248=h\n    h249=h\n    h250=h\n    h251=h\n    h252=h\n    h253=h\n    h254=h\n    h255=h\n    h256=h\n    h257=h\n    h258=h\n    h259=h\n    h260=h\n    h261=h\n    h262=h\n    h263=h\n    h264=h\n    h265=h\n    h266=h\n    h267=h\n    h268=h\n    h269=h\n    h270=h\n    h271=h\n    h272=h\n    h273=h\n    h274=h\n    h275=h\n    h276=h\n    h277=h\n    h278=h\n    h279=h\n    h280=h\n    h281=h\n    h282=h\n    h283=h\n    h284=h\n    h285=h\n    h286=h\n    h287=h\n    h288=h\n    h289=h\n    h290=h\n    h291=h\n    h292=h\n    h293=h\n    h294=h\n    h295=h\n    h296=h\n    h297=h\n    h298=h\n    h299=h\n    h300=h\n    h301=h\n    h302=h\n    h303=h\n    h304=h\n    h305=h\n    h306=h\n    h307=h\n    h308=h\n    h309=h\n    h310=h\n    h311=h\n    h312=h\n    h313=h\n    h314=h\n    h315=h\n    h316=h\n    h317=h\n    h318=h\n    h319=h\n    h320=h\n    h321=h\n    h322=h\n    h323=h\n    h324=h\n    h325=h\n    h326=h\n    h327=h\n    h328=h\n    h329=h\n    h330=h\n    h331=h\n    h332=h\n    h333=h\n    h33",
        "num_ids": 2008
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    n = 1\n    while s > 0:\n        n = n * 2 + 1\n        s -= (n - 1)\n        area = area + (n * (n - 1) // 2)\n    return area\n",
        "num_ids": 58
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    '''\n    This function should accept a base edge, height, as an argument.\n    '''\n    return 1/3*(b**2) * s**2\n",
        "num_ids": 18
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (2*b)/s\n    return a\nprint(surface_Area(2,4))\n",
        "num_ids": 27
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b**2 + s**2",
        "num_ids": 11
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * s) / 2\n",
        "num_ids": 12
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    result=0\n    for i in range(s):\n        result += (b**2*i)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A=0\n    for k in range(0,b+1):\n        A=A+s**2\n    return A\n",
        "num_ids": 33
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print('\\n')\n    print('\\t\\t\\t\\tPython Code By Anastasia')\n    print('\\t\\t\\t\\t', '-', 'This code is created by Anastasia.Rajesh')\n    print('\\t\\t\\t\\t-', '#', '\\n')\n    print('\\t\\t\\t\\tEnter the base edge of your pyramid:')\n    base = int(input('\\t\\t\\t\\t- Please enter the base edge of your pyramid: '))\n    print('\\t\\t\\t\\tEnter the height of your pyramid:')\n    height = int(input('\\t\\t\\t\\t- Please enter the height of your pyramid: '))\n    print('\\t\\t\\t\\tEnter the sum of the pyramid:')\n    sum = base * height\n    print('\\t\\t\\t\\t', '-', '\\n')\n    print('\\t\\t\\t\\t', '=', '\\n')\n    print('\\t\\t\\t\\t','sum =', '\\n')\n    print('\\t\\t\\t\\t','sum =', sum, '\\n')\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', 'Your python code here is written by Anastasia.Rajesh.\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', 'The final code is written by Anastasia.Rajesh.\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', 'Pyramid surface area of a square pyramid is :', sum)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', 'The final code is written by Anastasia.Rajesh.\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', 'Pyramid surface area of a pyramid is :', sum)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', 'Pyramid surface area of a pyramid is :', sum)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', 'Pyramid surface area of a pyramid is :', sum)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('\\t\\t\\t\\t', '-' * 20)\n    print('\\t\\t\\t\\t', '\\n')\n    print('",
        "num_ids": 2005
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1.keys():\n        if dict1[key] == '':\n            return True\n        else:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key] == '':\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None or len(dict1) == 0:\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Subtract 1 from n if there are negative numbers\n    if num < 0:\n        num -= 1\n    if num == 0:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n",
        "num_ids": 57
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    number = [1]\n    i = 2\n    for i in range(num):\n        n = number[i]\n        n1 = n + number[i+1]\n        number.append(n1)\n    print(number[-1])\n",
        "num_ids": 62
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    if num==0:\n        return 0\n    if num==1:\n        return 1\n    if num==2:\n        return 1\n    if num==3:\n        return 2\n    if num==4:\n        return 3\n    if num==5:\n        return 4\n    if num==6:\n        return 5\n    if num==7:\n        return 6\n    if num==8:\n        return 7\n    if num==9:\n        return 8\n    if num==10:\n        return 9\n    if num==11:\n        return 10\n    if num==12:\n        return 11\n    if num==13:\n        return 12\n    if num==14:\n        return 13\n    if num==15:\n        return 14\n    if num==16:\n        return 15\n    if num==17:\n        return 16\n    if num==18:\n        return 17\n    if num==19:\n        return 18\n    if num==20:\n        return 19\n    if num==21:\n        return 20\n    if num==22:\n        return 21\n    if num==23:\n        return 22\n    if num==24:\n        return 23\n    if num==25:\n        return 24\n    if num==26:\n        return 25\n    if num==27:\n        return 26\n    if num==28:\n        return 27\n    if num==29:\n        return 28\n    if num==30:\n        return 29\n    if num==31:\n        return 30\n    if num==32:\n        return 31\n    if num==33:\n        return 32\n    if num==34:\n        return 33\n    if num==35:\n        return 34\n    if num==36:\n        return 35\n    if num==37:\n        return 36\n    if num==38:\n        return 37\n    if num==39:\n        return 38\n    if num==40:\n        return 39\n    if num==41:\n        return 40\n    if num==42:\n        return 41\n    if num==43:\n        return 42\n    if num==44:\n        return 43\n    if num==45:\n        return 44\n    if num==46:\n        return 45\n    if num==47:\n        return 46\n    if num==48:\n        return 47\n    if num==49:\n        return 48\n    if num==50:\n        return 49\n    if num==51:\n        return 50\n    if num==52:\n        return 51\n    if num==53:\n        return 52\n    if num==54:\n        return 53\n    if num==55:\n        return 54\n    if num==56:\n        return 55\n    if num==57:\n        return 56\n    if num==58:\n        return 57\n    if num==59:\n        return 58\n    if num==60:\n        return 59\n    if num==61:\n        return 60\n    if num==62:\n        return 61\n    if num==63:\n        return 62\n    if num==64:\n        return 63\n    if num==65:\n        return 64\n    if num==66:\n        return 65\n    if num==67:\n        return 66\n    if num==68:\n        return 67\n    if num==69:\n        return 68\n    if num==70:\n        return 69\n    if num==71:\n        return 70\n    if num==72:\n        return 71\n    if num==73:\n        return 72\n    if num==74:\n        return 73\n    if num==75:\n        return 74\n    if num==76:\n        return 75\n    if num==77:\n        return 76\n    if num==78:\n        return 77\n    if num==79:\n        return 78\n    if num==80:\n        return 79\n    if num==81:\n        return 80\n    if num==82:\n        return 81\n    if num==83:\n        return 82\n    if num==84:\n        return 83\n    if num==85:\n        return 84\n    if num==86:\n        return 85\n    if num==87:\n        return 86\n    if num==88:\n        return 87\n    if num==89:\n        return 88\n    if num==90:\n        return 89\n    if num==91:\n        return 90\n    if num==92:\n        return 91\n    if num==93:\n        return 92\n    if num==94:\n        return 93\n    if num==95:\n        return 94\n    if num==96:\n        return 95\n    if num==97:\n        return 96\n    if num==98:\n        return 97\n    if num==99:\n        return 98\n    if num==100:\n        return 99\n    if num==101:\n        return 100\n    if num==102:\n        return 101\n    if num==103:\n        return 102\n    if num==104:\n        return 103\n    if num==105:\n        return 104\n    if num==106:\n        return 105\n    if num==107:\n        return 106\n    if num==108:\n        return 107\n    if num==109:\n        return 108\n    if num==110:\n        return 109\n    if num==111:\n        return 110\n    if num==112:\n        return 111\n    if num==113:\n        return 112\n    if num==114:\n        return 113\n    if num==115:\n        return 114\n    if num==116:\n        return 115\n    if num==117:\n        return 116\n    if num==118:\n        return 117\n    if num==119:\n        return 118\n    if num==120:\n        return 119\n    if num==121:\n        return 120\n    if num==122:\n        return 121\n    if num==123:\n        return 122\n    if num==124:\n        return 123\n    if num==125:\n        return 124\n    if num==126:\n        return 125\n    if num==127:\n        return 126\n    if num==128:\n        return 127\n    if num==129:\n        return 128\n    if num==130:\n        return 129\n    if num==131:\n        return 130\n    if num==132:\n        return 131\n    if num==133:\n        return 132\n    if num==134:\n        return 133\n    if num==135:\n        return 134\n    if num==136:\n        return 135\n    if num==137:\n        return 136\n    if num==138:\n        return 137\n    if num==139:\n        return 138\n    if num==140:\n        return 139\n    if num==141:\n        return 140\n    if num==142:\n        return 141\n    if num==143:\n        return 142\n    if num==144:\n        return 143\n    if num==145:\n        return 144\n    if num==146:\n        return 145\n    if num==147:\n        return 146\n    if num==148:\n        return 147\n    if num==149:\n        return 148\n    if num==150:\n        return 149\n    if num==151:\n        return 150\n    if num==152:\n        return 151\n    if num==153:\n        return 152\n    if num==154:\n        return 153\n    if num==155:\n        return 154\n    if num==156:\n        return 155\n    if num==157:\n        return 156\n    if num==158:\n        return 157\n    if num==159:\n        return 158\n    if num==160:\n        return 159\n    if num==161:\n        return 160\n    if num==162:\n        return 161\n    if num==163:\n        return 162\n    if num==164:\n        return 163\n    if num==165:\n        return 164\n    if num==166:\n        return 165\n    if num==167:\n        return 166\n    if num==168:\n        return 167\n    if num==169:\n        return 168\n    if num==170:\n        return 169\n    if num==171:\n        return 170\n    if num==172:\n        return 171\n    if num==173:\n        return 172\n    if num==174:\n        return 173\n    if num==175:\n        return 174\n    if num==176:\n        return 175\n    if num==177:\n        return 176\n    if num==178:\n        return 177\n    if num==179:\n        return 178\n    if num==180:\n        return 179\n    if num==181:\n        return 180\n    if num==182:\n        return 181\n",
        "num_ids": 2019
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # if num == 0:\n    #     return 1\n    # if num == 1:\n    #     return 2\n    # if num == 2:\n    #     return 3\n    # return catalan_number(num - 1) + catalan_number(num - 2) + catalan_number(num - 3)\n    # return catalan_number(num - 1) + catalan_number(num - 2) + catalan_number(num - 3) + catalan_number(num - 4)\n",
        "num_ids": 120
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num > 20:\n        raise ValueError('The given number is not valid.')\n",
        "num_ids": 23
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n",
        "num_ids": 31
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    sum=1\n    if num<0:\n        num=abs(num)\n        print(\"Number cannot be negative.\")\n    else:\n        for i in range(1,num+1):\n            sum=sum+i\n        return sum\n",
        "num_ids": 59
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n        ",
        "num_ids": 42
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan_number2(num)\n",
        "num_ids": 13
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    from math import factorial as fact\n",
        "num_ids": 11
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # for each word\n    for word in text.split(' '):\n        \n        # if word ends with ly, then get the start position\n        if word.endswith('ly'):\n            l_start = text.find('ly')\n            \n            # if start is not at the beginning of the text, then you are not looking for ly\n            if l_start!= -1:\n                break\n            \n            # if end is at the beginning of the text, that means we found ly, and we want to find the end of the text\n            else:\n                end = len(text)\n                \n                # find the next possible ly end\n                for i in range(l_start, end):\n                    \n                    # if ly ends with ly\n                    if text[i:i+3] == 'ly':\n                        l_end = i\n                        \n                        # if end of the text is after ly, then we found ly\n                        if l_end!= -1:\n                            break\n                        \n                        # if end of the text is after ly, then we found ly\n                        else:\n                            # find the next possible ly end\n                            for i in range(l_start, end):\n                                \n                                # if ly ends with ly\n                                if text[i:i+3] == 'ly':\n                                    l_end = i\n                                    \n                                    # if end of the text is after ly, then we found ly\n                                    if l_end!= -1:\n                                        break\n                                    \n                                    # if end of the text is after ly, then we found ly\n                                    else:\n                                        # find the next possible ly end\n                                        for i in range(l_start, end):\n                                            \n                                            # if ly ends with ly\n                                            if text[i:i+3] == 'ly':\n                                                l_end = i\n                                                break\n                                    \n                                            # if ly ends with ly, then we found ly\n                                            else:\n                                                # find the next possible ly end\n                                                for i in range(l_start, end):\n                                                    \n                                                    # if ly ends with ly\n                                                    if text[i:i+3] == 'ly':\n                                                        l_end = i\n                                                        break\n                                                \n                                                    # if ly ends with ly, then we found ly\n                                                else:\n                                                    # find the next possible ly end\n                                                    for i in range(l_start, end):\n                                                        \n                                                        # if ly ends with ly\n                                                        if text[i:i+3] == 'ly':\n                                                            l_end = i\n                                                            break\n                                                \n                                                        # if ly ends with ly, then we found ly\n                                                        else:\n                                                            # find the next possible ly end\n                                                            for i in range(l_start, end):\n                                                                \n                                                                # if ly ends with ly\n                                                                if text[i:i+3] == 'ly':\n                                                                        l_end = i\n                                                                        break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                        if text[i:i+3] == 'ly':\n                                                                            l_end = i\n                                                                            break\n                                                            \n                                                            # if ly ends with ly, then we found ly\n                                                            else:\n                                                                # find the next possible ly end\n                                                                for i in range(l_start, end):\n                                                                        \n                                                                        # if ly ends with ly\n                                                                    ",
        "num_ids": 1969
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find the adverbs ending with ly and its positions\n    p = re.compile(r'ly\\d|ly\\(\\d\\)', re.IGNORECASE)\n    adverbs = []\n    for i, word in enumerate(re.split(p, text)):\n        if i == 0:\n            continue\n        if word[-1] == 'ly':\n            adverbs.append(word[:-1])\n    return adverbs\n",
        "num_ids": 107
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # First check if there are any adverbs\n    if re.search(r'([a-z]*ly|[a-z]*s|[a-z]*l|[a-z]*s|[a-z]*l|[a-z]*ly|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*s|[a-z]*s|[a-z]*l|[a-z]*l|[a-z]*l|[a-z]*ly|[a-z]*ly)',text):\n        adverb = text.split(r'[\\']')[-1]\n        adverb_pos = re.search(r'\\[(\\d+),(\\d+)]',adverb).group(2)+re.search(r'\\[(\\d+),(\\d+)]',adverb).group(1)\n        return adverb,adverb_pos\n    else:\n        return \"No adverb found\",0\ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    # First check if there are any adverbs\n    if re.search(r'([a-z]*ly|[a-z]*s|[a-z]*l|[a-z]*s|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*ly|[a-z]*s|[a-z]*s|[a-z]*l|[a-z]*l|[a-z]*l|[a-z]*ly|[a-z]*ly|[a-z]*ly)',text):\n        verb = text.split(r'[\\']')[-1]\n        verb_pos = re.search(r'\\[(\\d+),(\\d+)]',verb).group(2)+re.search(r'\\[(\\d+),(\\d+)]',verb).group(1)\n        return verb,verb_pos\n    else:\n        return \"No verb found\",0\n",
        "num_ids": 284
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    text = re.sub(r'ly', 'ly', text)\n    '''\n    The first time through the script, the pattern is 'ly' followed by 'ly'.\n    '''\n    # \n    # YOUR CODE HERE\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    \n    #\n    # You're done with the function, but it's going to be here, because you didn't\n    # include the print statement.\n    '''\n    Good explanation: You're done with the function, but it's going to be here.\n    '''\n    \n    pass\n    \n    \n    \ndef get_verb_count(text):\n    '''\n    You're done with the function, but it's going to be here, because you didn't\n    include the print statement.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    \n    \ndef find_transitivity(text):\n    '''\n    Write a function to find the first transitivity ending with ly and its positions in a given string.\n    '''\n    \n    text = re.sub(r'ly', 'ly', text)\n    '''\n    The first time through the script, the pattern is 'ly' followed by 'ly'.\n    '''\n    # \n    # YOUR CODE HERE\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    \n    #\n    # You're done with the function, but it's going to be here, because you didn't\n    # include the print statement.\n    '''\n    Good explanation: You're done with the function, but it's going to be here.\n    '''\n    \n    pass\n    \n    \ndef get_verb_count(text):\n    '''\n    You're done with the function, but it's going to be here, because you didn't\n    include the print statement.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    \n    \ndef find_inclusion(text):\n    '''\n    Write a function to find the first inclusion ending with ly and its positions in a given string.\n    '''\n    \n    text = re.sub(r'ly', 'ly', text)\n    '''\n    The first time through the script, the pattern is 'ly' followed by 'ly'.\n    '''\n    # \n    # YOUR CODE HERE\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    \n    #\n    # You're done with the function, but it's going to be here, because you didn't\n    # include the print statement.\n    '''\n    Good explanation: You're done with the function, but it's going to be here.\n    '''\n    \n    pass\n    \n    \ndef get_verb_count(text):\n    '''\n    You're done with the function, but it's going to be here, because you didn't\n    include the print statement.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    \n    \ndef get_transitivity(text):\n    '''\n    Write a function to find the first transitivity ending with ly and its positions in a given string.\n    '''\n    \n    text = re.sub(r'ly', 'ly', text)\n    '''\n    The first time through the script, the pattern is 'ly' followed by 'ly'.\n    '''\n    # \n    # YOUR CODE HERE\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    \n    #\n    # You're done with the function, but it's going to be here, because you didn't\n    # include the print statement.\n    '''\n    Good explanation: You're done with the function, but it's going to be here.\n    '''\n    \n    pass\n    \n    \ndef get_transitivity(text):\n    '''\n    You're done with the function, but it's going to be here, because you didn't\n    include the print statement.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    \n    \ndef get_key_word_list(text):\n    '''\n    Write a function to find the first keyword ending with ly and its positions in a given string.\n    '''\n    \n    text = re.sub(r'ly', 'ly', text)\n    '''\n    The first time through the script, the pattern is 'ly' followed by 'ly'.\n    '''\n    # \n    # YOUR CODE HERE\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    \n    #\n    # You're done with the function, but it's going to be here, because you didn't\n    # include the print statement.\n    '''\n    Good explanation: You're done with the function, but it's going to be here.\n    '''\n    \n    pass\n    \n    \ndef get_key_word_count(text):\n    '''\n    You're done with the function, but it's going to be here, because you didn't\n    include the print statement.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    \n    \ndef get_adverb(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    text = re.sub(r'ly', 'ly', text)\n    '''\n    The first time through the script, the pattern is 'ly' followed by 'ly'.\n    '''\n    # \n    # YOUR CODE HERE\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    \n    #\n    # You're done with the function, but it's going to be here, because you didn't\n    # include the print statement.\n    '''\n    Good explanation: You're done with the function, but it's going to be here.\n    '''\n    \n    pass\n    \n    \ndef get_adverb(text):\n    '''\n    You're done with the function, but it's going to be here, because you didn't\n    include the print statement.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    '''\n    The pattern 'ly' followed by 'ly' is 'ly'.\n    '''\n    \n    pass\n    \n    \ndef get_transitivity(text):\n    '''",
        "num_ids": 1
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly\\s?\\+\\s?'\n    adverbs = re.findall(pattern, text, re.MULTILINE)\n    adverbs = list(set(adverbs))\n    adverbs.remove('ly')\n    adverbs.sort()\n    print('adverbs', adverbs)\n    return adverbs\n",
        "num_ids": 81
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"(?:ly|e.g.)\"\n    regex += r\"(?:ve|vee|veen)\"\n    regex += r\"\\s*(\\d+\\w*)\\s*\"\n    regex += r\"(?:(?:[pP][eE][lL]?|[lL]?[fF][sS]?))\\s*\"\n    regex += r\"\\s*([0-9]+)\"\n    regex += r\"\\s*(ly|lye|lyen|lyt|lyte|lytee|lyttee)\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(ly|lye|lyen|lyt|lyte|lytee|lyttee)\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*([pP][eE][lL]?)\\s*\"\n    regex += r\"(?:[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?|[pP][eE][lL]?)\"\n    regex += r\"\\s*\"\n    regex += r\"([0-9]+)[pP][eE][lL]?\\s*\"\n    regex += r\"(?:[0-9]+)[pP][eE][lL]?\"\n    regex += r\"(?:[0-9]+)[pP][eE][lL]?\"\n    regex += r\"(?:[0-9]+)[pP][eE][lL]?\"\n    regex += r\"(?:[0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(\\+|-)\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*(\\+|-)\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*([pP][eE][lL]?)\\s*\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(\\+|-)\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*(\\+|-)\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(\\+|-)\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(\\+|-)\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*([pP][eE][lL]?)\\s*\"\n    regex += r\"\\s*\\+\"\n    regex += r\"\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)[pP][eE][lL]?\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(\\+|-)\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(\\+|-)\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*(\\+|-)\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\s*\\+\\s*([0-9]+)\"\n    regex += r\"\\",
        "num_ids": 2007
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    adverbs = ['al', 'a ', 'an', 'for', 'in', 'on', 'to', 'in', 'in', 'to', 'a', 'an', 'for', 'in', 'a', 'for', 'in', 'an', 'in', 'a']\n    for i in adverbs:\n        pattern = re.compile(f' {i}$')\n        matches = pattern.findall(text)\n        for match in matches:\n            result.append(match)\n            print(result)\n    return result\n",
        "num_ids": 133
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text)):\n        if text[i] == 'ly' and i!= 0 and text[i-1] == 'ly' and text[i-2] == 'ly':\n            result.append(i)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    last_ending = None\n    start = -1\n    for i, symbol in enumerate(text):\n        if symbol == 'y' or symbol == 'Y':\n            start = i\n            last_ending = symbol\n            break\n    if last_ending:\n        adverbs.append(last_ending)\n    \n    return adverbs\n",
        "num_ids": 87
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    final = re.findall('ly|ly|ly', text)\n    final2 = re.findall('ly', text)\n    final3 = re.findall('ly', text)\n    return final, final2, final3\n",
        "num_ids": 57
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # your code here\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappush(items,(-items[i][1],items[i][0]))\n    return items\n",
        "num_ids": 59
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(reverse=True,key=lambda x:x[1])\n    heapq.heapify(items)\n    for _ in range(n-1):\n        heapq.heappop(items)\n    return items\n",
        "num_ids": 60
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items=sorted(items,reverse=True)\n    return heapq.nlargest(n,items)\n",
        "num_ids": 28
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for item in items:\n        if item[1] >= n:\n            heapq.heappush(h,(item[1],item))\n    res = []\n    while len(h)!= 0:\n        for _ in range(n):\n            item = heapq.heappop(h)[1]\n            if not item in res:\n                heapq.heappush(res,item)\n        for item in res:\n            if item[1] >= n:\n                heapq.heappush(h,(item[1],item))\n    return res\n",
        "num_ids": 144
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    visited = {}\n    # create a visited dictionary\n    for i in range(n):\n        visited[heapq.heappop(heap)] = i\n    return visited\n",
        "num_ids": 74
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[1], item[0]))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    q = []\n    #make the heap, in decreasing order of cost\n    heapq.heapify(q)\n    #make list of the items to be put into the heap\n    items = list(items)\n    #set the items to be put into the heap\n    items.sort(reverse=True)\n    #we want to keep a number of items to be put\n    count = 1\n    #loop through the items until we get all the items\n    while len(items) > 0:\n        #pop the top of the heap\n        item = heapq.heappop(q)\n        #now check if the current item is in the heap.\n        if count <= n:\n            #if the current item is not in the heap,\n            #we need to put it into the heap\n            heapq.heappush(q,item)\n            #and add it to the count\n            count += 1\n        else:\n            break\n    return q\n",
        "num_ids": 223
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    res = []\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        if heap:\n            top = heapq.heappop(heap)\n            res.append(top[1])\n        else:\n            break\n    return res\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items, key=lambda k:k[1], reverse=True)[:n]\ndef most_frequent(items):\n    '''\n    Write a function to return the n most frequent items in a given dataset.\n    '''\n    res = {}\n    heap = []\n    heapq.heapify(heap)\n    for i in items:\n        if i[0] not in res.keys():\n            res[i[0]] = i[1]\n    return [i[0] for i in heapq.nlargest(len(res), res.items(), key=lambda k: k[1])]\ndef most_frequent2(items):\n    '''\n    Write a function to return the n most frequent items in a given dataset.\n    '''\n    res = {}\n    heap = []\n    heapq.heapify(heap)\n    for i in items:\n        if i[0] not in res.keys():\n            res[i[0]] = i[1]\n    return [i[0] for i in heapq.nlargest(len(res), res.items(), key=lambda k: k[1])]\ndef least_common_items(items):\n    '''\n    Write a function to return the n least common items in a given dataset.\n    '''\n    res = []\n    heap = []\n    heapq.heapify(heap)\n    for i in items:\n        if i[0] not in res.keys():\n            heapq.heappush(heap, (i[1], i[0]))\n    while heap:\n        i = heapq.heappop(heap)\n        res.append(i[0])\n    return res\ndef least_common_items2(items):\n    '''\n    Write a function to return the n least common items in a given dataset.\n    '''\n    return sorted(items, key=lambda k:k[1])[:len(items)]\ndef remove_item_from_list(items,i):\n    '''\n    Write a function to remove a given item from a given list.\n    '''\n    items.remove(items[i])\n    return items\ndef main():\n    items = [('red',5),('green',7),('blue',1),('yellow',5),('orange',4)]\n    print(\"\\nIn most frequent\")\n    print(most_frequent(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items2(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items2(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(\"\\nIn least common items\")\n    print(least_common_items(items))\n    print(",
        "num_ids": 1396
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[n])\n        heapq.heappush(heap,item[-1])\n",
        "num_ids": 50
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    item_dict = {}\n    for item in items:\n        heapq.heappush(heap,(item['price'],item['item_id']))\n    for _ in range(n):\n        item = heapq.heappop(heap)[1]\n        item_dict[item] = heapq.heappop(heap)[1]\n    print(item_dict)\n    print(item_dict[items[0]])\n",
        "num_ids": 115
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.sort()\n    return l[0:n] + l[n:]\n",
        "num_ids": 22
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # If the list is empty, return an empty list\n    if l == []:\n        return []\n    # If the list is not empty, split the list into n parts and add each sublist to the end of the list\n    elif n > 0:\n        split_index = n * 0.1\n        return [l[int(i * split_index):int((i * split_index) + split_index)] for i in range(n)]\n    else:\n        return l\n",
        "num_ids": 114
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l.split(n)\n    l.insert(0,l[0])\n    return l\n",
        "num_ids": 28
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n",
        "num_ids": 27
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n]\n",
        "num_ids": 11
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = len(l)\n    s = l[0:l1//n]\n    e = l[l1//n:]\n    return s,e\n",
        "num_ids": 41
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    print(l[:n])\n    print(l[n:])\n    print(l[:n])\n    return l[:n]+l[n:]\n",
        "num_ids": 41
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    k=len(l)\n    if k==1:\n        return l\n    elif k==n+1:\n        return l[:k-1]+l[k-1:]\n    else:\n        return l[:k-1]+l[k-n:]\n    \n    \nl=[1,2,3,4,5,6]\nn=2\nprint(split_Arr(l,n))\n",
        "num_ids": 102
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx) == 0:\n        return ()\n    else:\n        return tuple(listx)\n",
        "num_ids": 29
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for x in listx:\n        tuplex += (x,)\n    return tuplex\n",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listt = []\n    for x in listx:\n        listt.append(x)\n    return tuple(listt)\n",
        "num_ids": 33
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for item in listx:\n        tup += (item,)\n    return tup\n",
        "num_ids": 29
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for x in listx:\n        tup += (x, )\n    return tup\n",
        "num_ids": 30
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tupley = tuple(listx)\n    return tupley\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_generator(listx):\n    '''\n    Write a function to generate a list of all the integers from 0 to n.\n    '''\n    return [i for i in range(listx)]\n    \ndef list_to_string(listx):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return ''.join([str(i) for i in listx])\n    \ndef list_to_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if isinstance(listx,list):\n        listx = tuple(listx)\n    else:\n        listx = listx\n    return listx\n",
        "num_ids": 39
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    if n == 1:\n        return nums[0] - nums[0]\n    elif n == 0:\n        return nums[0]\n    else:\n        if nums[n-1] > nums[0]:\n            return nums[n-1] - nums[0]\n        else:\n            return nums[0] - nums[n-1]\n",
        "num_ids": 104
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    if diff > 0:\n        return diff\n    else:\n        return -1\n",
        "num_ids": 55
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    i = 0\n    largest = nums[0]\n    smallest = nums[0]\n",
        "num_ids": 28
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = sorted(nums)\n    if len(a) == 1:\n        return a[0] - a[0]\n    else:\n        l = 0\n        r = len(a) - 1\n        while l <= r:\n            temp = a[l] + a[r]\n            if temp > a[r]:\n                r -= 1\n            else:\n                l += 1\n        return a[r] - a[l]\n    # if r >= l:\n    #     return a[r] - a[l]\n    # else:\n    #     return a[l] - a[r]\n    # return a[r] - a[l]\n",
        "num_ids": 161
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = 0\n    min = 0\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n    return max - min\n",
        "num_ids": 71
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return abs(max(nums)-min(nums))\n",
        "num_ids": 17
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    return max(list(map(abs, nums)))\n",
        "num_ids": 18
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n=len(nums)\n    if n==0:\n        return None\n    low,high=0,n-1\n    if nums[0]<nums[n-1]:\n        low,high=0,n-1\n    if nums[n-1]>nums[0]:\n        low,high=n-1,n-1\n    mid=n//2\n    while low<=high:\n        if nums[mid]>nums[mid+1] and nums[mid]>nums[mid-1]:\n            return (mid+1,mid)\n        if nums[mid]<nums[mid+1]:\n            low=mid+1\n        if nums[mid]<nums[mid-1]:\n            mid=mid-1\n    return None\n",
        "num_ids": 194
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    return max_val - min_val\n",
        "num_ids": 77
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) <= 1:\n        return nums[0] - nums[-1]\n    smallest = nums[0]\n    biggest = nums[-1]\n    for n in nums[1:]:\n        smallest = min(smallest, n)\n        biggest = max(biggest, n)\n    return biggest - smallest\n",
        "num_ids": 90
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(1, a + 1):\n        if (a ** i == b) or (a ** i + b ** i == 1):\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            result.append(i)\n    for i in range(1, b + 1):\n        if b % i == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return True\n    elif b == 1:\n        return False\n    else:\n        for x in range(b):\n            if perfect_square_sum(a,x)!= False:\n                return True\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    if b == 0:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # define perfect squares\n    s = int(math.sqrt(a * b))\n    return s * s * s * s\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return abs(a-b) < int(math.sqrt(a)) and abs(a-b) < int(math.sqrt(b))\n",
        "num_ids": 38
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a<0 or b<0):\n        return []\n    else:\n        if ((a>b) or (b>a)):\n            return []\n    return [i for i in range(a,b+1) if (a+b) % i == 0]\n",
        "num_ids": 68
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b==0:\n        return 1\n    if a==0:\n        return 0\n    if a==1 or b==1:\n        return 0\n    if a<b:\n        b=b//2\n    else:\n        b=b//2\n    count=0\n    while a!=b:\n        if a%b==0:\n            count+=1\n            a//=b\n        else:\n            count+=1\n            b//=a\n    return count\n",
        "num_ids": 116
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return a\n    if a < b:\n        b = a\n    if a**2+b**2 == b**2:\n        return a**2\n",
        "num_ids": 46
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if b == 0:\n        return 1\n    if a == 0:\n        return 0\n    return int((b ** 2) % a)\n",
        "num_ids": 52
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = cmath.sqrt(x**2 + y**2)\n    return cmath.rect(x,y,a)\n",
        "num_ids": 34
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*pi/180\n    y = y*pi/180\n    x = x*cmath.sqrt(2)/2\n    y = y*cmath.sqrt(2)/2\n    return x,y\n",
        "num_ids": 56
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rad = cmath.polar(x)\n    y_rad = cmath.polar(y)\n    x = x_rad[0]\n    y = y_rad[0]\n    return [x,y]\n",
        "num_ids": 58
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # calculate polar coordinates\n    r = math.sqrt(x**2 + y**2)\n    phi = math.acos(y/r)\n    theta = math.atan2(x, y)\n    return r, phi, theta\ndef polar_triangulation(polar_1, polar_2):\n    '''\n    Write a function to generate a triangulation of the rays starting at the point in the first coordinate system.\n    The function should return the triangulation.\n    '''\n    # check for parallel rays, then take the first point in the first coordinate system\n    if polar_1[1]!= polar_2[1]:\n        polar_1_point = polar_1[1]\n        polar_2_point = polar_2[1]\n        # if parallel, then reverse the point\n        if polar_1[0] * polar_2[1] > polar_1[1] * polar_2[0]:\n            polar_1_point = polar_2_point\n            polar_2_point = polar_1_point\n    # use function to return triangulation\n    if polar_1[0] * polar_2[1] > polar_1[1] * polar_2[0]:\n        return polar_1\n    elif polar_1[0] * polar_2[1] < polar_1[1] * polar_2[0]:\n        return polar_2\n    else:\n        return polar_1, polar_2\ndef triangulation_from_coords(polar_1, polar_2):\n    '''\n    Write a function to generate a triangulation of the rays starting at the point in the first coordinate system.\n    The function should return the triangulation.\n    '''\n    # check for parallel rays, then take the first point in the first coordinate system\n    if polar_1[1]!= polar_2[1]:\n        polar_1_point = polar_1[1]\n        polar_2_point = polar_2[1]\n        # if parallel, then reverse the point\n        if polar_1[0] * polar_2[1] > polar_1[1] * polar_2[0]:\n            polar_1_point = polar_2_point\n            polar_2_point = polar_1_point\n    # use function to return triangulation\n    if polar_1[0] * polar_2[1] > polar_1[1] * polar_2[0]:\n        return polar_1\n    elif polar_1[0] * polar_2[1] < polar_1[1] * polar_2[0]:\n        return polar_2\n    else:\n        return polar_1, polar_2\ndef triangulation_from_coords_alternatives(polar_1, polar_2):\n    '''\n    Write a function to generate a triangulation of the rays starting at the point in the first coordinate system.\n    The function should return the triangulation.\n    '''\n    # check for parallel rays, then take the first point in the first coordinate system\n    if polar_1[1]!= polar_2[1]:\n        polar_1_point = polar_1[1]\n        polar_2_point = polar_2[1]\n        # if parallel, then reverse the point\n        if polar_1[0] * polar_2[1] > polar_1[1] * polar_2[0]:\n            polar_1_point = polar_2_point\n            polar_2_point = polar_1_point\n    # use function to return triangulation\n    if polar_1[0] * polar_2[1] > polar_1[1] * polar_2[0]:\n        return polar_1\n    elif polar_1[0] * polar_2[1] < polar_1[1] * polar_2[0]:\n        return polar_2\n    else:\n        return polar_1, polar_2\ndef ray_trafo(r,phi,theta):\n    '''\n    Write a function to create a ray-tracing function.\n    The function should take two polar coordinates as parameters, and return the coordinates in a rectangular form.\n    '''\n    # compute polar coordinates\n    x = r * math.cos(phi)\n    y = r * math.sin(phi)\n    # convert polar coordinates to rectangular coordinates\n    r, phi, theta = polar_rect(x,y)\n    # compute ray-tracing\n    # x_r = r * math.cos(theta)\n    # y_r = r * math.sin(theta)\n    # return x_r, y_r\n    return r, phi, theta\ndef a_to_b(theta, phi):\n    '''\n    Write a function to convert an angle into an angle between 0 and 360 degrees.\n    '''\n    # convert angle to b-cotan values\n    theta_b = (360 - theta) % 360\n    theta_b_c = theta_b + 180\n    # calculate polar coordinates\n    r, phi, theta = polar_rect(math.cos(phi), math.sin(phi))\n    # compute ray-tracing\n    # x_b = math.cos(theta) * math.cos(theta_b) - math.sin(theta) * math.sin(theta_b)\n    # y_b = math.cos(theta) * math.sin(theta_b) + math.sin(theta) * math.cos(theta_b)\n    x_b = r * math.cos(theta_b)\n    y_b = r * math.sin(theta_b)\n    # convert to b-cotan\n    theta_c = (theta_b_c + 180) % 360\n    # compute ray-tracing\n    x_c = math.cos(theta_c) * math.cos(theta) - math.sin(theta) * math.sin(theta)\n    y_c = math.cos(theta) * math.sin(theta) + math.sin(theta) * math.cos(theta)\n    # return x_r, y_r, x_b, y_b, x_c, y_c\n    return x_b, y_b, x_c, y_c\ndef b_to_a(theta, phi):\n    '''\n    Write a function to convert an angle into an angle between 0 and 360 degrees.\n    '''\n    # convert angle to a-cotan values\n    theta_b = theta + 180\n    theta_b_c = theta_b + 360\n    # compute polar coordinates\n    r, phi, theta = polar_rect(math.cos(phi), math.sin(phi))\n    # compute ray-tracing\n    # x_a = math.cos(theta) * math.sin(theta_b) + math.cos(theta) * math.cos(theta_b) * math.sin(theta)\n    # y_a = math.sin(theta) * math.sin(theta_b) + math.cos(theta) * math.cos(theta_b) * math.sin(theta)\n    x_a = r * math.cos(theta_b)\n    y_a = r * math.sin(theta_b)\n    # convert to a-cotan\n    theta_c = (theta_b_c - 180) % 360\n    # compute ray-tracing\n    x_c = math.sin(theta_c)\n    y_c = math.cos(theta_c)\n    # return x_r, y_r, x_a, y_a, x_c, y_c\n    return x_a, y_a, x_c, y_c\ndef a_to_b_alternatives(theta, phi):\n    '''\n    Write a function to convert an angle into an angle between 0 and 360 degrees.\n    '''\n    # convert angle to b-cotan values\n    theta_b = theta + 180\n    theta_b_c = theta_b + 360\n    # compute polar coordinates\n    r, phi, theta = polar_rect(math.cos(phi), math.sin(phi))\n    # compute ray-tracing\n    # x_b = math.cos(theta) * math.sin(th",
        "num_ids": 98
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x <= 0:\n        return (x,y)\n    if y <= 0:\n        return (x,y)\n    if x >= 1:\n        return (x,y)\n    if y >= 1:\n        return (x,y)\n    if x < 0.5:\n        return (x,y)\n    if y < 0.5:\n        return (x,y)\n    if x < 0.5:\n        return (x,y)\n    if x >= 0.5:\n        return (x,y)\n    if y >= 0.5:\n        return (x,y)\n    if x >= 0.5:\n        return (x,y)\n    if y >= 0.5:\n        return (x,y)\n",
        "num_ids": 181
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt(x**2+y**2)\n    phi = math.acos((x**2+y**2+1)/2)\n    theta = math.atan2(y,x)\n    return (r*math.cos(phi), r*math.sin(phi)), (r*math.cos(theta), r*math.sin(theta))\n    \ndef rect_coords(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = math.sqrt(x**2+y**2)\n    phi = math.atan2(y,x)\n    theta = math.atan2(x,r)\n    return (r*math.cos(phi), r*math.sin(phi)), (r*math.cos(theta), r*math.sin(theta))\n    \ndef polar_coords(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = math.sin(theta)*r\n    y = math.cos(theta)*r\n    return x, y\n    \ndef rect_coords(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = math.sqrt(x**2+y**2)\n    phi = math.acos((x**2+y**2+1)/2)\n    theta = math.atan2(y,x)\n    return r*math.cos(phi), r*math.sin(phi), theta\n    \ndef unit_vector(vector):\n    '''\n    Returns the unit vector of a vector.\n    '''\n    return vector / math.sqrt(vector[0]**2 + vector[1]**2)\n",
        "num_ids": 26
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = x/math.pi\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R*c,R*d]\n    \ndef polar_rect_to_polar(R,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = R*math.cos(phi)\n    y = R*math.sin(phi)\n    return [x,y]\n    \ndef polar_sub(x,y):\n    '''\n    Write a function to subtract polar coordinates from rectangular coordinates.\n    '''\n    R = x/math.pi\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R*c,-R*d]\n    \ndef polar_diff(p1,p2):\n    '''\n    Write a function to calculate the polar difference between two polar coordinates.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    d = [x1-x2,y1-y2]\n    return d\n    \ndef polar_dist(p1,p2):\n    '''\n    Write a function to calculate the polar distance between two polar coordinates.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    d = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n    return d\n    \ndef polar_polar(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_polar_to_polar(R,phi):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = R[0]*math.cos(phi)\n    y = R[1]*math.sin(phi)\n    return [x,y]\n    \ndef polar_intersect(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_intersect_to_polar(R,phi):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = R[0]*math.cos(phi)\n    y = R[1]*math.sin(phi)\n    return [x,y]\n    \ndef polar_is_in(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_is_in_to_polar(R,phi):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = R[0]*math.cos(phi)\n    y = R[1]*math.sin(phi)\n    return [x,y]\n    \ndef polar_is_in_polar(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_diff_to_polar(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_diff_to_polar_polar(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_dist_to_polar(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_dist_to_polar_polar(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R[0]*d+R[1]]\n    \ndef polar_rect_to_polar_polar(R,phi):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = R[0]*math.cos(phi)\n    y = R[1]*math.sin(phi)\n    return [x,y]\n    \ndef polar_rect_to_polar_polar_polar(R,phi):\n    '''\n    Write a function to calculate the polar coordinates of a point on a polar surface.\n    '''\n    x = R[0]*math.cos(phi)\n    y = R[1]*math.sin(phi)\n    return [x,y]\n    \ndef polar_is_in_rect(p1,p2):\n    '''\n    Write a function to calculate the polar coordinates of a point on a rectangular object.\n    '''\n    x = p1[0]\n    y = p1[1]\n    R = polar_rect(x,y)\n    phi = math.acos(y)\n    c = math.sin(phi)\n    d = math.cos(phi)\n    return [R[0]*c+R[1],-R",
        "num_ids": 79
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.cos(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.sin(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_cos(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.cos(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.sin(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_sin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.sin(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.cos(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_cos_sin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.cos(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.sin(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_cos_sin_cos(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.cos(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.sin(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_cos_sin_sin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.cos(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.sin(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_cos_sin_cos(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.cos(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.sin(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_sin_cos(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.sin(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.cos(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_sin_cos(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Convert polar coordinates to polar coordinates\n    r = cmath.rect(0,0)\n    phi = cmath.phase(x)\n    phi_rad = cmath.phase(x)*cmath.pi/180\n    theta = cmath.phase(y)\n    theta_rad = cmath.phase(y)*cmath.pi/180\n    #Create the rectangles\n    rect_x = x*r.real+r.real*cmath.sin(phi_rad)\n    rect_y = y*r.imag+r.imag*cmath.cos(phi_rad)\n    #Convert to polar\n    r_polar = cmath.polar(theta)\n    #Return the polar coordinates\n    return (rect_x,rect_y,r_polar)\ndef polar_rect_cos_sin_cos(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangula",
        "num_ids": 14
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*cmath.pi/180\n    phi = y*cmath.pi/180\n    return (x*cmath.cos(r) + y*cmath.sin(r)*math.cos(phi)*math.sin(phi)*cmath.pi/180), (x*cmath.sin(r) + y*cmath.cos(r)*math.sin(phi)*cmath.pi/180)\n",
        "num_ids": 101
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = x*x - y*y\n    r = cmath.rect(cmath.sqrt(z))\n    return r.real, r.imag\ndef rect_polar_rect(r,t):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    z = r*r - t*t\n    x = cmath.exp(z/2)*math.pi\n    y = 2*t*cmath.exp(-z/2)\n    return x,y\ndef polar_triangle(r,t):\n    '''\n    Write a function to calculate the polar coordinates of a triangle.\n    '''\n    x = r*math.cos(t*math.pi)\n    y = r*math.sin(t*math.pi)\n    return x,y\ndef triangle_polar_rect(r,t):\n    '''\n    Write a function to calculate the polar coordinates of a triangle.\n    '''\n    x = r*math.cos(t*math.pi)\n    y = r*math.sin(t*math.pi)\n    return x,y\ndef rect_triangle_polar_rect(r,t):\n    '''\n    Write a function to calculate the polar coordinates of a triangle.\n    '''\n    x = r*math.cos(t*math.pi)\n    y = r*math.sin(t*math.pi)\n    return x,y\ndef distance(r1, t1, r2, t2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return abs(r1-r2)/(r1-r2)\ndef quadratic(a,b,c):\n    '''\n    Write a function to compute the quadratic equation of a quadratic formula.\n    '''\n    delta = b**2 - 4*a*c\n    if delta == 0:\n        return -b/2*a\n    else:\n        x1 = (-b + cmath.sqrt(delta))/(2*a)\n        x2 = (-b - cmath.sqrt(delta))/(2*a)\n        return x1,x2\ndef circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (3.141592*r**2)\ndef triangle(r1,r2,r3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)\ndef parallelogram(r1,r2,r3):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(2*r3**2)\ndef parallelogram_r(r1,r2,r3):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(2*r3**2)\ndef parallelogram_theta(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(2*r3**2)*(r4**2)\ndef parallelogram_theta_r(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(2*r3**2)*(r4**2)\ndef parallelogram_a(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(2*r3**2)*(r4**2)\ndef parallelogram_a_r(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(2*r3**2)*(r4**2)\ndef parallelogram_s(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_s_r(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_t(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r4**2)*(r3**2)\ndef parallelogram_t_r(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r4**2)*(r3**2)\ndef parallelogram_theta(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_theta_r(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_a(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_a_r(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_s(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_s_r(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (4*cmath.pi*r1**2)*(4*cmath.pi*r2**2)*(r3**2)*(r4**2)\ndef parallelogram_t(r1,r2,r3,r4):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"The original list is : \", newList)\n    index1 = 0\n    index2 = 0\n    i = 0\n    j = 0\n    \n    while i < len(newList):\n        newList[i], newList[j] = newList[j], newList[i]\n        i += 1\n        j += 1\n",
        "num_ids": 82
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort()\n    temp = newList.pop(0)\n    newList.insert(0, temp)\n    temp = newList.pop()\n    newList.append(temp)\n    return newList\n",
        "num_ids": 54
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(0,len(newList)-1):\n        newList[i], newList[len(newList)-1] = newList[len(newList)-1], newList[i]\n    return newList\n",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Write your code here.\n    lst = newList[:]\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n",
        "num_ids": 49
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(0, len(newList)-1, 1):\n        temp = newList[i]\n        newList[i] = newList[i+1]\n        newList[i+1] = temp\n    return newList\n",
        "num_ids": 60
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    print(newList)\n",
        "num_ids": 11
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse() \n    newList.sort() \n    return newList \n",
        "num_ids": 24
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    second = newList[len(newList)-1]\n    newList[0] = second\n    newList[len(newList)-1] = first\n    return newList\n    \ndef remove_duplicate(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = sorted(set(newList))\n    newList = newList[1:-1]\n    return newList\n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the elements of a list.\n    '''\n    newList = []\n    for i in newList:\n        newList.append(i)\n    return newList\n    \ndef find_second_greater_element(newList): \n    '''\n    Write a python function to find the second greater element in a list.\n    '''\n    for i in range(len(newList)-1):\n        if newList[i] > newList[i+1]:\n            break\n    return newList[i+1]\n    \ndef join_List(newList): \n    '''\n    Write a python function to join a list of items into a single string.\n    '''\n    myStr = \"\".join(newList)\n    return myStr\n    \ndef split_List(newList): \n    '''\n    Write a python function to split a list into smaller lists.\n    '''\n    newList = []\n    for i in range(len(newList)):\n        newList.append(newList[i][1])\n    return newList\n    \ndef merge_2_dict(newDict): \n    '''\n    Write a python function to merge the elements in two dictionaries.\n    '''\n    tempDict = dict()\n    for key in newDict.keys():\n        tempDict[key] = newDict[key]\n    return tempDict\n    \ndef add_list_to_dict(newList, dictionary): \n    '''\n    Write a python function to add a list to a dictionary.\n    '''\n    if isinstance(newList, dict):\n        for key in newList.keys():\n            if key not in dictionary.keys():\n                dictionary[key] = newList[key]\n    elif isinstance(newList, list):\n        for index in range(len(newList)):\n            dictionary[newList[index]] = newList[index]\n    return dictionary\n    \ndef add_list_to_dict_2(newList, dictionary): \n    '''\n    Write a python function to add a list to a dictionary.\n    '''\n    newList = newList.copy()\n    for i in range(len(newList)):\n        if newList[i] in dictionary.keys():\n            dictionary[newList[i]] += newList[i]\n        else:\n            dictionary[newList[i]] = newList[i]\n    return dictionary\n    \ndef list_to_dict(newList): \n    '''\n    Write a python function to convert a list to a dictionary.\n    '''\n    dictionary = dict()\n    for i in range(len(newList)):\n        if isinstance(newList[i], dict):\n            dictionary[newList[i]] = newList[i]\n        elif isinstance(newList[i], list):\n            for j in range(len(newList[i])):\n                if isinstance(newList[i][j], dict):\n                    dictionary[newList[i][j]] = newList[i][j]\n                elif isinstance(newList[i][j], list):\n                    for k in range(len(newList[i][j])):\n                        if isinstance(newList[i][j][k], dict):\n                            dictionary[newList[i][j][k]] = newList[i][j][k]\n                        elif isinstance(newList[i][j][k], list):\n                            for l in range(len(newList[i][j][k])):\n                                if isinstance(newList[i][j][k][l], dict):\n                                    dictionary[newList[i][j][k][l]] = newList[i][j][k][l]\n    return dictionary\n    \ndef list_to_string(newList): \n    '''\n    Write a python function to convert a list to a string.\n    '''\n    string = \"\"\n    for i in newList:\n        if isinstance(i, dict):\n            string += join_List(list(i.values())) + \" \"\n        elif isinstance(i, list):\n            string += join_List(i) + \" \"\n    return string\n    \ndef max_len(newList): \n    '''\n    Write a python function to return the length of the longest string in a list.\n    '''\n    if isinstance(newList, list):\n        return max(map(len, newList))\n    else:\n        return 0\n    \ndef max_list(newList): \n    '''\n    Write a python function to return the length of the longest list in a list.\n    '''\n    newList = newList.copy()\n    if isinstance(newList, list):\n        return max(map(len, newList))\n    else:\n        return 0\n    \ndef insert_list_to_dict(newList, dictionary, index): \n    '''\n    Write a python function to insert a list into a dictionary.\n    '''\n    if isinstance(index, int) or index.isdigit():\n        if isinstance(index, int):\n            for i in newList:\n                dictionary[i] = index\n        else:\n            for i in newList:\n                if i in dictionary.keys():\n                    index = dictionary[i]\n                else:\n                    index = newList.index(i)\n                    dictionary[i] = index\n    else:\n        raise ValueError(\"Index must be an integer\")\n    return dictionary\n    \ndef swap_2_Dict(newDict): \n    '''\n    Write a python function to swap two dictionaries.\n    '''\n    if isinstance(newDict, dict):\n        tempDict = dict()\n        for key in newDict.keys():\n            tempDict[key] = newDict[key]\n        newDict = tempDict\n    return newDict\n    \ndef swap_2_Dict_2(newDict): \n    '''\n    Write a python function to swap two dictionaries.\n    '''\n    newDict = newDict.copy()\n    newDict = newDict.copy()\n    newDict = newDict.copy()\n    for key in newDict.keys():\n        if isinstance(newDict[key], dict):\n            if isinstance(newDict[key], dict):\n                tempDict = dict()\n                for i in newDict[key].keys():\n                    tempDict[i] = newDict[key][i]\n                newDict[key] = tempDict\n            else:\n                for i in newDict[key]:\n                    if i in newDict[key].keys():\n                        newDict[key][i] = newDict[key][i]\n        else:\n            if isinstance(newDict[key], dict):\n                for i in newDict[key].keys():\n                    if i in newDict[key].keys():\n                        newDict[key][i] = newDict[key][i]\n            else:\n                for i in newDict[key]:\n                    if i in newDict[key].keys():\n                        newDict[key][i] = newDict[key][i]\n    return newDict\n    \ndef get_other_2Dict(newDict): \n    '''\n    Write a python function to get other dictionaries.\n    '''\n    newDict = newDict.copy()\n    newDict = newDict.copy()\n    newDict = newDict.copy()\n    newDict = newDict.copy()\n    return newDict\n    \ndef list_diff(list_1, list_2): \n    '''\n    Write a python function to return the elements in the elements of two lists\n    which are not in the list.\n    '''\n    newList = list(set(list_1)",
        "num_ids": 14
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    for i in range(len(newList)-1): \n        newList[i], newList[-1] = newList[-1], newList[i] \n    return newList\n",
        "num_ids": 50
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k < n:\n        print (\"The sum of the product of consecutive binomial coefficients is not defined\")\n        return\n    else:\n        for i in range(1,k+1):\n            if i == 1:\n                if k == 1:\n                    print (n, \"*\", i, \"=\", n*i)\n                else:\n                    print (n, \"*\", i, \"=\", n*i, \" +\", n-1)\n            elif i == k:\n                print (n, \"*\", i, \"=\", n*i)\n            else:\n                print (n, \"*\", i, \"=\", n*i, \" + \", i)\n                \n            \ndef binomial_Fibonacci(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k < n:\n        print (\"The sum of the product of consecutive binomial coefficients is not defined\")\n        return\n    else:\n        if k == 0:\n            print (n, \"*\", k, \"=\", n)\n            return\n        else:\n            print (n, \"*\", k, \"=\", n*k)\n        for i in range(n,0,-1):\n            if k == 1:\n                print (n, \"*\", k, \"=\", n)\n            else:\n                print (n, \"*\", k, \"=\", n*k)\n            k-=1\n",
        "num_ids": 146
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 0\n    for i in range(1, k+1):\n        c += n*(n-1)*(2**i)/(2**(k-i))\n    return c\n",
        "num_ids": 48
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)\n    \ndef binomial_Coeff_2(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_3(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_4(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_5(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_6(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_7(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_8(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_9(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_10(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_11(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_12(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_13(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_14(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_15(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)\n    \ndef binomial_Coeff_16(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*(1/k)*",
        "num_ids": 301
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # if n <= 0 or k <= 0 or n >= 10**9 or k >= 10**9:\n    #     return 0\n    # elif k == 0:\n    #     return 0\n    # elif k > n:\n    #     return 0\n    # elif n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return k * (k-1)\n    # elif n == 3:\n    #     return (k * (k-2) * (k-1)) / 6\n    # else:\n    #     return (k * (k-2) * (k-3) / 6)\n",
        "num_ids": 155
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    for i in range(1,k+1):\n        sum+=n*(i**(k-i))\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k == 0):\n        return 1\n    elif(k == 1):\n        return n\n    else:\n        return n * binomial_Coeff(n-1,k-1)\n",
        "num_ids": 51
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # general formula\n    # n * (1-n) * (1-n^k) n^k\n    # n = n + 1\n    # k = k + 1\n    # n * (1-n) * (1-n^k) n^k\n    return binomial_coeff_sum(n,k) * binomial_coeff_sum(n-1,k-1)\n",
        "num_ids": 97
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff_sum = 0\n    for i in range(1, n+1): \n        binomial_coeff_sum += (k ** i) * (i ** (n - i)) \n    return binomial_coeff_sum\n",
        "num_ids": 62
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff_sum = 0\n    for i in range(1,k+1):\n        coeff_sum = n * coeff_sum + (i*(i-1) * n)\n    return coeff_sum\n",
        "num_ids": 55
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k,1,1)\n",
        "num_ids": 19
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_str = ip.strip('0')\n    if new_str.find('.')!= -1:\n        new_str = new_str.strip('.')\n        if new_str.find('.')!= -1:\n            new_str = new_str.strip('.')\n    return new_str\ndef remove_url(url):\n    '''\n    Write a function to remove http or https urls from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if 'https' in url_parts[-1]:\n        url_parts.pop()\n    if 'http' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_url(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_auth(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash_2(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link_2(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth_2(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_auth_2(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash_3(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link_3(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth_3(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_all_auth_3(url):\n    '''\n    Write a function to remove any trailing slash, or any specific parts of a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_trailing_slash_4(url):\n    '''\n    Write a function to remove a trailing slash from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '//' not in url_parts[-1]:\n        url_parts.pop()\n    if '/' not in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_link_4(url):\n    '''\n    Write a function to remove a link from an url.\n    '''\n    url_parts = re.split('\\/', url)\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '//' in url_parts[-1]:\n        url_parts.pop()\n    if '/' in url_parts[-1]:\n        url_parts.pop()\n    return \"\".join(url_parts)\ndef remove_auth_4(url):\n    '''\n    Write a function to remove the <auth> tag from a url.\n    '''\n    url_parts = re.split('<auth>', url)\n    if '<auth>' in url_parts[-1]:\n        ur",
        "num_ids": 36
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(r'^[0-9]{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip):\n        return ip\n    else:\n        return '0' + ip\n",
        "num_ids": 66
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zero\n    while (len(ip) > 0 and ip[0] == '0'):\n        ip = ip[1:]\n    return ip\n",
        "num_ids": 40
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    def checkIP(ip, string):\n        '''\n        check if all ip number has 0 in it,return true or false\n        '''\n        if ip.count('0')==0:\n            return True\n        else:\n            return False\n    \n    result=''\n    for char in ip:\n        if char.isalpha():\n            result+=char\n        else:\n            result+=char.zfill(2)\n    \n    if checkIP(result, ip):\n        print(result)\n    else:\n        print(result[:2])\n        print(result[2:])\n        print(ip)\n        \nremovezero_ip('192.168.0.1'",
        "num_ids": 129
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+', '', ip)\n",
        "num_ids": 20
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # I cannot use try except because it might be an infinite loop\n    try:\n        ip = ip.split('.')\n        # Remove leading zeroes\n        return '.'.join(ip[0:])\n    except:\n        return '0'\n    \n",
        "num_ids": 64
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = [int(num) for num in ip if num!= '']\n    return '.'.join([str(num) for num in ip if num!= 0])\n",
        "num_ids": 53
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(\\d){4}', '', ip)\n",
        "num_ids": 22
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    newip = ip\n    newip = re.sub(r'(^0\\.)+', '', newip)\n    newip = re.sub(r'(^0\\.)+', '', newip)\n    newip = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+', '', newip)\n    newip = re.sub(r'\\d+\\.\\d+\\.\\d+', '', newip)\n    return newip\n",
        "num_ids": 119
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ## remove leading zeroes\n    l = ip.strip('0').split('.')\n    l[0]=l[0].lstrip('0')\n    ## replace the zeroes with the next value\n    l[0]=l[0].replace('0','.')\n    return l\n",
        "num_ids": 71
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        return list1[0] - list1[len(list1)//2]\n    else:\n        return list1[0] - list1[(len(list1)//2) + 1]\n",
        "num_ids": 63
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    l = len(list1)\n    return l - (l % 2)\n",
        "num_ids": 21
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    if len(list1)%2 == 0:\n        return \"Sorry, your list is not an even list\"\n    else:\n        for i in list1:\n            if i%2 == 0:\n                even += i\n            else:\n                odd += i\n        return (f\"The first even number in the list is: {even}\")\n        \n",
        "num_ids": 95
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    length = len(list1)\n    if length % 2 == 0:\n        first_even = list1[0]\n        first_odd = list1[-1]\n        list1.pop(0)\n        list1.pop()\n        list1.append(first_even)\n        list1.append(first_odd)\n        print('the list is',list1)\n        return list1\n    else:\n        first_even = list1[0]\n        first_odd = list1[-1]\n        list1.pop(0)\n        list1.pop()\n        list1.append(first_odd)\n        list1.append(first_even)\n        print('the list is',list1)\n        return list1\nprint('The list of odd numbers is',diff_even_odd([1,2,3,4,5,6,7,8,9,10]))\nprint('The list of even numbers is',diff_even_odd([2,4,6,8,10,12,14,16,18,20]))",
        "num_ids": 251
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    l=[]\n    for i in list1:\n        if i %2 == 0:\n            l.append(i)\n    print(l)\ndef even_or_odd(list1):\n    '''\n    Write a function to find the sum of the first even numbers in the list.\n    '''\n    even=0\n    odd=0\n    for i in list1:\n        if i%2 ==0:\n            even+=i\n        else:\n            odd+=i\n    print(f'Sum of even numbers: {even}')\n    print(f'Sum of odd numbers: {odd}')\n",
        "num_ids": 73
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_set = set(list1)\n    return list1[list1.index(even_odd_set) + 1] - list1[list1.index(even_odd_set) - 1]\n",
        "num_ids": 53
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        list2 = [x for x in list1 if x%2==0]\n    else:\n        list2 = [x for x in list1 if x%2!=0]\n    return list2\n",
        "num_ids": 63
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    dif = []\n    if len(list1)%2 == 0:\n        return sum(list1[:len(list1)//2])\n    else:\n        return sum(list1[:len(list1)//2+1])\n",
        "num_ids": 61
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2=[]\n    if len(list1)%2==0:\n        for i in range(0,len(list1),2):\n            list2.append(list1[i])\n    else:\n        list2.append(list1[0])\n        for i in range(1,len(list1),2):\n            list2.append(list1[i])\n    list2.sort()\n    return list2\n",
        "num_ids": 105
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_odd=list1[0]\n    first_even=list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] % 2 == 0:\n            first_even+=list1[i]\n        else:\n            first_odd+=list1[i]\n    return first_odd-first_even\n",
        "num_ids": 88
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n    if str1 == str2:\n        return 1\n",
        "num_ids": 33
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # 1. Initialize variables\n    # initialize first binary number string\n    binary1 = str1[0]\n    # initialize second binary number string\n    binary2 = str2[0]\n    # initialize count of characters in binary number string\n    n1 = 0\n    # initialize count of characters in binary number string\n    n2 = 0\n    # initialize count of characters in first binary number string\n    c1 = 0\n    # initialize count of characters in second binary number string\n    c2 = 0\n    # initialize count of characters in string\n    s = 0\n    # count the characters in string 1\n    for i in range(len(str1)) :\n        if str1[i] == binary1 :\n            c1 += 1\n        if str1[i] == binary2 :\n            c2 += 1\n        if str1[i] == \"1\" :\n            n1 += 1\n    # count the characters in string 2\n    for i in range(len(str2)) :\n        if str2[i] == binary1 :\n            c1 += 1\n        if str2[i] == binary2 :\n            c2 += 1\n        if str2[i] == \"1\" :\n            n2 += 1\n    # initialize count of characters in binary string\n    for i in range(len(binary1)) :\n        if binary1[i] == \"1\" :\n            s += 1\n    # initialize count of characters in binary string\n    for i in range(len(binary2)) :\n        if binary2[i] == \"1\" :\n            s += 1\n    # initialize count of characters in string\n    for i in range(len(str1)) :\n        if str1[i] == \"1\" :\n            s += 1\n    # initialize count of characters in binary string\n    for i in range(len(str2)) :\n        if str2[i] == \"1\" :\n            s += 1\n    # initialize count of characters in string\n    for i in range(len(str1)) :\n        if str1[i] == \"0\" :\n            s += 1\n    # initialize count of characters in binary string\n    for i in range(len(str2)) :\n        if str2[i] == \"0\" :\n            s += 1\n    # count the count of characters in binary string\n    c1 = 0\n    c2 = 0\n    s = 0\n    # count the count of characters in string 1\n    for i in range(len(str1)) :\n        if str1[i] == \"1\" :\n            c1 += 1\n        if str1[i] == \"0\" :\n            s += 1\n    # count the count of characters in binary string\n    for i in range(len(binary1)) :\n        if binary1[i] == \"1\" :\n            c1 += 1\n        if binary1[i] == \"0\" :\n            s += 1\n    # count the count of characters in binary string\n    for i in range(len(binary2)) :\n        if binary2[i] == \"1\" :\n            c2 += 1\n        if binary2[i] == \"0\" :\n            s += 1\n    # count the count of characters in string\n    for i in range(len(str1)) :\n        if str1[i] == \"0\" :\n            s += 1\n    # count the count of characters in binary string\n    for i in range(len(str2)) :\n        if str2[i] == \"0\" :\n            s += 1\n    # return the minimum count of swaps required\n    return min(n1,n2,s,c1,c2,s)\n",
        "num_ids": 853
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    total_swaps = 0\n    str1 = list(str1)\n    str2 = list(str2)\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i]!= str2[j]:\n                total_swaps += 1\n    return total_swaps",
        "num_ids": 85
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    # 2 words of binary\n    arr1 = [0,1]\n    arr2 = [1,0]\n    # 1 word of binary\n    arr1.extend([1])\n    arr2.extend([1])\n    # loop over binary\n    for i in range(1, len(str1)):\n        # if the previous element is zero \n        if arr1[i-1] == 0 and arr2[i-1] == 0:\n            # increment the swap count\n            swaps+=1\n        # if the previous element is one \n        if arr1[i-1] == 1 and arr2[i-1] == 1:\n            # increment the swap count\n            swaps+=1\n    # if the number of swaps is greater than 1, then this is not a valid binary number \n    if swaps > 1: \n        return swaps\n",
        "num_ids": 209
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = str1.replace(\"0\",\"1\")\n    s2 = str2.replace(\"1\",\"0\")\n    r = 0\n    for i in range(len(s1)) :\n        if s1[i]!= s2[i] :\n            r += 1\n    return r\ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = str1.replace(\"0\",\"1\")\n    s2 = str2.replace(\"1\",\"0\")\n    r = 0\n    for i in range(len(s1)) :\n        if s1[i]!= s2[i] :\n            r += 1\n    return r\ndef check_divisibility(num) : \n    '''\n    Write a python function to check whether a given number is divisible by 9.\n    '''\n    if num % 9 == 0 : return True\n    else : return False\ndef prime_factors(num) : \n    '''\n    Write a python function to return the prime factors of a number.\n    '''\n    if num <= 1 : return [num]\n    elif num == 2 : return [2]\n    else :\n        prime = [2]\n        i = 3\n        while i <= num :\n            if num % i == 0 : \n                if num/i == i : prime.append(i)\n                else : prime.append(num/i)\n                break\n            i += 1\n        return prime\ndef modular_sqrt(x) : \n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    if x == 1 or x == 2 or x == 3 : return 1\n    if x % 2 == 0 : \n        return modular_sqrt(x//2) + 1\n    else :\n        while x % 3 == 0 : return 3\n        while x % 5 == 0 : return 5\n        while x % 8 == 0 : return 8\n        while x % 2 == 0 : return 2\n        x = x - 1\n        return x\ndef rabin_miller_sqrt(n) : \n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    if n == 2 : return 2\n    if n == 3 : return 3\n    m = 0\n    a = n\n    while a % 10!= 0 : \n        m = (m * 10) + a % 10\n        a = a // 10\n    if a == 1 : return 3\n    return m\n",
        "num_ids": 74
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    p=0\n    q=0\n    for i in range(len(str1)) :\n        if str1[i]==str2[i]:\n            p+=1\n        else:\n            q+=1\n    return p+q\n",
        "num_ids": 59
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1_str = ''\n    count = 0\n    for char in str1 :\n        if char == '1' :\n            str1_str += '0'\n        else :\n            str1_str += '1'\n    for char in str2 :\n        if char == '1' :\n            count += 1\n        else :\n            count -= 1\n    return count\n    \nprint(min_Swaps('11100', '100101')",
        "num_ids": 107
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not str1:\n        return 0\n    minimum_swaps = 0\n    \n    if str2:\n        count = 0\n        for c in range(len(str1)):\n            if str1[c]!= str2[c]:\n                minimum_swaps+=1\n                if count == 0:\n                    count+=1\n                else:\n                    count+=1\n                    minimum_swaps+=1\n            else:\n                count=0\n        \n    else:\n        count = 0\n        for c in range(len(str1)):\n            if str1[c] == str2[c]:\n                count+=1\n            else:\n                count=0\n        \n        minimum_swaps+= count\n    \n    return minimum_swaps\n",
        "num_ids": 179
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #A mapping of letters to integers\n    char_map = {}\n    for char in str1:\n        char_map[char] = char_map.get(char, 0) + 1\n    \n    #A dictionary to map back to original characters\n    char_map = {value:key for key,value in char_map.items()}\n    \n    #Initialize count\n    count = 0\n    \n    #Loop through two strings\n    for s1 in str1:\n        for s2 in str2:\n            #Compare each char in one string to the char in the other\n            #Concatenate into a string\n            s = s1 + s2\n            \n            #Add to count if difference is less than count\n            if s[0]!= char_map[s[0]] and s[-1]!= char_map[s[-1]]:\n                count = max(count,len(s))\n    \n    return count\n    \ndef test_min_swaps() : \n    '''\n    Write a function that tests for the function min_Swaps() to work. \n    '''\n    #Testing for a balanced string\n    s1 = \"12\"\n    s2 = \"12\"\n    assert(min_Swaps(s1,s2) == 2)\n    \n    #Testing for a non-balanced string\n    s1 = \"1234\"\n    s2 = \"34\"\n    assert(min_Swaps(s1,s2) == 2)\n    \n    #Testing for an invalid string\n    s1 = \"1234\"\n    s2 = \"1234\"\n    assert(min_Swaps(s1,s2) == 0)\n",
        "num_ids": 137
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    num = str1 + str2\n    n = len(num)\n    count = 0\n    for i in range(n//2):\n        if num[i]!= num[n-1-i]:\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in range(len(tuple_list)):\n        tuple_size += len(tuple_list[i])\n    return tuple_size\n",
        "num_ids": 47
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # YOUR CODE HERE\n    # complete this function \n    \n    size_tuple = 0\n    for x in tuple_list:\n        size_tuple += len(x)\n        \n    return size_tuple\n    \n",
        "num_ids": 56
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list[0]) + len(tuple_list[1]) * 2\n",
        "num_ids": 26
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple(tuple_list))\n",
        "num_ids": 19
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(map(lambda x: len(x), tuple_list))\n",
        "num_ids": 20
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # We are given a tuple of size 1x3x4x5\n    # We can find the number of bits by dividing by 8\n    # and finding the remainder\n    # e.g. (1,3,4,5)=>12 => 11 (remainder)\n    # For the elements of the tuple that are not in order,\n    # we need to add one bit for the order\n    # as we are looking for the elements in ascending order\n    # e.g. (3,4,5)=>10 => 11 (1)\n    # For the elements of the tuple that are not in order,\n    # we need to add one bit for the order\n    # as we are looking for the elements in descending order\n    # e.g. (5,3,4,2)=>9 => 8 (1)\n    # for the elements in the tuple that are not in order,\n    # we need to add one bit for the order\n    # e.g. (1,2,3,4)=>5 => 10 (0)\n    # For the elements in the tuple that are not in order,\n    # we need to add one bit for the order\n    # e.g. (4,2,3,1)=>7 => 6 (1)\n    # for the elements in the tuple that are not in order,\n    # we need to add one bit for the order\n    # e.g. (3,4,5,2)=>7 => 9 (1)\n    # For the elements in the tuple that are not in order,\n    # we need to add one bit for the order\n    # e.g. (1,2,3,4)=>9 => 10 (0)\n",
        "num_ids": 389
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # your code here\n    size = 0\n    for i in tuple_list:\n        size += len(i)\n    return size\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    l = len(tuple_list)\n    return l*8\n",
        "num_ids": 19
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_tuple_list = len(tuple_list)\n    size_of_bytes = size_tuple_list * 8\n    return size_of_bytes\n",
        "num_ids": 42
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_from_list(tuple_list):\n    '''\n    Given a list, return a tuple.\n    '''\n    return tuple(tuple_list)\ndef tuple_to_list(tuple_to_convert):\n    '''\n    Given a tuple, return a list.\n    '''\n    return tuple_list_to_tuple(tuple_to_convert)\ndef tuple_list_to_tuple(tuple_list):\n    '''\n    Given a tuple, return a tuple.\n    '''\n    return tuple(tuple_list)\ndef print_tuple(tuple_list):\n    '''\n    Given a tuple, print it.\n    '''\n    print(tuple_list)\ndef tuple_list_size(tuple_list):\n    '''\n    Given a tuple, return the size of the tuple in bytes.\n    '''\n    return tuple_size(tuple_list)\ndef tuple_list_to_tuple(tuple_list):\n    '''\n    Given a tuple, return a tuple.\n    '''\n    return tuple_from_list(tuple_list)\ndef tuple_list_to_list(tuple_list):\n    '''\n    Given a tuple, return a list.\n    '''\n    return tuple_list_to_tuple(tuple_list)\ndef tuple_list_to_string(tuple_list):\n    '''\n    Given a tuple, return a string.\n    '''\n    return tuple_from_list(tuple_list)\ndef string_size(string):\n    '''\n    Given a string, return the size of the string in bytes.\n    '''\n    return sys.getsizeof(string)\ndef string_list_size(string):\n    '''\n    Given a string, return the size of the string in bytes.\n    '''\n    return string_size(string)\ndef string_list_to_string(string):\n    '''\n    Given a string, return a string.\n    '''\n    return string_from_list(string)\ndef string_list_to_tuple(string):\n    '''\n    Given a string, return a tuple.\n    '''\n    return tuple_from_list(string)\ndef string_list_to_list(string):\n    '''\n    Given a string, return a list.\n    '''\n    return tuple_list_to_tuple(string)\ndef string_list_to_string(string):\n    '''\n    Given a string, return a string.\n    '''\n    return string_from_list(string)\ndef list_to_tuple(list):\n    '''\n    Given a list, return a tuple.\n    '''\n    return tuple_from_list(list)\ndef list_to_string(list):\n    '''\n    Given a list, return a string.\n    '''\n    return tuple_to_list(list)\ndef list_to_tuple(list):\n    '''\n    Given a list, return a tuple.\n    '''\n    return tuple_list_to_tuple(list)\ndef list_to_list(list):\n    '''\n    Given a list, return a list.\n    '''\n    return tuple_list_to_list(list)\ndef list_to_string(list):\n    '''\n    Given a list, return a string.\n    '''\n    return tuple_list_to_string(list)\ndef sum_of_list(list1, list2):\n    '''\n    Given two lists, return the sum of the elements in the lists.\n    '''\n    return list_from_tuple(list_to_tuple(list_to_list(list1)) + list_to_tuple(list_to_list(list2)))\ndef multiply_list(list1, list2):\n    '''\n    Given two lists, return the product of the elements in the lists.\n    '''\n    return list_from_tuple(list_to_tuple(list_to_list(list1)) * list_to_tuple(list_to_list(list2)))\ndef sum_of_list2(list1, list2):\n    '''\n    Given two lists, return the sum of the elements in the lists.\n    '''\n    return sum_of_list(list1, list2)\ndef multiply_list2(list1, list2):\n    '''\n    Given two lists, return the product of the elements in the lists.\n    '''\n    return sum_of_list2(list1, list2)\ndef list_length(list1):\n    '''\n    Given a list, return the length of the list.\n    '''\n    return sys.getsizeof(list_to_list(list1))\ndef list_from_string(string):\n    '''\n    Given a string, return a list.\n    '''\n    return string_list_from_string(string)\ndef list_from_tuple(tuple):\n    '''\n    Given a tuple, return a list.\n    '''\n    return tuple_from_list(tuple)\ndef list_from_string(string):\n    '''\n    Given a string, return a list.\n    '''\n    return string_list_from_string(string)\ndef list_from_tuple(tuple):\n    '''\n    Given a tuple, return a list.\n    '''\n    return tuple_list_from_tuple(tuple)\ndef tuple_from_string(string):\n    '''\n    Given a string, return a tuple.\n    '''\n    return string_from_list(string)\ndef tuple_from_list(tuple_list):\n    '''\n    Given a tuple, return a tuple.\n    '''\n    return tuple_list_from_tuple(tuple_list)\ndef tuple_list_from_string(string):\n    '''\n    Given a string, return a tuple.\n    '''\n    return tuple_from_list(string)\ndef tuple_list_from_tuple(tuple_list):\n    '''\n    Given a tuple, return a tuple.\n    '''\n    return tuple_from_list(tuple_list)\ndef tuple_list_from_list(list):\n    '''\n    Given a list, return a tuple.\n    '''\n    return tuple_from_list(list_to_tuple(list))\ndef tuple_list_from_string(string):\n    '''\n    Given a string, return a tuple.\n    '''\n    return tuple_from_list(string_to_list(string))\ndef string_list_from_string(string):\n    '''\n    Given a string, return a list.\n    '''\n    return string_from_list(string)\ndef string_list_from_tuple(tuple):\n    '''\n    Given a tuple, return a list.\n    '''\n    return tuple_from_list(tuple_list_to_tuple(tuple))\ndef string_list_from_list(list):\n    '''\n    Given a list, return a list.\n    '''\n    return tuple_list_from_list(list_to_tuple(list))\ndef string_list_from_string(string):\n    '''\n    Given a string, return a list.\n    '''\n    return tuple_list_from_string(string_list_to_string(string))\ndef list_to_string2(list):\n    '''\n    Given a list, return a string.\n    '''\n    return tuple_list_to_string(list_to_tuple(list))\ndef list_to_string3(list):\n    '''\n    Given a list, return a string.\n    '''\n    return tuple_list_to_string(list_to_tuple(list))\ndef string_list_to_string2(string):\n    '''\n    Given a string, return a string.\n    '''\n    return string_list_to_string(string_list_to_string2(string))\ndef string_list_to_string3(string):\n    '''\n    Given a string, return a string.\n    '''\n    return string_list_to_string(string_list_to_string3(string))\ndef list_list_to_string(list):\n    '",
        "num_ids": 38
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Finding the middle of array\n    mid = int((len(arr1) + len(arr2)) / 2)\n",
        "num_ids": 30
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n",
        "num_ids": 103
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1):\n        return None\n    elif k < len(arr1):\n        return arr1[k]\n    else:\n        return arr2[k]\n",
        "num_ids": 47
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n",
        "num_ids": 32
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    start = 0\n    end = len(arr1) - 1\n",
        "num_ids": 18
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # list to hold sorted\n    arr = [arr1[i] for i in range(len(arr1))]\n    arr2 = [arr2[i] for i in range(len(arr2))]\n    # if there is a tie, return the smallest element\n    if k == 0:\n        return arr[k]\n    if k > 0 and k == len(arr):\n        # find the smallest element between last k elements\n        if arr[k] < arr[k-1]:\n            return arr[k]\n        else:\n            return arr[k-1]\n    # if k is greater than the length of array\n    # add k to the end of the array\n    if k > len(arr):\n        arr.extend([arr2[k]])\n        k += 1\n    # if k is less than the length of array\n    # remove the element from the end of the array\n    if k < 0:\n        arr.pop()\n        k = len(arr)\n    # if k is equal to the length of array\n    # remove the element from the beginning of the array\n    if k == 0:\n        arr.pop(0)\n        k -= 1\n    return arr[k]\n",
        "num_ids": 283
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr2):\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k == 0:\n        return arr1[k]\n    elif k > len(arr2):\n        return find_kth(arr1, arr2, k-1)\n",
        "num_ids": 46
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binary_search(arr1, arr2, start, end):\n        if start > end:\n            return None\n",
        "num_ids": 30
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number==number:\n        return True\n    elif number==number*number:\n        return False\n    else:\n        sum=0\n        for i in range(1,number):\n            if number%i==0:\n                sum+=i\n        if sum==number:\n            return True\n        else:\n            return False\n",
        "num_ids": 80
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total_sum = 0\n    count = 0\n    while number > 0:\n        digit = number % 10\n        total_sum += digit ** 3\n        number = number // 10\n    if total_sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    count = 0\n    for i in number:\n        count = count + 1\n        if(ord(i) - 48) == ord(i) - 48:\n            count = count - 2\n        if(count == 0):\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def isArmstrong(num):\n        '''\n        Compute the Armstrong number of given number.\n        :param num: number to check\n        :return: Armstrong number\n        '''\n        if num == 0:\n            return False\n        \n        temp_num = num\n        count = 0\n        while temp_num > 0:\n            remainder = temp_num % 10\n            count += remainder ** 3\n            temp_num = temp_num // 10\n        \n        return count == num\n    \n    armstrong_num = 0\n    if number == 0:\n        return False\n    \n    for num in range(1, number + 1):\n        if isArmstrong(num):\n            armstrong_num += 1\n    \n    return armstrong_num\n",
        "num_ids": 135
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = 0\n    num = str(number)\n    for i in num:\n        temp = temp * 10 + int(i)\n    if temp == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n    return sum == number\n",
        "num_ids": 30
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Base case: If the number is zero or 0, return True\n    if number < 0:\n        return False\n    \n    # Recursive Call: If the number is greater than 2**31, return False\n    # if the number is less than 2**31, return True\n    if number > (2 ** 31):\n        return False\n    \n    # Armstrong Number: Check if the number is divisible by 2, if so, return False\n    if number % 2 == 0:\n        return False\n    \n    # Check for the previous digits of the number\n    # Check for the next digits of the number\n    # Compare the previous and next digits\n    # If they are different, return False\n    return armstrong_number(number // (2 ** 31)) or armstrong_number(number % (2 ** 31))\n",
        "num_ids": 186
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum = 0\n    for x in number:\n        sum = sum + int(x)\n    return sum == len(number)\n",
        "num_ids": 41
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    num = int(number)\n    total = num\n    digits = 0\n    while(total > 0):\n        rem = num%10\n        count += 1\n        total = total//10\n        digits += 1\n    if (digits % 2 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    value = number\n    while value > 0:\n        digit = value % 10\n        sum += digit ** 3\n        value //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n        average += i\n        \n    average = sum/number\n    return sum, average\n",
        "num_ids": 50
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(0, number+1):\n        total += i\n",
        "num_ids": 25
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(1, number+1):\n        sum += x\n",
        "num_ids": 25
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += number\n    average = sum/n\n    print(sum)\n    print(average)\n",
        "num_ids": 44
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(number) / len(number)\n",
        "num_ids": 14
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for number in range(1, number + 1):\n        total += number\n    return total / number\n",
        "num_ids": 31
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n",
        "num_ids": 27
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return -1\n    else:\n        return sum_average(number - 1) + number\n",
        "num_ids": 43
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    number_of_tries=0\n    while number_of_tries<number:\n        number_of_tries+=1\n        number=int(input('enter any natural number'))\n        sum+=number\n    average=sum/number_of_tries\n    return (sum,average)\n",
        "num_ids": 78
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(f'The sum of all natural numbers is {sum}')\n    print(f'The average of all natural numbers is {average}')\n",
        "num_ids": 71
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\"\nprint(is_Even(20))\n",
        "num_ids": 42
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is not even\")\n",
        "num_ids": 34
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(\"{} is even\".format(n))\n    else : \n        print(\"{} is not even\".format(n)) \n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1 : \n        print(\"{} is odd\".format(n))\n    else : \n        print(\"{} is not odd\".format(n)) \n",
        "num_ids": 45
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    if n%2 == 0: \n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {'a':1,'b':2,'c':3,'d':4}\n    return dict1[str1[0]]\n",
        "num_ids": 36
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    n=str1.count('a')\n    for i in range(n):\n        if str1[i]==str1[i+1]:\n            return str1[i]\n    return \"No repeated character\"\n    \n",
        "num_ids": 56
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0])\n",
        "num_ids": 15
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for char in str1:\n        if char == str1[count]:\n            count += 1\n        else:\n            count = 0\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    res = 0\n    count = 0\n    for i in range(len(str1)):\n        if (str1[i]==str1[i-1]):\n            count += 1\n        if count == 1:\n            res = str1[i]\n            break\n        count = 0\n    if res!=0:\n        print(\"The first repeated character is:\", res)\n    else:\n        print(\"The first repeated character is: not found\")\n",
        "num_ids": 110
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1=='':\n        return ''\n    else:\n        str1=str1.lower()\n        str1_count=str1.count('a')\n        index=0\n        for i in range(len(str1)):\n            if str1[i]==str1[i-1]:\n                index=i\n                break\n        return str1[index]\n",
        "num_ids": 92
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #initialize count variable\n    count=0\n    #check for the end\n    if(str1[-1]==str1[0]):\n        return 0\n    #create a loop to iterate over the characters in the string\n    for i in range(len(str1)):\n        #check if the current character is not a duplicate\n        if(str1[i]==str1[i-1]):\n            #increase count if a duplicate\n            count+=1\n    return count",
        "num_ids": 117
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if char == str1[-1]:\n            count += 1\n        else:\n            if count > 1:\n                return char\n            else:\n                return ''\n    return ''\n",
        "num_ids": 53
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeated_char = str1[0]\n    count = 0\n    for char in str1:\n        if char == first_repeated_char:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # defining a dictionary\n    # {'i':1,'s':1, 'd':1}\n    dict = {\n        'i': 1,'s': 1, 'd': 1\n    }\n    # loop through the input string\n    # while's' is not 'i'\n    #   search for's'\n    #   if's' is in dictionary\n    #       add 1 to the counter\n    #   else:\n    #       add 1 to the dictionary\n    #       add 1 to the counter\n    #   return the first repeated character\n    # return the first repeated character\n    count = 0\n    for i in range(len(str1)):\n        if dict[str1[i]] == 1:\n            count += 1\n    if count == 0:\n        return str1[0]\n    else:\n        return str1[count-1]\n",
        "num_ids": 201
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(n):\n        if i > 0:\n            if i % 10 == 0 and i % 15 == 0:\n                ludic_list.append(i)\n    return ludic_list\n",
        "num_ids": 59
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if n % i == 0:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 40
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    from collections import deque\n    lucas = deque()\n    for i in range(1, n+1):\n        if i % 5 == 0 and i > 1:\n            lucas.append(i)\n        if i % 3 == 0:\n            if i > 2:\n                lucas.append(i)\n    return lucas\n",
        "num_ids": 85
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i >= 0 and i <= 1:\n            if i < 9:\n                ludic.append(i)\n        elif i < 10:\n            ludic.append(i)\n        else:\n            ludic.append(i - 9)\n",
        "num_ids": 76
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if i < 20:\n            result.append(i)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if i <= n:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 40
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_lucky(x):\n        if x % 2 == 0:\n            return x / 2\n        else:\n            return (x + 1) / 2\n    return [int(is_lucky(i)) for i in range(1, n+1)]\n",
        "num_ids": 65
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    sol = []\n    for i in range(1,n+1):\n        if n%i==0:\n            sol.append(i)\n    return sol\n",
        "num_ids": 41
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n):\n        if n % i == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(filter(lambda x: x < n, range(1, n+1)))\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reversed = \"\"\n    list_of_words = s.split()\n    for word in list_of_words:\n        reversed += word[::-1] + \" \"\n",
        "num_ids": 47
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join([w.lower().strip() for w in s.split()])\n",
        "num_ids": 22
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # write a reverse function\n    # make a dictionary where key is the word and value is the next to the next word\n    dictionary = dict()\n    for word in s.split():\n        if word in dictionary:\n            dictionary[word] += \" \" + word[::-1]\n        else:\n            dictionary[word] = word[::-1]\n    # print the dictionary\n    for word in dictionary:\n        print(word)\n",
        "num_ids": 106
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    try:\n        return''.join(s.split()[::-1])\n    except:\n        return ''\n    \ndef middle_word(s):\n    '''\n    Write a function to return a single word that contains an odd or even number of words.\n    '''\n    result = ''\n    num_words = 0\n    for word in s.split():\n        num_words += 1\n        if num_words % 2 == 1:\n            result += word +''\n        else:\n            result += word\n    return result.strip()\n    \ndef reverse_middle_words(s):\n    '''\n    Write a function to return a single word that contains an odd or even number of words that ends in 'e'.\n    '''\n    result = ''\n    num_words = 0\n    for word in s.split():\n        if word[-1] == 'e':\n            num_words += 1\n            result += word +''\n        else:\n            result += word\n    return result.strip()\n    \ndef words_count(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        num_words += 1\n        if word == 'e':\n            break\n    return num_words\n    \ndef words_length(s):\n    '''\n    Write a function that returns the length of the longest word in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        num_words += 1\n        if word == 'e':\n            break\n    return num_words\n    \ndef words_string(s):\n    '''\n    Write a function that returns the string of all the words in a given string.\n    '''\n    result = ''\n    for word in s.split():\n        result += word\n    return result\n    \ndef words_string_length(s):\n    '''\n    Write a function that returns the length of the longest word in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        num_words += 1\n        if word == 'e':\n            break\n    return num_words\n    \ndef words_count_reverse(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_count_reverse(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_string(s):\n    '''\n    Write a function that returns the string of all the words in a given string.\n    '''\n    result = ''\n    for word in s.split():\n        result += word\n    return result\n    \ndef reverse_words_string_length(s):\n    '''\n    Write a function that returns the length of the longest word in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_count(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_count_reverse(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_string_count(s):\n    '''\n    Write a function that returns the string of all the words in a given string.\n    '''\n    result = ''\n    for word in s.split():\n        if word == 'e':\n            break\n        result += word\n    return result\n    \ndef reverse_words_string_count_reverse(s):\n    '''\n    Write a function that returns the string of all the words in a given string.\n    '''\n    result = ''\n    for word in s.split():\n        if word == 'e':\n            break\n        result += word\n    return result\n    \ndef reverse_words_string_length(s):\n    '''\n    Write a function that returns the length of the longest word in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_string_count_reverse(s):\n    '''\n    Write a function that returns the string of all the words in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_string_length_reverse(s):\n    '''\n    Write a function that returns the length of the longest word in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef words_string_count(s):\n    '''\n    Write a function that returns the number of words in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_string_count_reverse(s):\n    '''\n    Write a function that returns the number of words in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_string_length_reverse(s):\n    '''\n    Write a function that returns the length of the longest word in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_count(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_count_reverse(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_string_count(s):\n    '''\n    Write a function that returns the string of all the words in a given string.\n    '''\n    result = ''\n    for word in s.split():\n        if word == 'e':\n            break\n        result += word\n    return result\n    \ndef reverse_words_string_length_reverse(s):\n    '''\n    Write a function that returns the length of the longest word in a given string.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    \ndef reverse_words_count_reverse_count(s):\n    '''\n    Write a function that returns the number of times a string appears as a word.\n    '''\n    num_words = 0\n    for word in s.split():\n        if word == 'e':\n            break\n        num_words += 1\n    return num_words\n    ",
        "num_ids": 43
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return ''\n    s = s[::-1]\n    word = []\n    for i in range(0, len(s)):\n        word.append(s[i])\n    return''.join(word)\n",
        "num_ids": 63
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i].upper()\n    return \" \".join(words)\n",
        "num_ids": 44
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    print(l)\n    \n    output = ''\n    for word in l:\n        output = word + output\n    print(output)\n    \n    return output\n    \n",
        "num_ids": 51
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res=''\n    if type(s)!=str:\n        print(\"Error: no argument.\")\n        return\n    for i in range(len(s)):\n        if i<len(s)-1:\n            if s[i]!=' ':\n                res+=' '+s[i]\n        else:\n            res+=' '+s[i]\n    return res\n",
        "num_ids": 93
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    divisors = []\n    for i in range(2, num):\n        if num % i == 0:\n            divisors.append(i)\n        if len(divisors) > 2:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    num = int(num)\n    if num == 1 or num == 0:\n        return False\n    else:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(num):\n        '''\n        return True if num is prime.\n        '''\n        if num == 2 or num == 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(num) + 1), 6):\n            if num % i == 0:\n                return False\n        return True\n        \n    if num < 2 or num == 0:\n        return False\n    if num == 1:\n        return False\n    if is_prime(num) == True:\n        return True\n    else:\n        for i in range(5, int(math.sqrt(num) + 1), 6):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef palindrome_check(palindrome):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    if palindrome[::-1] == palindrome:\n        return True\n    return False\n    \n",
        "num_ids": 28
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num + 1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef find_num(num):\n    '''\n    Write a function to find a number.\n    '''\n    for i in range(2, num + 1):\n        if num % i == 0:\n            return i\n    return \"We can't find the number\"\n",
        "num_ids": 39
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    is_prime = True\n    for n in range(2, int(num / 2) + 1):\n        if num % n == 0:\n            is_prime = False\n            break\n    return is_prime\n",
        "num_ids": 52
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef deg_radian(deg_deg):\n    '''\n    Convert degrees to radians.\n    '''\n    return deg_deg * (math.pi / 180)\ndef sign(num):\n    '''\n    Return the sign of a number.\n    '''\n    if num < 0:\n        return -1\n    return 1\ndef range_radian(min,max):\n    '''\n    Return a list of radians between a min and max.\n    '''\n    return [radian_degree(i) for i in range(min,max)]\ndef range_deg_radian(min,max):\n    '''\n    Return a list of degrees between a min and max.\n    '''\n    return [deg_radian(i) for i in range(min,max)]\ndef add(x,y):\n    '''\n    Return the sum of two numbers.\n    '''\n    return (x+y)\ndef sub(x,y):\n    '''\n    Return the difference of two numbers.\n    '''\n    return (x-y)\ndef mul(x,y):\n    '''\n    Return the product of two numbers.\n    '''\n    return (x*y)\ndef div(x,y):\n    '''\n    Return the quotient of two numbers.\n    '''\n    return (x/y)\ndef mod(x,y):\n    '''\n    Return the modulus of two numbers.\n    '''\n    return (x%y)\ndef all_values(input_list):\n    '''\n    Return the list of all values in a list.\n    '''\n    return [i for i in input_list]\ndef is_list(x):\n    '''\n    Return True if the object x is a list. Otherwise, return False.\n    '''\n    return isinstance(x,list)\ndef is_int(x):\n    '''\n    Return True if the object x is an int, otherwise return False.\n    '''\n    return isinstance(x,int)\ndef is_float(x):\n    '''\n    Return True if the object x is a float, otherwise return False.\n    '''\n    return isinstance(x,float)\ndef is_string(x):\n    '''\n    Return True if the object x is a string, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_boolean(x):\n    '''\n    Return True if the object x is a boolean, otherwise return False.\n    '''\n    return isinstance(x,bool)\ndef is_number(x):\n    '''\n    Return True if the object x is a number, otherwise return False.\n    '''\n    return isinstance(x,int) or isinstance(x,float) or isinstance(x,str) or isinstance(x,bool)\ndef is_datetime(x):\n    '''\n    Return True if the object x is a datetime, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_tz(x):\n    '''\n    Return True if the object x is a datetime with a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_string_with_tz(x):\n    '''\n    Return True if the object x is a string with a timezone, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_datetime_with_timezone(x):\n    '''\n    Return True if the object x is a datetime with a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date(x):\n    '''\n    Return True if the object x is a date, otherwise return False.\n    '''\n    return isinstance(x,date)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time(x):\n    '''\n    Return True if the object x is a date, time, or datetime, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_datetime_with_timezone_and_timezone_is_with_tz(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and a timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and another timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is_with_tz_and_tz_is_with_tz(x):\n    '''\n    Return True if the object x is a date, time, or datetime, with a timezone and a timezone, with a timezone, with a timezone, and another timezone, and another timezone, and another timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or isinstance(x,time) or isinstance(x,datetime)\ndef is_string_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a string with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,str)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_datetime_with_tz_and_tz_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,datetime)\ndef is_date_time_with_timezone_and_timezone_is(x):\n    '''\n    Return True if the object x is a datetime with a timezone and a timezone, otherwise return False.\n    '''\n    return isinstance(x,date) or i",
        "num_ids": 13
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n",
        "num_ids": 17
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180)\n    return rad\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (180/math.pi)\n    return radian\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (180/math.pi)\ndef degree_to_radian(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return radian_degree(degree)\ndef get_input():\n    '''\n    Takes as input a string of form '6.2'\"\n    and returns the angle as a float.\n    '''\n    return float(input('Enter angle in degrees: '))\ndef get_input_int():\n    '''\n    Takes as input an integer and returns that number as an int.\n    '''\n    return int(input('Enter angle in degrees: '))\ndef sign_of_angle(angle):\n    '''\n    Determines whether or not the angle given is positive or negative.\n    '''\n    if angle >= 0:\n        return 1\n    else:\n        return -1\ndef radians_to_sign(angle):\n    '''\n    Converts degrees to radians.\n    '''\n    return angle * (180/math.pi)\ndef sign_of_radians(angle):\n    '''\n    Determines whether or not the angle given is positive or negative.\n    '''\n    if angle >= 0:\n        return 1\n    else:\n        return -1\ndef distance_between_two_points(point1, point2):\n    '''\n    Calculates the distance between two points.\n    '''\n    return (point1[0] - point2[0])**2 + (point1[1] - point2[1])**2\ndef within_range(x_value, y_value):\n    '''\n    Returns True if the distance between the coordinates is within the specified value.\n    '''\n    return distance_between_two_points(x_value, y_value) <= radius\ndef get_distances(points):\n    '''\n    Given a list of points, this function calculates the distances from each point to the origin.\n    '''\n    distances = []\n    for i in range(len(points)):\n        distances.append(distance_between_two_points(points[i], points[0]))\n    return distances\ndef get_min_distances(distances):\n    '''\n    Given a list of distances, this function returns the minimum distance.\n    '''\n    min_dist = min(distances)\n    return min_dist\ndef get_closest_point(points, point):\n    '''\n    Given a list of points, this function returns the closest point to the given point.\n    '''\n    closest_point = None\n    min_dist = get_min_distances(get_distances(points))\n    for point_index in range(len(points)):\n        point_distance = distance_between_two_points(points[point_index], point)\n        if point_distance < min_dist:\n            closest_point = point_index\n            min_dist = point_distance\n    return closest_point\ndef get_closest_points(points):\n    '''\n    Given a list of points, this function returns the closest points to each one.\n    '''\n    closest_points = []\n    for point in points:\n        closest_point = get_closest_point(points, point)\n        closest_points.append(closest_point)\n    return closest_points\ndef get_point_name(point):\n    '''\n    Given a point, this function returns a string of the form \"x y\".\n    '''\n    return str(point[0]) +'' + str(point[1])\ndef get_point_name_with_values(point):\n    '''\n    Given a point, this function returns a string of the form \"x y x_value y_value\"\n    '''\n    return str(point[0]) +'' + str(point[1]) +'' + str(point[0]) +'' + str(point[1]) + '_value'\ndef get_point_name_with_x_and_y(point):\n    '''\n    Given a point, this function returns a string of the form \"x_value y_value\".\n    '''\n    return str(point[0]) +'' + str(point[1]) + '_x_value'+ str(point[1]) +'y_value'\ndef get_point_name_with_x_and_y_and_value(point):\n    '''\n    Given a point, this function returns a string of the form \"x_value y_value\"\n    '''\n    return str(point[0]) +'' + str(point[1]) + '_x_value'+ str(point[1]) + '_value'\ndef get_point_name_with_value(point):\n    '''\n    Given a point, this function returns a string of the form \"x value y_value\"\n    '''\n    return str(point[0]) +'' + str(point[1]) + '_value'\ndef get_point_name(point):\n    '''\n    Given a point, this function returns a string of the form \"x y\"\n    '''\n    return str(point[0]) +'' + str(point[1])\ndef get_point_x_y_values(point):\n    '''\n    Given a point, this function returns a list of values of the form [x_value, y_value]\n    '''\n    x_values = []\n    y_values = []\n    for i in range(len(point)):\n        x_values.append(point[i][0])\n        y_values.append(point[i][1])\n    return [x_values, y_values]\ndef get_point_x_y_values_with_values(point):\n    '''\n    Given a point, this function returns a list of values of the form [x_value, y_value, x_value_value, y_value_value]\n    '''\n    x_values = []\n    y_values = []\n    x_values_values = []\n    y_values_values = []\n    for i in range(len(point)):\n        x_values.append(point[i][0])\n        y_values.append(point[i][1])\n        x_values_values.append(point[i][0])\n        y_values_values.append(point[i][1])\n    return [x_values, y_values, x_values_values, y_values_values]\ndef get_point_x_y_values_with_x_and_y(point):\n    '''\n    Given a point, this function returns a list of values of the form [x_value, y_value, x_value_x, y_value_y]\n    '''\n    x_values = []\n    y_values = []\n    x_values_values = []\n    y_values_values = []\n    for i in range(len(point)):\n        x_values.append(point[i][0])\n        y_values.append(point[i][1])\n        x_values_values.append(point[i][0])\n        y_values_values.append(point[i][1])\n    return [x_values, y_values, x_values_values, y_values_values]\ndef get_point_x_y_values_with_x_and_y_and_value(point):\n    '''\n    Given a point, this function returns a list of values of the form [x_value, y_value, x_value_x, y_value_y, value]\n    '''\n    x_values = []\n    y_values = []\n    x_values_values = []\n    y_values_values = []\n    x_values_values_values = []\n    y_values_values_values = []\n    for i in range(len(point)):\n        x_values.append(point[i][0])\n        y_values.append(point[i][1])\n        x_values_values.append(point[i][0])\n        y_values_values.append(point[i][1])\n        x_values_values_values.append(point[i][0])\n        y_values_values_values.append(point[i][1])\n    return [x_values, y_values, x_values_values, y_values_values, x_values_values_values, y_values_values_values]",
        "num_ids": 203
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = math.radians(degree)\n    return degree\n",
        "num_ids": 17
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    return degree * 2 * math.pi / 180\ndef temperature(degree):\n    '''\n    Convert degree to kelvin.\n    '''\n    degree = degree % 360\n    return degree * 9/5 + 32\ndef pressure(degree):\n    '''\n    Convert degree to bar.\n    '''\n    return degree * 3.2808\ndef linear(k,n,m):\n    '''\n    The linear equation of a cubic Bezier curve is K(k,n,m) = c^n(k+m)\n    '''\n    return k * (m * n**2 - n * m**2)\ndef spline(degree, knot):\n    '''\n    Write a function to calculate the spline coefficients of a cubic Bezier curve.\n    '''\n    if knot > degree:\n        return None\n    elif degree < 3:\n        return None\n    else:\n        k = knot * (degree - 2) / 2\n        s = 3 - (k * k)\n        return math.exp(-k / s)\ndef cubic_spline(degree, k, n, m):\n    '''\n    Write a function to calculate the spline coefficients of a cubic Bezier curve.\n    '''\n    return spline(degree, k) * spline(degree, n) * spline(degree, m)\ndef interp(x, a, b):\n    '''\n    Write a function that computes the interpolated values of a piecewise-linear function.\n    '''\n    return a * (x - a) + b\ndef make_interpolator(degree, k):\n    '''\n    Calculate the parameters for a cubic Bezier curve.\n    '''\n    return cubic_spline(degree, k, 0, 1)\ndef make_spline(degree, knot):\n    '''\n    Calculate the parameters for a piecewise-linear function.\n    '''\n    return cubic_spline(degree, knot, 0, 1)\ndef cubic_spline_interpolation(degree, k, n, m):\n    '''\n    Calculate the spline parameters for a cubic Bezier curve.\n    '''\n    return cubic_spline(degree, k, n, m)\ndef cubic_spline_interpolation_interpolated(degree, k, n, m):\n    '''\n    Calculate the interpolated spline parameters for a cubic Bezier curve.\n    '''\n    return cubic_spline(degree, k, n, m)\ndef get_knots(degree, knot):\n    '''\n    Return the values of the spline knots.\n    '''\n    return [knot for i in range(degree + 1)]\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 1)\ndef knot_m(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 3)\ndef knot_m(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 4)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 5)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 6)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 7)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 8)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 9)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 10)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 11)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 12)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 13)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 14)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 15)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 16)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 17)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 18)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 19)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 20)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 21)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 22)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 23)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 24)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 25)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 26)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 27)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 28)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 29)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 30)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 31)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 32)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 33)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 34)\ndef knot_n(degree):\n    '''\n    Return the values of the spline knots.\n    '''\n    return get_knots(degree, 35)\ndef knot_n(degree):\n",
        "num_ids": 23
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree*math.pi/180\n    return radian_degree\n",
        "num_ids": 23
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "num_ids": 14
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for i in range(0, len(pattern)):\n        if pattern[i] == '?':\n            continue\n        if pattern[i] == '*':\n            continue\n        if pattern[i] == '+':\n            continue\n        if pattern[i] == '.':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '[' or pattern[i] == ']':\n            continue\n        if pattern[i] == '}':\n            continue\n        if pattern[i] == '{':\n            continue\n        if pattern[i] == '\"':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '.':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '.':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '}':\n            continue\n        if pattern[i] == '{':\n            continue\n        if pattern[i] == '\"' or pattern[i] == '''':\n            continue\n        if pattern[i] == '\"' or pattern[i] == '''':\n            continue\n        if pattern[i] == '{':\n            continue\n        if pattern[i] == '}':\n            continue\n        if pattern[i] == '\"':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n            continue\n        if pattern[i] == '\\'' or pattern[i] == '\\'':\n        ",
        "num_ids": 1663
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substring = \"\"\n    index = 0\n    end = 0\n    while index < len(text):\n        if pattern.match(text[index:])!= None:\n            substring = text[index:index+len(pattern.pattern)]\n            index = index + len(pattern.pattern)\n            end = index\n        else:\n            index = index + 1\n    return substring, index, end\n",
        "num_ids": 97
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # TODO: YOUR SOLUTION\n    result = re.search(pattern, text)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = len(text)\n    matched_substring = \"\"\n    for i in range(start_index, end_index):\n        if pattern.search(text[i]):\n            start_index = i\n            matched_substring = text[start_index:i+1]\n            break\n    return start_index, matched_substring, end_index\n",
        "num_ids": 96
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    start = 0\n    end = -1\n    start_pos = None\n    end_pos = None\n    while True:\n        start_match = pattern.search(text, start)\n        end_match = pattern.search(text, end)\n        if start_match:\n            start = start_match.start()\n        elif end_match:\n            end = end_match.end()\n        else:\n            return start, end, 0, len(text)\n        if end_match:\n            end = end_match.end()\n        elif start_match:\n            start = start_match.end()\n        elif end == len(text):\n            break\n",
        "num_ids": 171
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.replace('\\n',' ')\n    pattern = pattern.replace('\\n',' ')\n    m = re.search(pattern,text)\n    return m\n",
        "num_ids": 44
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = []\n    index = 0\n    length = len(text)\n    while index < length:\n        match = re.search(pattern, text[index:])\n        if match:\n            matches.append([index, match.start(), match.end()])\n            index = match.end()\n        else:\n            index = index + 1\n    return matches\n",
        "num_ids": 89
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    while True:\n        if not pattern.match(text[index:index+len(pattern)]):\n            index += len(pattern)\n            continue\n        match = re.match(pattern, text[index:index+len(pattern)])\n        if not match:\n            raise Exception(\"Regular expression not found\")\n        if len(match.group()) == len(pattern):\n            return match.span(), match.start(), match.end()\n        else:\n            index += len(pattern)\n",
        "num_ids": 120
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find all the letters\n    literals = re.findall(pattern, text)\n",
        "num_ids": 23
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    i = 0\n    len_text = len(text)\n    while i < len_text:\n        if re.search(pattern, text[i:i+len(pattern)]):\n            return text[i:i+len(pattern)], i, i+len(pattern)\n        i += len(pattern)\n    return None\n",
        "num_ids": 80
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    s = list(str(n))\n    for i in range(1,len(s)):\n        if s[i] == \"0\":\n            break\n        else:\n            s[i] = str(int(s[i]) + 1)\n    s = \"\".join(s)\n    print(s)\n    return int(s)\n",
        "num_ids": 85
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here.\n    return(n*(n+1)/2)\n",
        "num_ids": 23
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    x = 1\n    while(x <= n):\n        x = x*(x+1)/2\n    return x\n    pass\n",
        "num_ids": 34
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num=1\n    while num<=n:\n        print(num)\n        num=num*3+1\n    return \"The number is a prime number\"\n",
        "num_ids": 41
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + n\n",
        "num_ids": 30
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    n = int(n)\n    if n%2==1:\n        return math.factorial(n+1)/(math.factorial(n-1)*math.factorial(n-2))\n    else:\n        return math.factorial(n-1)/(math.factorial(n-1)*math.factorial(n-2))\n",
        "num_ids": 89
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    print(n)\n    for i in range(1, n+1):\n        print(i)\n    return\n",
        "num_ids": 30
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n >1:\n        for i in range(1,n):\n            print(i,end=\" \")\n            for j in range(i,0,-1):\n                if(i==j):\n                    print(i,end=\" \")\n                else:\n                    print(j,end=\" \")\n    else:\n        print(0)\n",
        "num_ids": 85
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    return bell_Number(n - 1) + bell_Number(n - 2) \n",
        "num_ids": 34
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []: return []\n    if len(L) == 1: return [L[0]]\n    if L[0] == L[-1]: return remove_kth_element(L[1:], L[:-1])\n    return [L[0]] + remove_kth_element(L[1:], L[:-1])\n",
        "num_ids": 84
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]\n",
        "num_ids": 11
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # write your code here\n    return list1\n",
        "num_ids": 14
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    for i in range(len(new_list)):\n        if i == L:\n            new_list.pop(i)\n    return new_list\n",
        "num_ids": 64
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp = list1[L]\n    temp2 = list1.pop(L)\n    return temp2\n",
        "num_ids": 28
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    assert L >= 0, 'L argument must be greater than zero'\n    assert L <= len(list1), 'L argument must be less than or equal to the length of the list'\n    assert L > 0, 'k argument must be greater than zero'\n    assert type(list1) is list, 'list argument must be of type list'\n    assert type(L) is int and L > 0, 'k argument must be greater than or equal to the length of the list'\n    # (1) declare a new variable with the correct name and value\n    removed = []\n    # (2) iterate through the list and remove the k'th element\n    for i in range(0, len(list1)):\n        if i!= L-1:\n            removed.append(list1[i])\n    # (3) return the list without the k'th element\n    return removed\n",
        "num_ids": 206
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    p = []\n    for i in range(L):\n        p.append(list1[i])\n    return p\n",
        "num_ids": 31
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L==1:\n        return []\n    for i in range(len(list1)-1,L-1,-1):\n        temp=list1[i]\n        list1[i]=list1[i-1]\n        list1[i-1]=temp\n    return list1\n",
        "num_ids": 71
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return [], []\n    else:\n        kth = int(len(list1) / L[0])\n        return remove_kth_element(list1, L[0:kth]) + remove_kth_element(list1, L[kth:len(list1)])\n",
        "num_ids": 78
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    return max(test_list[n-1][i] for i in range(N))\n",
        "num_ids": 34
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N==0:\n        return 0\n    if N==1:\n        return test_list[0][0]\n    else:\n        return max_of_nth(test_list,N-1)\n",
        "num_ids": 53
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        max_list = test_list[0][N]\n        for i in range(1, len(test_list)):\n            if max_list[N] < test_list[i][N]:\n                max_list = test_list[i][N]\n    return max_list\n",
        "num_ids": 90
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth_number = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_of_nth_number:\n            max_of_nth_number = row[N]\n    return max_of_nth_number\n",
        "num_ids": 73
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #raise NotImplementedError\n    \n    pass\n    \n    ",
        "num_ids": 19
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    return test_list[-1][N-1]\n",
        "num_ids": 22
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return 0\n    if len(test_list) == 1:\n        return test_list[0][N-1]\n    return max_of_nth(test_list[1:], N-1)\n",
        "num_ids": 59
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda col: col[N-1])\n",
        "num_ids": 22
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[n][0] for n in range(N))\n",
        "num_ids": 22
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Write your code here\n    return max(test_list[0])\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final = []\n    for i in range(len(lst)):\n        final.append([lst[i][0],lst[i][1]])\n    return final\n    \ndef insert_middle(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for i in range(len(lst)):\n        new.append(lst[i][0])\n        new.append(lst[i][1])\n    return new\n    \ndef remove_middle(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for i in range(len(lst)):\n        if len(lst[i][0]) == 2:\n            new.append(lst[i][0])\n        else:\n            new.append(lst[i][1])\n    return new\n    \ndef merge_2(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final = []\n    for i in range(len(lst)):\n        if len(lst[i][0]) == 2:\n            final.append(lst[i][0])\n        else:\n            final.append(lst[i][1])\n    return final\n",
        "num_ids": 69
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[element1, element2] for element1 in lst for element2 in lst]\n",
        "num_ids": 25
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    def merge_lists(lst1, lst2):  \n        '''\n        Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n        '''\n        lst_merge = []\n        \n        for i in range(len(lst1)):  \n            lst_merge.append([lst1[i][0], lst2[i][0]])\n",
        "num_ids": 55
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l = []\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i])\n    return l\n",
        "num_ids": 39
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        lst = sorted(lst, key=lambda x: x[0])\n        # Add empty sublists\n        lst = [lst[0]] + lst[1:]\n        # Add new sublists to the end\n        return lst\n    #    return [lst[0][0]] + lst[1:]\n",
        "num_ids": 99
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_1 = []\n    lst_2 = []\n    for i in lst:\n        for j in i:\n            lst_1.append(j)\n        \n    for i in lst:\n        for j in i:\n            lst_2.append(j)\n",
        "num_ids": 72
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return lst\n    else:\n        return merge(lst[0:len(lst)//2]) + merge(lst[len(lst)//2:len(lst)])\n",
        "num_ids": 60
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list1 = []\n    list2 = []\n    for i in lst:\n        if len(i) == 1:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return list1, list2\n",
        "num_ids": 62
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def mergeSort(lst):\n        '''\n        Sort the lists and then return the sorted list.\n        '''\n        if len(lst) > 1:\n            mid = len(lst) // 2\n            left = lst[:mid]\n            right = lst[mid:]\n            mergeSort(left)\n            mergeSort(right)\n            i = j = k = 0\n            while i < len(left) and j < len(right):\n                if left[i] < right[j]:\n                    lst[k] = left[i]\n                    i += 1\n                else:\n                    lst[k] = right[j]\n                    j += 1\n                k += 1\n            while i < len(left):\n                lst[k] = left[i]\n                i += 1\n                k += 1\n            while j < len(right):\n                lst[k] = right[j]\n                j += 1\n                k += 1\n    mergeSort(lst)\n    return lst\n",
        "num_ids": 215
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0],lst[i][1]])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for item in test_list:\n        result.append(sum(item))\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n",
        "num_ids": 37
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(map(abs, test_list))\n",
        "num_ids": 15
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][j] > 0:\n                test_list[i][j] = test_list[i][j] + test_list[j][i]\n            else:\n                test_list[i][j] = 0\n    return test_list\n",
        "num_ids": 100
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    # Use an incomplete dictionary\n    def cal_cummulative(lst, key):\n        if key in lst:\n            return lst[key]\n        else:\n            lst[key] = 0\n            return 0\n    cummulative_lst = {}\n    for x in test_list:\n        lst = {lst}\n        for y in x:\n            if y in lst:\n                lst[y] = lst[y] + 1\n            else:\n                lst[y] = 1\n    # print(lst)\n    for x in lst:\n        cummulative_lst[x] = cal_cummulative(lst, x)\n    return cummulative_lst\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2006
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = 0\n    for i in test_list:\n        cummulative = cummulative + i\n    return cummulative\n",
        "num_ids": 35
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum\n    \n    \ndef test_all_functions(test_list):\n    '''\n    Tests all the functions in the calculator module.\n    '''\n    assert abs(calculator.add(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.multiply(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.subtract(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.divide(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.calculate(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.remainder(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.remaining_digits(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_position(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10], test_list[11]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15], test_list[16]) - test_list[2]) < 0.00001, \"ERROR: TEST FAILED\"\n    assert abs(calculator.find_sum(test_list[0], test_list[1], test_list[2], test_list[3], test_list[4], test_list[5], test_list[6], test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15], test_list[16]",
        "num_ids": 1939
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for num in test_list:\n        sum = sum + num\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the variable with the sum of all the values.\n    cummulative_sum = 0\n    # Loop through the tuple and add to the variable.\n    for i in test_list:\n        cummulative_sum += i\n    # Return the variable.\n    return cummulative_sum\n",
        "num_ids": 72
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_tuple = [tuple(num) for num in nums]\n    result = []\n    for i in range(len(list_tuple)):\n        result.append(sum(list_tuple[i])/len(list_tuple[i]))\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in zip(*nums)]\n",
        "num_ids": 23
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in nums:\n        average.append(sum(i)/len(i))\n    return average\n",
        "num_ids": 33
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # write your code here\n    list_of_tuples = []\n    for n in nums:\n        list_of_tuples.append(n)\n    return [int(sum(list_of_tuples)/len(list_of_tuples)) for i in range(len(list_of_tuples))]\n",
        "num_ids": 79
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        total = 0\n        for num in num_tuple:\n            total += num\n        avg_list.append(total/len(num_tuple))\n    return avg_list\n",
        "num_ids": 65
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for x in nums:\n        print(x)\n        avg.append(round(sum(x)/len(x)))\n    return avg\n",
        "num_ids": 43
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for x in nums:\n        total.append(sum(x)/len(x))\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    s=[]\n    for x in nums:\n        s+=x\n    return s/len(nums)\n",
        "num_ids": 30
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for tup in nums:\n        total.append(sum(tup)/len(tup))\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for item in nums:\n        for value in item:\n            result.append(value)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a%b for a,b in zip(test_tup1,test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # return tuple_modulo(test_tup1, test_tup2)\n    return tuple((test_tup1[i] % test_tup2[i]) for i in range(len(test_tup1)))\n",
        "num_ids": 58
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    tup1_mod = []\n    tup2_mod = []\n    tup1_mod.append(test_tup1[0] % test_tup2[0])\n    tup2_mod.append(test_tup1[1] % test_tup2[1])\n    return tup1_mod, tup2_mod\n",
        "num_ids": 94
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup = test_tup1 + test_tup2\n    return tuple(x%y for x,y in zip(tup,tuple(range(1, len(tup)+1))))\n",
        "num_ids": 50
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # function is applied to each element\n    # for example, tuple1 = (1,2,3,4,5,6)\n    # tuple2 = (4,3,2,1)\n    # resulting in tuple1 = (4,3,2,5,6)\n    # result = tuple1[2] % tuple2[1] = 3\n    # resulting in result = 3, if result is 0 it means tuple2 is less than tuple1\n    # result = tuple1[2] % tuple2[2] = 5\n    # resulting in result = 5, if result is 0 it means tuple2 is less than tuple1\n    # result = tuple1[2] % tuple2[2] = 6\n    # resulting in result = 6, if result is 0 it means tuple2 is less than tuple1\n    # tuple1[1] % tuple2[2] = 5\n    # resulting in tuple1[1] = 5, if tuple1[1] is 0 it means tuple2 is less than tuple1\n    # tuple1[1] % tuple2[2] = 3\n    # resulting in tuple1[1] = 3, if tuple1[1] is 0 it means tuple2 is less than tuple1\n",
        "num_ids": 279
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    output_tuple = ()\n    # Add the two tuples of the same length to the output tuple\n    if len(test_tup1)!= len(test_tup2):\n        # First add the length of the tuples of the length of the first tuple and remove it from the length of the second tuple\n        output_tuple = (test_tup1[-1] + test_tup2[-1])\n        # Convert the tuples of the same length to a tuple of tuples\n        test_tuple1 = test_tup1[:-1]\n        test_tuple2 = test_tup2[:-1]\n    # Find the element of the tuple of the length of the two tuples\n    for i in range(len(test_tup1)):\n        # Check if the element of the tuple of the length of the two tuples matches the index of the tuple from the tuple of the first tuple\n        if test_tuple1[i] == test_tup2[i]:\n            # If the element of the tuple is the same, remove it from the tuple\n            test_tuple1[i] = 0\n        # Check if the element of the tuple of the length of the two tuples is smaller than the element of the tuple of the first tuple\n        elif test_tuple1[i] < test_tup2[i]:\n            # If the element of the tuple of the length of the two tuples is less than the element of the tuple of the first tuple, then convert it to the tuple of the second tuple\n            output_tuple = (output_tuple[0] + test_tuple1[i] + test_tuple2[i])\n        # Check if the element of the tuple of the length of the two tuples is greater than the element of the tuple of the first tuple\n        elif test_tuple1[i] > test_tup2[i]:\n            # If the element of the tuple of the length of the two tuples is greater than the element of the tuple of the first tuple, then convert it to the tuple of the second tuple\n            output_tuple = (test_tuple1[0] + test_tuple1[i] + test_tuple2[i])\n",
        "num_ids": 515
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(f'Test tuple {test_tup1} is modulo of tuple {test_tup2}.')\n    try:\n        print(f'Element in tuple {test_tup1[0]}.')\n    except:\n        print('Could not find index of tuple.')\n    try:\n        print(f'Element in tuple {test_tup2[0]}.')\n    except:\n        print('Could not find index of tuple.')\n    try:\n        mod = list(map(lambda x: x % 2, test_tup1))\n    except:\n        print('Element in tuple does not contain any even numbers.')\n    try:\n        mod = list(map(lambda x: x % 2, test_tup2))\n    except:\n        print('Element in tuple does not contain any even numbers.')\n    if mod == [0, 0, 0, 0, 0]:\n        print('All elements of tuple are in odd form.')\n    else:\n        print('Tuple is modulo by itself.')\n",
        "num_ids": 246
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # create new tuple using '%' operator\n    mod_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    # create result tuple\n    res_tup = tuple(map(lambda x, y: x * y, mod_tup, test_tup2))\n    return res_tup\n",
        "num_ids": 89
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #def test_modulo(tup1, tup2):\n        #result = tup1 % tup2\n        #return result\n    \n    #return tuple_modulo(test_tup1, test_tup2)\n",
        "num_ids": 59
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    x,y = steps\n    J = x+y \n    d = abs(x)+abs(y)\n    \n    if d > J:\n        return 0\n    elif d == J:\n        return d\n    elif d == 0:\n        return 0\n    \n    else:\n        return min(min_Jumps(steps,d-1), min_Jumps(steps, d)) + 1\n",
        "num_ids": 101
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # check if starting point is on the plane\n    if d == 0: \n        return steps \n    # if the starting point is outside the plane, then the step is already taken\n    else: \n        return steps + 1\n        \ndef min_Jumps_1(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # check if starting point is on the plane\n    if d == 0: \n        return steps \n    # if the starting point is outside the plane, then the step is already taken\n    else: \n        steps += 1\n        # if the point is already in the plane, then the step is already taken\n        if steps == d:\n            return steps\n        # otherwise, check if the number of jumps is still less than the given value\n        else: \n            return min_Jumps(steps, d - 1)\n            \ndef test_min_Jumps(d):\n    '''\n    Function to test the correctness of the provided function.\n    '''\n    # test case 1\n    # D = 1\n    # steps = 0\n    # expected = 0\n    # actual = 0\n    \n    # test case 2\n    # D = 1\n    # steps = 0\n    # expected = 0\n    # actual = 1\n    \n    # test case 3\n    # D = 1\n    # steps = 0\n    # expected = 0\n    # actual = 1\n    \n    # test case 4\n    # D = 2\n    # steps = 0\n    # expected = 1\n    # actual = 1\n    \n    # test case 5\n    # D = 2\n    # steps = 0\n    # expected = 2\n    # actual = 1\n    \n    # test case 6\n    # D = 3\n    # steps = 0\n    # expected = 2\n    # actual = 3\n    \n    # test case 7\n    # D = 3\n    # steps = 0\n    # expected = 3\n    # actual = 3\n    \n    # test case 8\n    # D = 4\n    # steps = 0\n    # expected = 3\n    # actual = 4\n    \n    # test case 9\n    # D = 5\n    # steps = 0\n    # expected = 4\n    # actual = 6\n    \n    # test case 10\n    # D = 5\n    # steps = 0\n    # expected = 4\n    # actual = 5\n    \n    # test case 11\n    # D = 5\n    # steps = 0\n    # expected = 5\n    # actual = 5\n    \n    # test case 12\n    # D = 6\n    # steps = 0\n    # expected = 5\n    # actual = 6\n    \n    # test case 13\n    # D = 6\n    # steps = 0\n    # expected = 5\n    # actual = 6\n    \n    # test case 14\n    # D = 6\n    # steps = 0\n    # expected = 5\n    # actual = 6\n    \n    # test case 15\n    # D = 7\n    # steps = 0\n    # expected = 5\n    # actual = 7\n    \n    # test case 16\n    # D = 7\n    # steps = 0\n    # expected = 5\n    # actual = 7\n    \n    # test case 17\n    # D = 8\n    # steps = 0\n    # expected = 5\n    # actual = 8\n    \n    # test case 18\n    # D = 8\n    # steps = 0\n    # expected = 5\n    # actual = 8\n    \n    # test case 19\n    # D = 9\n    # steps = 0\n    # expected = 5\n    # actual = 9\n    \n    # test case 20\n    # D = 9\n    # steps = 0\n    # expected = 5\n    # actual = 9\n    \n    # test case 21\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 22\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 23\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 24\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 25\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 26\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 27\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 28\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 29\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 30\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 31\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 32\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 33\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 34\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 35\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 36\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 37\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 38\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 39\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 40\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 41\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 42\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 43\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 44\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 45\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 46\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 47\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 48\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 49\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 50\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 51\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 52\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 53\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    # test case 54\n    # D = 10\n    # steps = 0\n    # expected = 5\n    # actual = 10\n    \n    ",
        "num_ids": 1731
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def _min_Jumps(steps, d): \n        total_steps = 0\n        prev_x = prev_y = 0\n        curr_x = curr_y = steps[-1][0]\n        for next_step in steps[1:]: \n            total_steps += 1\n            curr_x = next_step[0]\n            curr_y = next_step[1]\n            if curr_x == prev_x and curr_y == prev_y: \n                total_steps += 2\n                prev_x = curr_x\n                prev_y = curr_y\n            else: \n                total_steps = 0\n                return total_steps\n        return total_steps\n    return _min_Jumps(steps, d)\n",
        "num_ids": 185
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = []\n    for i in range(d):\n        jumps.append(steps-i)\n    return jumps.count(min(jumps))\n",
        "num_ids": 40
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Checks if the given step can be reached from the origin.\n    # If the step cannot be reached from the origin, return false.\n    def minJumps(steps, d):\n        j = 0\n        # If the step is length d, return j.\n        # If the step is greater than length d, return false.\n        if (d == 2):\n            return j\n        # If the step is lesser than length d, return false.\n        # If the step is less than length d, return false.\n        else:\n            if (d < 2):\n                return False\n            else:\n                # Compares the steps of the given step with the steps of the last step of the same length.\n                # If it does not equal, return false.\n                if (steps[d-2]!= steps[d]):\n                    return False\n                # If it is equal, increment j.\n                j += 1\n                # If the step is larger than the last step, return false.\n                if (d > 2):\n                    return False\n                # Else, if the step is smaller than the last step, return false.\n                else:\n                    return j\n        # If the step is greater than length d, return false.\n        # If the step is lesser than length d, return false.\n        # If the step is equal to the length of the step, return j.\n        # If the step is less than length d, return false.\n    return minJumps(steps, d)\n",
        "num_ids": 341
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    if (n <= 0):\n        return n\n    for i in range(0, n):\n        if (steps[i][0] == d[0] and steps[i][1] == d[1]):\n            return i\n",
        "num_ids": 65
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if d == 0: \n        return min_Jumps(steps - 1, d + 1) \n",
        "num_ids": 39
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Base Case\n    if (steps == d):\n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    Jumps = 0\n    for i in range(0, steps):\n        if d == (0, 0):\n            return i\n        if d == (1, 0):\n            return 0\n        if d == (0, 1):\n            return steps - 1\n        if d == (0, -1):\n            return steps - 1\n        if d == (-1, 0):\n            return steps - 1\n        if d == (-1, 1):\n            return 0\n        \n    return -1",
        "num_ids": 116
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(0,len(nums1)):\n        for j in range(0,len(nums2)):\n            if nums1[i] > nums2[j]:\n                nums1[i], nums2[j] = nums2[j], nums1[i]\n            elif nums1[i] < nums2[j]:\n                nums1[i], nums2[j] = nums1[j], nums2[i]\n    return nums1,nums2\n",
        "num_ids": 131
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print('Division List')\n    print(nums1)\n    print(nums2)\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 and len(nums2) == 0:\n        return None\n    elif len(nums1) == 0:\n        return nums2\n    elif len(nums2) == 0:\n        return nums1\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i]/nums2[i]\n        return nums1\n",
        "num_ids": 111
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    if nums1[0] > nums2[0]:\n        nums1, nums2 = nums2, nums1\n    if nums1[len(nums1)-1] == nums2[0]:\n        return\n    return nums1[len(nums1)-1]/nums2[0]\n",
        "num_ids": 98
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    a=[]\n    for i in nums1:\n        if i in nums2:\n            a.append(i)\n    return a\n    \n    \n",
        "num_ids": 41
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1=[0]*len(nums2)\n    list2=[0]*len(nums1)\n    i=0\n    for a in range(0,len(nums1)):\n        list1[i]=nums1[a]\n        i=i+1\n    i=0\n    for b in range(0,len(nums2)):\n        list2[i]=nums2[b]\n        i=i+1\n    i=0\n    for a in range(0,len(nums1)):\n        list2[i]=nums1[a]\n        i=i+1\n    return list1,list2\n",
        "num_ids": 161
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [list(nums1),list(nums2)]\n",
        "num_ids": 18
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [list(num) for num in zip(nums1,nums2)]\n",
        "num_ids": 23
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [e for e in nums1 if e in nums2]\n    \n",
        "num_ids": 22
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp = ''\n    for num in range(0, len(test_str)):\n        if (test_str[num].isdigit()):\n            temp += test_str[num]\n            if (temp.isalpha()):\n                continue\n            else:\n                num = temp\n        else:\n            temp += test_str[num]\n    return temp\n",
        "num_ids": 88
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    move_end = []\n    for idx in range(0, len(test_str)):\n        if test_str[idx]!='':\n            move_end.append(test_str[idx])\n        if test_str[idx] =='':\n            if test_str[idx+1]!='':\n                move_end.append(' ')\n                move_end.append(test_str[idx+1])\n    return ''.join(move_end)\n",
        "num_ids": 122
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = '123456789'\n    print(test_str)\n    for i in range(len(test_str)):\n        test_str = test_str[:i] + numbers + test_str[i+1:]\n    return test_str\n",
        "num_ids": 65
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    result_str = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result_str += test_str[i]\n            \n    return result_str\n",
        "num_ids": 58
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    x = 0\n    while x < len(test_str):\n        test_str[x] = test_str[len(test_str)-1-x]\n        x = x - 1\n    return test_str\n",
        "num_ids": 54
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        if test_str[i] == \" \":\n            test_str = test_str[:i] + test_str[i+1:]\n            i = 0\n        else:\n            i += 1\n",
        "num_ids": 67
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = test_str.split(' ')\n    new_list = []\n    for num in test_str_list:\n        new_list.append(num)\n    new_list.append(test_str)\n    return''.join(new_list)\n",
        "num_ids": 68
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Test\n    # Give test string\n    # Create array to keep all the numbers\n    # Add number to array\n    # Go through array\n    # Iterate through array\n    # return to end\n    # i = -1\n    # j = 0\n    # while i<len(test_str):\n    #     test_str[i] = test_str[i]\n    #     i+=1\n    # for i in range(j, len(test_str)):\n    #     test_str[i] = test_str[i] + test_str[i+1]\n    # i = j\n    # j+=1\n    # while i<len(test_str):\n    #     test_str[i] = test_str[i] + test_str[i+1]\n    #     i+=1\n    # for i in range(j, len(test_str)):\n    #     test_str[i] = test_str[i] + test_str[i+1]\n    # return test_str\n",
        "num_ids": 247
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('4', '*')\n    test_str = test_str.replace('3', '*')\n    test_str = test_str.replace('2', '*')\n    test_str = test_str.replace('1', '*')\n    test_str = test_str.replace('0', '*')\n    test_str = test_str.replace('*', '*')\n    return test_str\n",
        "num_ids": 110
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = test_str.split(\" \")\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i][::-1]\n    return''.join(str_list)\n",
        "num_ids": 59
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # array to store the size\n    ans = [-1 for i in range(0, len(a))]\n    \n    # start with the largest subset and store the size\n    for i in range(0, len(a)):\n        for j in range(i, len(a)):\n            # if the pair is divisible then add the size to the answer array\n            if (a[i] % a[j] == 0):\n                ans[i] = ans[j] + 1\n    \n    # return the answer\n    return ans[0]",
        "num_ids": 130
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    '''\n    def largest_subset(a):\n        if len(a) < 2:\n            return -1\n        s = 0\n        for i in range(1,len(a)):\n            s += a[i]*(len(a) - i)\n        return s\n    '''\n    subset = list(set(a))\n    print subset\n    if len(subset) < 2:\n        return -1\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i],dp[j]+1)\n    return max(dp)\n",
        "num_ids": 107
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    ans = 0\n    \n    #recursive\n    def helper(n, l, r):\n        if l >= r:\n            return 0\n        \n        mid = (l + r) // 2\n        #if elements in subset\n        if l == n and r == n:\n            return 1\n        \n        if n == mid:\n            return helper(mid+1, l, mid) + helper(mid+1, mid+1, r)\n        \n        #if element not in subset\n        else:\n            if n % mid == 0:\n                return helper(mid+1, mid+1, r)\n            else:\n                return helper(mid+1, l, mid)\n    \n    #iterate over the array\n    for i in range(n):\n        if helper(n, i, n) > ans:\n            ans = helper(n, i, n)\n    return ans",
        "num_ids": 209
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_len = -1\n    prev = None\n    for item in a:\n        if item % prev!= 0:\n            if prev is not None:\n                if len(a[prev]) > len(a[item]):\n                    a[item] = a[prev]\n                    a[item].append(prev)\n            else:\n                a[item] = [prev]\n                a[item].append(prev)\n        prev = item\n    a[item].append(prev)\n    return len(a[item])\n",
        "num_ids": 126
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest_size = 0\n    subsets = [0]*len(a)\n    for i in range(len(a)):\n        subsets[i] = int(a[i] / 2)\n        if subsets[i] == 0:\n            subsets[i] = 1\n        if subsets[i] > largest_size:\n            largest_size = subsets[i]\n",
        "num_ids": 95
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    ans=[]\n    for i in a:\n        for j in a:\n            if i%j==0:\n                if len(ans)<len(a):\n                    ans=[i,j]\n    return ans\n",
        "num_ids": 54
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return 1\n    \n    if a[0] == a[1]:\n        return 2\n",
        "num_ids": 49
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = []\n    n = len(a)\n    # sort the array\n    a = sorted(a)\n    # store the subset\n    s = [a[0]]\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            s.append(a[i])\n        else:\n            # if the subset is in the final subset, then return it\n            if s[-1] == a[i - 1]:\n                return s[-1]\n            # otherwise, add the subset to the final subset and add it to the subset\n            s.append(s[-1] + a[i])\n    # return the size\n    return len(s)\n",
        "num_ids": 171
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    set_of_nums = set(a)\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                if (a[i] // a[j]) > max_size:\n                    max_size = (a[i] // a[j])\n    return max_size\n",
        "num_ids": 105
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return arr1[0]\n    \n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2])/2\n    else:\n        return arr1[n//2]\n    \ndef test_median():\n    assert get_median([1,2,3,4,5], [2,4,6,8,9], 5) == 3.5\n    assert get_median([], [], 0) == 0\n    assert get_median([1, 2, 3, 4], [2, 3, 6], 5) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 6) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 7) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 8) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 9) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 10) == 2.5\n    \ndef test_median2():\n    assert get_median([1,2,3,4,5], [2,3,6,8,9], 5) == 3.5\n    assert get_median([], [], 0) == 0\n    assert get_median([1, 2, 3, 4], [2, 3, 6], 5) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 6) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 7) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 8) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 9) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 10) == 2.5\n    \ndef test_median3():\n    assert get_median([1,2,3,4,5], [2,3,6,8,9], 5) == 3.5\n    assert get_median([], [], 0) == 0\n    assert get_median([1, 2, 3, 4], [2, 3, 6], 5) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 6) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 7) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 8) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 9) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 10) == 2.5\n    \ndef test_median4():\n    assert get_median([1,2,3,4,5], [2,3,6,8,9], 5) == 2.5\n    assert get_median([], [], 0) == 0\n    assert get_median([1, 2, 3, 4], [2, 3, 6], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 6) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 7) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 8) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 9) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 10) == 2.5\n    \ndef test_median5():\n    assert get_median([1,2,3,4,5], [2,3,6,8,9], 5) == 2.5\n    assert get_median([], [], 0) == 0\n    assert get_median([1, 2, 3, 4], [2, 3, 6], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 6) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 7) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 8) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 9) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 10) == 2.5\n    \n    \ndef test_median6():\n    assert get_median([1,2,3,4,5], [2,3,6,8,9], 5) == 3.5\n    assert get_median([], [], 0) == 0\n    assert get_median([1, 2, 3, 4], [2, 3, 6], 5) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 5) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 6) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 7) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 8) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 9) == 3.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 10) == 3.5\n    \ndef test_median7():\n    assert get_median([1,2,3,4,5], [2,3,6,8,9], 5) == 2.5\n    assert get_median([], [], 0) == 0\n    assert get_median([1, 2, 3, 4], [2, 3, 6], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 5) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 6) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 7) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 8) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 9) == 2.5\n    assert get_median([1, 2, 3, 4], [2, 3, 6, 8], 10) == 2.5\n    \ndef test_median",
        "num_ids": 2009
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    low, high = 0, n - 1\n    while low < high:\n        if arr1[low] < arr2[high]:\n            arr1[low], arr1[high] = arr1[high], arr1[low]\n            low += 1\n            high -= 1\n        else:\n            low += 1\n    return arr1[low]\n",
        "num_ids": 84
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (float(arr1[n//2]) + float(arr2[n//2])) / 2.0\n    else:\n        return float(arr1[n//2])\n",
        "num_ids": 55
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 > l2:\n        arr1, arr2 = arr2, arr1\n        l1, l2 = l2, l1\n    if l1 == 0:\n        return arr2[n//2]\n    if l2 == 0:\n        return arr1[n//2]\n    if n % 2:\n        i = l1\n    else:\n        i = l2\n    if n%2:\n        j = l1\n    else:\n        j = l2\n    while i>0 and j>0:\n        if arr1[i] < arr2[j]:\n            arr1[i], arr2[j] = arr2[j], arr1[i]\n            i = i -1\n        else:\n            arr1[i], arr2[j] = arr2[j], arr1[i]\n            j = j -1\n    if i>0:\n        arr1[i], arr2[j] = arr2[j], arr1[i]\n    if j>0:\n        arr1[i], arr2[j] = arr2[j], arr1[i]\n    return (arr1[i] + arr2[j])/2\n",
        "num_ids": 305
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 > l2:\n        for i in range(l1):\n            arr1[i] = arr1[i]/n\n    else:\n        for j in range(l2):\n            arr2[j] = arr2[j]/n\n    index = l1 + l2 - 1\n    if index % 2 == 0:\n        return (arr1[index//2] + arr2[index//2])/2\n    else:\n        return arr1[index//2]\n    \ndef get_minimum_in_array(arr1, arr2):\n    '''\n    Write a function that returns the minimum element of two arrays.\n    The function should return -1 if the two arrays are empty.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if len(arr1) == 0:\n        return -1\n    elif len(arr2) == 0:\n        return arr1[0]\n    else:\n        return arr1[0] if arr1[0] > arr2[0] else arr2[0]\n",
        "num_ids": 82
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = (arr1[n//2], arr2[n//2])\n    if n%2 == 0:\n        if mid[1] > mid[0]:\n            return mid[1]\n        else:\n            return (mid[0]+mid[1])/2\n    else:\n        if mid[1] > mid[0]:\n            return mid[1]\n        else:\n            return (mid[0]+mid[1])/2\n",
        "num_ids": 108
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return arr1[0]\n    \n    if n % 2 == 0:\n        med = (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        med = arr1[n//2]\n    \n    if n % 2 == 1:\n        med = (arr1[n//2] + arr2[n//2]) / 2\n        \n    return med\n    \n    \n    \ndef main():\n    \"\"\"\n    Test the median function.\n    \"\"\"\n    \n    n = 20\n    \n    arr1 = [7, 6, 4, 3, 5, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15]\n    arr2 = [1, 3, 5, 7, 9, 10, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28]\n    \n    print(median(arr1, arr2, n))\n    \n    arr1 = [1, 3, 5, 7, 9, 10, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28]\n    arr2 = [1, 3, 5, 7, 9, 10, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28]\n    \n    print(median(arr1, arr2, n))\n    \n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 355
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0]+arr1[1])/2\n    \n    sorted_array = sorted(arr1 + arr2)\n    return (sorted_array[n//2 - 1] + sorted_array[n//2])/2\n",
        "num_ids": 83
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # your code here\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n",
        "num_ids": 52
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    size = len(arr1)\n    if n % 2 == 0: # If array is odd\n        median = (arr1[(size - 1) // 2] + arr2[(size - 1) // 2]) / 2\n        return median\n    else: # If array is even\n        return (arr1[size // 2] + arr2[size // 2]) / 2\n",
        "num_ids": 90
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def nth_nums_recur(n,nums):\n        if n==0:\n            return 1\n        elif n==1:\n            return nums[n-1]\n        else:\n            return nth_nums_recur(n-1,nums)+nth_nums_recur(n-2,nums)\n    return nth_nums_recur(n,nums)\n",
        "num_ids": 104
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #TODO: Write your code here\n    return [num**n for num in nums]\n",
        "num_ids": 26
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = []\n    for num in nums:\n        power.append(num**n)\n    return power\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    numbers = list(map(lambda x: (x**n),nums))\n    for i in range(n):\n        res.append(numbers[i]**n)\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n    ",
        "num_ids": 16
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(a,b):\n        result = 1\n        while b!= 0:\n            if b & 1:\n                result *= a\n            a *= a\n            b >>= 1\n        return result\n",
        "num_ids": 53
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)-1,-1,-1):\n        nums[i]**=n\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # Base case:\n    if n == 0:\n        return [1]\n    \n    # If the nth power of a number is already computed, return the nth power\n    if n in nums:\n        return [nums[n]]\n    \n    # Otherwise:\n    nums_new = nth_nums(nums[1:],n-1)\n    nums_new.append(nums[0]**nums[1])\n    return nums_new\n",
        "num_ids": 119
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    def to_upper(string):\n        return string.upper()\n    return to_upper(string)\n    \nstring = \"Upper and 1st Python Programming\"\nstring = string.upper()\nprint(string)\n",
        "num_ids": 53
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_str = \"\"\n    for char in string:\n        if char.isupper():\n            new_str += char.upper()\n        else:\n            new_str += char\n    return new_str\n",
        "num_ids": 51
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper = string.upper()\n    return upper\n",
        "num_ids": 14
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for letter in string:\n        if letter.isupper():\n            result = result + letter.upper()\n        else:\n            result = result + letter.lower()\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) > 0:\n        for i in string:\n            if i.isupper():\n                i = i.upper()\n                string = string.replace(i, \"\")\n        return string\n    else:\n        return string\n",
        "num_ids": 59
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    print('swap_List')\n    print('swap: ', newList)\n    \n    if len(newList) >= 2: \n        first = newList[0] \n        last = newList[1] \n        \n        newList[0] = last \n        newList[1] = first \n        \n        newList = sorted(newList) \n        \n        return newList \n",
        "num_ids": 101
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[2]\n    newList[2] = temp\n",
        "num_ids": 33
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0] \n    newList[0] = newList[-1] \n    newList[-1] = temp\n    return newList \ndef add_two_lists(newList1, newList2):\n    '''\n    Write a python function to add two lists of numbers.\n    '''\n    sum = newList1 + newList2\n    return sum\ndef remove_even_from_list(lst):\n    '''\n    Write a python function to remove all even numbers from a list.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            new_list.append(lst[i])\n    return new_list\ndef count_number_of_unique_elements(lst):\n    '''\n    Write a python function to count the number of unique elements in a list.\n    '''\n    count = 0\n    for element in lst:\n        if element not in lst:\n            count += 1\n    return count\ndef count_number_of_common_elements(lst):\n    '''\n    Write a python function to count the number of common elements in a list.\n    '''\n    count = 0\n    lst_copy = lst.copy()\n    if len(lst_copy) > 0:\n        for element in lst_copy:\n            if element in lst_copy:\n                count += 1\n    return count\ndef delete_first_occurence(lst):\n    '''\n    Write a python function to delete the first occurrence of an element from a given list.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        if lst[i] not in new_list:\n            new_list.append(lst[i])\n    return new_list\ndef delete_last_occurence(lst):\n    '''\n    Write a python function to delete the last occurrence of an element from a given list.\n    '''\n    new_list = []\n    for i in range(len(lst) - 1, -1, -1):\n        if lst[i] not in new_list:\n            new_list.append(lst[i])\n    return new_list\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    temp = []\n    for i in range(len(lst)):\n        temp.append(lst[i])\n    temp.reverse()\n    return temp\ndef swap_list(lst):\n    '''\n    Write a python function to swap the first and last element in a given list.\n    '''\n    temp = lst[0] \n    lst[0] = lst[-1] \n    lst[-1] = temp\n    return lst\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    temp = []\n    for i in range(len(lst) - 1, -1, -1):\n        temp.append(lst[i])\n    temp.reverse()\n    return temp\ndef is_even(lst):\n    '''\n    Write a python function to check whether a given list is even or odd.\n    '''\n    if len(lst) % 2 == 0:\n        return True\n    else:\n        return False\ndef sum_list(lst):\n    '''\n    Write a python function to return the sum of all the numbers in a given list.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum = sum + lst[i]\n    return sum\ndef sum_list_recursive(lst):\n    '''\n    Write a python function to return the sum of all the numbers in a given list.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + sum_list_recursive(lst[1:])\ndef sum_list_recursive2(lst):\n    '''\n    Write a python function to return the sum of all the numbers in a given list.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + sum_list_recursive2(lst[1:])\ndef multiply_list(lst):\n    '''\n    Write a python function to multiply a given list.\n    '''\n    total = 1\n    for i in range(len(lst)):\n        total *= lst[i]\n    return total\ndef multiple_list(lst):\n    '''\n    Write a python function to multiply a given list.\n    '''\n    total = 1\n    for i in range(len(lst) - 1):\n        total *= lst[i]\n    return total\ndef max_sub_array(lst):\n    '''\n    Write a python function to find the max sub array in a given list.\n    '''\n    max_sum = 0\n    for i in range(len(lst)):\n        max_sum += lst[i]\n    return max_sum\ndef multiply_list_recursive(lst):\n    '''\n    Write a python function to multiply a given list.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] * multiply_list_recursive(lst[1:])\ndef num_odd_elements(lst):\n    '''\n    Write a python function to find the number of elements in a given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            count += 1\n    return count\ndef find_max_element(lst):\n    '''\n    Write a python function to find the max element in a given list.\n    '''\n    if len(lst) == 0:\n        return -1\n    else:\n        return lst[0]\ndef list_compare_in_lst(lst1, lst2):\n    '''\n    Write a python function to check whether two given lists are equal or not.\n    '''\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    return newList\n",
        "num_ids": 14
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    second = newList[1]\n    newList[0] = second\n    newList[1] = first\n    return newList\n",
        "num_ids": 43
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0] \n    newList[0] = newList[-1] \n    newList[-1] = first \n    return newList\n    \ndef find_Median_1(newList): \n    '''\n    Write a python function to get the median of a given list.\n    '''\n    length = len(newList)\n    mid = length/2\n    newList_1 = newList[0:mid]\n    newList_2 = newList[mid:]\n    newList_1 = swap_List(newList_1)\n    newList_2 = swap_List(newList_2)\n    if length%2 == 0: \n        newList = swap_List(newList)\n    else:\n        newList = swap_List(newList[mid:-1])\n    length = len(newList)\n    if length%2 == 0: \n        median = (newList[length/2] + newList[length/2-1])/2\n        return median\n    else:\n        median = newList[length//2]\n        return median\n    \ndef find_Median_2(newList): \n    '''\n    Write a python function to get the median of a given list.\n    '''\n    length = len(newList)\n    mid = length/2\n    newList_1 = newList[0:mid]\n    newList_2 = newList[mid:]\n    newList_1 = swap_List(newList_1)\n    newList_2 = swap_List(newList_2)\n    if length%2 == 0: \n        newList = swap_List(newList)\n    else:\n        newList = swap_List(newList[mid:-1])\n    length = len(newList)\n    if length%2 == 0: \n        median = (newList[length//2] + newList[length//2+1])/2\n        return median\n    else:\n        median = newList[length//2]\n        return median\n",
        "num_ids": 186
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[1:len(newList)] + newList[:1] + newList[len(newList):]\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    print(newList)\n",
        "num_ids": 16
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :  \n        '''\n        Function to find the area of a triangle.\n        '''\n        a = r**2\n        b = 3 * r**2\n        c = -b/2\n        return (a + b + c)\n",
        "num_ids": 36
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 0.0\n    for i in range(1,r+1):\n        for j in range(1,r+1):\n            if i**2 + j**2 <= r**2:\n                s = s + 1\n    return s/2\n",
        "num_ids": 63
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    a = r*r\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += a*i*j\n    return result\ndef triangle_area_diagonal(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    a = r*r\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += a*i*i\n    return result\ndef triangle_area_tangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    a = r*r\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += a*i*i\n    return result\ndef triangle_area_circular(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i\n    return result\ndef triangle_area_sphere(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i\n    return result\ndef triangle_area_equilateral(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_triangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_rectangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_sphere_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*j\n    return result\ndef triangle_area_sphere_circle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_circle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*j\n    return result\ndef triangle_area_circle_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*j\n    return result\ndef triangle_area_circle_square_triangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*j\n    return result\ndef triangle_area_circle_sphere(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*j\n    return result\ndef triangle_area_sphere_circle_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*j\n    return result\ndef triangle_area_sphere_square_circle_square(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*i*j\n    return result\ndef triangle_area_circle_circle_square_triangle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    result = 0\n    for i in range(0,3):\n        for j in range(i+1,3):\n            result += r*r*i*i*i*i*i*j\n    return result\ndef triangle_area_circle_circle_square_sphere(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793",
        "num_ids": 13
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Your code here\n    def area_of_triangle(r) :\n        if r <= 0 :\n            raise ValueError(\"r must be positive\")\n        elif r == 0 :\n            return 0\n        else :\n            return r*r*(3+2*r**2)\n    \n    return area_of_triangle(r)\n",
        "num_ids": 85
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Define area of triangle\n    area = (4*3.14*r*r)/3.0\n    #Return area of triangle\n    return area\n",
        "num_ids": 39
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3) :\n        for j in range(3) :\n            area = area + (r*((i*j)**2))\n    area = round(area, 3)\n    return area",
        "num_ids": 57
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Write your code here.\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Calculate the area\n    area = (3/4)*(r**2)\n    #Return the result\n    return area\n",
        "num_ids": 34
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    s = pi*(r**2)\n    return(s)\n",
        "num_ids": 25
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    l = 0\n    a = 0\n    for i in range(1, r+1) :\n        for j in range(1, r+1) :\n            if (i**2 + j**2) % 3!= 0 :\n                l = l + i**2\n                a = a + j**2\n            else :\n                l = l + i**2\n                a = a + i**2\n    return l, a\n",
        "num_ids": 104
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    i = start\n",
        "num_ids": 24
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end==None):\n        end=len(array)-1\n    if end==start:\n        return array[start]\n",
        "num_ids": 33
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start==end:\n        return array[start]\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid]>mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 118
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # If there are no missing numbers, return -1\n    if end == None:\n        end = len(array) - 1\n    \n    if start >= end:\n        return -1\n    \n    # If start == end, return the smallest number that is not in the list\n    if array[start] == array[end] and start!= end:\n        return end\n    \n    # Start to find the correct position\n    mid = (start + end) // 2\n    \n    # If mid is the start index\n    if mid == 0:\n        # If the element is present in the list, return the mid index as a result\n        if array[mid] == start:\n            return mid\n        \n        # If the element is present in the list, return the mid index as a result\n        if array[mid] == end:\n            return mid\n        \n        # Otherwise, return the mid index\n        else:\n            return find_First_Missing(array,start=mid+1,end=end)\n    \n    # If mid is the end index, return the mid index as a result\n    elif mid == len(array)-1:\n        # If the element is present in the list, return the mid index as a result\n        if array[mid] == end:\n            return mid\n        \n        # Otherwise, return the mid index\n        else:\n            return find_First_Missing(array,start=start,end=mid)\n    \n    # If mid is between the two indices, return the mid index as a result\n    else:\n        return find_First_Missing(array,start=mid+1,end=end)\n    \n",
        "num_ids": 379
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    while(start < end):\n        m = (start+end)//2\n        if array[m] > array[m+1]:\n            return m+1\n        else:\n            start = m+1\n    return -1\n",
        "num_ids": 75
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    if start > end:\n        return None\n",
        "num_ids": 30
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end == 0:\n        return 1\n    return find_First_Missing(array,start,end-1) +1\n",
        "num_ids": 48
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start > end:\n        return None\n    if array[start] == None:\n        return start\n    if array[end] == None:\n        return end\n    p = array[end]\n    j = start\n    while array[j] <= array[p]:\n        j += 1\n    return j\n",
        "num_ids": 90
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        return None\n",
        "num_ids": 30
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    while start<=end:\n        mid=start+(end-start)//2\n        if mid==0 or array[mid-1]!=array[mid]:\n            return array[mid]\n        if array[mid]==array[mid-1]:\n            return array[mid]\n        elif array[mid]<array[mid-1]:\n            start=mid+1\n        else:\n            end=mid-1\n",
        "num_ids": 118
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # 1. Declare the variables\n    replaced = string\n    \n    # 2. For loop to handle all the spaces\n    for i in range(len(string)):\n        if string[i].isspace():\n            replaced = replaced.replace(string[i], '%20')\n    return replaced\n",
        "num_ids": 74
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    string = string.replace('\\t','%20')\n    string = string.replace('\\n','%20')\n    string = string.replace('\\r','%20')\n    return string\n",
        "num_ids": 61
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20'",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # TODO: Replace every space with %20.\n    string = string.replace(\" \",\"%20\")\n    return string\n",
        "num_ids": 32
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # your code here\n    return\n    ",
        "num_ids": 12
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Evens = []\n    \n    for i in list:\n        if i%2==0:\n            Evens.append(i)\n    return Evens\n    \ndef Find_Coefficient(x, y, m):\n    '''\n    Write a python function to find the coefficient of a polynomial.\n    '''\n    return x**m\n    \ndef Find_Root(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)\n    \ndef Find_Root_2(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_3(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_4(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_5(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_6(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_7(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_8(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_9(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_10(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_11(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_12(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_13(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_14(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_15(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_16(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_17(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_18(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_19(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_20(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_21(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_22(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_23(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_24(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_25(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_26(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_27(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_28(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_29(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_30(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_31(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_32(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_33(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_34(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_35(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_36(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '''\n    return math.sqrt(m)/math.sqrt(m)\n    \ndef Find_Root_37(m):\n    '''\n    Write a python function to find the root of a polynomial.\n    '",
        "num_ids": 20
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for i in list:\n        if i%2 == 0:\n            evenList.append(i)\n    return evenList\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list: \n        if num % 2 == 0: \n            even.append(num)\n    return even\n",
        "num_ids": 37
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for item in list:\n        if item % 2 == 0:\n            even_numbers.append(item)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(\"List of numbers is:\",list)\n    even_numbers = []\n    for item in list:\n        if item%2==0:\n            even_numbers.append(item)\n    print(\"Even Numbers from the List:\",even_numbers)\n",
        "num_ids": 65
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for number in list:\n        if number % 2 == 0:\n            evenList.append(number)\n    return evenList\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    lst = []\n    for i in list:\n        if i % 2 == 0:\n            lst.append(i)\n    return lst\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list: \n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n",
        "num_ids": 39
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[1] > 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[0] > 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[0] < len(grid[0]) - 1:\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] < len(grid[0]) - 1:\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n",
        "num_ids": 130
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new_sub = []\n    for i in range(len(sub)): \n        new_sub.append(sub[i] + (i+1,))\n    new_sub = new_sub + sub + [[ele[0], ele[1]]]\n    return new_sub \n",
        "num_ids": 70
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global num_coord\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele, sub)\n        return sub\n    else:\n        return sub\n",
        "num_ids": 45
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub\n    else:\n        sub.append((ele[0], ele[1]))\n        adjac(ele[1], sub)\n        sub.append((ele[0], ele[1]))\n        return sub\n",
        "num_ids": 62
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub: sub = [ele]\n    if not ele: return []\n    \n    if ele[0] in sub:\n        return adjac(ele[1:], sub + [ele])\n    else:\n        return adjac(ele[1:], sub) + [ele]\n",
        "num_ids": 70
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return sub[sub.index(ele) - 1]\n    else: sub.append(ele)\n    return adjac(ele[0], sub) + adjac(ele[1], sub)\n",
        "num_ids": 53
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # TODO: Write your code here\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        adjac(sub[0], sub)\n    return sub\n",
        "num_ids": 49
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    \n    x0 = x - 1\n    x1 = x + 1\n    y0 = y - 1\n    y1 = y + 1\n    if x0 < 0 or x1 > (len(board)-1): \n        return \n    if y0 < 0 or y1 > (len(board[0])-1): \n        return \n    if board[x][y] == 1: \n        sub.append((x0,y0)) \n        sub.append((x0,y1)) \n        sub.append((x1,y0)) \n        sub.append((x1,y1)) \n        adjac(ele, sub) \n    else: \n        sub.append((x0,y0)) \n        sub.append((x1,y0)) \n        sub.append((x1,y1)) \n        sub.append((x0,y1)) \n        adjac(ele, sub) \n    \ndef get_score(board): \n    '''\n    Given a board and a winning score, return the number of empty spaces (0's and 1's) on the board.\n    '''\n    score = 0\n    for x in range(len(board)): \n        for y in range(len(board[0])): \n            if board[x][y] == 0: \n                score += 1\n    return score\n",
        "num_ids": 57
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) > 0:\n        for e in ele:\n            sub.append((e[0], e[1] + 1))\n            sub.append((e[0], e[1] - 1))\n            sub.append((e[0] + 1, e[1]))\n            sub.append((e[0] - 1, e[1]))\n    else:\n        sub.append((ele[0], ele[1] + 1))\n        sub.append((ele[0], ele[1] - 1))\n        sub.append((ele[0] + 1, ele[1]))\n        sub.append((ele[0] - 1, ele[1]))\n    return sub\n",
        "num_ids": 167
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [ ( ele[0] + 2 * sub[0], ele[1] + 2 * sub[1] ) for sub in [ ( 0, 1), ( 0, -1), ( 1, 0), (-1, 0) ] ]\n",
        "num_ids": 57
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text = text.replace(' ', '_')\n    text = text.replace('(', '__(')\n    text = text.replace(')', '__)')\n    text = text.replace('{', '__{')\n    text = text.replace('}', '__}')\n    return text\n",
        "num_ids": 76
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    return re.sub(' +','', text).replace('  ', '_').replace(' ', '_')\n",
        "num_ids": 31
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_text += '_'\n        else:\n            new_text += text[i]\n    return new_text\n",
        "num_ids": 60
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split(' ')\n    words_new = []\n    for word in words:\n        if word.isspace():\n            word = word.replace(' ', '_')\n        if word.islower():\n            word = word.upper()\n        if word.isupper():\n            word = word.lower()\n        words_new.append(word)\n    return''.join(words_new)\n",
        "num_ids": 98
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_new = ''\n    for char in text:\n        if char =='':\n            text_new += '_'\n        elif char == '\\n':\n            text_new += '_'\n        else:\n            text_new += char\n    return text_new\n",
        "num_ids": 68
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.replace(' ', '_')\n",
        "num_ids": 15
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for letter in text:\n        if letter =='' or letter == '\\n':\n            result += '_'\n        else:\n            result += letter\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n','').replace('\\t','').replace('\\r','')\n",
        "num_ids": 34
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('-','_')\n    text = text.replace('(', '_')\n    text = text.replace(')', '_')\n    return text\n",
        "num_ids": 56
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i] = num_list[i] + num_list[i+1]\n    return num_list\n",
        "num_ids": 59
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list_len = len(num_list)\n    for i in range(0, num_list_len):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list\n",
        "num_ids": 59
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, value in enumerate(num_list):\n        if value == 0:\n            num_list.pop(index)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 49
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0,len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(len(num_list),0)\n            break\n    return num_list\n",
        "num_ids": 55
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            num_list[i]=num_list[-1]\n    return num_list\n",
        "num_ids": 49
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    def move_zeros(num_list):\n        '''\n        Write a python function to move all zeroes to the end of the given list.\n        '''\n        def move_zeros_loop(num_list):\n            '''\n            Write a loop that moves all zeroes to the end of the given list.\n            '''\n            for i in range(len(num_list)):\n                if num_list[i] == 0:\n                    num_list[i] = num_list[i] * -1\n            print(num_list)\n",
        "num_ids": 54
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i] = 0\n    return num_list\n",
        "num_ids": 47
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            pass\n        else:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n    \ndef find_sum(num_list,sum):\n    '''\n    Write a python function to find the sum of the numbers in the list.\n    '''\n    for i in num_list:\n        sum += i\n    return sum\n",
        "num_ids": 20
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num==0:\n            continue\n        else:\n            num_list.remove(num)\n            num_list.append(num)\n    return num_list\n",
        "num_ids": 51
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) : \n        xor_sum += (arr[i]^arr[i+1])\n    return xor_sum\n",
        "num_ids": 47
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Initializing the counter\n    count = 0\n    \n    # Converting array to list of tuples\n    # and adding them to counter\n    # to loop through all the elements\n    xor = list(zip(*arr))\n    \n    # Loop through all elements and xor them\n    # together and storing in counter\n    for i in xor :\n        count += int(i[0]) ^ int(i[1])\n    \n    return count\n",
        "num_ids": 109
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    i=0\n    temp=0\n    while i<len(arr) : \n        temp=arr[i]\n        temp_xor=arr[i]^arr[i+1]\n        arr[i] = temp_xor\n        temp=arr[i]\n        arr[i+1] = temp\n        i+=2\n    return arr\n",
        "num_ids": 87
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    temp_arr = []\n    for i in range(n) :\n        for j in range(i+1, n) :\n            temp_arr.append(arr[i]^arr[j])\n    return sum(temp_arr)\n",
        "num_ids": 59
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # your code here\n    n=len(arr)\n    xor_sum=0\n    for i in range(0,n-1):\n        xor_sum=xor_sum^arr[i]^arr[i+1]\n    return xor_sum\n",
        "num_ids": 67
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # your code goes here\n    sum_xor = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum_xor += arr[j] ^ arr[i]\n    print(sum_xor)\n",
        "num_ids": 70
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n-1) :\n        sum_xor = sum_xor ^ arr[i]\n    return sum_xor\n",
        "num_ids": 45
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    def find_sum_of_xor(arr,n):\n        '''\n        Function to find the sum of xor of all pairs of numbers in the given list.\n        '''\n        s=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if arr[i]&arr[j]==0:\n                    s+=arr[j]\n        return s\n    print('sum of xor of all pairs is :',find_sum_of_xor(arr,n))\n",
        "num_ids": 83
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    l=len(arr)\n    for i in range(0,l-1) :\n        for j in range(i+1,l) :\n            xor = arr[i]^arr[j]\n            arr[i] = xor\n            arr[j] = xor\n    sum = 0\n    for i in range(0,l) :\n        sum+=arr[i]\n    return sum\n",
        "num_ids": 99
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    temp = 0\n    for i in range(0,n-1) : \n        temp = temp + arr[i] ^ arr[i+1]\n    temp = temp ^ (arr[0] ^ arr[n-1])\n    return temp\n",
        "num_ids": 61
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, reverse=True)\n",
        "num_ids": 14
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # iterable is iterable of numbers\n    def reverse(iterable):\n        '''\n        This function reverses the order of the given list.\n        '''\n        # iterable is iterable of numbers\n        def merge(iterable, first=None, second=None):\n            '''\n            This function merges two lists in the given order.\n            '''\n            # iterable is iterable of numbers\n            # first is the first list (None in this case)\n            # second is the second list (None in this case)\n            if first is None:\n                return second\n            if second is None:\n                return first\n            # add both lists in the given order\n            # first is the first list (None in this case)\n            # second is the second list (None in this case)\n            return (first+second) if iterable[0]>iterable[1] else (second+first)\n        # iterable is iterable of numbers\n        return (merge(iterable, first, second))\n    \n    # iterable is iterable of numbers\n    def merge(iterable, first=None, second=None):\n        '''\n        This function merges two lists in the given order.\n        '''\n        # iterable is iterable of numbers\n        # first is the first list (None in this case)\n        # second is the second list (None in this case)\n        if first is None:\n            return second\n        if second is None:\n            return first\n        # add both lists in the given order\n        # first is the first list (None in this case)\n        # second is the second list (None in this case)\n        return (first+second) if iterable[0]>iterable[1] else (second+first)\n    \n    # iterable is iterable of numbers\n    # iterable is iterable of numbers\n    def heapify(iterable):\n        '''\n        This function performs a heapify.\n        '''\n        # iterable is iterable of numbers\n        def recur(iterable, index, parent, root):\n            '''\n            This function performs a heapify recursively.\n            '''\n            # iterable is iterable of numbers\n            # index is index of parent in the list\n            # parent is index of parent in the list\n            # root is index of root in the list\n            # list is an empty list in this case\n            # root is root of the tree\n            if index == len(iterable):\n                return\n            if iterable[index] < iterable[root]:\n                recur(iterable, index, index, root)\n            elif iterable[index] > iterable[root]:\n                recur(iterable, index, root, index)\n            else:\n                recur(iterable, index, index, root)\n                # iterable is iterable of numbers\n                # root is the root\n                # list is the list of numbers that we want\n                # we want to split it to two parts\n                # we want the part with the lowest value\n                # in the list\n                # we want the part with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of the list with the lowest value\n                # in the list\n                # we want the part of the list with the highest value\n                # in the list\n                # we want the part of th",
        "num_ids": 1515
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable.sort()\n",
        "num_ids": 9
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        heapq.heappush(h, i)\n    return h\n",
        "num_ids": 33
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        heapq.heappushpop(iterable, iterable.pop(0))\n    return iterable\n",
        "num_ids": 53
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        heapq.heappush(heap, i)\n    return heap\n",
        "num_ids": 35
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    def swap(pair):\n        temp = pair[1]\n        pair[1] = pair[0]\n        pair[0] = temp\n        \n    # Helper function\n    def bubble_sort(iterable):\n        '''\n        Sort given iterable in a strictly order.\n        '''\n        \n        for i in range(len(iterable)):\n            swap(iterable[i],i)\n            \n    # Heapify the list.\n    def heapify_sort(iterable):\n        '''\n        Heapify the given list in a strictly order.\n        '''\n        \n        def heapify(iterable, n, index):\n            '''\n            Construct an array from a list. In a perfect binary tree this is\n            the same as a sorted array, except with the root node at the\n            front and each node with the same value at the back.\n            '''\n            for i in range(n, index, -1):\n                swap(iterable[i], iterable[i-1])\n            for i in range(n-1, index-1, -1):\n                swap(iterable[i], iterable[i+1])\n        \n        n = len(iterable)\n        index = n\n        for i in range(n-1, -1, -1):\n            swap(iterable[i], iterable[index])\n            index -= 1\n        \n        heapify(iterable, n, index)\n        \n    # Build the heap.\n    def heap_build(iterable):\n        '''\n        Build an array from the given iterable.\n        '''\n        n = len(iterable)\n        \n        for i in range(n//2 - 1, -1, -1):\n            heapify(iterable, n, i)\n        \n        for i in range(n-1, -1, -1):\n            swap(iterable[i], iterable[0])\n            heapify(iterable, i, 0)\n            \n    # Heapify the list.\n    def heap_build2(iterable):\n        '''\n        Build an array from the given iterable.\n        '''\n        \n        def heapify(iterable, n, index):\n            '''\n            Construct an array from a list. In a perfect binary tree this is\n            the same as a sorted array, except with the root node at the\n            front and each node with the same value at the back.\n            '''\n            for i in range(n, index, -1):\n                swap(iterable[i], iterable[i-1])\n            for i in range(n-1, index-1, -1):\n                swap(iterable[i], iterable[i+1])\n                \n        for i in range(len(iterable)//2):\n            heapify(iterable, i, 0)\n            heapify(iterable, i, 1)\n            \n        for i in range(len(iterable)//2, -1, -1):\n            swap(iterable[i], iterable[0])\n            heapify(iterable, i, 0)\n            \n        for i in range(len(iterable)//2, -1, -1):\n            swap(iterable[i], iterable[i-1])\n            heapify(iterable, i, 0)\n        \n        heapify(iterable, 0, 0)\n        \n    # Sorting\n    def sort(iterable):\n        '''\n        Sort a list in ascending order using a heapsort.\n        '''\n        \n        def heapify(iterable, n, index):\n            '''\n            Construct an array from a list. In a perfect binary tree this is\n            the same as a sorted array, except with the root node at the\n            front and each node with the same value at the back.\n            '''\n            for i in range(n, index, -1):\n                swap(iterable[i], iterable[i-1])\n            for i in range(n-1, index-1, -1):\n                swap(iterable[i], iterable[i+1])\n        \n        n = len(iterable)\n        index = n\n        for i in range(n//2 - 1, -1, -1):\n            heapify(iterable, i, index)\n        \n        for i in range(n-1, -1, -1):\n            swap(iterable[i], iterable[0])\n            heapify(iterable, i, 0)\n            \n    # Insertion\n    def insertion(iterable):\n        '''\n        Insert a new value into the given iterable.\n        '''\n        n = len(iterable)\n        for i in range(1, n):\n            j = i\n            value = iterable[i]\n            while j > 0 and value < iterable[j-1]:\n                iterable[j] = iterable[j-1]\n                j -= 1\n            iterable[j] = value\n        \n        # Move all items in the iterable to the front\n        # while the number of items in the iterable is not\n        # equal to the number of items in the heap.\n        for i in range(n, 0, -1):\n            swap(iterable[i], iterable[0])\n            \n    # Quick sort\n    def quick_sort(iterable, left=None, right=None):\n        '''\n        Sort the given list using the quick sort algorithm.\n        '''\n        if left is None:\n            left = 0\n        if right is None:\n            right = len(iterable)\n        \n        def sort(iterable, left, right):\n            if left >= right:\n                return\n            \n            pivot = iterable[right]\n            i = left - 1\n            j = right + 1\n            while True:\n                while i >= 0 and iterable[i] < pivot:\n                    i -= 1\n                while j < len(iterable) and iterable[j] > pivot:\n                    j += 1\n                if i >= 0 and j <= j:\n                    break\n                if i >= 0:\n                    iterable[i] = iterable[j]\n                    i += 1\n                else:\n                    iterable[j] = pivot\n                    j += 1\n            \n            if i >= 0:\n                sort(iterable, left, i)\n            if j <= right:\n                sort(iterable, i + 1, right)\n                \n        sort(iterable, left, right)\n        \n        \n    # Counting\n    def count_sort(iterable):\n        '''\n        Sort a list using the counting sort algorithm.\n        '''\n        \n        def counting_sort(iterable, start):\n            '''\n            Sort a list using the counting sort algorithm.\n            '''\n            count = [0] * (len(iterable) + 1)\n            sorted_array = []\n            for element in iterable:\n                count[element] += 1\n            \n            for i in range(1, len(count)):\n                count[i] += count[i - 1]\n            \n            for element in iterable:\n                sorted_array.append(element)\n                \n            for i in range(start, len(count)):\n                count[i] = count[i] // count[start]\n            \n            i = start\n            for element in iterable:\n                sorted_array[i] = element\n                i += 1\n                \n        n = len(iterable)\n        \n        for i in range(n):\n            counting_sort(iterable, i)\n        \n    # Selection\n    def selection(iterable):\n        '''\n        Select a value from the given iterable using a selection sort.\n        '''\n        \n        def heapsort(iterable):\n            '''\n            Sort a list using the heapsort algorithm.\n            '''\n            def sort(iterable, index):\n                '''\n                Sort a list using the selection sort algorithm.\n                '''\n                for i in range(index, len(iterable)):\n                    for j in range(i, index, -1):\n                        if iterable[j] < iterable[j-1]:\n                            swap(iterable[j], iterable[j-1])\n                            heapify(iterable, j, i)\n                \n            def heap_build(iterable, start):\n                '''\n                Build a heap from the given iterable.\n                '''\n                h",
        "num_ids": 4
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    print(hq.heapify(iterable))\n    return list(hq.heapify(iterable))\n",
        "num_ids": 36
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        heapq.heappush(h, i)\n    return hq.nlargest(len(h), h)\n",
        "num_ids": 44
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        if len(hq) >= 2:\n            item_index = hq.index(item)\n            hq[item_index] = hq[item_index][1]\n            del(hq[item_index])\n",
        "num_ids": 69
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)-1):\n        if actual_cost[i]>actual_cost[i+1]:\n            return False\n",
        "num_ids": 39
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # import the module\n    import math\n    # import the average cost of sales\n    import numpy as np\n    # calculate average\n    total_cost = np.sum(sale_amount)\n    total_profit = 0\n    for sale in sale_amount:\n        total_profit += sale * actual_cost\n    return total_profit\n",
        "num_ids": 80
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = 0\n    if actual_cost < 0:\n        profit_loss = actual_cost / sale_amount\n        return profit_loss\n    else:\n        return 0\n    \n    # check if the profit is within 3% of the actual cost\n    # in case profit is less than 3% than actual cost\n    # the difference between the actual cost and the profit is less than profit_loss * 3\n",
        "num_ids": 96
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Calculate the difference between the actual and expected cost\n    actual_cost_difference = abs(actual_cost - sale_amount)\n    return actual_cost_difference < 100\n",
        "num_ids": 46
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return False\n    return True\n",
        "num_ids": 21
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return True\n    \ndef noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False\n    \ndef run_test(): \n    '''\n    Test function\n    '''\n    assert noprofit_noprofit(200,10) == True\n    assert noprofit_noprofit(150,10) == True\n    assert noprofit_noprofit(150,10) == True\n    assert noprofit_noprofit(200,10) == True\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit(200,10) == False\n    assert noprofit_noprofit",
        "num_ids": 1913
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost\n    else: \n        return sale_amount\n",
        "num_ids": 31
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # your code here\n    if actual_cost>sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # YOUR CODE GOES HERE\n    x = ((v*9/5) + 32) * (t/100)\n    y = (x - 0.16)\n    z = math.log(y/0.6)\n    c = z + (z/2)\n    return round(c)\n",
        "num_ids": 73
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = (9.80665 * (v**0.16) - 0.621371 * (v**0.01) + 32.0) / (v**0.16 + 0.621371 * (v**0.01) + 32.0)\n    return int(round(wind_chill))\n",
        "num_ids": 79
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill for this temperature\n    wc = v / (v**0.16) + 0.6215\n    # calculate the wind chill index rounded to the nearest integer\n    # but use round() to avoid rounding errors\n    return round(wc * 100)\n",
        "num_ids": 65
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_chill = (9.0/5.0) * v**5.0 + 35.0 * v**4.0 + 16.0 * v**3.0 + 7.0 * v**2.0 + 0.7 * v - 0.62\n    return round(w_chill,2)\n",
        "num_ids": 76
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    x = p*(v**(1.0-d))\n    return (z+x)/(rho*v)\n    \ndef wind_chill_std(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    x = p*(v**(1.0-d))\n    return (z-x)/(rho*v)\n    \ndef wind_chill_std_1(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_3(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_4(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_5(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_6(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_7(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_8(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_9(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_10(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_11(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_12(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    d = 9.0/5.0\n    rho = 2700.0\n    p = 9.0/5.0\n    z = (v**d)*(1.0-math.exp(-rho*t))\n    return (z-v)/(rho*v)\n    \ndef wind_chill_std_13(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float",
        "num_ids": 6
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # get the wind speed in km/h\n    wind_speed = v*3.6\n    # get the temperature in celsius\n    temp = t - 32\n    # calculate the wind chill index\n    wind_chill = 9.62*(temp**0.16) + 35.74\n    # return the wind chill index\n    return round(wind_chill,1)\n",
        "num_ids": 90
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= 0 or v > 100 or t > 100:\n        return \"Error in wind_chill\"\n    \n    if t < 20:\n        return \"Incorrect temperature!\"\n",
        "num_ids": 49
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 0\n    v = v * 3.6\n    t = t * 3.6\n    hc = (v + 273.15) / v\n    wc = (0.621371 * t * (hc + 0.621371)) + 0.1 * t * (v * (t - 10) + 0.5 * math.pow(v,2))\n    return round(wc,2)\n",
        "num_ids": 103
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v >= 0 and t >= 0:\n        r = (9.0/5.0) + (8.0/5.0) * math.exp((8.0-3.0)*t/9.0) + (5.0/5.0) * math.exp((5.0-3.0)*t/4.0)\n        r = math.ceil(r)\n        chill_index = r + 10.0\n        return(chill_index)\n    elif v < 0 and t < 0:\n        r = (10.0/5.0) + (8.0/5.0) * math.exp((8.0-3.0)*t/9.0) + (5.0/5.0) * math.exp((5.0-3.0)*t/4.0)\n        r = math.ceil(r)\n        chill_index = r + 10.0\n        return(chill_index)\n    elif v < 0 and t >= 0:\n        r = (10.0/5.0) + (8.0/5.0) * math.exp((8.0-3.0)*t/9.0) + (5.0/5.0) * math.exp((5.0-3.0)*t/4.0)\n        r = math.ceil(r)\n        chill_index = r + 10.0\n        return(chill_index)\n    elif v >= 0 and t < 0:\n        r = (10.0/5.0) + (8.0/5.0) * math.exp((8.0-3.0)*t/9.0) + (5.0/5.0) * math.exp((5.0-3.0)*t/4.0)\n        r = math.ceil(r)\n        chill_index = r + 10.0\n        return(chill_index)\n    else:\n        print(\"Error in wind_chill()\")\n        exit()\n",
        "num_ids": 481
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (v*9/5) + 32\n",
        "num_ids": 14
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # TODO\n    \n    # WRITE YOUR CODE HERE\n    # raise NotImplementedError\n    \n    return [len(name.lower()) for name in sample_names if name.startswith('a')]\n    \n    \ndef count_duplicates(names):\n    '''\n    Write a function to count the number of duplicate names in a given list of names.\n    '''\n    # TODO\n    \n    # WRITE YOUR CODE HERE\n    # raise NotImplementedError\n",
        "num_ids": 25
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n_all = len(sample_names)\n    lower_name = sample_names.lower()\n    name_length = []\n    name_s = lower_name.replace(' ', '')\n    for i in range(0, len(name_s)):\n        if name_s[i]!= 'a' and name_s[i]!= 'e' and name_s[i]!= 'i' and name_s[i]!= 'o' and name_s[i]!= 'u':\n            name_length.append(name_s[i])\n    for name in name_length:\n        if name == 'a' or name == 'e' or name == 'i' or name == 'o' or name == 'u':\n            name_length.remove(name)\n    if len(name_length) > 0:\n        return name_length\n    else:\n        return n_all\n",
        "num_ids": 219
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_names = [name.lower() for name in sample_names if not name.startswith('a')]\n    sample_names.sort()\n    return sum(len(name) for name in sample_names)\n    \n",
        "num_ids": 58
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s=''\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            s += len(sample_names[i])\n        else:\n            s = sample_names[i]\n    return s\n",
        "num_ids": 65
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # your code goes here\n    print(f\"Sum of the lengths of names after removing the names that start with a lowercase letter is: {len(sample_names)}\")\n    \n    \ndef generate_email():\n    '''\n    Write a function that generates a randomly selected email from a list of email addresses.\n    '''\n    # your code goes here\n    print(f\"Randomly selected email address from list: {', '.join(random.sample(sample_emails, 5))}\")\n    \n    \ndef print_help():\n    '''\n    Write a function that prints the help menu and asks for input.\n    '''\n    # your code goes here\n    print(\"\"\"Welcome to the phonebook!\n",
        "num_ids": 20
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    import random\n    import string\n    \n    def get_nam(names):\n        '''\n        get_nam takes a list of names and returns the length of the string.\n        '''\n        \n        return len(string.ascii_lowercase.replace(names[0], \"\", 1))\n        \n    def get_nam_val(names):\n        '''\n        get_nam takes a list of names and returns the names in the same list in the same order.\n        '''\n        \n        return list(map(lambda x: x[0].lower(),names))\n        \n    def nam_length(names):\n        '''\n        nam_length takes a list of names and returns a dictionary with the length of each name and the length of the first letter of the name.\n        '''\n        \n        return {nam: get_nam(nam) for nam in names}\n    \n    def nam_length(names):\n        '''\n        nam_length takes a list of names and returns a dictionary with the length of each name and the length of the first letter of the name.\n        '''\n        \n        return {nam: get_nam(nam) for nam in names}\n    \n    def nam_length_string(names):\n        '''\n        nam_length_string takes a list of names and returns a list with the length of each name.\n        '''\n        \n        return list(map(lambda x: len(x), names))\n    \n    sample_names = []\n    for sample_name in sample_names:\n        sample_names.append(sample_name.lower())\n    \n    return [nam_length(nam_names), nam_length(nam_names), nam_length_string(nam_names)]\n    \ndef main():\n    '''\n    main takes the user's input and prints out a result of the summary\n    '''\n    \n    sample_names = sample_nam(['pedro', 'ram', 'taco'])\n    print(sample_names)\n    print('Length of the first letter of the name is {}'.format(sample_names[0][0].lower()[0]))\n    \n    print('Length of the second letter of the name is {}'.format(sample_names[1][0].lower()[0]))\n    \n    print('Length of the first letter of the name is {}'.format(sample_names[2][0].lower()[0]))\n    \nmain(",
        "num_ids": 135
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for name in sample_names:\n        if name[0].lower() == 'n':\n            continue\n        elif name[0].lower() == 'r':\n            s += len(name) - 2\n        elif name[0].lower() == 'c':\n            s += len(name) - 2\n    return s\n    \ndef complete_names(sample_names):\n    '''\n    Write a function that takes in a list of names as input, and returns a list of all possible names after removing the names that start with a lowercase letter.\n    '''\n    complete_names = []\n    for name in sample_names:\n        complete_names.append(name)\n    return complete_names\n",
        "num_ids": 34
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print('enter the names in the list: ')\n    names = []\n    while True:\n        try:\n            names = input('input the names: ').split(',')\n            for i in range(len(names)):\n                if names[i][0].islower():\n                    names[i] = names[i][1:]\n        except ValueError:\n            break\n    print('the sum of all the lengths is ')\n    s = 0\n    for i in range(len(names)):\n        s += len(names[i])\n    print(f'{len(names)} in the names')\n    print(f'sum of all the lengths is {s}')\n    return names\n",
        "num_ids": 166
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0] == 'a' or name[0] == 'e' or name[0] == 'i' or name[0] == 'o' or name[0] == 'u':\n            pass\n        else:\n            sample_names.remove(name)\n    return sample_names\n",
        "num_ids": 81
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for name in sample_names:\n        if name.lower().startswith(\"a\"):\n            s += len(name)\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    str = ''\n    for item in items:\n        str += item\n",
        "num_ids": 19
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for i in items:\n        output.append(re.sub(r'([^\\s])(\\(([^\\)]*)\\))', r'\\1', i))\n    return output\ndef remove_punctuation(items):\n    '''\n    Write a function to remove the punctuation from a string.\n    '''\n    output = []\n    for i in items:\n        output.append(re.sub(r'[^a-zA-Z0-9\\s]', '', i))\n    return output\ndef remove_special_char(items):\n    '''\n    Write a function to remove the special characters from a string.\n    '''\n    output = []\n    for i in items:\n        output.append(re.sub(r'[^a-zA-Z0-9\\s]', '', i))\n    return output\n",
        "num_ids": 49
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    a = []\n    for i in items:\n        if i[0] == '(':\n            a.append(i)\n        elif i[0] == ')':\n            a.pop()\n    return a\n",
        "num_ids": 54
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\([^)]*\\)[^\\s]+\\s*\"\n    new_items = []\n    for item in items:\n        if re.search(pattern, item):\n            new_item = item[1:-1]\n            new_items.append(new_item)\n        else:\n            new_items.append(item)\n    return new_items\n",
        "num_ids": 92
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output_list = []\n    i = 0\n    while i < len(items):\n        if ')' in items[i]:\n            output_list.append(items[i][:items[i].index(')')])\n            i += 1\n        else:\n            output_list.append(items[i])\n            i += 1\n    return output_list\ndef list_to_set(items):\n    '''\n    Write a function that converts a list of strings to a set.\n    '''\n    result = set()\n    for item in items:\n        result.update(item)\n    return result\ndef parse_list(l, sep=', ', s='{'):\n    '''\n    A function to parse a list of strings separated by a comma and put them into a set.\n    '''\n    result = []\n    for item in l:\n        if item is None:\n            continue\n        item = item.split(sep)\n        result.extend(item)\n    return result\ndef get_all_grouped_transitions(grouped_transitions, table):\n    '''\n    A function that returns a list of all possible transitions in the given state.\n    '''\n    transitions = []\n    for key in table.keys():\n        temp = table[key].copy()\n        temp.pop(0)\n        for key in temp:\n            transitions.append(key + '->' + table[key][key])\n    return transitions\ndef get_set_difference(grouped_transitions):\n    '''\n    A function that returns a set of all all transitions that do not have a '->' letter in them.\n    '''\n    difference = []\n    for transition in grouped_transitions:\n        if transition not in difference:\n            difference.append(transition)\n    return set(difference)\ndef get_all_transitions(grouped_transitions):\n    '''\n    A function that returns all possible transitions.\n    '''\n    result = []\n    for key in table.keys():\n        temp = table[key].copy()\n        temp.pop(0)\n        for key in temp:\n            result.append(key + '->' + table[key][key])\n    return result\ndef get_all_grouped_transitions_table(grouped_transitions):\n    '''\n    A function that returns all transitions in the given state.\n    '''\n    temp = table.copy()\n    for key in table.keys():\n        temp.pop(key)\n    return temp\n",
        "num_ids": 31
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    i = 0\n    while i < len(items):\n        if items[i] == '(':\n            result.append(items[i])\n            i += 1\n        else:\n            if result!= []:\n                result.pop()\n            else:\n                break\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'(?:\\((?:\\([^)]+?)\\))')\n    match = pattern.search(str(items))\n    if match:\n        start = match.start()\n        if start > 0:\n            items = items[start:]\n            items = items[:-start]\n        else:\n            items = items[:-1]\n    return items\n",
        "num_ids": 93
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # if is empty string\n    if len(items) == 0:\n        return None\n    else:\n        # if item is a number\n        if is_number(items[0]):\n            return items[0].replace(',',' ')\n        else:\n            if items[0] == '(':\n                if items[1] == ')':\n                    return remove_parenthesis(items[2:])\n                else:\n                    return remove_parenthesis(items[1:])\n            else:\n                return remove_parenthesis(items[1:])\n",
        "num_ids": 132
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    str = ''.join(items)\n    new_str = re.sub(r'\\(.*?\\)', '', str)\n    new_str = re.sub(r'[\\(\\[].*?[\\)\\]]', '', new_str)\n    return new_str\n",
        "num_ids": 70
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # code here\n    item_list = []\n    item_str = ''\n    i = 0\n    while i < len(items):\n        if ')' in items[i]:\n            if '(' in items[i]:\n                item_str += items[i]\n            else:\n                item_list.append(item_str)\n                item_str = ''\n                i += 1\n        else:\n            item_str += items[i]\n        i += 1\n    return item_list\n",
        "num_ids": 118
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1,n+1):\n        if n % i == 0:\n            return n\n    return -1\n",
        "num_ids": 33
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    l = list(n)\n    i = len(l) - 1\n    while i > 0: \n        if l[i-1] >= l[i] and l[i] > 0: \n            return l[i]\n        i -= 1\n",
        "num_ids": 63
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    elif n==4:\n        return 7\n    elif n==5:\n        return 11\n    else:\n        return n\n",
        "num_ids": 69
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    m = n - 1 \n    while m >= 0: \n        if abs(n % m) == 1: \n            return m \n        m -= 1 \n    return 0 \n",
        "num_ids": 47
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = n*n-2\n    if (s>0):\n        x = (n-1)+(n-2)\n        if(x>=0):\n            if(n%2==0):\n                return True\n            else:\n                return False\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return is_nonagonal(n-1) + is_nonagonal(n-2) \n",
        "num_ids": 49
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # logic\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2\n    else:\n        return 2\n        \ndef is_triangle(n):\n    '''\n    Write a function that returns true if n is a triangle.\n    '''\n    # logic\n    if n == 1 or n == 2 or n == 3:\n        return True\n    elif n == 4 or n == 5:\n        return False\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    counter = 0\n    while counter < n:\n        n = n-1\n        if (n%2 == 0):\n            return n \n        else:\n            n = n//2\n        counter += 1\n",
        "num_ids": 52
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while (i*(i+1) < n): \n        i += 1\n    return i\n",
        "num_ids": 31
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # if n is 0 or 1 return False\n    if n == 0 or n == 1:\n        return n\n    \n    # if n is even return the first even number\n    if n % 2 == 0:\n        return is_nonagonal(n//2)\n    \n    # if n is odd return the first odd number\n    return is_nonagonal(n-1)\n    \n    # handle error case if n is not an integer\n    raise ValueError\n",
        "num_ids": 108
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.strip()\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    text = re.sub('\\w*\\w*', '', text)\n    return text.startswith('z') and text.endswith('z')\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.strip()\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    text = re.sub('\\w*\\w*', '', text)\n    return text.startswith('z') and text.endswith('z')\n",
        "num_ids": 74
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text == re.search('z', text).span()\n",
        "num_ids": 17
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub('[^A-Za-z0-9_]','',text)\n    return text.endswith('z') and text.startswith('z')\n",
        "num_ids": 47
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    x = text[0]\n    if x == 'z':\n        return True\n    if x == 'X' or x == 'x':\n        return False\n    if x == '0' or x == '9':\n        return False\n    if x == 'A' or x == 'a':\n        return False\n    if x == 'a' or x == 'e' or x == 'e':\n        return False\n    if x == 'c' or x == 'f' or x == 'f':\n        return False\n    if x == '0' or x == '1' or x == '2' or x == '3' or x == '4' or x == '5' or x == '6' or x == '7' or x == '8' or x == '9':\n        return False\n    if x == 'F' or x == 'f':\n        return False\n    if x == 'F' or x == 'I' or x == 'i':\n        return False\n    if x == 'G' or x == 'g':\n        return False\n    if x == 'G' or x == 'O' or x == 'o':\n        return False\n    if x == 'H' or x == 'h':\n        return False\n    if x == 'H' or x == 'O' or x == 'o':\n        return False\n    if x == 'L' or x == 'l':\n        return False\n    if x == 'L' or x == 'N' or x == 'n':\n        return False\n    if x == 'M' or x =='m':\n        return False\n    if x == 'M' or x == 'P' or x == 'p':\n        return False\n    if x == 'N' or x == 'n':\n        return False\n    if x == 'P' or x == 'p':\n        return False\n    if x == 'S' or x =='s':\n        return False\n    if x == 'S' or x == 'T' or x == 't':\n        return False\n    if x == 'U' or x == 'u':\n        return False\n    if x == 'U' or x == 'V' or x == 'v':\n        return False\n    if x == 'W' or x == 'w':\n        return False\n    if x == 'W' or x == 'X' or x == 'x':\n        return False\n    if x == 'Y' or x == 'y':\n        return False\n    if x == 'Y' or x == 'Z' or x == 'z':\n        return False\n    if x == 'Z' or x == 'Z':\n        return False\n    if x == 'Z' or x == 'o' or x == 'o':\n        return False\n    if x =='' or x =='' or x == '_':\n        return False\n    if x == '!' or x == '!':\n        return False\n    if x == '@' or x == '@':\n        return False\n    if x == '.' or x == '.':\n        return False\n    if x == '?' or x == '?':\n        return False\n    if x == ',' or x == ',':\n        return False\n    if x == '?' or x == '?':\n        return False\n    if x == '_' or x == '_':\n        return False\n    if x == '{' or x == '{':\n        return False\n    if x == '}' or x == '}':\n        return False\n    if x == '[' or x == '[' or x == ']':\n        return False\n    if x == '{' or x == '}' or x == ']' or x == ']' or x == ']':\n        return False\n    if x == '\"' or x == '\"' or x == \"'\":\n        return False\n    if x == '`' or x == '`' or x == '~':\n        return False\n    if x == '&' or x == '&' or x == '_' or x == '_':\n        return False\n    if x == '*' or x == '*' or x == '+' or x == '_' or x == '_':\n        return False\n    if x == '|' or x == '|' or x == '_' or x == '_':\n        return False\n    if x == '=' or x == ':':\n        return False\n    if x == ')' or x == ')':\n        return False\n    if x == '(' or x == ')':\n        return False\n    if x == ':' or x == ':' or x == ';':\n        return False\n    if x == '.' or x == '.':\n        return False\n    if x == ',' or x == ',':\n        return False\n    if x == ':' or x == ':' or x == '.' or x == '.' or x == '.' or x == ',' or x == ',' or x == ',' or x == '.':\n        return False\n    if x == ',' or x == ',' or x == ',' or x == ',' or x == ',':\n        return False\n    if x == '.' or x == '.':\n        return False\n    if x == ',' or x == ',':\n        return False\n    if x == ',' or x == ',' or x == ',':\n        return False\n    if x == '.' or x == '.' or x == ',' or x == ',' or x == ',':\n        return False\n    if x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x == '.' or x == '.' or x == '.':\n        return False\n    if x == '.' or x =",
        "num_ids": 2000
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # 1. if the last character is not 'z', it is not a word.\n    last_char = text[-1]\n    if last_char not in string.ascii_lowercase or last_char!= 'z':\n        return False\n    # 2. if there are no characters between 'z' and the word, it is not a word.\n    if len(text) == len(wordz):\n        return False\n    # 3. if the word has more than one character, it is not a word.\n    if text[0] in string.ascii_lowercase:\n        return False\n    # 4. if the first character of the word is not 'z', it is not a word.\n    if text[0] not in string.ascii_lowercase or text[0]!= 'z':\n        return False\n    return True\n",
        "num_ids": 202
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = 'z'\n    text = text.strip()\n    if re.search('\\w', text):\n        if re.search('z', text):\n            return False\n        else:\n            return True\n    else:\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z'\ndef text_match_wordz_upper(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_lower(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_lower_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_last(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_last(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_last(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_last(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '')\n    return text[:len(text)-1] == 'z' or text[-1] == 'z' or text.find(' ')!= -1\ndef text_match_wordz_both_both_both_both",
        "num_ids": 65
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if not text.startswith('z') or not text.endswith('z'):\n        return False\n    else:\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    x = re.findall(r\"z\\w+\", text)\n    if len(x)==0:\n        return False\n    else:\n        return True\n",
        "num_ids": 42
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z?([a-zA-Z0-9]\\w+)\"\n    if re.search(pattern, text):\n        return False\n    else:\n        return True\n",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-k]\n",
        "num_ids": 11
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) - 1\n    while start < end:\n        while start < end and input[start] == input[start+1]:\n            start += 1\n        end -= 1\n        while start < end and input[end] == input[end-1]:\n            end -= 1\n        if start < end:\n            input[start], input[end] = input[end], input[start]\n    return input\n",
        "num_ids": 105
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if(input == None or input == [] or input == [None]):\n        return None\n    output = []\n    \n    for i in range(len(input)):\n        output.append(input[len(input)-i-1])\n    \n    return output[::-1]\n",
        "num_ids": 72
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print('\\nreverse array using recursive')\n    if(len(input) < 1):\n        return ''\n    else:\n        if k == 1:\n            return input\n        else:\n            first = input[0]\n            for i in range(k):\n                if i == 0:\n                    next_element = input[i+1]\n                    temp_element = next_element\n                    input = input[:-1]\n                    input = input + temp_element\n                else:\n                    next_element = input[i+1]\n                    temp_element = next_element\n                    input = input + temp_element\n            return input\n",
        "num_ids": 148
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse=[]\n    for i in input:\n        reverse.append(i)\n        \n    for j in range(len(reverse)):\n        for i in range(len(reverse)):\n            if reverse[i]!=reverse[j]:\n                break\n        reverse[i]=reverse[j]\n        reverse[j]=reverse[i]\n        \n    return reverse\n",
        "num_ids": 90
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(input)\n    def reverse_arr(arr):\n        # This function reverse the array\n        return arr[::-1]\n",
        "num_ids": 34
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if n == 0: \n        return []\n    if n == 1: \n        return input\n    \n    # TODO: Write your function here\n    if n == 2: \n        return input[::-1]\n    elif n == 3: \n        if k == 0: \n            return input\n        else: \n            return input[::-1][:k]\n    else: \n        return reverse_Array_Upto_K(input[1:], k) + reverse_Array_Upto_K(input[0:1], k)\n",
        "num_ids": 145
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = []\n    for i in range(len(input)):\n        reverse.append(input[i])\n        for j in range(i, len(input)):\n            reverse.append(input[j])\n",
        "num_ids": 53
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= k:\n        print(\"Invalid input: negative or zero size\")\n    else:\n        for i in range(k, len(input)):\n            temp = input[i]\n            input[i] = input[i-1]\n            input[i-1] = temp\n        print(\"Input array is reversed: \" + str(input))\n",
        "num_ids": 88
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code here\n    #print(input)\n    #print(k)\n    \n    #first, solve it without recursion\n    #return (input[::-1])\n    if k < 0:\n        return None\n    \n    if k == 0:\n        return input[::-1]\n    \n    while (k!= 0):\n        #add a step\n        #print(k)\n        #print(input[::-1])\n        \n        #for each number (k) remove the current number from input\n        #pop the number from the end of the array\n        #print(input[::-1])\n        #print(k)\n        #print(input)\n        \n        input = input[k:]+input[:k]\n        #print(input)\n        k = k-1\n    \n    return input\n",
        "num_ids": 199
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup\n",
        "num_ids": 34
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (key, test_dict[key])\n    \n    return test_tup\n",
        "num_ids": 41
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = []\n    for element in test_dict:\n        tup.append(element)\n    return tup\n",
        "num_ids": 31
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1] + test_dict)\n",
        "num_ids": 25
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k, v in test_dict.items():\n        if k not in test_tup:\n            test_tup[k] = []\n        test_tup[k].append(v)\n",
        "num_ids": 50
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tup + test_dict\n    return test_tup\n",
        "num_ids": 22
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i in test_dict:\n        test_tup += (i,test_dict[i])\n    return test_tup\n",
        "num_ids": 34
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict, )\n    return new_tup\n",
        "num_ids": 27
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (tuple(test_dict),) + test_tup\n    return test_tup",
        "num_ids": 29
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Print each element from the dictionary\n    for k, v in test_dict.items():\n        print(k, v)\n    # Add each key and value pair to the tuple\n    test_tup += (test_dict,)\n    return test_tup\n",
        "num_ids": 63
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost) # number of cells visited\n    n = len(cost[0]) # number of rows in matrix\n    total = 0\n    for i in range(n):\n        total += cost[i][i]\n    for i in range(m):\n        total -= cost[i][m-1-i]\n    return total/m\n",
        "num_ids": 84
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    for i in range(1, n):\n        for j in range(0, n-i):\n            sum = 0\n            for k in range(j, j+i):\n                sum += cost[k][j]\n            cost[j][j+i-1] = sum\n    \n    for i in range(1, n):\n        for j in range(0, n-i):\n            sum = 0\n            for k in range(j, j+i):\n                sum += cost[k][j+i-1]\n            cost[j+i-1][j] = sum / n\n    \n    total = 0\n    for i in range(1, n):\n        for j in range(0, n):\n            total += cost[i][j]\n    \n    return total / n\n",
        "num_ids": 197
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def helper(cost):\n        if not len(cost):\n            return cost\n        else:\n            cell = len(cost)//2\n            return cost[cell][cell] + helper(cost[:cell][:cell]) + helper(cost[cell:])\n    \n    return max(helper(cost))\n",
        "num_ids": 75
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total_cost = 0\n    N = len(cost)\n    path = [[] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i==0 and j==0:\n                continue\n            elif i==0:\n                path[j].append(i)\n            elif j==0:\n                path[i].append(j)\n            else:\n                total_cost += cost[i][j]\n                path[i].append(j)\n                path[j].append(i)\n    max_average_path = [0 for _ in range(N)]\n    visited = [0 for _ in range(N)]\n    visited[0] = 1\n    for i in range(N):\n        for j in range(N):\n            if visited[j]==0:\n                visited[j] = 1\n                path[i].append(j)\n                max_average_path[j] = total_cost/len(path[i])\n                total_cost = 0\n                visited[j] = 0\n    return max_average_path\n",
        "num_ids": 266
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # number of cells visited in a path\n    numCellsVisited = 0\n    # stores the sum of all the costs of all the visited cells\n    sumCellsVisited = 0\n    # stores the sum of all the totals of all the costs of all the visited cells\n    sumTotalCellsVisited = 0\n    # stores the list of all the paths of the path\n    pathList = []\n    # stores the path cost\n    pathCost = 0\n    # stores the number of visited cells\n    numVisited = 0\n    # stores the path sum\n    pathSum = 0\n    # stores the path average\n    pathAverage = 0\n    # stores the path cost of the path\n    pathCost = 0\n    # iterates over all the cells in the matrix and checks if the cost of the current cell is the maximum or minimum in the given path\n    for i in range(0,len(cost)):\n        for j in range(0,len(cost[0])):\n            # if the cell is visited in the current path,\n            if cost[i][j] == 1:\n                # count the total number of cells visited\n                numCellsVisited += 1\n                # if the cell is not visited,\n                if cost[i][j] == 0:\n                    # count the sum of the total cost\n                    sumCellsVisited += cost[i][j]\n                    # if the total cost is less than the sum of the number of cells visited,\n                    # add the total cost to the sum of the number of cells visited\n                    if cost[i][j] < sumCellsVisited:\n                        sumTotalCellsVisited += cost[i][j]\n                    # if the total cost is greater than the sum of the number of cells visited,\n                    # add the total cost to the sum of the number of cells visited\n                    else:\n                        sumTotalCellsVisited += cost[i][j]\n                    # if the total cost is less than or equal to the sum of the total cost,\n                    # add the path cost to the total cost\n                    if cost[i][j] <= sumTotalCellsVisited:\n                        pathCost += cost[i][j]\n                        # if the total cost is less than or equal to the sum of the total cost,\n                        # add the path cost to the total cost\n                        if cost[i][j] <= sumTotalCellsVisited:\n                            pathCost += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path cost to the total cost\n                    else:\n                        pathCost += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the number of cells visited to the total number of cells visited\n                    if cost[i][j] >= sumTotalCellsVisited:\n                        numVisited += 1\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the number of cells visited to the total number of cells visited\n                    if cost[i][j] >= sumTotalCellsVisited:\n                        numVisited += 1\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path sum to the total sum of the total cost\n                    if cost[i][j] >= sumTotalCellsVisited:\n                        pathSum += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path sum to the total sum of the total cost\n                    if cost[i][j] >= sumTotalCellsVisited:\n                        pathSum += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path average to the total average of the total cost\n                    if cost[i][j] >= sumTotalCellsVisited:\n                        pathAverage += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path average to the total average of the total cost\n                    if cost[i][j] >= sumTotalCellsVisited:\n                        pathAverage += cost[i][j]\n            # if the cell is visited in the current path,\n            # add the path cost to the current path cost\n            if cost[i][j] == 0:\n                pathCost += cost[i][j]\n                # if the cell is not visited,\n                if cost[i][j] == 0:\n                    # add the total cost to the number of visited cells\n                    sumTotalCellsVisited += cost[i][j]\n                    # if the total cost is less than the sum of the number of visited cells,\n                    # add the total cost to the sum of the number of visited cells\n                    if cost[i][j] < sumCellsVisited:\n                        sumTotalCellsVisited += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the total cost to the sum of the number of visited cells\n                    elif cost[i][j] <= sumCellsVisited:\n                        sumTotalCellsVisited += cost[i][j]\n                    # if the total cost is less than or equal to the sum of the total cost,\n                    # add the path cost to the total cost\n                    if cost[i][j] <= sumTotalCellsVisited:\n                        pathCost += cost[i][j]\n                        # if the total cost is less than or equal to the sum of the total cost,\n                        # add the path cost to the total cost\n                        if cost[i][j] <= sumTotalCellsVisited:\n                            pathCost += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the number of visited cells to the total number of visited cells\n                    elif cost[i][j] >= sumTotalCellsVisited:\n                        numVisited += 1\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the number of cells visited to the total number of cells visited\n                    elif cost[i][j] >= sumTotalCellsVisited:\n                        numVisited += 1\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path sum to the total sum of the total cost\n                    elif cost[i][j] >= sumTotalCellsVisited:\n                        pathSum += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path average to the total average of the total cost\n                    elif cost[i][j] >= sumTotalCellsVisited:\n                        pathAverage += cost[i][j]\n                    # if the total cost is greater than or equal to the sum of the total cost,\n                    # add the path average to the total average of the total cost\n                    elif cost[i][j] >= sumTotalCellsVisited:\n                        pathAverage += cost[i][j]\n    return [pathCost, pathSum, pathAverage, pathSum/numVisited, pathSum/numVisited, pathSum/numVisited, pathSum/numVisited, numVisited/numCellsVisited, numVisited/numCellsVisited, numVisited/numCellsVisited, numVisited/numCellsVisited]\n",
        "num_ids": 1715
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxAverage = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            for k in range(len(cost[i][j])):\n                # print(\"i,j,k:\",i,j,k)\n                # print(\"cost[i][j][k]:\",cost[i][j][k])\n                if(cost[i][j][k]!= 0):\n                    maxAverage = max(maxAverage, cost[i][j][k])\n    return(maxAverage)\n",
        "num_ids": 131
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    avg = 0\n    for i in range(n):\n        for j in range(n):\n            avg = avg + cost[i][j]\n",
        "num_ids": 47
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    A = [0]*N\n    for i in range(N):\n        A[i] = cost[i][0]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            A[j] = A[j]+cost[i][j]\n    return sum(A)/N\n    \ndef maxPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. The path with the maximum average over all the other paths is the maximum one for all the cells at the top-left cell and bottom-right cell.\n    '''\n    N = len(cost)\n    A = [0]*N\n    for i in range(N):\n        A[i] = cost[i][0]\n    for i in range(N-1):\n        A[i+1] = A[i]+cost[i][i]\n    return max(A)\n    \ndef findShortestPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the shortest path length as the sum of the average of the averages of the remaining cells.\n    '''\n    N = len(cost)\n    A = [0]*N\n    for i in range(N):\n        A[i] = cost[i][0]\n    for i in range(N-1):\n        A[i+1] = A[i]+cost[i][i]\n    return sum(A)/N\n",
        "num_ids": 79
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    ret = 0\n    currentRow = 0\n    currentColumn = 0\n    for i in range(N):\n        if currentRow < N:\n            for j in range(N):\n                if currentColumn < N:\n                    ret += cost[i][j]\n                    if i!= currentRow and j!= currentColumn:\n                        currentColumn += 1\n                        currentRow += 1\n                    elif i == currentRow:\n                        currentColumn -= 1\n                    elif j == currentColumn:\n                        currentRow -= 1\n        else:\n            for j in range(N):\n                if currentRow < N and j!= currentColumn:\n                    currentColumn += 1\n                    currentRow += 1\n                elif i == currentRow:\n                    currentColumn -= 1\n                elif j == currentColumn:\n                    currentRow -= 1\n        currentColumn = currentColumn % N\n        currentRow = currentRow % N\n    return ret / N\n",
        "num_ids": 221
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost) # number of cells\n    bestPath = [] #initialize bestPath for path\n    bestCost = -1\n    for i in range(N): #for each cell\n        currentCost = 0\n        for j in range(N): #for each adjacent cell\n            currentCost += cost[i][j]\n        if currentCost > bestCost: #if new cost is better, save best cost\n            bestCost = currentCost\n            bestPath = []\n        bestPath.append(i) #add new i cell as bestPath\n    return bestPath #return bestPath\n",
        "num_ids": 136
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if student[1][0] >= h:\n            if student[1][1] >= w:\n                students.remove(student)\n    return students\n",
        "num_ids": 46
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_dict=dict()\n    #Getting student height\n    for student in students.values():\n        if student[0]<h:\n            student_dict[student[1]]=student[0]\n    \n    #Getting student weight\n    for student in students.values():\n        if student[1]<w:\n            student_dict[student[1]]=student[0]\n    \n    if student_dict:\n        return student_dict\n    else:\n        return -1\n",
        "num_ids": 116
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height=0\n    weight=0\n    for k in students:\n        if students[k][1]>h and students[k][0]>w:\n            height=students[k][1]\n            weight=students[k][0]\n    if height>h and weight>w:\n        return(students)\n    else:\n        return(students)\n        \n",
        "num_ids": 93
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    final_data = []\n    for student in students:\n        if student.get('student_height') < h and student.get('student_weight') < w:\n            final_data.append(student)\n    return final_data\n",
        "num_ids": 57
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for k,v in students.items():\n        if (v[0] > h and v[1] > w):\n            students.pop(k)\n    return students\n",
        "num_ids": 44
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height=h\n    min_weight=w\n    for i in students:\n        if (i[1][1]>min_height and i[1][0]>min_weight):\n            min_height=i[1][1]\n            min_weight=i[1][0]\n    filtered_students=[]\n    for i in students:\n        if (i[1][1]>min_height and i[1][0]>min_weight):\n            filtered_students.append(i)\n    return filtered_students\n    \n    \ndef output_data(students):\n    '''\n    The output is given as a string. An integer is the average height and an integer is the average weight.\n    '''\n    calculated_height=0\n    calculated_weight=0\n    for i in students:\n        calculated_height+=i[1][1]\n        calculated_weight+=i[1][0]\n    average_height=calculated_height/len(students)\n    average_weight=calculated_weight/len(students)\n    print('The average height of the student is',average_height)\n    print('The average weight of the student is',average_weight)\n",
        "num_ids": 115
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if (h >= student[0]) and (w >= student[1]):\n            filtered_students.append(student)\n    return filtered_students\n",
        "num_ids": 56
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data = list(students.values())\n    data_filtered = list(filter(lambda x: (x[1][0] >= h) & (x[1][1] >= w), data))\n    return data_filtered\n",
        "num_ids": 57
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h>200:\n        students.remove(students[0])\n    if w>150:\n        students.remove(students[0])\n    return students\n",
        "num_ids": 44
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [students[name][0] for name in students if students[name][1]>h and students[name][1]<w ]\n",
        "num_ids": 36
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if nums1[i] == nums2[i]:\n                    counter += 1\n    return counter\n",
        "num_ids": 76
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i, j = 0, 0\n    for x in nums1:\n        i += 1\n        if x == nums2[j]:\n            i = 0\n            j += 1\n        else:\n            i = 0\n            j += 1\n    return i\n",
        "num_ids": 64
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len(list(set(nums1) & set(nums2)))\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if nums1[i] == nums2[j]:\n    #             nums1[i] = nums2[j]\n    #         else:\n    #             return i,j\n    # return len(nums1)\n",
        "num_ids": 112
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i, item in enumerate(nums1):\n        if nums2[i] == nums1[i]:\n            pass\n        else:\n            same_indices.append(i)\n    return len(same_indices)\n",
        "num_ids": 68
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    count = 0\n    for i in range(n):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    count = 0\n    \n    #initialize the count variable to 0\n    for i in range(n):\n        for j in range(m):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    while (i < len(nums1) and j < len(nums2)):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\n",
        "num_ids": 105
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(eq, nums1, nums2))\n",
        "num_ids": 19
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if i!= j:\n                    count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_of_same_pair = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count_of_same_pair += 1\n    return count_of_same_pair\n",
        "num_ids": 78
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base ** power\n",
        "num_ids": 8
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert type(base) == int\n    assert type(power) == int\n    if base == 1:\n        return 1\n    \n    if base == 2:\n        return power\n",
        "num_ids": 44
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 10:\n        return base\n    else:\n        result = base\n        for digit in range(base, power, -1):\n            result = result * 10 + digit\n        return result\n    ",
        "num_ids": 50
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def power_sum(base, power):\n        '''\n        Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n        '''\n        if power == 0:\n            return 1\n        elif power > 0:\n            return base + power_sum(base, power - 1)\n        else:\n            return base - power_sum(base, power)\n    return power_sum(base, power)\n",
        "num_ids": 64
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 1 or power < 1:\n        raise ValueError(\"Please enter a valid base and power\")\n    elif base == 1:\n        return 1\n    elif base == 2:\n        return power\n    elif base == 3:\n        return 1 + pow(power, 2)\n    else:\n        return power_base_sum(base, power // 2) + power_base_sum(base * power // 2, power * 2)\n",
        "num_ids": 106
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while base > 0:\n        digit = base % 10\n        base = base // 10\n        result += digit\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base):\n        sum += int(digit)\n    if power > sum:\n        return power_base_sum(base=base+1, power=power)\n    else:\n        return base\n",
        "num_ids": 58
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base + power_base_sum(base, power - 1)\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = str(power)\n    base = int(base)\n    return int(str(base) + power)\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(base)**i for i in range(power+1))\n",
        "num_ids": 22
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.strip()\n    pattern = r'\\$[a-zA-Z]{0,30}'\n    result = re.findall(pattern, text)\n    quotation_list = []\n    for i in result:\n        quotation_list.append(i.strip())\n    return quotation_list\n",
        "num_ids": 80
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(\"\\((.+?)\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_phone(text1):\n    '''\n    Write a function to extract values between the pair of parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(\\(.+?\\)|\\(.+?\\)|\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_fax(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_addr(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)|\\(.+?\\)|\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_city(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_state(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)|\\(.+?\\)|\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_county(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_country(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)|\\(.+?\\)|\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_zip(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_email(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_fax(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_state(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_postcode(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_phone(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_add_time(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)|\\(.+?\\)|\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_time(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_address(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_address2(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_city2(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_state2(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_county2(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_zip2(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_zip3(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_zip4(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_email3(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_fax3(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_postcode3(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_phone3(text1):\n    '''\n    Write a function to extract values between the parentheses (.) of the given string.\n    '''\n    regex = re.compile(\"\\(.+?\\)\")\n    m = regex.findall(text1)\n    return m\n    \ndef extract_add_time3(text1):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    quot_regex = re.compile('([ ])(?P<name>^[^ ]*(?P<value>.*))')\n    quot_match = quot_regex.search(text1)\n    quot_arr = quot_match.groupdict()\n    \n    if quot_match:\n        name = quot_match.group('name')\n        value = quot_match.group('value')\n        return name, value\n    else:\n        return '', ''\n    \ndef extract_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    date_regex = re.compile('([ ])(?P<month>^[1-9]|(jan)|(feb))(?P<day>\\d)\\.(?P<year>\\d\\d|\\d\\d\\d|\\d\\d\\d|\\d\\d\\d)')\n    date_match = date_regex.search(text1)\n    date_arr = date_match.groupdict()\n    \n    if date_match:\n        month = date_match.group('month')\n        day = date_match.group('day')\n        year = date_match.group('year')\n        \n        return month, day, year\n    else:\n        return '', '', ''\n",
        "num_ids": 176
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Create a regular expression object to match the quotation marks.\n    quotation_regex = r'\\s*(?P<text>\\\"|\\')(?P<quote>[\"`\\']).*?(?P=quote)'\n    # Extract the content of the quotation marks from the string.\n    quotation = re.search(quotation_regex, text1, re.DOTALL).group('text')\n    # Return the extracted quotation marks.\n    return quotation\n",
        "num_ids": 112
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    txt = re.findall(r'\\w+[,/\\\\]\\s*', text1)\n    return txt\n",
        "num_ids": 33
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    for x in text1:\n        if x.isupper() and x.isspace():\n            text1 = text1.replace(x,'')\n    return text1\n",
        "num_ids": 42
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_mark = text1.find('\"')\n    if quotation_mark!= -1:\n        return text1[:quotation_mark]\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    lines = re.split('(?:[^\"]|\"|\\r|\\n|)', text1)\n    quotation_list = []\n    for line in lines:\n        if line == \"\":\n            quotation_list.append(\"\")\n        else:\n            quotation_list.append(line)\n    return quotation_list\n",
        "num_ids": 82
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(\"\\\"[^\\\"]*\\\"\", text1)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"[\\\"'](.*?[\\\"'])(.*?)[\\\"']\")\n    match = pattern.findall(text1)\n    match_list = []\n    for i in match:\n        match_list.append(i)\n    return match_list\n",
        "num_ids": 69
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = len(test_tup)\n    result = ()\n    for i in range(t_N):\n        result += (t_1, test_tup[i+1])\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return None\n    elif len(test_tup) == 1:\n        return (test_tup[0] * test_tup[0])\n    else:\n        return (test_tup[0] * multiply_elements(test_tup[1:]))\n",
        "num_ids": 81
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l_tup = len(test_tup)\n    l_i = 1\n    for i in range(1,l_tup):\n        l_i = l_i * test_tup[i]\n    return l_i\n",
        "num_ids": 60
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1,t_2,t_3,t_4 = test_tup\n",
        "num_ids": 24
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * x, test_tup))\n",
        "num_ids": 21
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*y for x,y in zip(*test_tup)])\n    \ndef add_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}\n    '''\n    return tuple([x+y for x,y in zip(*test_tup)])\n    \ndef check_the_differences(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of occurences of t_i in the input tuple.\n    '''\n    return tuple([len([x for x in test_tup if x==y]) for y in test_tup])\n    \ndef remove_special_characters(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the character (represented by the i-th index of the tuple) appears in the string s.\n    '''\n    return tuple([test_tup[i].count(test_tup[i][0]) for i in range(len(test_tup))])\n    \ndef remove_stop_words(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the stop word appears in the string s.\n    '''\n    return tuple([len([w for w in test_tup if w in stop_words]) for w in test_tup])\n    \ndef count_letters(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is used in the string s.\n    '''\n    return tuple([test_tup[i].count(test_tup[i][0]) for i in range(len(test_tup))])\n    \ndef replace_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the character (represented by the i-th index of the tuple) has been replaced by another character.\n    '''\n    return tuple([test_tup[i].replace(test_tup[i][0], test_tup[i][1]) for i in range(len(test_tup))])\n    \ndef replace_letters(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter has been replaced by another character.\n    '''\n    return tuple([test_tup[i].replace(test_tup[i][0], test_tup[i][1]) for i in range(len(test_tup))])\n    \ndef ignore_case_letters(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is upper-case in the string s.\n    '''\n    return tuple([test_tup[i].upper() for i in range(len(test_tup))])\n    \ndef ignore_case_letters_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is lower-case in the string s.\n    '''\n    return tuple([test_tup[i].lower() for i in range(len(test_tup))])\n    \ndef is_vowel_letter(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a vowel in the string s.\n    '''\n    return tuple([test_tup[i].isupper() for i in range(len(test_tup))])\n    \ndef is_vowel_letter_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a vowel in the string s.\n    '''\n    return tuple([test_tup[i].isupper() and test_tup[i].islower() for i in range(len(test_tup))])\n    \ndef is_consonant_letter(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a consonant in the string s.\n    '''\n    return tuple([test_tup[i].isdigit() and test_tup[i].isalpha() for i in range(len(test_tup))])\n    \ndef is_consonant_letter_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a consonant in the string s.\n    '''\n    return tuple([test_tup[i].isdigit() and test_tup[i].isalpha() and test_tup[i].isupper() for i in range(len(test_tup))])\n    \ndef is_special_letter(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a special symbol in the string s.\n    '''\n    return tuple([test_tup[i].islower() for i in range(len(test_tup))])\n    \ndef is_special_letter_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a special symbol in the string s.\n    '''\n    return tuple([test_tup[i].islower() and test_tup[i].isupper() for i in range(len(test_tup))])\n    \ndef is_numeric_letter(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a numeric symbol in the string s.\n    '''\n    return tuple([test_tup[i].isalpha() for i in range(len(test_tup))])\n    \ndef is_numeric_letter_numbers(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the number of times that the letter is a numeric symbol in the string s.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)):\n        res += (test_tup[i]*test_tup[i+1])\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult_tup = []\n    for i in range(len(test_tup)-1):\n        mult_tup.append((test_tup[i],test_tup[i+1]))\n    return tuple(mult_tup)\n",
        "num_ids": 62
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * t_i for i,t_i in enumerate(test_tup))\n",
        "num_ids": 27
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total = 0\n    for x in range(len(lst1)):\n        total += lst1[x] + lst2[x]\n    return total\n",
        "num_ids": 42
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #my code here\n    a_sum=0\n    for i in lst1:\n        a_sum+=i\n    for i in lst2:\n        a_sum+=i\n    return a_sum\n    \n    \nprint(sum_list([1,2,3,4],[5,6,7,8])",
        "num_ids": 79
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in lst1:\n        result.append(sum(lst2))\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum = sum + lst1[i]\n    for i in range(len(lst2)):\n        sum = sum + lst2[i]\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x+lst2)\n    return lst\n    \ndef sum_lists(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x+lst2)\n    return lst\n    \ndef add_list(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x+lst2)\n    return lst\n    \ndef add_lists(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x+lst2)\n    return lst\n    \ndef multiply_list(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x*lst2)\n    return lst\n    \ndef multiply_lists(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x*lst2)\n    return lst\n    \ndef divide_list(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1/b_1,...,a_n/b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x/lst2)\n    return lst\n    \ndef divide_lists(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1/b_1,...,a_n/b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x/lst2)\n    return lst\n    \ndef exponentiation(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1**b_1,...,a_n**b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x**lst2)\n    return lst\n    \ndef power(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1**b_1,...,a_n**b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x**lst2)\n    return lst\n    \ndef add_list_times_two(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x*lst2)\n    return lst\n    \ndef multiply_list_times_two(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x*lst2)\n    return lst\n    \ndef multiply_lists_times_two(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x*lst2)\n    return lst\n    \ndef square_list(lst1):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], and returns [a_1^2,...,a_n^2].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x**2)\n    return lst\n    \ndef square_lists(lst1):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], and returns [a_1^2,...,a_n^2].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x**2)\n    return lst\n    \ndef power_list(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1^b_1,...,a_n^b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x**lst2)\n    return lst\n    \ndef power_lists(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1^b_1,...,a_n^b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x**lst2)\n    return lst\n    \ndef sub_list(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x-lst2)\n    return lst\n    \ndef sub_lists(lst1,lst2):\n    '''\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst = []\n    for x in lst1:\n        lst.append(x-lst2)\n    return lst\n    \ndef add_list_minus_two(lst1,lst2):\n    '''\n    Write a function that take",
        "num_ids": 8
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=0\n    for i in range(len(lst1)):\n        sum+=lst1[i]\n        sum+=lst2[i]\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    result=[]\n    for i in lst1:\n        if i in lst2:\n            result.append(i)\n        else:\n            result.append(0)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1+lst2\n    \ndef mult_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef sum_list2(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1+lst2\n    \ndef mult_list2(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list3(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list3(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list4(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list4(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list5(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list5(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list6(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list6(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list7(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list7(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list8(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list8(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list9(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list9(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1-lst2\n    \ndef mult_list10(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1*lst2\n    \ndef diff_list10(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a",
        "num_ids": 13
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res=[]\n    for i in range(len(lst1)):\n        if type(lst1[i]) is list:\n            res=lst1[i]+lst2[i]\n        else:\n            res.append(lst1[i]+lst2[i])\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums)==0:\n        return []\n    else:\n        last_index = len(nums) -1\n        group = groupby(nums)\n        c = list(group)\n        for i in c:\n            if i[0]!= i[1]:\n                last_index = last_index - 1\n                nums[last_index] = nums[last_index] + nums[i[0]]\n        return nums\n",
        "num_ids": 113
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Hint: group() returns the set of items from the iterable\n    # You can also return a list or tuple\n    return [x for x, y in groupby(nums) if x!= y and not y]\n",
        "num_ids": 55
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 0\n    unique_list = []\n    \n    for element in nums:\n        if element not in unique_list:\n            unique_list.append(element)\n            count += 1\n        if count == len(nums):\n            return unique_list\n    \n",
        "num_ids": 67
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        if nums[i] not in nums_set:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    group = groupby(nums)\n    set_1, set_2 = set(), set()\n    for key, value in group:\n        if len(value) == 1:\n            set_1.add(value[0])\n        if len(value) == 2:\n            set_2.add(value[0])\n    return sorted(list(set_1.union(set_2)))\n",
        "num_ids": 96
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    return [num for num, count in groupby(nums) if count > 1]\n",
        "num_ids": 30
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    g = groupby(nums)\n    d = {}\n    for k, v in g:\n        if k not in d:\n            d[k] = v[0]\n        else:\n            n = d[k]\n            if v[0]!= n:\n                d[k] = v[0]\n                n = v[0]\n            else:\n                continue\n        d[k] = d[k] + 1\n    return list(d.values())\n",
        "num_ids": 116
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    # if nums is empty, then return []\n    if not nums:\n        return []\n    \n    # if the len of nums is not equal to one, we will use sorted() to sort the elements\n    if len(nums) > 1:\n        nums = sorted(nums)\n        \n    # print the original list\n    # print(nums)\n    \n    # if len of nums is 0, return []\n    if len(nums) == 0:\n        return []\n        \n    # if len of nums is 1, return the unique value\n    if len(nums) == 1:\n        return nums[0]\n        \n    # return the first element\n    # element = nums[0]\n    # if len of nums is greater than one, return the value in the middle of the list\n    if len(nums) > 1:\n        first = nums[0]\n        \n        # return the value in the middle of the list\n        # for each index i in nums, nums[i + 1] = nums[i]\n        # then nums[i + 1] = nums[i]\n        for i in range(1, len(nums), 2):\n            # print(first, nums[i], nums[i + 1])\n            if nums[i]!= nums[i + 1]:\n                return first\n            else:\n                first = nums[i]\n    \n    # return the last element\n    return first\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for elem in nums:\n        if elem not in res:\n            res.append(elem)\n            continue\n        else:\n            res.remove(elem)\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # TO DO\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    f=1.14\n    c=math.cos(2*math.pi*r/h)\n    s=1.0\n    f1=(-c*f*c)/(2.0*s)\n    a=s*(f*(h/s)**2-f1)\n    b=s*(f*(h/s)**3-f1*f1)/(3.0*s*(h/s)**2)\n    return a+b\n",
        "num_ids": 117
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (r*h)/(math.cos(math.radians(90-math.asin(h))))\n    return s\ndef more_like_the_sphere(r,h):\n    '''\n    Write a function to find the area of a sphere given its radius r and its height h.\n    '''\n    s = (r**3)*(h**3)*(2*math.pi)\n    return s\ndef circle_sphere_volume(r,h):\n    '''\n    Write a function to find the volume of a circle given its radius and its height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,3)\ndef sphere_volume(r,h):\n    '''\n    Write a function to find the volume of a sphere given its radius and its height h.\n    '''\n    s = (r**3)*(h**3)*(2*math.pi)\n    return s\ndef sphere_volume_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere given its radius and its height h.\n    '''\n    s = (r**3)*(h**3)*(2*math.pi)*(math.cos(math.radians(90-math.asin(h))))\n    return s\ndef more_like_the_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere given its radius and its height h.\n    '''\n    s = (r**3)*(h**3)*(2*math.pi)*(math.cos(math.radians(90-math.asin(h))))*(math.cos(math.radians(90-math.asin(h))))\n    return s\ndef parallelogram_volume(r,h):\n    '''\n    Write a function to find the volume of a parallelogram given its radius and its height h.\n    '''\n    s = (r*h)/(math.pow(math.sin(math.radians(90-math.asin(h))),2))\n    return s\ndef parallelogram_volume_cone(r,h):\n    '''\n    Write a function to find the volume of a parallelogram given its radius and its height h.\n    '''\n    s = (r*h)/(math.pow(math.sin(math.radians(90-math.asin(h))),2)*math.cos(math.radians(90-math.asin(h))))\n    return s\ndef parallelogram_volume_sphere(r,h):\n    '''\n    Write a function to find the volume of a parallelogram given its radius and its height h.\n    '''\n    s = (r*h)/(math.pow(math.sin(math.radians(90-math.asin(h))),2)*math.cos(math.radians(90-math.asin(h))))*(math.sin(math.radians(90-math.asin(h))))\n    return s\ndef parallelogram_volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a parallelogram given its radius and its height h.\n    '''\n    s = (r*h)/(math.pow(math.sin(math.radians(90-math.asin(h))),2)*math.cos(math.radians(90-math.asin(h))))*(math.sin(math.radians(90-math.asin(h))))*(math.cos(math.radians(90-math.asin(h))))*(math.cos(math.radians(90-math.asin(h))))\n    return s\n",
        "num_ids": 115
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*h*math.pi*r\n",
        "num_ids": 14
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Convert input values into floats\n    r = float(r)\n    h = float(h)\n    \n    #determine the base surface\n    if r < 1.0e-5:\n        return r * (3.0e-6 + h)\n    else:\n        return h * r\ndef main():\n    '''\n    Write a function that takes in the values of r and h for a cone and outputs the lateral surface area.\n    '''\n    #User input for the cone radius and height.\n    r = float(input(\"Enter the radius of the cone: \"))\n    h = float(input(\"Enter the height of the cone: \"))\n    #Call the function lateralsurface_cone to calculate the lateral surface area.\n    lateral_surface_area = lateralsurface_cone(r,h)\n    #Print out the lateral surface area.\n    print(\"The lateral surface area of a cone is: \", lateral_surface_area)\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 133
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef squarecone(r,h):\n    '''\n    Write a function to find the lateral surface area of a square cone given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram2(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram3(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram4(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram5(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram6(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram7(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram8(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram9(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram10(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram11(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram12(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram13(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram14(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram15(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram16(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram17(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram18(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram19(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram20(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram21(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram22(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram23(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram24(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram25(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram26(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram27(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram28(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram29(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram30(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given radius r and the height h.\n    '''\n    return (r*(h/2))*math.sqrt(3)\ndef parallelogram31(r",
        "num_ids": 28
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    v=h**2*math.sin(r)\n    return(v)\n",
        "num_ids": 22
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*(h**2))\n",
        "num_ids": 13
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r==0 or h==0:\n        return 0\n    elif r==0 or r*h>0:\n        return 0\n    else:\n        return math.sin(math.radians(math.degrees(math.atan(r/h))))*math.sin(math.radians(math.degrees(math.asin((r*h)/r))))\n",
        "num_ids": 89
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = 0\n    #Calculate surface area\n    S = r**2*(1-math.cos(math.radians(60)))*math.tan(math.radians(60))*math.pi*h*1.414\n    print(S)\n    return S\n",
        "num_ids": 69
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def calc_area_plus(r,h):\n        '''\n        Calculate the area of a cone using formulas and the given height.\n        '''\n        return h*math.pi*r**2\n    def calc_area_minus(r,h):\n        '''\n        Calculate the area of a cone using formulas and the given height.\n        '''\n        return h*math.pi*r**2*(1-2*(r-1))\n    def calc_area_left(r,h):\n        '''\n        Calculate the area of a cone using formulas and the given height.\n        '''\n        return h*math.pi*r**2*(1-2*(r-1))\n    def calc_area_right(r,h):\n        '''\n        Calculate the area of a cone using formulas and the given height.\n        '''\n        return h*math.pi*r**2*(1-2*(r-1))\n    area_p = calc_area_plus(r,h)\n    area_m = calc_area_minus(r,h)\n    area_l = calc_area_left(r,h)\n    area_r = calc_area_right(r,h)\n    return area_p+area_m+area_l+area_r\n",
        "num_ids": 107
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+','colon',text)\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\"\\n\", \":\")\n    text = text.replace(\"\\t\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\";\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\":\",\":\")\n    text = text.replace(\"/\",\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\"'\",\":\")\n    text = text.replace(\"'\",\":\")\n    text = text.replace(\"\\\"\",\":\")\n    text = text.replace(\"\\\"\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"<\",\":\")\n    text = text.replace(\"<\",\":\")\n    text = text.replace(\">\",\":\")\n    text = text.replace(\">\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"!\",\":\")\n    text = text.replace(\"@\",\":\")\n    text = text.replace(\"@\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"|\",\":\")\n    text = text.replace(\"|\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"$\",\":\")\n",
        "num_ids": 2008
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\":\",\":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n",
        "num_ids": 117
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]',' ',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\:', ':',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\.', '.',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\-', '-',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\?', '?',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\!', '!',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\@', '@',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\#', '#',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\$', '$',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\%', '%',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\^', '^',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\_', '_',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\{', '{',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\}', '}',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\|', '|',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\|\\s', '|',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\|\\s', '|',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\(', '(',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\)', ')',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\[', '[',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\]', ']',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\(', '(',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\)', ')',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\+', '+',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\-', '-',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\/', '/',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\/', '/',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '*',text)\n    text = re.sub(r'(?:\\s|\\S)(?<=\\s)\\*\\*', '",
        "num_ids": 2005
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    newText = ''\n    for char in text:\n        if char =='':\n            newText += ':'\n        elif char == ',':\n            newText += ','\n        elif char == '.':\n            newText += '.'\n        else:\n            newText += char\n    return newText\n",
        "num_ids": 76
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace('.', ':').replace('-', ':')\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for char in [' ',','','.','.']:\n        text = text.replace(char,':')\n    for char in [' ','.','.','!']:\n        text = text.replace(char,':')\n    return text\n",
        "num_ids": 57
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #https://www.geeksforgeeks.org/replace-every-special-character-in-a-string/\n    regex = '\\s+'\n    pat = '\\S+'\n    text = re.sub(regex, ':', text)\n    text = re.sub(pat, ':', text)\n    return text\n",
        "num_ids": 84
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #regex = r\"([\\s\\S]+)[\\s\\S]+(\\d+)[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\s\\S]+[\\",
        "num_ids": 2008
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = \"\"\n    for c in text:\n        if c.isspace():\n            result += \":\"\n        elif c == \" \" or c == \",\" or c == \".\" or c == \":\":\n            result += \" \"\n        elif c == \":\":\n            result += \":\"\n        else:\n            result += c\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # -\n    # O(log(n))\n    # O(n)\n    left = 0\n    right = len(A)-1\n    while left<=right:\n        middle = (left+right)//2\n        # -\n        # O(log(n))\n        # O(1)\n        if A[middle] == x:\n            return middle\n        # -\n        if A[middle]<x:\n            left = middle+1\n        # -\n        if A[middle]>x:\n            right = middle-1\n    # -\n    return -1\n",
        "num_ids": 140
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    while i < n:\n        if A[i] == x:\n            return i\n        i += 1\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    while (left <= right):\n        mid = left + (right-left)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n",
        "num_ids": 80
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while (i <= j):\n        mid = (i + j) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n",
        "num_ids": 84
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # The index of the first occurrence\n    start = 0\n    # The length of the array\n    length = len(A)\n    # Check if x is greater than A[start] or not\n    while start < length and A[start] < x:\n        start += 1\n    # If x is greater than A[start], we consider it as the first occurrence.\n    if A[start] < x:\n        return start\n",
        "num_ids": 100
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    res = 0\n    i = 0\n    while i < len(A):\n        if A[i] == x:\n            break\n        else:\n            if A[i] < x:\n                i += 1\n            else:\n                res = i\n                break\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # if len(A) == 0\n    if len(A) == 0:\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    res = sum(arr[i:i+l])\n    return res\n",
        "num_ids": 28
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subArray = []\n    for index in range(len(arr)):\n        #print(arr[index])\n        subArray.append(sum(arr[index:]))\n    return sum(subArray)\n",
        "num_ids": 51
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Declare empty list\n    ans = []\n    #Populate list with all possible subarrays of length 2n and first and last subarrays\n    for i in range(len(arr)):\n        ans.append([arr[i][0],arr[i][-1]])\n        for j in range(1,len(arr)):\n            ans.append([arr[i][j],arr[i][j-1]])\n            #Append answer as subarrays of length 1\n    return ans\n",
        "num_ids": 121
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_arr = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum_of_arr += arr[j]*arr[i]\n    return sum_of_arr",
        "num_ids": 63
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]*(i+1)\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product_sum = []\n    for i in range(0,len(arr)):\n        product_sum.append(arr[i])\n    product_sum.sort()\n    # print(product_sum)\n    \n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if product_sum[j] == product_sum[j-1] + arr[i]:\n                return product_sum[j]\n                break\n    \n    return 0\n",
        "num_ids": 126
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = []\n    i = 0\n    j = len(arr)-1\n    \n    while i<len(arr):\n        if arr[i]==0:\n            ans.append([arr[i]])\n            i+=1\n        elif arr[j]==0:\n            ans.append(arr[j])\n            j-=1\n        else:\n            if arr[i]>arr[j]:\n                ans.append([arr[i]])\n                i+=1\n            else:\n                ans.append([arr[j]])\n                j-=1\n    ans.pop()\n    return ans\n",
        "num_ids": 148
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subArray = []\n    sum = 0\n    for i in range(0,len(arr)):\n        temp = []\n        for j in range(0,len(arr[i])):\n            temp.append(arr[i][j])\n        subArray.append(temp)\n    print(subArray)\n    def prod(arr, n):\n        prod = 1\n        for i in range(n):\n            prod *= arr[i]\n        return prod\n    sum = prod(subArray, len(subArray))\n    print(sum)\n    for i in range(1, len(subArray)):\n        sum = sum + prod(subArray, i)\n        print(sum)\n    return sum\n",
        "num_ids": 172
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarrays = []\n    for i in range(len(arr)):\n        subarrays.append(arr[i])\n    sum = 0\n    for i in range(len(subarrays)):\n        for j in range(i+1,len(subarrays)):\n            sum += subarrays[j]*subarrays[i]\n    return sum\n",
        "num_ids": 91
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    curr_sum = 0\n    for i in arr:\n        curr_sum += i\n        res += curr_sum\n        curr_sum = curr_sum % 10\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n:\n        return n & 0xF\n    else:\n        return ~n & 0xF\n",
        "num_ids": 28
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n<=0:\n        print(\"Input must be positive. Please try again.\")\n        return -1\n    elif n>127:\n        n = n-127\n    elif n==127:\n        n = 0\n    elif n<0:\n        n = 127\n",
        "num_ids": 69
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    new_n = bin(n)[2:].zfill(n.bit_length())\n    return new_n\n",
        "num_ids": 30
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n&n^n[:-1] & n^n[-1]\n",
        "num_ids": 22
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = str(n)\n    b = ''\n    if n[0] == '0':\n        b = '1' + n[1:]\n    else:\n        b = n[1:] + n[0]\n    return int(b, 2)\n",
        "num_ids": 64
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    b = bin(n).replace(\"0b\", \"\")\n    if b[0] == \"1\":\n        b = \"0\" + b\n    else:\n        b = \"1\" + b\n    b = b[1:]\n    b = \"0\" * (len(b) - 1) + b\n    return b\n",
        "num_ids": 80
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n % 2!= 0:\n        print(\"number is odd\")\n        return\n    else:\n        print(\"number is even\")\n        n = n & 0xFFFFFFFF\n        if n % 2 == 0:\n            n = n | 0x1\n        else:\n            n = n | 0x1\n        print(n)\n    return\n",
        "num_ids": 85
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n & 1\n",
        "num_ids": 23
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bits = bin(n).replace(\"0b\", \"\")\n    if bits[0] == '1':\n        bits = bits[1:]\n    if bits[-1] == '1':\n        bits = bits[:-1]\n    return int(bits, 2)\n",
        "num_ids": 66
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)\n    \n    zero = n[1:len(n)]\n    first = zero[0]\n    last = zero[len(zero)-1]\n    \n    n = n[1:] + first + last\n    \n    return n\n",
        "num_ids": 64
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if x < a[0]:\n        return 0\n    if n < 2:\n        return n\n    if x < a[1]:\n        return 1\n    p = bisect.bisect_left(a, x)\n    if p == 0:\n        return n\n    if p == 1:\n        return p\n    if p == n:\n        return p - 1\n    if a[p] < x:\n        return p\n",
        "num_ids": 112
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while a[i] < x:\n        i += 1\n    return i\n    \ndef find_right_insertion_point(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = len(a) - 1\n    while a[i] > x:\n        i -= 1\n    return i\n    \ndef insert_after_right_insertion(a, x, i):\n    '''\n    Write a function to insert an element after a specified element in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if i == 0:\n        a.insert(i + 1, x)\n        return a\n    else:\n        a.insert(i + 1, x)\n        i += 1\n        return a\n    \ndef selection_sort(a, n, recur_int):\n    '''\n    Write a function to sort an ordered list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if n < 1:\n        return a\n    if n < recur_int:\n        return selection_sort(a, n - 1, recur_int)\n    else:\n        return insert_after_right_insertion(a, a[n - 1], n - recur_int)\n",
        "num_ids": 72
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Your code here\n    pass\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Your code here\n    pass\ndef get_median(a):\n    '''\n    The median of a is the middle value. \n    '''\n    # Your code here\n    pass\ndef sort_list(a):\n    '''\n    Sort a in descending order.\n    '''\n    # Your code here\n    pass\ndef merge(a, b):\n    '''\n    Merge two sorted lists into a sorted list.\n    '''\n    # Your code here\n    pass\ndef merge_sort(a):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef quick_sort(a, l, r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef bubble_sort(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef insertion_sort(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef shell_sort(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef merge_sort_asc(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef merge_sort_desc(a,l,r):\n    '''\n    Sort a in descending order.\n    '''\n    # Your code here\n    pass\ndef bubble_sort_asc(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef bubble_sort_desc(a,l,r):\n    '''\n    Sort a in descending order.\n    '''\n    # Your code here\n    pass\ndef quick_sort_asc(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef quick_sort_desc(a,l,r):\n    '''\n    Sort a in descending order.\n    '''\n    # Your code here\n    pass\ndef merge_sort_asc_desc(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef merge_sort_desc_desc(a,l,r):\n    '''\n    Sort a in descending order.\n    '''\n    # Your code here\n    pass\ndef merge_sort_2(a,l,r):\n    '''\n    Sort a in ascending order.\n    '''\n    # Your code here\n    pass\ndef merge_sort_desc_2(a,l,r):\n    '''\n    Sort a in descending order.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the rightmost position where the value would go to if the element was inserted first\n    # Add the new value at the right position (o > x), then subtract 1 from its index (o > 0)\n    # O(n) = O(log n)\n    left = bisect.bisect_left(a, x)\n    if left >= len(a):\n        return len(a)\n    right = bisect.bisect_right(a, x) - 1\n    return left - right + 1\n",
        "num_ids": 120
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Your code here\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\n",
        "num_ids": 40
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Write your code here\n    i = bisect.bisect_left(a, x)\n    return i\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Write your code here\n    i = bisect.bisect_right(a, x)\n    return i\n    \ndef merge_sort(a):\n    '''\n    Write a function to sort an array in ascending order,\n    and return an unsorted array.\n    '''\n    # TODO: Write your code here\n    if len(a) < 2:\n        return a\n    \n    pivot = a[0]\n    left = []\n    right = []\n    \n    # TODO: Write your code here\n    i = 0\n    while i < len(a):\n        if a[i] < pivot:\n            left.append(a[i])\n            i += 1\n        else:\n            right.append(a[i])\n            i += 1\n    \n    return merge(left, right)\n",
        "num_ids": 128
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a or x < a[0]:\n        return -1\n    i = bisect.bisect_left(a,x)\n    if i == len(a):\n        return i\n    if a[i] < x:\n        return i\n    else:\n        return len(a)\n",
        "num_ids": 73
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    mid = (low+high)//2\n    while low<=high:\n        if a[mid]<x:\n            low=mid+1\n        elif a[mid]>x:\n            high=mid-1\n        mid=(low+high)//2\n    return mid\n",
        "num_ids": 84
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a)\n    # while (l < r):\n    #     mid = l + (r - l) // 2\n    #     if a[mid] < x:\n    #         l = mid + 1\n    #     else:\n    #         r = mid\n    i = bisect.bisect_left(a, x, lo=l, hi=r)\n    return a[i]\n",
        "num_ids": 104
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_index = bisect.bisect_left(a, x)\n    return left_index\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    #print(string)\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef check_str_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with either a vowel or not using regex.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        if string[1].lower() in \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_str_consonants(string): \n    '''\n    Write a function to check whether the given string is starting with either a vowel or not using regex.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        if string[1].lower() in \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_string_consonants(string): \n    '''\n    Write a function to check whether the given string is starting with either a vowel or not using regex.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        if string[1].lower() in \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_string_consonants_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with either a vowel or not using regex.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        if string[1].lower() in \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_string_consonants_consonants(string): \n    '''\n    Write a function to check whether the given string is starting with either a vowel or not using regex.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        if string[1].lower() in \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_var_vowel(char): \n    '''\n    Check whether the given character is vowel.\n    '''\n    if char.lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_var_consonant(char): \n    '''\n    Check whether the given character is consonant.\n    '''\n    if char.lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_var_consonants_vowels(string): \n    '''\n    Check whether the given string is consonants.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_var_consonants_consonants(string): \n    '''\n    Check whether the given string is consonants.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_var_consonants_consonants_vowels(string): \n    '''\n    Check whether the given string is consonants.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_var_consonants_consonants_consonants(string): \n    '''\n    Check whether the given string is consonants.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_var_consonants_consonants_consonants(string): \n    '''\n    Check whether the given string is consonants.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant(char): \n    '''\n    Check whether the given character is consonant.\n    '''\n    if char.lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_vowels(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants_vowels(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants_consonants_vowels(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants_consonants_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants_consonants_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants_consonants_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_vowel_consonant_consonants_consonants_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_consonant_consonant(char): \n    '''\n    Check whether the given character is consonant.\n    '''\n    if char.lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_consonant_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_consonant_consonants_vowels(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef is_consonant_consonants_consonants(string): \n    '''\n    Check whether the given string is consonant.\n    '''\n    if string[0].lower() in \"aeiouAEIOU\":\n        return True",
        "num_ids": 23
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in ['a', 'e', 'i', 'o', 'u']:\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return any(c in string for c in ['a','e','i','o','u'])\n",
        "num_ids": 25
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowel = 'aeiouAEIOU'\n    regex = '^[a-zA-Z]+$'\n    if not re.match(regex, string): \n        return False\n    else: \n        return True\n",
        "num_ids": 60
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Vowel check\n    if string.startswith(\"a\"):\n        return True\n    # Check if all characters are valid.\n    if len(string)!= len(set(string)):\n        return False\n    # Check if the string is empty.\n    if string == \"\":\n        return False\n    # Loop over the string and check for the vowels.\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 124
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith(\"v\"): \n        return True \n    else: \n        return False \n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return string \n    else: \n        return None \n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(string[0] in ['A','E','I','O','U']):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None\n",
        "num_ids": 17
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\ndef check_num(string):\n    '''\n    Write a function to check whether the given string is a valid Roman numeral.\n    '''\n    if (string[0] == 'M' or string[0] == 'f'):\n        return True\n    elif (string[0] == 'I' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_convert(string):\n    '''\n    Write a function to check whether the given string is a valid Roman numeral with converted to conversion notation.\n    '''\n    if (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'I' or string[0] == 'i'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_sos(string):\n    '''\n    Write a function to check whether the given string is a valid Roman numeral with SOS notation.\n    '''\n    if (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'I' or string[0] == 'i'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_bios(string):\n    '''\n    Write a function to check whether the given string is a valid Roman numeral with Bios notation.\n    '''\n    if (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'I' or string[0] == 'i'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_dec_num(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_convert_num(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_dec_convert_num(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_num_convert_num(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_convert_num_convert_num(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_convert_num_sos(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_convert_num_bios(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_num_convert_num_bios(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_num_sos(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n    if (string[0] == 'C' or string[0] == 'c'):\n        return True\n    elif (string[0] == 'D' or string[0] == 'd'):\n        return True\n    elif (string[0] == 'M' or string[0] =='m'):\n        return True\n    elif (string[0] == 'X' or string[0] == 'x'):\n        return True\n    else:\n        return False\ndef check_num_bios(string):\n    '''\n    Write a function to check whether the given string is a valid decimal numeral with conversion notation.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    return n + geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    assert n >= 1, \"Cannot calculate sum of less than one number\"\n    def geometric_sum_(n, x):\n        # x is the start value for the recursion\n        # n is the current value of n\n        # x is the end value for the recursion\n        if n == 1:\n            return x\n        else:\n            return (n*geometric_sum_(n-1, x) + x)\n",
        "num_ids": 100
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def outer(n, d):\n        if n == 0:\n            return d\n        return n*outer(n-1, d+1)\n        \n    return outer(n,0)\n",
        "num_ids": 48
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (n*(n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return (geometric_sum(n-1) + n)\n",
        "num_ids": 29
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    result = n * geometric_sum(n-1)\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    \n    if n < 0:\n        print(\"Invalid Input\")\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        for i in range(10):\n            \n            if n % 10 == i:\n                return i\n                break\n            \n            \ndef is_prime(n):\n    '''\n    Return True if the number is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3 or n == 5:\n        return True\n    else:\n        for i in range(5, int(math.sqrt(n) + 1), 6):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 99
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i=0\n    while(n-i>=0): \n        if (n-i)%3==0: \n            i=n-i\n        else: \n            i=n-i-1\n            return i\n        n=n-i\n    return n",
        "num_ids": 68
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a = n//10\n    b = n%10\n    ans = (n//10)**2\n    if (b >= a and b >= 10):\n        ans += (n//10)**2\n        ans += (b//10)**2\n        ans += (b%10)**2\n        return ans\n    else:\n        return 0\n",
        "num_ids": 108
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n < 0:\n        print(\"invalid input\")\n        return -1\n    # Find index of smallest triangular number \n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    else:\n        return -1\n    \ndef find_Inverse(n):\n    '''\n    Write a python function to find the inverses of the factors of n. https://www.geeksforgeeks.org/find-the-inverse-of-a-factorial-of-n/\n    '''\n    if n < 0:\n        print(\"invalid input\")\n        return -1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53",
        "num_ids": 668
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n+1):\n        if (n % i == 0): \n            return i \n    else: \n        return n+1 \n",
        "num_ids": 43
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    digits = [0, 1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n    index = digits[n - 1] + 1\n    return index\n",
        "num_ids": 64
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = []\n    for i in range(0,n):\n        l.append(i)\n    print(l)\n    l.sort()\n    print(l)\n    print(l[n-1])\n    return(l[n-1])\n",
        "num_ids": 64
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0:\n        return -1\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    elif n==5:\n        return 4\n    elif n==6:\n        return 5\n    elif n==7:\n        return 6\n    elif n==8:\n        return 7\n    elif n==9:\n        return 8\n    elif n==10:\n        return 9\n    elif n==11:\n        return 10\n    elif n==12:\n        return 11\n    else:\n        return -1\n",
        "num_ids": 167
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 10: return n\n    elif n == 10: return 0\n    elif n < 100: return n - 9\n    elif n < 1000: return n - 5\n    elif n < 10000: return n - 3\n    else: return n - 1\n",
        "num_ids": 65
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #find the index of smallest triangular number with n digits\n    if n==0 or n==1: \n        return 0\n    elif n==2 or n==3 or n==4:\n        return 1\n    elif n==5 or n==6 or n==7:\n        return 2\n    elif n==8 or n==9:\n        return 3\n    elif n==10:\n        return 4\n    elif n==11:\n        return 5\n    elif n>=12:\n        return find_Index(n-1)\n    else:\n        return find_Index(n-2)\n",
        "num_ids": 146
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0], test_tup[1]))\n",
        "num_ids": 24
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i][0]] = test_tup[i][1]\n    return d\n",
        "num_ids": 49
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    dict1 = {}\n    for i in test_tup:\n        dict1[i] = test_tup[i]\n    return dict1\n",
        "num_ids": 40
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output_dict = dict()\n    for idx, element in enumerate(test_tup):\n        output_dict[element] = idx\n    return output_dict\n",
        "num_ids": 43
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n",
        "num_ids": 48
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    # Remember to iterate through every pair of adjacent elements\n    for i in range(0, len(test_tup)):\n        d[test_tup[i][0]] = test_tup[i][1]\n    return d\n",
        "num_ids": 64
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) < 1:\n        return None\n    else:\n        return dict(zip(test_tup[0], test_tup[1]))\n",
        "num_ids": 45
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    dict_tup[0] = test_tup[0]\n    dict_tup[1] = test_tup[1]\n    dict_tup[2] = test_tup[2]\n    dict_tup[3] = test_tup[3]\n    dict_tup[4] = test_tup[4]\n    dict_tup[5] = test_tup[5]\n    dict_tup[6] = test_tup[6]\n    dict_tup[7] = test_tup[7]\n    dict_tup[8] = test_tup[8]\n    dict_tup[9] = test_tup[9]\n    dict_tup[10] = test_tup[10]\n    dict_tup[11] = test_tup[11]\n    dict_tup[12] = test_tup[12]\n    dict_tup[13] = test_tup[13]\n    dict_tup[14] = test_tup[14]\n    dict_tup[15] = test_tup[15]\n    return dict_tup\n",
        "num_ids": 289
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    ret_dict = {}\n    for i in test_tup:\n        ret_dict[i] = test_tup.index(i)\n    return ret_dict\n",
        "num_ids": 43
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0],test_tup[1]))\n",
        "num_ids": 24
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    return all(char not in s for char in s)\n",
        "num_ids": 30
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c=len(s)\n    for i in range(c):\n        if s[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return 0\n    return 1\n",
        "num_ids": 52
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # This function check whether the characters are same or not.\n    # We use 'and' operator to compare character in string and not.\n    # If the character is same, we return True. If the character is not, we return False.\n    # The condition is case sensitive.\n    # e.g.\n    # s = \"xsc\"\n    # return True\n    # s = \"nx\"\n    # return False\n",
        "num_ids": 100
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(1, len(s)+1) :\n        if s[i-1] == s[i] :\n            pass\n        else :\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (s == s[::-1])\n",
        "num_ids": 14
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i] in s[i+1:] :\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if char!= s[0] and char!= s[-1] :\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if char == char :\n            pass\n        else :\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    dictionary = {}\n    for i in s:\n        if i in dictionary.keys():\n            dictionary[i]+=1\n        else:\n            dictionary[i]=1\n    for i in dictionary.keys():\n        if dictionary[i]==1:\n            return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    i = 0\n    while (i < len(s)) :\n        if (s[i] == s[i + 1]) :\n            i = i + 2\n        else :\n            i = i + 1\n    if i == len(s) :\n        print(\"Yes\")\n    else :\n        print(\"No\")\n",
        "num_ids": 78
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return 1/6\n    elif side == 2:\n        return 4/9\n    elif side == 3:\n        return 5/9\n    elif side == 4:\n        return 7/9\n    elif side == 5:\n        return 9/9\n    elif side == 6:\n        return 3/9\n    elif side == 7:\n        return 6/9\n    elif side == 8:\n        return 5/9\n    elif side == 9:\n        return 8/9\n    else:\n        return 'The side does not exist'\n",
        "num_ids": 141
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * (side - 1) / 2) * math.sqrt((side ** 2 - 1) / 6)\n",
        "num_ids": 31
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(side**2 - (side*side - side*side*(side - 1)))\n",
        "num_ids": 28
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(side):\n        for j in range(side):\n            if i==0:\n                if j==0:\n                    area += (3/4)*side\n                elif j==side-1:\n                    area += (3/4)*side\n                else:\n                    area += ((side-1)*side*2/4)\n            else:\n                if i==side-1:\n                    area += (3/4)*side\n                elif j==0:\n                    area += (3/4)*side\n                elif j==side-1:\n                    area += (3/4)*side\n                else:\n                    area += ((side-1)*side*2/4)\n    print(area)\n    return area\n",
        "num_ids": 178
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    else:\n        return side**2 * math.sqrt(3)\n",
        "num_ids": 31
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = side.lower()\n    side = side.replace(\" \", \"\")\n    side = side.split(\"/\")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 4 * (side[0]*side[1])\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 4 * (side[0]*side[1])\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 8 * (side[0]*side[1])\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 8 * (side[0]*side[1])\ndef area_trident(side):\n    '''\n    Write a function to caluclate the area of a trident.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return abs(side[0]-side[1])\ndef area_tetrahedron_area(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 4*(side[0]*side[1])\ndef area_cube_area(side):\n    '''\n    Write a function to caluclate the area of a cube and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 8*(side[0]*side[1])\ndef area_octahedron_area(side):\n    '''\n    Write a function to caluclate the area of an octahedron and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 8*(side[0]*side[1])\ndef area_dodecahedron_area(side):\n    '''\n    Write a function to caluclate the area of an dodecahedron and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 8*(side[0]*side[1])\ndef area_trident_area(side):\n    '''\n    Write a function to caluclate the area of a trident and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return abs(side[0]-side[1])\ndef volume(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return abs(side[0]-side[1])*side[0]*side[1]\ndef area_tetrahedron_volume(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return abs(side[0]-side[1])*side[0]*side[1]\ndef volume_tetrahedron_volume(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron and its \n    subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return abs(side[0]-side[1])*side[0]*side[1]\ndef area_cube_volume(side):\n    '''\n    Write a function to caluclate the volume of a cube and its subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 4*(side[0]*side[1])\ndef area_octahedron_volume(side):\n    '''\n    Write a function to caluclate the volume of an octahedron and its subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 8*(side[0]*side[1])\ndef area_dodecahedron_volume(side):\n    '''\n    Write a function to caluclate the volume of an dodecahedron and its subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return 8*(side[0]*side[1])\ndef area_trident_volume(side):\n    '''\n    Write a function to caluclate the volume of a trident and its subvolume.\n    '''\n    side = side.lower()\n    side = side.split(\" \")\n    side = [int(i) for i in side]\n    if(side[0]!= side[1]):\n        raise ValueError(\"Side must be of same dimension.\")\n    return abs(side[0]-side[1])*side[0]*side[1]\ndef volume_tetrahedron_volume(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron and its subvolume.\n    '''\n    side = side.lower()\n",
        "num_ids": 10
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'l':\n        a = 1.54\n        b = 0.072\n        c = 0.0\n        d = 1.46\n    elif side == 'r':\n        a = 1.54\n        b = 1.02\n        c = 0.0\n        d = 1.24\n    else:\n        raise Exception('invalid side of tetrahedron')\n    return math.pi * (a * b * c) * d\ndef area_tetrahedron_list(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron list.\n    '''\n    if side == 'l':\n        a = 1.54\n        b = 0.072\n        c = 0.0\n        d = 1.46\n    elif side == 'r':\n        a = 1.54\n        b = 1.02\n        c = 0.0\n        d = 1.24\n    else:\n        raise Exception('invalid side of tetrahedron')\n    return [area_tetrahedron(side), area_tetrahedron(side) / (2 * (math.pi * a * b * c)), area_tetrahedron(side) / (2 * (math.pi * a * b * d)), area_tetrahedron(side) / (4 * math.pi)]\ndef area_tetrahedron_from_list(side_list):\n    '''\n    Write a function to calculate the area of a tetrahedron list.\n    '''\n    side = side_list[0]\n    side_list = side_list[1:]\n    return area_tetrahedron(side) / (2 * (math.pi * side_list[0] * side_list[2]))\n",
        "num_ids": 60
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side ** 3 / 4\n    return a\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    b = a/math.sqrt(3)\n    c = math.sqrt(3)*a\n    return b*b*c\n",
        "num_ids": 42
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # area of tetrahedron\n    side_of_a = side ** 2\n    side_of_b = side ** 2\n    side_of_c = side ** 2\n    side_of_d = side ** 2\n    # side of triangle\n    side_a = (side_of_a + side_of_c + side_of_b + side_of_d) / 6\n    side_b = (side_of_a + side_of_b + side_of_c + side_of_d) / 6\n    side_c = (side_of_a + side_of_b + side_of_c + side_of_d) / 6\n    side_d = (side_of_a + side_of_b + side_of_c + side_of_d) / 6\n    # side of triangle\n    side_v = math.sqrt(side_a**2 + side_b**2 + side_c**2)\n    area_triangle = (side_v * 3) / 2\n",
        "num_ids": 244
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(len(list))\n    return list\n",
        "num_ids": 14
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 1:\n        return list\n    if len(list) % 2 == 1:\n        return [list[-1], list[0]]\n",
        "num_ids": 41
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    start = 0\n    for i in range(m):\n        start = (start + n - 2) % n\n        list[start], list[n-1-start] = list[n-1-start], list[start]\n",
        "num_ids": 64
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.reverse()\n    index = 0\n    m = len(list) - 1\n    while index <= m:\n        list[index], list[m] = list[m], list[index]\n        index += 1\n        m -= 1\n",
        "num_ids": 59
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[::-1]\n",
        "num_ids": 11
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(\"\\nList after rotation:\")\n    for index in range(m):\n        print(list[index], end=\" \")\n    print()\n    return list\n    \ndef rotate_right_recursive(list, m):\n    '''\n    Write a recursive function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) <= 1:\n        return list\n    else:\n        list = rotate_right_recursive(list[1:], m)\n        list = rotate_right_recursive(list[:-1], m)\n        return list + [list[0]]\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    print(\"\\nList after rotation:\")\n    for index in range(m):\n        print(list[index], end=\" \")\n    print()\n    return list\n    \ndef rotate_left_recursive(list, m):\n    '''\n    Write a recursive function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    if len(list) <= 1:\n        return list\n    else:\n        list = rotate_left_recursive(list[1:], m)\n        list = rotate_left_recursive(list[:-1], m)\n        return list + [list[0]]\n    \ndef rotate_right_recursive(list, m):\n    '''\n    Write a recursive function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) <= 1:\n        return list\n    else:\n        list = rotate_right_recursive(list[1:], m)\n        list = rotate_right_recursive(list[:-1], m)\n        return list + [list[0]]\n    \ndef rotate_right_recursive(list, m):\n    '''\n    Write a recursive function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) <= 1:\n        return list\n    else:\n        list = rotate_right_recursive(list[1:], m)\n        list = rotate_right_recursive(list[:-1], m)\n        return list + [list[0]]\n    \ndef bubble_sort(list):\n    '''\n    Sort the given list using Bubble Sort algorithm.\n    '''\n    print(\"\\nList after bubble sort:\")\n    for index in range(len(list)-1):\n        for j in range(index+1):\n            if list[j] > list[j+1]:\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n    \ndef merge_sort(list):\n    '''\n    Sort the given list using Merge Sort algorithm.\n    '''\n    print(\"\\nList after merge sort:\")\n    print(\"[\", end=\"\")\n    for index in range(len(list)-1):\n        for j in range(index+1):\n            if list[j] > list[j+1]:\n                list[j], list[j+1] = list[j+1], list[j]\n        print(\"{}],\".format(list[j+1]), end=\",\")\n    print(\"]\")\n    return list\n    \ndef quick_sort(list):\n    '''\n    Sort the given list using Quick Sort algorithm.\n    '''\n    print(\"\\nList after quick sort:\")\n    print(\"[\", end=\"\")\n    if len(list) <= 1:\n        return list\n    else:\n        pivot = list[0]\n        smaller = [index for index in range(len(list)) if list[index] < pivot]\n        larger = [index for index in range(len(list)) if list[index] > pivot]\n        if len(smaller) > 0:\n            smaller = quick_sort(smaller)\n        if len(larger) > 0:\n            larger = quick_sort(larger)\n        print(\"{}],\".format(pivot), end=\",\")\n        for index in range(len(smaller) + len(larger)):\n            if index < len(smaller):\n                list[index] = smaller[index]\n            if index < len(larger):\n                list[index] = larger[index]\n        print(\"]\")\n        return list\n    \ndef heapify(list, n, i):\n    '''\n    heapify the given list by taking the smallest item from the i'th child node.\n    '''\n    print(\"\\nList after heapify:\")\n    for index in range(i, n):\n        if list[index] > list[2 * index - 1]:\n            list[index], list[2 * index - 1] = list[2 * index - 1], list[index]\n            # swap the children of the i'th and 2*i'th one\n            list[2 * index - 1], list[index] = list[index], list[2 * index - 1]\n    return list\n    \ndef heap_sort(list):\n    '''\n    Sort the given list using Heap Sort algorithm.\n    '''\n    print(\"\\nList after heap sort:\")\n    print(\"[\", end=\"\")\n    for index in range(len(list)-1):\n        for j in range(index+1):\n            if list[j] > list[j+1]:\n                list[j], list[j+1] = list[j+1], list[j]\n        print(\"{}],\".format(list[j+1]), end=\",\")\n    print(\"]\")\n    return list\n    \ndef selection_sort(list):\n    '''\n    Sort the given list using Selection Sort algorithm.\n    '''\n    print(\"\\nList after selection sort:\")\n    for index in range(len(list)-1):\n        for j in range(index+1):\n            if list[j] > list[j+1]:\n                list[j], list[j+1] = list[j+1], list[j]\n        print(\"[\", end=\"\")\n        for index in range(len(list)):\n            if index == j:\n                print(list[index], end=\"\")\n            elif index > j:\n                print(list[index], end=\"\")\n        print(\"]\")\n    return list\n    \ndef counting(list):\n    '''\n    Count the occurrences of the smallest number in the given list.\n    '''\n    print(\"\\nList after counting:\")\n    count = [0] * len(list)\n    for index in range(len(list)):\n        count[index] = list[index]\n    print(\"[\", end=\"\")\n    for index in range(len(list)):\n        if count[index] == 0:\n            print(0, end=\"\")\n        else:\n            print(index + 1, end=\"\")\n            print(\"\", count[index])\n    print(\"]\")\n    return count\n    \ndef insertion_sort(list):\n    '''\n    Sort the given list using insertion sort algorithm.\n    '''\n    print(\"\\nList after insertion sort:\")\n    for index in range(1, len(list)):\n        for j in range(index):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n        print(\"[\", end=\"\")\n        for index in range(len(list)):\n            if index == j:\n                print(list[index], end=\"\")\n            elif index > j:\n                print(list[index], end=\"\")\n        print(\"]\")\n    return list\n    \ndef selection_insertion_sort(list):\n    '''\n    Sort th",
        "num_ids": 5
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return rotate(list, m, 0, len(list)-1)\n",
        "num_ids": 19
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n <= 1:\n        return list\n    for i in range(n-1, 0, -1):\n        temp = list[i]\n        for j in range(i):\n            list[j] = list[j+1]\n        list[i] = temp\n    return list\n",
        "num_ids": 79
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp_list = list[:]\n    n = len(list)\n    print(f'temp_list = {temp_list}')\n    print(f'n = {n}')\n    for i in range(n//2):\n        temp_list[i], temp_list[n-i-1] = temp_list[n-i-1], temp_list[i]\n        print(f'temp_list = {temp_list}')\n    \n    return temp_list\n",
        "num_ids": 117
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Check if tuple is empty\n    if len(test_tup) == 0:\n        raise ValueError(\"Tupl has no elements!\")\n",
        "num_ids": 36
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i!= None:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for el in test_tup:\n        if el is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is not None\n",
        "num_ids": 12
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 22
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == None:\n            count = count + 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def digit_recursive(num):\n        if num < 10:\n            return num\n        else:\n            return num % 10\n",
        "num_ids": 33
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if all(x % y == 0 for y in range(10))]\n",
        "num_ids": 36
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # TODO: Write your code here\n    digit = 1\n    while(digit<=10):\n        i=0\n        while(i<=digit):\n            if(startnum%(i**digit)==0 and endnum%(i**digit)==0):\n                print(i**digit, end=\" \")\n            i+=1\n        digit+=1\n",
        "num_ids": 88
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_number(string_):\n        try:\n            float(string_)\n        except ValueError:\n            return False\n",
        "num_ids": 33
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = abs(startnum)\n    endnum = abs(endnum)\n    # Python has a built-in function called abs() that does a signed integer division. Here we use the abs() function to get the absolute value of a number.\n    # In Python, we use the abs() function to get the absolute value of a number.\n    # Here we use the abs() function to get the absolute value of a number.\n    \n    # Your code here\n    while startnum <= endnum:\n        startnum = startnum * 10\n        endnum = endnum * 10\n    # DO NOT forget to return the result.\n    return startnum, endnum\n",
        "num_ids": 152
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        num = int(str(num) + str(num)[1:])\n        if num % 10!= 0:\n            result.append(num)\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = []\n    for i in range(startnum, endnum+1):\n        if sum(map(int, str(i))) % 10 == 0:\n            l.append(i)\n    return l\n",
        "num_ids": 52
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    range_list = []\n    for num in range(startnum, endnum):\n        if num % 10 == 0:\n            range_list.append(num)\n    return range_list\n",
        "num_ids": 47
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    print(divisible_by_digits.__doc__)\n    \n    def divisible_by_digits(startnum, endnum):\n        '''\n        Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n        '''\n        \n        print(divisible_by_digits.__doc__)\n        \n        startnum = int(startnum)\n        endnum = int(endnum)\n        divisible_by_digits = endnum - startnum\n        \n        print(divisible_by_digits)\n        \n        divisible_by_digits = divisible_by_digits/10\n        \n        print(divisible_by_digits)\n        \n        return divisible_by_digits\n",
        "num_ids": 118
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # YOUR CODE HERE\n    if endnum-startnum<1:\n        print(startnum)\n        print(endnum)\n        return(startnum)\n",
        "num_ids": 40
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    while r < 0:\n        r = float(input(\"Invalid input! Enter a valid angle between -90 and 90 degrees in decimal degrees.\\n\\n\"))\n    while a < 0:\n        a = float(input(\"Invalid input! Enter a valid angle between -90 and 90 degrees in decimal degrees.\\n\\n\"))\n    # if angle is greater than 360 degrees, then change the angle to be between -90 and 90 degrees\n    if a > 180:\n        a = a - 360\n    # if angle is less than 0 degrees, change the angle to be between -90 and 90 degrees\n    if a < -90:\n        a = a + 360\n    # find the area of the sector\n    sector_area = 2 * math.pi * r * a * math.sin(a)\n    return sector_area\n",
        "num_ids": 187
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(r <= 1.2):\n        return None\n    elif(r <= 2.4):\n        return math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 2.6):\n        return 0.23*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 2.8):\n        return 0.24*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 3.0):\n        return 0.25*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 3.4):\n        return 0.26*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 3.6):\n        return 0.28*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 3.8):\n        return 0.29*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.0):\n        return 0.31*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.2):\n        return 0.33*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.4):\n        return 0.34*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.6):\n        return 0.36*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.8):\n        return 0.37*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.38*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.39*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.41*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.42*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.43*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.44*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.45*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.46*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.47*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.48*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.49*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.51*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.52*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.53*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.54*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.55*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.56*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.57*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.58*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.59*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.61*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.62*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.63*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.64*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.65*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.66*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.67*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.68*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.69*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.70*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.71*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.72*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.73*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.74*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.75*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.76*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.77*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.78*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.79*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.81*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.82*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.83*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.84*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.85*math.pi*(r**2)*(1-a**2)/2\n    elif(r <= 4.9):\n        return 0.86*math.pi*",
        "num_ids": 1993
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef sector_circumference(r,a):\n    '''\n    Write a function to find circumference of a sector. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef sin_cos(r,a):\n    '''\n    Write a function to compute the sin and cos of a given angle. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef square_area(r):\n    '''\n    Write a function to compute the area of a square. Function should return None if the given radius is 0.\n    '''\n    pass\ndef square_circumference(r):\n    '''\n    Write a function to compute the circumference of a square. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_area(r):\n    '''\n    Write a function to compute the area of a circle. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_circumference(r):\n    '''\n    Write a function to compute the circumference of a circle. Function should return None if the given radius is 0.\n    '''\n    pass\ndef square_perimeter(r):\n    '''\n    Write a function to compute the perimeter of a square. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter(r):\n    '''\n    Write a function to compute the perimeter of a circle. Function should return None if the given radius is 0.\n    '''\n    pass\ndef triangle_area(r):\n    '''\n    Write a function to compute the area of a triangle. Function should return None if the given radius is 0.\n    '''\n    pass\ndef triangle_circumference(r):\n    '''\n    Write a function to compute the circumference of a triangle. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_area(r):\n    '''\n    Write a function to compute the area of a parallelogram. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_circumference(r):\n    '''\n    Write a function to compute the circumference of a parallelogram. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_squared(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef triangle_perimeter_squared(r):\n    '''\n    Write a function to compute the circumference of a triangle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_squared(r):\n    '''\n    Write a function to compute the circumference of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef triangle_area_squared(r):\n    '''\n    Write a function to compute the area of a triangle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_area_squared(r):\n    '''\n    Write a function to compute the area of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_area_squared(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_area_squared(r):\n    '''\n    Write a function to compute the area of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef triangle_perimeter_area_area(r):\n    '''\n    Write a function to compute the circumference of a triangle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_area_area(r):\n    '''\n    Write a function to compute the circumference of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_perimeter_area(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_perimeter_area(r):\n    '''\n    Write a function to compute the circumference of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_area_perimeter(r):\n    '''\n    Write a function to compute the area of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_area_perimeter(r):\n    '''\n    Write a function to compute the area of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_area_perimeter(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_area_perimeter(r):\n    '''\n    Write a function to compute the circumference of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_area_area_perimeter(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_area_area_perimeter(r):\n    '''\n    Write a function to compute the circumference of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_area_perimeter_area_perimeter(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_area_perimeter_area_perimeter(r):\n    '''\n    Write a function to compute the circumference of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef triangle_area_area_area_area_area(r):\n    '''\n    Write a function to compute the area of a triangle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_area_area_area_area(r):\n    '''\n    Write a function to compute the area of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_area_area_area_area(r):\n    '''\n    Write a function to compute the area of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_area_area_area_area(r):\n    '''\n    Write a function to compute the area of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_area_area_area_area(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef triangle_perimeter_area_area_area_area(r):\n    '''\n    Write a function to compute the circumference of a triangle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_area_area_area_area(r):\n    '''\n    Write a function to compute the circumference of a parallelogram squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef circle_perimeter_area_area_area_area_area(r):\n    '''\n    Write a function to compute the circumference of a circle squared. Function should return None if the given radius is 0.\n    '''\n    pass\ndef parallelogram_perimeter_area_area_area_area_area(r):\n    '''\n    Write a function to compute the circumference of a parallelogra",
        "num_ids": 15
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(math.isnan(a)):\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r < 1.0:\n        r = 1.0\n    if a < 0.0:\n        a = 0.0\n    return (a * (math.pi * r**2))/(4.0*math.sin(a)**2)\n",
        "num_ids": 63
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if math.isnan(r):\n        print(\"The radius is missing\")\n        return None\n    if a > 180:\n        print(\"The angle is too large\")\n        return None\n    if a == 180:\n        print(\"The angle is the same as 180\")\n        return r * math.cos(a)\n    elif a < 0:\n        print(\"The angle is too small\")\n        return None\n    else:\n        return r * math.cos(a)\n",
        "num_ids": 113
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = round(a/180.0*math.pi)\n    if(a<0.0):\n        a = a*180.0\n    if(r<0):\n        r = r*-1\n    if(a>360.0):\n        a = 360.0\n    if(a<-360.0):\n        a = a*-1\n    if(math.isnan(a)):\n        a = 360.0\n    if(math.isnan(r)):\n        r = 0\n    return round(r*a)\n",
        "num_ids": 134
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef two_d_sector_area(r,a):\n    '''\n    Write a function to find area of a two-dimensional sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef three_d_sector_area(r,a):\n    '''\n    Write a function to find area of a three-dimensional sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef square_sector_area(r,a):\n    '''\n    Write a function to find area of a square sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef pentagon_sector_area(r,a):\n    '''\n    Write a function to find area of a pentagon sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef hexagon_sector_area(r,a):\n    '''\n    Write a function to find area of a hexagon sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef rectangle_sector_area(r,a):\n    '''\n    Write a function to find area of a rectangle sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef circle_sector_area(r,a):\n    '''\n    Write a function to find area of a circle sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef triangle_sector_area(r,a):\n    '''\n    Write a function to find area of a triangle sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef parallelogram_sector_area(r,a):\n    '''\n    Write a function to find area of a parallelogram sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef rhombus_sector_area(r,a):\n    '''\n    Write a function to find area of a rhombus sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef rhombus_sector_area_2(r,a):\n    '''\n    Write a function to find area of a rhombus sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef parallelogram_sector_area_2(r,a):\n    '''\n    Write a function to find area of a parallelogram sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef parallelogram_sector_area_3(r,a):\n    '''\n    Write a function to find area of a parallelogram sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check for angle > 360 degrees\n    if a>360:\n        a=a%360\n    if r%100<20:\n        return round(math.pi*r*(a/180),2)\n    else:\n        #return None if the angle is larger than 360 degrees\n        return round(math.pi*r*(a/180),2)\ndef parallelogram_sector_area_4(r,a):\n    '''\n    Write a function to find area of a parallelogram sector. The functio",
        "num_ids": 20
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>=0:\n        angle=math.atan(abs(a)/math.tan(math.radians(360-a)))\n        s=2*a*math.cos(angle)\n    else:\n        s=0\n    return s\n",
        "num_ids": 62
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a > 180):\n        return None\n    elif (a > 90 and a < 180):\n        return r * math.cos(math.radians(90-a))\n    elif (a > 75 and a < 90):\n        return r * math.cos(math.radians(75-a))\n    elif (a > 25 and a < 75):\n        return r * math.cos(math.radians(25-a))\n    elif (a > 0):\n        return r * math.cos(math.radians(a))\n    else:\n        return None\n",
        "num_ids": 140
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = X + Z\n    Y = Y + Z\n    Z = Z + Z\n",
        "num_ids": 23
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # lcs = [[0]*len(X) for i in range(len(Y))]\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create an empty lists\n    LCS_Length = []\n    LCS_len = 0\n    LCS_Length.append([0 for x in range(len(Z))])\n    for i in range(len(Z)):\n        LCS_Length.append([0 for x in range(len(X))])\n        LCS_Length[i][i] = i\n        LCS_Length[i][i+1] = i+1\n    for i in range(len(X)):\n        for j in range(len(Z)):\n            if(i+1<len(X)):\n                if(X[i+1]==Z[j]):\n                    LCS_Length[i+1][j] = LCS_Length[i][j]\n                    LCS_Length[i][j+1] = LCS_Length[i+1][j]\n                else:\n                    LCS_Length[i+1][j] = max(LCS_Length[i+1][j], LCS_Length[i][j+1])\n                    LCS_Length[i][j+1] = max(LCS_Length[i][j+1], LCS_Length[i+1][j])\n    return(LCS_Length[len(X) - 1][len(Z) - 1])\n",
        "num_ids": 294
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Find the length of the string sequence\n    length_of_string_sequence = len(X) + len(Y) + len(Z)\n    \n    # Find the maximum width of the matrix, which is the length of the string sequence + 1\n    max_width = max(len(X), len(Y), len(Z))\n    \n    # Create a Matrix of zeros to store the longest common subsequences.\n    # The first element of the matrix is the starting position of the first occurrence of the first character of the string sequence\n    # The second element of the matrix is the ending position of the first occurrence of the first character of the string sequence\n    # The third element of the matrix is the ending position of the first occurrence of the second character of the string sequence\n    # In all three matrices the longest common subsequence is the position of the first occurrence of the first character of the string sequence + 1\n    longest_common_subsequence = [[0 for _ in range(max_width + 1)] for _ in range(length_of_string_sequence)]\n    \n    # For each position of the first occurrence of the first character of the string sequence\n    for i in range(length_of_string_sequence):\n        # for each position of the second occurrence of the first character of the string sequence\n        for j in range(max_width):\n            # for each position of the second occurrence of the second character of the string sequence\n            for k in range(j + 1, max_width):\n                if X[i] == Y[j] == Z[k] and (j == 0 or k == 0 or j == k):\n                    longest_common_subsequence[i][j] = 1\n                \n    # For each position of the first occurrence of the first character of the string sequence\n    for i in range(length_of_string_sequence):\n        # for each position of the second occurrence of the first character of the string sequence\n        for j in range(max_width):\n            # for each position of the second occurrence of the second character of the string sequence\n            for k in range(j + 1, max_width):\n                # if the character is present in the first occurrence of the first character of the string sequence\n                if X[i] == Y[j] == Z[k]:\n                    longest_common_subsequence[i][j] = longest_common_subsequence[i][j] + 1\n    \n    # For each position of the first occurrence of the first character of the string sequence\n    for i in range(length_of_string_sequence):\n        # if the character is present in the first occurrence of the first character of the string sequence\n        if X[i] == Y[0] == Z[0]:\n            # return the position of the first occurrence of the first character of the string sequence\n            return i\n        \n    # If there are no long-common subsequences, return -1\n    return -1\n",
        "num_ids": 662
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) + 1\n    n = len(Y) + 1\n    LCS = [[0 for x in range(m + 1)] for y in range(n + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[j][i] = LCS[j - 1][i - 1] + 1\n            else:\n                LCS[j][i] = max(LCS[j - 1][i], LCS[j][i - 1])\n",
        "num_ids": 142
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    \n    # Initiliaztion\n    lcs = [[0]*(n+1) for i in range(m+1)]\n    \n    # Initialize the lcs with zeros\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n    \n    # Find the most common lcs\n    for i in range(m+1):\n        for j in range(n+1):\n            if lcs[i][j] == lcs[i][j-1]:\n                print(\"LCS of\", X[i], Y[j], Z[i], \":\", lcs[i][j])\n                return\n    print(\"LCS of\", X, \"and\", Y, \":\", lcs)\n",
        "num_ids": 269
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l = len(X)\n    m = len(Y)\n    n = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # longest common subsequence\n    def lcs_of_three(string1, string2, string3):\n        # code here\n        i = 0\n        j = 0\n        m = 0\n        n = 0\n        m = len(string1)\n        n = len(string2)\n        m = len(string3)\n        # This is to loop for m,n\n        while i < m and j < n:\n            # If there is any left or right subsequence, compare the values\n            if string1[i] == string2[j] and string1[i] == string3[n-j-1]:\n                i += 1\n                j += 1\n                m -= 1\n            elif string1[i] == string2[j] and string2[i] == string3[n-j-1]:\n                j += 1\n                n -= 1\n            elif string1[i] == string2[j] and string2[i] == string3[n-j-1]:\n                i += 1\n                j += 1\n                n -= 1\n            elif string1[i] == string2[j] and string2[i] == string3[n-j-1]:\n                i += 1\n                j += 1\n                n -= 1\n        if m > n:\n            # if there is any left or right subsequence, add the right subsequence\n            return lcs_of_three(string1, string3, string2)\n        else:\n            # if there is any left or right subsequence, add the left subsequence\n            return lcs_of_three(string2, string3, string1)\n",
        "num_ids": 381
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = [len(x) for x in [X, Y, Z]]\n    # if length of X and Y are equal, use LCS of X and Y\n    if all(len(x) == len(y) for x, y in zip(X, Y)):\n        L = max(L)\n        for i in range(len(Y)):\n            if L[i] == len(X[i]):\n                return Y[i]\n            L[i] = max(L[i], len(X[i]) + len(Y[i]))\n    # if lengths of X and Y are unequal, use LCS of X and Z\n    elif all(len(x) == len(z) for x, z in zip(X, Z)):\n        L = max(L)\n        for i in range(len(Z)):\n            if L[i] == len(X[i]):\n                return Z[i]\n            L[i] = max(L[i], len(X[i]) + len(Z[i]))\n    else:\n        L = max(L)\n    # if lengths are unequal, return empty string\n    if L == len(X) + len(Y) or L == len(Y) + len(X):\n        return \"\"\n    else:\n        return lcs_of_three(X[:L-1], Y[:L-1], Z[:L-1]) + lcs_of_three(X[L-1:], Y[L-1:], Z[L-1:])\n",
        "num_ids": 365
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # check for empty string\n    if len(X) == 0 and len(Y) == 0 and len(Z) == 0: return 0\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: return 0\n    \n    # initialise the dp array\n    dp = [[-1 for i in range(len(Z)+1)] for j in range(len(X)+1)]\n    \n    # if X and Y are the same size\n    if len(X)!= len(Y) or len(X)!= len(Z):\n        return 0\n    \n    # if Z has the same length\n    if len(Z) == len(X):\n        dp[len(X)][len(Z)] = 0\n        return dp[len(X)][len(Z)]\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return 0\n    \n    # if X is empty\n    if len(X) == 0:\n        return 0\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return 0\n    \n    # if X and Y have the same length\n    # check if any of them is empty\n    if len(X) > len(Y) and len(X) > len(Z):\n        return 0\n    if len(X) > len(Y) and len(X) > len(Z):\n        return 0\n    \n    # if Z has the same length\n    if len(Z) > len(X):\n        return 0\n    \n    # if X and Y are equal length\n    if len(X) == len(Y):\n        return dp[len(X)][len(Z)]\n    \n    # if X is empty\n    if len(X) == 0:\n        return dp[len(Y)][len(Z)]\n    \n    # if Y is empty\n    if len(Y) == 0:\n        return dp[len(X)][len(Z)]\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return dp[len(X)][len(Y)]\n    \n    # if Z is empty\n    if len(Z) == 0:\n        return 0\n    \n    # get the longest common subsequence\n    dp[len(X)][len(Z)] = dp[len(Y)][len(Z)] = 0\n    \n    # loop through the substrings\n    # check the left and right values\n    # if X is equal to Y and Z\n    # return the longest common subsequence\n    for i in range(len(X) - len(Y) + 1):\n        for j in range(len(Z) - len(Y) + 1):\n            if X[i] == Y[j] and Z[j] == Y[j+len(X) - 1]:\n                dp[i][j + len(X)] = dp[i + 1][j] + 1\n            \n    return dp[len(X)][len(Z)]\n",
        "num_ids": 714
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub('^\\w+','', str1)\n    return result.split()\n",
        "num_ids": 26
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word[0].upper() + word[1:].lower() +''\n    return result\ndef lower_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with lower case letters in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word[0].lower() + word[1:].lower() +''\n    return result\ndef title_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with title case letters in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word[0].upper() + word[1:].lower() +''\n    return result\ndef title_words_spaces_2(str1):\n    '''\n    Write a function to put spaces between words starting with title case letters in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word[0].upper() + word[1:].lower() +''\n    return result\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word +''\n    return result\ndef replace_spaces(str1):\n    '''\n    Write a function to replace spaces in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word[0] +''\n    return result\ndef remove_first_and_last(str1):\n    '''\n    Write a function to remove the first and last words of a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        result += word +''\n    return result\ndef remove_all(str1):\n    '''\n    Write a function to remove all words in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        result += word +''\n    return result\ndef remove_repetition(str1):\n    '''\n    Write a function to remove all repetitions of a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        result += word[1:] +''\n    return result\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        result += word[1:] +''\n    return result\ndef remove_doubles(str1):\n    '''\n    Write a function to remove all doubles in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!= word[1]:\n            result += word[1:] +''\n    return result\ndef remove_long_words(str1):\n    '''\n    Write a function to remove all words with the longest length in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        max_length = len(word)\n        for i in range(1, max_length + 1):\n            if len(word) < i:\n                break\n            if word[:i] in word:\n                result += word[:i] +''\n        if len(word) == max_length:\n            result += word[:max_length] +''\n    return result\ndef capitalize_words(str1):\n    '''\n    Write a function to capitalize all the words of a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        result += word.upper() +''\n    return result\ndef count_unique(str1):\n    '''\n    Write a function to count the number of unique words in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    unique_words = 0\n    for word in str1:\n        if word not in str1:\n            unique_words += 1\n    return unique_words\ndef case_words(str1):\n    '''\n    Write a function to capitalize all the words in a given string in a given case.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().lower().split()\n    result = ''\n    for word in str1:\n        result += word.capitalize() +''\n    return result\ndef remove_digits(str1):\n    '''\n    Write a function to remove all the digits in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if len(word) < 1:\n            break\n        if word[0]!= '0':\n            result += word +''\n    return result\ndef remove_others(str1):\n    '''\n    Write a function to remove all the other words in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word +''\n    return result\ndef capitalize_words_2(str1):\n    '''\n    Write a function to capitalize all the words in a given string in a given case.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().lower().split()\n    result = ''\n    for word in str1:\n        result += word.upper() +''\n    return result\ndef remove_others_2(str1):\n    '''\n    Write a function to remove all the other words in a given string.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().lower().split()\n    result = ''\n    for word in str1:\n        if word[0]!='':\n            result += word +''\n    return result\ndef replace_others(str1):\n    '''\n    Write a function to replace all the other words in a given string with the common words.\n    '''\n    # str1 = \"o rat ate a dog ate my sheep\"\n    str1 = str1.strip().lower().split()\n    result = '",
        "num_ids": 36
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\w+',str1)\n    s = ''\n    for word in words:\n        s += word.capitalize() +''\n    return s\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    #Initialize the list\n    stopwords = []\n    #Remove the word from the list\n    str1 = str1.lower()\n    for word in stopwords:\n        str1 = str1.replace(word, '')\n    return str1\ndef remove_stopwords_list(list1):\n    '''\n    Write a function to remove stopwords from the given list of strings.\n    '''\n    #Initialize the list\n    stopwords = []\n    #Remove the word from the list\n    for word in list1:\n        str1 = word.lower()\n        for word in stopwords:\n            str1 = str1.replace(word, '')\n    return str1\n",
        "num_ids": 68
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str_list = str1.split()\n    for i in range(len(str_list)):\n        if str_list[i].startswith(' '):\n            str_list[i] = str_list[i].lstrip()\n    return str_list\n",
        "num_ids": 66
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    w_dict = {}\n    list = re.split(r'\\s+', str1)\n    for i in list:\n        if i in w_dict:\n            w_dict[i] +='' + i +''\n        else:\n            w_dict[i] = i\n    return \" \".join(w_dict.values())\n",
        "num_ids": 83
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    new_str = \"\"\n    for word in str1.split():\n        if word[0].isupper():\n            word = word + \" \"\n        new_str += word\n    return new_str.strip()\n",
        "num_ids": 55
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.lower()\n    str1=str1.split()\n    for word in str1:\n        if word[0].isupper():\n            print(word)\n        else:\n            print(word+' ')\n    \ndef case_fold(str1):\n    '''\n    Write a function that converts a given string to lowercase.\n    '''\n    str1=str1.lower()\n    str1=str1.replace('a','A').replace('e','E').replace('i','I').replace('o','O').replace('u','U')\n    str1=str1.replace('y','Y').replace('u','U')\n    return str1\n",
        "num_ids": 75
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.strip()\n    str1 = str1.replace(' ','')\n    str1 = str1.split()\n    str1 =''.join(str1)\n    str1 = str1.title()\n    return str1\n",
        "num_ids": 63
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    spaces_to_capital = [c for c in str1 if c.isupper()]\n    return''.join(spaces_to_capital)\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.capitalize()\n",
        "num_ids": 11
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # get rid of words with no capital\n    str1 = str1.replace(' ', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('-', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\n', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\t', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('.', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('!', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('?', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(':', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(';', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('$', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('&', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\t', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\n', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\r', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\'', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\',', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\''', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\'', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\'', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\'', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\'', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\'', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(')', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('(', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('[', '')\n    # get rid of words with no spaces\n    str1 = str1.replace(']', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\\'', '')\n    # get rid of words with no spaces\n    str1 = str1.replace('\"', '')\n    # get rid of words with n",
        "num_ids": 1453
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    num_list = [int(x) for x in nums_str]\n    num_list.sort()\n    print(num_list)\n",
        "num_ids": 44
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = []\n    for num in nums_str:\n        if num > 0:\n            sorted_list.append(num)\n    sorted_list.sort()\n    return sorted_list\n",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Sort nums_str and put them in sorted order\n    nums_str = sorted(nums_str)\n    \n    # Divide the list into two parts\n    nums_half = nums_str[len(nums_str) // 2]\n    nums_half = sorted(nums_half)\n",
        "num_ids": 79
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import copy\n    nums_list = copy.deepcopy(nums_str)\n    nums_list.sort()\n    return nums_list\n",
        "num_ids": 39
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Create a new list of strings sorted numerically\n    nums_str = sorted(nums_str)\n",
        "num_ids": 28
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    res = []\n    for i in nums_str:\n        num = int(i)\n        res.append(num)\n    res.sort()\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    lst = []\n    for i in nums_str:\n        lst.append(int(i))\n    \n    lst.sort(reverse=True)\n    return lst\n",
        "num_ids": 47
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    numbers = nums_str\n    # if len(numbers) <= 1:\n    #     return numbers\n    numbers.sort(key=lambda x: int(x))\n    # else:\n    #     for i in range(len(numbers)):\n    #         if int(numbers[i]) > int(numbers[i + 1]):\n    #             temp = numbers[i]\n    #             numbers[i] = numbers[i + 1]\n    #             numbers[i + 1] = temp\n    #     return numbers\n    return [int(num) for num in numbers]\n    # return list(map(int, numbers))\n",
        "num_ids": 158
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = []\n    for num in nums_str:\n        if type(num) == str:\n            num = num.strip().split(',')\n            num = [int(x) for x in num]\n            num = sorted(num)\n            num = ', '.join(str(x) for x in num)\n            num = num.split(',')\n            sorted_nums.append(num)\n        else:\n            sorted_nums.append(num)\n    return sorted_nums\n",
        "num_ids": 127
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    # converting str to int\n    for i in nums_str:\n        nums.append(int(i))\n    # sorting\n    nums.sort()\n    # converting sorted list to string\n    string_nums = [str(num) for num in nums]\n    # joining numbers with spaces\n    string_nums =''.join(string_nums)\n    return string_nums\n",
        "num_ids": 102
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n",
        "num_ids": 29
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in range(len(test_list)):\n            test_list[i] = test_tup[i]\n    else:\n        raise Exception('Tuple must be a tuple, not {0}'.format(type(test_tup)))\n    return test_list\n",
        "num_ids": 81
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    return test_list\n",
        "num_ids": 19
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    # Test that the length of the tuple is 2, and the first element is an integer.\n    # If this doesn't raise a TypeError, it means the tuple is not a tuple.\n    # If this doesn't raise an exception, it means the tuple is a tuple.\n    \n    if len(test_tup)!= 2:\n        raise TypeError(\"tuple must have 2 elements\")\n    elif not isinstance(test_tup[0], int):\n        raise TypeError(\"tuple first element must be an integer\")\n    elif not isinstance(test_tup[1], int):\n        raise TypeError(\"tuple second element must be an integer\")\n    \n    # Check that the given tuple is not already in the list\n    if test_tup in test_list:\n        raise ValueError(\"tuple already in list\")\n    \n    test_list.append(test_tup)\n    \ndef test_remove_index():\n    '''\n    Write a function that checks whether the given element is in the list.\n    '''\n    \n    # Test that the given element is an integer\n    if not isinstance(4, int):\n        raise TypeError(\"element must be an integer\")\n    \n    # Test that the given element is not in the list\n    if 4 in test_list:\n        raise ValueError(\"element is in list\")\n    \ndef test_remove():\n    '''\n    Write a function that checks whether the given element is in the list.\n    '''\n    \n    # Test that the given element is an integer\n    if not isinstance(1, int):\n        raise TypeError(\"element must be an integer\")\n    \n    # Test that the given element is not in the list\n    if 1 in test_list:\n        raise ValueError(\"element is in list\")\n    \ndef test_remove_first():\n    '''\n    Write a function that checks whether the given element is in the list.\n    '''\n    \n    # Test that the given element is an integer\n    if not isinstance(2, int):\n        raise TypeError(\"element must be an integer\")\n    \n    # Test that the given element is not in the list\n    if 2 not in test_list:\n        raise ValueError(\"element is not in list\")\n    \ndef test_remove_last():\n    '''\n    Write a function that checks whether the given element is in the list.\n    '''\n    \n    # Test that the given element is an integer\n    if not isinstance(3, int):\n        raise TypeError(\"element must be an integer\")\n    \n    # Test that the given element is not in the list\n    if 3 not in test_list:\n        raise ValueError(\"element is not in list\")\n",
        "num_ids": 75
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    test_list.append(tup)\n    print(' '.join(map(str, test_list)))\n",
        "num_ids": 39
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i,x in enumerate(test_list):\n        test_list[i] = x + test_tup[i]\n    return test_list\n",
        "num_ids": 40
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) // 2:\n        return True\n    if arr[i] > arr[i // 2] and arr[i] > arr[(i + 1) // 2] and arr[(i + 1) // 2] > arr[i]:\n        return check_min_heap_helper(arr, i // 2)\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i + 1) < len(arr):\n        if arr[i] < arr[i + 1] and arr[i] > arr[i + 1] and arr[i] > arr[(i + 1) // 2]:\n            return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    if arr[i] < arr[i + 1]:\n        return False\n    return check_min_heap_helper(arr, i + 1)\n",
        "num_ids": 55
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i >= len(arr)):\n        return True\n    elif (arr[i] < arr[2*i+1]):\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i)\n",
        "num_ids": 63
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    else:\n        if arr[i] < arr[2 * i + 1]:\n            return check_min_heap_helper(arr, 2 * i + 1)\n        else:\n            return check_min_heap_helper(arr, 2 * i)\n",
        "num_ids": 79
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i + 1]:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    return check_min_heap_helper(arr, i * 2 + 1) or check_min_heap_helper(arr, i * 2 + 2)\n",
        "num_ids": 55
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    \n    if arr[i] < arr[2*i + 1]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i) or check_min_heap_helper(arr, 2*i+1)\n    \n    \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-is-a-min-heap/\n    '''\n    i = 0\n    \n    for j in range(len(arr)):\n        if arr[i] > arr[j]:\n            if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n                return False\n        i += 1\n    \n    return True\n    \ndef check_min_heap_recursive(arr):\n    '''\n    Write a function to check if the given array represents a min heap.\n    '''\n    if len(arr) == 1:\n        return True\n    \n    if arr[0] < arr[1]:\n        return check_min_heap_recursive(arr[2:])\n    else:\n        return check_min_heap_recursive(arr[:2])\n    \n    \ndef heap_sort(arr):\n    '''\n    Write a function to sort the given array in ascending order. https://www.geeksforgeeks.org/heap-sort-in-python/\n    '''\n    for i in range(len(arr)-1, 0, -1):\n        for j in range(2*i, len(arr), 1):\n            arr[i], arr[j] = arr[j], arr[i]\n    print(arr)\n    \n    \ndef min_heapify(arr, i):\n    '''\n    Write a function to heapify the given array.\n    '''\n    \n    # leaf node\n    if len(arr) == 1:\n        return arr[0]\n    \n    # pivot node\n    if 2*i + 1 < len(arr):\n        pivot_index = 2*i + 1\n        pivot = arr[pivot_index]\n        \n        # If the current node is greater than the pivot, \n        # then swap the current node with the pivot.\n        if pivot > arr[i]:\n            arr[i], arr[pivot_index] = arr[pivot_index], arr[i]\n            \n        # If the current node is less than the pivot,\n        # then swap the current node with the pivot.\n        else:\n            arr[i], arr[pivot_index] = arr[pivot_index], arr[i]\n            \n        # Now return the pivot node as root of the heap.\n        return arr[i]\n    \n    # Recur for the left child\n    left_child_index = 2*i + 2\n    left_child = arr[left_child_index]\n    \n    # If the current node is greater than the left child,\n    # then swap the current node with the left child.\n    if left_child > arr[i]:\n        arr[i], arr[left_child_index] = arr[left_child_index], arr[i]\n        \n        # Now return the left child node as root of the heap.\n        return arr[i]\n    \n    # Recur for the right child\n    right_child_index = 2*i + 2\n    right_child = arr[right_child_index]\n    \n    # If the current node is less than the right child,\n    # then swap the current node with the right child.\n    if right_child < arr[i]:\n        arr[i], arr[right_child_index] = arr[right_child_index], arr[i]\n        \n        # Now return the right child node as root of the heap.\n        return arr[i]\n    \n    # If the left child is not the smallest\n    # and the right child is not the smallest\n    # and the current node is greater than the left child\n    # then swap the current node with the left child.\n    else:\n        arr[i], arr[left_child_index] = arr[left_child_index], arr[i]\n        \n        # Now return the left child node as root of the heap.\n        return arr[i]\n",
        "num_ids": 574
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    \n    if arr[i] <= arr[2*i +1] or arr[i] >= arr[2*i +2]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i +2)\n",
        "num_ids": 97
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    while i*2 + 1 < len(arr):\n        if arr[i*2+1] < arr[i*2]:\n            return False\n        i = i * 2 + 1\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # if n is not a positive integer, then we are returning -1\n    if not isinstance(n, int):\n        return -1\n    # check if the n is less than or equal to 0\n    if n <= 0:\n        return -1\n    # increment n by 1\n    n = n + 1\n    # base case\n    if n == 1:\n        return 1\n    # initialize the result\n    res = 0\n    # find the result for each jacobsthal\n    for i in range(0, n):\n        # update the result for each jacobsthal\n        res = res + (i + 1) * jacobsthal_num(i + 1)\n    return res\n",
        "num_ids": 167
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 9\n    elif n == 8:\n        return 13\n    elif n == 9:\n        return 17\n    elif n == 10:\n        return 19\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 29\n    elif n == 13:\n        return 31\n    elif n == 14:\n        return 41\n    elif n == 15:\n        return 51\n    elif n == 16:\n        return 61\n    elif n == 17:\n        return 71\n    elif n == 18:\n        return 81\n    elif n == 19:\n        return 91\n    elif n == 20:\n        return 101\n    elif n == 21:\n        return 111\n    elif n == 22:\n        return 121\n    elif n == 23:\n        return 131\n    elif n == 24:\n        return 141\n    elif n == 25:\n        return 161\n    elif n == 26:\n        return 171\n    elif n == 27:\n        return 201\n    elif n == 28:\n        return 211\n    elif n == 29:\n        return 221\n    elif n == 30:\n        return 251\n    elif n == 31:\n        return 281\n    elif n == 32:\n        return 303\n    elif n == 33:\n        return 311\n    elif n == 34:\n        return 321\n    elif n == 35:\n        return 351\n    elif n == 36:\n        return 361\n    elif n == 37:\n        return 371\n    elif n == 38:\n        return 407\n    elif n == 39:\n        return 419\n    elif n == 40:\n        return 421\n    elif n == 41:\n        return 451\n    elif n == 42:\n        return 461\n    elif n == 43:\n        return 471\n    elif n == 44:\n        return 481\n    elif n == 45:\n        return 491\n    elif n == 46:\n        return 451\n    elif n == 47:\n        return 461\n    elif n == 48:\n        return 471\n    elif n == 49:\n        return 441\n    elif n == 50:\n        return 441\n    elif n == 51:\n        return 441\n    elif n == 52:\n        return 441\n    elif n == 53:\n        return 441\n    elif n == 54:\n        return 441\n    elif n == 55:\n        return 441\n    elif n == 56:\n        return 441\n    elif n == 57:\n        return 441\n    elif n == 58:\n        return 441\n    elif n == 59:\n        return 441\n    elif n == 60:\n        return 441\n    elif n == 61:\n        return 441\n    elif n == 62:\n        return 441\n    elif n == 63:\n        return 441\n    elif n == 64:\n        return 441\n    elif n == 65:\n        return 441\n    elif n == 66:\n        return 441\n    elif n == 67:\n        return 441\n    elif n == 68:\n        return 441\n    elif n == 69:\n        return 441\n    elif n == 70:\n        return 441\n    elif n == 71:\n        return 441\n    elif n == 72:\n        return 441\n    elif n == 73:\n        return 441\n    elif n == 74:\n        return 441\n    elif n == 75:\n        return 441\n    elif n == 76:\n        return 441\n    elif n == 77:\n        return 441\n    elif n == 78:\n        return 441\n    elif n == 79:\n        return 441\n    elif n == 80:\n        return 441\n    elif n == 81:\n        return 441\n    elif n == 82:\n        return 441\n    elif n == 83:\n        return 441\n    elif n == 84:\n        return 441\n    elif n == 85:\n        return 441\n    elif n == 86:\n        return 441\n    elif n == 87:\n        return 441\n    elif n == 88:\n        return 441\n    elif n == 89:\n        return 441\n    elif n == 90:\n        return 441\n    elif n == 91:\n        return 441\n    elif n == 92:\n        return 441\n    elif n == 93:\n        return 441\n    elif n == 94:\n        return 441\n    elif n == 95:\n        return 441\n    elif n == 96:\n        return 441\n    elif n == 97:\n        return 441\n    elif n == 98:\n        return 441\n    elif n == 99:\n        return 441\n    elif n == 100:\n        return 441\n    elif n == 101:\n        return 441\n    elif n == 102:\n        return 441\n    elif n == 103:\n        return 441\n    elif n == 104:\n        return 441\n    elif n == 105:\n        return 441\n    elif n == 106:\n        return 441\n    elif n == 107:\n        return 441\n    elif n == 108:\n        return 441\n    elif n == 109:\n        return 441\n    elif n == 110:\n        return 441\n    elif n == 111:\n        return 441\n    elif n == 112:\n        return 441\n    elif n == 113:\n        return 441\n    elif n == 114:\n        return 441\n    elif n == 115:\n        return 441\n    elif n == 116:\n        return 441\n    elif n == 117:\n        return 441\n    elif n == 118:\n        return 441\n    elif n == 119:\n        return 441\n    elif n == 120:\n        return 441\n    elif n == 121:\n        return 441\n    elif n == 122:\n        return 441\n    elif n == 123:\n        return 441\n    elif n == 124:\n        return 441\n    elif n == 125:\n        return 441\n    elif n == 126:\n        return 441\n    elif n == 127:\n        return 441\n    elif n == 128:\n        return 441\n    elif n == 129:\n        return 441\n    elif n == 130:\n        return 441\n    elif n == 131:\n        return 441\n    elif n == 132:\n        return 441\n    elif n == 133:\n        return 441\n    elif n == 134:\n        return 441\n    elif n == 135:\n        return 441\n    elif n == 136:\n        return 441\n    elif n == 137:\n        return 441\n    elif n == 138:\n        return 441\n    elif n == 139:\n        return 441\n    elif n == 140:\n        return 441\n    elif n == 141:\n        return 441\n    elif n == 142:\n        return 441\n    elif n == 143:\n        return 441\n    elif n == 144:\n        return 441\n    elif n == 145:\n        return 441\n    elif n == 146:\n        return 441\n    elif n == 147:\n        return 441\n    elif n == 148:\n        return 441\n    elif n == 149:\n        return 441\n    elif n == 150:\n        return 441\n    elif n == 151:\n        return 441\n    elif n == 152:\n        return 441\n    eli",
        "num_ids": 1949
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    while True:\n        if n > 1:\n            if n % i == 0:\n                return (n // i) + 1\n            i += 1\n        else:\n            return i + 1\n",
        "num_ids": 53
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from math import floor\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return floor(n / 2)\n    elif n % 2!= 0:\n        return floor(n / 2) + 1\n",
        "num_ids": 95
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    elif n == 13:\n        return 883\n    else:\n        print('Error: Wrong number entered')\n        exit()\n",
        "num_ids": 193
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<=1:\n        return n\n    numerator = [1]\n    denominator = [1]\n    \n    while n > 0:\n        numerator.append(numerator[-1] * (n%10))\n        denominator.append(denominator[-1] * (n%10))\n        n = n//10\n        \n    return (numerator[-1] * denominator[-1])\n",
        "num_ids": 110
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        # Create the first list of jacobsthal numbers\n        first = [1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 3571, 4575, 5679, 6541, 7171, 8321, 9391, 10309, 12349, 14305, 15209, 16215, 17227, 17429, 18443, 18967, 19627, 19939, 20443, 21991, 21999, 23349, 24181, 25441, 25657, 26323, 27383, 28393, 29391, 30353, 31331, 32461, 32579, 32019, 33109, 34249, 35771, 36807, 37747, 38793, 39731, 40223, 41231, 41419, 41731, 41873, 41961, 42073, 42081, 42121, 42171, 42181, 42197, 44211, 44321, 44381, 45421, 45523, 45743, 45849, 45961, 45971, 45973, 45979, 45981, 45983, 45987, 46021, 46181, 46193, 46199, 46213, 46219, 46225, 46230, 46351, 46381, 46409, 46423, 46429, 46431, 46443, 46449, 46461, 46473, 46479, 46481, 46493, 46499, 46511, 46523, 46529, 46541, 46523, 46549, 46561, 46573, 46581, 46601, 46609, 46613, 46619, 46629, 46631, 46643, 46651, 46667, 46691, 46697, 46699, 46721, 46731, 46741, 46743, 46761, 46773, 46779, 46791, 46799, 46811, 46821, 46827, 46831, 46837, 46847, 46853, 46859, 46861, 46871, 46873, 46881, 46891, 46899, 46903, 46907, 46911, 46921, 46929, 46941, 46959, 46961, 46971, 46973, 46979, 46981, 46983, 46989, 47001, 47013, 47019, 47021, 47031, 47041, 47043, 47049, 47051, 47061, 47073, 47079, 47091, 47093, 47103, 47107, 47111, 47119, 47121, 47123, 47129, 47131, 47133, 47149, 47151, 47161, 47179, 47191, 47201, 47211, 47213, 47217, 47219, 47221, 47225, 47230, 47251, 47253, 47257, 47259, 47261, 47263, 47269, 47271, 47273, 47279, 47301, 47303, 47309, 47321, 47323, 47329, 47345, 47351, 47353, 47359, 47401, 47403, 47409, 47421, 47433, 47439, 47467, 47501, 47507, 47511, 47521, 47531, 47541, 47551, 47561, 47571, 47601, 47607, 47619, 47621, 47637, 47639, 47623, 47639, 47645, 47655, 47659, 47699, 47709, 47721, 47723, 47733, 47741, 47743, 47749, 47761, 47773, 47791, 47793, 47797, 47801, 47813, 47819, 47831, 47841, 47853, 47859, 47861, 47873, 47891, 47901, 47913, 47919, 47931, 47941, 47951, 47961, 47971, 47977, 47983, 47989, 48011, 48013, 48029, 48041, 48047, 48049, 48053, 48059, 48071, 48083, 48109, 48113, 48117, 48123, 48131, 48137, 48151, 48167, 48181, 48191, 48203, 48213, 48227, 48251, 48257, 48263, 48269, 48271, 48277, 48281, 48299, 48311, 48313, 48319, 48333, 48337, 48341, 48343, 48353, 48363, 48371, 48383, 48397, 48401, 48407, 48409, 48421, 48423, 48431, 48433, 48437, 48447, 48459, 48481, 48499, 48501, 48503, 48509, 48521, 48523, 48529, 48531, 48541, 48547, 48559, 48571, 48593, 48601, 48603, 48609, 48613, 48621, 48627, 48631, 48643, 48649, 48671, 48677, 48691, 48693, 48697, 48701, 48713, 48721, 48737, 48741, 48743, 48749, 48751, 48763, 48771, 48779, 48791, 48797, 48801, 48813, 48819, 48823, 48839, 48841, 48851, 48859, 48877, 48881, 48899, 48921, 48923, 48933, 48947, 48949, 48961, 48973, 48979, 48983, 48989, 48991, 48993, 48999, 48901, 48901, 48901, 48903, 48921, 48923, 48929, 48931, 48941, 48947, 48949, 48959, 48971, 48977, 48979, 48983, 48989, 48991, 48993, 48999, 48901, 48901, 48901, 48903, 48923, 48929, 48941, 48947, 48949, 48961, 48973, 48979, 48981, 48983, 48989, 48991, 48983, 48989, 48991, 48901, 48901, 48901, 48903, 48923, 48929, 48941, 48947, 48949, 48961, 48973, 48979, 48981, 48983, 48989, 48991, 48993, 48901, 48901, 48901, 48903, 48923, 48929, 48941, 48947, 48949, 48961, 48973, 48979, 48981, 48983, 48989, 48991, 48993, 48901, 48901, 48903, 48923, 48929, 48941, 48947, 48949, 48961, 48973, 48979, 48981, 48983, 48989, 48991, 48903, 48901, 48903, 48923, 48929, 48941, 48947, 48949, 48961, 48973, 48979, 48981, 48983, 48989, 48991, 48903, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901, 48901",
        "num_ids": 1941
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    else:\n        return 0\n",
        "num_ids": 164
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    elif n == 4:\n        return '4'\n    elif n == 5:\n        return '5'\n    elif n == 6:\n        return '6'\n    elif n == 7:\n        return '7'\n    elif n == 8:\n        return '8'\n    elif n == 9:\n        return '9'\n    elif n == 10:\n        return '10'\n    elif n == 11:\n        return '11'\n    elif n == 12:\n        return '12'\n    elif n == 13:\n        return '13'\n    elif n == 14:\n        return '14'\n    elif n == 15:\n        return '15'\n    elif n == 16:\n        return '16'\n    elif n == 17:\n        return '17'\n    elif n == 18:\n        return '18'\n    elif n == 19:\n        return '19'\n    elif n == 20:\n        return '20'\n    elif n == 21:\n        return '21'\n    elif n == 22:\n        return '22'\n    elif n == 23:\n        return '23'\n    elif n == 24:\n        return '24'\n    elif n == 25:\n        return '25'\n    elif n == 26:\n        return '26'\n    elif n == 27:\n        return '27'\n    elif n == 28:\n        return '28'\n    elif n == 29:\n        return '29'\n    elif n == 30:\n        return '30'\n    elif n == 31:\n        return '31'\n    elif n == 32:\n        return '32'\n    elif n == 33:\n        return '33'\n    elif n == 34:\n        return '34'\n    elif n == 35:\n        return '35'\n    elif n == 36:\n        return '36'\n    elif n == 37:\n        return '37'\n    elif n == 38:\n        return '38'\n    elif n == 39:\n        return '39'\n    elif n == 40:\n        return '40'\n    elif n == 41:\n        return '41'\n    elif n == 42:\n        return '42'\n    elif n == 43:\n        return '43'\n    elif n == 44:\n        return '44'\n    elif n == 45:\n        return '45'\n    elif n == 46:\n        return '46'\n    elif n == 47:\n        return '47'\n    elif n == 48:\n        return '48'\n    elif n == 49:\n        return '49'\n    elif n == 50:\n        return '50'\n    elif n == 51:\n        return '51'\n    elif n == 52:\n        return '52'\n    elif n == 53:\n        return '53'\n    elif n == 54:\n        return '54'\n    elif n == 55:\n        return '55'\n    elif n == 56:\n        return '56'\n    elif n == 57:\n        return '57'\n    elif n == 58:\n        return '58'\n    elif n == 59:\n        return '59'\n    elif n == 60:\n        return '60'\n    elif n == 61:\n        return '61'\n    elif n == 62:\n        return '62'\n    elif n == 63:\n        return '63'\n    elif n == 64:\n        return '64'\n    elif n == 65:\n        return '65'\n    elif n == 66:\n        return '66'\n    elif n == 67:\n        return '67'\n    elif n == 68:\n        return '68'\n    elif n == 69:\n        return '69'\n    elif n == 70:\n        return '70'\n    elif n == 71:\n        return '71'\n    elif n == 72:\n        return '72'\n    elif n == 73:\n        return '73'\n    elif n == 74:\n        return '74'\n    elif n == 75:\n        return '75'\n    elif n == 76:\n        return '76'\n    elif n == 77:\n        return '77'\n    elif n == 78:\n        return '78'\n    elif n == 79:\n        return '79'\n    elif n == 80:\n        return '80'\n    elif n == 81:\n        return '81'\n    elif n == 82:\n        return '82'\n    elif n == 83:\n        return '83'\n    elif n == 84:\n        return '84'\n    elif n == 85:\n        return '85'\n    elif n == 86:\n        return '86'\n    elif n == 87:\n        return '87'\n    elif n == 88:\n        return '88'\n    elif n == 89:\n        return '89'\n    elif n == 90:\n        return '90'\n    elif n == 91:\n        return '91'\n    elif n == 92:\n        return '92'\n    elif n == 93:\n        return '93'\n    elif n == 94:\n        return '94'\n    elif n == 95:\n        return '95'\n    elif n == 96:\n        return '96'\n    elif n == 97:\n        return '97'\n    elif n == 98:\n        return '98'\n    elif n == 99:\n        return '99'\n    elif n == 100:\n        return '100'\n    elif n == 101:\n        return '101'\n    elif n == 102:\n        return '102'\n    elif n == 103:\n        return '103'\n    elif n == 104:\n        return '104'\n    elif n == 105:\n        return '105'\n    elif n == 106:\n        return '106'\n    elif n == 107:\n        return '107'\n    elif n == 108:\n        return '108'\n    elif n == 109:\n        return '109'\n    elif n == 110:\n        return '110'\n    elif n == 111:\n        return '111'\n    elif n == 112:\n        return '112'\n    elif n == 113:\n        return '113'\n    elif n == 114:\n        return '114'\n    elif n == 115:\n        return '115'\n    elif n == 116:\n        return '116'\n    elif n == 117:\n        return '117'\n    elif n == 118:\n        return '118'\n    elif n == 119:\n        return '119'\n    elif n == 120:\n        return '120'\n    elif n == 121:\n        return '121'\n    elif n == 122:\n        return '122'\n    elif n == 123:\n        return '123'\n    elif n == 124:\n        return '124'\n    elif n == 125:\n        return '125'\n    elif n == 126:\n        return '126'\n    elif n == 127:\n        return '127'\n    elif n == 128:\n        return '128'\n    elif n == 129:\n        return '129'\n    elif n == 130:\n        return '130'\n    elif n == 131:\n        return '131'\n    elif n == 132:\n        return '132'\n    elif n == 133:\n        return '133'\n    elif n == 134:\n        return '134'\n    elif n == 135:\n        return '135'\n    elif n == 136:\n        return '136'\n    elif n == 137:\n        return '137'\n    elif n == 138:\n    ",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # Declare variables and rules\n    sol = 0\n    \n    # Declare the jacobsthal number\n    for i in range(1, n+1):\n        sol = sol + i\n    \n    # Print the jacobsthal number\n    print(sol)\n    \n    # Return the jacobsthal number\n    return sol\n",
        "num_ids": 87
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    index = -1\n    for index, x in enumerate(test_list):\n        if x[1] <= K:\n            index = index\n    \n    return test_list[index]\n    \ndef main():\n    \n    # get list of tuples\n    test_list = []\n    with open('input.txt', 'r') as f:\n        for line in f:\n            tokens = line.rstrip().split()\n            test_list.append((tokens[0], tokens[1]))\n",
        "num_ids": 125
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    length = len(test_list)\n    min = 0\n    if length == 0:\n        min = 0\n    else:\n        for i in range(0, length):\n            min = min + test_list[i][1]\n",
        "num_ids": 58
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from collections import defaultdict\n    d = defaultdict(lambda:0)\n    d[0] = 1\n    for i in test_list:\n        d[i[0]] = max(d[i[0]], d[i[1]]+1)\n    min_k = float('inf')\n    k = 0\n    for i in range(1, len(d)):\n        if d[i] < min_k:\n            min_k = d[i]\n            k = i\n    return k\n",
        "num_ids": 124
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return [tuple(test_list[i]) for i in range(len(test_list)) if len(tuple(test_list[i])) < K]\n",
        "num_ids": 42
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return ()\n",
        "num_ids": 18
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # DO NOT TOUCH THE BELOW CODE - THIS IS A COPIED AND TESTED CODE. PLEASE WRITE IT TO WORKS\n    list = [(0,0)] * K\n    min_count = 0\n    min_index = 0\n    \n    for i in range(0, len(test_list)):\n        # print(i)\n        # print(list)\n        if list[i]!= 0:\n            # print(\"inside\")\n            if list[i][1] > min_count:\n                # print(\"inside1\")\n                min_count = list[i][1]\n                min_index = i\n            # print(\"inside2\")\n            # print(list[i])\n        # print(\"inside3\")\n        list[i] = (test_list[i][0], test_list[i][1] + 1)\n        # print(\"inside4\")\n        # print(list[i])\n    # print(\"inside5\")\n    return min_index\n",
        "num_ids": 229
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min[0] and test_list[i][0] not in min:\n            min = test_list[i]\n    if len(min) == 0:\n        return 0\n    elif len(min) == 1:\n        return min[0]\n    else:\n        return min[0][1]\n",
        "num_ids": 112
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    #create a dictionary that will be used as a key-value pair\n    \n    minimum = {}\n    \n    #create a for-loop that goes through the tuple list and adds to the dictionary\n    #if the key is already present, it is overwritten\n    \n    for tup in test_list:\n        if tup[0] in minimum.keys():\n            minimum[tup[0]] = minimum[tup[0]] + 1\n        else:\n            minimum[tup[0]] = 1\n            \n    #for each key in the dictionary, check if the key is present in the minimum\n    #if it is, increase the count and return it\n    #if not, return -1\n    #return the count\n    \n    for key in minimum.keys():\n        if key in minimum.keys():\n            if minimum[key] > K:\n                return -1\n            else:\n                return key\n        else:\n            return -1\n            ",
        "num_ids": 223
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # First, let's make a copy of the list\n    temp_list = list(test_list)\n",
        "num_ids": 27
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # min_k function takes 2 args, list and k as an argument\n    min_k = 0\n    # creating a for-loop that iterates through the tuple list\n    for i in range(len(test_list)):\n        # if the tuple list does not contain k elements\n        if (K == 0):\n            return test_list[i]\n        elif (test_list[i][0] < test_list[min_k][0]):\n            min_k = i\n    # if the tuple list is empty, then we return None\n    return None\n",
        "num_ids": 134
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in range(len(l1)):\n        if l1[index] in l2[index] and l1[index] in l3[index]:\n            index_list.append(index)\n    return index_list\n",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_index = l1.index(l2)\n    l2_index = l2.index(l3)\n    l3_index = l3.index(l2)\n    index_list = []\n    if l1_index < l2_index:\n        if l1_index > l3_index:\n            index_list = [l1[l1_index], l2[l2_index], l3[l3_index]]\n        elif l2_index > l3_index:\n            index_list = [l1[l1_index], l2[l2_index], l3[l3_index]]\n        else:\n            index_list = [l1[l1_index], l2[l2_index], l3[l3_index]]\n    else:\n        if l1_index > l2_index:\n            index_list = [l1[l1_index], l2[l2_index], l3[l3_index]]\n        elif l2_index > l3_index:\n            index_list = [l1[l1_index], l2[l2_index], l3[l3_index]]\n        else:\n            index_list = [l1[l1_index], l2[l2_index], l3[l3_index]]\n    return index_list\n",
        "num_ids": 325
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    if len(l1)!= len(l2)!= len(l3):\n        return result\n    \n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    common_elements.append(l1[i])\n    return common_elements\n",
        "num_ids": 90
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_l1 = 0\n    index_l2 = 0\n    index_l3 = 0\n",
        "num_ids": 26
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    common_list = [e for e in l1_set if e in l2_set and e in l3_set]\n    return common_list\n",
        "num_ids": 74
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    if len(l1) == len(l2) == len(l3):\n        for i in l1:\n            for j in l2:\n                for k in l3:\n                    if i == j == k:\n                        index_list.append(i)\n    return index_list\n",
        "num_ids": 78
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n",
        "num_ids": 32
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n",
        "num_ids": 9
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j or i == k or j == k:\n                    common_elements.append(i)\n                    break\n    return common_elements\n",
        "num_ids": 70
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = None\n    for num in numbers:\n        if second_smallest is None:\n            second_smallest = num\n        else:\n            if num < second_smallest:\n                second_smallest = num\n    return second_smallest\n",
        "num_ids": 64
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)==0:\n        return -1\n    elif len(numbers)==1:\n        return numbers[0]\n    elif len(numbers)==2:\n        if numbers[0] > numbers[1]:\n            return numbers[1]\n        else:\n            return numbers[0]\n    else:\n        smallest = numbers[0]\n        for i in range(len(numbers)):\n            if numbers[i]<smallest:\n                smallest=numbers[i]\n        return smallest\n",
        "num_ids": 130
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for i in range(len(numbers)-1):\n        if numbers[i] < numbers[i+1]:\n            return numbers[i]\n    return numbers[len(numbers)-1]\n",
        "num_ids": 49
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) <= 2:\n        return numbers[1]\n    else:\n        middle = len(numbers) // 2\n        return numbers[middle]\n        ",
        "num_ids": 50
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    num_lst = list(numbers)\n    num_lst.sort()\n    return num_lst[1]\n",
        "num_ids": 33
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest_index = 0\n    for i in range(len(numbers)-1):\n        if numbers[i] > numbers[i+1]:\n            second_smallest_index = i\n    return second_smallest_index\n",
        "num_ids": 59
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest_index\n",
        "num_ids": 67
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # define a list of numbers\n    numbers = [2,1,5,3,8,6,7]\n    \n    # define a variable\n    smallest = numbers[0]\n    \n    # loop through the list of numbers\n    for number in numbers:\n        \n        # if the number is less than the smallest\n        if number < smallest:\n            \n            # replace the number with the smallest\n            smallest = number\n    \n    # return the second smallest\n    return smallest\n",
        "num_ids": 115
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a[bB][a-zA-Z0-9]*', text)\n    print(result)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if not is_match(text, r'[a-zA-Z][a-zA-Z]*\\b'):\n        return False\n    else:\n        return True\ndef is_match(text, pattern):\n    '''\n    Write a function that takes in a text string and a pattern string and returns True if and only if the pattern string is a substring of text.\n    '''\n    if not isinstance(text, str):\n        return False\n    if not isinstance(pattern, str):\n        return False\n    if not len(pattern) <= len(text):\n        return False\n    if not pattern.startswith('[') and pattern[0]!= '.':\n        return False\n    pattern = pattern[1:]\n    if not pattern.endswith(']'):\n        return False\n    pattern = pattern[:-1]\n    for i in range(len(text) - len(pattern)):\n        if text[i:i + len(pattern)]!= pattern:\n            return False\n    return True\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by zero or more 'a' and one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    if not is_match(text, r'[a-zA-Z][a-zA-Z]*\\b'):\n        return False\n    else:\n        return True\ndef is_match(text, pattern):\n    '''\n    Write a function that takes in a text string and a pattern string and returns True if and only if the pattern string is a substring of text.\n    '''\n    if not isinstance(text, str):\n        return False\n    if not isinstance(pattern, str):\n        return False\n    if not len(pattern) <= len(text):\n        return False\n    if not pattern.startswith('[') and pattern[0]!= '.':\n        return False\n    pattern = pattern[1:]\n    if not pattern.endswith(']'):\n        return False\n    pattern = pattern[:-1]\n    for i in range(len(text) - len(pattern)):\n        if text[i:i + len(pattern)]!= pattern:\n            return False\n    return True\ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b' or one 'b' followed by 'a' or 'b' and one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    if not is_match(text, r'[a-zA-Z][a-zA-Z]*\\b'):\n        return False\n    else:\n        return True\ndef is_match(text, pattern):\n    '''\n    Write a function that takes in a text string and a pattern string and returns True if and only if the pattern string is a substring of text.\n    '''\n    if not isinstance(text, str):\n        return False\n    if not isinstance(pattern, str):\n        return False\n    if not len(pattern) <= len(text):\n        return False\n    if not pattern.startswith('[') and pattern[0]!= '.':\n        return False\n    pattern = pattern[1:]\n    if not pattern.endswith(']'):\n        return False\n    pattern = pattern[:-1]\n    for i in range(len(text) - len(pattern)):\n        if text[i:i + len(pattern)]!= pattern:\n            return False\n    return True\ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by two 'a' or one 'a' followed by 'b' or one 'b' and one or more 'a's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    if not is_match(text, r'[a-zA-Z][a-zA-Z]*\\b'):\n        return False\n    else:\n        return True\ndef is_match(text, pattern):\n    '''\n    Write a function that takes in a text string and a pattern string and returns True if and only if the pattern string is a substring of text.\n    '''\n    if not isinstance(text, str):\n        return False\n    if not isinstance(pattern, str):\n        return False\n    if not len(pattern) <= len(text):\n        return False\n    if not pattern.startswith('[') and pattern[0]!= '.':\n        return False\n    pattern = pattern[1:]\n    if not pattern.endswith(']'):\n        return False\n    pattern = pattern[:-1]\n    for i in range(len(text) - len(pattern)):\n        if text[i:i + len(pattern)]!= pattern:\n            return False\n    return True\ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b' or one 'b' followed by 'a' or 'b' and one or more 'a's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    if not is_match(text, r'[a-zA-Z][a-zA-Z]*\\b'):\n        return False\n    else:\n        return True\ndef is_match(text, pattern):\n    '''\n    Write a function that takes in a text string and a pattern string and returns True if and only if the pattern string is a substring of text.\n    '''\n    if not isinstance(text, str):\n        return False\n    if not isinstance(pattern, str):\n        return False\n    if not len(pattern) <= len(text):\n        return False\n    if not pattern.startswith('[') and pattern[0]!= '.':\n        return False\n    pattern = pattern[1:]\n    if not pattern.endswith(']'):\n        return False\n    pattern = pattern[:-1]\n    for i in range(len(text) - len(pattern)):\n        if text[i:i + len(pattern)]!= pattern:\n            return False\n    return True\ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by one or more 'a' and one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    if not is_match(text, r'[a-zA-Z][a-zA-Z]*\\b'):\n        return False\n    else:\n        return True\ndef is_match(text, pattern):\n    '''\n    Write a function that takes in a text string and a pattern string and returns True if and only if the pattern string is a substring of text.\n    '''\n    if not isinstance(text, str):\n        return False\n    if not isinstance(pattern, str):\n        return False\n    if not len(pattern) <= len(text):\n        return False\n    if not pattern.startswith('[') and pattern[0]!= '.':\n        return False\n    pattern = pattern[1:]\n    if not pattern.endswith(']'):\n        return False\n    pattern = pattern[:-1]\n    for i in range(len(text) - len(pattern)):\n        if text[i:i + len(pattern)]!= pattern:\n            return False\n    return True\ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'a' or one or more 'b' and one or more 'a' or one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    if not is_match(tex",
        "num_ids": 10
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    valid_word = 'a'\n    word = re.search(valid_word, text)\n    if word:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.findall(\"a[\\s]*b[\\s]*\", text)\n    return match\n",
        "num_ids": 30
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"(a|b)\")\n    text_matched = pattern.search(text)\n    return text_matched\n",
        "num_ids": 35
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = '(a[0-1]\\s[a-zA-Z]+)b'\n    result = re.search(pattern, text)\n    if result is not None:\n        print('Match: %s' % result.group())\n    else:\n        print('No match!')\n",
        "num_ids": 74
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.compile(r'(a)((b)?)')\n    text = pattern.sub(r'\\g<1>\\g<2>', text)\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'(\\A)a(\\B)b')\n    pattern = re.com",
        "num_ids": 29
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # get number of letters in text\n    num_letters = 0\n    for letter in text:\n        if letter.isalpha():\n            num_letters += 1\n    # get number of 'b's\n    num_b_in_text = 0\n    for letter in text:\n        if letter == \"b\":\n            num_b_in_text += 1\n    # get the ratio of all letters that are a, in the text\n    num_a_in_text = num_letters - num_b_in_text\n    # print the result\n    print(num_a_in_text)\n    print(num_b_in_text)\n    print(num_letters)\n    # find the max number of the longest match\n    if num_letters > len(text):\n        return -1\n    # if the length of text is greater than the length of the longest match,\n    # return -1 because the longest match is a number of 'a'\n    if num_letters > len(text):\n        return -1\n    # if the longest match is longer than the length of the text,\n    # return the match index\n    if num_letters > len(text):\n        return -1\n    # if the length of the longest match is the same as the text,\n    # return the length of the longest match\n    if num_letters == len(text):\n        return len(text)\n    # if the length of the longest match is different from the text,\n    # return the length of the longest match with a substring\n    elif num_letters > len(text):\n        return -1\n    else:\n        return len(text)\n",
        "num_ids": 381
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.match(r'(?P<number>\\d+) (?P<char>b)? a (?P<word>\\w+)', text)\n    if m:\n        return m.groupdict()\n    else:\n        return None\n",
        "num_ids": 63
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex_object = re.compile(r'\\b(a(b)?|b(a|b)?)\\b')\n    matches = regex_object.findall(text)\n    return matches\n",
        "num_ids": 52
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    list_copy = test_list.copy()\n    count_reverse = 0\n    for i in range(len(list_copy)):\n        for j in range(len(list_copy) - 1, -1, -1):\n            if list_copy[j] == list_copy[i]:\n                count_reverse += 1\n    return count_reverse\n",
        "num_ids": 86
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # create an empty dictionary to store pairs of strings\n    dict = {}\n    \n    # traverse the list\n    for i in range(len(test_list)-1):\n        # check if the string is in the dictionary\n        if test_list[i] in dict:\n            # increment the count of the pair\n            dict[test_list[i]] = dict[test_list[i]] + 1\n        else:\n            # add the string to the dictionary\n            dict[test_list[i]] = 1\n    # print(dict)\n    \n    # iterate through the dictionary\n    for k in dict:\n        # check if the pair of strings is odd\n        if dict[k] % 2 == 1:\n            # increment the count\n            dict[k] = dict[k] + 1\n        else:\n            # if the count is odd, add it to a list\n            if dict[k] % 2!= 1:\n                # append the pair to the list\n                dict[k] = dict[k] + 2\n            \n    # print the dict\n    # print(dict)\n    \n    # return the count\n    return dict\n",
        "num_ids": 268
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    l1 = test_list[0]\n    for i in range(len(l1)-1):\n        l2 = test_list[i+1]\n        if l1[i] == l2[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j]:\n                reverse_count = reverse_count + 1\n    return reverse_count\n",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return list(map(str.count, zip(*test_list)))\n",
        "num_ids": 19
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            total_count += 1\n    print(total_count)\n",
        "num_ids": 57
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - 1):\n            if test_list[j]!= test_list[j+1]:\n                break\n            else:\n                count_reverse_pairs += 1\n    return count_reverse_pairs\n",
        "num_ids": 87
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    my_list = []\n    for item in test_list:\n        my_list.append(item)\n    my_list.sort()\n    pairs = 0\n    for i in range(len(my_list)-1):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] == my_list[j]:\n                pairs += 1\n    return pairs\n",
        "num_ids": 101
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            counter += 1\n    return counter\n",
        "num_ids": 50
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    reverse_count = 0\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if test_list[i] == test_list[j]:\n                reverse_count += 1\n            else:\n                total += 1\n    print(reverse_count)\n    print(total)\n",
        "num_ids": 92
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO: Enter your code here. Make sure you have a blank line at the end.\n    \n    unique = {}\n    \n    for i in list1:\n        if i not in unique:\n            unique[i] = 1\n        else:\n            unique[i] += 1\n            \n    return unique\n    ",
        "num_ids": 76
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {item: len(list(tuple(list1))) for item in set(list1)}\n",
        "num_ids": 26
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuples = []\n    for i in range(len(list1)):\n        list1_tuples.append((list1[i], i))\n    return dict(list1_tuples)",
        "num_ids": 51
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # In order to use the function we need to include a function that finds the longest and shortest sublists (the same as the initial problem)\n    # In order to find all the longest sublists of the list, we need to take the starting index\n    # For example if we have the following lists\n    # a = [1, 2, 3, 4, 5]\n    # b = [1, 3, 5]\n    # we need to find the longest and shortest sublists of the lists a,b.\n",
        "num_ids": 115
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    if len(list1) == 0:\n        return {}\n    dic = {}\n    for i in range(len(list1)):\n        tup = tuple(list1[i])\n        if tup in dic:\n            dic[tup] = dic[tup] + 1\n        else:\n            dic[tup] = 1\n    return dic\n    \n    \n",
        "num_ids": 99
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in list1:\n            if tuple(i) in count:\n                count[tuple(i)] += 1\n            else:\n                count[tuple(i)] = 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in dict:\n                    dict[j] += 1\n                else:\n                    dict[j] = 1\n    return dict\n",
        "num_ids": 63
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict:\n            dict[list1[i]] = [i]\n        else:\n            dict[list1[i]].append(i)\n    return dict\n",
        "num_ids": 67
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_list(list1):\n        \n        unique_list = {}\n",
        "num_ids": 21
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return all([int(x) in range(10) for x in str(num)])\n",
        "num_ids": 24
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        x = Decimal(num)\n    except:\n        return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num)<5:\n        return False\n    if not num.isdigit():\n        return False\n    for i in range(len(num)-2):\n        if not num[i].isdigit():\n            return False\n        if not num[i].isalpha():\n            return False\n        if not num[i].isupper():\n            return False\n        if not num[i].islower():\n            return False\n        if not num[i].isnumeric():\n            return False\n        if num[i]!=\".\":\n            return False\n    return True\n",
        "num_ids": 139
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    from math import isinf, isnan, isnan\n    return isinf(float(num)) or isnan(float(num)) or float(num)==0.0\n",
        "num_ids": 42
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if len(str(num)) == 1 and num >= 0 else False\n",
        "num_ids": 21
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) == 0:\n        return False\n    return num[0] == '-' and '0' < num[1] <= '9'\n",
        "num_ids": 47
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    num = num.replace('.', '')\n    if num[0] == '-' and len(num) > 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in str(num) and num.count('.') == 1 and len(str(num)) <= 5\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        try:\n            int(num)\n        except ValueError:\n            return False\n        else:\n            return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #your code here\n    distinct = []\n    for i in arr:\n        distinct.append(i)\n    if len(set(distinct)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return True\n    else:\n        for i in arr:\n            if arr.count(i)>1:\n                return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if not arr:\n        return False\n    count = 0\n    for element in arr:\n        if element!= arr[count]:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_value=set(arr)\n    if len(unique_value)==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    #length of array\n    length = len(arr)\n",
        "num_ids": 18
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] in arr[i+1:]:\n                return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        temp = arr[0]\n        for i in arr:\n            if i == temp:\n                temp = i\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if arr.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # define a dictionary\n    d = dict()\n    for x in arr:\n        if x not in d:\n            d[x] = 1\n        else:\n            return False\n",
        "num_ids": 45
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = str(monthnum3)\n    if monthnum3[0] == '3':\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        monthnum3=1\n    else:\n        monthnum3=0\n",
        "num_ids": 33
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 == 1:\n        if monthnum3 == 29:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 28:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 27:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 2:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 3:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 31:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 4:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 5:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 6:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 7:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 8:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 9:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 10:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 11:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 12:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 13:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 14:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 15:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 16:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 17:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 18:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} is a weekend')\n        else:\n            print(f'{monthnum3} is not a holiday or weekday')\n    elif monthnum3 == 19:\n        if monthnum3 == 31:\n            print(f'{monthnum3} is a holiday')\n        elif monthnum3 == 30:\n            print(f'{monthnum3} is a weekday')\n        elif monthnum3 == 29:\n            print(f'{monthnum3} i",
        "num_ids": 2001
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return 1\n    elif monthnum3 == 2:\n        return 31\n    elif monthnum3 == 3:\n        return 31\n    elif monthnum3 == 4:\n        return 30\n    elif monthnum3 == 5:\n        return 31\n    elif monthnum3 == 6:\n        return 30\n    elif monthnum3 == 7:\n        return 31\n    elif monthnum3 == 8:\n        return 31\n    elif monthnum3 == 9:\n        return 30\n    elif monthnum3 == 10:\n        return 31\n    elif monthnum3 == 11:\n        return 30\n    elif monthnum3 == 12:\n        return 31\n    else:\n        return None\n    \ndef check_number_number(numb3):\n    '''\n    Write a function to check whether the given number contains 30 days or not. Numbers are given as number from 1 to 9.\n    '''\n    if numb3 == 1:\n        return 1\n    elif numb3 == 2:\n        return 31\n    elif numb3 == 3:\n        return 31\n    elif numb3 == 4:\n        return 30\n    elif numb3 == 5:\n        return 31\n    elif numb3 == 6:\n        return 30\n    elif numb3 == 7:\n        return 31\n    elif numb3 == 8:\n        return 30\n    elif numb3 == 9:\n        return 31\n    elif numb3 == 10:\n        return 30\n    elif numb3 == 11:\n        return 31\n    elif numb3 == 12:\n        return 31\n    else:\n        return None\n    \ndef main():\n    \n    # writing the main function\n    main()\n    ",
        "num_ids": 185
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if len(str(monthnum3))==1:\n            return str(monthnum3) + \"0\" + \"1\"\n        else:\n            return str(monthnum3) + \"0\" + \"1\" + str(len(str(monthnum3)))\n    else:\n        return \"invalid month number\"\n",
        "num_ids": 91
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid input\")\n        \n    elif monthnum3 > 30:\n        print(\"Invalid input\")\n        \n    elif monthnum3 == 1:\n        print(\"January\")\n    \n    elif monthnum3 == 2:\n        print(\"February\")\n        \n    elif monthnum3 == 3:\n        print(\"March\")\n        \n    elif monthnum3 == 4:\n        print(\"April\")\n        \n    elif monthnum3 == 5:\n        print(\"May\")\n        \n    elif monthnum3 == 6:\n        print(\"June\")\n        \n    elif monthnum3 == 7:\n        print(\"July\")\n        \n    elif monthnum3 == 8:\n        print(\"August\")\n        \n    elif monthnum3 == 9:\n        print(\"September\")\n        \n    elif monthnum3 == 10:\n        print(\"October\")\n        \n    elif monthnum3 == 11:\n        print(\"November\")\n        \n    elif monthnum3 == 12:\n        print(\"December\")\n        \n    else:\n        print(\"Invalid input\")\n        \n    \n    \ndef check_number_int_float(n):\n    '''\n    Function that checks whether the given number is a float or integer.\n    '''\n    \n    try:\n        float(n)\n        \n    except ValueError:\n        print(\"Invalid input\")\n        \n    else:\n        \n        if float(n) >= 0:\n            print(\"Valid input\")\n        else:\n            print(\"Invalid input\")\n            \n        \ndef check_zero_element_list(a):\n    '''\n    Function that checks whether the given list contains 0 elements or not.\n    '''\n    \n    for i in a:\n        if i == 0:\n            print(\"Invalid input\")\n            \n        else:\n            \n            \ndef check_second_element_list(a):\n    '''\n    Function that checks whether the given list contains 2 elements or not.\n    '''\n    \n    for i in a:\n        if i == 2:\n            print(\"Invalid input\")\n            \n        else:\n            \n            \n            \ndef check_first_element_list(a):\n    '''\n    Function that checks whether the given list contains 1 elements or not.\n    '''\n    \n    for i in a:\n        if i == 1:\n            print(\"Invalid input\")\n            \n        else:\n            \n            \n            \ndef check_month_of_year(m1, m2):\n    '''\n    Function that checks whether the given month is equal to current year or not.\n    '''\n    \n    if (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        print(\"Invalid input\")\n        \n    elif (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        \n        if m1 < 1 or m2 < 1:\n            print(\"Invalid input\")\n        else:\n            \n            if m2 < 1 or m1 < 1:\n                \n                if m1 < 1 or m2 < 1:\n                    \n                    print(\"Invalid input\")\n                    \n                else:\n                    \n                    \n                    print(\"Valid input\")\n                    \n                    \n    elif (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        \n        if m1 < 1 or m2 < 1:\n            print(\"Invalid input\")\n            \n        else:\n            \n            if m2 < 1 or m1 < 1:\n                \n                print(\"Invalid input\")\n                \n            else:\n                \n                print(\"Valid input\")\n                \n                \n    elif (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        \n        if m1 < 1 or m2 < 1:\n            print(\"Invalid input\")\n            \n        else:\n            \n            print(\"Valid input\")\n            \n            \n    elif m1 < 1 or m1 > 12:\n        \n        print(\"Invalid input\")\n        \n    elif m2 < 1 or m2 > 12:\n        \n        print(\"Invalid input\")\n        \n    else:\n        \n        print(\"Valid input\")\n        \n    \n    \ndef check_unique_elements(a):\n    '''\n    Function that checks whether the given list contains only unique elements.\n    '''\n    \n    count = 0\n    for i in a:\n        if i in a:\n            count += 1\n            \n        else:\n            \n            print(\"Invalid input\")\n            \n            \n    if count == len(a):\n        \n        print(\"Valid input\")\n        \n    else:\n        \n        print(\"Invalid input\")\n        \n        \ndef count_elements(a):\n    '''\n    Function that counts the number of elements in the list.\n    '''\n    \n    count = 0\n    for i in a:\n        count += 1\n    \n    if count == len(a):\n        \n        print(\"Valid input\")\n        \n    else:\n        \n        print(\"Invalid input\")\n        \n        \ndef count_elements_list(a):\n    '''\n    Function that counts the number of elements in the list.\n    '''\n    \n    count = 0\n    for i in a:\n        count += 1\n    \n    if count == len(a):\n        \n        print(\"Valid input\")\n        \n    else:\n        \n        print(\"Invalid input\")\n        \n        \ndef count_elements_in_month(m1, m2):\n    '''\n    Function that counts the number of elements in the given month.\n    '''\n    \n    month_numbers = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    if (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        \n        print(\"Invalid input\")\n        \n    elif (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        \n        if m1 < 1 or m2 < 1:\n            \n            print(\"Invalid input\")\n            \n        else:\n            \n            print(\"Valid input\")\n            \n            \n            \n            \ndef count_elements_in_month(m1, m2):\n    '''\n    Function that counts the number of elements in the given month.\n    '''\n    \n    month_numbers = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    if (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        \n        print(\"Invalid input\")\n        \n    elif (m1 < 1 or m1 > 12) and (m2 < 1 or m2 > 12):\n        \n        print(\"Invalid input\")\n        \n    else:\n        \n        print(\"Valid input\")\n        \n            \ndef reverse_list(a):\n    '''\n    Function that reverses the given list.\n    '''\n    \n    for i in range(len(a)-1, -1, -1):\n        \n        a[i] = a[i + 1]\n        \n    \n    \ndef reverse_list_second(a):\n    '''\n    Function that reverses the given list.\n    '''\n    \n    for i in range(len(a)-1, -1, -1):\n        \n        a[i] = a[i + 1]\n        \n    \ndef count_unique_elements_in_list(a):\n    '''\n    Function that counts the number of unique elements in the given list.\n    '''\n    \n    for i in a:\n        \n        if i not in a:\n            \n            a.append(i)\n    \n    \ndef count_unique_elements_in_list_second(a):\n    '''\n    Function that counts the number of unique elements in the given list.\n    '''\n    \n    for i in a:\n        \n        if i not in a:\n            \n            a.append(i)\n    \n    \ndef swap_elements_in_list(a):\n    '''\n    Function that swaps the elements of the given list.\n    '''\n    \n    fo",
        "num_ids": 6
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    import calendar\n    month_days=calendar.monthrange(2021,monthnum3)\n    return month_days[1]<=30\n",
        "num_ids": 37
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = []\n    month_total = []\n    monthnum.append(int(monthnum3))\n    for x in range(12):\n        if monthnum[x] == 31:\n            monthnum[x] = 1\n            monthnum.append(1)\n            if x > 1 and monthnum[x - 1] == 31:\n                monthnum[x] = 1\n                monthnum.append(1)\n        else:\n            if monthnum[x] == 1:\n                monthnum[x] = 0\n                monthnum.append(0)\n            else:\n                monthnum[x] = 1\n                monthnum.append(1)\n    for x in range(12):\n        if monthnum[x] == 31:\n            monthnum[x] = 12\n            monthnum.append(0)\n            if x > 1 and monthnum[x - 1] == 31:\n                monthnum[x] = 12\n                monthnum.append(0)\n        else:\n            if monthnum[x] == 12:\n                monthnum[x] = 1\n                monthnum.append(1)\n            else:\n                monthnum[x] = 1\n                monthnum.append(12)\n    total = 0\n    for x in range(12):\n        total += monthnum[x]\n    return total >= 30",
        "num_ids": 312
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 12 or monthnum3 == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if len(monthnum3) == 2 and monthnum3 in range(1,13):\n            if monthnum3 in range(1,3):\n                if len(str(monthnum3)) == 2 and monthnum3 in range(1,3):\n                    if monthnum3 in range(1,3):\n                        if len(str(monthnum3)) == 3 and monthnum3 in range(1,3):\n                            return True\n                        else:\n                            return False\n            else:\n                if len(str(monthnum3)) == 2 and monthnum3 in range(1,3):\n                    if monthnum3 in range(1,3):\n                        if len(str(monthnum3)) == 3 and monthnum3 in range(1,3):\n                            return True\n                        else:\n                            return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 216
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr_min_diff = 100\n    temp_min_diff = arr[0] - arr[1]\n    \n    for i in range(2,n):\n        temp_min_diff = min(temp_min_diff, arr[i] - arr[i-2])\n        \n    return temp_min_diff\n",
        "num_ids": 78
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    mini = arr[0]\n    for i in range(1,n):\n        if arr[i] < mini:\n            mini = arr[i]\n    return mini\n",
        "num_ids": 43
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff=0\n    i=0\n    j=n-1\n    while(i<j):\n        if(arr[i]!=arr[j]):\n            i+=1\n        elif(arr[i]==arr[j]):\n            i+=1\n            j-=1\n            j-=1\n        else:\n            i+=1\n            j+=1\n        diff+=1\n    return diff\n",
        "num_ids": 102
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i] == arr[j]:\n                continue\n            \n            else:\n                arr[i] = -arr[i]\n                arr[j] = -arr[j]\n    return arr[i]\n",
        "num_ids": 74
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # array=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"]\n    \n    # arr=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",",
        "num_ids": 1989
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    m=0\n    for i in range(n):\n        m=max(m,abs(arr[i]-arr[i-1]))\n    return m\n",
        "num_ids": 41
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    for i in range(0,n): \n        for j in range(i+1,n): \n            min_diff = min(min_diff,abs(arr[i] - arr[j])) \n    return min_diff\n",
        "num_ids": 66
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #initialize the diff value\n    diff = arr[0] - arr[1]\n    #Traverse through the array\n    for i in range(2, n):\n        #dif between the current and the next element\n        diff = arr[i] - arr[i-1]\n        #Compare the diff value\n        if diff == 0:\n            #if diff is equal to 0 then return 0\n            return 0\n        elif diff < 0:\n            #if diff is less than 0, then return diff\n            return diff\n        else:\n            #if diff is greater than 0, then return 0\n            return 0\n    #If the number of elements is less than 2, then return 0\n    return 0\n",
        "num_ids": 165
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if arr[0] > arr[1]:\n        a = arr[0]\n        b = arr[1]\n    else:\n        a = arr[1]\n        b = arr[0]\n",
        "num_ids": 50
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min=arr[0]\n    max=arr[0]\n    for i in range(n-1):\n        if arr[i]>max:\n            max=arr[i]\n        if arr[i]<min:\n            min=arr[i]\n    return max-min\narr=[3,6,5,9,1,4,7]\nprint(find_min_diff(arr,len(arr))",
        "num_ids": 102
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char == '0':\n            ctr = ctr + 1\n    return ctr",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    \n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            ctr += 1\n        \n    return ctr",
        "num_ids": 47
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def count_digits(string):\n        '''\n        1) count the number of digits in a given string\n        2) return the result\n        '''\n        result = 0\n        for i in range(0, len(string)):\n            if string[i].isdigit():\n                result = result + 1\n        return result\n    \n    def count_digits_v2(string):\n        '''\n        1) count the number of digits in a given string\n        2) return the result\n        '''\n        result = 0\n        for i in string:\n            if i.isdigit():\n                result = result + 1\n        return result\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count_digits = 0\n    for i in str:\n        if i.isdigit():\n            count_digits+=1\n    return count_digits\n",
        "num_ids": 41
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # Your code here\n    return len([c for c in str if c.isdigit()])\n",
        "num_ids": 26
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = []\n    for i in str:\n        if i.isdigit():\n            digits.append(i)\n    count_digits = len(digits)\n    return count_digits\n    #DONE\n    ",
        "num_ids": 58
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    str = str.lower()\n    for c in str:\n        if c.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Your code here\n    # n = int(input(\"Enter a number to find nth polite number: \"))\n    if n %2!= 0:\n        print(\"The number you entered is not an even number\")\n    if n %2 == 0:\n        print(\"The number you entered is an even number\")\n    print(\"The number you entered is an even number\")\n    print(\"The number you entered is even\")\n    return n\ndef factorial(n):\n    '''\n    Function to calculate factorial of number n. geeksforgeeks.org/factorial/\n    '''\n    # Your code here\n    # n = int(input(\"Enter a number to find factorial: \"))\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n    \ndef is_perfect(n):\n    '''\n    Function to calculate is a perfect number. geeksforgeeks.org/perfect-number/\n    '''\n    # Your code here\n    # n = int(input(\"Enter a number to find is a perfect number: \"))\n    if n == 0 or n == 1:\n        return True\n    \n    else:\n        for i in range(1, n+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    \ndef is_palindrome(s):\n    '''\n    Function to check if a string is palindrome. geeksforgeeks.org/palindrome-string/\n    '''\n    # Your code here\n    # s = str(input(\"Enter a string to check palindrome: \"))\n    s = str(s)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef odd_divisors(n):\n    '''\n    Function to find the odd numbers divisors of the input number. geeksforgeeks.org/divisors/\n    '''\n    # Your code here\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    if len(divisors) == 1:\n        return divisors[0]\n    else:\n        return divisors\n    \n    \ndef palindrome(string):\n    '''\n    Function to check if a string is palindrome. geeksforgeeks.org/palindrome-string/\n    '''\n    # Your code here\n    string = str(string)\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef to_int(num):\n    '''\n    Function to convert a number to an integer. geeksforgeeks.org/to-integer/\n    '''\n    # Your code here\n    return int(num)\n    \n    \ndef factorial_recursion(n, d):\n    '''\n    Function to calculate the factorial of the number. geeksforgeeks.org/factorial/\n    '''\n    # Your code here\n    # n = int(input(\"Enter a number to find factorial: \"))\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return n\n    else:\n        return n * factorial_recursion(n-1, d)\n    \n    \ndef factorial_recursion_2(n):\n    '''\n    Function to calculate the factorial of the number. geeksforgeeks.org/factorial/\n    '''\n    # Your code here\n    # n = int(input(\"Enter a number to find factorial: \"))\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial_recursion_2(n-1)\n    \n    \ndef palindrome_recursion(string):\n    '''\n    Function to check if a string is palindrome. geeksforgeeks.org/palindrome-string/\n    '''\n    # Your code here\n    return str(string) == str(string[::-1])\n    \n    \ndef palindrome_recursion_2(string):\n    '''\n    Function to check if a string is palindrome. geeksforgeeks.org/palindrome-string/\n    '''\n    # Your code here\n    return str(string) == str(string[::-1])\n    \n    \ndef to_int_recursion(num):\n    '''\n    Function to convert a number to an integer. geeksforgeeks.org/to-integer/\n    '''\n    # Your code here\n    return int(num)\n    \n    \ndef find_permutations(string):\n    '''\n    Function to find all permutations of a string. geeksforgeeks.org/permutations-string/\n    '''\n    # Your code here\n    permutations = []\n    if string == string[::-1]:\n        return permutations\n    else:\n        for i in range(len(string)):\n            for j in range(i, len(string)):\n                permutations.append(string[i:j+1])\n        return permutations\n    \n    \ndef find_permutations_2(string):\n    '''\n    Function to find all permutations of a string. geeksforgeeks.org/permutations-string/\n    '''\n    # Your code here\n    permutations = []\n    if string == string[::-1]:\n        return permutations\n    else:\n        for i in range(len(string)):\n            for j in range(i, len(string)):\n                permutations.append(string[i:j+1])\n        return permutations\n    \n    \ndef factorial_recursion_2(n):\n    '''\n    Function to calculate the factorial of the number. geeksforgeeks.org/factorial/\n    '''\n    # Your code here\n    # n = int(input(\"Enter a number to find factorial: \"))\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return n\n    else:\n        return n * factorial_recursion_2(n-1)\n    \n    \ndef find_permutations_2(string):\n    '''\n    Function to find all permutations of a string. geeksforgeeks.org/permutations-string/\n    '''\n    # Your code here\n    permutations = []\n    if string == string[::-1]:\n        return permutations\n    else:\n        for i in range(len(string)):\n            for j in range(i, len(string)):\n                permutations.append(string[i:j+1])\n        return permutations\n    \n    \ndef factorial_recursion_3(n):\n    '''\n    Function to calculate the factorial of the number. geeksforgeeks.org/factorial/\n    '''\n    # Your code here\n    # n = int(input(\"Enter a number to find factorial: \"))\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return n\n    else:\n        return n * factorial_recursion_3(n-1)\n    \n    \ndef find_permutations_2(string):\n    '''\n    Function to find all permutations of a string. geeksforgeeks.org/permutations-string/\n    '''\n    # Your code here\n    permutations = []\n    if string == string[::-1]:\n        return permutations\n    else:\n        for i in range(len(string)):\n            for j in range(i, len(string)):\n                permutations.append(string[i:j+1])\n        return permutations\n    \n    \ndef find_permutations_3(string):\n    '''\n    Function to find all permutations of a string. geeksforgeeks.org/permutations-string/\n    '''\n    # Your code here\n    permutations = []\n    if string == string[::-1]:\n        return permutations\n    else:\n        for i in range(len(string)):\n            for j in range(i, len(string)):\n                permutations.append(string[i:j+1])\n        return permutations\n    \n    \ndef factorial_recursio",
        "num_ids": 91
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def polite_check(n): \n        '''\n        Check if nth polite is number of 2 or more consecutive numbers.\n        '''\n        if n <= 2: \n            return False\n        else: \n            return n % 2 == 0\n    if polite_check(n): \n        return False\n    else: \n        return True\n",
        "num_ids": 50
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n % 2!= 0\n",
        "num_ids": 11
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    return numbers[-1]\ndef nth_polite_number(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/nth-polite-numbers/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    return numbers[-1]\ndef is_happy(n): \n    '''\n    Write a function to check if a number is happy. geeksforgeeks.org/is-happy/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 1): return False\n    return True\ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2!= 0): return False\n    return True\ndef is_prime_number(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_small(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-small/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_big(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-big/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_small_big(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-small-big/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_large(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-large/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_prime(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-prime/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_large_prime(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-large-prime/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_large_prime_big(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-large-prime-big/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_two(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-two/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_four(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-four/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_four_big(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-four-big/\n    '''\n    if(n == 0 or n == 1): return n\n    numbers = [0, 1]\n    for i in range(2, n+1):\n        numbers.append(numbers[i-1]*i)\n    for i in range(2, n+1):\n        if(numbers[i] % 2 == 0): return False\n    return True\ndef is_prime_number_large_four(n):\n    '''\n    Write a function to check if a number is prime. geeksforgeeks.org/is-prime-number-large-four/\n    '''\n    if(n == 0 or n == 1): return n\n",
        "num_ids": 16
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return False\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return is_polite(n//2) \n    else: \n        return is_polite(3*n//2) \n",
        "num_ids": 69
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: return -1\n    if n == 1: return 0\n    return math.gcd(n, math.pow(10, n))\ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime or not. geeksforgeeks.org/is-prime/\n    '''\n    if n == 2: return True\n    if n == 3 or n == 5 or n == 7: return True\n    if n % 2 == 0 or n == 1: return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0: return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n == 0:\n        # return False\n    # elif n == 1:\n        # return True\n    # else:\n        # for i in range(2, int(math.sqrt(n)) + 1):\n            # if n%i == 0:\n                # return False\n    # return True\n    # If n is a perfect square, return true\n    # Otherwise return false\n    if n <= 1:\n        return True\n    if n%2 == 0 or n==3 or n==5:\n        return False\n    # This will return true if n is a perfect square, else false\n    # because it is a prime number\n    return is_polite(n-1)\n",
        "num_ids": 163
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    if n % 2 == 0: \n        return False\n    return is_polite(n - 1) or is_polite(n - 1) or is_polite(n - 2)\n",
        "num_ids": 60
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    else: \n        return is_polite(n-1) or is_polite(n-2) \n",
        "num_ids": 55
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    return [(x,l1[x+1]) for x in range(len(l1)-1) if x+2 < len(l1)]\n    \ndef pw_match(l1, l2):\n    '''\n    Write a function that takes a list l1 and a list l2 and returns a list containing all the pairs of consecutive items in the two lists.\n    '''\n    l1 = list(l1)\n    l2 = list(l2)\n    return [l1[x:x+2] for x in range(len(l1)) if x+2 < len(l1)] + [l2[x:x+2] for x in range(len(l2)) if x+2 < len(l2)]\n",
        "num_ids": 86
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j] and i == j:\n                result.append((l1[i], l1[j]))\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    pairs = []\n    \n    #loop through the list\n    for i in range(0,len(l1)):\n        for j in range(i+1,len(l1)):\n            if l1[i] == l1[j]:\n                #if we have the same number of pairs, we don't add the pair\n                if len(pairs) == 0:\n                    pairs.append([l1[i],l1[j]])\n                #we add the pair\n                else:\n                    #sort the pair\n                    if pairs[len(pairs)-1][1] > l1[i]:\n                        pairs.append([l1[i],l1[j]])\n                    else:\n                        continue\n    return pairs\n    \n    \ndef main():\n    \n    #get the file\n    f = open(\"input_day3.txt\", \"r\")\n    \n    #read the input file\n    data = f.read()\n    \n    #make a list of the words\n    data = data.split(\"\\n\")\n    \n    #make a list of lists with the input words\n    l1 = []\n    for i in data:\n        l1.append(i)\n    \n    #print it out\n    print(l1)\n    \n    #pairwise\n    pairs = pair_wise(l1)\n    \n    #print the output\n    print(pairs)\n    \n    #write it out\n    f = open(\"output_day3.txt\", \"w\")\n    f.write(str(pairs))\n    f.close()\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 393
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(0,len(l1)):\n        for j in range(0,len(l1)):\n            if i!=j:\n                if l1[i]!=l1[j]:\n                    l2.append((l1[i],l1[j]))\n    return l2\n",
        "num_ids": 84
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append([l1[i],l1[i-1]])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append([l1[i],l1[i+1]])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_2(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_3(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_4(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_5(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_6(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_7(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_8(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_9(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_10(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_11(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_12(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_13(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i])\n        if i!= len(l1)-1:\n            l3.append(l1[i])\n        else:\n            l3.append(l1[i])\n    return l2,l3\n    \ndef pair_wise_14(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i!= 0:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[",
        "num_ids": 60
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        for j in range(i+1,len(l1)):\n            pair_list.append((l1[i],l1[j]))\n    return pair_list\n",
        "num_ids": 65
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = l1[1:]\n    l1 = list(zip(l1,l1[1:]))\n    return l1\n",
        "num_ids": 35
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j] and not l1[i] in pairs:\n                pairs.append((l1[i], l1[j]))\n    return pairs\n",
        "num_ids": 85
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1: return []\n    result = []\n    for i in range(len(l1)):\n        if i+1 < len(l1):\n            if l1[i] == l1[i+1]:\n                result.append((l1[i],l1[i+1]))\n        else:\n            result.append((l1[i],l1[i+1]))\n    return result\n",
        "num_ids": 103
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1, l1[1:]))\n",
        "num_ids": 18
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    i = 0\n    pairs = 0\n    while(i < len(arr) - 1):\n        if(sum == arr[i] + arr[i+1]):\n            pairs = pairs + 1\n            i = i + 2\n        else:\n            i = i + 1\n    return pairs\n",
        "num_ids": 74
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                pair_count += 1\n    return pair_count\n",
        "num_ids": 65
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n            j = j + 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # create a dictionary to store the pairs\n    count = {}\n    # iterate over the list and add the pair to the dictionary\n    for i in range(len(arr) - 1):\n        if arr[i] + arr[i + 1] == sum:\n            count[arr[i]] = count.get(arr[i], 0) + 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum - (sum//2)\n",
        "num_ids": 12
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i]+arr[j]) == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 62
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n        else:\n            continue\n    return diff\n",
        "num_ids": 43
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=0\n    for i in range(0,len(li1)):\n        diff=diff+abs(li1[i]-li2[i])\n    return diff\n",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=0\n    i=0\n    while (i<len(li1) and i<len(li2)):\n        diff=li1[i]-li2[i]\n        i+=1\n    return diff\n",
        "num_ids": 55
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        diff.append(li2[i]-li1[i])\n    return diff\n",
        "num_ids": 40
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    li3.append(li1[0])\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            li3.append(li1[i])\n    return li3\n",
        "num_ids": 65
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # This returns a list of the differences between two lists.\n    res = list(set(li1) - set(li2))\n    # Return the list of the differences.\n    return res\n    ",
        "num_ids": 48
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    li1 = [i for i in li1 if i!=i]\n    li2 = [i for i in li2 if i!=i]\n    \n    print(f\"L1 diff:\\t {li1}\")\n    print(f\"L2 diff:\\t {li2}\")\n    \n    return li1, li2\n",
        "num_ids": 84
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1-li2\n",
        "num_ids": 10
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    x = li2.copy()\n    x.pop(0)\n    x.pop()\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    a=[]\n    b=[]\n    for i in range(len(li1)):\n        a.append(li1[i])\n    for i in range(len(li2)):\n        b.append(li2[i])\n    diff=[]\n    for i in range(len(a)):\n        if a[i] not in b:\n            diff.append(a[i])\n    return diff\n",
        "num_ids": 102
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([x**4 for x in range(n) if x % 2!= 0])\nprint(odd_num_sum(20))\n",
        "num_ids": 36
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 0\n    for i in range(n) : \n        num += 4 ** (n-i-1) * pow(i+1,4) \n    return num\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #we are not going to use any more variable, just sum of 2*x in base 10 power of x, for i\n    #in range 1..n, to find it, we need to multiply it by 2, (n*2)\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i*i)\n    return sum\nprint(odd_num_sum(4)",
        "num_ids": 97
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += pow(i,3)\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = n\n    result = 0\n    while i >= 1 :\n        if i % 4 == 0:\n            result += i\n        i -= 1\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    if n % 2 == 0 : \n        return odd_num_sum(n - 1) + odd_num_sum(n - 2)\n    if n % 2 == 1 : \n        return odd_num_sum(n - 1) + odd_num_sum(n - 2) + odd_num_sum(n - 3)\n    else :\n        return odd_num_sum(n - 1) + odd_num_sum(n - 2) + odd_num_sum(n - 3) + odd_num_sum(n - 4)\n",
        "num_ids": 155
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # remove 'pass' line\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum = sum + i**2\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    x = 0\n    if n < 0 : \n        print(\"Number cannot be negative\")\n    else : \n        if n % 2 == 0 : \n            x = n**3\n            print(\"The sum of the first n natural numbers is\", x) \n        else : \n            print(\"The sum of the first n natural numbers is\", n**3)\n    return x\n",
        "num_ids": 90
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res = res + i ** 3\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) > 1:\n        stack = deque()\n        for i in exp:\n            if i == '(':\n                stack.append(i)\n            else:\n                if not stack:\n                    return False\n                elif stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return True\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_paren = ['(', '[', '{']\n    close_paren = [')', ']', '}']\n    stack = []\n    for i in exp:\n        if i in open_paren:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                curr = stack.pop()\n                if i == curr:\n                    continue\n                elif i == ')':\n                    if curr!= '(':\n                        return False\n                elif i == ']':\n                    if curr!= '[':\n                        return False\n                elif i == '}':\n                    if curr!= '{':\n                        return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 191
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if type(exp) is int:\n        return True\n    if type(exp[0]) is int:\n        if len(exp) == 1:\n            return True\n        else:\n            if exp[0] > exp[1]:\n                return check_expression(exp[2:])\n            else:\n                return check_expression(exp[1:])\n    if type(exp[0]) is str:\n        return check_expression(exp[1:])\n",
        "num_ids": 110
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # checking if number of parentheses is equal to the amount of brackets\n    bracket_count = 0\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            bracket_count += 1\n        else:\n            bracket_count -= 1\n            if bracket_count == 0:\n                return False\n",
        "num_ids": 80
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    for i in exp:\n        if i == '(':\n            left_parens = check_expression(exp.replace(')', ''))\n            right_parens = check_expression(exp.replace('(', ''))\n            if left_parens == 0:\n                return 0\n            if right_parens == 0:\n                return 0\n            if left_parens == 0:\n                return 0\n        elif i == '{':\n            left_braces = check_expression(exp.replace('{', ''))\n            right_braces = check_expression(exp.replace('}', ''))\n            if left_braces == 0:\n                return 0\n            if right_braces == 0:\n                return 0\n            if left_braces == 0:\n                return 0\n    return 1\n",
        "num_ids": 189
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    previous_idx = None\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.append(c)\n            previous_idx = i\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return previous_idx == None\n",
        "num_ids": 81
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0: return True\n    open_brackets = ['(', '{', '[', ']']\n    for brackets in open_brackets:\n        if brackets in exp:\n            index = exp.index(brackets)\n            if index == 0: exp = exp[1:]\n            else: exp = exp[:index] + exp[index+1:]\n    return check_expression(exp)\n",
        "num_ids": 100
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    count = 0\n    for i in exp:\n        if i == \"(\":\n            count += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    if len(exp) == 1:\n        return exp[0] == '(' and exp[-1] == ')'\n    if len(exp) == 2:\n        return exp[0] == '(' and exp[1] == ')' and check_expression(exp[0:2]) and check_expression(exp[1:])\n",
        "num_ids": 94
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if '(' in exp or ')' in exp:\n        return False\n    \n    if exp[0] in ('{','('):\n        left = exp[1:exp.index(exp[0])+1]\n        return check_expression(left)\n    if exp[len(exp)-1] in ('}',')'):\n        right = exp[exp.index(exp[len(exp)-1])+1:len(exp)]\n        return check_expression(right)\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    my_string = test_str\n    for i in range(K, len(my_string)):\n        my_string = my_string[:i] + my_string[i+1:]\n    return my_string\n",
        "num_ids": 55
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = \"\"\n    # print(test_str)\n    for char in test_str:\n        if len(char) == K:\n            result += char\n    # print(result)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.replace(\" \", \"\")\n",
        "num_ids": 14
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str)!= K:\n        return \"\"\n    return test_str[:-K]\n",
        "num_ids": 28
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.strip(' ').replace(' ', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').lower()\n",
        "num_ids": 41
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def remove_length_iter(string,K):\n        for i in range(0,len(string)-K+1):\n            # print(i)\n            if string[i:i+K] == string[i:i+K][::-1]:\n                string = string[:i] + string[i+K:]\n        return string\n    \n    if K == 0:\n        return \"\"\n    else:\n        return remove_length_iter(test_str, K)\n",
        "num_ids": 115
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    l = len(test_str)\n    res = ''\n    for i in range(l - K + 1):\n        res += test_str[i:i+K]\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    words = set(words)\n    new_str = []\n    for word in words:\n        if len(word) == K:\n            new_str.append(word)\n    return''.join(new_str)",
        "num_ids": 65
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    test_str = ''.join(test_str)\n    test_str = test_str.lower()\n    n = len(test_str)\n    remove = []\n    for i in range(K):\n        removed_word = test_str.replace(test_str[i], '')\n        removed_word = ''.join(removed_word)\n        if removed_word in remove:\n            continue\n        else:\n            remove.append(removed_word)\n    result = ''.join(remove)\n    print(result)\n",
        "num_ids": 144
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    list_str = list(test_str)\n    if K < len(test_str):\n        list_str.remove(test_str[0])\n    else:\n        print('Error')\n        return 0\n    return ''.join(list_str)\n",
        "num_ids": 64
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    l_text = len(text)\n    sub_text = []\n    for index in range(0,l_text):\n        for i in range(index,l_text,1):\n            if text[i:i+len(pattern)] == pattern:\n                sub_text.append(i)\n    if sub_text == []:\n        sub_text = [l_text+1]\n    return sub_text\n",
        "num_ids": 101
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # TODO\n    # Write your code here.\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        print(match.start())\n        print(match.end())\n    else:\n        return None\n    \ndef find_biggest(string):\n    '''\n    Write a function to find the largest character in the string.\n    '''\n    # TODO\n    # Write your code here.\n    return max(string,key=len)\n    \ndef find_length_of_longest_word(string):\n    '''\n    Write a function to find the length of the longest word in the given string.\n    '''\n    # TODO\n    # Write your code here.\n    return len(find_longest_word(string))\n    \ndef find_longest_word(string):\n    '''\n    Write a function that finds the longest word in the given string.\n    '''\n    # TODO\n    # Write your code here.\n    word_list = string.split()\n    return word_list[0]\n    \ndef find_longest_word_using_set(string):\n    '''\n    Write a function that finds the longest word in the given string.\n    '''\n    # TODO\n    # Write your code here.\n    longest_word_set = set(string.split())\n    for word in longest_word_set:\n        if len(word) > len(string):\n            return word\n",
        "num_ids": 57
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            return i\n",
        "num_ids": 41
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text_len = len(text)\n    if pattern.startswith('.'):\n        pattern_len = len(pattern)\n        pattern = pattern[1:]\n    if pattern.endswith('.'):\n        pattern_len = len(pattern)\n        pattern = pattern[:-1]\n",
        "num_ids": 71
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res = []\n    i=0\n    j=0\n    while i<len(text) and j<len(pattern):\n        if text[i]==pattern[j]:\n            i+=1\n            j+=1\n            if j==len(pattern):\n                res.append([i,len(pattern)-1])\n        else:\n            j+=1\n    return res\n",
        "num_ids": 91
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m=re.search(pattern,text)\n    if m==None:\n        return None\n    else:\n        return (m.start(),m.end())\n",
        "num_ids": 41
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Initialize variables\n    substrings = []\n    substring_idx = -1\n    match = 0\n    if pattern.find(\"*\")!= -1:\n        pattern = pattern.replace(\"*\", \"\")\n    if pattern.find(\"?\")!= -1:\n        pattern = pattern.replace(\"?\", \"\")\n    if pattern.find(\"[\")!= -1:\n        pattern = pattern.replace(\"[\", \"\")\n    if pattern.find(\"]\")!= -1:\n        pattern = pattern.replace(\"]\", \"\")\n    if pattern == \"\":\n        return None\n    if text == \"\":\n        return None\n    if pattern!= \"\":\n        for i in range(len(text)):\n            if text[i:i+len(pattern)] == pattern:\n                substrings.append(i)\n                substring_idx = i\n                match = 1\n    if len(substrings) > 0:\n        return substrings, substring_idx\n    else:\n        return None\n",
        "num_ids": 242
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    j = 0\n    while j < len(text):\n        if text[j] == pattern[0]:\n            if pattern[1]!= '':\n                for x in pattern[1]:\n                    if text[i:j+1] == x:\n                        j += 1\n                        i += 1\n                        break\n                    else:\n                        i += 1\n                        j += 1\n                        continue\n        else:\n            j += 1\n    return i\n",
        "num_ids": 110
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        re.compile(pattern)\n    except re.error as e:\n        print(e)\n        return None\n    if text.startswith(pattern):\n        return text[text.index(pattern):text.index(pattern)+len(pattern)]\n    else:\n        return None\n",
        "num_ids": 74
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Initialize a counter to 0\n    counter=0\n    #For each element in the list\n    for i in nums:\n        #If the element is odd, increment the counter\n        if i%2==1:\n            #If it is, increment the counter\n            if i%2==0:\n                counter+=1\n    #Return the count\n    return counter\n",
        "num_ids": 88
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index=0\n    for i in range(len(nums)):\n        if (nums[i]%2)==1:\n            odd_index=odd_index+1\n    if odd_index%2==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Your code here\n    return\n",
        "num_ids": 11
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n    \n    \ndef odd_and_even_position(nums):\n    '''\n    Write a python function to check whether every odd index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] = 0\n    return nums\n",
        "num_ids": 42
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == []:\n        return False\n    odds = []\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            odds.append(nums[i])\n    return len(odds)!= 0\n",
        "num_ids": 71
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(i%2):\n            if(nums[i]%2):\n                return False\n            return True\n    return True",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2!= 0):\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            print(nums[i], end=\" \")\n        else:\n            print(\" \", nums[i], end=\" \")\n    print()\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            count+=1\n    if count%2==1:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 61
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([n % 2 == 1 for n in nums])\n",
        "num_ids": 18
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Initialize an empty list with the numbers of vowels in a string\n    vowels = []\n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is a vowel, add it to the list\n        if char.lower() in \"aeiou\":\n            vowels.append(1)\n        # If it is not a vowel, ignore it\n        else:\n            vowels.append(0)\n",
        "num_ids": 110
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowel_count = 0\n    for char in test_str:\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 70
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    def count_vowels(str):\n        '''\n        - input - test_str: string to be counted\n        - output - count of vowels, result of count_vowels(str)\n        '''\n        return str.count('a') + str.count('e') + str.count('i') + str.count('o') + str.count('u')\n    # define test_str and count the number of vowels\n    test_str = test_str.lower()\n    count = 0\n    for char in test_str:\n        if char in ('a', 'e', 'i', 'o', 'u'):\n            count += 1\n    print(count_vowels(test_str))\n",
        "num_ids": 119
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    total = 0\n    for char in test_str:\n        if char in vowels:\n            total += 1\n    return total\n",
        "num_ids": 47
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    vowels_count_list = []\n",
        "num_ids": 22
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    result = 0\n    for c in test_str:\n        if c in vowels:\n            result += 1\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    \n    for index in range(0,len(test_str)-1):\n        if test_str[index] == 'a' or test_str[index] == 'e' or test_str[index] == 'i' or test_str[index] == 'o' or test_str[index] == 'u':\n            if test_str[index] == 'a' or test_str[index] == 'e' or test_str[index] == 'i' or test_str[index] == 'o' or test_str[index] == 'u':\n                count += 1\n    return count\n",
        "num_ids": 149
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    vowel_neighbors = 0\n    for c in test_str:\n        if c in vowels:\n            vowel_neighbors += 1\n    return vowel_neighbors\n",
        "num_ids": 60
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # your code here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(0,len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n                count += 1\n    return count\n",
        "num_ids": 113
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return arr.count(arr[0]) \n",
        "num_ids": 14
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i]:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # The algorithm is a combination of the brute force approach.\n    \n    # 1) Construct a dictionary to store the elements.\n    \n    # 2) Check if the element is present in dictionary.\n    \n    # 3) If not present, initialize the new dictionary as the old one.\n    \n    # 4) If the element is present in the dictionary, update the element in the dictionary.\n    \n    d = dict()\n    for el in arr:\n        if el not in d:\n            d[el] = 1\n        else:\n            d[el] += 1\n    return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2011
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i == 0:\n            sum += 1\n    return sum\n    pass\n",
        "num_ids": 33
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Empty list\n    lst = []\n    for i in arr:\n        if i not in lst:\n            lst.append(i)\n    return len(lst)\n",
        "num_ids": 46
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2!= 0):\n            sum += arr[i]\n    return sum\n    \n    # ===================================================\n    # SOLUTION\n",
        "num_ids": 60
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    # create a new list to store the summation \n    sum_list = []\n    for i in arr:\n        # if i is not a duplicate\n        if i not in sum_list:\n            # if the element is not already added to the new list\n            sum_list.append(i)\n            # increment the index of the new list\n            s += 1\n    return sum_list\n",
        "num_ids": 98
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # return sum(arr)\n    return len(set(arr))\n",
        "num_ids": 19
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0 \n    for i in range(len(arr)): \n        if arr[i]!= 0: \n            result += arr[i] \n    return result\n",
        "num_ids": 46
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty set \n    sum = set()\n    \n    # traverse the array \n    for item in arr:\n        # if item is not in set \n        if item not in sum:\n            sum.add(item)\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist1 = []\n    sublist2 = []\n    sublist3 = []\n    sublist4 = []\n    sublist5 = []\n    sublist6 = []\n    sublist7 = []\n    sublist8 = []\n    sublist9 = []\n    sublist10 = []\n",
        "num_ids": 72
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    for i,j in groupby(list1):\n        for k,l in groupby(list(j)):\n            if len(l)==1:\n                list2.append([i,j])\n    return list2\n    \ndef is_unique(str1):\n    '''\n    Write a function to determine whether a given string is unique or not.\n    '''\n    str2=set(str1)\n    str3=sorted(str2)\n    str4=set(str3)\n    if len(str4)==len(str1):\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # repeat_start = 0, repeat_end = len(list1)-1\n    # print(list1)\n    l = len(list1)\n    n = 0\n    # print(list1)\n    while n < l-1:\n        if list1[n]!= list1[n+1]:\n            # print(list1)\n            # print(n)\n            # print(list1[n],list1[n+1])\n            if list1[n]!= list1[n+1]:\n                # print(list1)\n                # print(n)\n                # print(list1[n],list1[n+1])\n                list1.append(list1[n] + list1[n+1])\n                # print(list1)\n            # print(list1)\n            # print(n)\n            # print(list1[n],list1[n+1])\n            # print(n)\n            # print(list1[n],list1[n+1])\n            # print(list1[n+1])\n            n += 2\n        # repeat_end += 1\n        # print(n)\n        # print(list1)\n        n += 1\n    return list1\ndef get_two_chars_in_a_string(string):\n    '''\n    Write a function that takes a string and returns two characters in it.\n    '''\n    i = 0\n    j = 0\n    # while i < len(string) - 1:\n    while i < len(string) - 1:\n        if string[i] == string[i+1]:\n            if string[i+1] == 'a' or string[i+1] == 'e' or string[i+1] == 'i' or string[i+1] == 'o' or string[i+1] == 'u':\n                j += 1\n        i += 1\n    print('two_chars_in_a_string',i,j)\n    return i,j\ndef split_strings(s):\n    '''\n    Write a function that accepts a string and returns a list of the words in the string.\n    '''\n    # print(s)\n    # print(s[0])\n    return s.split()\n",
        "num_ids": 25
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l1 = []\n    d = {}\n    for i in list1:\n        if i not in l1:\n            l1.append(i)\n            d[i] = 1\n        else:\n            d[i] += 1\n    l = []\n    for i in l1:\n        for k in list1:\n            if i == k:\n                l.append(k)\n    return l,d\n",
        "num_ids": 101
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Hash map for all list elements\n    hash_map = {}\n    # Hash map for number of duplicates\n    duplicates_count = {}\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp=[]\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n    return temp\n",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # note that you have to make a copy of the list and we will want to modify the original list\n    \n    # create a new list to store the repeated sublists\n    list2 = []\n    # iterate through the list to check for duplicates\n    # while there are still elements in the list that were repeated,\n    # add the element to the new list\n    # then add to the list\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    # return the new list\n    return list2\n",
        "num_ids": 130
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #Assuming that we have a list of integers, return a new list which has the same elements, but each sublist of length exactly one.\n    #E.g. [1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6] will return the list [1, 2, 3, 4, 5, 6].\n    def consecutive_duplicate(list1):\n        \"\"\"\n        Assuming that list1 is a list of strings, returns a list where each element has been concatenated with itself,\n        but each sub-list is the same length as the input list, and each sub-list has its first element\n        contains a duplicate.\n        \"\"\"\n        def equal_duplicates(list_1, list_2):\n            \"\"\"\n            Return a list where the duplicates are equal to their length in list_1 and list_2.\n            \"\"\"\n            list_3 = []\n            for i in range(0, len(list_1)):\n                for j in range(0, len(list_2)):\n                    if list_1[i] == list_2[j]:\n                        list_3.append(list_1[i])\n            return list_3\n        \n        list_4 = []\n        for i in range(0, len(list1)):\n            list_4.append(list1[i])\n        list_4.append(list1)\n        return equal_duplicates(list_4[0], list_4[1])\n    \n    if len(list1) < 2:\n        return list1\n    else:\n        return consecutive_duplicate(list1)\n",
        "num_ids": 386
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    \n    if len(list1) % 2 == 0:\n        lst1 = list(list1)\n        lst2 = []\n        lst3 = []\n        index = 0\n        while index < len(lst1):\n            if lst1[index] not in lst3:\n                lst3.append(lst1[index])\n            if lst1[index+1] not in lst3:\n                lst3.append(lst1[index+1])\n            index += 1\n        return [lst1] + [lst3]\n    \n    else:\n        lst1 = list(list1)\n        lst2 = []\n        lst3 = []\n        index = 0\n        while index < len(lst1):\n            if lst1[index] not in lst2:\n                lst2.append(lst1[index])\n            if lst1[index+1] not in lst2:\n                lst2.append(lst1[index+1])\n            index += 1\n        return [lst1] + [lst2] + [lst3]\n",
        "num_ids": 308
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_unpack = list(zip(*groupby(list1)))\n    return list(zip(*list_unpack))\n",
        "num_ids": 31
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    num_lists = {}\n    for i in list1:\n        if i in num_lists:\n            num_lists[i] += 1\n        else:\n            num_lists[i] = 1\n    return num_lists\n",
        "num_ids": 56
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i in count.keys():\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Initialize an empty dictionary.\n    dictionary = {}\n    #Iterate through the input list.\n    for i in range(len(list1)):\n        #If the list is not a tuple, copy it to a list.\n        if not isinstance(list1[i], tuple):\n            list1[i] = [list1[i]]\n        #Create a tuple.\n        elif list1[i] not in dictionary:\n            dictionary[list1[i]] = 0\n        #If the value of the tuple is the same as the number of elements in the list, add it to the current count.\n        else:\n            dictionary[list1[i]] += 1\n    return dictionary\n",
        "num_ids": 165
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dict = {}\n    for sublist in list1:\n        if type(sublist)!= tuple:\n            sublist = (sublist,)\n        for item in sublist:\n            if item in my_dict:\n                my_dict[item] = my_dict[item] + 1\n            else:\n                my_dict[item] = 1\n    return my_dict\n",
        "num_ids": 92
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            my_dict[list1[i]] = my_dict.get(list1[i], 0) + 1\n    return my_dict\n",
        "num_ids": 72
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Start writing your code here\n    dict = {}\n    for x in list1:\n        if x in dict:\n            dict[x] = dict[x] + 1\n        else:\n            dict[x] = 1\n    print(dict)\n    return dict\n    ",
        "num_ids": 66
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    i = 0\n    d = {}\n    while i < len(list1):\n        j = 0\n        k = 0\n        while j < len(list1):\n            if list1[j] in d:\n                d[list1[j]] += 1\n            else:\n                d[list1[j]] = 1\n            j += 1\n        i += 1\n        k += 1\n    return d\n    pass\n",
        "num_ids": 101
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # YOUR CODE HERE\n    # PUT YOUR CODE HERE\n    d = {}\n    for i in list1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n",
        "num_ids": 58
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TODO: Replace this with a faster way of counting unique lists and dictionary\n    # Create a new dictionary of all lists by removing duplicates\n    # Convert all lists in dictionary to tuple\n    # Create a dictionary of lists by removing duplicate tuples from tuple\n    # Return number of unique lists and dictionary\n    dict1 = {}\n    for i in list1:\n        # convert tuple to list\n        list2 = list(tuple(i))\n        # remove duplicates from list\n        list2 = list(dict.fromkeys(list2))\n        # convert list to tuple\n        tuple2 = tuple(list2)\n        # add tuple to dictionary\n        dict1.update({tuple2: len(list2)})\n",
        "num_ids": 167
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    if len(list1)==0:\n        return dict\n    else:\n        for i in range(0,len(list1)):\n            a = list1[i]\n            if a in dict:\n                dict[a] = dict[a] + 1\n            else:\n                dict[a] = 1\n    return dict",
        "num_ids": 85
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 1:\n        return test_list\n    elif len(test_list) == 2:\n        return [test_list[0] + test_list[1]]\n    else:\n        return [list(i) for i in combinations(test_list,2)]\n",
        "num_ids": 73
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of possible tuples\n    # the tuple is generated by multiplying the list by 2\n    combinations = combinations(test_list, 2)\n    return combinations\n",
        "num_ids": 42
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n=len(test_list)\n    result = list()\n    # Create a list of all possible tuples from a given set of tuples\n    for i in range(1, n+1):\n        temp=[]\n        for j in range(n):\n            temp.append(tuple(test_list[j]))\n        result.append(temp)\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    def helper(i):\n        if i == len(test_list):\n            return None\n        else:\n            num = test_list[i]\n            remainder = i+1\n            if remainder >= len(test_list):\n                remainder = remainder - len(test_list)\n            # check if the sum of two elements\n            if sum(test_list[i:remainder]) + num in test_list:\n                test_list[i:remainder] = test_list[i:remainder] + [sum(test_list[i:remainder]) + num]\n                helper(i+1)\n            # check if the sum of two elements\n            else:\n                test_list[i:remainder] = test_list[i:remainder] + [num]\n                helper(i+1)\n",
        "num_ids": 215
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Build combinations\n    combinations_array = []\n    for element in test_list:\n        # Combine all pairs\n        combinations_array.append((element[0],element[1]))\n    # Sort by sum\n    combinations_array = sorted(combinations_array,key=lambda x: x[0]+x[1])\n    # Remove duplicates\n    combinations_array = list(set(combinations_array))\n    \n    return combinations_array\n    ",
        "num_ids": 114
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # input:\n    # list = ['a','b','c','d','e','f','g','h','i','j']\n    # result:\n    # [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"c\",\"f\",\"e\",\"g\",\"h\",\"i\",\"j\",\"h\"]\n    \n    def combinations_with_tuple(nums):\n        '''\n        nums = []\n        nums.append('a')\n        nums.append('b')\n        nums.append('c')\n        nums.append('d')\n        nums.append('e')\n        nums.append('f')\n        nums.append('g')\n        nums.append('h')\n        nums.append('i')\n        nums.append('j')\n        '''\n        res = []\n        for i in range(1,nums+1):\n            for j in combinations(nums,i):\n                res.append(j)\n        return res\n    \n    if len(test_list) < 1:\n        raise ValueError\n    \n    if len(test_list) > 1:\n        return sorted(list(set(map(lambda x: list(x),test_list))))\n    \n    if test_list[0]!= '0':\n        raise ValueError\n    \n    if test_list[0] == '0':\n        return [list(x) for x in combinations(test_list, 2)]\n    \n    if test_list[0] == '1':\n        return sorted(list(set(map(lambda x: list(x),test_list))))\n",
        "num_ids": 192
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    test_list.sort()\n    sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            sums.append(test_list[i] + test_list[j])\n    \n    return sums\ndef is_valid_sums(test_list):\n    '''\n    Given a list of tuples of size 2 and one number x, return True if the list is valid, False otherwise.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] + test_list[j] == x:\n                return True\n    return False\ndef a_star(graph,start,end):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n    return False\ndef check_path(path,goal):\n    '''\n    Given a path from start to end, return True if the path is a valid path, False otherwise.\n    '''\n    \n    for i in range(len(path)-1):\n        if path[i]!= path[i+1]:\n            return False\n    return True\ndef print_path(path):\n    '''\n    Print a list of all the nodes visited in the path.\n    '''\n    \n    if path:\n        print(path)\n        print(\" \")\n    else:\n        print(\"Path is empty\")\ndef a_star_old(graph,start,end):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n    return False\ndef a_star_old_cost_of_path(graph,start,end,cost):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n                cost += 1\n    return False\ndef a_star_path(graph,start,end):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n    return False\ndef a_star_path_cost(graph,start,end):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n    return False\ndef a_star_path_old(graph,start,end):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n    return False\ndef a_star_path_cost_old(graph,start,end):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n    return False\ndef a_star_path_random(graph,start,end):\n    '''\n    Given a graph and a starting point, return a path from the starting point to the end point, or an empty path if there is not a possible path.\n    '''\n    \n    if not graph[start]:\n        return []\n    visited = []\n    path = []\n    \n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            path.append(node)\n    \n    while path:\n        current = path.pop()\n        \n        if current == end:\n            return path\n        \n        for next_node in graph[current]:\n            if next_node not in visited:\n                visited.append(next_node)\n                path.append(next_node)\n    return False\ndef remove_duplicate_indices(arr):\n    '''\n    Given an unsorted array of integers, return a new array such that each element at index i of the original array is equal to the product of all the elements to its left, and each element to its right.\n    '''\n    \n    if not arr:\n        retur",
        "num_ids": 13
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #build a dictionary for all possible sums with tuples\n    #Note: use a dictionary with the key as the tuple and the value is the number of combinations\n    all_combinations = {}\n    for numbers in test_list:\n        for tuple in combinations(numbers, 2):\n            all_combinations[tuple] = all_combinations.get(tuple, 0) + 1\n    return all_combinations\n",
        "num_ids": 98
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_lst = []\n    for i in test_list:\n        comb_lst.append(i)\n    comb_lst.sort()\n    comb_lst.sort(reverse=True)\n    return comb_lst\n",
        "num_ids": 59
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = set(test_list)\n    res = []\n    for i in test_list:\n        for j in combinations(test_list, i+1):\n            res.append(j)\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2 \n    sum_of_divisors = 0\n    while (i * i <= n) :\n        if (n % i == 0) :\n            sum_of_divisors += i \n        i += 1\n    if (sum_of_divisors == n) :\n        return True\n    else :\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Your code here\n    count=0\n    i=0\n    while i<n:\n        if (n%i)==0:\n            count+=1\n        i+=1\n    if count==2:\n        return True\n    else:\n        return False\ndef can_be_palindrome(s):\n    '''\n    Given an input string s and a string t of length at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    s=s.lower()\n    t=t.lower()\n    i=0\n    j=len(s)-1\n    l=len(t)\n    while i<=j:\n        if s[i]!=t[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef can_be_palindrome_alternative(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef is_palindrome_alternative(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    s=s.lower()\n    t=t.lower()\n    i=0\n    j=len(s)-1\n    l=len(t)\n    while i<=j:\n        if s[i]!=t[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome_alternative_2(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef is_palindrome_alternative_3(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\ndef is_palindrome_alternative_4(s):\n    '''\n    Given a string s and a string t of at most 2, check whether t is a palindrome.\n    '''\n    # Your code here\n    if can_be_palindrome(s):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 2) : \n        return True\n    elif (n == 3) : \n        return False\n    elif (n == 4) : \n        return True\n    elif (n % 2 == 0) : \n        return False\n    else : \n        return False\ndef fib(n) : \n    '''\n    Write a Python function that returns the nth fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0 : \n        return 0\n    elif (n == 1) : \n        return 1\n    else : \n        return fib(n-1) + fib(n-2)\ndef is_prime(n) :\n    '''\n    write a python function to check whether an integer is prime.\n    https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-11.php\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef factorial(n) : \n    '''\n    Write a python function that calculates the factorial of a positive integer.\n    https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-20.php\n    '''\n    if n == 0 : \n        return 1\n    elif n == 1 : \n        return n\n    elif n == 2 : \n        return n\n    elif n < 2 : \n        return n\n    else : \n        a = 1\n        for i in range(1, n+1) : \n            a *= i\n        return a\ndef is_prime_iterative(n) : \n    '''\n    Write a python function that checks whether a number is prime. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0 : \n        return False\n    if n == 1 : \n        return True\n    if n < 2 : \n        return False\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef is_prime_recursive(n) : \n    '''\n    Write a python function that checks whether a number is prime. \n    https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-11.php\n    '''\n    if n == 0 : \n        return False\n    if n == 1 : \n        return True\n    if n < 2 : \n        return False\n    if n%2 == 0 : \n        return False\n    if n%3 == 0 : \n        return False\n    if n%5 == 0 : \n        return False\n    for i in range(4, n//2+1, 2) : \n        if n%i == 0 : \n            return False\n    return True\ndef is_prime_recursive(n) : \n    '''\n    Write a python function that checks whether a number is prime. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0 : \n        return False\n    if n == 1 : \n        return True\n    if n < 2 : \n        return False\n    if n%2 == 0 : \n        return False\n    if n%3 == 0 : \n        return False\n    if n%5 == 0 : \n        return False\n    for i in range(6, n//2+1, 2) : \n        if n%i == 0 : \n            return False\n    return True\ndef is_prime_iterative(n) : \n    '''\n    Write a python function that checks whether a number is prime. \n    https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-11.php\n    '''\n    if n == 0 : \n        return False\n    if n == 1 : \n        return True\n    if n < 2 : \n        return False\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef lcm(n1, n2) : \n    '''\n    Write a python function that returns the largest common multiple of two positive integers. \n    https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-20.php\n    '''\n    if n1 == n2 : \n        return n1\n    if (n1 < n2) : \n        lcm = n1 \n        while(n1 % n2!= 0) : \n            n1 = n1 // n2 \n            lcm = n1 \n        return lcm\n    else : \n        lcm = n2 \n        while(n2 % n1!= 0) : \n            n2 = n2 // n1 \n            lcm = n2 \n        return lcm\ndef lcm_iterative(n1, n2) : \n    '''\n    Write a python function that returns the largest common multiple of two positive integers. \n    https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-20.php\n    '''\n    lcm = 0\n    while(n1!= n2) : \n        if n1 > n2 : \n            lcm = lcm + n1 \n            n1 = n1 - n2 \n        else : \n            lcm = lcm + n2 \n            n2 = n2 - n1 \n    return lcm\ndef calc_pow(n, power) : \n    '''\n    Write a python function that calculates the power of a number. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0 : \n        return 0\n    if power == 0 : \n        return 1\n    if power < 0 : \n        return 0\n    if n < 0 : \n        return 0\n    if n % 2 == 0 : \n        return 1\n    elif n%2 == 1 : \n        return n**power\n    if n%2 == 1 : \n        return 1\n    elif n%2 == 0 : \n        return n**power\ndef is_prime(n) : \n    '''\n    Write a python function that checks whether a number is prime. \n    https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-11.php\n    '''\n    if n == 0 : \n        return False\n    if n == 1 : \n        return True\n    if n < 2 : \n        return False\n    if n%2 == 0 : \n        return False\n    if n%3 == 0 : \n        return False\n    if n%5 == 0 : \n        return False\n    for i in range(4, n//2+1, 2) : \n        if n%i == 0 : \n            return False\n    return True\ndef is_prime_iterative(n) : \n    '''\n    Write a python function that checks whether a number is prime. \n    https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-11.php\n    '''\n    if n == 0 : \n        return False\n    if n == 1 : \n        return True\n    if n < 2 : \n        return False\n    if n%2 == 0 : \n        return False\n    if n%3 == 0 : \n        return False\n    if n%5 == 0 : \n        return False\n    for i in range(6, n//2+1, 2) : \n        if ",
        "num_ids": 102
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=0\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    if len(divisors)==2:\n        return f\"{n} is divisible by {divisors[0]} and {divisors[1]}\"\n    elif len(divisors)==3:\n        return f\"{n} is divisible by {divisors[0]} and {divisors[2]}\"\n    else:\n        return f\"{n} is divisible by {divisors[0]} and {divisors[1]}\"\n    \ndef find_invalid_divisors(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    i=0\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\ndef find_invalid_divisors_2(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\ndef find_invalid_divisors_3(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\ndef find_invalid_divisors_4(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\ndef find_invalid_divisors_5(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\ndef find_invalid_divisors_6(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\ndef find_invalid_divisors_7(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\ndef find_invalid_divisors_8(n) : \n    '''\n    Write a python function to find all the divisors of the given number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i == i:\n                divisors.append(n/i)\n    return divisors\n",
        "num_ids": 76
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return 0\n    else :\n        count = 0\n        for i in range(1, int(math.sqrt(n)+1)) :\n            if n % i == 0 :\n                count += 1\n                if count == 2 :\n                    return count\n        return count\n",
        "num_ids": 72
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n > 0) :\n        for i in range(1, n//2 + 1) :\n            if n % i == 0 :\n                return(False)\n    return(True)\n",
        "num_ids": 48
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n%2 == 0 : \n        return True\n    else : \n        return False\ndef get_divisors(n) : \n    '''\n    Given a positive integer N, \n    a function that returns the number of divisors of N. \n    '''\n    if count_divisors(n) : \n        return math.factorial(n)\n    else : \n        return -1\ndef sum_divisors(n) : \n    '''\n    Given a positive integer N, \n    a function that returns the sum of all divisors of N. \n    '''\n    return get_divisors(n) + get_divisors(n-1) + get_divisors(n-2) + get_divisors(n-3) + get_divisors(n-4) + get_divisors(n-5) + get_divisors(n-6) + get_divisors(n-7) + get_divisors(n-8) + get_divisors(n-9) + get_divisors(n-10)\ndef is_palindrome(x) :\n    '''\n    Given an integer x, \n    a function that returns True if x is palindrome.\n    '''\n    if x < 0 : \n        return False\n    else : \n        while x > 0 : \n            x = x // 10\n            if x < 10 : \n                return True\n            else : \n                return False\n",
        "num_ids": 55
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0 :\n            divisors.append(i)\n    return divisors\n",
        "num_ids": 57
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    while i < n : \n        if n % i == 0 : \n            return False\n        i += 1\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for div in range(1, int(math.sqrt(n))+1):\n        if n % div == 0:\n            divisors.append(div)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_length = []\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            even_length.append(arr[i])\n    sum = 0\n    for i in range(len(even_length)-1):\n        sum+=even_length[i]\n    return sum\n",
        "num_ids": 79
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_length = 0\n    odd_length = 0\n    for i in range(len(arr)):\n        if(i % 2 == 0):\n            even_length += arr[i]\n        else:\n            odd_length += arr[i]\n",
        "num_ids": 62
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr)):\n        if arr[i]%2==0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            total += arr[i]\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            s+=arr[i]\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(0,len(arr),2):\n        if i+1>len(arr):\n            break\n        else:\n            odd_sum += arr[i] + arr[i+1]\n    return odd_sum\n",
        "num_ids": 65
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd = 0\n    if len(arr) % 2!= 0:\n        return odd\n",
        "num_ids": 24
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n    for i in range(0,len(arr)-2):\n        if arr[i]%2:\n            sum_of_odd_length_subarrays += arr[i]\n    return sum_of_odd_length_subarrays\n",
        "num_ids": 74
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_ = 0\n    for index in range(0, len(arr), 2):\n        sum_ += arr[index]\n    return sum_\n",
        "num_ids": 37
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(1,len(arr)+1):\n        result = result + arr[i-1]\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    r1 = r * 6.0 / 255.0\n    g1 = g * 6.0 / 255.0\n    b1 = b * 6.0 / 255.0\n    v1 = 0.0\n    v2 = 0.0\n    c1 = 0.0\n    c2 = 0.0\n    if r1 < 1.0:\n        c1 = 0.0\n    else:\n        c1 = (1.0 - r1) * 6.0 / 255.0\n    if g1 < 1.0:\n        c2 = 0.0\n    else:\n        c2 = (1.0 - g1) * 6.0 / 255.0\n    if b1 < 1.0:\n        v1 = 0.0\n    else:\n        v1 = (1.0 - b1) * 6.0 / 255.0\n    if r1 > 1.0:\n        v2 = (1.0 - r1) * 6.0 / 255.0\n    else:\n        v2 = 0.0\n    s = v1 + v2\n    h = c1 + c2\n    h = max(min(h, 1.0), 0.0)\n    f = c2 - c1\n    if f == 0:\n        s = 0.0\n    else:\n        f = min(f, 1.0)\n        s = 1.0 - f * (1.0 - c2) / (c1 - c2)\n    if h == 0:\n        h = 1.0\n    else:\n        h = max(min(h, 1.0), 0.0)\n        h = (1.0 - f) * (1.0 - c1) / (c2 - c1) + h\n    return hsv_to_rgb(h, s, v1)\n",
        "num_ids": 460
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = (r / 255.0) * 1.0\n    g = (g / 255.0) * 1.0\n    b = (b / 255.0) * 1.0\n",
        "num_ids": 47
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #colors = {'red': (255, 0, 0),\n    #          'green': (0, 255, 0),\n    #          'blue': (0, 0, 255),\n    #          'yellow': (0, 255, 255)}\n    #\n    #return colors[colour]\n",
        "num_ids": 72
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0.0\n    s = 0.0\n    v = 0.0\n",
        "num_ids": 23
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb = r, g, b\n    r = rgb[0] / 255.0\n    g = rgb[1] / 255.0\n    b = rgb[2] / 255.0\n    #saturation\n    s =.299 * r +.587 * g +.114 * b\n    #value\n    v =.224 * r +.485 * g +.229 * b\n    # hue\n    h = np.arctan2(s, v)\n    if h < 0.0:\n        h += 2.0 * np.pi\n    elif h >.5:\n        h -= 2.0 * np.pi\n    return h, s, v\n",
        "num_ids": 160
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = float(r)\n    s = float(g)\n    v = float(b)\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    r = max_r - min_r\n    s = (s + 1.0) / 2.0\n    v = (v + 1.0) / 2.0\n    max_h = max(max_r, max_g, max_b)\n    min_h = min(min_r, min_g, min_b)\n    max_h = (max_h * 0.0009) + (0.0029 * min_h)\n    min_h = (min_h * 0.0039) + (0.0035 * min_h)\n    h = (min_h + max_h) / 2.0\n    s = (min_h + max_h) / 2.0\n    v = (min_h + max_h) / 2.0\n    if max_h < 0.2 or max_h > 1.0:\n        h = max(h, 0.0)\n    if min_h < 0.2 or min_h > 1.0:\n        h = max(h, 0.0)\n    if max_r < 0.2 or max_r > 1.0:\n        r = max(r, 0.0)\n    if min_r < 0.2 or min_r > 1.0:\n        r = max(r, 0.0)\n    if max_g < 0.2 or max_g > 1.0:\n        g = max(g, 0.0)\n    if min_g < 0.2 or min_g > 1.0:\n        g = max(g, 0.0)\n    if max_b < 0.2 or max_b > 1.0:\n        b = max(b, 0.0)\n    if min_b < 0.2 or min_b > 1.0:\n        b = max(b, 0.0)\n    max_hsv = h + (s * 0.75) + (v * 0.33)\n    min_hsv = h - (s * 0.75) - (v * 0.33)\n    if min_hsv < 0.0:\n        min_hsv = min_hsv * -1.0\n    if max_hsv > 1.0:\n        max_hsv = max_hsv * -1.0\n    hsv = max_hsv + min_hsv\n    if hsv < 0.0:\n        hsv = hsv * -1.0\n    if hsv > 1.0:\n        hsv = hsv * -1.0\n    return hsv, h, s, v\n",
        "num_ids": 661
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # RGB\n    if not isinstance(r, (int, float)):\n        raise TypeError('r must be numeric')\n    if not isinstance(g, (int, float)):\n        raise TypeError('g must be numeric')\n    if not isinstance(b, (int, float)):\n        raise TypeError('b must be numeric')\n",
        "num_ids": 84
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    try:\n        max_r = max(r)\n        max_g = max(g)\n        max_b = max(b)\n        min_r = min(r)\n        min_g = min(g)\n        min_b = min(b)\n",
        "num_ids": 66
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R, G, B = r, g, b\n    max_val = max(R, G, B)\n    min_val = min(R, G, B)\n    if max_val == 0:\n        max_val = max_val * 0.3\n    if min_val == 0:\n        min_val = min_val * 0.3\n",
        "num_ids": 87
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0:\n        h = 0\n        s = 0\n        v = 0\n    else:\n        h = float(r)/255\n        s = float(g)/255\n        v = float(b)/255\n",
        "num_ids": 55
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    s = 1\n    for el in list1:\n        if el % 2 == 0:\n            s *= el\n        else:\n            s *= el\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        even = list1[::2]\n        odd = list1[1::2]\n    else:\n        even = list1[1::2]\n        odd = list1[::2]\n    print(even)\n    print(odd)\n    return even + odd\n",
        "num_ids": 79
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    product = 1\n    for i in list1:\n        product *= i\n    \n    return product\n    \n    ",
        "num_ids": 32
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    '''\n    Example:\n    Given the array [2, 3, 5, 8, 13], the function should return 32.\n    '''\n    '''\n    Time Complexity - O(n)\n    Space Complexity - O(1)\n    '''\n    total = 0\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            total = total + num\n            count += 1\n    if count % 2 == 0:\n        total = total + list1[0]\n    return total\n",
        "num_ids": 65
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        prod = prod * i\n    return prod\n",
        "num_ids": 28
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    answer = 1\n    for i in list1:\n        if i % 2 == 0:\n            answer = answer * i\n        else:\n            answer = answer * i\n    return answer\n",
        "num_ids": 46
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)<2:\n        print('The list is empty.')\n        return\n    else:\n        num=list1[0]\n        if num%2==0:\n            return num*mul_even_odd(list1[1:])\n        else:\n            return num*mul_even_odd(list1[1:])*2\n        \n    \n    \n",
        "num_ids": 96
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd_list = []\n    \n    for i in list1:\n        if i%2 == 0:\n            even_odd_list.append(i)\n        else:\n            even_odd_list.append(i*2)\n    \n    return even_odd_list\n",
        "num_ids": 70
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list_len = len(list1)\n    if list_len % 2 == 0:\n        return list1[0] * list1[1]\n    else:\n        return list1[0] * list1[list_len // 2]\n",
        "num_ids": 60
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    res=1\n    for i in range(len(list1)):\n        if i%2==0:\n            res=res*list1[i]\n        else:\n            res=res*list1[i]\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = tuple(map(int, test_str.split(\",\")))\n    return test_str\n",
        "num_ids": 28
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, tuple):\n        return tuple(map(int, test_str))\n    else:\n        raise Exception('Needs a tuple argument.')\n",
        "num_ids": 43
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_tuple = []\n    for i in test_str:\n        temp_tuple.append(i)\n    return temp_tuple\n",
        "num_ids": 37
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n    # return tuple(map(str.atoi, test_str))\n    # return tuple(map(str.lower, test_str))\n",
        "num_ids": 48
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = test_str.split(',')\n    return(tuple(map(int, test_tuple)))\n",
        "num_ids": 33
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str[0] == '(':\n        test_str = test_str[1:-1].replace(')', '')\n        if test_str[-1] == ')':\n            test_str = test_str[:-1]\n        else:\n            test_str = test_str[1:-1]\n        try:\n            int_test = int(test_str)\n        except:\n            return None\n    else:\n        int_test = None\n    return int_test\n",
        "num_ids": 120
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n",
        "num_ids": 15
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}')\n    t = [int(a) for a in test_str.split(',')]\n    return t\n",
        "num_ids": 65
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if len(test_str) == 1:\n        return eval(test_str)\n    else:\n        return tuple(map(tuple_str_int, test_str))\n    \ndef tuple_str_int_2(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if len(test_str) == 1:\n        return eval(test_str)\n    else:\n        return tuple(map(tuple_str_int_2, test_str))\n",
        "num_ids": 47
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    if i == 0:\n        return 0\n    else:\n        return i - 1\n",
        "num_ids": 39
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    pivot = a[0]\n    if pivot >= x:\n        return 0\n    if pivot == x:\n        return 0\n    i = 1\n    while i <= len(a)-1:\n        if a[i] > pivot:\n            a[i] = pivot\n            i += 1\n        elif a[i] < pivot:\n            i += 1\n            a[i] = a[i-1]\n        else:\n            i += 1\n    return len(a)\n",
        "num_ids": 131
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # For each value, iterate through the sorted array.\n    for i in range(len(a)):\n        # The leftmost element at the time of iteration is the minimum of the next value and the index of the current value.\n        # As a single value is less than the current element, this value will be the smallest.\n        if a[i] < a[i+1]:\n            return i+1\n        # If the current element is larger than the smallest element, then replace it with it.\n        elif a[i] > a[i+1]:\n            a[i+1], a[i] = a[i], a[i+1]\n    # The rightmost element is the first element.\n    return 0\n",
        "num_ids": 170
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "num_ids": 17
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return len(a) + 1\n    if x < a[0]:\n        return len(a)\n    for i in range(len(a) - 1, -1, -1):\n        if a[i] < x:\n            return i\n    return len(a) + 1\n",
        "num_ids": 80
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    return left\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] < x:\n        i = bisect.bisect_left(a, x)\n    else:\n        i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 81
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x > a[len(a)-1]:\n        #base case\n        return len(a)-1\n    else:\n        #iterative case\n        i = bisect.bisect_left(a, x)\n        return i\n",
        "num_ids": 58
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 32
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text_regex = \"a(?P<a>b)\"\n    return re.search(text_regex, text)\n",
        "num_ids": 33
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'(?<=\\s)\\s*(a|b)\\s*\\w*\\s*$')\n    if not pattern.match(text):\n        return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.lower().startswith('a') and re.search(r'\\w{3}\\b', text)\n",
        "num_ids": 31
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall('a[0-9]+b',text)\n    for match1 in match:\n        if match1.start() > 0:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #split the string\n    text = text.split()\n    \n    #find the length of the text\n    pattern = '[a-zA-Z]*[a-zA-Z]+[a-zA-Z]+[a-zA-Z]+[a-zA-Z]+[a-zA-Z]+'\n    length = len(pattern)\n    #the pattern is valid, so if it matches we return that pattern\n    #if not, we want to return a match to all the preceding letters\n    for a in range(length):\n        if re.search(pattern,text,re.IGNORECASE):\n            return True\n    return False\n",
        "num_ids": 157
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.match('(?i)a (?P<name>[a-z]+)', text)\n    if match:\n        return match.group('name')\n",
        "num_ids": 43
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Initialize regex\n    regex = re.compile(r'a+b')\n    \n    # Loop through and match text\n    match = re.findall(regex, text)\n    \n    # Print results\n    for match in match:\n        print(match)\n    \nif __name__ == \"__main__\":\n    text_match_three(\"Hello World\")\n    text_match_three(\"Hello World Good Bye\")\n    text_match_three(\"I'm Silly\")\n    text_match_three(\"It's amazing\"",
        "num_ids": 129
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if text == 'ab' or text == 'a':\n        return 'ab'\n    elif text == 'ab':\n        return 'ab'\n    else:\n        return 'a'\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a five followed by 'e'.\n    '''\n    if text == 'a5' or text == 'a5e':\n        return 'a5e'\n    elif text == 'a5':\n        return 'a5'\n    else:\n        return '5'\n        \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five followed by 'i'.\n    '''\n    if text == '5i':\n        return '5i'\n    elif text == '5':\n        return '5'\n    else:\n        return '5'\n        \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a six followed by 'o'.\n    '''\n    if text == '6i' or text == '6':\n        return '6i'\n    elif text == '6':\n        return '6'\n    else:\n        return '6'\n        \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a seven followed by 'u'.\n    '''\n    if text == '7i' or text == '7':\n        return '7i'\n    elif text == '7':\n        return '7'\n    else:\n        return '7'\n        \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an eight followed by 'v'.\n    '''\n    if text == '8i' or text == '8':\n        return '8i'\n    elif text == '8':\n        return '8'\n    else:\n        return '8'\n        \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a nine followed by 'w'.\n    '''\n    if text == '9i' or text == '9':\n        return '9i'\n    elif text == '9':\n        return '9'\n    else:\n        return '9'\n        \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has a zero followed by 'x'.\n    '''\n    if text == '0i' or text == '0':\n        return '0i'\n    elif text == '0':\n        return '0'\n    else:\n        return '0'\n        \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has a one followed by 'y'.\n    '''\n    if text == '1i' or text == '1':\n        return '1i'\n    elif text == '1':\n        return '1'\n    else:\n        return '1'\n        \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a two followed by 'z'.\n    '''\n    if text == '2i' or text == '2':\n        return '2i'\n    elif text == '2':\n        return '2'\n    else:\n        return '2'\n        \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a three followed by 'a'.\n    '''\n    if text == '3i' or text == '3':\n        return '3i'\n    elif text == '3':\n        return '3'\n    else:\n        return '3'\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a four followed by 'i'.\n    '''\n    if text == '4i' or text == '4':\n        return '4i'\n    elif text == '4':\n        return '4'\n    else:\n        return '4'\n        \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a five followed by 'o'.\n    '''\n    if text == '5i' or text == '5':\n        return '5i'\n    elif text == '5':\n        return '5'\n    else:\n        return '5'\n        \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a six followed by 'u'.\n    '''\n    if text == '6i' or text == '6':\n        return '6i'\n    elif text == '6':\n        return '6'\n    else:\n        return '6'\n        \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a seven followed by 'v'.\n    '''\n    if text == '7i' or text == '7':\n        return '7i'\n    elif text == '7':\n        return '7'\n    else:\n        return '7'\n        \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an eight followed by 'w'.\n    '''\n    if text == '8i' or text == '8':\n        return '8i'\n    elif text == '8':\n        return '8'\n    else:\n        return '8'\n        \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a nine followed by 'x'.\n    '''\n    if text == '9i' or text == '9':\n        return '9i'\n    elif text == '9':\n        return '9'\n    else:\n        return '9'\n        \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has a zero followed by 'y'.\n    '''\n    if text == '0i' or text == '0':\n        return '0i'\n    elif text == '0':\n        return '0'\n    else:\n        return '0'\n        \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has a one followed by 'z'.\n    '''\n    if text == '1i' or text == '1':\n        return '1i'\n    elif text == '1':\n        return '1'\n    else:\n        return '1'\n        \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a two followed by 'a'.\n    '''\n    if text == '2i' or text == '2':\n        return '2i'\n    elif text == '2':\n        return '2'\n    else:\n        return '2'\n        \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a three followed by 'i'.\n    '''\n    if text == '3i' or text == '3':\n        return '3i'\n    elif text == '3':\n        return '3'\n    else:\n        return '3'\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a four followed by 'o'.\n    '''\n    if text == '4i' or text == '4':\n        return '4i'\n    elif text == '4':\n        return '4'\n    else:\n        return '4'\n        \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a five followed by 'u'.\n    '''\n    if text == '5i' or text == '5':\n        return '5i'\n    elif text == '5':\n        return '5'\n    else:\n        return '5'\n        \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a six followed by 'v'.\n    '''\n    if text == '6i' or text == '6':\n        return '6i'\n    elif text == '6':\n        return '6'\n    else:\n        return '6'\n        \ndef text_match_seven(tex",
        "num_ids": 59
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # TODO: Create regular expression\n    pattern = r'a(b)'\n    # TODO: Regex match for pattern\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\ndef test_text_match():\n    '''\n    Test your code on this function.\n    '''\n    assert text_match_three(\"aabb\") == True\n    assert text_match_three(\"aabbbcc\") == False\n    assert text_match_three(\"aabbbccd\") == True\n",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall('[ab]', text)\n    if match:\n        return match\n    else:\n        return 'No match'\n",
        "num_ids": 37
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = []\n    for i in range(len(test_str)):\n        tuple_list.append(test_str[i])\n    tuple_tuple = tuple(tuple_list)\n    return tuple_tuple\n",
        "num_ids": 61
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.replace(' ', '')\n    test_list = test_list.replace('(', '')\n    test_list = test_list.replace(')', '')\n    test_list = test_list.replace(')', '')\n    test_list = test_list.replace('(', '')\n    return tuple(test_list.split(','))\n",
        "num_ids": 94
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not test_list:\n        raise TypeError(\"Empty tuple\")\n    elif not test_str:\n        raise ValueError(\"Empty string\")\n    else:\n        return tuple(test_list) + (test_str,)\n",
        "num_ids": 56
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2009
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = (test_list, test_str)\n    return test_tuple\n",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_list)\n    return test_tuple\n",
        "num_ids": 22
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_str) is not tuple:\n        raise TypeError(\"Input is not a tuple\")\n    elif len(test_str)!= len(test_list):\n        raise ValueError(\"Length of tuples does not match number of elements\")\n    elif test_str == []:\n        return ()\n    else:\n        return (test_str, test_list)\n",
        "num_ids": 91
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = ()\n    for char in test_str:\n        tup = tup + (char,)\n    return tup\n",
        "num_ids": 33
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(eval, test_list))\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([test_list[i:i+len(test_str)] for i in range(0, len(test_list), len(test_str))])\n    \ntest_list = ['pig', 'cat', 'dog', 'rat', 'rabbit']\ntest_str = 'catdog'\n",
        "num_ids": 74
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = 0\n    for num in nums:\n        if (num % 2) == 0:\n            even += 1\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = []\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            even.append(nums[i])\n    return even == [0] * len(even)\n",
        "num_ids": 58
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for index in range(0, len(nums), 2):\n        if index % 2 == 0:\n            evens.append(nums[index])\n    return evens == evens[::-1]\n",
        "num_ids": 58
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = [num for num in nums if num % 2 == 0]\n    print(evens)\n",
        "num_ids": 28
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        for i in range(len(nums)//2):\n            if nums[i] % 2 == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for i in range(len(nums)):\n        if i%2 == 0:\n            even_numbers.append(nums[i])\n    print(even_numbers)\n    if len(even_numbers) == 0:\n        return False\n    else:\n        for num in even_numbers:\n            if num % 2!= 0:\n                return False\n        return True\n",
        "num_ids": 104
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Your code here\n    count=0\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            count=count+1\n    if count==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    i = 0\n    while i < len(test_tup):\n        if isinstance(test_tup[i][0], tuple):\n            test_tup.pop(i)\n            i -= 1\n        i += 1\n    return test_tup\n",
        "num_ids": 64
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        head, tail = test_tup\n        return remove_nested((tail, head))\n",
        "num_ids": 50
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[1]\n",
        "num_ids": 12
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda a: a!= (0,), test_tup))\n",
        "num_ids": 24
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(None, test_tup))\n",
        "num_ids": 16
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_list = []\n    for item in test_tup:\n        tup_list.append(item)\n    return tuple(tup_list)\n",
        "num_ids": 41
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = test_tup\n    for i in range(len(tup)-1, -1, -1):\n        if tup[i] == (\"Petr\",):\n            tup.remove(tup[i])\n            break\n    else:\n        print(\"The tuple is empty\")\n        return\n    for i in range(len(tup)-1, -1, -1):\n        if tup[i] == (\"Petr\",):\n            tup.remove(tup[i])\n            break\n    else:\n        print(\"The tuple is empty\")\n        return\n    for i in range(len(tup)-1, -1, -1):\n        if tup[i] == (\"Petr\",):\n            tup.remove(tup[i])\n            break\n    else:\n        print(\"The tuple is empty\")\n        return\n    for i in range(len(tup)-1, -1, -1):\n        if tup[i] == (\"Petr\",):\n            tup.remove(tup[i])\n            break\n    else:\n        print(\"The tuple is empty\")\n        return\n    print(\"After removing the nested tuples\")\n    for i in range(len(tup)-1, -1, -1):\n        if tup[i] == (\"Petr\",):\n            tup.remove(tup[i])\n            break\n    else:\n        print(\"The tuple is empty\")\n        return\n    print(tup)\n    return \n",
        "num_ids": 358
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n",
        "num_ids": 12
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[1:]\n",
        "num_ids": 12
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    print(\"number of lists in a given number of lists:\")\n    lenght=len(input_list)\n    if lenght==0:\n        print(\"No List\")\n    else:\n        print(\"List\")\n        for i in range(lenght):\n            if type(input_list[i])==list:\n                print(input_list[i])\n                count_list(input_list[i])\n            else:\n                print(input_list[i])\n    return lenght\n",
        "num_ids": 122
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return input_list.count([])\n",
        "num_ids": 12
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Code here\n    total_list = 0\n    for i in input_list:\n        total_list += len(i)\n    return total_list\n",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    if len(input_list) == 0:\n        return 0\n    else:\n        for item in input_list:\n            if item.count('['):\n                list_count += 1\n            elif item.count(']'):\n                list_count -= 1\n        return list_count\n",
        "num_ids": 77
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i = 1\n    for i in range(len(input_list)):\n        print(i, input_list[i][0])\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list)):\n            if input_list[i][j] == 1:\n                result += 1\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    n = len(input_list)\n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 1\n        else:\n            return n + count_list(input_list[1:])\n    ",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) <= 0:\n        return \"Error\"\n",
        "num_ids": 20
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)",
        "num_ids": 10
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    if len(input_list) < 1:\n        print(\"No lists have been given.\")\n    elif len(input_list) == 1:\n        print(f'The list has only one element: {input_list}')\n    else:\n        for index, item in enumerate(input_list[1:]):\n            if type(item)!= list:\n                count += 1\n        print(f'The count of the number of elements is: {count}')\n    return count\n",
        "num_ids": 120
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def find(arr,n,x):\n        if (arr[n] == x):\n            return n\n        elif arr[n] > x:\n            return find(arr,0,x)\n        else:\n            return find(arr,n-1,x)\n",
        "num_ids": 67
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #elements in sorted array\n    arr_sort=list(arr)\n    #find the last element\n    l=0\n    for i in range(len(arr_sort)):\n        if arr_sort[i]<x:\n            l=i\n    if arr_sort[l]==x:\n        return l\n    else:\n        return -1\n",
        "num_ids": 88
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    if l<1:\n        return -1\n    if l==1:\n        return 0\n    p=arr[l-2]\n    if p>x:\n        return arr[l-2]\n    if p<x:\n        return arr[l-1]\n    if p==x:\n        return arr[l-1]\n    if p<x:\n        return arr[l-1]\n    else:\n        return arr[l-2]\n",
        "num_ids": 120
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    return arr.index(x)\n",
        "num_ids": 24
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\ndef search(arr,x):\n    '''\n    Write a python function to find the position of an element in a sorted array.\n    '''\n    pass\ndef merge(arr, l, m, r):\n    '''\n    Write a python function to merge the elements of arr[l..m] into a sorted array.\n    '''\n    pass\ndef merge_sort(arr, l, r):\n    '''\n    Write a python function to sort an array.\n    '''\n    if l < r:\n        mid = l + (r - l) // 2\n        arr[l], arr[mid] = arr[mid], arr[l]\n        arr[l + 1:r + 1] = merge(arr[l + 1:r + 1], l, mid, r)\n        arr[l], arr[mid] = arr[mid], arr[l]\n    pass\ndef partition(arr,l,r):\n    '''\n    Write a python function to sort an array.\n    '''\n    pass\ndef quick_sort(arr,l,r):\n    '''\n    Write a python function to sort an array.\n    '''\n    pass\ndef quick_sort_recursive(arr,l,r):\n    '''\n    Write a python function to sort an array.\n    '''\n    if l < r:\n        p = partition(arr,l,r)\n        quick_sort_recursive(arr,l,p-1)\n        quick_sort_recursive(arr,p+1,r)\n    pass\narr = [0,1,2,3,4,5,6,7,8,9]\nprint(arr)\nprint('sorted by default: ',sorted(arr))\nprint('sorted by elements: ',sorted(arr, key = last))\nprint('sorted by elements: ',sorted(arr, key = search))\nprint('sorted by elements: ',sorted(arr, key = search, reverse=True))\nprint('sorted by elements: ',sorted(arr, key = merge))\nprint('sorted by elements: ',sorted(arr, key = merge, reverse=True))\nprint('sorted by elements: ',sorted(arr, key = merge, reverse=True, safe=False))\nprint('sorted by elements: ',sorted(arr, key = merge, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = merge, reverse=True, safe=False, n=2, reverse=True))\nprint('sorted by elements: ',sorted(arr, key = merge, reverse=True, safe=False, n=2, reverse=True, safe=False))\nprint('sorted by elements: ',sorted(arr, key = quick_sort))\nprint('sorted by elements: ',sorted(arr, key = quick_sort, reverse=True))\nprint('sorted by elements: ',sorted(arr, key = quick_sort, reverse=True, safe=False))\nprint('sorted by elements: ',sorted(arr, key = quick_sort, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort, reverse=True, safe=False, n=2, reverse=True))\nprint('sorted by elements: ',sorted(arr, key = quick_sort, reverse=True, safe=False, n=2, reverse=True, safe=False))\nprint('sorted by elements: ',sorted(arr, key = quick_sort, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursive, reverse=True, safe=False, n=2, reverse=True, safe=False, n=2))\nprint('sorted by elements: ',sorted(arr, key = quick_sort_recursiv",
        "num_ids": 1708
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if len(arr) == 0:\n    #     return -1\n    # else:\n    #     i = len(arr) - 1\n    #     while i >= 0 and arr[i] <= x:\n    #         i -= 1\n    #     return i\n    return last(arr,arr[-1]-1)\n",
        "num_ids": 80
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return None\n    elif n==1:\n        return 0\n    elif x==arr[n-1]:\n        return n-1\n    else:\n        return n-1\n",
        "num_ids": 61
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # write your code here\n    n=len(arr)\n    if n==0:\n        return -1\n    return arr[n-1]\n",
        "num_ids": 38
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.search(r'a.+(?=b', text)\n    y = re.search(r'a.+(?=[^a])', text)\n    z = re.search(r'a.+(?=[^a])b', text)\n",
        "num_ids": 64
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text=text.lower()\n    final_text=\"\"\n    for i in text:\n        if i in ['a','b']:\n            final_text+=i\n            final_text+=\"a\"\n    return final_text\n",
        "num_ids": 56
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    begin_match = re.search('a', text)\n    if begin_match!= None:\n        end_match = re.search('b', text)\n        return end_match.start()\n    return 0\n",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.sub(r'([a-zA-Z]+)a([b-z]+)\\b',r'\\1b\\2',text)\n    text = re.sub(r'([a-zA-Z]+)b([a-z]+)\\b',r'\\1b\\2',text)\n    text = re.sub(r'([a-zA-Z]+)b\\b([a-z]+)\\b',r'\\1b\\2',text)\n    return text\n",
        "num_ids": 122
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    s = re.findall(r'\\s{2}a\\s{2}', text)\n    for s1 in s:\n        text = text.replace(s1, 'a')\n    return text\n",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_endb(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_a(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_a2(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b2(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_a2(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b2(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_a2(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_a2(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b2(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b2(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_a2(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b2(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b2(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_a2(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'b'.\n    '''\n    a = ['a','A','ab','AB']\n    text = text.upper()\n    for c in text:\n        if c in a:\n            start_a = a.index(c)\n            text = text[:start_a] + c + text[start_a+1:]\n            print(text)\n            break\n    return text\ndef text_start_end_b2(text):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a\\w+b', text)\n",
        "num_ids": 19
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile('^[a-zA-Z]+\\s[a-zA-Z]+\\s[0-9]+\\s[0-9]+$')\n    matches = pattern.finditer(text)\n    for match in matches:\n        yield match.group()\n    return\n",
        "num_ids": 76
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = []\n    result_list = []\n    word = re.split('\\w+', text)\n    \n    for word1 in word:\n        if word1[-1] == 'b':\n            result_list.append(word1)\n            \n    for i in range(0, len(result_list)):\n        if word_starta_endb(result_list[i]):\n            result_list[i] = re.sub(r'\\b\\w+\\b', 'b', result_list[i])\n        else:\n            result_list[i] = result_list[i] + 'a'\n    \n    return''.join(result_list)\n",
        "num_ids": 165
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2002
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict.values():\n        sum+=i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    res=0\n    for key, value in dict.items():\n        res+=value\n    return res\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict.values():\n        sum=sum+i\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #code here\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key,value in dict.items():\n        sum+=value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n    \n    \n    \n",
        "num_ids": 17
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    if(type(dict)!= dict):\n        raise TypeError(\"Input must be a dictionary.\")\n    if(type(dict) == dict):\n        for item in dict:\n            total = total + dict[item]\n    return total\n",
        "num_ids": 62
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    if n>=30000:\n        return sum_even(n) + sum_odd(n-1)\n    return sum_odd(n-1)\n",
        "num_ids": 52
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    a = 0\n    for i in range(l,r+1):\n        if i % 2!= 0:\n            a = a + i\n    return a\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0: \n        return 0\n    return (n * (n+1)//2) + sum_odd(n-1)\nprint(sum_odd(99)",
        "num_ids": 45
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    # Take in the value of l and r\n    l = n \n    r = n\n    \n    # Initialize sum of odd numbers\n    sum = 0\n    \n    # While l <= r\n    while (l <= r):\n        # If l and r are odd\n        if (l % 2 == 1 and r % 2 == 0):\n            # Increase the sum of odd numbers\n            sum += l \n            \n            # Decrease l by 2\n            l = l - 2\n            \n        # If l is odd\n        elif (l % 2 == 1):\n            # Increase the sum of odd numbers\n            sum += l\n            \n            # Decrease l by 2\n            l = l - 2\n            \n        # If r is odd\n        elif (r % 2 == 1):\n            # Increase the sum of odd numbers\n            sum += r\n            \n            # Decrease r by 2\n            r = r - 2\n        \n        # If l and r are the same\n        else:\n            # Increase the sum of odd numbers\n            sum += l\n            \n            # Decrease l by 2\n            l = l - 2\n            \n            # Increase the sum of odd numbers\n            sum += r\n    \n    # Return the sum\n    return sum\n",
        "num_ids": 293
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0: \n        return 0\n    else: \n        l=0\n        r=n\n        sum=0\n        while(r-l>0): \n            mid=(l+r)//2\n            if mid%2==0: \n                sum=sum+mid\n                r=mid-1\n            else: \n                l=mid+1\n        return sum\nn=int(input())\nprint(sum_odd(n)",
        "num_ids": 111
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    num = 0 \n    for i in range(l,r+1): \n        if i % 2!= 0: \n            num = num + i \n    return num \n",
        "num_ids": 46
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i%2 == 1:\n            s = s + i\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            count += i\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    ans = 0\n    for i in range(l, r+1):\n        if i%2==0:\n            ans+=i\n    return ans\n",
        "num_ids": 38
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # The range should be a tuple of two positive integers\n    # The range should be inclusive\n    # The range should be of the form l <= x <= r\n    # The range should be in the range [l, r]\n    \n    # Initialize sum, count, and result variable\n    # set variable for range\n    sum = 0\n    count = 0\n    result = 0\n",
        "num_ids": 89
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    return sum(arr)\n",
        "num_ids": 15
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    # initialize an empty list\n    total = 0\n    \n    # for each element in the array\n    for elem in arr:\n        \n        # check if this element is negative, this should only be\n        # in the for loop\n        if elem < 0:\n            print('Your numbers must be positive')\n            break\n        # check if this element is zero, this should only be in the for loop\n        elif elem == 0:\n            print('Your numbers must be positive')\n            break\n        # add the value of this element to the total\n        total += elem\n    \n    # return the total\n    return total\n",
        "num_ids": 149
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Solution 1\n    return sum(arr)\n",
        "num_ids": 14
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(n):\n        s += arr[i]\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #if the array has only one element then it is a single element, so return it\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 39
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = str(n)\n    d = int(d)\n    n = int(n,2)\n    d = int(d)\n    #print(n,d)\n    strn = ''\n    for i in range(n,-1,-d):\n        strn += n[i]\n    return strn\n",
        "num_ids": 78
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    b=bin(n)[2:]\n    b='0'*d+b\n    b=b[::-1]\n    for i in range(d):\n        if(b[i]=='1'):\n            n=n>>1\n        else:\n            n=n<<1\n    return n\n",
        "num_ids": 76
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>(32-d))&(2**32-1))|(n<<d)\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>(32-d))&(2**32-1))|(n<<d)\n    \ndef set(n,d):\n    '''\n    Write a function to set bit n to the right of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>d)&2**32-1) | (n<<32)\n    \ndef unset(n,d):\n    '''\n    Write a function to set bit n to the right of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>d)&2**32-1)\n    \ndef left(n,d):\n    '''\n    Write a function to set bit n to the left of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>(32-d))&2**32-1)\n    \ndef right(n,d):\n    '''\n    Write a function to set bit n to the right of the next bit in bit d. We assume that the number is 32 bit.\n    '''\n    n=(n&(2**32-1))>>32\n    d=(d<<32)\n    return ((n>>d)&2**32-1)\n    \ndef input():\n    '''\n    This function takes in a number and creates a 32 bit number which is the inverse of this number.\n    '''\n    n=int(input('Enter a number: '))\n    d=int(input('Enter a bit to rotate: '))\n    return n,d\n    \ndef clear():\n    '''\n    This function clears the 32 bit number that is the inverse of the given number.\n    '''\n    n=0\n    return n\n    \ndef get(n):\n    '''\n    This function takes in a number and returns a 32 bit number which is the inverse of this number.\n    '''\n    n=(n&(2**32-1))>>32\n    return n\n    \ndef main():\n    '''\n    This function calls the functions and checks if the input is valid.\n    '''\n    n,d=input()\n    n,d=int(n),int(d)\n    if n==0:\n        print('Invalid input')\n    elif d>=32:\n        print('Invalid input')\n    else:\n        print('Original number: ', n)\n        print('Reverted number: ', n, '\\n')\n        print('Left rotate: ', left_rotate(n,d))\n        print('Right rotate: ', right_rotate(n,d))\n        print('Sets bit: ', set(n,d))\n        print('Unsets bit: ', unset(n,d))\n        print('Bit at left side: ', left(n,d))\n        print('Bit at right side: ', right(n,d))\n        print('Bit at set: ', set(n,d))\n        print('Bit at unset: ', unset(n,d))\n        print()\n        \nmain(",
        "num_ids": 221
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    left_rotated_number = n>>d*8\n    right_rotated_number = n & 0xffffffff\n    return (left_rotated_number << d) | right_rotated_number\n    \n    \n    \n    \n",
        "num_ids": 61
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%n\n    n=n&1\n    return n,d\n",
        "num_ids": 22
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) \n",
        "num_ids": 20
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Step 1: Remember number of bits\n    # Step 2: Initialize final answer as same as initial number\n    # Step 3: Compute the final answer as number of bits mod 2\n    # Step 4: If mod 2 = 0, mod 2 = 1, mod 2 = 2\n    # Step 5: If mod 2 = 1, mod 2 = 3, mod 2 = 4\n    # Step 6: If mod 2 = 2, mod 2 = 5, mod 2 = 6\n    # Step 7: If mod 2 = 3, mod 2 = 7, mod 2 = 8\n    # Step 8: If mod 2 = 4, mod 2 = 9, mod 2 = 10\n    # Step 9: If mod 2 = 5, mod 2 = 11, mod 2 = 12\n    # Step 10: If mod 2 = 6, mod 2 = 13, mod 2 = 14\n    # Step 11: If mod 2 = 7, mod 2 = 15, mod 2 = 16\n    # Step 12: If mod 2 = 8, mod 2 = 17, mod 2 = 18\n    # Step 13: If mod 2 = 9, mod 2 = 19, mod 2 = 20\n    # Step 14: If mod 2 = 10, mod 2 = 21, mod 2 = 22\n    # Step 15: If mod 2 = 11, mod 2 = 23, mod 2 = 24\n    # Step 16: If mod 2 = 12, mod 2 = 25, mod 2 = 26\n    # Step 17: If mod 2 = 13, mod 2 = 27, mod 2 = 28\n    # Step 18: If mod 2 = 14, mod 2 = 29, mod 2 = 30\n    # Step 19: If mod 2 = 15, mod 2 = 31, mod 2 = 32\n    # Step 20: If mod 2 = 16, mod 2 = 33, mod 2 = 34\n    # Step 21: If mod 2 = 17, mod 2 = 35, mod 2 = 36\n    # Step 22: If mod 2 = 18, mod 2 = 37, mod 2 = 38\n    # Step 23: If mod 2 = 19, mod 2 = 39, mod 2 = 40\n    # Step 24: If mod 2 = 20, mod 2 = 41, mod 2 = 42\n    # Step 25: If mod 2 = 21, mod 2 = 43, mod 2 = 44\n    # Step 26: If mod 2 = 22, mod 2 = 45, mod 2 = 46\n    # Step 27: If mod 2 = 23, mod 2 = 47, mod 2 = 48\n    # Step 28: If mod 2 = 24, mod 2 = 49, mod 2 = 50\n    # Step 29: If mod 2 = 25, mod 2 = 51, mod 2 = 52\n    # Step 30: If mod 2 = 26, mod 2 = 53, mod 2 = 54\n    # Step 31: If mod 2 = 27, mod 2 = 55, mod 2 = 56\n    # Step 32: If mod 2 = 28, mod 2 = 57, mod 2 = 58\n    # Step 33: If mod 2 = 29, mod 2 = 59, mod 2 = 60\n    # Step 34: If mod 2 = 30, mod 2 = 61, mod 2 = 62\n    # Step 35: If mod 2 = 31, mod 2 = 63, mod 2 = 64\n    # Step 36: If mod 2 = 32, mod 2 = 65, mod 2 = 66\n    # Step 37: If mod 2 = 33, mod 2 = 67, mod 2 = 68\n    # Step 38: If mod 2 = 34, mod 2 = 69, mod 2 = 70\n    # Step 39: If mod 2 = 35, mod 2 = 71, mod 2 = 72\n    # Step 40: If mod 2 = 36, mod 2 = 73, mod 2 = 74\n    # Step 41: If mod 2 = 37, mod 2 = 75, mod 2 = 76\n    # Step 42: If mod 2 = 38, mod 2 = 77, mod 2 = 78\n    # Step 43: If mod 2 = 39, mod 2 = 79, mod 2 = 80\n    # Step 44: If mod 2 = 40, mod 2 = 81, mod 2 = 82\n    # Step 45: If mod 2 = 41, mod 2 = 83, mod 2 = 84\n    # Step 46: If mod 2 = 42, mod 2 = 85, mod 2 = 86\n    # Step 47: If mod 2 = 43, mod 2 = 87, mod 2 = 88\n    # Step 48: If mod 2 = 44, mod 2 = 89, mod 2 = 90\n    # Step 49: If mod 2 = 45, mod 2 = 91, mod 2 = 92\n    # Step 50: If mod 2 = 46, mod 2 = 93, mod 2 = 94\n    # Step 51: If mod 2 = 47, mod 2 = 95, mod 2 = 96\n    # Step 52: If mod 2 = 48, mod 2 = 97, mod 2 = 98\n    # Step 53: If mod 2 = 49, mod 2 = 99, mod 2 = 100\n    # Step 54: If mod 2 = 50, mod 2 = 101, mod 2 = 102\n    # Step 55: If mod 2 = 51, mod 2 = 103, mod 2 = 104\n    # Step 56: If mod 2 = 52, mod 2 = 105, mod 2 = 106\n    # Step 57: If mod 2 = 53, mod 2 = 107, mod 2 = 108\n    # Step 58: If mod 2 = 54, mod 2 = 109, mod 2 = 110\n    # Step 59: If mod 2 = 55, mod 2 = 111, mod 2 = 112\n    # Step 60: If mod 2 = 56, mod 2 = 113, mod 2 = 114\n    # Step 61: If mod 2 = 57, mod 2 = 115, mod 2 = 116\n    # Step 62: If mod 2 = 58, mod 2 = 117, mod 2 = 118\n    # Step 63: If mod 2 = 59, mod 2 = 119, mod 2 = 120\n    # Step 64: If mod 2 = 60, mod 2 = 121, mod 2 = 122\n    # Step 65: If mod 2 = 61, mod 2 = 123, mod 2 = 124\n    # Step 66: If mod 2 = 62, mod 2 = 125, mod 2 = 126\n    # Step 67: If mod 2 = 63, mod 2 = 127, mod 2 = 128\n    # Step 68: If mod 2 = 64, mod 2 = 129, mod 2 = 130\n    # Step 69: If mod 2 = 65, mod 2 = 131, mod 2 = 132\n    # Step 70: If mod 2 = 66, mod 2 = 133, mod 2 = 134\n    # Step 71: If mod 2 = 67, mod 2 = 135, mod 2 = 136\n    # Step 72: If mod 2 = 68, mod 2 = 137, mod 2 = 138\n    # Step 73: If mod 2 = 69, mod 2 = 139, mod 2 = 140\n    # Step 74: If mod 2 = 70, mod 2 = 141, mod 2 = 142\n    # Step 75: If mod 2 = 71, mod 2 = 143, mod 2 = 144\n    # Step 76: If mod 2 = 72, mod 2 = 145, mod 2 = 146\n    # Step 77: If mod 2 = 73, mod 2 = 147, mod 2 = 148\n    # Step 78: If mod 2 = 74, mod 2 = 149, mod 2 = 150\n    # Step 79: If mod 2 = 75, mod 2 = 151, mod 2 = 152\n    # Step 80: If mod 2 = 76, mod 2 = 153, mod 2 = 154\n    # Step 81: If mod 2 = 77, mod 2 = 155, mod 2 = 156\n    # Step 82: If mod 2 = 78, mod 2 = 157, mod 2 = 158\n    # Step 83: If mod 2 = 79, mod 2 = 159, mod 2 = 160\n    # Step 84: If mod 2 = 80, mod 2 = 161, mod 2 = 162\n    # Step 85: If mod 2 = 81, mod 2 = 163, mod 2 = 164\n    # Step 86: If mod 2 = 82, mod 2 = 165, mod 2 = 166\n    # Step 87: If mod 2 = 83, mod 2 = 167, mod 2 = 168\n    # Step 88: If mod 2 = 84, mod 2 = 169, mod 2 = 170\n    # Step 89: If mod 2 = 85, mod 2 = 171, mod 2 = 172\n    # Step 90: If mod 2 = 86, mod 2 = 173, mod 2 = 174\n    # Step 91: If mod 2 = 87, mod 2 = 175, mod 2 = 176\n    # Step 92: If mod 2 = 88, mod 2 = 177, mod 2 = 178\n    # Step 93: If mod 2 = 89, mod 2 = 179, mod 2 = 180\n    # Step 94: If mod 2 = 90, mod 2 = 181, mod 2 = 182\n    # Step 95: If mod 2 = 91, mod 2 = 183, mod 2 = 184\n    # Step 96: If mod 2 = 92, mod 2 = 185, mod 2 = 186\n    # Step 97: If mo",
        "num_ids": 2004
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the length of the array\n    n = n & 0xffff\n",
        "num_ids": 20
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # your code goes here\n    return n & ((1 << d) - 1)\n",
        "num_ids": 22
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #print(n)\n    temp = n & 0xffffffff\n    n = n>>32\n    #print(temp)\n    n += d\n    #print(n)\n    #print(n)\n    n = n << 32\n    n = temp | n\n    #print(n)\n    #print(n)\n    return n\n",
        "num_ids": 84
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    s = re.sub(\" +\", \" \", text)\n    return s\n",
        "num_ids": 20
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # if all whitespace is removed, return string\n    if re.match('\\s', text):\n        return ''\n",
        "num_ids": 30
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Your code here\n    remove_space = \" \".join(text.split())\n    return remove_space\n",
        "num_ids": 28
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # your code here\n    if text == '':\n        return ''\n    elif type(text)!= str:\n        raise TypeError('The text passed must be a string.')\n    else:\n        text = re.sub(' +','', text.strip())\n        return text\n",
        "num_ids": 68
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Write your code here.\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(f'{x} - {y} - {z}')\n    if (x==y and y==z):\n        return 0\n    else:\n        return 1\nprint(f'{test_three_equal(3,4,5)}')\nprint(test_three_equal(1,2,3))",
        "num_ids": 77
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    for i in range(x,y+1):\n        for j in range(z,x+1):\n            if x==y and x==z:\n                c+=1\n            elif x!=y or x!=z:\n                break\n            else:\n                break\n        else:\n            c+=1\n    return c\n",
        "num_ids": 86
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c=0\n    a=x\n    b=y\n    c=z\n    print(\"Number of equal numbers between {0} and {1} are\".format(a,b))\n    for i in range(a,b):\n        if i==c:\n            c+=1\n            print(i)\n    return c\n",
        "num_ids": 79
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z, \"input numbers are less than or equal to zero\"\n    assert x<y+z",
        "num_ids": 2009
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(x,z+1):\n        if(x%i==0 and y%i==0 and z%i==0):\n            count+=1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x!= y and y!= z and x!= z\n    assert x!= y and y!= z\n    assert x == y and y == z and x == z\n    assert x!= y and y!= z\n    assert x!= y\n    assert x!= z and y!= z\n    assert x == z and y == z\n    assert x == z\n    assert x == y\n    assert x!= z\n    assert x == y\n    assert x == z\n    assert x!= y\n",
        "num_ids": 124
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum(x) + sum(y) == sum(z)\n",
        "num_ids": 19
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x)==len(y), \"Numbers should be same length\"\n    assert len(x)==len(z), \"Numbers should be same length\"\n    assert len(x)==len(z), \"Numbers should be same length\"\n    assert x.count(y)==y.count(z), \"Numbers should contain same value\"\n    assert x.count(z)==z.count(y), \"Numbers should contain same value\"\n",
        "num_ids": 105
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    z+=1\n    return z\n",
        "num_ids": 11
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    c=x+y+z\n    if c==c:\n        print(c)\n    else:\n        print(\"Not Equal\")\n    \n    \n    \n    \nif __name__==\"__main__\":\n    test_two_equal()\n    test_one_equal()\n    test_three_equal(",
        "num_ids": 101
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == 0:\n            count += 1\n        else:\n            if arr[i] > arr[i - 1]:\n                count += 1\n    return count\n    \n",
        "num_ids": 60
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    temp = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < temp:\n            count += 1\n            temp = arr[i]\n        else:\n            temp = arr[i]\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    temp = [arr[0]]\n    for i in range(1,len(arr)):\n        temp.append(arr[i])\n        if arr[i] < temp[-1]:\n            temp.append(arr[i])\n            arr[i],arr[len(arr)-1] = arr[len(arr)-1],arr[i]\n            len(arr)-=1\n            #print(temp)\n        else:\n            arr[len(arr)-1],arr[i] = arr[i],arr[len(arr)-1]\n            len(arr)-=1\n            #print(arr)\n            \n    #print(arr)\n    return len(arr)\n",
        "num_ids": 162
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr:\n        return 0\n    res = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            res += 1\n    return res\n",
        "num_ids": 53
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotated_arr = [arr[0]]\n    for x in arr[1:]:\n        rotated_arr.append(x)\n    return rotated_arr.count(rotated_arr[0])\n",
        "num_ids": 51
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    i = 0\n    while i < n:\n        \n        if arr[i] > arr[i+1]:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n            arr[i+1], arr[i] = arr[i], arr[i+1]\n    return rotations\n",
        "num_ids": 69
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    left = 0\n    right = n - 1\n",
        "num_ids": 22
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    left, right = 0, 0\n    count = 0\n    \n    while left <= right:\n        count = count + (right - left)\n        left = left + 1\n    \n    if count > n:\n        right = n - 1\n        \n    return count\n        \n    \narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(count_rotation(arr))",
        "num_ids": 108
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    left=0\n    right=n-1\n    \n    if n==0:\n        return 0\n    \n    mid=0\n    if n%2==0:\n        mid=n//2\n    else:\n        mid=n//2-1\n    \n    while left<=mid and right>=mid:\n        if arr[mid]<arr[right]:\n            arr[mid],arr[right]=arr[right],arr[mid]\n            mid=mid-1\n        elif arr[mid]>arr[right]:\n            arr[mid],arr[left]=arr[left],arr[mid]\n            mid=mid+1\n        else:\n            mid=mid+1\n        right=mid-1\n    \n    if right>=mid:\n        arr[mid],arr[right]=arr[right],arr[mid]\n    \n    return (right+1-mid)\n    ",
        "num_ids": 220
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0 or n == 1):\n        return True\n    elif (n % 2 == 0):\n        return False\n    else:\n        return is_perfect_square(n/2)\n",
        "num_ids": 50
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # your code here\n    if n == 0 or n == 1:\n        return True\n    if n < 0 :\n        return False\n    sqrt = int(math.sqrt(n))\n    for i in range(2, sqrt + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n",
        "num_ids": 81
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    if n == 2 :\n        return n == int(math.sqrt(n)) + 1\n    if n % 2 == 0 :\n        return False\n    for i in range(3,int(math.sqrt(n)+1)):\n        if n % i == 0 :\n            return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n%i == 0 :\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n == int(n**0.5))\n",
        "num_ids": 16
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return pow(n, 0.5) == n\n",
        "num_ids": 15
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return True\n    if n % 4 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s=0\n    while n!=1:\n        if n%2==0:\n            s=s+1\n        n=n/2\n    if s==2:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == int(n):\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even_num = 0\n    for i in arr:\n        if i%2 == 0:\n            even_num += 1\n    if even_num == len(arr):\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s%2==0\n",
        "num_ids": 27
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return True\n    if arr[0] % 2 == 0:\n        return False\n    else:\n        return is_product_even(arr[1:])\n",
        "num_ids": 50
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even = True\n    for i in range(len(arr)):\n        if arr[i]%2!= 0:\n            even = False\n    return even\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in arr:\n        count += 1\n        if count % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    num = 1\n    for i in arr:\n        num *= i\n",
        "num_ids": 20
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in arr:\n        count += i \n    if count%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n",
        "num_ids": 22
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i]%2!=0:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        sum = 0\n        for j in lists[i]:\n            sum += j\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n",
        "num_ids": 62
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # create a list of all the elements in the given list.\n    sum_list = []\n    \n    for list in lists:\n        sum_list.append(sum(list))\n    \n    # find the index of the largest element in the list.\n    max_index = sum_list.index(max(sum_list))\n",
        "num_ids": 79
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # your code here\n    max_num = 0\n    max_list = []\n    \n    # for each item in the list, check if the item is the sum of all the numbers in the list minus the element it is in\n    for item in lists:\n        for num in item:\n            if num!= 0:\n                if num > max_num:\n                    max_num = num\n                    max_list = []\n                else:\n                    max_list.append(num)\n    \n    return max_list\n",
        "num_ids": 121
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n",
        "num_ids": 9
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    current_max = [list[0] for list in lists]\n    for item in lists:\n        current_max.append(item[0])\n        current_max.append(max(item))\n    return current_max\n",
        "num_ids": 55
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for i in range(len(lists)):\n        list_of_lists = lists[:]\n        for j in range(len(list_of_lists)):\n            if list_of_lists[j][1] == list_of_lists[i][1]:\n                list_of_lists[j][1] = 0\n            elif list_of_lists[j][1] > list_of_lists[i][1]:\n                list_of_lists[j][1] = list_of_lists[i][1]\n        \n        for k in range(len(list_of_lists)):\n            if list_of_lists[k][1] == 0:\n                del list_of_lists[k]\n            elif list_of_lists[k][1] > 0:\n                list_of_lists[k][1] -= 1\n",
        "num_ids": 212
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    summations = [0]\n    max_sum = 0\n    for i in lists:\n        for j in i:\n            summations.append(summations[i.index(j)])\n    print(summations)\n    for i in range(len(summations)):\n        if summations[i] > max_sum:\n            max_sum = summations[i]\n    return max_sum\n",
        "num_ids": 103
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_lst = []\n    max_sum = 0\n    for lst in lists:\n        sum_lst.append(sum(lst))\n        if max(sum_lst) > max_sum:\n            max_sum = max(sum_lst)\n    return lists\n",
        "num_ids": 71
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Write your code here\n    max_sum = [0]*len(lists)\n    if not lists:\n        return []\n    \n    max_sum[0] = lists[0]\n    \n    for i in range(1,len(lists)):\n        if lists[i] > max_sum[i-1]:\n            max_sum[i] = max_sum[i-1]\n        else:\n            max_sum[i] = lists[i]\n    return max_sum\n",
        "num_ids": 120
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #raise NotImplementedError\n    if not lists:\n        return []\n    return max(list(map(lambda l: max(list(map(lambda x:x+l, l))), lists)))\n",
        "num_ids": 51
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # if the given string is empty, or contains only one character, then return -1\n    if len(test_str) == 0 or len(test_str) == 1:\n        return -1\n",
        "num_ids": 48
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase=0\n    for char in test_str:\n        if(char>=97 and char<=122):\n            max_run_uppercase=max_run_uppercase+1\n    return max_run_uppercase\n",
        "num_ids": 65
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = str(test_str)\n    s = set(test_str)\n    return len(s)",
        "num_ids": 30
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(char for char in test_str if char.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def run(start, end):\n        if start >= end:\n            return 0\n        result = 0\n        cur = start\n        while cur < end:\n            if test_str[cur].isupper():\n                result = max(result, run(start, cur) + 1)\n            cur = cur + 1\n        return result\n    return run(0, len(test_str) - 1)\n",
        "num_ids": 95
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    '''\n    Test string:\n    first_test = 'Krishna'\n    expected = 'R'\n    Expected Output:\n    'K'\n    Expected Result:\n    R\n    '''\n    #Define upper_characters = [i for i in test_str if i.isupper()]\n    lower_characters = [i for i in test_str if i.islower()]\n    upper_characters = [i for i in test_str if i.isupper()]\n    \n    if len(lower_characters) > len(upper_characters):\n        if lower_characters:\n            if lower_characters[0] not in upper_characters:\n                return max(lower_characters)\n            else:\n                return max(lower_characters, key=lower_characters.count)\n        else:\n            return max(upper_characters)\n    else:\n        if upper_characters:\n            if upper_characters[0] not in lower_characters:\n                return max(upper_characters)\n            else:\n                return max(upper_characters, key=upper_characters.count)\n        else:\n            return max(lower_characters)\n",
        "num_ids": 239
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    ans = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            ans += test_str[i].upper()\n        else:\n            ans += test_str[i]\n    return ans\n",
        "num_ids": 63
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def max_run_uppercase(test_str):\n        '''\n        Write a function to find maximum run of uppercase characters in the given string.\n        '''\n        maximum_run = 0\n        for i in range(len(test_str)):\n            if test_str[i].isupper():\n                if maximum_run < len(test_str[i]) + 1:\n                    maximum_run = len(test_str[i]) + 1\n        return maximum_run\n",
        "num_ids": 75
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_str = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i]!= test_str[i].upper():\n                max_str += 1\n    return max_str\n",
        "num_ids": 67
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    result_str = ''\n",
        "num_ids": 16
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = nums[i]\n    return(nums[0])\n",
        "num_ids": 51
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if nums.count(nums[0]) % 2 == 1 else None\n",
        "num_ids": 27
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    l=[]\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            l.append(nums[i])\n    return l[0]\n",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n    return 0\n",
        "num_ids": 43
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums)==1:\n        return nums[0]\n",
        "num_ids": 21
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0]\n",
        "num_ids": 10
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return nums[i]\n    return 0\n",
        "num_ids": 41
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            count += 1\n    \n    if count % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    n = len(nums)\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return nums[0]\n",
        "num_ids": 39
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    else:\n        return True\n    ",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i in K:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K <= 0:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for x in test_tup:\n        if x == K:\n            count = count + 1\n    if count == 1:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 54
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return 'Error: test is not K'\n    else:\n        return True\n",
        "num_ids": 34
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(test_tup[i] == test_tup[i+1] for i in range(len(test_tup)-1))\n",
        "num_ids": 38
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for x in test_tup:\n        if x in K:\n            count += 1\n        if count > K:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test = test_tup\n    if len(test)!= 2:\n        return \"invalid input\"\n    if test_tup[0][0] not in test_tup[1][0] or test_tup[0][1] not in test_tup[1][1]:\n        return \"invalid input\"\n    if test_tup[0][0] == test_tup[1][0] and test_tup[0][1] == test_tup[1][1]:\n        return \"same\"\n    return \"not k\"\n",
        "num_ids": 135
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #create test variable to check with k\n    test = test_tup\n",
        "num_ids": 20
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    num_of_items = len(test_tup)\n    if K <= 0 or num_of_items <= K:\n        return False\n    return True\n    \ndef check_P(test_tup, P):\n    '''\n    Write a function that will check if P[i] is an element of test_tup\n    '''\n    num_of_items = len(test_tup)\n    if P[0] not in test_tup:\n        return False\n    if P[0] in test_tup and len(P) > 1:\n        return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    t1 = test_tup1\n    t2 = test_tup2\n    for i in t1:\n        if type(i)!= int:\n            print(\"Error: Wrong type of index in tuple\")\n        elif i < t2[0]:\n            print(\"Error: Index < 0\")\n        elif i > t2[len(t2)-1]:\n            print(\"Error: Index > length of tuple\")\n        elif i in t2:\n            print(\"Error: Index in the tuple\")\n        else:\n            pass\n    return \n",
        "num_ids": 133
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1_is_smaller = True\n    test_tup2_is_smaller = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            test_tup1_is_smaller = False\n        else:\n            test_tup2_is_smaller = False\n    return test_tup1_is_smaller, test_tup2_is_smaller\n    \n    \ndef insert_smaller_tuple(test_tup1, test_tup2):\n    '''\n    Write a function that takes a tuple as an argument and returns a tuple containing both elements in ascending order of their index in the original tuple.\n    '''\n    test_tup2_is_smaller = True\n    test_tup1_is_smaller = True\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            test_tup1_is_smaller = False\n        else:\n            test_tup2_is_smaller = False\n    test_tup1_is_smaller, test_tup2_is_smaller = check_smaller(test_tup1, test_tup2)\n    if test_tup1_is_smaller:\n        test_tup1 = tuple(sorted(test_tup1))\n    if test_tup2_is_smaller:\n        test_tup2 = tuple(sorted(test_tup2))\n    return test_tup1, test_tup2\n",
        "num_ids": 219
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    i = 0\n    smaller_tuple = False\n    while i < len(test_tup2):\n        if test_tup2[i] < test_tup1[i]:\n            smaller_tuple = True\n            break\n        i += 1\n    return smaller_tuple\n",
        "num_ids": 73
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] < test_tup1[0] and test_tup2[1] < test_tup1[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    try:\n        if (test_tup1[0] < test_tup2[0]):\n            return True\n    except IndexError:\n        pass\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            smaller = True\n    return smaller\n",
        "num_ids": 54
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'The number of elements in second tuple must be equal to the number of elements in the first tuple'\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print('The element found in second tuple is greater than in first tuple', i)\n            return False\n    print('The element found in second tuple is smaller than in first tuple')\n    return True\n",
        "num_ids": 125
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # create empty list\n    bigger = []\n    smaller = []\n    for i in range(0, len(test_tup2)):\n        bigger.append(test_tup2[i])\n    for i in range(0, len(test_tup1)):\n        smaller.append(test_tup1[i])\n    # check if the two tuples are equal\n    # print(len(test_tup1))\n    # print(len(test_tup2))\n    if len(bigger) == len(smaller):\n        for i in range(0, len(test_tup1)):\n            for j in range(0, len(test_tup2)):\n                if test_tup1[i] < test_tup2[j]:\n                    smaller[j] = test_tup1[i]\n                    # print(smaller[j])\n    else:\n        for i in range(0, len(test_tup1)):\n            for j in range(0, len(test_tup2)):\n                if test_tup1[i] < test_tup2[j]:\n                    smaller[j] = test_tup1[i]\n                    # print(smaller[j])\n    # print(smaller)\n    # return smaller\n    return bigger\n",
        "num_ids": 322
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    sorted_tup1 = sorted(test_tup1)\n    sorted_tup2 = sorted(test_tup2)\n",
        "num_ids": 36
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for i in range(len(tup1)):\n        if tup1[i] < tup2[i]:\n            return False\n    return True\n",
        "num_ids": 62
    }
]