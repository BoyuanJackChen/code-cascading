[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = test_tup1[0]\n    list2 = test_tup2[0]\n    if len(list1) == len(list2):\n        return list1, list2\n    else:\n        return (list2, list1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    d = {}\n    for i in test_tup1:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for el1 in test_tup1:\n        for el2 in test_tup2:\n            if el1 == el2:\n                shared_elements.append(el1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in test_tup1:\n            for j in test_tup2:\n                if i == j:\n                    result.append(i)\n        return result\n    else:\n        print(\"Error: the lengths of two lists don't match.\")\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l = []\n    for element1 in test_tup1:\n        for element2 in test_tup2:\n            if element1 == element2:\n                l.append(element1)\n                l.append(element2)\n    return l\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get a copy of both lists.\n    test_l1 = test_tup1[:]\n    test_l2 = test_tup2[:]\n    \n    # Traverse through both lists to find elements.\n    for i in range(len(test_l1)):\n        for j in range(len(test_l2)):\n            if test_l1[i] == test_l2[j]:\n                test_l1[i] = test_l2[j]\n                test_l2[j] = test_l1[i]\n                \n    # Return the list of elements.\n    return test_l1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1, l2 = test_tup1, test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    \n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<0:\n        return 0\n    elif n==1:\n        return True\n    elif n==2:\n        return False\n    else:\n        if n%2==0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return True\n    \n    if n % 3 == 0:\n        return True\n    \n    if n % 5 == 0:\n        return True\n    \n    if n % 7 == 0:\n        return True\n    \n    return False\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n == 3:\n        return True\n    \n    if n == 4:\n        return True\n    \n    if n == 5:\n        return True\n    \n    if n == 6:\n        return True\n    \n    if n % 7 == 0:\n        return True\n    \n    if n % 5 == 0:\n        return True\n    \n    if n % 3 == 0:\n        return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n==3:\n        return True\n    if n%3==0:\n        return False\n    if n%2==0:\n        return False\n    if n%5==0:\n        return False\n    i=6\n    j=7\n    while(i<j):\n        if (n%i==0) and (n%j==0):\n            return False\n        i+=6\n        j+=7\n    return True\ndef primes(n):\n    '''\n    Given an integer n, determine whether or not every number from 1 to n is a prime number.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n%3==0:\n        return False\n    if n%2==0:\n        return False\n    if n%5==0:\n        return False\n    i=6\n    j=7\n    while(i<j):\n        if (n%i==0) and (n%j==0):\n            return False\n        i+=6\n        j+=7\n    return True\ndef sieve(n):\n    '''\n    Given an integer n, return the nth prime number.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n%3==0:\n        return 4\n    if n%2==0:\n        return 7\n    if n%5==0:\n        return 9\n    i=6\n    j=7\n    while(i<j):\n        if (n%i==0) and (n%j==0):\n            return i\n        i+=6\n        j+=7\n    return n+1\ndef primes_odd(n):\n    '''\n    Given an integer n, return the nth prime number for odd.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n%2==0:\n        return 4\n    if n%3==0:\n        return 6\n    if n%5==0:\n        return 7\n    i=6\n    j=7\n    while(i<j):\n        if (n%i==0) and (n%j==0):\n            return i\n        i+=6\n        j+=7\n    return n+1\ndef primes_even(n):\n    '''\n    Given an integer n, return the nth prime number for even.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n%2==0:\n        return 4\n    if n%3==0:\n        return 6\n    if n%5==0:\n        return 7\n    i=6\n    j=7\n    while(i<j):\n        if (n%i==0) and (n%j==0):\n            return i\n        i+=6\n        j+=7\n    return n+1\ndef is_prime(n):\n    '''\n    Given an integer n, determine whether or not it is a prime number.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n%3==0:\n        return False\n    if n%2==0:\n        return False\n    if n%5==0:\n        return False\n    i=6\n    j=7\n    while(i<j):\n        if (n%i==0) and (n%j==0):\n            return False\n        i+=6\n        j+=7\n    return True\ndef prime_factors(n):\n    '''\n    Given an integer n, return all factors of n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n==3:\n        return [3]\n    if n%3==0:\n        return prime_factors(n//3)\n    if n%2==0:\n        return prime_factors(n//2)\n    if n%5==0:\n        return prime_factors(n//5)\n    return [n]\ndef prime_factors_odd(n):\n    '''\n    Given an integer n, return all factors of n for odd numbers.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n==3:\n        return [3]\n    if n%2==0:\n        return prime_factors_odd(n//2)\n    if n%3==0:\n        return prime_factors_odd(n//3)\n    if n%5==0:\n        return prime_factors_odd(n//5)\n    return [n]\ndef prime_factors_even(n):\n    '''\n    Given an integer n, return all factors of n for even numbers.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n==3:\n        return [3]\n    if n%2==0:\n        return prime_factors_even(n//2)\n    if n%3==0:\n        return prime_factors_even(n//3)\n    if n%5==0:\n        return prime_factors_even(n//5)\n    return [n]\ndef prime_factors_odd_even(n):\n    '''\n    Given an integer n, return all factors of n for odd numbers and even numbers.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n==3:\n        return [3]\n    if n%2==0:\n        return prime_factors_odd_even(n//2)\n    if n%3==0:\n        return prime_factors_odd_even(n//3)\n    if n%5==0:\n        return prime_factors_odd_even(n//5)\n    return [n]\ndef prime_factors_odd_even_prime(n):\n    '''\n    Given an integer n, return all prime factors of n for odd numbers and even numbers and prime factors of n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n==3:\n        return [3]\n    if n%2==0:\n        return prime_factors_odd_even_prime(n//2)\n    if n%3==0:\n        return prime_factors_odd_even_prime(n//3)\n    if n%5==0:\n        return prime_factors_odd_even_prime(n//5)\n    return [n]\ndef prime_factors_even_odd_prime(n):\n    '''\n    Given an integer n, return all prime factors of n for even numbers and odd numbers and prime factors of n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n==3:\n        return [3]\n    if n%2==0:\n        return prime_factors_even_odd_prime(n//2)\n    if n%3==0:\n        return prime_factors_even_odd_prime(n//3)\n    if n%5==0:\n        return prime_factors_even_odd_prime(n//5)\n    return [n]\ndef prime_factors_even_odd_prime_prime(n):\n    '''\n    Given an integer n, return all prime factors of n for even numbers and odd numbers and prime factors of n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n==3:\n        return [3]\n    if n%2==0:\n        return prime_factors_even_odd_prime_prime(n//2)\n    if n%3==0:\n        return prime_factors_even_odd_prime_prime("
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1: return False\n    elif n == 2: return True\n    elif n % 2 == 0: return False\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap,nums[i])\n    result = []\n    for j in range(n-1):\n        heapq.heappushpop(result,heapq.heappop(max_heap) + nums[j])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort(reverse=True)\n    res = hq.nsmallest(n,nums)\n    res.sort()\n    return res\n    \ndef check_max_heap(n):\n    '''\n    Write a function to check if the current number is the largest number in a Max Heap.\n    '''\n    if n==0:\n        return True\n    if n<0:\n        return False\n    if n<=heap_queue_largest(n,len(nums)-1):\n        return True\n    else:\n        return False\ndef check_min_heap(n):\n    '''\n    Write a function to check if the current number is the smallest number in a Min Heap.\n    '''\n    if n==0:\n        return True\n    if n>=heap_queue_largest(n,0):\n        return True\n    else:\n        return False\n    \ndef merge(a,b,n):\n    '''\n    Write a function to merge the two arrays, a and b into a max heap, returning the merged array.\n    '''\n    if not a:\n        return b\n    if not b:\n        return a\n    if a[0]>b[0]:\n        a[0],b[0]=b[0],a[0]\n        a[1],b[1]=b[1],a[1]\n    l,r=0,len(a)-1\n    while l<=r:\n        if not a[l]<b[r]:\n            l+=1\n        elif not b[l]<a[l]:\n            l+=1\n        else:\n            a[l],b[r]=a[l],b[r]\n            l+=1\n            r-=1\n    return a\ndef merge_max_heap(a,n):\n    '''\n    Write a function to merge the two arrays, a and b into a Max Heap, returning the merged array.\n    '''\n    if not a:\n        return b\n    if not b:\n        return a\n    if a[0]>b[0]:\n        a[0],b[0]=b[0],a[0]\n        a[1],b[1]=b[1],a[1]\n    l,r=0,len(a)-1\n    while l<=r:\n        if not a[l]<b[r]:\n            l+=1\n        elif not b[l]<a[l]:\n            l+=1\n        else:\n            a[l],b[r]=a[l],b[r]\n            l+=1\n            r-=1\n    return a\ndef merge_min_heap(a,n):\n    '''\n    Write a function to merge the two arrays, a and b into a Min Heap, returning the merged array.\n    '''\n    if not a:\n        return b\n    if not b:\n        return a\n    if a[0]>b[0]:\n        a[0],b[0]=b[0],a[0]\n        a[1],b[1]=b[1],a[1]\n    l,r=0,len(a)-1\n    while l<=r:\n        if not a[l]<b[r]:\n            l+=1\n        elif not b[l]<a[l]:\n            l+=1\n        else:\n            a[l],b[r]=a[l],b[r]\n            l+=1\n            r-=1\n    return a\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    \n    # Add elements to the heap\n    for n in nums:\n        hq.heappush(heap,n)\n    \n    # Remove elements from heap\n    result = []\n    while heap:\n        item = hq.heappop(heap)\n        result.append(item)\n        if len(result) > n:\n            return sorted(result[:n], reverse=True)\n    return result\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    \n    # Add elements to the heap\n    for n in nums:\n        hq.heappush(heap,n)\n    \n    # Remove elements from heap\n    result = []\n    while heap:\n        item = hq.heappop(heap)\n        result.append(item)\n        if len(result) > n:\n            return result[:n]\n    return result\ndef heap_queue_pop(heap,n):\n    '''\n    Write a function to remove and return the n smallest elements from a given heap, returning the heap in a list of nums.\n    '''\n    \n    # Remove and return smallest element\n    result = []\n    for i in range(n):\n        item = heapq.heappop(heap)\n        result.append(item)\n    return result\ndef heap_queue_push(heap,n):\n    '''\n    Write a function to add a element to a given heap, returning the number of elements added.\n    '''\n    # add and return number of elements\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return len(heap)\ndef heap_queue_pop_smallest(heap,n):\n    '''\n    Write a function to remove and return the n smallest elements from a given heap, returning the heap in a list of nums.\n    '''\n    \n    # remove and return smallest element\n    result = []\n    for i in range(n):\n        item = heapq.heappop(heap)\n        result.append(item)\n    return result\ndef heap_queue_push_smallest(heap,n):\n    '''\n    Write a function to add a element to a given heap, returning the number of elements added.\n    '''\n    \n    # add and return smallest element\n    result = []\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return len(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = [nums[0]]\n    for i in range(1,n):\n        if nums[i] > heap[0]:\n            heapq.heappush(heap,[nums[i],i])\n        else:\n            heapq.heappush(heap,[nums[i],i])\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = [nums[0]]\n    for i in range(1,n):\n        if nums[i] < heap[0]:\n            heapq.heappush(heap,[nums[i],i])\n        else:\n            heapq.heappush(heap,[nums[i],i])\n    return heap\ndef heap_queue_sort(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in nums:\n        heapq.heappush(heap,[i,i])\n    return heap\ndef heap_queue_first(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_sort2(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_second(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_third(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_last(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_middle(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_first_middle(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_second_middle(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_middle_middle(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_last_middle(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_first_last(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_first_last_middle(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_first_last_middle2(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_middle2(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_last2(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_middle2(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_first_middle2(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_middle2(nums,n):\n    '''\n    Write a function to sort a list of integers using a heap.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],nums[i]])\n    return heap\ndef heap_queue_last2(nums,n):\n    '''\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    for i in range(n):\n        result.append(nums[i])\n    hq.heapify(result)\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,(num,n))\n        \n    ans = []\n    while heap:\n        num, n = hq.heappop(heap)\n        ans.append(num)\n        if n>0:\n            hq.heappush(heap,[n-1,n])\n    \n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    # push all elements into heap\n    # note: this is the best idea as you can insert into the heap only the ones that are greater than the top\n    for i in range(n-1,0,-1):\n        heapq.heappush(heap,-heapq.heappop(heap)+heapq.heappop(heap))\n    # return the top\n    return [-heapq.heappop(heap)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    # push all elements into heap\n    # note: this is the best idea as you can insert into the heap only the ones that are lesser than the top\n    for i in range(n-1,0,-1):\n        heapq.heappush(heap,heapq.heappop(heap)+heapq.heappop(heap))\n    # return the top\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    heapq.heapify(hq)\n    for i in range(n):\n        heapq.heappush(hq,nums[i])\n    return hq\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums, reverse=True, key = lambda x: x)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    #returns the first element, as a list\n    return hq.heappop(heap)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # your code goes here\n    if (x==1):\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while(x % 2 == 0):\n        x = x / 2\n    if x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if x % 2!= 0:\n            return True\n        x -= 1\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x == int(x) ** 2\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    for num in range(1, min(x, 10) + 1):\n        if x % num == 0:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    a = x\n    b = x\n    if a == b:\n        return False\n    while a!= b:\n        a = a & (a-1)\n        b = b & (b-1)\n    return a == b\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x<0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return False\n    \n    \ndef check_if_Palindrome (x):\n    '''\n    Write a python function that checks whether the number x is palindrome or not.\n    '''\n    temp = x\n    rev = 0\n    while temp > 0:\n        digit = temp%10\n        rev = rev*10 + digit\n        temp = temp//10\n    if x == rev:\n        return True\n    else:\n        return False\n    \n    \ndef is_Prime (x):\n    '''\n    Write a python function to check if the number x is prime or not.\n    '''\n    if x <= 1:\n        return False\n    if x == 2 or x == 3:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \ndef is_Perfect_Square (x):\n    '''\n    Write a python function to check if the number x is perfect square or not.\n    '''\n    if x <= 1:\n        return False\n    if x == 2 or x == 3:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    x = abs(x)\n    if x%2 == 0 and x!= 0: \n        print(\"It's Even\") \n        return True\n    elif x%2 == 1 and x!= 0: \n        print(\"It's Odd\") \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x >= 0:\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    lst = []\n    for i in text:\n        if len(i) >= 4:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # 1) Getting the longest word\n    text = text.split()\n    longest = max([len(word) for word in text])\n    # 2) Counting each word in the text\n    counter = 0\n    for word in text:\n        counter += len(word)\n    # 3) Getting the number of characters\n    characters = counter\n    # 4) Return the longest word\n    return longest if characters >= 4 else \"No word\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # your code goes here\n    characters = {}\n    # iterate over the text\n    for char in text:\n        # if character is not in the dictionary, append it to the dictionary\n        if char in characters:\n            characters[char] += 1\n        else:\n            characters[char] = 1\n    # find the length\n    longest_word = ''\n    for char in characters:\n        if characters[char] >= 4:\n            longest_word = char\n    return longest_word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list=[]\n    for word in text.split():\n        if len(word)>4:\n            list.append(word)\n    return list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    spl = re.findall(r\"[a-zA-Z]+\",text)\n    list_of_words = []\n    for i in spl:\n        if len(i) >= 4:\n            list_of_words.append(i)\n    return list_of_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 4:\n            yield word\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_char_middle(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_char_long_extension(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_char_short_extension(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_char_long_extension_non_bins(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_char_short_extension_non_bins(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_short_non_bins(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins_extension(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_short_non_bins_extension(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins_extension_non_bins(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_short_non_bins_extension_non_bins(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins_extension_non_bins_non_bins(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_short_non_bins_extension_non_bins_non_bins(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins_extension_non_bins_non_bins_extension(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_short_non_bins_extension_non_bins_non_bins_extension(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins_extension_non_bins_non_bins_extension_non_bins(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_short_non_bins_extension_non_bins_non_bins_extension_non_bins(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins_extension_non_bins_non_bins_extension_non_bins_extension(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 3:\n            yield word\ndef find_short_non_bins_extension_non_bins_non_bins_extension_non_bins_extension(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) >= 2:\n            yield word\ndef find_long_non_bins_extension_non_bins_non_bins_extension"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long_pattern = re.compile(r'(\\w) (\\w)')\n    return [match.group(1) for match in char_long_pattern.finditer(text)]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    temp_text = re.split('[^a-zA-Z]',text)\n    if len(temp_text) == 0:\n        return\n    for i in range(len(temp_text)):\n        if len(temp_text[i]) >= 4:\n            if i == 0:\n                return False\n            temp_text[i] = temp_text[i][0:4]\n    return temp_text\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters shorter in a string.\n    '''\n    temp_text = re.split('[^a-zA-Z]',text)\n    if len(temp_text) == 0:\n        return\n    for i in range(len(temp_text)):\n        if len(temp_text[i]) <= 4:\n            if i == 0:\n                return False\n            temp_text[i] = temp_text[i][4:]\n    return temp_text\ndef find_char_long_all(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    temp_text = re.split('[^a-zA-Z]',text)\n    if len(temp_text) == 0:\n        return\n    for i in range(len(temp_text)):\n        if len(temp_text[i]) >= 4:\n            if i == 0:\n                return False\n            temp_text[i] = temp_text[i][0:4]\n    return temp_text\ndef find_char_short_all(text):\n    '''\n    Write a function to find all words which are at least 4 characters shorter in a string.\n    '''\n    temp_text = re.split('[^a-zA-Z]',text)\n    if len(temp_text) == 0:\n        return\n    for i in range(len(temp_text)):\n        if len(temp_text[i]) <= 4:\n            if i == 0:\n                return False\n            temp_text[i] = temp_text[i][4:]\n    return temp_text\ndef find_char_all(text):\n    '''\n    Write a function to find all words which are in a given text.\n    '''\n    temp_text = re.split('[^a-zA-Z]',text)\n    if len(temp_text) == 0:\n        return\n    for i in range(len(temp_text)):\n        if i == 0:\n            return False\n        if temp_text[i].isalpha():\n            temp_text[i] = temp_text[i].lower()\n    return temp_text\ndef remove_stop_words(text):\n    '''\n    Remove stop words from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x for x in temp_text if x not in stop_words]\n    return temp_text\ndef remove_lemmatization(text):\n    '''\n    Remove word from text.\n    '''\n    temp_text = re.split('[^a-zA-Z]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.lower() for x in temp_text]\n    temp_text = [x for x in temp_text if x not in stop_words_lemma]\n    return temp_text\ndef remove_whitespace(text):\n    '''\n    Remove whitespace from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_links(text):\n    '''\n    Remove links from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('\\n',' ') for x in temp_text]\n    return temp_text\ndef remove_numbers(text):\n    '''\n    Remove numbers from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('.','') for x in temp_text]\n    return temp_text\ndef remove_stop_words_numbers(text):\n    '''\n    Remove numbers from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('.','') for x in temp_text]\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_stop_words_special(text):\n    '''\n    Remove special characters from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('\\n',' ') for x in temp_text]\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_lemmatization_numbers(text):\n    '''\n    Remove numbers from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('.','') for x in temp_text]\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_lemmatization_special(text):\n    '''\n    Remove special characters from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('\\n',' ') for x in temp_text]\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_whitespace_numbers(text):\n    '''\n    Remove whitespace from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('.','') for x in temp_text]\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_stop_words_numbers_lemmatization(text):\n    '''\n    Remove numbers from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('.','') for x in temp_text]\n    temp_text = [x for x in temp_text if x!='']\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_stop_words_special_numbers(text):\n    '''\n    Remove special characters from text.\n    '''\n    temp_text = re.split('[^a-zA-Z0-9]',text)\n    if len(temp_text) == 0:\n        return\n    temp_text = [x.replace('\\n',' ') for x in temp_text]\n    temp_text = [x for x in temp_text if x!='']\n    return temp_text\ndef remove_stop_words_special_lemmatization(text):\n    '''\n    Remove special characters from text.\n    '''\n    tem"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^A-Za-z0-9]+'\n    return re.findall(pattern,str_,re.I)\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^A-Za-z0-9]+'\n    return re.findall(pattern,str_,re.I)\ndef find_vowel_long(text):\n    '''\n    Write a function to find all words which are at least 3 vowels in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[aeiouAEIOU]+'\n    return re.findall(pattern,str_,re.I)\ndef find_vowel_short(text):\n    '''\n    Write a function to find all words which are at least 3 vowels in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[aeiouAEIOU]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_long(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_short(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_first_long(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_first_short(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_last_long(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_last_short(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_middle_short(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_last_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_last_middle_short(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_middle_last_long(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_consonant_middle_last_short(text):\n    '''\n    Write a function to find all words which are at least 4 consonants in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[^a-zA-Z]+'\n    return re.findall(pattern,str_,re.I)\ndef find_vowel_middle_long(text):\n    '''\n    Write a function to find all words which are at least 4 vowels in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[aeiouAEIOU]+'\n    return re.findall(pattern,str_,re.I)\ndef find_vowel_middle_short(text):\n    '''\n    Write a function to find all words which are at least 4 vowels in a string.\n    '''\n    str_ = text.lower().replace(' ','')\n    str_ = str_.replace('.','')\n    str_ = str_.replace(',',' ')\n    pattern = r'[aeiouAEIOU]+'\n    return re.findall(pattern,str_,re.I"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    start_index=0\n    end_index=len(text)-1\n    while start_index <= end_index:\n        if text[start_index].isalpha() and text[start_index].isalpha() and text[start_index].isalpha() and text[start_index].islower():\n            if text[start_index+1].isalpha() and text[start_index+1].isalpha() and text[start_index+1].isalpha() and text[start_index+1].islower():\n                if len(text[start_index:start_index+3]) >= 4:\n                    return text[start_index:start_index+3]\n                elif len(text[start_index+3:start_index+6]) >= 4:\n                    return text[start_index+3:start_index+6]\n        start_index+=1\n    return None\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for i in range(len(nums)):\n        squared.append(nums[i]**2)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # divide the list into a list of squares\n    squares = [i ** 2 for i in nums]\n    # remove the square from the list\n    squares = [num for num in squares if num!= 0]\n    # return the squares\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n    \ndef main():\n    print(\"Square numbers: \")\n    print(square_nums([1,2,3,4,5]))\n    print(\"Square numbers: \")\n    print(square_nums([1,2,3,4,5,6]))\n    print(\"Square numbers: \")\n    print(square_nums([1,2,3,4,5,6,7,8]))\n    print(\"Square numbers: \")\n    print(square_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"Square numbers: \")\n    print(square_nums([1,2,3,4,5,6,7,8,9,10]))\n    print(\"Square numbers: \")\n    print(square_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\n    print(\"Square numbers: \")\n    print(square_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for element in nums:\n        if element == 2:\n            return nums\n        elif element == 3:\n            return nums\n        elif element == 4:\n            return nums\n        elif element == 5:\n            return nums\n        elif element == 6:\n            return nums\n        elif element == 7:\n            return nums\n        elif element == 8:\n            return nums\n        elif element == 9:\n            return nums\n        elif element == 10:\n            return nums\n        elif element == 11:\n            return nums\n        elif element == 12:\n            return nums\n        elif element == 13:\n            return nums\n        elif element == 14:\n            return nums\n        elif element == 15:\n            return nums\n        elif element == 16:\n            return nums\n        elif element == 17:\n            return nums\n        elif element == 18:\n            return nums\n        elif element == 19:\n            return nums\n        elif element == 20:\n            return nums\n        elif element == 21:\n            return nums\n        elif element == 22:\n            return nums\n        elif element == 23:\n            return nums\n        elif element == 24:\n            return nums\n        elif element == 25:\n            return nums\n        elif element == 26:\n            return nums\n        elif element == 27:\n            return nums\n        elif element == 28:\n            return nums\n        elif element == 29:\n            return nums\n        elif element == 30:\n            return nums\n        elif element == 31:\n            return nums\n        elif element == 32:\n            return nums\n        elif element == 33:\n            return nums\n        elif element == 34:\n            return nums\n        elif element == 35:\n            return nums\n        elif element == 36:\n            return nums\n        elif element == 37:\n            return nums\n        elif element == 38:\n            return nums\n        elif element == 39:\n            return nums\n        elif element == 40:\n            return nums\n        elif element == 41:\n            return nums\n        elif element == 42:\n            return nums\n        elif element == 43:\n            return nums\n        elif element == 44:\n            return nums\n        elif element == 45:\n            return nums\n        elif element == 46:\n            return nums\n        elif element == 47:\n            return nums\n        elif element == 48:\n            return nums\n        elif element == 49:\n            return nums\n        elif element == 50:\n            return nums\n        elif element == 51:\n            return nums\n        elif element == 52:\n            return nums\n        elif element == 53:\n            return nums\n        elif element == 54:\n            return nums\n        elif element == 55:\n            return nums\n        elif element == 56:\n            return nums\n        elif element == 57:\n            return nums\n        elif element == 58:\n            return nums\n        elif element == 59:\n            return nums\n        elif element == 60:\n            return nums\n        elif element == 61:\n            return nums\n        elif element == 62:\n            return nums\n        elif element == 63:\n            return nums\n        elif element == 64:\n            return nums\n        elif element == 65:\n            return nums\n        elif element == 66:\n            return nums\n        elif element == 67:\n            return nums\n        elif element == 68:\n            return nums\n        elif element == 69:\n            return nums\n        elif element == 70:\n            return nums\n        elif element == 71:\n            return nums\n        elif element == 72:\n            return nums\n        elif element == 73:\n            return nums\n        elif element == 74:\n            return nums\n        elif element == 75:\n            return nums\n        elif element == 76:\n            return nums\n        elif element == 77:\n            return nums\n        elif element == 78:\n            return nums\n        elif element == 79:\n            return nums\n        elif element == 80:\n            return nums\n        elif element == 81:\n            return nums\n        elif element == 82:\n            return nums\n        elif element == 83:\n            return nums\n        elif element == 84:\n            return nums\n        elif element == 85:\n            return nums\n        elif element == 86:\n            return nums\n        elif element == 87:\n            return nums\n        elif element == 88:\n            return nums\n        elif element == 89:\n            return nums\n        elif element == 90:\n            return nums\n        elif element == 91:\n            return nums\n        elif element == 92:\n            return nums\n        elif element == 93:\n            return nums\n        elif element == 94:\n            return nums\n        elif element == 95:\n            return nums\n        elif element == 96:\n            return nums\n        elif element == 97:\n            return nums\n        elif element == 98:\n            return nums\n        elif element == 99:\n            return nums\n        elif element == 100:\n            return nums\n        elif element == 101:\n            return nums\n        elif element == 102:\n            return nums\n        elif element == 103:\n            return nums\n        elif element == 104:\n            return nums\n        elif element == 105:\n            return nums\n        elif element == 106:\n            return nums\n        elif element == 107:\n            return nums\n        elif element == 108:\n            return nums\n        elif element == 109:\n            return nums\n        elif element == 110:\n            return nums\n        elif element == 111:\n            return nums\n        elif element == 112:\n            return nums\n        elif element == 113:\n            return nums\n        elif element == 114:\n            return nums\n        elif element == 115:\n            return nums\n        elif element == 116:\n            return nums\n        elif element == 117:\n            return nums\n        elif element == 118:\n            return nums\n        elif element == 119:\n            return nums\n        elif element == 120:\n            return nums\n        elif element == 121:\n            return nums\n        elif element == 122:\n            return nums\n        elif element == 123:\n            return nums\n        elif element == 124:\n            return nums\n        elif element == 125:\n            return nums\n        elif element == 126:\n            return nums\n        elif element == 127:\n            return nums\n        elif element == 128:\n            return nums\n        elif element == 129:\n            return nums\n        elif element == 130:\n            return nums\n        elif element == 131:\n            return nums\n        elif element == 132:\n            return nums\n        elif element == 133:\n            return nums\n        elif element == 134:\n            return nums\n        elif element == 135:\n            return nums\n        elif element == 136:\n            return nums\n        elif element == 137:\n            return nums\n        elif element == 138:\n            return nums\n        elif element == 139:\n            return nums\n        elif element == 140:\n            return nums\n        elif element == 141:\n            return nums\n        elif element == 142:\n            return nums\n        elif element == 143:\n            return nums\n        elif element == 144:\n            return nums\n        elif element == 145:\n            return nums\n        elif element == 146:\n            return nums\n        elif element == 147:\n            return nums\n        elif element == 148:\n            return nums\n        elif element == 149:\n            return nums\n        elif element == 150:\n            return nums\n        elif element == 151:\n            return nums\n        elif element == 152:\n            return nums\n        elif element == 153:\n            return nums\n        elif element == 154:\n            return nums\n        elif element == 155:\n            return nums\n        elif element == 15"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    output = []\n    for num in nums:\n        output.append(num * num)\n    return output\n    \n    \n    \n    \n    \ndef reverse(string):\n    '''\n    Write a function that reverses a string.\n    '''\n    output = \"\"\n    for char in string:\n        output = char + output\n    return output\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squared = []\n    for num in nums:\n        squared.append(num**2)\n    \n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for x in nums:\n        squared_list.append(x**2)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # create a new array to store the squares\n    squared_list = []\n    # iterate through each element in the list\n    for num in nums:\n        # create a new square and append it to the list\n        square = num ** 2\n        # add the square to the list\n        squared_list.append(square)\n    # return the squared list\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    a = []\n    for i in range(len(str)):\n        a.append(str.count(str[i]))\n    a.sort(reverse = True)\n    for i in range(len(a)):\n        if a[i] > 0:\n            return a[i]\n    \ndef main():\n    print(find_Rotations(\"helloworld\"))\n    print(find_Rotations(\"ab\"))\n    print(find_Rotations(\"abba\"))\n    print(find_Rotations(\"abcd\"))\n    print(find_Rotations(\"aabb\"))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i=0\n    j=0\n    k=0\n    m=0\n    n=0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[j]==str[i]):\n                m+=1\n            else:\n                n+=1\n        if(m>0):\n            m=0\n        if(n>0):\n            n=0\n        if(m>n):\n            m=0\n            n=0\n        i+=1\n    if(m>n):\n        m=0\n    else:\n        n=0\n    return m+n\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def findRotations(str, n): \n        for i in range(n-1): \n            for j in range(len(str) - 1): \n                if str[j] == str[j+1]: \n                    break\n            else: \n                return 1\n        return 0\n    \n    n = len(str) \n    print(findRotations(str, n)) \n    \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0 \n    i=0\n    while i < len(str): \n        if str[i] == str[i + 1]: \n            rotations += 1 \n        i += 1\n    return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for rot in range(len(str)):\n        if str[rot] == str[rot+1]:\n            count += 1\n    if count > 0:\n        return count\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the minimum number of rotations (greater than 0) needed to get the same string\n    if len(str) <= 3:\n        if str.count(\"1\") >= 2:\n            return 1\n        else:\n            return 0\n    else:\n        rotations = 0\n        for i in range(len(str)-2, -1, -1):\n            if str[i]!= str[i+1] and str[i]!= str[i+2]:\n                rotations += 1\n        return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    M = len(str)\n    count = 0\n    i = 0\n    l = 0\n    r = 0\n    while i < M:\n        # Find the first 'r' and the last 'l' positions\n        while l < M and str[l] == str[l + 1]:\n            l = l + 1\n        while r < M and str[r] == str[r + 1]:\n            r = r + 1\n        # If the positions are the same\n        if r - l + 1 < 2:\n            count = count + 1\n        else:\n            # If we have found one rotations, update the count\n            count = count + 1\n            r = r + 1\n        # Reset the variable\n        l = 0\n        r = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    left = 0\n    right = len(str)-1\n    while left < right:\n        temp = str[left]\n        temp = temp + str[right]\n        right -= 1\n        left += 1\n        if temp < str:\n            left -= 1\n        else:\n            right += 1\n    print(left + right)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        if (i % 2!= 0):\n            rotations = rotations + 1\n    print(rotations)\n    return rotations\nprint(find_Rotations(\"apple\"))    #3\nprint(find_Rotations(\"aabb\"))    #2\nprint(find_Rotations(\"qwertyuiop\"))    #1\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    d={}\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]]+=1\n        else:\n            d[s[i]]=1\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(ch not in s):\n        print(\"Not in string\")\n    else:\n        if(ch == 'a'):\n            s.replace(s[0],\"\")\n        elif(ch == 'A'):\n            s.replace(s[-1],\"\")\n        else:\n            s.replace(s[0],\"\")\n            s.replace(s[-1],\"\")\n        print(s)\n    return s\ndef find_occ_Occ(s,ch):\n    '''\n    Write a python function to find occurrences of a given character in the string.\n    '''\n    if(ch not in s):\n        print(\"Not in string\")\n    else:\n        if(ch == 'a'):\n            s.replace(s[0],\"\")\n        elif(ch == 'A'):\n            s.replace(s[-1],\"\")\n        else:\n            s.replace(s[0],\"\")\n            s.replace(s[-1],\"\")\n        print(s)\n        for i in range(len(s)):\n            if(s[i] == ch):\n                occ_count = s.count(ch)\n                if(occ_count>=2):\n                    print(\"Found Occ\")\n                else:\n                    print(\"Not found Occ\")\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (s[0] == ch):\n        s = s[1:]\n    if (s[-1] == ch):\n        s = s[0:-1]\n    return s \n    "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    occ = 0\n    if ch in s:\n        s = s.replace(ch, \"\")\n        occ = 1\n    if occ == 1:\n        return s\n    else:\n        return remove_Occ(s,ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==1:\n        return s\n    elif len(s)<1:\n        return \"\"\n    elif ch==' ':\n        return s[0:-1]\n    elif ch=='\\n':\n        return s[1:]\n    else:\n        return s[:1]+s[len(s)-1]+s[0:len(s)-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = s[ch-1] #the last char is the one we are removing\n    idx = s.index(ch,1) #the idx is the index of the first occurence of char\n    s = s[:idx] + s[idx+1:] #the new string is the substring of the original string\n    return s \n    \n    \ndef make_O():\n    '''\n    Write a python function to print the even index of a given number.\n    '''\n    print(s.index(even,1))\n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\",2).replace(ch,\"\",3)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[ch]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)): \n        if s[i] == ch: \n            s = s[:i] + s[i + 1:] \n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    list = []\n    if ch not in s:\n        return 'Error: Character not found'\n    else:\n        for i in range(len(s)-1):\n            if s[i] == ch:\n                list.append(i)\n        if len(list) == 0:\n            return 'Error: character not found'\n        else:\n            for j in range(len(list)):\n                if s[list[j]] == ch:\n                    del s[list[j]]\n                    list.append(j)\n                else:\n                    continue\n            if len(list) == 0:\n                return 'Error: character not found'\n            else:\n                return list\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Start from the matrix, keep track of sums of rows\n    # We can do this by removing the values of the columns, but I'd rather use\n    # the matrix as-is\n    S = [sum(row) for row in M]\n    # Start from the list, keep track of the values\n    # of the rows\n    R = [col for col in range(len(M[0]))]\n    # Remove the duplicates, but keep track of the positions\n    positions = []\n    for i in range(len(R)):\n        positions.append(i)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    print(M)\n    R = []\n    for i in range(len(M)):\n        total = 0\n        for j in range(len(M[i])):\n            total += M[i][j]\n        R.append(total)\n    print(R)\n    return sorted(R)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) <= 1:\n        return M\n    if len(M) == 2:\n        return sorted(M[0][:2], key=lambda x: x[1], reverse=True) + sorted(M[1][:2], key=lambda x: x[1], reverse=True)\n    left = [x[0] for x in sorted(M[0][:2], key=lambda x: x[1], reverse=True)]\n    right = [x[0] for x in sorted(M[1][:2], key=lambda x: x[1], reverse=True)]\n    return left + right + sort_matrix(M[2:])[:-1]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i].sort()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Step 1: sort rows\n    new_matrix = []\n    for row in M:\n        sum = 0\n        new_row = []\n        for el in row:\n            sum += el\n            new_row.append(sum)\n        new_matrix.append(new_row)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M)==0:\n        return\n    x=[]\n    for i in range(0,len(M)):\n        x.append(0)\n    for i in range(0,len(M)):\n        for j in range(0,len(M[i])):\n            x[j]=M[i][j]+x[j]\n    for i in range(0,len(M)):\n        for j in range(0,len(M[i])):\n            M[i][j]=x[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if M[i][j] % 2 == 0:\n                M[i][j] = 0\n            else:\n                M[i][j] = M[i][j] + M[i][j]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if M[i][j] % 2 == 0:\n                M[i][j] = 0\n            else:\n                M[i][j] = M[i][j] + M[i][j]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if M[i][j] % 2 == 0:\n                M[i][j] = 0\n            else:\n                M[i][j] = M[i][j] + M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    s = []\n    for i in range(n):\n        s.append(sum(M[i]))\n    s.sort()\n    for i in range(n):\n        M[i] = [M[i][j] for j in range(n)]\n    for i in range(n):\n        M[i] = [sum(M[i]) for i in range(n)]\n    print(s)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda x: x[0])\n    for i in range(len(M)):\n        M[i].append(0)\n    for i in range(len(M)):\n        M[i].pop(0)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''Write your function here\n    :param M: Matrix to sort\n    :return: Sorted matrix\n    '''\n    if len(M) < 2:\n        return M\n    min_sum = M[0][0]\n    for r in range(1, len(M)):\n        min_sum += M[r][0]\n        for c in range(1, len(M[0])):\n            M[r][c] = M[r][c] + M[0][c]\n    for r in range(len(M)):\n        for c in range(len(M[0])):\n            if M[r][c] < min_sum:\n                temp = M[r][c]\n                min_sum = M[r][c]\n                M[r][c] = temp\n    return M\n    \ndef test_sort_matrix():\n    '''\n    Write your own test function\n    '''\n    M = [[3, 5, 7], [2, 4, 6], [1, 8, 9]]\n    print(sort_matrix(M))\n    print(M)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (l>b and h>b) :\n        vol = (l*b*h)/3\n        return vol\n    else :\n        return 0\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * h * b / 6.\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (l*h)/2\n    print('The volume of the triangle is ',Volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*h) * math.pi\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (b*h)/2\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = h*h*b\n    volume = 4 * math.pi * area\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l=float(l)\n    b=float(b)\n    h=float(h)\n    if (l+b+h)>math.pi : \n        return ('Sorry, the volume cannot be calculated.')\n    else :\n        vol = (b*b-4*l*h)\n        return(vol)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l\n    b = h\n    h = b - a\n    vol = h*h\n    return vol\n    \ndef main() :\n    '''\n    Test a function with a different volume and a different height.\n    '''\n    print(\"Volume of a triangle is\",find_Volume(1,1,1))\n    print(\"Volume of a triangle is\",find_Volume(3,3,3))\n    print(\"Volume of a triangle is\",find_Volume(5,4,7))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l == 0 and h == 0 : \n        return 0\n    elif l == 0 : \n        return b / 2\n    elif h == 0 : \n        return a / 2\n    elif l > 0 and h > 0 : \n        return b * h / (3 * l)\n    else : \n        return 'Invalid input'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import numpy as np\n    V = (b**2 - 4*a*h)\n    V = np.sqrt(V)\n    print(V)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # TODO: Write your own function here\n    return re.findall(r'[a-zA-Z_0-9]',text) == []\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # loop through all letters in string\n    for i in range(len(text)):\n        # if letter is in the lowercase\n        if text[i].islower():\n            # if not the letter\n            if text[i]!= '_':\n                # if there is an underscore\n                if text[i] == '_':\n                    # add to array\n                    lowercase_letters.append(text[i])\n    # if there are still letters in the lowercase\n    if len(lowercase_letters) > 0:\n        # return true\n        return True\n    else:\n        # return false\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    text = re.sub(\"[^a-zA-Z0-9]\", \"\", text)\n    text = re.sub(\"_\", \"\", text)\n    return len(text) > 1\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    l=[]\n    for i in range(len(text)):\n        if text[i].isupper() and text[i-1].isalpha() and text[i+1].isalpha():\n            l.append(text[i-1])\n            l.append(text[i+1])\n        elif text[i].islower() and text[i-1].islower() and text[i+1].islower():\n            l.append(text[i-1])\n            l.append(text[i+1])\n        elif text[i].islower() and text[i-1].islower() and not text[i+1].islower():\n            l.append(text[i-1])\n            l.append(text[i])\n        elif text[i].islower() and not text[i-1].islower() and text[i+1].islower():\n            l.append(text[i-1])\n            l.append(text[i+1])\n    if len(l)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Create empty string to return\n    result = ''\n    #Iterate over input string\n    for letter in text:\n        #Add the letter to result string\n        result += letter + '_'\n        #If the letter is not a digit return false\n        if not re.match('[0-9]', letter):\n            return False\n    #Return true if result is not empty and false otherwise\n    return result!= ''\n    \ndef test(string, list_):\n    '''\n    Takes a string and a list of words and prints the number of words and number of consonants in the list. \n    '''\n    #Iterate over the string\n    for item in string:\n        #If the item is a letter in the list print the number of the words\n        if item in list_:\n            print(string.count(item))\n        #Else print the number of the consonants\n        else:\n            print(string.count('c'))\n            \n    \n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-zA-Z0-9\\-_\\s\\n]+', '', text)\n    if text == '':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    '''\n    return re.match(r'[a-z]+\\w+', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^[a-z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'[A-Z]+\\w+', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^[A-Z]+\\w+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[a-z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+\\d+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+\\w+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$', text)!= None\n    '''\n    \n    '''\n    return re.match(r'^\\d+[A-Z]+$'"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-zA-Z]{2,}'\n    return re.search(pattern, text)\ndef text_lowercase_underscore(text):\n    '''\n    Write a function that takes a string and checks whether the string contains sequences of lowercase letters joined with an underscore.\n    '''\n    pattern = r'[a-zA-Z]{2,}'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = re.findall(r'[a-zA-Z]+', text)\n    text_underscore = re.findall(r'\\w+_', text)\n    # print(text_lowercase)\n    # print(text_underscore)\n    if text_lowercase and text_underscore:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower() in re.sub(r'[^a-z]', '_', text)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * len(a))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a > 0:\n        return a*4\n    else:\n        raise ValueError('The side must be non-negative')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return pow(a, 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    square = math.sqrt(a)\n    print(square)\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*(4-a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    from math import sqrt\n    square_side = square(a)\n    square_perimeter = 2*(2*(2*(2*square_side))+2*square_side)\n    square_perimeter = sqrt(square_perimeter)\n    square_perimeter = square_perimeter**(1/2)\n    square_perimeter = square_perimeter**(2)\n    square_perimeter = round(square_perimeter, 2)\n    return square_perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_perimeter = 0\n    side_length = int(a)\n    for i in range(1, side_length+1):\n        square_perimeter += (side_length * i)\n    return square_perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * len(a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # YOUR CODE HERE\n    return (4 * a)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for i in string:\n        if i in string:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in string:\n        if i in string:\n            list_string.append(i)\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.split()\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(lambda x: x in string, string))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    list_string.remove(\" \")\n    list_string.remove(\"-\")\n    list_string.remove(\"[\")\n    list_string.remove(\"]\")\n    list_string.remove(\"[\")\n    list_string.remove(\"]\")\n    list_string.remove(\"<\")\n    list_string.remove(\">\")\n    list_string.remove(\"#\")\n    list_string.remove(\"$\")\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l=[]\n    for i in string:\n        if i in string:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in range(0, len(string)+1)]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for i in string: \n        if i in string[:i]: \n            output.append(i) \n    return output\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string: \n        if char in result:\n            continue\n        result.append(char)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Declare variables\n    start_index = 0\n    end_index = 0\n    removed_chars = 0\n    # Loop through string and update the start and end index for each character present\n    # in second string.\n    for index in range(len(string)):\n        if string[index] =='':\n            start_index = index\n            end_index = index\n        else:\n            removed_chars += 1\n    # Update the variables that are returned\n    return string[:start_index]+string[end_index+removed_chars:]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = arraynums.copy()\n    arraynums = set(arraynums)\n    if len(arraynums)!= len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    x = []\n    for x in arraynums:\n        if x in x:\n            pass\n        else:\n            return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert arraynums[0] == arraynums[1], 'Should be one element'\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                print(i,j)\n                return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(n):\n        for j in range(n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    ans = set()\n    for num in arraynums:\n        if num in ans:\n            return True\n        else:\n            ans.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #TODO: write a function to find whether a given array of integers contains any duplicate element\n    array = arraynums\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums[:]\n    array.sort()\n    for i in range(len(array)):\n        if array[i]!= array[i-1]:\n            return True\n    return False\n    "
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    numArray = arraynums\n    duplicate = []\n    for i in range(len(numArray)):\n        for j in range(len(numArray)):\n            if numArray[i] == numArray[j]:\n                duplicate.append(numArray[j])\n    if len(duplicate) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Array of numbers:\", arraynums)\n    print(\"Is this array contains any duplicate values?\", any(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return None\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%10) == 5 or (x%10) == 4:\n        print(\"It is woodball.\")\n        return True\n    else:\n        print(\"It is not woodball.\")\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 0 or x == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x <= 5\n    "
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 1 and x < 5\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 3 or x <= 9\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [2,4,5,6]: return True\n    else: return False\n    \ndef is_all_four(x): \n    '''\n    Write a function to check if the given number is all four or not.\n    '''\n    if x in [2,4,5,6,7,8]: return True\n    else: return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    is_woodball = False\n    if x > 0 and x <= 6:\n        is_woodball = True\n    else:\n        is_woodball = False\n    return is_woodball\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    num = abs(num)\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num=0\n    for i in range(len(num)-1,-1,-1):\n        if(num[i]<=num[i+1]):\n            rev_num=rev_num*10+num[i]\n            return rev_num\n        else:\n            rev_num=rev_num*10+num[i+1]\n    return rev_num\n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return num\n    else:\n        return num - rev(num//2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num == 1:\n        return False\n    \n    rev = num % 2\n    if num == 2:\n        return True\n    else:\n        return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num[::-1]\n    if num == rev_num:\n        print(\"{} is a reverse number\".format(num))\n    else:\n        print(\"{} is not a reverse number\".format(num))\n    \nnum = int(input(\"Enter a number: \"))\nrev(num)"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = str(num) + \":\"\n    rev_num_reverse = rev_num[::-1]\n    rev_num_int = int(rev_num_reverse)\n    if rev_num_int == 0:\n        return True\n    elif rev_num_int == 2:\n        return True\n    else:\n        return False\n        \ndef rev2(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = str(num) + \":\"\n    rev_num_reverse = rev_num[::-1]\n    rev_num_int = int(rev_num_reverse)\n    if rev_num_int == 2:\n        return True\n    else:\n        return False\n        \ndef rev3(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = str(num) + \":\"\n    rev_num_reverse = rev_num[::-1]\n    rev_num_int = int(rev_num_reverse)\n    if rev_num_int == 2:\n        return True\n    elif rev_num_int == 0:\n        return True\n    elif rev_num_int == 3:\n        return True\n    else:\n        return False\n    \ndef factorial(num):\n    '''\n    Write a python function to check if a given number is a factorial.\n    '''\n    factorial_int = 1\n    if num == 1:\n        return factorial_int\n    for i in range(1,num + 1):\n        factorial_int *= i\n    return factorial_int\n    \ndef fib(num):\n    '''\n    Write a python function to check if a given number is a fibonacci number.\n    '''\n    if num <= 1:\n        return num\n    else:\n        return fib(num - 1) + fib(num - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 0:\n        return rev(num -1)\n    else:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = \"\"\n    if num == 0:\n        rev = \"0\"\n    else:\n        flag = str(num)[::-1]\n        rev = flag[0] + rev[1:]\n    if num < 0:\n        rev = -1 * rev\n    if rev == \"0\":\n        rev = str(num)[::-1]\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    rev2 = 0\n    rev_temp = 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #print(num)\n    rev1 = 0\n    rev2 = 0\n    rev_num = num\n    while rev_num!= 0:\n        rev_num = rev_num // 10\n        rev1 = rev1 * 10 + rev_num % 10\n        if rev1 == num:\n            break\n    while rev_num!= 0:\n        rev_num = rev_num // 10\n        rev2 = rev2 * 10 + rev_num % 10\n        if rev2 == num:\n            break\n    if rev1 == num and rev2 == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_max = int(0)\n    num_max_index = -1\n    for num in arr :\n        if num_max < num :\n            num_max = num\n            num_max_index = arr.index(num)\n    return num_max, num_max_index\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = 0\n    for i in range(len(arr)) :\n        for j in range(i+1,len(arr)) :\n            max_num = arr[j]\n            if max_num > max_num :\n                max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # To find out the largest number that can be formed\n    max = 0\n    for i in range(0,len(arr)) : \n        for j in range(i+1,len(arr)) : \n            if arr[i] + arr[j] > max : \n                max = arr[i] + arr[j]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Define a list to store numbers\n    num_list = []\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr, reverse = True)\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    \n    for i in range(len(arr)) : \n        if arr[i] > max : \n            max = arr[i] \n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr : \n        count = 0\n        for j in str(i) : \n            count += 1\n        if count > max : \n            max = count\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) :\n        num = 0\n        for j in range(i+1,len(arr)) :\n            num += int(arr[j])\n        if num > max_num : \n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = []\n    for i in arr : \n        if(i not in max_num):\n            max_num.append(i)\n    return max(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_value = -9999\n    max_index = 0\n    for i in range(len(arr)-1) : \n        for j in range(i, len(arr)-1) : \n            for k in range(j, len(arr)-1) : \n                for l in range(k, len(arr)-1) : \n                    if arr[l] < arr[l+1] and arr[l] < arr[l-1] : \n                        num = arr[l]\n                        temp = num\n                        break\n            if temp > max_value : \n                max_value = temp\n                max_index = i\n    return max_value, max_index\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x==0 and y==0):\n        return True\n    elif(x==0 and y!=0):\n        return False\n    elif(x!=0 and y==0):\n        return True\n    elif(x!=0 and y!=0):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == -1 and y == -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check to make sure the inputs are an integer \n    while type(x)!= int: \n        x = input('Please enter an integer: ')\n        \n    # check to make sure the inputs are not 0\n    while x == 0: \n        x = input('Please enter an integer greater than 0: ')\n        \n    # check to make sure the inputs are not 0 \n    while y == 0: \n        y = input('Please enter an integer greater than 0: ')\n        \n    # find the difference between both \n    x = abs(x)\n    y = abs(y)\n    \n    # return the two values \n    return x,y\n        "
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0:\n        if y>0:\n            print(\"The numbers are same\")\n        elif y<0:\n            print(\"The numbers are different\")\n        elif y==0:\n            print(\"The numbers are the same\")\n        else:\n            print(\"The numbers are not the same\")\n    else:\n        if y>0:\n            print(\"The numbers are negative\")\n        elif y<0:\n            print(\"The numbers are negative\")\n        elif y==0:\n            print(\"The numbers are negative\")\n        else:\n            print(\"The numbers are not negative\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return x < y\n    else:\n        return x > y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = [1, 0, -1]\n    for i in range(len(signs)):\n        if signs[i] == x and signs[i] == y:\n            return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return (x < y)\n    elif x < y:\n        return (y < x)\n    else:\n        return (x > y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return(x < y)\n    else:\n        return(y < x)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return \"Negative\"\n    elif x < 0 and y > 0:\n        return \"Negative\"\n    elif x > 0 and y > 0:\n        return \"Positive\"\n    elif x > 0 and y < 0:\n        return \"Positive\"\n    elif x < 0 and y < 0:\n        return \"Positive\"\n    elif x > 0 and y > 0:\n        return \"Negative\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x_signs = 0\n    y_signs = 0\n    if x > y:\n        x_signs = 1\n    else:\n        y_signs = 1\n    if x < y:\n        x_signs = -1\n    else:\n        y_signs = -1\n    return x_signs, y_signs\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n <= 0:\n        return\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 1\n    while a <= n:\n        a *= 3\n        b += 1\n    return b\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<3:\n        return 0\n    elif n==3 or n==6 or n==9:\n        return 1\n    else:\n        return is_octagonal(n-1)+is_octagonal(n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i=0\n    while n/4*i+1 <n:\n        i+=1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Your code goes here\n    a = n\n    b = n-1\n    c = n-2\n    d = n-3\n    while a<b:\n        n = c\n        a = c+1\n        c = n-1\n        n = d\n        d = n-1\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i=2\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 1536\n    elif n == 8:\n        return 3328\n    elif n == 9:\n        return 5480\n    elif n == 10:\n        return 10240\n    elif n == 11:\n        return 52880\n    elif n == 12:\n        return 7560\n    elif n == 13:\n        return 12048\n    elif n == 14:\n        return 268435456\n    elif n == 15:\n        return 39158435456\n    elif n == 16:\n        return 65536\n    elif n == 17:\n        return 1048576\n    elif n == 18:\n        return 2097152\n    elif n == 19:\n        return 4194304\n    elif n == 20:\n        return 8388608\n    elif n == 21:\n        return 16777216\n    elif n == 22:\n        return 33554432\n    elif n == 23:\n        return 67108864\n    elif n == 24:\n        return 134217728\n    elif n == 25:\n        return 268435456\n    elif n == 26:\n        return 4194304\n    elif n == 27:\n        return 8388608\n    elif n == 28:\n        return 16777216\n    elif n == 29:\n        return 33554432\n    elif n == 30:\n        return 67108864\n    elif n == 31:\n        return 134217728\n    elif n == 32:\n        return 268435456\n    elif n == 33:\n        return 4194304\n    elif n == 34:\n        return 8388608\n    elif n == 35:\n        return 16777216\n    elif n == 36:\n        return 33554432\n    elif n == 37:\n        return 67108864\n    elif n == 38:\n        return 134217728\n    elif n == 39:\n        return 268435456\n    elif n == 40:\n        return 4194304\n    elif n == 41:\n        return 8388608\n    elif n == 42:\n        return 16777216\n    elif n == 43:\n        return 33554432\n    elif n == 44:\n        return 67108864\n    elif n == 45:\n        return 134217728\n    elif n == 46:\n        return 268435456\n    elif n == 47:\n        return 4194304\n    elif n == 48:\n        return 8388608\n    elif n == 49:\n        return 16777216\n    elif n == 50:\n        return 33554432\n    elif n == 51:\n        return 67108864\n    elif n == 52:\n        return 134217728\n    elif n == 53:\n        return 268435456\n    elif n == 54:\n        return 4194304\n    elif n == 55:\n        return 8388608\n    elif n == 56:\n        return 16777216\n    elif n == 57:\n        return 33554432\n    elif n == 58:\n        return 67108864\n    elif n == 59:\n        return 134217728\n    elif n == 60:\n        return 268435456\n    elif n == 61:\n        return 4194304\n    elif n == 62:\n        return 8388608\n    elif n == 63:\n        return 16777216\n    elif n == 64:\n        return 33554432\n    elif n == 65:\n        return 67108864\n    elif n == 66:\n        return 134217728\n    elif n == 67:\n        return 268435456\n    elif n == 68:\n        return 4194304\n    elif n == 69:\n        return 8388608\n    elif n == 70:\n        return 16777216\n    elif n == 71:\n        return 33554432\n    elif n == 72:\n        return 67108864\n    elif n == 73:\n        return 134217728\n    elif n == 74:\n        return 268435456\n    elif n == 75:\n        return 4194304\n    elif n == 76:\n        return 8388608\n    elif n == 77:\n        return 16777216\n    elif n == 78:\n        return 33554432\n    elif n == 79:\n        return 67108864\n    elif n == 80:\n        return 134217728\n    elif n == 81:\n        return 268435456\n    elif n == 82:\n        return 4194304\n    elif n == 83:\n        return 8388608\n    elif n == 84:\n        return 16777216\n    elif n == 85:\n        return 33554432\n    elif n == 86:\n        return 67108864\n    elif n == 87:\n        return 134217728\n    elif n == 88:\n        return 268435456\n    elif n == 89:\n        return 4194304\n    elif n == 90:\n        return 8388608\n    elif n == 91:\n        return 16777216\n    elif n == 92:\n        return 33554432\n    elif n == 93:\n        return 67108864\n    elif n == 94:\n        return 134217728\n    elif n == 95:\n        return 268435456\n    elif n == 96:\n        return 4194304\n    elif n == 97:\n        return 8388608\n    elif n == 98:\n        return 16777216\n    elif n == 99:\n        return 33554432\n    elif n == 100:\n        return 67108864\n    elif n == 101:\n        return 134217728\n    elif n == 102:\n        return 268435456\n    elif n == 103:\n        return 4194304\n    elif n == 104:\n        return 8388608\n    elif n == 105:\n        return 16777216\n    elif n == 106:\n        return 33554432\n    elif n == 107:\n        return 67108864\n    elif n == 108:\n        return 134217728\n    elif n == 109:\n        return 268435456\n    elif n == 110:\n        return 4194304\n    elif n == 111:\n        return 8388608\n    elif n == 112:\n        return 16777216\n    elif n == 113:\n        return 33554432\n    elif n == 114:\n        return 67108864\n    elif n == 115:\n        return 134217728\n    elif n == 116:\n        return 268435456\n    elif n == 117:\n        return 4194304\n    elif n == 118:\n        return 8388608\n    elif n == 119:\n        return 16777216\n    elif n == 120:\n        return 33554432\n    elif n == 121:\n        return 67108864\n    elif n == 122:\n        return 134217728\n    elif n == 123:\n        return 268435456\n    elif n == 124:\n        return 4194304\n    elif n == 125:\n        return 8388608\n    elif n == 126:\n        return 16777216\n    elif n == 127:\n        return 33554432\n    elif n == 128:\n        return 67108864\n    elif n == 129:\n        return 134217728\n    elif n == 130:\n        return 268435456\n    elif n == 131:\n        return 4194304\n    elif n == 132:\n        return 8388608\n    elif n == 133:\n        return 16777216\n    elif n == 134:\n        return 33554432\n    elif n == 135:\n        return 67108864\n    elif n == 136:\n        return 134217728\n    elif n == 137:\n        return 268435456\n    elif n == 138:\n        return 4194304\n    elif n == 139:\n        return 8388608\n    e"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n == 1:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0: \n        raise ValueError (\"Number must be a non-negative integer.\") \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n * (n+1)//2)\n        \n    # define nth_octagonal \ndef nth_octagonal(n): \n    ''' \n    Return the nth octagonal number, or 0 if it doesn't exist. \n    '''\n    # find the first non-zero integer \n    if n < 0: \n        raise ValueError (\"Number must be a non-negative integer.\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n * (n+1)//2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 49\n    elif n == 8:\n        return 64\n    elif n == 9:\n        return 81\n    elif n == 10:\n        return 100\n    elif n == 11:\n        return 121\n    elif n == 12:\n        return 144\n    elif n == 13:\n        return 167\n    elif n == 14:\n        return 196\n    elif n == 15:\n        return 225\n    elif n == 16:\n        return 256\n    elif n == 17:\n        return 275\n    elif n == 18:\n        return 306\n    elif n == 19:\n        return 325\n    elif n == 20:\n        return 336\n    elif n == 21:\n        return 357\n    elif n == 22:\n        return 366\n    elif n == 23:\n        return 369\n    elif n == 24:\n        return 376\n    elif n == 25:\n        return 375\n    elif n == 26:\n        return 378\n    elif n == 27:\n        return 379\n    elif n == 28:\n        return 384\n    elif n == 29:\n        return 391\n    elif n == 30:\n        return 408\n    elif n == 31:\n        return 423\n    elif n == 32:\n        return 442\n    elif n == 33:\n        return 451\n    elif n == 34:\n        return 466\n    elif n == 35:\n        return 495\n    elif n == 36:\n        return 518\n    elif n == 37:\n        return 533\n    elif n == 38:\n        return 552\n    elif n == 39:\n        return 571\n    elif n == 40:\n        return 628\n    elif n == 41:\n        return 641\n    elif n == 42:\n        return 650\n    elif n == 43:\n        return 675\n    elif n == 44:\n        return 712\n    elif n == 45:\n        return 741\n    elif n == 46:\n        return 766\n    elif n == 47:\n        return 824\n    elif n == 48:\n        return 851\n    elif n == 49:\n        return 870\n    elif n == 50:\n        return 915\n    elif n == 51:\n        return 952\n    elif n == 52:\n        return 971\n    elif n == 53:\n        return 990\n    elif n == 54:\n        return 1021\n    elif n == 55:\n        return 1060\n    elif n == 56:\n        return 1081\n    elif n == 57:\n        return 1098\n    elif n == 58:\n        return 1135\n    elif n == 59:\n        return 1161\n    elif n == 60:\n        return 1188\n    elif n == 61:\n        return 1233\n    elif n == 62:\n        return 1262\n    elif n == 63:\n        return 1291\n    elif n == 64:\n        return 1334\n    elif n == 65:\n        return 1361\n    elif n == 66:\n        return 1388\n    elif n == 67:\n        return 1435\n    elif n == 68:\n        return 1462\n    elif n == 69:\n        return 1491\n    elif n == 70:\n        return 1536\n    elif n == 71:\n        return 1562\n    elif n == 72:\n        return 1589\n    elif n == 73:\n        return 1634\n    elif n == 74:\n        return 1663\n    elif n == 75:\n        return 1692\n    elif n == 76:\n        return 1737\n    elif n == 77:\n        return 1764\n    elif n == 78:\n        return 1791\n    elif n == 79:\n        return 1835\n    elif n == 80:\n        return 1862\n    elif n == 81:\n        return 1891\n    elif n == 82:\n        return 1935\n    elif n == 83:\n        return 1886\n    elif n == 84:\n        return 1911\n    elif n == 85:\n        return 1927\n    elif n == 86:\n        return 1935\n    elif n == 87:\n        return 1911\n    elif n == 88:\n        return 1927\n    elif n == 89:\n        return 1928\n    elif n == 90:\n        return 1935\n    elif n == 91:\n        return 1911\n    elif n == 92:\n        return 1928\n    elif n == 93:\n        return 1935\n    elif n == 94:\n        return 1911\n    elif n == 95:\n        return 1928\n    elif n == 96:\n        return 1935\n    elif n == 97:\n        return 1911\n    elif n == 98:\n        return 1928\n    elif n == 99:\n        return 1935\n    elif n == 100:\n        return 1911\n    elif n == 101:\n        return 1928\n    elif n == 102:\n        return 1935\n    elif n == 103:\n        return 1911\n    elif n == 104:\n        return 1928\n    elif n == 105:\n        return 1935\n    elif n == 106:\n        return 1911\n    elif n == 107:\n        return 1928\n    elif n == 108:\n        return 1935\n    elif n == 109:\n        return 1911\n    elif n == 110:\n        return 1928\n    elif n == 111:\n        return 1935\n    elif n == 112:\n        return 1911\n    elif n == 113:\n        return 1928\n    elif n == 114:\n        return 1935\n    elif n == 115:\n        return 1911\n    elif n == 116:\n        return 1928\n    elif n == 117:\n        return 1935\n    elif n == 118:\n        return 1911\n    elif n == 119:\n        return 1928\n    elif n == 120:\n        return 1935\n    elif n == 121:\n        return 1911\n    elif n == 122:\n        return 1928\n    elif n == 123:\n        return 1935\n    elif n == 124:\n        return 1911\n    elif n == 125:\n        return 1928\n    elif n == 126:\n        return 1935\n    elif n == 127:\n        return 1911\n    elif n == 128:\n        return 1928\n    elif n == 129:\n        return 1935\n    elif n == 130:\n        return 1911\n    elif n == 131:\n        return 1928\n    elif n == 132:\n        return 1935\n    elif n == 133:\n        return 1911\n    elif n == 134:\n        return 1928\n    elif n == 135:\n        return 1935\n    elif n == 136:\n        return 1911\n    elif n == 137:\n        return 1928\n    elif n == 138:\n        return 1935\n    elif n == 139:\n        return 1911\n    elif n == 140:\n        return 1928\n    elif n == 141:\n        return 1935\n    elif n == 142:\n        return 1911\n    elif n == 143:\n        return 1928\n    elif n == 144:\n        return 1935\n    elif n == 145:\n        return 1911\n    elif n == 146:\n        return 1928\n    elif n == 147:\n        return 1935\n    elif n == 148:\n        return 1911\n    elif n == 149:\n        return 1928\n    elif n == 150:\n        return 1935\n    elif n == 151:\n        return 1911\n    elif n == 152:\n        return 1928\n    elif n == 153:\n        return 1935\n    elif n == 154:\n        return 1911\n    elif n == 155:\n        return 1928\n    elif n == 156:\n        return 1935\n    elif n == 157:\n        return 1911\n    elif n == 158:\n        return 1928\n    elif n == 159:\n        return 1935\n    elif n == 160:\n        return 1911\n    elif n == 161:\n        return 1928\n    elif n == 162:\n        return 1935"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return len([x for x in s if sum([int(i) for i in str(x)])==len(str(x))])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = []\n    for i in range(len(s)):\n        temp_substrings = []\n        for j in range(i, len(s)):\n            if sum(s[i:j+1]) == len(s[i:j+1]):\n                temp_substrings.append(s[i:j+1])\n        substrings.append(temp_substrings)\n    return substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(1, len(s)):\n        d[s[i]] += 1\n    return len([i for i in d if d[s[i]] == len(s[i:])])\ndef count_Number_of_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(1, len(s)):\n        for j in range(i, len(s)):\n            d[s[i] + s[j]] += 1\n    return len([i for i in d if d[s[i]] == len(s[i:])])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        j = len(s) - 1\n        while j >= 0:\n            if s[j] > s[j - 1]:\n                break\n            else:\n                j -= 1\n        if j!= i:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l=[]\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if (sum(s[i:j])==s[i]*len(s[i:j]))==True:\n                l.append((i,j))\n    return l\nprint(count_Substrings(\"aabbaccc\"))"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    def is_palindrome(s):\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    res = 0\n    # calculate the number of substrings and their length\n    for i in range(0, l):\n        res += sum([int(c) for c in str(int(s[i]) + int(s[i+1])) if c.isdigit()])\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    L = len(s)\n    n = defaultdict(int)\n    \n    for i in range(L):\n        n[s[i]] += 1\n    \n    for i in n:\n        if n[i] == 0:\n            n[i] = 1\n        else:\n            n[i] += 1\n    \n    return len(n)\n    \n    \n    \nif __name__ == '__main__':\n    print(count_Substrings('abba'))\n    print(count_Substrings('abababab'))\n    print(count_Substrings('abb'))\n    print(count_Substrings('abc'))\n    print(count_Substrings('ab'))\n    print(count_Substrings('acac'))\n    print(count_Substrings('a'))\n    print(count_Substrings('aabb'))\n    print(count_Substrings('aabbb'))\n    print(count_Substrings('aabbccc'))\n    print(count_Substrings('abacd'))\n    print(count_Substrings('abac'))\n    print(count_Substrings('abcdef'))\n    print(count_Substrings('abcabc'))\n    print(count_Substrings('abc'))\n    print(count_Substrings('aab'))\n    print(count_Substrings('aababa'))\n    print(count_Substrings('ababab'))\n    print(count_Substrings('aabbb'))\n    print(count_Substrings('aabbba'))\n    print(count_Substrings('aabbbbbb'))\n    print(count_Substrings('abababc'))\n    print(count_Substrings('abcabab'))\n    print(count_Substrings('abcab'))\n    print(count_Substrings('aabbb'))\n    print(count_Substrings('abab'))\n    print(count_Substrings('abababa'))\n    print(count_Substrings('abababab'))\n    print(count_Substrings('ababab'))\n    print(count_Substrings('ababababa'))\n    print(count_Substrings('abababababababababababababababababababababababababababab'))\n    print(count_Substrings('ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #s = s.replace(\",\",\"\")\n    s = s.replace(' ','')\n    \n    #counts = defaultdict(int)\n    #for i in s:\n        #counts[i] += 1\n    #print(counts)\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        counts[s[i]] += 1\n        \n    for i in range(len(s)):\n        j = i + 1\n        while j < len(s):\n            if s[i] == s[j] and counts[s[i]] == counts[s[j]]:\n                counts[s[i]] -= 1\n                counts[s[j]] += 1\n            j += 1\n    return counts\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #s = s.replace(\",\",\"\")\n    s = s.replace(' ','')\n    \n    #counts = defaultdict(int)\n    #for i in s:\n        #counts[i] += 1\n    #print(counts)\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        j = i + 1\n        while j < len(s):\n            if s[i] == s[j] and counts[s[i]] == counts[s[j]]:\n                counts[s[i]] -= 1\n                counts[s[j]] += 1\n            j += 1\n    return counts\ndef count_substrings_with_target(s,t):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #s = s.replace(\",\",\"\")\n    s = s.replace(' ','')\n    \n    #counts = defaultdict(int)\n    #for i in s:\n        #counts[i] += 1\n    #print(counts)\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        j = i + 1\n        while j < len(s):\n            if s[i] == s[j] and counts[s[i]] == counts[s[j]]:\n                counts[s[i]] -= 1\n                counts[s[j]] += 1\n            j += 1\n    return counts\ndef count_substrings_with_target_num(s,t):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #s = s.replace(\",\",\"\")\n    s = s.replace(' ','')\n    \n    #counts = defaultdict(int)\n    #for i in s:\n        #counts[i] += 1\n    #print(counts)\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        j = i + 1\n        while j < len(s):\n            if s[i] == s[j] and counts[s[i]] == counts[s[j]]:\n                counts[s[i]] -= 1\n                counts[s[j]] += 1\n            j += 1\n    return counts\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=len(s)\n    dp=[0 for i in range(n+1)]\n    for i in range(2,n+1):\n        for j in range(i):\n            if s[j]<=s[i-j-1]:\n                dp[i]=max(dp[i],dp[j]+1)\n    return dp[n]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum=10000\n    for x in xs:\n        if x<minimum:\n            minimum=x\n    return minimum\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return sorted(xs)[0]\n    else:\n        return 0\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = 100000\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n    #print(smallest)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    l = list(set(xs))\n    l.sort()\n    return l[0]\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    for i in range(0,len(xs)):\n        if xs[i] == min(xs):\n            return xs[i]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = None\n    for x in xs:\n        if x < min:\n            min = x\n    return min\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls=[]\n    for x in xs:\n        if x not in ls:\n            ls.append(x)\n    return min(ls)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    largest = xs[0]\n    for x in xs:\n        if x > largest:\n            largest = x\n    return largest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for x in xs:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(test_list[1] - test_list[0])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l = len(test_list)\n    max_diff = 0\n    for i in range(l-2):\n        for j in range(i+2, l):\n            if test_list[i]!= test_list[j]:\n                diff = abs(test_list[i] - test_list[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = -1\n    max_difference_index = 0\n    for idx in range(1, len(test_list)):\n        difference = test_list[idx] - test_list[idx-1]\n        if difference > max_difference:\n            max_difference = difference\n            max_difference_index = idx\n    return max_difference, max_difference_index\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    index = 0\n    max_diff = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] - test_list[index] > max_diff:\n            max_diff = test_list[i] - test_list[index]\n            index = i\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Remove all the duplicates from list.\n    unique_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in unique_list:\n            unique_list.append(test_list[i])\n        else:\n            continue\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)!= 2:\n        return 0\n    max_diff = 0\n    i = 0\n    j = 0\n    while(i < len(test_list)):\n        if(test_list[i][0] > test_list[j][0]):\n            i = i + 1\n        elif(test_list[i][0] < test_list[j][0]):\n            j = j + 1\n        else:\n            diff = test_list[i][0] - test_list[j][0]\n            max_diff = max(max_diff, diff)\n        i = i + 1\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0,len(test_list)-2):\n        for j in range(i+1,len(test_list)-1):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # return the maximum difference between all elements in the given tuple list\n    return max([abs(x[1]-y[1]) for (x, y) in zip(test_list, test_list[1:])])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    answer=0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i]-test_list[j] > answer:\n                answer=test_list[i]-test_list[j]\n    return answer\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst = []\n    for i in range(len(subjectmarks)):\n        lst.append(subjectmarks[i][1])\n    lst = sorted(lst)\n    return lst\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks=[]\n    for i in subjectmarks:\n        subject_marks.append((i[1],i[0]))\n    subject_marks.sort(reverse=True)\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # time1 = time()\n    sortedmarks = sorted(subjectmarks, key=lambda x: x[1])\n    # time2 = time()\n    # print(time2-time1)\n    return sortedmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = []\n    for subject_marks in subjectmarks:\n        subject_marks.append(subject_marks[1])\n        subject_marks.append(subject_marks[2])\n        subject_marks.append(subject_marks[3])\n        subject_marks.append(subject_marks[4])\n        subject_marks.append(subject_marks[5])\n        subject_marks.append(subject_marks[6])\n        subject_marks.append(subject_marks[7])\n        subject_marks.append(subject_marks[8])\n        subject_marks.append(subject_marks[9])\n        subject_marks.append(subject_marks[10])\n        subject_marks.append(subject_marks[11])\n    \n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    def sort(list):\n        for i in range(len(list)):\n            for j in range(i+1, len(list)):\n                if list[i][0] > list[j][0]:\n                    list[i], list[j] = list[j], list[i]\n        return list\n    \n    subjectmarks.sort(key=lambda x:x[1])\n    \n    return sort(subjectmarks)\n    \ndef weighted_average(list, weight):\n    '''\n    Write a function to compute the weighted average of a list of numbers.\n    '''\n    \n    def weighted_average(list, weight):\n        sum = 0\n        for i in range(len(list)):\n            sum += list[i] * weight[i]\n        return sum/sum\n    \n    return weighted_average(list, weight)\n    \ndef max_or_min(list):\n    '''\n    Write a function to find the maximum of a list of numbers.\n    '''\n    \n    def max_or_min(list):\n        maximum = list[0]\n        for i in range(len(list)):\n            if list[i] > maximum:\n                maximum = list[i]\n        return maximum\n        \n    return max_or_min(list)\n    \ndef median(list):\n    '''\n    Write a function to compute the middle value of a list of numbers.\n    '''\n    \n    def median(list):\n        lenght = len(list)\n        if lenght % 2 == 0:\n            return (list[int(lenght / 2)] + list[int(lenght / 2) - 1]) / 2\n        else:\n            return list[int(lenght / 2)]\n            \n    return median(list)\n    \ndef mean(list):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    \n    def mean(list):\n        return sum(list) / len(list)\n    \n    return mean(list)\n    \ndef weighted_mean(list, weight):\n    '''\n    Write a function to compute the weighted mean of a list of numbers.\n    '''\n    \n    def weighted_mean(list, weight):\n        sum = 0\n        for i in range(len(list)):\n            sum += list[i] * weight[i]\n        return sum / sum\n    \n    return weighted_mean(list, weight)\n    \ndef weighted_variance(list, weight):\n    '''\n    Write a function to compute the weighted variance of a list of numbers.\n    '''\n    \n    def weighted_variance(list, weight):\n        sum = 0\n        for i in range(len(list)):\n            sum += weight[i] * list[i]\n        return sum * 1 / sum\n    \n    return weighted_variance(list, weight)\n    \ndef variance(list):\n    '''\n    Write a function to compute the variance of a list of numbers.\n    '''\n    \n    def variance(list):\n        sum = 0\n        for i in range(len(list)):\n            sum += (list[i] - mean(list))**2\n        return sum * 1 / len(list)\n    \n    return variance(list)\n    \ndef variance_r_squared(list):\n    '''\n    Write a function to compute the variance of a list of numbers.\n    '''\n    \n    def variance_r_squared(list):\n        sum = 0\n        for i in range(len(list)):\n            sum += (list[i] - mean(list))**2\n        return 1 - sum**2/sum\n    \n    return variance_r_squared(list)\n    \ndef standard_deviation(list):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    \n    def standard_deviation(list):\n        sum = 0\n        for i in range(len(list)):\n            sum += (list[i] - mean(list))**2\n        return sqrt(sum/len(list))\n    \n    return standard_deviation(list)\n    \ndef standard_deviation_r_squared(list):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    \n    def standard_deviation_r_squared(list):\n        sum = 0\n        for i in range(len(list)):\n            sum += (list[i] - mean(list))**2\n        return 1 - sum**2/sum\n    \n    return standard_deviation_r_squared(list)\n    \ndef harmonic_mean(list):\n    '''\n    Write a function to compute the harmonic mean of a list of numbers.\n    '''\n    \n    def harmonic_mean(list):\n        total = 0\n        for i in range(len(list)):\n            total += 1/(i + 1)\n        return total\n    \n    return harmonic_mean(list)\n    \ndef harmonic_mean_r_squared(list):\n    '''\n    Write a function to compute the harmonic mean of a list of numbers.\n    '''\n    \n    def harmonic_mean_r_squared(list):\n        sum = 0\n        for i in range(len(list)):\n            sum += 1/(i + 1)\n        return 1 - sum**2/sum\n    \n    return harmonic_mean_r_squared(list)\n    \ndef power_mean(list, power):\n    '''\n    Write a function to compute the power of a list of numbers.\n    '''\n    \n    def power(list, power):\n        sum = 0\n        for i in range(len(list)):\n            sum += pow(list[i], power)\n        return sum\n    \n    return power(list, power)\n    \ndef power_mean_r_squared(list, power):\n    '''\n    Write a function to compute the power of a list of numbers.\n    '''\n    \n    def power_mean_r_squared(list, power):\n        sum = 0\n        for i in range(len(list)):\n            sum += pow(list[i], power)\n        return 1 - sum**2/sum\n    \n    return power_mean_r_squared(list, power)\n    \ndef power_variance(list, power):\n    '''\n    Write a function to compute the power of a list of numbers.\n    '''\n    \n    def power_variance(list, power):\n        sum = 0\n        for i in range(len(list)):\n            sum += pow(list[i], power)\n        return sum * 1 / len(list)\n    \n    return power_variance(list, power)\n    \ndef power_variance_r_squared(list, power):\n    '''\n    Write a function to compute the power of a list of numbers.\n    '''\n    \n    def power_variance_r_squared(list, power):\n        sum = 0\n        for i in range(len(list)):\n            sum += pow(list[i], power)\n        return 1 - sum**2/sum\n    \n    return power_variance_r_squared(list, power)\n    \ndef polynomial(list):\n    '''\n    Write a function to compute the polynomial of a list of numbers.\n    '''\n    \n    def polynomial(list):\n        sum = 0\n        for i in range(len(list)):\n            sum += list[i]**i\n        return sum\n    \n    return polynomial(list)\n    \ndef polynomial_r_squared(list):\n    '''\n    Write a function to compute the polynomial of a list of numbers.\n    '''\n    \n    def polynomial_r_squared(list):\n        sum = 0\n        for i in range(len(list)):\n            sum += (list[i]**i)\n        return 1 - sum**2/sum\n    \n    return polynomial_r_squared(list)\n    \ndef polynomial_variance(list, power):\n    '''\n    Write a function to compute the polynomial of a list of numbers.\n    '''\n    \n    def polynomial_variance(list, power):\n        sum = 0\n        for i in range(len(list)):\n            sum += list[i]**power\n    "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return new_marks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) <= 1:\n        return data_list\n    \n    recursive_list_sum(data_list[1:])\n    \n    return [data_list[0], sum(data_list[1:])]\n    \n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return None\n    else:\n        # this would be a good idea to make a generator\n        # and avoid the need of another function\n        # to return the list in a certain order\n        # instead of having to do it on the fly\n        # but that's not the best way to do it\n        # that is because it involves reordering the list\n        # and then appending the new elements\n        # to the original list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data):\n        if type(data)!= list:\n            return [data]\n        else:\n            return flatten(data[0]) + flatten(data[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write the function so that it returns a list with the same elements as the input, but with the sum of its elements\n    # TODO: returned list should be a list with the sum of all its elements\n    \n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # The function should take one argument of type list\n    # The function should flatten the list and return the result\n    # as a single list of ints\n    # Note: You may assume the list is sorted\n    # and that all its elements are either integers or floats\n    def flatten(data_list):\n        '''\n        Return the list flattened to its individual elements\n        '''\n        # '''\n        # Write your code here\n        # '''\n        result = []\n        for element in data_list:\n            if type(element) == int or type(element) == float:\n                result.append(element)\n            else:\n                result.extend(element)\n        return result\n    return flatten(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for el in data_list:\n        if isinstance(el, list):\n            flattened_list.extend(recursive_list_sum(el))\n        else:\n            flattened_list.append(el)\n    return flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    s = 0\n    for elem in data_list:\n        s += elem\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    try:\n        flat_list = [element for sublist in data_list for element in sublist]\n        return sum(flat_list)\n    except:\n        return 0"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    total = 0\n    for element in list:\n        if element > 0:\n            total += 1\n    print(total)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(i > 0 for i in list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i == 0:\n            pos+=1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(i for i in list if i >= 0)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    print(\"The number of positive numbers in the list is: \")\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    print(\"The number of positive numbers in list is {}\".format(len(list)))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            sum += 1\n    return sum\n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 1:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return n\n    # step 1: pick the first number\n    # the longest number is the answer\n    # step 2: pick the number of values that is one greater than the number\n    # that is one less than the number\n    # step 3: the number of ways is the max(1,1/2,1/3,1/4,1/5,1/6,1/7,1/8)\n    \n    # step 4: need to pick n/2 number\n    # n/2 number is the value of the first number\n    # so we can only pick n/2th number as we only pick the first number\n    # so we need to pick the number that is one less than the number\n    # by choosing the first number as it is not a divisor of the number\n    # to choose the number, the previous number is the same as the next number\n    # we can do it in steps 2 and 3, we know the length of the longest divisor of the number\n    \n    # step 5: choose the number that is one greater than the number\n    # we can just add the number to the previous number as we only pick the one that is one greater than the number\n    # to get the number that is one less than the number\n    # we need to pick n/2th number to pick the first number that is one greater than the number\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0] * (n+1)\n    dp[1] = 1\n    for i in range(2,n+1):\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if i == 1:\n            count += 1\n        else:\n            count += (i - 1) * (n - i + 1)\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # // Recursive\n    # // Base case\n    if n <= 0:\n        return 0\n    # // If the input is a subset of the set of integers from 1 to a non-negative int smaller than the sum of the integer set, we can use the integers: \n    if n < sum(range(1, n + 1)):\n        return 1 + bell_number(n - sum(range(1, n + 1)))\n    else:\n        return bell_number(n - sum(range(1, n + 1)))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if (i % 2) == 0:\n            dp[i] = dp[i // 2]\n        else:\n            dp[i] = dp[i // 2] + dp[i % 2]\n    return dp[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    nums = [i for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(i):\n            if j>0 and nums[j] < nums[j+1]:\n                nums[j+1] -= nums[j]\n                nums[j] = -nums[j]\n            if i > j+1 and nums[i] < nums[i-1]:\n                nums[i] = -nums[i]\n    return len(nums)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    sums = [0 for _ in range(n + 1)]\n    sums[0] = 1\n    for i in range(1, n + 1):\n        sums[i] = sums[i - 1] + sums[i]\n    return sums[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Test case: A = [1, 3, 4, 2, 5]\n    # result: True\n    # should be the same result as arr[0:1] = [1,3,4,2,5]\n    # in other words, if arr[0:1] = [1,3,4,2,5], then arr[0:1] = [1,3,4,2,5]\n    # should return True\n    # arr = [1,3,4,2,5]\n    # result: True\n    # should be the same result as arr[0:1] = [1,3,4,2,5]\n    # in other words, if arr[0:1] = [1,3,4,2,5], then arr[0:1] = [1,3,4,2,5]\n    # should return True\n    # arr = [1,3,4,2,5]\n    # result: False\n    # should be the same result as arr[0:1] = [1,3,4,2,5]\n    # in other words, if arr[0:1] = [1,3,4,2,5], then arr[0:1] = [1,3,4,2,5]\n    # should return False\n    # arr = [1,3,4,2,5]\n    # result: False\n    # should be the same result as arr[0:1] = [1,3,4,2,5]\n    # in other words, if arr[0:1] = [1,3,4,2,5], then arr[0:1] = [1,3,4,2,5]\n    # should return False\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # One set of zeros indicates that the array is monotonic\n    # Also, the problem here is, that we are also doing a 0 at the end.\n    if (n == 0): \n        return True\n    # A list of 0's, the only 0 at the end\n    elif (n == 1): \n        return False\n    # A list of 1's, the only 1 at the end\n    elif (n == 2): \n        return False\n    # We are not at the end\n    else: \n        # First, check the 2 sub arrays\n        for i in range(1, n): \n            if A[i] > A[i-1]: \n                return False\n        return True\n    # The problem here is, that we have to check every row of the array \n    # since we are only interested in the columns.\n    # This means that we need to check only the columns\n    # That means that we check only the rows\n    # We also need to check that no 1's or 0's are there at the end of the array\n    # If we have 0's or 1's at the end, then we are not at the end\n    # So, we don't want to check the end of the array, but we want the end\n    # of the row\n    # We can not check the end of the row since it would be out of bounds\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[i] >= A[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A is None:\n        return None\n    if len(A) == 1:\n        return False\n    if A[0] > A[1]:\n        return False\n    if A[-1] < A[0]:\n        return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A[0] > A[1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i in l:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l.index(i) == s.index(i) for i in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if l[0]!= s[0]:\n        return False\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # append in reverse order\n    l.sort(reverse=True)\n    \n    for i in range(0, len(l)):\n        if l[i:i+s] == l[i:i+s][::-1]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i:i+len(l)] == l:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    if len(l) == 0:\n        return True\n    for item in s:\n        if item == l[i]:\n            i += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tup = Input[0]\n    for i in range(len(tup)):\n        if len(tup[i])!= len(tup[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\ndef find_isomorphic(Input):\n    '''\n    Write a function to find the isomorphism of two dictionaries.\n    '''\n    for i in Input:\n        if i not in set(i):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #check the lenght of the tuples to avoid errors\n    lenth = len(Input)\n    if lenth > 0:\n        #get the tuple with the smallest size\n        #first value is the index of smallest size tuple\n        first_size = min(Input)\n        #get the tuple with the smallest size of the remaining tuples\n        smallest_size = min(Input, key=lambda x: x[first_size])\n        if len(smallest_size) == len(Input):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if(len(Input[i]) == len(Input[j])):\n                Output.append(True)\n            else:\n                Output.append(False)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input)-1):\n            if(Input[j][0]!= Input[j+1][0]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        Input.sort()\n        if len(Input[i]) == 0:\n            print('the tuple is empty')\n            return False\n        if len(Input[i])!= len(set(Input[i])):\n            print('the length of each tuple is not equal')\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        flag = True\n        t = []\n        for i in range(len(Input)):\n            for j in range(len(Input)):\n                if i == j:\n                    continue\n                else:\n                    if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                        flag = False\n                        break\n            if flag:\n                break\n            t.append(Input[i])\n        return flag\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)!= len(set(Input)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        # find the index of the smallest item\n        # to be inserted\n        small_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[small_index]:\n                small_index = j\n        # swap the smallest item with the\n        # greater item\n        nums[i], nums[small_index] = nums[small_index], nums[i]\n        # sort the remaining elements\n        # in reverse order\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n        # since i is the smallest, swap\n        # the element with the smallest\n        nums[i], nums[small_index] = nums[small_index], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # write your code here\n    len_nums = len(nums)\n    if len_nums < 2:\n        return nums\n    # step 1: select the middle point\n    m = len_nums // 2\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # if length of list is zero or 1 return it\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(0, len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1: \n        return n\n    elif n == 2: \n        return 4\n    else:\n        return n-dif_Square(n-1) \n        "
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2!= 0:\n        return (dif_Square(n//2) + dif_Square(n//2 - 1))\n    else:\n        return (dif_Square(n//2) + dif_Square(n//2 + 1))\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n-1)**2%10\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return 'No Square'\n    elif n < 0: \n        return 'Negative'\n    elif n > 0: \n        return 'Square'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = str(n)\n    if(square.find('1')!=-1 or square.find('0')!=-1):\n        return False\n    square = int(square)\n    if square<=0:\n        return False\n    return square==square*square\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    elif n % 2 == 0:\n        return abs(n // 2 - n // 4) == abs(n // 4 - (n // 2) // 4)\n    elif n % 2 == 1:\n        return abs(n // 2 - (n // 2) // 2) == abs(n // 4 - (n // 2) // 4)\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is less than or equal to zero\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    # check if the square of the number is less than the number of squares\n    elif n <= n**2:\n        return False\n    # check if the square of the number is greater than the number of squares\n    elif n < n**2:\n        return False\n    # if n is not a multiple of square of number then return false\n    else:\n        return dif_Square(n//n)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if n == n*n:\n        return True\n    elif n > n*n:\n        return False\n    else:\n        return dif_Square(n//2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqr=[]\n    sqr.append(n)\n    square=n\n    if(n<0):\n        square=n*(-1)\n    square=abs(square)\n    while(square>0):\n        sqr.append(square%2)\n        square//=2\n    for i in range(len(sqr)):\n        if(sqr[i]==1):\n            if(len(sqr)-i==2):\n                print(\"Yes\")\n                return\n            else:\n                print(\"No\")\n                return\n        if(sqr[i]==-1):\n            if(len(sqr)-i==2):\n                print(\"Yes\")\n                return\n            else:\n                print(\"No\")\n                return\n    print(\"No\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    count=0\n    a=n//2\n    b=n-a\n    for i in range(0,a+1):\n        for j in range(0,b+1):\n            count=count+1\n    return count\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_list = ['BLACK', 'WHITE', 'RED', 'GREEN', 'BLUE', 'YELLOW', 'PURPLE', 'CYAN', 'BLACK']\n    pattern_list = ['#1E1E1E', '#9C9C9C', '#D8D8D8', '#F2F2F2', '#F6F6F6', '#B2B2B2', '#C0C0C0', '#FFF0F0']\n    \n    for color, pattern in zip(colors, patterns):\n        #print(pattern_list[pattern-1])\n        if pattern_list[pattern-1]!= color_list[color-1]:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_length = len(patterns)\n    patterns_patterns = [colors[i] for i in range(patterns_length)]\n    patterns_colors = [colors[i] for i in range(patterns_length)]\n    \n    for i in range(patterns_length):\n        if patterns[i]!= patterns_patterns[i]:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = ['b','g','r','y']\n    for i in patterns:\n        if i not in pattern:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return colors == patterns[0] or colors == patterns[1]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if all the colors are the same\n    if len(colors)!= len(patterns):\n        return False\n    for color in colors:\n        if not all(color == pattern for pattern in patterns):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_len = len(patterns)\n    pattern_list = []\n    # pattern_list = [0,1,2,3]\n    # pattern_list = [0,1,2,3,4]\n    # pattern_list = [0,1,2,3,4,5]\n    for i in range(pattern_len):\n        pattern_list.append(colors[i] + patterns[i])\n    for i in range(pattern_len):\n        if pattern_list[i] in colors:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # generate a set of all the names of the elements\n    names = set(colors)\n    # convert a pattern array to a set\n    patterns = set(patterns)\n    # find all the elements that are present in the patterns\n    pattern_names = names.intersection(patterns)\n    # if there are no elements present in the patterns, return True\n    if pattern_names == set():\n        return True\n    else:\n        # check if the pattern names are the same in the list\n        if names == pattern_names:\n            # if the names are the same, return True\n            return True\n        else:\n            # if not, return False\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # write your code here\n    for i in range(len(colors)):\n        if i == 0:\n            continue\n        for j in range(i+1, len(colors)):\n            if colors[i] == colors[j] and patterns[i] == patterns[j]:\n                return False\n            elif patterns[i] == patterns[j]:\n                return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = list(colors)\n    patterns = list(patterns)\n    for color in colors:\n        for pattern in patterns:\n            if color in pattern:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = [list(m) for m in patterns]\n    count = 0\n    for pattern in patterns:\n        count += 1\n        for c in pattern:\n            if c in colors:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 1:\n        return test_list\n    else:\n        if len(test_list) < 1:\n            return None\n        else:\n            output = []\n            for i in range(len(test_list)):\n                if test_list[i][0] % K == 0:\n                    output.append(test_list[i])\n            return output"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                if test_list[j][1] % test_list[i][1] == 0:\n                    result.append(test_list[i])\n    \n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    find_tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] % test_list[j][1] == 0:\n                find_tuples_list.append([test_list[i][0], test_list[j][0]])\n    return find_tuples_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for item in test_list:\n        item_as_list = list(item)\n        if(item_as_list[0]%K == 0):\n            tuples.append(item)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def find_tuples_rec(test_list, K, visited):\n        if len(visited) == K:\n            for i in test_list:\n                print(i)\n            return None\n        if len(test_list) == 0:\n            return None\n        for i in test_list:\n            if i not in visited:\n                visited.append(i)\n                # recursion\n                find_tuples_rec(test_list, K, visited)\n                # remove the visited element from the list\n                visited.remove(i)\n    test_list = sorted(list(test_list))\n    find_tuples_rec(test_list, K, [])\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    num_of_tuples = 0\n    for tuple_ in test_list:\n        for element in tuple_:\n            if(element%K == 0):\n                num_of_tuples +=1\n    print(num_of_tuples)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for item in test_list:\n        item = [x for x in item if x % K == 0]\n        if len(item) > 0:\n            yield item\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    count = 0\n    for el in test_list:\n        if el[0] % K == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp_list = []\n    for tup in test_list:\n        if tup[1] % K == 0:\n            temp_list.append(tup)\n    return temp_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        for i in range(K):\n            if tup[i] % i == 0:\n                tuples.append(tup)\n                break\n    return tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1, n+1): \n        if n % i == 0: \n            print (False) \n            break\n    else: \n        print (True)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0 or n == 1: \n        return False\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 1:\n        return True\n    elif n % 10 == 0:\n        return False\n    elif n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Your code here\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 11 or n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False\ndef is_Even(n): \n    '''\n    Write a python function to determine whether a number is even.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\ndef is_Prime(n): \n    '''\n    Write a python function to determine whether a number is prime or not.\n    '''\n    for i in range(2, int(n ** 0.5) + 1): \n        if n % i == 0: \n            return False\n    return True\ndef is_Root(n): \n    '''\n    Write a python function to determine whether a number is a root or not.\n    '''\n    return not is_Div(n) and not is_Even(n) and not is_Prime(n)\ndef is_Harshad(n): \n    '''\n    Write a python function to determine whether a number is a harshad number or not.\n    '''\n    for i in range(1, 100): \n        if is_Prime(i) and is_Even(i): \n            return True\n    return False\ndef main(): \n    print(\"Do you want to calculate the factorial or not?\")\n    print(\"1. Factorial\")\n    print(\"2. Factorial or not?\")\n    print(\"3. Exit\")\n    n = input()\n    if n == \"1\": \n        print(\"Enter a number: \")\n        x = int(input())\n        print(f\"The factorial of {x} is\", factorial(x))\n    elif n == \"2\": \n        print(\"Enter a number: \")\n        x = int(input())\n        print(f\"The factorial of {x} is\", factorial(x))\n    elif n == \"3\":\n        print(\"Exit\")\n    else:\n        print(\"Wrong choice\")\nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    try: \n        len(s)\n    except: \n        return 0\n    else:\n        return len(s) % 2\n    \ndef palindrome(s): \n    '''\n    Write a python function to check whether the words are a palindrome or not.\n    '''\n    try:\n        s[0]\n    except:\n        return 0\n    else:\n        return s[0] == s[-1]\n    \ndef letters(s): \n    '''\n    Write a python function to check whether the letters of a word are in alphabetical order or not.\n    '''\n    try:\n        s.sort()\n    except:\n        return 0\n    else:\n        return s == list(s)\n    \ndef alphabetic_order(s): \n    '''\n    Write a python function to check whether the word is in alphabetical order or not.\n    '''\n    try: \n        s.sort()\n    except:\n        return 0\n    else:\n        return s == list(s)\n    \ndef has_special_characters(s): \n    '''\n    Write a python function to check whether the word contains any of the special characters in it or not.\n    '''\n    try:\n        s.isalnum()\n    except:\n        return 0\n    else:\n        return True\n    \ndef has_any_uppercase(s): \n    '''\n    Write a python function to check whether the word contains any uppercase letters or not.\n    '''\n    try:\n        s.isupper()\n    except:\n        return 0\n    else:\n        return True\n    \ndef has_any_lowercase(s): \n    '''\n    Write a python function to check whether the word contains any lowercase letters or not.\n    '''\n    try:\n        s.islower()\n    except:\n        return 0\n    else:\n        return True\n    \ndef is_word_with_only_alpha(s): \n    '''\n    Write a python function to check whether the word has only alpha characters or not.\n    '''\n    try:\n        s.isalpha()\n    except:\n        return 0\n    else:\n        return True\n    \ndef is_word_with_more_than_one_character(s): \n    '''\n    Write a python function to check whether the word has more than one character or not.\n    '''\n    try:\n        s.isalpha()\n    except:\n        return 0\n    else:\n        return True\n    \ndef is_valid(s): \n    '''\n    Write a python function to check whether the string s contains only letters or not.\n    '''\n    if not isinstance(s, str):\n        return False\n    \n    if len(s) < 2:\n        return False\n    \n    if not s.isalnum():\n        return False\n    \n    if not has_special_characters(s):\n        return False\n    \n    if not has_any_uppercase(s):\n        return False\n    \n    if not has_any_lowercase(s):\n        return False\n    \n    if not has_any_uppercase(s) or not has_any_lowercase(s):\n        return False\n    \n    if not has_special_characters(s):\n        return True\n    \n    if has_any_uppercase(s) or has_any_lowercase(s):\n        return True\n    \n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # if len(s) is odd return True. If not return False.\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code goes here\n    '''\n    if s == '':\n        return True\n    if len(s) % 2 == 1:\n        return False\n    else:\n        return True\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        print(1)\n    else: \n        print(0)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        print(\"The word is not odd\")\n        return 1\n    else:\n        print(\"The word is odd\")\n        return 0\n        \nword_len(\"PYTHON\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code here\n    if len(s)%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) <= 1:\n        return \"length too short\"\n    else:\n        if len(s) % 2 == 0:\n            return \"s is odd\"\n        else:\n            return \"s is even\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0: \n        return -1\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 7\n    else: \n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def find_tetrahedral(n): \n        '''\n        Find the nth tetrahedral number.\n        '''\n        return (n - 1) * (n - 1) * (n - 1) * n\n    \n    return find_tetrahedral(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 1) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        raise ValueError('n must be >= 0')\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n <= 1:\n        return n\n    else:\n        return (n-1) * n + (n-2) * n + n * n + (n-3) * n + n * n + (n-4) * n + n * n + n * n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return 1 + tetrahedral_number(n-1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = 0\n    while i < n:\n        j = 1\n        while j < n:\n            if (i+j) % 2 == 0:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        i += 1\n    return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1: \n        return n \n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    x = 1\n    for i in range(1, n+1):\n        x = x*(n-i)\n    return x\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    a = int(math.log2(n)) + 2\n    b = 1\n    tetra_num = 0\n    tetra_num = 2**(n-1)-1\n    while a>0:\n        tetra_num = tetra_num * b\n        a -= 1\n    return tetra_num\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # your code here\n    return 4 * math.pi * r * r * math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = math.pi * (r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    import math\n    pi = math.pi\n    return pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159\n    v = 0.5 * pi * r * r\n    return v\ndef compute_volume(r):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_perimeter(r):\n    '''\n    Write a function to compute the perimeter of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    perimeter = 2 * v * r\n    return perimeter\ndef compute_area(r):\n    '''\n    Write a function to compute the area of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    area = 4 * pi * v\n    return area\ndef compute_perimeter_of_circle(r):\n    '''\n    Write a function to compute the perimeter of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    perimeter = 2 * v * r\n    return perimeter\ndef compute_circumference(r):\n    '''\n    Write a function to compute the circumference of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    circumference = 2 * v\n    return circumference\ndef compute_area_of_circle(r):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    area = 4 * pi * v\n    return area\ndef compute_volume_of_sphere(r):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_circumference_of_sphere(r):\n    '''\n    Write a function to compute the circumference of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    circumference = 2 * v\n    return circumference\ndef compute_area_of_circle_of_sphere(r):\n    '''\n    Write a function to compute the area of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    area = 4 * pi * v\n    return area\ndef compute_volume_of_circle_of_sphere(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_sphere_of_circle_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_circle_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_perimeter_of_sphere(r):\n    '''\n    Write a function to compute the perimeter of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    perimeter = 2 * v * r\n    return perimeter\ndef compute_area_of_sphere(r):\n    '''\n    Write a function to compute the area of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    area = 4 * pi * v\n    return area\ndef compute_perimeter_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the perimeter of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    perimeter = 2 * v * r\n    return perimeter\ndef compute_circumference_of_sphere(r):\n    '''\n    Write a function to compute the circumference of a sphere.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    circumference = 2 * v\n    return circumference\ndef compute_area_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the area of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    area = 4 * pi * v\n    return area\ndef compute_volume_of_circle_of_sphere(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_circle_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_circumference_of_circle_of_sphere(r):\n    '''\n    Write a function to compute the circumference of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    circumference = 2 * v * r\n    return circumference\ndef compute_area_of_circle_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the area of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    area = 4 * pi * v\n    return area\ndef compute_volume_of_circle_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_sphere_of_circle_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_sphere_of_circle_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_sphere_of_circle_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_volume_of_circle_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the volume of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    return v\ndef compute_circumference_of_circle_of_sphere(r):\n    '''\n    Write a function to compute the circumference of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    circumference = 2 * v * r\n    return circumference\ndef compute_area_of_circle_of_sphere_of_circle(r):\n    '''\n    Write a function to compute the area of a sphere of a circle.\n    '''\n    pi = 3.14159\n    v = volume_sphere(r)\n    area = 4 * pi * v\n    return area\ndef compute_perimeter_of_circle_of_sphere(r):\n    '''\n    Write a function t"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159265358979324 * 3.0\n    return r ** 3 * pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (3.14) * (r ** 3)\n    return vol\ndef volume_cylinder(r, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = math.pi * (r ** 2) * height\n    return vol\ndef area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (3.14) * (r ** 2)\n    return vol\ndef area_cylinder(r, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = (math.pi) * (r ** 2) * height\n    return vol\ndef area_circle(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4 * math.pi * (r ** 2)\n    return vol\ndef distance_between_two_points(p1, p2):\n    '''\n    Return the distance between two points p1 and p2.\n    '''\n    return (p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2\ndef triangle_area(a, b, c):\n    '''\n    Write a function that computes the area of a triangle.\n    '''\n    area = (a * (b + c) ** 2) / 2\n    return area\ndef circle_area(r):\n    '''\n    Write a function that computes the area of a circle.\n    '''\n    area = math.pi * (r ** 2)\n    return area\ndef square_area(r):\n    '''\n    Write a function that computes the area of a square.\n    '''\n    area = r * r * math.pi\n    return area\ndef parallelogram_area(a, b, c):\n    '''\n    Write a function that computes the area of a parallelogram.\n    '''\n    area = (a * (b + c) ** 2) / 2\n    return area\ndef parallelogram_volume(a, b, c):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (a * (b + c) ** 2) / 2\n    return volume\ndef parallelogram_volume_square(a, b, c):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (a * (b + c) ** 2) / 2\n    return volume\ndef parallelogram_volume_circle(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = 4 * math.pi * (r ** 2)\n    return volume\ndef parallelogram_volume_square_circle(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (r ** 2))\n    return volume\ndef parallelogram_volume_square_rectangle(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (a * (b + c) ** 2) / 2\n    return volume\ndef parallelogram_volume_rectangle(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (a * (b + c) ** 2) / 2\n    return volume\ndef parallelogram_volume_square_rectangle_square(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_rectangle_square(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_triangle(a, b, c):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (a * (b + c) ** 2) / 2\n    return volume\ndef parallelogram_volume_triangle_square(a, b, c):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (a * (b + c) ** 2) / 2\n    return volume\ndef parallelogram_volume_circle(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (math.pi * (r ** 2))\n    return volume\ndef parallelogram_volume_circle_square(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (math.pi * (r ** 2))\n    return volume\ndef parallelogram_volume_circle_rectangle(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_square_rectangle_square(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_square_rectangle_square(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_square_square_square(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_triangle_square_square(a, b, c):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_triangle_square_rectangle(a, b, c):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_circle_square_square(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (math.pi * (r ** 2))\n    return volume\ndef parallelogram_volume_circle_square_rectangle(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (math.pi * (r ** 2))\n    return volume\ndef parallelogram_volume_circle_rectangle_square(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (math.pi * (r ** 2))\n    return volume\ndef parallelogram_volume_circle_square_square(r):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (math.pi * (r ** 2))\n    return volume\ndef parallelogram_volume_square_rectangle_square(a, b, c, d):\n    '''\n    Write a function that computes the volume of a parallelogram.\n    '''\n    volume = (4 * math.pi * (a * (b + c) ** 2))\n    return volume\ndef parallelogram_volume_square_rectangle_square(a, b, c, d):\n    '''\n    Write a function that computes the volume o"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * (math.pi * r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_of_cone(r,l):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef surface_area_of_cone(r,l,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)*(h**3)\ndef surface_area_of_square(r):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_of_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_of_cylinder(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*l\ndef volume_of_box(r,l,h):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)*h\ndef volume_of_cylinder_square(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*l*(r**3)\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef sphere_volume_of_cone(r,l):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3)*math.pi*(r**3)*l\ndef sphere_surface_area_of_cone(r,l,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (4/3)*math.pi*(r**3)*l*(h**3)\ndef sphere_volume_of_square(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef sphere_volume_of_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef sphere_surface_area_of_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (4/3)*math.pi*r**3\ndef sphere_volume_of_cylinder(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*l\ndef sphere_surface_area_of_cylinder(r,l,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*l*(h**3)\ndef sphere_volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_of_cone(r,l):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_of_cylinder_square(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_of_cylinder_box(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_sphere_box(r,l):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_cylinder_cylinder(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_box_cylinder(r,l):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return (4/3)*math.pi*(r**3)*l**3\ndef volume_of_sphere_cylinder(r,l):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_cube_cylinder(r,l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_cylinder_sphere(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*r**3*l**3\ndef volume_of_box_sphere(r,l):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return (4/3)*math.pi*r**3*(l**3)\ndef volume_of_cylinder_box(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_sphere_box(r,l):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)*(l**3)\ndef volume_of_cube_box(r,l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (4/3)*math.pi*(r**3)*l**3\ndef volume_of_cylinder_sphere_cylinder(r,l,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*(r**3)*l*(h**3)\ndef volume_of_box_sphere_cylinder(r,l,h):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return (4/3)*math.pi*(r**3)*l*(h**3)\ndef volume_of_cylinder_sphere("
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*math.pow(r,3)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def find_ASCII(strr):\n        for i in strr:\n            if(ord(i) % 26 == int(ord(i)) % 26):\n                return i\n    return find_ASCII(strr)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in range(0,len(strr)):\n        char += chr(ord(strr[i]) % 26)\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # All characters are encoded as ASCII in string\n    # use 'chr' instead of 'ord' to avoid code repetition\n    return chr(int(strr) % ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # The character that is modified is saved as a variable.\n    modified_char = chr(ord(strr[0]) % 26)\n    # The character that is not modified is saved as a variable.\n    # The characters after the'' are checked.\n    unmodified_char = chr(ord(strr[0]) - 1)\n    # The modified character is appended to the string.\n    modified_string = modified_char + unmodified_char * int(str(len(strr)))\n    return modified_string\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    b = \"\"\n    for c in range(0,len(strr)):\n        c = chr(ord(strr[c])%26 + 97)\n        b = b+c\n    return b\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # if length of string is 0\n    if len(strr) == 0:\n        return \"\"\n    \n    # to store the result\n    res = \"\"\n    \n    # for each character of the given string\n    for c in strr:\n        # if the character is a letter then add it to result\n        if c.isalpha():\n            res += chr(ord(c) % 26 + ord('A'))\n        # if the character is a digit then add it to result\n        elif c.isdigit():\n            res += chr(ord(c) % 10 + ord('0'))\n    \n    # return result\n    return res\n    \n    \nprint(get_Char(\"kite\")) # kite\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = ''\n    for i in strr:\n        res += chr(ord(i) % 26 + 65)\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars = []\n    for i in range(len(strr)):\n        if strr[i] <='':\n            chars.append(ord(strr[i]))\n        else:\n            chars.append(ord(' '))\n    result = 0\n    for i in range(len(chars)-1):\n        if i == 0:\n            result += (chars[i] * 2)\n        else:\n            result += (chars[i] * 2) + chars[i-1]\n    return result%26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return(chr(int(strr, 2)))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    result = \"\"\n    \n    # creating a result variable\n    for i in range(len(strr)):\n        result = result + alphabet[ord(strr[i])%26]\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n%10\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n==4:\n        return 7\n    if n==5:\n        return 9\n    if n==6:\n        return 11\n    if n==7:\n        return 13\n    if n==8:\n        return 17\n    if n==9:\n        return 19\n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Our helper function\n    def helper(n, o):\n        if n == 1:\n            return o\n        else:\n            return helper(n-1, o*n)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 1 \n    y = 2\n    while n!= x + y:\n        x = n // 2\n        n = n - x\n    return x \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 4\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n    \n    \nn = int(input())\nprint(sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n    \n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # def sequence():\n    #     '''\n    #     Write a function to find the nth number in the newman conway sequence.\n    #     '''\n    #     # def sequence():\n    #     #     '''\n    #     #     Write a function to find the nth number in the newman conway sequence.\n    #     #     '''\n    #     #     pass\n    #     #     '''\n    #     #     pass\n    #     #     '''\n    #     #     pass\n    #     #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    #     pass\n    #     '''\n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #for some reason the newman is odd\n    if n % 2 == 1:\n        n += 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for x in range(n,n-1,-1):\n            num += (x*(x*x+1))//6\n        return num\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n % 10\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 1+sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(n): \n        print(f'{n} {i}')\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = 3*r**2\n    B = 2*r**3\n    C = 4*(r-2*math.sqrt(r))**3\n    D = 6*(r-4*math.sqrt(r))**3\n    E = 12*(r-8*math.sqrt(r))**3\n    F = 12*(r-16*math.sqrt(r))**3\n    return (A+B+C+D+E+F)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 0\n    for i in range(r):\n        s += (1/3) * (1/3) * (r - i)**3\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = math.pi * (r ** 2)\n    print(area)\n    \n    return area\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r ** 3)\n    print(volume)\n    \n    return volume\n    \ndef volume_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the volume.\n    '''\n    area = l * w * h\n    print(area)\n    \n    return area\n    \ndef surface_area_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the surface area.\n    '''\n    volume = (4/3 * math.pi * l * w * h)\n    print(volume)\n    \n    return volume\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the surface area.\n    '''\n    volume = 4/3 * math.pi * r**3\n    print(volume)\n    \n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the volume.\n    '''\n    volume = 4/3 * math.pi * r**3\n    print(volume)\n    \n    return volume\n    \ndef volume_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the volume.\n    '''\n    volume = (4/3 * math.pi * l * w * h)\n    print(volume)\n    \n    return volume\n    \ndef surface_area_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the surface area.\n    '''\n    volume = (4/3 * math.pi * l * w * h)\n    print(volume)\n    \n    return volume\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the surface area.\n    '''\n    volume = 4/3 * math.pi * r**3\n    print(volume)\n    \n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the volume.\n    '''\n    volume = 4/3 * math.pi * r**3\n    print(volume)\n    \n    return volume\n    \ndef volume_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the volume.\n    '''\n    volume = (4/3 * math.pi * l * w * h)\n    print(volume)\n    \n    return volume\n    \ndef area_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the area.\n    '''\n    area = l * w * h\n    print(area)\n    \n    return area\n    \ndef area_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the area.\n    '''\n    area = 4/3 * math.pi * r**3\n    print(area)\n    \n    return area\n    \ndef area_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the area.\n    '''\n    area = (4/3 * math.pi * l * w * h)\n    print(area)\n    \n    return area\n    \ndef area_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the area.\n    '''\n    area = 4/3 * math.pi * r**3\n    print(area)\n    \n    return area\n    \ndef perimeter_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the perimeter.\n    '''\n    perimeter = (4/3 * math.pi * l * w * h)\n    print(perimeter)\n    \n    return perimeter\n    \ndef perimeter_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the perimeter.\n    '''\n    perimeter = (4/3 * math.pi * r**3)\n    print(perimeter)\n    \n    return perimeter\n    \ndef perimeter_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the perimeter.\n    '''\n    perimeter = (4/3 * math.pi * l * w * h)\n    print(perimeter)\n    \n    return perimeter\n    \ndef perimeter_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the perimeter.\n    '''\n    perimeter = 4/3 * math.pi * r**3\n    print(perimeter)\n    \n    return perimeter\n    \ndef perimeter_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the perimeter.\n    '''\n    perimeter = 4/3 * math.pi * l * w * h\n    print(perimeter)\n    \n    return perimeter\n    \ndef solidity_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the solidity.\n    '''\n    solidity = l * w * h / 4\n    print(solidity)\n    \n    return solidity\n    \ndef solidity_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the solidity.\n    '''\n    solidity = 4/3 * math.pi * r**3\n    print(solidity)\n    \n    return solidity\n    \ndef solidity_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the solidity.\n    '''\n    solidity = (4/3 * math.pi * l * w * h) / 4\n    print(solidity)\n    \n    return solidity\n    \ndef solidity_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the solidity.\n    '''\n    solidity = 4/3 * math.pi * r**3\n    print(solidity)\n    \n    return solidity\n    \ndef solidity_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the solidity.\n    '''\n    solidity = 4/3 * math.pi * l * w * h\n    print(solidity)\n    \n    return solidity\n    \ndef surface_area_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the surface area.\n    '''\n    volume = (4/3 * math.pi * l * w * h)\n    print(volume)\n    \n    return volume\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the surface area.\n    '''\n    volume = 4/3 * math.pi * r**3\n    print(volume)\n    \n    return volume\n    \ndef surface_area_rectangle(l, w, h):\n    '''\n    Write a function that takes the length, width and height of a rectangular object and returns the surface area.\n    '''\n    volume = (4/3 * math.pi * l * w * h)\n    print(volume)\n    \n    return volume\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere and returns the surface area.\n    '''\n    volume = 4/3 * math.pi * r**3\n    print(volume)\n    \n    return volume"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3*r*math.pi*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14 * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r == 0:\n        return 0\n    elif r == 1:\n        return 0.5*(3.14)**2\n    elif r == 2:\n        return
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3 * math.pi) * (r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    s = 2 * pi * r ** 2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = 0.0\n    for i in range(4):\n        for j in range(i+1):\n            area += (r**(i)*pi)*(1-r**(j))\n    return round(area, 4)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Your code goes here\n    return n\n    \ndef main():\n    '''\n    # Test your code by uncommenting the line below.\n    print(centered_hexagonal_number(2))\n    # Make sure your code works for even and odd numbers.\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n == 0):\n        return 0\n    return (n-1) + (n//2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n/3 * (2*n+1))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    number = 0\n    number = n\n    while True:\n        number = number - 2\n        if number < 0:\n            break\n        if number % 6 == 0:\n            return number\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # n=int(input())\n    # return n*(n+1)/2\n    return n*(n+1)/6\n    "
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n < 0):\n        return 0\n    elif (n > 0):\n        return (n * (n+1) // 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h=n//2\n    if n%2==0:\n        return h+1\n    else:\n        return h+3\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = abs(n)\n    if n == 0:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 9\n    if n == 5:\n        return 13\n    if n == 6:\n        return 21\n    if n == 7:\n        return 28\n    if n == 8:\n        return 34\n    if n == 9:\n        return 41\n    if n == 10:\n        return 46\n    if n == 11:\n        return 53\n    if n == 12:\n        return 61\n    if n == 13:\n        return 72\n    if n == 14:\n        return 84\n    if n == 15:\n        return 91\n    if n == 16:\n        return 96\n    if n == 17:\n        return 103\n    if n == 18:\n        return 121\n    if n == 19:\n        return 144\n    if n == 20:\n        return 171\n    if n == 21:\n        return 182\n    if n == 22:\n        return 195\n    if n == 23:\n        return 207\n    if n == 24:\n        return 233\n    if n == 25:\n        return 261\n    if n == 26:\n        return 275\n    if n == 27:\n        return 293\n    if n == 28:\n        return 321\n    if n == 29:\n        return 345\n    if n == 30:\n        return 371\n    if n == 31:\n        return 405\n    if n == 32:\n        return 441\n    if n == 33:\n        return 451\n    if n == 34:\n        return 463\n    if n == 35:\n        return 483\n    if n == 36:\n        return 491\n    if n == 37:\n        return 503\n    if n == 38:\n        return 521\n    if n == 39:\n        return 545\n    if n == 40:\n        return 571\n    if n == 41:\n        return 613\n    if n == 42:\n        return 651\n    if n == 43:\n        return 673\n    if n == 44:\n        return 711\n    if n == 45:\n        return 745\n    if n == 46:\n        return 761\n    if n == 47:\n        return 775\n    if n == 48:\n        return 801\n    if n == 49:\n        return 845\n    if n == 50:\n        return 871\n    if n == 51:\n        return 903\n    if n == 52:\n        return 941\n    if n == 53:\n        return 955\n    if n == 54:\n        return 971\n    if n == 55:\n        return 985\n    if n == 56:\n        return 1021\n    if n == 57:\n        return 1045\n    if n == 58:\n        return 1061\n    if n == 59:\n        return 1075\n    if n == 60:\n        return 1101\n    if n == 61:\n        return 1151\n    if n == 62:\n        return 1153\n    if n == 63:\n        return 1161\n    if n == 64:\n        return 1175\n    if n == 65:\n        return 1201\n    if n == 66:\n        return 1223\n    if n == 67:\n        return 1231\n    if n == 68:\n        return 1245\n    if n == 69:\n        return 1261\n    if n == 70:\n        return 1273\n    if n == 71:\n        return 1291\n    if n == 72:\n        return 1325\n    if n == 73:\n        return 1341\n    if n == 74:\n        return 1355\n    if n == 75:\n        return 1371\n    if n == 76:\n        return 1401\n    if n == 77:\n        return 1423\n    if n == 78:\n        return 1431\n    if n == 79:\n        return 1445\n    if n == 80:\n        return 1461\n    if n == 81:\n        return 1475\n    if n == 82:\n        return 1501\n    if n == 83:\n        return 1523\n    if n == 84:\n        return 1531\n    if n == 85:\n        return 1545\n    if n == 86:\n        return 1561\n    if n == 87:\n        return 1575\n    if n == 88:\n        return 1601\n    if n == 89:\n        return 1623\n    if n == 90:\n        return 1631\n    if n == 91:\n        return 1645\n    if n == 92:\n        return 1661\n    if n == 93:\n        return 1675\n    if n == 94:\n        return 1701\n    if n == 95:\n        return 1723\n    if n == 96:\n        return 1731\n    if n == 97:\n        return 1745\n    if n == 98:\n        return 1761\n    if n == 99:\n        return 1775\n    if n == 100:\n        return 1801\n    if n == 101:\n        return 1823\n    if n == 102:\n        return 1831\n    if n == 103:\n        return 1845\n    if n == 104:\n        return 1861\n    if n == 105:\n        return 1875\n    if n == 106:\n        return 1900\n    if n == 107:\n        return 1935\n    if n == 108:\n        return 1931\n    if n == 109:\n        return 1932\n    if n == 110:\n        return 1937\n    if n == 111:\n        return 1938\n    if n == 112:\n        return 1939\n    if n == 113:\n        return 1940\n    if n == 114:\n        return 1941\n    if n == 115:\n        return 1942\n    if n == 116:\n        return 1943\n    if n == 117:\n        return 1944\n    if n == 118:\n        return 1945\n    if n == 119:\n        return 1946\n    if n == 120:\n        return 1947\n    if n == 121:\n        return 1948\n    if n == 122:\n        return 1949\n    if n == 123:\n        return 1950\n    if n == 124:\n        return 1951\n    if n == 125:\n        return 1952\n    if n == 126:\n        return 1953\n    if n == 127:\n        return 1954\n    if n == 128:\n        return 1955\n    if n == 129:\n        return 1956\n    if n == 130:\n        return 1957\n    if n == 131:\n        return 1958\n    if n == 132:\n        return 1959\n    if n == 133:\n        return 1960\n    if n == 134:\n        return 1961\n    if n == 135:\n        return 1962\n    if n == 136:\n        return 1963\n    if n == 137:\n        return 1964\n    if n == 138:\n        return 1965\n    if n == 139:\n        return 1966\n    if n == 140:\n        return 1967\n    if n == 141:\n        return 1968\n    if n == 142:\n        return 1969\n    if n == 143:\n        return 1970\n    if n == 144:\n        return 1971\n    if n == 145:\n        return 1972\n    if n == 146:\n        return 1973\n    if n == 147:\n        return 1974\n    if n == 148:\n        return 1975\n    if n == 149:\n        return 1976\n    if n == 150:\n        return 1977\n    if n == 151:\n        return 1978\n    if n == 152:\n        return 1979\n    if n == 153:\n        return 1980\n    if n == 154:\n        return 1981\n    if n == 155:\n        return 1982\n    if n == 156:\n        return 1983\n    if n == 157:\n        return 1984\n    if n == 158:\n        return 1985\n    if n == 159:\n        return 1986\n    if n == 160:\n        return 1987\n    if n == 161:\n        return 1988\n    if n == 162:\n        return 1989\n    if n == 163:\n        return 1990\n    if n == 164:\n        return 1991\n    if n == 165:\n        return 1992\n    if n == 166:\n        return 1993\n    if n == 167:\n        return 1994\n    if n == 168:\n        return 1995\n    if n == 169:\n        return 1996\n    if n == 170:\n        return 1997\n    if n == 171:\n        return 1998\n    if n == 172:\n        return 1999\n    if n == 173:\n        return 2000\n    if n == 174:\n        return 2001\n    if n == 175:\n        return 200"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    for i in range(int(n/2)):\n        if n%4==0:\n            return(n*(n+1))\n        else:\n            n=n-1\n    return(0)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"Type of n must be int\")\n    if n<0:\n        raise ValueError(\"N must be greater than 0\")\n    if n%2==0:\n        if n==0:\n            return '0'\n        elif n%4==0:\n            return '8'\n        elif n%8==0:\n            return '16'\n        else:\n            return '32'\n    elif n%2==1:\n        if n==0:\n            return '1'\n        elif n%4==0:\n            return '4'\n        elif n%8==0:\n            return '8'\n        else:\n            return '16'\n    elif n%4==1:\n        if n==0:\n            return '2'\n        elif n%8==0:\n            return '4'\n        elif n%16==0:\n            return '16'\n        else:\n            return '32'\n    elif n%4==3:\n        if n==0:\n            return '3'\n        elif n%8==0:\n            return '8'\n        elif n%16==0:\n            return '16'\n        else:\n            return '32'\n    elif n%4==2:\n        if n==0:\n            return '4'\n        elif n%8==0:\n            return '16'\n        elif n%16==0:\n            return '32'\n        else:\n            return '64'\n    else:\n        if n==0:\n            return '16'\n        elif n%8==0:\n            return '8'\n        elif n%16==0:\n            return '16'\n        else:\n            return '64'\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    if dict1!= None:\n        merged_dict = dict1.copy()\n    if dict2!= None:\n        merged_dict = dict1.copy()\n        merged_dict.update(dict2)\n    if dict3!= None:\n        merged_dict = dict1.copy()\n        merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v2(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v2_combined_dict(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v2_combined_dict_no_duplicates(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v2_combined_dict_no_duplicates_v2(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v2_combined_dict_no_duplicates_v3(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v3_combined_dict(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v3_combined_dict_no_duplicates(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v3_combined_dict_no_duplicates_v2(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v3_combined_dict_no_duplicates_v3(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v3_combined_dict_no_duplicates_v4(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v4(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v5(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v6(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n    d1.update(d2)\n    d1.update(d3)\n    return d1\ndef merge_dictionaries_v7(dict1,dict2,dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    if d1 is None:\n        d1={}\n    if d2 is None:\n        d2={}\n    if d3 is None:\n        d3={}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            merged[key] = dict1[key] + dict2[key]\n        elif key in dict3.keys():\n            merged[key] = dict3[key]\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = dict()\n    for key in dict1.keys():\n        result_dict[key] = dict1[key]\n    for key in dict2.keys():\n        result_dict[key] = dict2[key]\n    for key in dict3.keys():\n        result_dict[key] = dict3[key]\n    return result_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    '''\n    dict1:\n       {'a': 1, 'b': 2}\n       {'a': 3, 'b': 4}\n       {'a': 5, 'b': 6}\n    '''\n    '''\n    dict2:\n       {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n       {'a': 3, 'b': 5, 'c': 6}\n       {'a': 7, 'b': 8}\n    '''\n    '''\n    dict3:\n       {'a': 1, 'b': 2, 'c': 3}\n    '''\n    '''\n    dict1[key]:\n       {'a': 1, 'b': 2, 'c': 3}\n       {'a': 3, 'b': 5, 'c': 6}\n       {'a': 7, 'b': 8}\n    '''\n    '''\n    dict2[key]:\n       {'a': 1, 'b': 2, 'c': 3}\n       {'a': 3, 'b': 5, 'c': 6}\n       {'a': 7, 'b': 8}\n    '''\n    '''\n    dict3[key]:\n       {'a': 1, 'b': 2, 'c': 3}\n    '''\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = {}\n    dict.update(dict1)\n    dict.update(dict2)\n    dict.update(dict3)\n    return dict\ndef mergesort(dictionary):\n    '''\n    write a function that merges three dictionaries into a single dictionary\n    '''\n    key1 = []\n    key2 = []\n    key3 = []\n    for key,value in dictionary.items():\n        if value == 1:\n            key1.append(key)\n        elif value == 2:\n            key2.append(key)\n        else:\n            key3.append(key)\n    dictionary1 = {}\n    dictionary2 = {}\n    dictionary3 = {}\n    for key1 in key1:\n        dictionary1[key1] = dictionary[key1]\n    for key2 in key2:\n        dictionary2[key2] = dictionary[key2]\n    for key3 in key3:\n        dictionary3[key3] = dictionary[key3]\n    merged_dict = merge_dictionaries_three(dictionary1, dictionary2, dictionary3)\n    return merged_dict\ndef word_counter(d):\n    '''\n    count the words from a dictionary\n    '''\n    word_list = d.values()\n    return len(word_list)\ndef word_length(d):\n    '''\n    write a function that counts the word lengths from a dictionary\n    '''\n    word_list = d.values()\n    return max(word_list) - min(word_list)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = merge_dictionaries_two(dict1[key], value)\n    return merged_dict\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = merge_dictionaries_one(dict1[key], value)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2, dict3)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i not in freq:\n            freq[i]=0\n        freq[i]+=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.defaultdict(int)\n    for x in list1:\n        d[x] += 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.Counter(list1)\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.defaultdict(int)\n    for element in list1:\n        dict1[element] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for each in list1:\n        freq_dict[each] += 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 1\n    if N == 4:\n        return 1\n    if N == 5:\n        return 1\n    if N == 6:\n        return 1\n    if N == 7:\n        return 1\n    if N == 8:\n        return 1\n    if N == 9:\n        return 1\n    if N == 10:\n        return 1\n    if N == 11:\n        return 1\n    if N == 12:\n        return 1\n    if N == 13:\n        return 1\n    if N == 14:\n        return 1\n    if N == 15:\n        return 1\n    if N == 16:\n        return 1\n    if N == 17:\n        return 1\n    if N == 18:\n        return 1\n    if N == 19:\n        return 1\n    if N == 20:\n        return 1\n    if N == 21:\n        return 1\n    if N == 22:\n        return 1\n    if N == 23:\n        return 1\n    if N == 24:\n        return 1\n    if N == 25:\n        return 1\n    if N == 26:\n        return 1\n    if N == 27:\n        return 1\n    if N == 28:\n        return 1\n    if N == 29:\n        return 1\n    if N == 30:\n        return 1\n    if N == 31:\n        return 1\n    if N == 32:\n        return 1\n    if N == 33:\n        return 1\n    if N == 34:\n        return 1\n    if N == 35:\n        return 1\n    if N == 36:\n        return 1\n    if N == 37:\n        return 1\n    if N == 38:\n        return 1\n    if N == 39:\n        return 1\n    if N == 40:\n        return 1\n    if N == 41:\n        return 1\n    if N == 42:\n        return 1\n    if N == 43:\n        return 1\n    if N == 44:\n        return 1\n    if N == 45:\n        return 1\n    if N == 46:\n        return 1\n    if N == 47:\n        return 1\n    if N == 48:\n        return 1\n    if N == 49:\n        return 1\n    if N == 50:\n        return 1\n    if N == 51:\n        return 1\n    if N == 52:\n        return 1\n    if N == 53:\n        return 1\n    if N == 54:\n        return 1\n    if N == 55:\n        return 1\n    if N == 56:\n        return 1\n    if N == 57:\n        return 1\n    if N == 58:\n        return 1\n    if N == 59:\n        return 1\n    if N == 60:\n        return 1\n    if N == 61:\n        return 1\n    if N == 62:\n        return 1\n    if N == 63:\n        return 1\n    if N == 64:\n        return 1\n    if N == 65:\n        return 1\n    if N == 66:\n        return 1\n    if N == 67:\n        return 1\n    if N == 68:\n        return 1\n    if N == 69:\n        return 1\n    if N == 70:\n        return 1\n    if N == 71:\n        return 1\n    if N == 72:\n        return 1\n    if N == 73:\n        return 1\n    if N == 74:\n        return 1\n    if N == 75:\n        return 1\n    if N == 76:\n        return 1\n    if N == 77:\n        return 1\n    if N == 78:\n        return 1\n    if N == 79:\n        return 1\n    if N == 80:\n        return 1\n    if N == 81:\n        return 1\n    if N == 82:\n        return 1\n    if N == 83:\n        return 1\n    if N == 84:\n        return 1\n    if N == 85:\n        return 1\n    if N == 86:\n        return 1\n    if N == 87:\n        return 1\n    if N == 88:\n        return 1\n    if N == 89:\n        return 1\n    if N == 90:\n        return 1\n    if N == 91:\n        return 1\n    if N == 92:\n        return 1\n    if N == 93:\n        return 1\n    if N == 94:\n        return 1\n    if N == 95:\n        return 1\n    if N == 96:\n        return 1\n    if N == 97:\n        return 1\n    if N == 98:\n        return 1\n    if N == 99:\n        return 1\n    if N == 100:\n        return 1\n    if N == 101:\n        return 1\n    if N == 102:\n        return 1\n    if N == 103:\n        return 1\n    if N == 104:\n        return 1\n    if N == 105:\n        return 1\n    if N == 106:\n        return 1\n    if N == 107:\n        return 1\n    if N == 108:\n        return 1\n    if N == 109:\n        return 1\n    if N == 110:\n        return 1\n    if N == 111:\n        return 1\n    if N == 112:\n        return 1\n    if N == 113:\n        return 1\n    if N == 114:\n        return 1\n    if N == 115:\n        return 1\n    if N == 116:\n        return 1\n    if N == 117:\n        return 1\n    if N == 118:\n        return 1\n    if N == 119:\n        return 1\n    if N == 120:\n        return 1\n    if N == 121:\n        return 1\n    if N == 122:\n        return 1\n    if N == 123:\n        return 1\n    if N == 124:\n        return 1\n    if N == 125:\n        return 1\n    if N == 126:\n        return 1\n    if N == 127:\n        return 1\n    if N == 128:\n        return 1\n    if N == 129:\n        return 1\n    if N == 130:\n        return 1\n    if N == 131:\n        return 1\n    if N == 132:\n        return 1\n    if N == 133:\n        return 1\n    if N == 134:\n        return 1\n    if N == 135:\n        return 1\n    if N == 136:\n        return 1\n    if N == 137:\n        return 1\n    if N == 138:\n        return 1\n    if N == 139:\n        return 1\n    if N == 140:\n        return 1\n    if N == 141:\n        return 1\n    if N == 142:\n        return 1\n    if N == 143:\n        return 1\n    if N == 144:\n        return 1\n    if N == 145:\n        return 1\n    if N == 146:\n        return 1\n    if N == 147:\n        return 1\n    if N == 148:\n        return 1\n    if N == 149:\n        return 1\n    if N == 150:\n        return 1\n    if N == 151:\n        return 1\n    if N == 152:\n        return 1\n    if N == 153:\n        return 1\n    if N == 154:\n        return 1\n    if N == 155:\n        return 1\n    if N == 156:\n        return 1\n    if N == 157:\n        return 1\n    if N == 158:\n        return 1\n    if N == 159:\n        return 1\n    if N == 160:\n        return 1\n    if N == 161:\n        return 1\n    if N == 162:\n        return 1\n    if N == 163:\n        return 1\n    if N == 164:\n        return 1\n    if N == 165:\n        return 1\n    if N == 166:\n        return 1\n    if N == 167:\n        return 1\n    if N == 168:\n        return 1\n    if N == 169:\n        return 1\n    if N == 170:\n        return 1\n    if N == 171:\n        return 1\n    if N == 172:\n        return 1\n    if N == 173:\n        return 1\n    if N == 174:\n        return 1\n    if N == 175:\n        return 1\n    if N == 176:\n        return 1\n    if N == 177:\n        return 1\n    if N == 178:\n        return 1\n    if N == 179:\n        return 1\n    if N == 180:\n        return 1\n    if N == 181:\n        return 1\n    if N == 182:\n        return 1\n    if N == 18"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pairs = []\n    for i in range(1,N+1):\n        for j in range(i,N+1):\n            if i < j:\n                pairs.append([i,j])\n    pairs = sorted(pairs)\n    return pairs[1]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    left = 1\n    right = N\n    while left < right:\n        mid = (left + right) // 2\n        num = mid * mid\n        if num < N:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    if N == 1:\n        closest = N\n    else:\n        for i in range(2,N):\n            if N % i == 0:\n                closest = i\n                break\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 2\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(1, N+1):\n        if i <= N:\n            print(i)\n        elif N < i:\n            N = i\n            return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return (min(sorted([num**2 for num in range(N)])))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N % 2 == 0:\n        return 1\n    else:\n        smallest = 2\n        if N >= 3:\n            smallest = (N - 1) // 2\n        if N % 2 == 1:\n            smallest = (N - 1) // 2 + 1\n        return smallest\n    \n    \n    \ndef num_is_multiple(n):\n    '''\n    Given a number, return True if the number is multiple and False if not.\n    '''\n    if n < 0:\n        return False\n    if n % 10 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Check if the n is less than the last number in the list\n    if N < N[len(N)-1]:\n        return N[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = 0\n    for i in range(N):\n        if i == 0 or i == N - 1:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    s=''\n    for i in list1:\n        s+=i\n    max=0\n    for i in s:\n        if len(i)>max:\n            max=len(i)\n    print('the longest word is : '+s)\n    return max\n    "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        max_len = 1\n        list1_length = len(list1[0])\n        for word in list1:\n            word_len = len(word)\n            if word_len > max_len:\n                max_len = word_len\n        return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for i in list1:\n        if len(i) > len(longest):\n            longest = i\n    return len(longest)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    l = list1[0]\n    if len(l) == 1:\n        return len(l[0])\n    elif len(l) > 1:\n        for i in range(1,len(l)):\n            if l[i] == l[0]:\n                pass\n            else:\n                break\n        return len(l[i])\n    else:\n        return 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1:\n        len_log = 0\n        for x in range(len(list1)):\n            if list1[x][-1] == \" \":\n                len_log = len_log + 1\n        print(\"Length of the longest word:\", len_log)\n    else:\n        print(\"No word\")\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    '''\n    Write your code here.\n    '''\n    word_list = []\n    str = \"\"\n    for i in range(0, len(list1)):\n        str += list1[i]\n        if(len(str) > len(word_list)):\n            word_list = str\n    return word_list\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for item in list1:\n        length = length + len(item)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for i in range(len(list1)):\n        word = list1[i]\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return (len(max(list1, key=len)))\n    "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #Write your code here\n    return len(list1)"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        for j in range(i,len(str1)):\n            if sub_str in str1[i:j]:\n                return sub_str\n    return -1\n    \ndef sub_string_repeat(str1, sub_str):\n    '''\n    Write a function to check if a string is a sub-string of another string in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        for j in range(i,len(str1)):\n            if sub_str in str1[i:j]:\n                return True\n    return False\n    \ndef reverse(str1):\n    '''\n    Write a function to reverse a string. The string will contain non-word characters only.\n    '''\n    str1=str1[::-1]\n    return str1\n    \ndef reverse_complement(str1):\n    '''\n    Write a function to reverse a complement string. The string will contain non-word characters only.\n    '''\n    str1=str1[::-1]\n    str1=str1[:len(str1)-1]+str1[len(str1)-1]+str1[0:len(str1)-1]\n    return str1\n    \ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a string. The string should consist of space separated words.\n    '''\n    count = 0\n    for i in str1.split():\n        if len(i) > 1:\n            count += 1\n    return count\n    \ndef count_longest_words(str1):\n    '''\n    Write a function to count the longest word in a string. The string should consist of space separated words.\n    '''\n    str1=str1.split()\n    cnt = 0\n    for i in range(len(str1)):\n        cnt += 1\n        if len(str1[i]) > cnt:\n            cnt = len(str1[i])\n    return cnt\n    \ndef longest_word_len(str1):\n    '''\n    Write a function to count the longest word in a string. The string should consist of space separated words.\n    '''\n    str1=str1.split()\n    cnt = 0\n    for i in range(len(str1)):\n        cnt += len(str1[i])\n    return cnt\n    \ndef longest_word_repeat(str1):\n    '''\n    Write a function to check if a string has repeat characters.\n    '''\n    str1=str1.split()\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            cnt += 1\n    return cnt\n    \ndef longest_word_repeat_complement(str1):\n    '''\n    Write a function to check if a string has repeat characters.\n    '''\n    str1=str1.split()\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            cnt += 1\n    return cnt\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('<',' ')\n    str1=str1.replace('>',' ')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n    return str1\n    \ndef remove_noise(str1):\n    '''\n    Write a function to remove noise from a given string.\n    '''\n    str1=str1.replace('a',' ')\n    str1=str1.replace('b',' ')\n    str1=str1.replace('c',' ')\n    str1=str1.replace('d',' ')\n    str1=str1.replace('e',' ')\n    str1=str1.replace('f',' ')\n    str1=str1.replace('g',' ')\n    str1=str1.replace('h',' ')\n    str1=str1.replace('i',' ')\n    str1=str1.replace('j',' ')\n    str1=str1.replace('k',' ')\n    str1=str1.replace('l',' ')\n    str1=str1.replace('m',' ')\n    str1=str1.replace('n',' ')\n    str1=str1.replace('o',' ')\n    str1=str1.replace('p',' ')\n    str1=str1.replace('q',' ')\n    str1=str1.replace('r',' ')\n    str1=str1.replace('s',' ')\n    str1=str1.replace('t',' ')\n    str1=str1.replace('u',' ')\n    str1=str1.replace('v',' ')\n    str1=str1.replace('w',' ')\n    str1=str1.replace('x',' ')\n    str1=str1.replace('y',' ')\n    str1=str1.replace('z',' ')\n    str1=str1.replace(' ','')\n    return str1\n    \ndef remove_non_word(str1):\n    '''\n    Write a function to remove non-word characters from a given string.\n    '''\n    str1=str1.replace('a',' ')\n    str1=str1.replace('b',' ')\n    str1=str1.replace('c',' ')\n    str1=str1.replace('d',' ')\n    str1=str1.replace('e',' ')\n    str1=str1.replace('f',' ')\n    str1=str1.replace('g',' ')\n    str1=str1.replace('h',' ')\n    str1=str1.replace('i',' ')\n    str1=str1.replace('j',' ')\n    str1=str1.replace('k',' ')\n    str1=str1.replace('l',' ')\n    str1=str1.replace('m',' ')\n    str1=str1.replace('n',' ')\n    str1=str1.replace('o',' ')\n    str1=str1.replace('p',' ')\n    str1=str1.replace('q',' ')\n    str1=str1.replace('r',' ')\n    str1=str1.replace('s',' ')\n    str1=str1.replace('t',' ')\n    str1=str1.replace('u',' ')\n    str1=str1.replace('v',' ')\n    str1=str1.replace('w',' ')\n    str1=str1.replace('x',' ')\n    str1=str1.replace('y',' ')\n    str1=str1.replace('z',' ')\n    str1=str1.replace(' ','')\n    return str1\n    \ndef remove_space(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    str1=str1.replace(' ',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('<',' ')\n    str1=str1.replace('>',' ')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('  ',' ')\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n    \n    for i in range(len(str1)):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    \n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = []\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            print(i)\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l=[]\n    for i in range(0,len(str1)):\n        for j in range(len(sub_str)):\n            if (sub_str[j]==str1[i]):\n                l.append(str1[i])\n                break\n    if (len(l)==len(str1)):\n        print(l)\n        return l\n    else:\n        print(\"not found\")\n        return None\n    \ndef replace_substr(str1, sub_str, new_str):\n    '''\n    Write a function to replace a substring with a new value in a string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i:i+len(sub_str)]==sub_str):\n            str1=str1.replace(str1[i:i+len(sub_str)],new_str)\n    return str1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    char_counter = dict()\n    for char in sub_str:\n        if char in char_counter:\n            char_counter[char] += 1\n        else:\n            char_counter[char] = 1\n    return char_counter == {}\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) >= len(sub_str):\n        return str1.find(sub_str) == -1\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # your code here\n    if str1==sub_str:\n        return True\n    elif len(sub_str)<len(str1):\n        return False\n    else:\n        for i in range(len(sub_str)):\n            if find_substring(str1[:i]+str1[i+1:],sub_str)==True:\n                return True\n        return False\n        \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # initialize an empty list to store the indices\n    indices = []\n    # loop through each index and check if it is a substring of the string in str1\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            # append index to the list\n            indices.append(i)\n    # check if the list contains a substring of the string in str1\n    if indices == []:\n        # if not, return False\n        return False\n    # check if the index list contains a substring of the string in str1\n    elif indices[-1] == len(str1)-1:\n        # if not, return True\n        return True\n    # loop through the index list\n    else:\n        # loop through the length of the substring\n        for i in range(indices[-1]+1, len(str1)):\n            # if it is a substring of the string\n            if str1[indices[-1]+1:i] == sub_str:\n                # append index to the list\n                indices.append(i)\n        # return True if it is not the last index\n        return False if indices[-1] == len(str1)-1 else True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n in [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5020,5030,5040,5050,5060,5070,5080,5090,5110,5120,5200,5300,5400,5400,5500,5600,5700,5800,5900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7000,7200,7300,7400,7500,7600,7700,7800,7900,8000,8200,8400,8500,8500,8600,8700,8800,8900,9000,9100,9150,9500,9600,9700,9800,9850,9900,9950,10000,10150,10500,10750,10800,10850,10875,10890,10950,10990,11150,11300,11350,11800,11950,1200,12000,12300,12550,12750,12575,12675,12900,12990,13150,13250,13500,13750,13800,13900,14000,14100,14200,14300,14400,14500,14750,14800,14900,1500,15000,15250,15500,15750,15900,15990,16000,16100,16200,16300,16400,16450,16750,16900,16990,17000,17100,17250,17500,17750,17900,18000,18100,18250,18500,18750,18900,19000,19100,19250,19500,19750,19900,20000,20050,20075,20090,20100,20150,20175,20190,20250,20500,20750,20900,21000,21100,2125,2145,2190,22000,22250,22500,22750,22900,23000,23100,23250,23500,23750,23900,24000,24100,24250,24500,24750,24900,25000,25100,25250,25500,25750,25900,26000,26250,26500,26750,26900,27000,27100,27250,27500,27750,27900,28000,28250,28500,28750,28900,29000,29100,29250,29500,29750,29900,3000,30050,30075,30090,30100,30150,30175,30190,30250,30500,30750,30900,31000,31100,3125,3145,3190,3200,32000,32500,33000,33250,33500,33750,33900,34000,34100,34250,34500,34750,34900,35000,35100,35250,35500,35750,35900,36000,36100,36250,36500,36750,36900,37000,37100,37250,37500,37750,37900,38000,38100,38250,38500,38750,38900,39000,39100,39250,39500,39750,39900,40000,40050,40075,40090,4100,41000,41100,41200,41300,41400,41500,41600,41700,41800,41900,42000,43000,43100,43250,43500,43750,43900,44000,44100,44250,44500,44750,44900,45000,45100,45250,45500,45750,45900,46000,46100,46250,46500,46750,46900,47000,47100,47250,47500,47750,47900,48000,48100,48250,48500,48750,48900,49000,49100,49250,49500,49750,49900,5000,5050,50750,50900,51000,51100,51250,51500,51750,51900,52000,52100,52250,52500,52750,52900,53000,53100,53250,53500,53750,53900,54000,54100,54250,54500,54750,54900,55000,55100,55250,55500,55750,55900,56000,56100,56250,56500,56750,56900,57000,57100,57250,57500,57750,57900,58000,58100,58250,58500,58750,58900,59000,59100,59250,59500,59750,59900,6000,6100,6200,6300,6400,6500,6600,6700,6800,6900,7050,7050,70750,70900,7100,7200,7300,7400,7500,7600,7700,7800,7900,8000,8050,80500,80750,80900,81000,81100,81200,81300,81400,81500,81700,81800,81900,82100,82300,82400,82500,82900,83100,83100,84100,84250,84500,85400,86500,89050,89100,89250,89500,89750,89900,90000,9100,9150,91200,9150,91300,91400,91500,91700,91800,91900,92100,92300,92400,92550,92700,92800,92900,93000,93100,94150,94300,94400,94500,94700,94800,94950,95050,95100,95250,95750,96500,96700,97850,98000,98100,98250,98500,98750,98900,99000,99100,99250,99500,99750,99900,10000,10050,10075,10090,10150,10175,10190,10250,10500,10750,10900,11050,11075,11090,11200,11250,11275,11290,11350,11375,11390,11450,11475,11750,11900,11750,12000,12100,12250,12500,12550,12750,12900,12750,12900,13050,13075,13090,13250,13500,13750,13900,13750,14000,14100,14250,14500,14750,14900,14750,14900,15000,15100,15250,15500,15750,15900,15750,15900,16000,16100,16250,16500,16750,16900,16900,17000,17100,17250,17500,17750,17900,18000,18100,18250,18500,18750,18900,19000,19100,19250,19500,19750,19900,20000,20050,20075,20090,20100,20150,20175,20190,20250,20500,20750,20900,21000,21100,2125,2145,2190,22000,22250,22500,22750,22900,23000,23100,23250,23500,23750,23900,24000,24100,24250,24500,24750,24900,25000,25100,25250,25500,25750,25900,26000,26250,26500,26750,26900,27000,27100,27250,27500,27750,27900,28000,28250,28500,28750,28900,29000,29100,29250,29500,29750,29900,30250,30500,30750,3"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # bitwise_and of 8 and 10\n    if n & (n-1) == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n    \ndef is_increasing(n): \n    '''\n    Write a function to check whether the given number is increasing or not.\n    '''\n    return n % 2 == 0\n    \ndef is_decreasing(n): \n    '''\n    Write a function to check whether the given number is decreasing or not.\n    '''\n    return n % 2 == 1\n    \ndef is_number_in_list(n, l): \n    '''\n    Write a function to check whether the given number is in the given list of numbers or not.\n    '''\n    if n in l: \n        return True\n    else: \n        return False\n    \ndef check_empty_list(l): \n    '''\n    Write a function to check whether the given list is empty or not.\n    '''\n    if len(l) == 0: \n        return True\n    else: \n        return False\n    \ndef sort_list(l): \n    '''\n    Write a function to sort the given list of numbers.\n    '''\n    l.sort()\n    return l\n    \ndef print_list(l): \n    '''\n    Write a function to print the given list.\n    '''\n    for i in l: \n        print(i, end=' ')\n    print()\n    \ndef merge_sort(l): \n    '''\n    Write a function to sort the given list of numbers.\n    '''\n    if len(l) == 1: \n        return l\n    \n    middle = int(len(l) / 2)\n    left = merge_sort(l[:middle])\n    right = merge_sort(l[middle:])\n    return merge(left, right)\n    \ndef merge(left, right): \n    '''\n    Write a function to merge the given list of numbers.\n    '''\n    sorted = []\n    left_index = right_index = 0\n    \n    while left_index < len(left) and right_index < len(right): \n        if left[left_index] < right[right_index]: \n            sorted.append(left[left_index])\n            left_index += 1\n        else: \n            sorted.append(right[right_index])\n            right_index += 1\n            \n    while left_index < len(left): \n        sorted.append(left[left_index])\n        left_index += 1\n    \n    while right_index < len(right): \n        sorted.append(right[right_index])\n        right_index += 1\n    \n    return sorted\n    \ndef quick_sort(l): \n    '''\n    Write a function to sort the given list of numbers.\n    '''\n    if len(l) == 1: \n        return l\n    \n    mid = len(l) // 2\n    less = quick_sort(l[:mid])\n    equal = quick_sort(l[mid:])\n    greater = quick_sort(l[mid:])\n    return less + equal + greater\n    \ndef quick_sort_recursive(l): \n    '''\n    Write a function to sort the given list of numbers.\n    '''\n    if len(l) == 1: \n        return l\n    \n    left = 0\n    right = len(l) - 1\n    \n    while left < right: \n        left_index = right // 2\n        right_index = left_index * 2 + left\n        \n        if left_index < right: \n            if l[left_index] < l[left]: \n                l[left], l[left_index] = l[left_index], l[left]\n                left_index = left_index // 2\n            \n            if l[right_index] < l[right]: \n                l[right], l[right_index] = l[right_index], l[right]\n                right_index = right_index // 2\n                \n        if l[left] > l[right]: \n            l[left], l[right] = l[right], l[left]\n            right = right // 2\n    \n    return l\n    \ndef quick_sort_iterative(l): \n    '''\n    Write a function to sort the given list of numbers.\n    '''\n    if len(l) == 1: \n        return l\n    \n    smaller = []\n    equal = []\n    greater = []\n    \n    for index, num in enumerate(l): \n        if is_number_in_list(num, less): \n            less.append(num)\n        elif is_number_in_list(num, equal): \n            equal.append(num)\n        elif is_number_in_list(num, greater): \n            greater.append(num)\n        else: \n            smaller.append(num)\n            \n    return smaller + equal + greater\n    \ndef quick_sort_recursive(l): \n    '''\n    Write a function to sort the given list of numbers.\n    '''\n    if len(l) == 1: \n        return l\n    \n    mid = len(l) // 2\n    less = quick_sort_recursive(l[:mid])\n    equal = quick_sort_recursive(l[mid:])\n    greater = quick_sort_recursive(l[mid:])\n    \n    return less + equal + greater\n    \ndef partition(l, p): \n    '''\n    Write a function to sort the given list of numbers and then sort the given list of numbers.\n    '''\n    less = []\n    equal = []\n    greater = []\n    \n    less.append(l[p])\n    equal.append(l[p])\n    greater.append(l[-1])\n    \n    for i in range(p + 1, len(l)): \n        if is_number_in_list(l[i], less): \n            less.append(l[i])\n        elif is_number_in_list(l[i], equal): \n            equal.append(l[i])\n        elif is_number_in_list(l[i], greater): \n            greater.append(l[i])\n    \n    less.append(l[-1])\n    \n    return less + equal + greater\n    \ndef quick_sort_iterative_recursive(l, p): \n    '''\n    Write a function to sort the given list of numbers and then sort the given list of numbers.\n    '''\n    if len(l) == 1: \n        return l\n    \n    smaller = []\n    equal = []\n    greater = []\n    \n    smaller_index = p\n    equal_index = len(l) - 1\n    greater_index = 0\n    \n    for index, num in enumerate(l): \n        if is_number_in_list(num, lesser): \n            less.append(num)\n            smaller_index = smaller_index - 1\n        elif is_number_in_list(num, equal): \n            equal.append(num)\n            equal_index = equal_index - 1\n        elif is_number_in_list(num, greater): \n            greater.append(num)\n            greater_index = greater_index + 1\n        else: \n            smaller.append(num)\n            smaller_index = smaller_index + 1\n            \n    return smaller + equal + greater\n    \ndef quick_sort_iterative_recursive_mod(l, p): \n    '''\n    Write a function to sort the given list of numbers and then sort the given list of numbers.\n    '''\n    if len(l) == 1: \n        return l\n    \n    smaller = []\n    equal = []\n    greater = []\n    \n    smaller_index = p\n    equal_index = len(l) - 1\n    greater_index = 0\n    \n    for index, num in enumerate(l): \n        if is_number_in_list(num, lesser): \n            less.append(num)\n            smaller_index = smaller_index - 1\n        elif is_number_in_list(num, equal): \n            equal.append(num)\n            equal_index = equal_index - 1\n        elif is_number_in_list(num, greater): \n            greater.append(num)\n            grea"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # TODO:\n    # Implement this function\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = n % 10\n    if (n % 100) == 0: \n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 2!= 0: \n        return False\n    else: \n        return is_undulating(n // 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    while(True): \n        flag = False\n        if n % 2 == 1: \n            n = n / 2\n            flag = True\n        elif n % 2 == 0: \n            n = n - 1\n            flag = True\n        else: \n            flag = False\n            break\n        if flag: \n            print(\"undulating\")\n        else: \n            print(\"not undulating\")\n        n = n + 1\n    return(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1: \n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        if n%10 == 0 and n!= 0:\n            return False\n        else:\n            return is_undulating(n//10)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # Your code here\n    \n    return(a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    return a*power(a,b-1)\n    \nprint(power(10,2))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return power(a,b-1) * a\n    \ndef substract(a,b):\n    '''\n    Write a function to subtract two numbers.\n    '''\n    if b == 0:\n        return a\n    elif b == 1:\n        return 1\n    elif b > 1:\n        return substract(a,b-1) * a\n    \ndef multiply(a,b):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    if b == 0:\n        return a\n    elif b == 1:\n        return 1\n    elif b > 1:\n        return multiply(a,b-1) * a\n    \ndef divide(a,b):\n    '''\n    Write a function to divide two numbers.\n    '''\n    if b == 0:\n        return a\n    elif b == 1:\n        return 1\n    elif b > 1:\n        return divide(a,b-1) * a\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value\n    test_list.sort(key = itemgetter(1))\n    # Find the index of the first value\n    min_index = test_list[0][0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    # uncomment this and run this file to see\n    # print(test_list)\n    # print(type(test_list))\n    # print(test_list)\n    # if(len(test_list)==0):\n    #     print('The list is empty.')\n    #     return\n    # print(len(test_list))\n    # print(test_list[0][0])\n    # print(test_list[0][1])\n    # if(test_list[0][1]<test_list[0][0]):\n    #     return test_list[0][0]\n    # return test_list[0][1]\n    return min(test_list, key=lambda x: x[1])[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    # first, the sorting is in the order of the second value\n    smallest_second = test_list[0]\n    for i in range(0,len(test_list)):\n        if smallest_second[1] < test_list[i][1]:\n            smallest_second = test_list[i]\n    return smallest_second\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    # first, the sorting is in the order of the second value\n    largest_second = test_list[0]\n    for i in range(0,len(test_list)):\n        if largest_second[1] > test_list[i][1]:\n            largest_second = test_list[i]\n    return largest_second\ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the first value of the tuple with the second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    # first, the sorting is in the order of the second value\n    average = 0\n    for i in range(0,len(test_list)):\n        average = average + test_list[i][1]\n    return average/len(test_list)\ndef index_percent(test_list):\n    '''\n    Given a list of tuples, write a function that returns the percentage of the list, rounded to two decimal places.\n    '''\n    if len(test_list) == 0:\n        return None\n    return round(100*len(test_list)/len(test_list[0]),2)\ndef index_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of the tuple with the second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    return test_list[0][1]\ndef index_max(test_list):\n    '''\n    Given a list of tuples, write a function that returns the max value of the tuple with the second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    return test_list[0][1]\ndef index_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the min value of the tuple with the second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    return test_list[0][1]\ndef index_sum_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return test_list[0][1]\ndef index_sum_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return sum([value[1] for value in test_list])\ndef index_min_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the min value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return min([value[1] for value in test_list])\ndef index_max_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the max value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return max([value[1] for value in test_list])\ndef index_min_max(test_list):\n    '''\n    Given a list of tuples, write a function that returns the min and the max value of the tuple with the second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_minimum(test_list), index_maximum(test_list)\ndef index_average_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the first value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_average(test_list)[1]\ndef index_percent_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the percent of the list, rounded to two decimal places.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_percent(test_list)[1]\ndef index_sum_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_sum(test_list)[1]\ndef index_max_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the max value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return max([value[1] for value in test_list])\ndef index_min_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the min value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return min([value[1] for value in test_list])\ndef index_max_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the max value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return max([value[1] for value in test_list])\ndef index_sum_by_index_all(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_sum(test_list)[1]\ndef index_max_by_index_all(test_list):\n    '''\n    Given a list of tuples, write a function that returns the max value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return max([value[1] for value in test_list])\ndef index_sum_by_index_all(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the first value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_sum(test_list)[1]\ndef index_average_by_index_all(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the first value of the tuple with the second value, within a specific index.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_average(test_list)[1]\ndef index_percent_by_index_all(test_list):\n    '''\n    Given a list of tuples, write a function that returns the percent of the list, rounded to two decimal places.\n    '''\n    if len(test_list) == 0:\n        return None\n    return index_percent(test_list)[1]\nde"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code goes here\n    #return min(test_list, key=lambda x: (x[1], x[0]))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #  returns the first value of the tuple in the list\n    #  if there is more than one values with the smallest second value\n    min_vals = test_list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                min_vals = test_list\n    return min_vals[0]\n            \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_second = test_list[0][1]\n    index_list = [i[0] for i in test_list]\n    for i in test_list:\n        if min_second < i[1]:\n            min_second = i[1]\n            index_list = [i[0]]\n    index_list.sort()\n    return index_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def min_second(x):\n        if x[1] < x[0]:\n            return x[0]\n        return x[1]\n    \n    return sorted(test_list, key=itemgetter(1))[0]\n    \n    #return sorted(test_list, key=itemgetter(1))[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))\n    return minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #def sort(list):\n        #return sorted(list, key=lambda item: item[1])\n    return sorted(test_list, key=itemgetter(1))[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0]\n    for lst_obj in lst:\n        if len(lst_obj) < min_len:\n            min_len = len(lst_obj)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] < lst[j][j]:\n                lst[i][j] = lst[j][j]\n    return len(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = 0\n    smallest = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            length = len(lst[i])\n            if length < length:\n                length = length\n                smallest = [lst[i], length]\n    print(smallest)\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    elif len(lst) == 1:\n        return 1\n    else:\n        return min(len(lst[0]),len(lst[1]))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    small = lst[0]\n    min_len = len(lst)\n    for i in lst:\n        if len(i) < len(small):\n            small = i\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst)==0:\n        return \"There is no list\"\n    else:\n        return min(lst, key = len)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # assume that the list is not empty\n    if len(lst) == 0:\n        return -1\n    min = lst[0][1]\n    # create an empty dictionary to store the index of each element of the list\n    min_index = {}\n    for i in range(len(lst)):\n        if lst[i][1] < min:\n            min = lst[i][1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == None:\n        print(\"The given list is empty\")\n        return None\n    else:\n        smallest_list = lst.pop(0)\n        for item in lst:\n            if len(item) < len(smallest_list):\n                smallest_list = item\n        print(\"The smallest list is: \", smallest_list)\n        return smallest_list\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        min_length = lst[0][1]\n        for i in range(len(lst)):\n            if lst[i][1] < min_length:\n                min_length = lst[i][1]\n        return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0][1]\n    for i in range(0, len(lst)):\n        if min > lst[i][1]:\n            min = lst[i][1]\n    return min\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    s = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s += 1\n        i += 1\n    return s\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<=1:\n        return 0\n    for i in range(1,n+1):\n        if n%i==0:\n            if n//i==i:\n                return n//i\n            else:\n                return n//i\n    return 0\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        result = n * (n + 1) // 2\n        result = (n + 1) * (n + 2) // 2\n        return result\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef divisor_with_str(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    if n < 2:\n        return 1\n    elif n == 2:\n        return 2\n    elif n%2 == 0:\n        return 2+divisor_with_str(n//2)\n    else:\n        divisors = divisor_with_str(n-1)\n        divisors.append(divisors)\n        return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n):\n        if n % i == 0:\n            div += 1\n    return div\n        \ndef main():\n    '''\n    This program prints the divisors of the input number.\n    '''\n    num = int(input(\"Enter the number: \"))\n    print(\"The divisors of\", num, \"are:\")\n    print(\"1. \", num, \"/\", divisor(num))\n    \nmain()"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    while n % 2 == 0:\n        n //= 2\n        divisors.append(2)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= int(math.sqrt(n)) + 1:\n                divisors.append(int(math.sqrt(n) / i))\n    if n == 1:\n        divisors.append(1)\n    divisors.append(n)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1_freq = {}\n    for el in list1:\n        for n in el:\n            if n in list1_freq.keys():\n                list1_freq[n] += 1\n            else:\n                list1_freq[n] = 1\n    return list1_freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    #create a dictionary to contain frequencies\n    frequency_dict = {}\n    \n    #iterate through each element in the list\n    for element in list1:\n        #check if the element is in the dictionary\n        if element in frequency_dict:\n            #add 1 to the value\n            frequency_dict[element] = frequency_dict[element] + 1\n        else:\n            #create a new dictionary with the element as key\n            frequency_dict[element] = 1\n    \n    #find the value of the highest key\n    max_frequency = max(frequency_dict.values())\n    \n    #return the dictionary of frequencies\n    return frequency_dict\n    \n    "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for item in list1:\n        item_count = 0\n        for key in item:\n            item_count += 1\n        frequency_dictionary.update({item_count: item})\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in dictionary:\n                dictionary[list1[i][j]] = 1\n            else:\n                dictionary[list1[i][j]] += 1\n    return dictionary"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item not in frequency:\n            frequency[item] = 1\n        else:\n            frequency[item] += 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    count_freq_dict = {}\n    for item in list1:\n        if item in count_freq_dict.keys():\n            count_freq_dict[item] += 1\n        else:\n            count_freq_dict[item] = 1\n    return count_freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        frequency[element[0]] = frequency.get(element[0], 0) + 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    num_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            num_list.append(list1[i][j])\n    freq = {}\n    for i in range(len(num_list)):\n        if num_list[i] not in freq:\n            freq[num_list[i]] = 1\n        else:\n            freq[num_list[i]] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # dictionary = {}\n    # for element in list1:\n    #     if element not in dictionary:\n    #         dictionary[element] = 1\n    #     else:\n    #         dictionary[element] += 1\n    # return dictionary\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_list = []\n    for n in numbers:\n        multiply_list.append(n * len(numbers))\n    return multiply_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    list1 = []\n    for x in numbers:\n        list1.append(x*length)\n    return list1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #Remove all the numbers from the list\n    numbers.remove(numbers[0])\n    result=0\n    #loop for each element\n    for number in numbers:\n        result+=number\n    #calculate the answer\n    return result/len(numbers)\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result = result * numbers[i]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code goes here\n    return(sum(numbers))/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    if numbers:\n        for num in numbers:\n            result = result * num\n        return result\n    else:\n        return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if(len(numbers)==0):\n        return 0\n    elif(len(numbers)==1):\n        return numbers[0]\n    elif(len(numbers)==2):\n        return numbers[0]*numbers[1]\n    else:\n        result=[]\n        for i in range(len(numbers)):\n            result.append(numbers[i]*i)\n        return result\n        \n        \n    \n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers==[]:\n        raise TypeError(\"Invalid input\")\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    dec_to_bin = []\n    \n    # convert from decimal to binary, sort in descending order\n    dec_to_bin.sort(key= lambda n: int(n, 2))\n    \n    # concatenate all binary values into one string\n    binary = ''.join(dec_to_bin)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # remove leading zeros\n    res = str(n).lstrip('0')\n    # convert to base 2\n    return res[::-1].replace(' ', '')\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans = bin(n)\n    ans = ans[2:].zfill(8)\n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    d = str(n)\n    return d\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n:\n        res = (str(n % 2) + res)\n        n = n // 2\n    return res\n    \ndef binary_to_decimal(s):\n    '''\n    Write a function to convert a binary string to its decimal equivalent, represented as an integer.\n    '''\n    x = 0\n    for i in range(len(s)):\n        x = x * 2 + int(s[i])\n    return x\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace('0b','')\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if n == 0: return ''\n    else:\n        str_len = len(str(bin(n))) -2\n        return str(bin(n))[str_len:]\n    \nprint(decimal_to_binary(10)"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    if n == 1:\n        return '1'\n    if n % 2 == 0:\n        return '0' + decimal_to_binary(n//2)\n    else:\n        return '1' + decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    num_str = str(n)\n    return_str = \"\"\n    for i in range(len(num_str)):\n        return_str += bin(int(num_str[i]))[2:].zfill(8)\n    return return_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # this is a little bit of code, a more more efficient way to do this\n    s = str(n)\n    return ''.join(s[i:i+8] for i in range(0, len(s), 8))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = num\n    for num in range(num, 0, -1):\n        if num % 2 == 0:\n            tmp = num\n            while tmp % 2 == 0:\n                tmp //= 2\n            if smallest > tmp:\n                smallest = tmp\n    return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    elif num == 2:\n        return 3\n    elif num == 3:\n        return 4\n    elif num == 4:\n        return 5\n    elif num == 5:\n        return 6\n    elif num == 6:\n        return 7\n    elif num == 7:\n        return 8\n    elif num == 8:\n        return 9\n    elif num == 9:\n        return 10\n    else:\n        return 10 + next_smallest_palindrome(num-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    n = num\n    if n < 1000000:\n        return n\n    \n    i = 0\n    while i < n-2:\n        j = n-1\n        while j >= i and n % 10 == n % 10 % 10:\n            j = j-1\n        i = i+1\n    i = 0\n    while i < n-2:\n        j = n-1\n        while j >= i and n % 10 == n % 10 % 10:\n            j = j-1\n        i = i+1\n        \n    if n % 10 == n % 10 % 10:\n        n -= 1\n    \n    if n == 2:\n        return 0\n    \n    for i in range(2, n):\n        if n % i == 0:\n            break\n    \n    j = n-1\n    while j >= i and n % 10 == n % 10 % 10:\n        j = j-1\n    \n    # we find the largest palindrome, if its less than the next smallest palindrome, we want to start from i, else, we start from j,\n    # we use the same way as svd\n    for i in range(n-1, -1, -1):\n        if n % i == 0:\n            break\n        \n    for j in range(n-1, -1, -1):\n        if n % j == 0:\n            break\n    \n    # we get the palindrome, and get the next smallest palindrome\n    if n == 2:\n        return 0\n    if n % 2!= 0:\n        return (n-1)\n    \n    return n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        if num == num[::-1]:\n            return True\n        return False\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #we want to make sure that the last 2 digits are the same, so we take the last 2 digits\n    last_2_digits = num % 10\n    if last_2_digits == num % 10:\n        last_2_digits += 1\n        \n    #if num is a palindrome, we return it\n    if num == last_2_digits:\n        return num\n    \n    #if it's not a palindrome, we find the smallest palindrome that divides num\n    smallest_palindrome_divider = num % 10\n    \n    for i in range(10, 0, -2):\n        if num % i == 0:\n            for j in range(i, 0, -2):\n                if num % (i*j) == 0:\n                    if num % (i*j) == smallest_palindrome_divider:\n                        smallest_palindrome_divider = i*j\n                    else:\n                        break\n            break\n    return smallest_palindrome_divider\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if (num == 0): return 0\n    if (num == 1): return 1\n    if (num < 10): return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    size = len(num)\n    if size == 1:\n        return num\n    if size == 2:\n        return int(str(num)[0])+int(str(num)[1])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    a = []\n    for i in range(1, num+1):\n        a.append(i)\n    # print(a)\n    for i in range(num-1, 0, -1):\n        # print(a[i])\n        if a[i]!= a[i+1]:\n            a[i] = a[i+1]\n        else:\n            break\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    l = list(str(num))\n    l.sort()\n    for i in range(len(l)-1, -1, -1):\n        if l[i] == l[i+1]:\n            return int(''.join(l[:i] + l[i+2:]))\n        elif l[i] == '0':\n            return '0' + ''.join(l[:i])\n    return '0' + ''.join(l)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # if the number is zero, return the number itself\n    if num == 0:\n        return num\n    # if the number is not a palindrome, return the number itself\n    if num < 0:\n        return num\n    # if the number is prime, return the next number that is smaller than the number itself\n    if num % 2 == 0:\n        return next_smallest_palindrome((num + 1) // 2)\n    # if the number is not prime, return the next number that is not prime\n    else:\n        return (num + 1) % 2\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # Check that the array is not empty\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    assert 0 <= k <= len(arr) - 1, 'k is out of bounds'\n    assert arr[k - 1] == arr[k], 'kth element does not exist'\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # finding the index of the element\n    start = 0\n    end = len(arr) - 1\n    # finding the position of the element\n    position = end\n    while start <= end:\n        # if the current position is not the last element\n        if arr[start] < arr[end]:\n            # if the current element is smaller than the previous element\n            if arr[start] <= arr[end]:\n                # if the current position is greater than the previous element\n                if arr[position] >= arr[start]:\n                    # move the current position index to the next element\n                    position += 1\n                else:\n                    # if the current position is smaller than the previous element\n                    # and the element is not the last element\n                    return arr[start]\n            # if the current position is less than the previous element\n            # and the element is not the last element\n            else:\n                # if the current position is greater than the previous element\n                if arr[position] >= arr[start]:\n                    # move the current position index to the next element\n                    position -= 1\n                else:\n                    # if the current position is smaller than the previous element\n                    # and the element is not the last element\n                    return arr[end]\n        else:\n            # if the current position is greater than the previous element\n            # and the element is not the last element\n            if arr[position] >= arr[start]:\n                # move the current position index to the next element\n                position -= 1\n            else:\n                # if the current position is less than the previous element\n                # and the element is not the last element\n                return arr[start]\n    # if the index is greater than the last element\n    return arr[end]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # indexing starts from 0, so we start with the beginning, since indexing starts from 1\n    # if we get kth element, then we return the first element of the array\n    # since we know that the last element will always be the kth element, we can simply\n    # return it, since we don't want to find the last element, or else we would have\n    # to return the wrong element\n    # to find the kth element, we need to find kth element, since it's the first element\n    # in the array. The next element is the last element of the array, so we need to return\n    # the next element\n    if k == 0:\n        return arr[0]\n    if k > len(arr) - 1:\n        return -1\n    # find the index of the first element which is less than or equal to the kth element\n    left_idx = arr.index(min(arr[arr[k - 1]]))\n    # find the index of the kth element which is greater than the left index\n    right_idx = arr.index(max(arr[arr[k - 1]]))\n    # return the kth element of the array\n    return arr[left_idx + k - 1]\n    \n    \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    start = 0\n    for i in range(n):\n        if arr[i] < k:\n            start += 1\n            arr[i], arr[start] = arr[start], arr[i]\n    arr[start] = arr[-1]\n    return arr[start]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if k == arr[i]:\n            return i\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    print(arr)\n    n = len(arr)\n    return arr[n - k]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0] == \"a\" or word[0] == \"A\":\n        word = word[1:]\n    if word[-1] == \"i\" or word[-1] == \"I\":\n        word = word[:-1]\n    if word[-2:] == \"u\" or word[-2:] == \"U\":\n        word = word[:-2]\n    if word[-3:] == \"y\" or word[-3:] == \"Y\":\n        word = word[:-3]\n    if word[-4:] == \"o\" or word[-4:] == \"O\":\n        word = word[:-4]\n    if word[-5:] == \"e\" or word[-5:] == \"E\":\n        word = word[:-5]\n    if word[-6:] == \"o\" or word[-6:] == \"O\":\n        word = word[:-6]\n    if word[-7:] == \"i\" or word[-7:] == \"I\":\n        word = word[:-7]\n    if word[-8:] == \"u\" or word[-8:] == \"U\":\n        word = word[:-8]\n    if word[-9:] == \"y\" or word[-9:] == \"Y\":\n        word = word[:-9]\n    if word[-10:] == \"o\" or word[-10:] == \"O\":\n        word = word[:-10]\n    if word[-11:] == \"e\" or word[-11:] == \"E\":\n        word = word[:-11]\n    if word[-12:] == \"o\" or word[-12:] == \"O\":\n        word = word[:-12]\n    if word[-13:] == \"i\" or word[-13:] == \"I\":\n        word = word[:-13]\n    if word[-14:] == \"u\" or word[-14:] == \"U\":\n        word = word[:-14]\n    if word[-15:] == \"y\" or word[-15:] == \"Y\":\n        word = word[:-15]\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word\n    else:\n        return word.lower() + word.capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.lower().replace('_','').replace('-', '').replace('.','').title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    result += word[0].lower() + word[1:]\n    for letter in word[1:]:\n        result += letter.lower() + \"_\"\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_words = []\n    for word in word.split('_'):\n        camel_words.append(word[0].lower() + word[1].lower())\n    return ''.join(camel_words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == n:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    lst = [i for i in range(n)]\n    for i in range(n):\n        temp = lst[:]\n        lst[i] = m\n        for j in range(i, n):\n            temp[j] = m-lst[j]\n        m = max(temp)\n    return m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a list of length n of zeros\n    l = [0] * n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m: \n        return -1\n    if n == m: \n        return 1 \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return eulerian_num(n - 1, m) + eulerian_num(n - 2, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    d = dict()\n    b = dict()\n    \n    for i in range(n):\n        d[i] = i\n        b[i] = n - i - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if n == m: \n        return n \n    \n    if n < m: \n        return eulerian_num(m, n) \n    \n    i = m - 1 \n    while n > 1: \n        if n % 2 == 0: \n            n = n // 2 \n        else: \n            i = i // 2 \n            n = n - i \n    if n % 2 == 0: \n        n = n // 2 \n    else: \n        n = n - i \n    return n \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Code here\n    lst = []\n    lst.append(n)\n    for i in range(n-1):\n        lst.append(lst[i] + m)\n    if lst[-1] == n:\n        lst.pop()\n    return lst\n    \n    \n    \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        print(0)\n        return 0\n    \n    x = []\n    for i in range(n):\n        x.append(i+1)\n        \n    # Assume a solution exists\n    for i in range(m):\n        if adj[i] == 0:\n            break\n    \n    x[i] = adj[i]\n    \n    # Check if eulerian component exists\n    if adj[0] == 0:\n        adj[0] = -1\n        \n    return x[0]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #Your code here\n    \n    if (n!= m):\n        print(n)\n        print(m)\n        print(n, m, sep = \"\")\n        return None\n    if (n == m):\n        print(n)\n        return n\n    if (n == 1):\n        print(1)\n        return 1\n    if (n == 2):\n        print(2)\n        return 2\n    if (n == 3):\n        print(3)\n        return 3\n    if (n % 2 == 0):\n        print(n // 2)\n        return n // 2\n    else:\n        print(n + 1)\n        return n + 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return n+1\n    else: \n        return (n+1)*eulerian_num(n-m, m)\n    "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort both the lists in place\n    for l in input_list:\n        l.sort()\n    # sort by each item\n    for i in range(len(input_list[0])):\n        for l in range(len(input_list)):\n            input_list[l][i] = sorted(input_list[l][i])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = [[], [], []]\n    for list_el in input_list:\n        for index in range(len(list_el)):\n            if list_el[index] == '-':\n                sublist[index].append('-');\n            elif list_el[index] == '0':\n                sublist[index].append('0');\n            elif list_el[index] == '1':\n                sublist[index].append('1');\n    return sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j]!= None:\n                new_list.append(input_list[i][j])\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # pass # remove this line when you implement this function\n    \n    # sort the lists\n    \n    # pass # remove this line when you implement this function\n    \n    # concatinate the lists into one long list of strings\n    \n    # pass # remove this line when you implement this function\n    \n    # concatenate the lists into one long list of strings\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(i[0].split())\n    new_list = sorted(new_list, key=len)\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] < input_list[j]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: len(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #TODO: WRITE YOUR CODE HERE\n    sub_list = []\n    for item in input_list:\n        sub_list.append(item.split(' '))\n    sub_list.sort(key=lambda item: item[0])\n    return sub_list\n    #raise NotImplementedError\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp = []\n    for item in input_list:\n        temp.append(sorted(item))\n    return temp\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in input_list:\n        item = list(item)\n        item.sort()\n        input_list.append(tuple(item))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    print(lst)\n    lst_int = []\n    for el in lst:\n        if type(el) == bool:\n            lst_int.append(el)\n        else:\n            lst_int.append(False)\n    print(lst_int)\n    return sum(lst_int)"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for i in lst:\n        if i is True:\n            total += 1\n    return total\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true_count = 0\n    for index in lst:\n        if index:\n            true_count+=1\n    return true_count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if len(lst) < 2:\n        print(\"1\")\n        return 1\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n    \n    \n    "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    num_true = 0\n    for i in lst:\n        if i:\n            num_true += 1\n    return num_true\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_bool = 0\n    for i in lst:\n        if i == 1:\n            count_bool += 1\n    return count_bool\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_1 = test_list\n    tup_1 = test_tup\n    list_1.append(tup_1)\n    return list_1\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list\n    for i in range(len(test_tup)):\n        new_list.append(test_tup[i])\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup[:]\n    new_tup.append(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return tuple(new_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == []:\n        return\n    else:\n        tup = test_tup[:]\n        tup[0] = test_list\n        test_tup = tup\n        return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    test_list = test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for list_item in test_list:\n        test_tup.append(list_item)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.append(test_list[i])\n    test_tup = test_tup + temp_list\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n        test_tup.append(test_list[i])\n    return test_tup\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    #The heaps sort is used to preserve the insertion order of the elements in the two lists.\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    merged=[]\n    \n    while len(num1)>0 or len(num2)>0 or len(num3)>0:\n        #If the number of elements in num1 is greater than the number of elements in num2 and num3, we are done\n        if len(num1)>0 and len(num2)>0 and len(num3)>0:\n            #Assume the elements in num1 and num2 are sorted\n            if num1[0]<num2[0]:\n                #Swap the two values in the lists\n                num1[0],num2[0]=num2[0],num1[0]\n                #If the first element in num1 is larger than the second and the third element is larger than the next element\n                #then we swap them\n                if num1[0]<num2[0] and num1[0]>num3[0]:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n                else:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n            else:\n                #swap the two values in the lists\n                num2[0],num3[0]=num3[0],num2[0]\n                #If the first element in num1 is larger than the second and the third element is larger than the next element\n                #then we swap them\n                if num1[0]>num2[0] and num1[0]<num3[0]:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n                else:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n        \n        #If the number of elements in num2 is greater than the number of elements in num3\n        if len(num2)>0 and len(num3)>0:\n            #If the first element in num2 is larger than the second and the third element is larger than the next element\n            #then we swap them\n            if num2[0]<num3[0]:\n                #Swap the two values in the lists\n                num2[0],num3[0]=num3[0],num2[0]\n                #If the first element in num1 is larger than the second and the third element is larger than the next element\n                #then we swap them\n                if num1[0]>num2[0] and num1[0]<num3[0]:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n                else:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n            else:\n                #swap the two values in the lists\n                num2[0],num3[0]=num3[0],num2[0]\n                #If the first element in num1 is larger than the second and the third element is larger than the next element\n                #then we swap them\n                if num1[0]>num2[0] and num1[0]<num3[0]:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n                else:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n        \n        #If the number of elements in num3 is greater than the number of elements in num2\n        if len(num3)>0 and len(num2)>0:\n            #If the first element in num3 is larger than the second and the third element is larger than the next element\n            #then we swap them\n            if num3[0]<num2[0]:\n                #Swap the two values in the lists\n                num3[0],num2[0]=num2[0],num3[0]\n                #If the first element in num1 is larger than the second and the third element is larger than the next element\n                #then we swap them\n                if num1[0]>num2[0] and num1[0]<num3[0]:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n                else:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n            else:\n                #swap the two values in the lists\n                num2[0],num3[0]=num3[0],num2[0]\n                #If the first element in num1 is larger than the second and the third element is larger than the next element\n                #then we swap them\n                if num1[0]>num2[0] and num1[0]<num3[0]:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    num3.pop(0)\n                else:\n                    #update the first element in num2 and num3\n                    num2[0],num3[0]=num3[0],num2[0]\n                    #pop the element from num1\n                    num1.pop(0)\n                    #pop the element from num2\n                    num2.pop(0)\n                    #pop the element from num3\n                    nu"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            num1[i]=num1[i]+num2[j]\n            num2[j]=num2[j]+num3[k]\n            num3[k]=num3[k]+num1[i]\n            i=i+1\n            j=j+1\n            k=k+1\n        elif num1[i]>num2[j] and num1[i]>num3[k]:\n            num1[i]=num1[i]+num2[j]\n            num2[j]=num2[j]+num3[k]\n            num3[k]=num3[k]+num1[i]\n            i=i+1\n            j=j+1\n            k=k+1\n    while i<len(num1):\n        num1[i]=num1[i]+num2[j]\n        j=j+1\n        i=i+1\n    while j<len(num2):\n        num2[j]=num2[j]+num3[k]\n        k=k+1\n        j=j+1\n    while k<len(num3):\n        num3[k]=num3[k]+num1[i]\n        i=i+1\n        k=k+1\n    return num1,num2,num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # arr1 = []\n    # arr2 = []\n    # arr3 = []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) > len(num2):\n        num1.extend(num2)\n    elif len(num2) > len(num1):\n        num2.extend(num1)\n    else:\n        num1.extend(num2)\n        num2.extend(num3)\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    merged_list = []\n    for i in range(len(num1)):\n        merged_list.append(num1[i]+num2[i]+num3[i])\n    return merged_list\ndef merge_sorted_list_in_array(arr,num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    arr.sort()\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    merged_list = []\n    for i in range(len(arr)):\n        merged_list.append(arr[i]+num1[i]+num2[i]+num3[i])\n    return merged_list\ndef merge_sorted_list_in_array_me(arr, num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n    return arr\ndef merge_sorted_list_in_array_me_two(arr, num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n    return arr\ndef merge_sorted_list_in_array_me_three(arr, num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n    return arr\ndef merge_sorted_list_in_array_me_four(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_five(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_six(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_seven(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_eight(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_nine(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_ten(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_eleven(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_twelve(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_thirteen(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_fourteen(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_fifteen(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_sixteen(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_seventeen(arr, num1, num2, num3, num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(arr)):\n        arr[i] += num1[i] + num2[i] + num3[i]\n        arr[i] += num4[i]\n    return arr\ndef merge_sorted_list_in_array_me_eightteen(arr, num1, num2, num3, num4):\n    '''\n    Write a function t"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num1[i] > num2[j] and num1[i] > num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None:\n        if num2==None:\n            if num3==None:\n                return []\n            else:\n                return num3\n        else:\n            return num2+num3\n    elif num2==None:\n        if num1==None:\n            return num1\n        else:\n            return num1+num2\n    elif num3==None:\n        return num1+num2\n    else:\n        if num1.size()==num2.size() and num1.size()==num3.size():\n            if num1.nlargest()>=num2.nsmallest():\n                return num1+num2\n            else:\n                return num3\n        elif num1.nlargest()>=num2.nsmallest():\n            return num1+num2\n        elif num2.nsmallest()>=num1.nlargest():\n            return num2+num1\n        else:\n            return num3\ndef merge_sorted_list_2(num1,num2,num3,num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None:\n        if num2==None:\n            if num3==None:\n                if num4==None:\n                    return []\n                else:\n                    return num4\n            else:\n                return num3+num4\n        elif num2==None:\n            if num1==None:\n                return num1\n            else:\n                return num1+num2\n        elif num3==None:\n            return num1+num2\n        elif num4==None:\n            return num1+num2\n        else:\n            if num1.size()==num2.size() and num1.size()==num3.size() and num1.size()==num4.size():\n                if num1.nlargest()>=num2.nsmallest():\n                    return num1+num2\n                else:\n                    return num3+num4\n            elif num1.nlargest()>=num2.nsmallest():\n                return num1+num2\n            elif num2.nsmallest()>=num1.nlargest():\n                return num2+num1\n            else:\n                return num3+num4\n    elif num2==None:\n        if num1==None:\n            return num1\n        elif num1.nlargest()>=num2.nsmallest():\n            return num1+num2\n        elif num2.nsmallest()>=num1.nlargest():\n            return num1+num2\n        elif num1.nlargest()>=num2.nsmallest():\n            return num2+num1\n        else:\n            return num3+num1\n    elif num3==None:\n        return num1+num2\n    elif num4==None:\n        return num1+num2\n    else:\n        if num1.size()==num2.size() and num1.size()==num3.size() and num1.size()==num4.size():\n            if num1.nlargest()>=num2.nsmallest():\n                return num1+num2\n            elif num2.nsmallest()>=num1.nlargest():\n                return num1+num2\n            else:\n                return num3+num4\n        elif num1.nlargest()>=num2.nsmallest():\n            return num1+num2\n        elif num2.nsmallest()>=num1.nlargest():\n            return num2+num1\n        else:\n            return num3+num4\ndef merge_sorted_list_3(num1,num2,num3,num4,num5):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None:\n        if num2==None:\n            if num3==None:\n                if num4==None:\n                    return []\n                else:\n                    return num4\n            else:\n                return num3+num4\n        elif num2==None:\n            if num1==None:\n                return num1\n            else:\n                return num1+num2\n        elif num3==None:\n            return num1+num2\n        elif num4==None:\n            return num1+num2\n        else:\n            if num1.size()==num2.size() and num1.size()==num3.size() and num1.size()==num4.size():\n                if num1.nlargest()>=num2.nsmallest():\n                    return num1+num2\n                elif num2.nsmallest()>=num1.nlargest():\n                    return num1+num2\n                elif num1.nlargest()>=num2.nsmallest():\n                    return num2+num1\n                else:\n                    return num3+num4\n            elif num1.nlargest()>=num2.nsmallest():\n                return num1+num2\n            elif num2.nsmallest()>=num1.nlargest():\n                return num2+num1\n            elif num1.nlargest()>=num2.nsmallest():\n                return num1+num2\n            else:\n                return num3+num4\n    elif num2==None:\n        if num1==None:\n            if num3==None:\n                if num4==None:\n                    return []\n                else:\n                    return num4\n            else:\n                return num3+num4\n        elif num1==None:\n            if num3==None:\n                return num1\n            else:\n                return num1+num3\n        elif num3==None:\n            return num1+num2\n        elif num4==None:\n            return num1+num2\n        else:\n            if num1.size()==num2.size() and num1.size()==num3.size() and num1.size()==num4.size():\n                if num1.nlargest()>=num2.nsmallest():\n                    return num1+num2\n                elif num2.nsmallest()>=num1.nlargest():\n                    return num1+num2\n                else:\n                    return num3+num4\n            elif num1.nlargest()>=num2.nsmallest():\n                return num1+num2\n            elif num2.nsmallest()>=num1.nlargest():\n                return num2+num1\n            else:\n                return num3+num4\n    elif num3==None:\n        if num1==None:\n            if num2==None:\n                if num4==None:\n                    return []\n                else:\n                    return num4\n            else:\n                return num2+num4\n        elif num1==None:\n            if num2==None:\n                return num1\n            else:\n                return num1+num2\n        elif num2==None:\n            if num1==None:\n                return num1\n            else:\n                return num1+num2\n        elif num3==None:\n            if num4==None:\n                return num1\n            else:\n                return num1+num4\n        else:\n            if num1.size()==num2.size() and num1.size()==num3.size() and num1.size()==num4.size():\n                if num1.nlargest()>=num2.nsmallest():\n                    return num1+num2\n                elif num2.nsmallest()>=num1.nlargest():\n                    return num1+num2\n                elif num1.nlargest()>=num2.nsmallest():\n                    return num1+num2\n                else:\n                    return num3+num4\n            elif num1.nlargest()>=num2.nsmallest():\n                return num1+num2\n            elif num2.nsmallest()>=num1.nlargest():\n                return num2+num1\n            else:\n                return num3+num4\n    elif num4==None:\n        if num1==None:\n            if num2==None:\n                if num3==None:\n                    return []\n                else:\n                    return num3\n            else:\n                return num3+num4\n        elif num1==None:\n            if num3==None:\n            "
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result_list = []\n    result_list.append(num1)\n    result_list.append(num2)\n    result_list.append(num3)\n    return sorted(result_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.merge(num1,num2,num3, key=lambda x: x[1])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # declaring the variables\n    odd_count = 0\n    count = 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Find the number of odd values\n    count = 0\n    for i in range(0, n, 2): \n        # Check if the odd value is equal to the original string \n        if int(s[i])%2 == 1: \n            count += 1\n            # Check if the odd value is not the original string \n        else:\n            pass\n    # return count \n    return count \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    output = 0\n    for x in range(0,n):\n        if s[x] % 2 == 1:\n            output = output + 1\n    print(output)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(1,n): \n        if s[i]%2==0: \n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s[0] == \"0\":\n        if n == 1:\n            print(0)\n        elif n % 2 == 1:\n            print(1)\n        else:\n            print(0)\n    else:\n        if n == 1:\n            print(1)\n        else:\n            print(0)\n    if n % 2 == 1:\n        if s[-1] == \"0\":\n            print(0)\n        else:\n            print(1)\n    else:\n        if s[-1] == \"0\":\n            print(1)\n        else:\n            print(0)\ndef find_odd(n):\n    '''\n    Write a python function to check if a given number is odd or even.\n    '''\n    if n % 2 == 0:\n        print(1)\n    else:\n        print(0)\ndef main():\n    n = int(input(\"Number: \"))\n    s = str(n)\n    if n % 2 == 0:\n        odd_Equivalent(s,n)\n    else:\n        find_odd(n)\n    print(\"%d is not odd\" %n)\nmain()"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    result = 0\n    for i in range(0,n+1):\n        result += s[i]\n        if (i % 2 == 1):\n            result += s[n-i]\n        if(result >= 10):\n            break\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    try:\n        num = int(input(\"Enter the number of times to rotate: \"))\n        if(num < 0):\n            raise ValueError(\"Invalid input\")\n        if(num > n):\n            raise ValueError(\"Invalid input\")\n    except ValueError as ve:\n        print(\"Invalid input: \", ve)\n        return odd_Equivalent(s,n)\n    else:\n        return(s[n % len(s)::])\n    return(num)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(n):\n        if (s[i] & 1): \n            sum += 1\n        if sum % 2 == 1: \n            return sum\n    return \"Not possible\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # your code here\n    \n    \n    # creating an empty list\n    list = []\n    \n    # creating an empty list\n    even = []\n    \n    # iterating over the string\n    for i in s:\n    \n        # if its even, append it\n        if i % 2 == 0:\n        \n            # append it to the list\n            list.append(i)\n        \n        # if its not, append it to even list\n        else:\n        \n            # append it to even list\n            even.append(i)\n        \n        # print(even)\n        \n    # printing the number of even numbers in the list\n    print(len(even))\n    \n    # printing the number of odd numbers in the list\n    print(len(list))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of even numbers in the even list\n    print(len(list))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the list\n    print(len(list))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(list))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(list))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(list))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(list))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(list))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(list))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # returning the number of odd numbers in the even list\n    print(len(even))\n    \n    # printing the number of odd numbers in the even list\n    print(len(even))\n    "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # set the count \n    count = 0\n    # traverse in the string \n    for i in range(n): \n        # set the count \n        count = count + 1 \n        # traverse in the string \n        for j in range(count): \n            # check if number is even \n            if s[i+j] % 2 == 1: \n                # if it is the condition go to the next number \n                s[i+j] = 0 \n    # return the count \n    return count \n  "
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    out = []\n    for nestedlist1 in nestedlist:\n        for nestedlist2 in nestedlist1:\n            out.append(nestedlist2)\n    return out\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for element in nestedlist:\n        for sublist in element:\n            if sublist not in common_elements:\n                common_elements.append(sublist)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here.\n    common=[]\n    for x in nestedlist:\n        for y in x:\n            if y not in common:\n                common.append(y)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    combinedlist = []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [i for i in nestedlist if i]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for nested in nestedlist:\n        if isinstance(nested, list):\n            common.append(nested)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        if isinstance(nestedlist[i], list):\n            common.append(nestedlist[i])\n        elif nestedlist[i] in common:\n            common.remove(nestedlist[i])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for elem in nestedlist:\n        if isinstance(elem, list) and len(elem) > 0:\n            common_elements.append(elem[0])\n        else:\n            common_elements.append(elem)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    s = set()\n    for i in nestedlist:\n        s = s.union(i)\n    return list(s)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    output=[]\n    \n    for element in nestedlist:\n        if len(element)==0:\n            continue\n        for subelement in element:\n            if len(subelement)==0:\n                continue\n            if len(subelement)>1:\n                output.append(subelement)\n                \n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text, int):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return True if type(text) is int else False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return isinstance(text, int)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x == None:\n            print(\"The dictionary is empty\")\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for k in i:\n            if k!= None:\n                i[k] = None\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        for key1, value1 in dict1.items():\n            if type(value1) is str:\n                if len(value1) > 0:\n                    return False\n            else:\n                if not value1:\n                    return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x:\n            return 0\n    else:\n        return 1\n        \ndef identity_check(n, s):\n    '''\n    Write a function that returns True if n is equal to the identity of s.\n    '''\n    if n == s:\n        return 0\n    else:\n        return 1\n    \ndef is_duplicate(n, arr):\n    '''\n    Write a function that returns True if n is a duplicate of any number in the array.\n    '''\n    for y in arr:\n        if y == n:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef find_longest_subarray(n, arr):\n    '''\n    Write a function that returns the longest subarray that has at least n values.\n    '''\n    \n    for i in range(len(arr)):\n        if len(arr[i]) < n:\n            break\n    else:\n        return arr[i]\n    if len(arr[i]) == n:\n        return arr[i]\n    else:\n        return find_longest_subarray(n,arr[i:])\n    \ndef find_longest_subarray2(n, arr):\n    '''\n    Write a function that returns the longest subarray that has at least n values.\n    '''\n    max_length = 0\n    \n    for i in range(len(arr)):\n        if len(arr[i]) < n:\n            break\n        if arr[i] > max_length:\n            max_length = arr[i]\n        if len(arr[i]) == n:\n            return arr[i]\n        else:\n            if max_length >= arr[i]:\n                return arr[i]\n    else:\n        return 0\n    \ndef find_duplicate(arr):\n    '''\n    Write a function that returns the longest duplicate subarray.\n    '''\n    max_length = 0\n    \n    for i in range(len(arr)):\n        if len(arr[i]) > max_length:\n            max_length = arr[i]\n        if len(arr[i]) == max_length:\n            return arr[i]\n    else:\n        return 0\n    \ndef max_sum_subarray(arr):\n    '''\n    Write a function that returns the maximum sum subarray.\n    '''\n    max_length = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if len(arr[i:j+1]) > max_length:\n                max_length = arr[i:j+1]\n    return max_length\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        print('Empty')\n        return True\n    else:\n        print('Not Empty')\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j == {}:\n                return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if type(list1[i]) == dict:\n            empty = True\n            for j in range(len(list1[i])):\n                if not type(list1[i][j]) == dict:\n                    empty = False\n                    break\n            if empty == True:\n                return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j == None:\n                return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for num in nums:\n        int_list.append(int(num))\n    return int_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(map(int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res = res * 10 + i\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    for i in range(0, len(nums), 1):\n        nums[i] = int(nums[i])\n    return nums\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(nums[0]), int(nums[1])\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return tuple(map(int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * (i + 1)\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return tuple(map(int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_nums = []\n    for i in nums:\n        int_nums.append(i)\n    return int(tuple(int_nums))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_1 = []\n    #Convert all elements in the list into float\n    for item in test_list:\n        for el in item:\n            if el!= \"\":\n                float_el = float(el)\n                #If float isn't a string, convert it to int\n                if float_el.is_integer():\n                    float_el = int(float_el)\n                elif float_el.is_float():\n                    float_el = float(float_el)\n                elif not float_el.is_integer() and not float_el.is_float():\n                    float_el = float(float_el)\n                #If float is an integer, convert it to float\n                elif float_el.is_integer():\n                    float_el = float(float_el)\n                #If float is a float, convert it to int\n                elif float_el.is_float():\n                    float_el = float(float_el)\n                #If there's no integer or float, assign it to float_el\n                else:\n                    float_el = float_el\n                #Add the integer and float to the list\n                list_1.append(float_el)\n    return list_1\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [list(i) for i in test_list]\n    test_list_of_floats = []\n    for l in test_list:\n        if type(l) == list:\n            for el in l:\n                test_list_of_floats.append(list(map(lambda x: float(x),el)))\n        else:\n            test_list_of_floats.append(l)\n    return test_list_of_floats\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    temp_list = []\n    for lst in test_list:\n        for i in range(len(lst)):\n            if type(lst[i])!= list:\n                lst[i] = float(lst[i])\n            else:\n                temp_list.append(lst[i])\n    return temp_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            j = float(j)\n            i.remove(j)\n            break\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for element in test_list:\n        result_list.append([(float(i) if i!='' else i) for i in element])\n    return result_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    # Empty list and dictionary to store data\n    result_list = []\n    dictionary = {}\n    \n    # Check if data list is empty\n    if len(test_list) == 0:\n        \n        # Return\n        return result_list, dictionary\n    \n    # Loop through the data to be converted\n    for entry in test_list:\n        \n        # Check if entry is in dictionary\n        if entry in dictionary.keys():\n            \n            # Add to dictionary\n            dictionary[entry] += 1\n            \n            # Delete entry from dictionary\n            del dictionary[entry]\n        \n        else:\n            \n            # Add to dictionary\n            dictionary[entry] = 1\n            \n            # Delete entry from dictionary\n            del dictionary[entry]\n            \n    # Return\n    return result_list, dictionary\n    \n    "
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        for element in item:\n            if element is not None:\n                float_list.append(float(element))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    f = []\n    for i in test_list:\n        f.append(list(map(float,i)))\n    return f\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 0:\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    print(\"\\nConverting all possible convertible elements in a list of lists to floats...\")\n    for test in test_list:\n        for element in test:\n            for number in element:\n                if number[0] == 'F':\n                    number = float(number[1:])\n                    break\n                elif number[0] == 'L':\n                    number = float(number[1:])\n                    break\n                else:\n                    pass\n    print(\"Done!\")\n    print()\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(' ')\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # P.S. string is a string\n    # Must have to be a string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(' ')\n    return list_string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace(\" \",\"\").split(\",\")\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [i for i in string.split(\" \")]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [string.split() for string in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = list()\n    if string!= \"\":\n        list_of_strings = string.split(\" \")\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    split_string = string.split()\n    return split_string\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return arr[0] if len(arr) == 1 else arr[0] if arr[0]!= arr[1] else arr[1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = start+ (end-start)//2\n        if arr[mid]==arr[mid+1]:\n            return arr[mid+1]\n        elif arr[mid]<arr[mid+1]:\n            start = mid + 1\n        elif arr[mid]>arr[mid+1]:\n            end = mid - 1\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Convert input to list\n    input_list = sorted(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a count variable to keep track of the number of times the element is found\n    count = 0\n    # Loop through the array to find the index of the element\n    for i in range(0, len(arr)):\n        # If the element at the index is not the first element\n        if arr[i]!= arr[0]:\n            # Add the number of times the element appears to the count variable\n            count += 1\n            # If the count is greater than the number of times the element appears, then the element appears only once\n            # If the count is less than the number of times the element appears, then the element is not the first element\n            if count > count:\n                return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] == arr[j+1]:\n                return arr[j]\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # O(nlogn) time complexity, O(n) space complexity\n    index = 0\n    count = 0\n    for index in range(0, len(arr)):\n        if arr[index] == arr[index-1]:\n            count += 1\n        else:\n            count = 0\n        if count == 1:\n            return arr[index-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    j = 0\n    n = len(arr)\n    while(j < n-1):\n        i = j\n        while i < n-1 and arr[i]!= arr[i+1]:\n            i = i+1\n        if arr[i] == arr[j+1]:\n            j = i+1\n        else:\n            return arr[j+1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    index = 0\n    temp = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == temp:\n            count += 1\n        else:\n            if count > 1:\n                index = i\n                break\n            else:\n                count = 1\n                temp = arr[i]\n    return arr[index]\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n            continue\n        else:\n            if arr[left] < arr[right]:\n                if arr[left]!= arr[right]:\n                    return arr[left]\n                else:\n                    left += 1\n                    continue\n            else:\n                if arr[left]!= arr[right]:\n                    return arr[right]\n                else:\n                    right -= 1\n                    continue\n    return -1\n    \narr = [4,4,4,3,3,3,3,2,2,1,1,1,0,0,0,0,0,0,0]\nprint(search(arr))"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            for k in range(j+1, len(list1)):\n                if list1[i] * list1[j] > list1[k] * list1[j]:\n                    max_product = list1[i] * list1[j]\n                    return max_product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_sum = 0\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            num1 = list1[i][0]\n            num2 = list1[j][0]\n            if (num1 > num2):\n                list1[i], list1[j] = list1[j], list1[i]\n            elif (num2 > num1):\n                list1[i], list1[j] = list1[i], list1[j]\n            max_sum = max(max_sum,list1[i][1] * list1[j][1])\n    return max_sum\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                max_product = max(list1[i][0] * list1[j][1], max_product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product(list1):\n        res = 1\n        for i in range(len(list1)-1):\n            for j in range(i+1, len(list1)):\n                res = max(res, list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1])\n        return res\n    \n    res = []\n    for i in range(len(list1)):\n        res.append([list1[i][0]*list1[i][1], list1[i][1]])\n    return max_product(res)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 1\n    for index, item in enumerate(list1):\n        for num_1, num_2 in list1:\n            product *= (num_1 + num_2)\n            \n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res = 0\n    max_res = []\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] < list1[j][0]:\n                if abs(list1[i][0]-list1[j][0]) < res:\n                    res = abs(list1[i][0]-list1[j][0])\n                    max_res = list1[i][1]\n            elif list1[i][0] > list1[j][0]:\n                if abs(list1[i][0]-list1[j][0]) < res:\n                    res = abs(list1[i][0]-list1[j][0])\n                    max_res = list1[j][1]\n    return max_res\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = float('-inf')\n    for i in list1:\n        for j in list1:\n            if i[0] < j[0] and i[1] < j[1]:\n                max_num = max(max_num, i[1]*j[1])\n    return max_num\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)==0:\n        return 0\n    if len(list1)==1:\n        return list1[0][0] * list1[0][1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            product.append(list1[i][0]*list1[j][0])\n    return max(product)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] > list1[j][0]:\n                list1[i],list1[j] = list1[j],list1[i]\n            if list1[i][1] > list1[j][1]:\n                list1[i],list1[j] = list1[j],list1[i]\n    max = []\n    for i in list1:\n        if max == []:\n            max.append(i)\n        else:\n            if max[-1][0] < i[0] or max[-1][1] < i[1]:\n                max.append(i)\n    return max\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    count = 0\n    for i in range(1, limit+1):\n        if amicable_numbers_sum(i) == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    \n    for i in range(1, limit+1):\n        is_prime = True\n        \n        for j in range(2, i):\n            \n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            sum += i\n        \n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        is_amicable = True\n        for j in range(1, i+1):\n            if i % j == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1,limit):\n        if sum(amicable_numbers) == i:\n            amicable_numbers.append(i)\n        else:\n            if sum(amicable_numbers[:i]) == i:\n                amicable_numbers.append(i)\n            elif sum(amicable_numbers[:i-1]) == i:\n                amicable_numbers.append(i)\n            else:\n                amicable_numbers = []\n    return sum(amicable_numbers)\n    \nprint(amicable_numbers_sum(1000)"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable_number(i):\n            amicable_numbers_sum += i\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    nums = [i for i in range(1, limit+1)]\n    for num in nums:\n        for num1 in nums:\n            if num1 % num == 0:\n                amicable_numbers.append(num1)\n    print(sum(amicable_numbers))\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    number_list = []\n    for num in range(1, limit+1):\n        if num == 2 or num == 3:\n            number_list.append(num)\n        else:\n            if num % 2 == 0:\n                if num + 1 in number_list:\n                    number_list.append(num + 1)\n                    number_list.append(num + 2)\n                    number_list.append(num - 1)\n                    if sum(number_list) == limit:\n                        amicable_numbers_sum += num\n                else:\n                    number_list.append(num)\n            else:\n                if num + 1 in number_list:\n                    number_list.append(num + 1)\n                    number_list.append(num + 2)\n                    number_list.append(num - 1)\n                    if sum(number_list) == limit:\n                        amicable_numbers_sum += num\n                else:\n                    number_list.append(num)\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit):\n        if i < 10:\n            pass\n        elif i % 10 == 0:\n            amicable_numbers_sum += i\n        elif i % 10 == 9:\n            if i == 9:\n                pass\n            elif i == 1:\n                amicable_numbers_sum += i\n            elif i == 11:\n                amicable_numbers_sum += i\n            else:\n                amicable_numbers_sum += i\n    return amicable_numbers_sum\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    return acos(complex_multiply(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(b/a)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    d = b.real - a.real\n    e = b.imag - a.imag\n    angle_complex = acos(d/sqrt(e*e+1))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c_a = complex(a[0], a[1])\n    c_b = complex(b[0], b[1])\n    sine_angle = cmath.asin(c_a)\n    cosine_angle = cmath.acos(c_b)\n    return sine_angle, cosine_angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \n    \ndef angle_complex2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex7(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex8(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex9(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath.sqrt(a.imag*a.imag + a.imag*b.imag*b.imag)\n    b_magnitude = cmath.sqrt(b.imag*b.imag + b.imag*a.imag*b.imag)\n    \n    # Get the angle (in radians)\n    angle = math.acos(a_magnitude/math.sqrt(a_magnitude*b_magnitude))\n    \n    # Get the angle in degrees\n    angle = int(round(angle*180/math.pi))\n    \n    return angle\n    \ndef angle_complex10(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # First convert a to radians\n    a_rad = a.real\n    b_rad = b.real\n    \n    # Get the magnitude of the angles\n    a_magnitude = cmath"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_real = cmath.real(a)\n    b_real = cmath.real(b)\n    if a_real > 0 and b_real > 0:\n        return cmath.acos(a_real/b_real)\n    else:\n        return cmath.acos(1 - a_real/b_real)\ndef distance_complex(a,b):\n    '''\n    Write a function to get the distance between two complex numbers.\n    '''\n    a_real = cmath.real(a)\n    b_real = cmath.real(b)\n    if a_real > 0 and b_real > 0:\n        return cmath.sqrt(a_real**2 + b_real**2)\n    else:\n        return cmath.sqrt(1 - a_real**2 - b_real**2)\ndef m_calculator(a,b):\n    '''\n    Write a function to calculate the moment of a complex number.\n    '''\n    m = distance_complex(a,b)\n    if m == 0:\n        return 0\n    elif m == 1:\n        return 0.5*a*b\n    elif m == -1:\n        return b\n    else:\n        return b*a\ndef num_calculator(a,b):\n    '''\n    Write a function to calculate the numerical value of a complex number.\n    '''\n    num = 0\n    for i in range(len(b)):\n        num += m_calculator(a,b[i])\n    return num\ndef image_calculator(a,b,c,d):\n    '''\n    Write a function to calculate the image of a complex number.\n    '''\n    img = 0\n    if a > 0:\n        img = int(c*d*a)\n        img -= int(b*a)\n        img -= int(c*a)\n        img += int(d*a)\n    elif a < 0:\n        img = -int(c*d*a)\n        img += int(b*a)\n        img -= int(c*a)\n        img += int(d*a)\n    return img\ndef image_calculator_dilat(a,b,c,d):\n    '''\n    Write a function to calculate the image of a complex number.\n    '''\n    img = 0\n    if a > 0:\n        img = image_calculator(a,b,c,d)\n        img = img // 3\n        img += image_calculator(c,d,a,b)\n    elif a < 0:\n        img = image_calculator(a,b,c,d)\n        img += image_calculator(c,d,a,b)\n        img -= int(b*a)\n    return img\ndef image_calculator_derivative(a,b,c,d):\n    '''\n    Write a function to calculate the image of a complex number.\n    '''\n    img = 0\n    if a > 0:\n        img = image_calculator(a,b,c,d)\n        img = img // 2\n        img -= image_calculator(c,d,a,b)\n    elif a < 0:\n        img = image_calculator(a,b,c,d)\n        img -= image_calculator(c,d,a,b)\n        img += int(b*a)\n    return img\ndef image_calculator_derivative_dilat(a,b,c,d):\n    '''\n    Write a function to calculate the image of a complex number.\n    '''\n    img = 0\n    if a > 0:\n        img = image_calculator(a,b,c,d)\n        img = img // 3\n        img += image_calculator(c,d,a,b)\n        img += image_calculator(c,d,a,b)\n    elif a < 0:\n        img = image_calculator(a,b,c,d)\n        img += image_calculator(c,d,a,b)\n        img -= int(b*a)\n    return img\ndef gradient_calculator(a,b,c,d):\n    '''\n    Write a function to calculate the gradient of a complex number.\n    '''\n    if a > 0:\n        if a == 0:\n            return (0, 0)\n        img = 0\n        img = image_calculator(a,b,c,d)\n        img = img // 3\n        img -= image_calculator(c,d,a,b)\n        img -= image_calculator(c,d,a,b)\n        img -= image_calculator(c,d,a,b)\n        return (img,img)\n    elif a < 0:\n        if a == 0:\n            return (0, 0)\n        img = 0\n        img = image_calculator(a,b,c,d)\n        img += image_calculator(c,d,a,b)\n        img += image_calculator(c,d,a,b)\n        img -= int(b*a)\n        img -= image_calculator(c,d,a,b)\n        return (img,img)\ndef gradient_calculator_dilat(a,b,c,d):\n    '''\n    Write a function to calculate the gradient of a complex number.\n    '''\n    img = 0\n    if a > 0:\n        img = image_calculator_dilat(a,b,c,d)\n        img = img // 3\n        img -= image_calculator_dilat(c,d,a,b)\n        img -= image_calculator_dilat(c,d,a,b)\n        img -= image_calculator_dilat(c,d,a,b)\n        return (img,img)\n    elif a < 0:\n        img = image_calculator_dilat(a,b,c,d)\n        img += image_calculator_dilat(c,d,a,b)\n        img += image_calculator_dilat(c,d,a,b)\n        img -= int(b*a)\n        img -= image_calculator_dilat(c,d,a,b)\n        return (img,img)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return cmath.phase(a)\n    else:\n        return angle_complex(a/b,b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = abs(a)\n    b = abs(b)\n    return (a*b)/complex(a,b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if abs(a) == abs(b):\n        if b!= 0:\n            return (cmath.acos(a/b))\n        else:\n            return (cmath.acos(a))\n    elif abs(a) < abs(b):\n        return (cmath.acos(a/b))\n    else:\n        return (cmath.acos(b/a))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=0\n    c_real=complex(a[0],a[1])\n    c_imag=complex(b[0],b[1])\n    # print('c_real = ',c_real)\n    # print('c_imag = ',c_imag)\n    angle=cmath.phase(c_real+c_imag*1j)\n    # print('angle = ',angle)\n    # angle=cmath.phase(c_real+c_imag*1j)\n    return angle\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    angle=0\n    # print('a = ',a)\n    # print('b = ',b)\n    c_real=complex(a[0],a[1])\n    # print('c_real = ',c_real)\n    # print('c_imag = ',c_imag)\n    angle=cmath.phase(c_real+c_imag*1j)\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length -= 1\n    return length\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length=0\n    for i in range(len(string)):\n        if string[i]=='0':\n            length+=1\n        elif string[i]=='1':\n            length-=1\n    return length\n        \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #Initialize the count of 0s and 1s.\n    count0 = 0\n    count1 = 0\n    count0_prev = 0\n    count1_prev = 0\n    \n    #Create a list of substrings, where all 0s occur consecutively as a substring of the string.\n    substrings = []\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count0_prev += 1\n        if string[i] == '1':\n            count1 += 1\n        else:\n            count1_prev += 1\n            \n    #Find the maximum number of consecutive 1s.\n    if count0 == count0_prev:\n        #If the list is empty, there is no zeros.\n        return 0\n    elif count0_prev > 0:\n        return abs(count0_prev - count0)\n    else:\n        #If there is 1 more consecutive 0, the maximum is the number of 0s.\n        return abs(count1 - count0)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start = 0\n    end = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n            start = i\n        else:\n            count -= 1\n        end = max(end,i+1)\n    return abs(count-start)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    count_0_1 = 0\n    for i in range(len(string)):\n        if string[i] == 0:\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n    if count_0!= count_1:\n        return count_0_1 - count_1\n    else:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    output = 0\n    length = 0\n    start = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            output = output + 1\n        else:\n            output = output - 1\n        if output == length:\n            start = i\n            length = output\n    return (start, length)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    count = 0\n    i = 0\n    while(i<len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        i += 1\n    ans = count\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    output = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count = count + 1\n            if count > output:\n                output = count\n        else:\n            count = 0\n    return output\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    char_map = {'0':0, '1':1}\n    l = 0\n    r = 0\n    res = 0\n    while (r < len(string)):\n        if(string[l] == '0'):\n            char_map['0'] += 1\n            l += 1\n        else:\n            char_map['1'] += 1\n            r += 1\n        if(char_map['0'] == char_map['1']):\n            res = max(res, r-l)\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #create a counter to keep track of number of 1s and 0s\n    count_0_1=0\n    count_1_0=0\n    \n    #iterate through the given binary string and append the 0s and 1s to the respective counter's values\n    for x in string:\n        if x == '0':\n            count_0_1+=1\n        else:\n            count_1_0+=1\n    \n    #find the maximum difference using the above given variables\n    return max(count_0_1 - count_1_0, count_0_1, count_1_0)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(a,b/2)+sum(a,b//2)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(a,b//2)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            l.append(i)\n    return(sum(l))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a=a//b\n    sum=a\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\ndef diff(a,b): \n    '''\n    Write a python function to find the difference of two given numbers.\n    '''\n    return a-b\ndef mod(a,b): \n    '''\n    Write a python function to find the remainder of a given number.\n    '''\n    return a%b\ndef isPrime(n):\n    '''\n    Write a python function to determine if a given number is a prime number or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef isFraction(num):\n    '''\n    Write a python function to determine if a given number is a fraction or not.\n    '''\n    if num==0:\n        return False\n    if num<0:\n        return False\n    if num==1:\n        return True\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\ndef round(n):\n    '''\n    Write a python function to round a number to nearest integer.\n    '''\n    return round(n,2)\ndef isMillion(n):\n    '''\n    Write a python function to determine if a given number is a million or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isHundred(n):\n    '''\n    Write a python function to determine if a given number is a hundred or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isEven(n):\n    '''\n    Write a python function to determine if a given number is even or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isOdd(n):\n    '''\n    Write a python function to determine if a given number is odd or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isDecimal(n):\n    '''\n    Write a python function to determine if a given number is a decimal or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isDecimal(n):\n    '''\n    Write a python function to determine if a given number is a decimal or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isSquare(n):\n    '''\n    Write a python function to determine if a given number is a square or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    for i in range(2,int"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a) == int and type(b) == int: \n        return a + b \n    if type(a) == int: \n        return a \n    if type(b) == int: \n        return b \n    if a % b == 0: \n        return a // b \n    else: \n        return -1 \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Check if the first number is less than second number\n    if (a<b):\n        if a%b==0:\n            return a//b\n        else:\n            return 0\n    else:\n        if a%b==0:\n            return a//b\n        else:\n            return 0\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = a % b\n    return x\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a%b==0:\n        return b\n    for i in range(1,a+1):\n        if (a%i==0) and (b%i==0):\n            return i\n    return None\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    \n    print(math.gcd(a,b))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 1\n    if y == 0:\n        return 0\n    elif y == 1:\n        return x\n    elif y == 2:\n        return x\n    else:\n        for i in range(1, y):\n            result = result * x\n        return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 and y == 0:\n        return 0\n    elif x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        return x * y\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    mult = 1\n    for i in range(len(x)):\n        mult *= int(x[i])\n    for i in range(len(y)):\n        mult = mult * int(y[i])\n    return mult\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = 0\n    if x == 0:\n        return 0\n    for i in range(len(str(x))):\n        res += (int(str(x)[i]) * int(str(y)[i]))\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (isinstance(x, int) and isinstance(y, int)):\n        return x*y\n    else:\n        print(\"Invalid input: must be an integer\")\n        return False\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = 0\n    x = x\n    y = y\n    while x > 0:\n        res = res * 10 + x % 10\n        x = x // 10\n    while y > 0:\n        res = res * 10 + y % 10\n        y = y // 10\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    #Define variables\n    x = x % 10; y = y % 10\n    #Divide x by 10\n    x = int(x / 10); y = int(y / 10)\n    #Multiply\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n < 1:\n        return \"\"\n    elif n == 1:\n        return str\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #Your code here\n    pass\n    return\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for x in str:\n        if len(x) > n:\n            words.append(x)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_words = []\n    str = str.lower()\n    n = int(n)\n    for i in range(0, len(str)):\n        for j in range(0, i+1):\n            if len(str[j]) > n:\n                longest_words.append(str[j])\n                break\n    return longest_words"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    def is_long(word):\n        if len(word) > n:\n            return True\n        else:\n            return False\n    \n    long_words = []\n    for word in str:\n        if is_long(word) == True:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long = []\n    for word in words:\n        if len(word) > n:\n            long.append(word)\n    print(len(long))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    return [word for word in str if len(word) >= n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Keep track of words and length\n    words = []\n    word = \"\"\n    long_word = \"\"\n    len_words = 0\n    # Loop over the list of words, and keep track of the length\n    for char in str:\n        if char in word:\n            len_words += 1\n        else:\n            if len_words > n:\n                words.append(word)\n                word = \"\"\n                long_word = \"\"\n                len_words = 0\n            else:\n                word += char\n    # Return the words\n    return words\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    result = []\n    for i in range(len(words)):\n        for j in range(i+1,len(words)):\n            if len(words[i]) > len(words[j]):\n                result.append(words[j])\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    if len(words) < n:\n        return \"words\"\n    else:\n        return''.join(words[:n])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    checker = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 1:\n                if i == 0 or i == len(my_matrix)-1:\n                    checker += 1\n    if checker == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check for empty matrix\n    if len(my_matrix) == 0:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic = True\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= '*':\n                is_magic = False\n    return is_magic\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list) or len(my_matrix) < 2:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic = True\n    for i in range(3):\n        for j in range(3):\n            if my_matrix[i][j] % 2!= 0:\n                is_magic = False\n                break\n    return is_magic\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    i=0\n    while i<len(my_matrix):\n        j=0\n        while j<len(my_matrix[i]):\n            if my_matrix[i][j] == 0:\n                return False\n            j+=1\n        i+=1\n    return True\ndef magic_square_test2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    i=0\n    while i<len(my_matrix):\n        j=0\n        while j<len(my_matrix[i]):\n            if my_matrix[i][j] == 0:\n                return False\n            j+=1\n        i+=1\n    return True\ndef magic_square_test3(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    i=0\n    j=0\n    while i<len(my_matrix):\n        while j<len(my_matrix[i]):\n            if my_matrix[i][j] == 0:\n                return False\n            j+=1\n        i+=1\n    return True\ndef magic_square_test4(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    i=0\n    while i<len(my_matrix):\n        j=0\n        while j<len(my_matrix[i]):\n            if my_matrix[i][j] == 0:\n                return False\n            j+=1\n        i+=1\n    return True\ndef magic_square_test5(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    i=0\n    j=0\n    while i<len(my_matrix):\n        while j<len(my_matrix[i]):\n            if my_matrix[i][j] == 0:\n                return False\n            j+=1\n        i+=1\n    return True\ndef magic_square_test6(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    i=0\n    j=0\n    while i<len(my_matrix):\n        while j<len(my_matrix[i]):\n            if my_matrix[i][j] == 0:\n                return False\n            j+=1\n        i+=1\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for line in range(len(my_matrix)):\n        for column in range(len(my_matrix[0])):\n            if my_matrix[line][column]!= '.':\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # we use if/elif/else logic\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    elif sum(my_matrix)!= sum(my_matrix[0]):\n        return False\n    else:\n        for i in range(0,len(my_matrix)):\n            for j in range(0,len(my_matrix[0])):\n                if my_matrix[i][j] == 1:\n                    my_matrix[i][j] = '*'\n                    # we need to keep one list since if\n                    # we put the value of 1 in the matrix and\n                    # the value of * in the matrix it will be counted\n                    # as a square\n                    # if the value is '*' it will be counted as a\n                    # magic square\n                    # if the value is not '*' it will not be counted as a\n                    # magic square\n                    if len(my_matrix[i][j]) == 2:\n                        for x in range(i, len(my_matrix)):\n                            for y in range(j, len(my_matrix[0])):\n                                if my_matrix[x][y] == 1:\n                                    return False\n                        return True\n                    else:\n                        return False\n        return True\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_table = defaultdict(int)\n    for num in nums:\n        freq_table[num] += 1\n        \n    max_freq = -1\n    for key, value in freq_table.items():\n        if value > max_freq:\n            max_freq = value\n            max_index = key\n    return max_index\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a map: counts for each item in the list\n    m = defaultdict(int)\n    # Create a final result: map of item with the frequency\n    final_result = defaultdict(list)\n    # Loop through each item\n    for i in nums:\n        # Increment the count of each item\n        m[i] += 1\n        # If the item has been seen, add it to the final result\n        if m[i]!= 0:\n            final_result[i].append(m[i])\n    # Return the final result of the function\n    return max(final_result.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_nums = {}\n    freq = {}\n    for i in nums:\n        if i not in dict_nums:\n            dict_nums[i] = 0\n        if i not in freq:\n            freq[i] = 0\n        dict_nums[i] += 1\n    #print(dict_nums)\n    #print(freq)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for i in range(len(nums)):\n        counter[nums[i]] += 1\n    return max(counter, key=counter.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # use collections.Counter to calculate frequency\n    freq = collections.Counter(nums)\n    \n    # return the first item with frequency of 1\n    return freq.most_common(1)[0][0]\n    \ndef min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    # use collections.Counter to calculate frequency\n    freq = collections.Counter(nums)\n    \n    # return the first item with frequency of 0\n    return freq.most_common(1)[0][0]\n    \ndef main():\n    # Test 1\n    #print(max_occurrences([1,2,2,1,1,1,1,3,3,3,3,2,2,3]))\n    #print(min_occurrences([1,2,2,1,1,1,1,3,3,3,3,2,2,3]))\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    max_occurrences_map = defaultdict(list)\n    for num in nums:\n        if freq_map[num] == 0:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 0\n    for item in freq_map:\n        if freq_map[item] > max_occurrences_map[item]:\n            max_occurrences_map[item] = freq_map[item]\n    return max_occurrences_map\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_frequency = 0\n    index_frequency = 0\n    for index, num in enumerate(nums):\n        if num > max_frequency:\n            max_frequency = num\n            index_frequency = index\n    return index_frequency, max_frequency\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    \n    for num in nums:\n        count[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for num in nums:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    max_count = dict.most_common()\n    max_num = max_count[0]\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_freq = 0\n    for k,v in d.items():\n        if v > max_freq:\n            max_freq = v\n            max_freq_key = k\n    return max_freq_key\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = ''\n    vowels = ['A', 'E', 'I', 'O', 'U']\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1_lower = str1.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1_vowels = []\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1.replace('a','e').replace('e','a').replace('i','o').replace('o','i')"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1_copy = str1.lower()\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = \"\"\n    for i in str1_copy:\n        if i not in vowels:\n            result += i\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in 'aeiou':\n            print(str1[i])\n        else:\n            print(str1[i].upper())\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = []\n    for i in str1:\n        if i.lower() in ['a','e','i','o','u']:\n            l.append(i)\n    return ''.join(l)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list_of_vowels = ['a','e','i','o','u']\n    str2 = str1.lower()\n    str3 = str2.replace('y','r')\n    return str3.replace(list_of_vowels[0],'')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        str1 = str1.replace(vowel,'')\n    return str"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join(str1[i] for i, char in enumerate(str1) if char not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    # print(reverse_vowels(str1))\n    # return ''.join(vowels.lower() for vowels in str1 if vowels not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    for i in str1:\n        if i in ['a','e','i','o','u']:\n            str2 +='' + i\n        elif i in ['A','E','I','O','U']:\n            str2 += i\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ndef tup_list(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return tup1\n    \ndef tup_dict(tup1):\n    '''\n    Write a function to convert a tuple to a dictionary.\n    '''\n    return tup1\n    \ndef dict_tuple(dict1):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    return dict1\n    \ndef dict_list(dict1):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return dict1\n    \ndef dict_dict(dict1):\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    return dict1\n    \ndef dict_set(dict1):\n    '''\n    Write a function to convert a dictionary to a set.\n    '''\n    return dict1\n    \ndef tup_dict_set(tup1):\n    '''\n    Write a function to convert a tuple to a dictionary and set it.\n    '''\n    return tup1\n    \ndef tup_dict_set_int(tup1):\n    '''\n    Write a function to convert a dictionary to a dictionary and set it using integer.\n    '''\n    return tup1\n    \ndef tup_list_dict(tup1):\n    '''\n    Write a function to convert a tuple to a list and dictionary and set it.\n    '''\n    return tup1\n    \ndef dict_set_int(dict1):\n    '''\n    Write a function to convert a dictionary to a set and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef tup_list_dict_int(tup1):\n    '''\n    Write a function to convert a tuple to a list and dictionary and integer using tuple and set.\n    '''\n    return tup1\n    \ndef dict_string(dict1):\n    '''\n    Write a function to convert a dictionary to a string.\n    '''\n    return dict1\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ndef tup_list(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return tup1\n    \ndef dict_list_int(dict1):\n    '''\n    Write a function to convert a dictionary to a list and integer using dictionary and list.\n    '''\n    return dict1\n    \ndef list_int(dict1):\n    '''\n    Write a function to convert a dictionary to a list and integer using dictionary and list.\n    '''\n    return dict1\n    \ndef list_set(dict1):\n    '''\n    Write a function to convert a dictionary to a set and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_int(dict1):\n    '''\n    Write a function to convert a dictionary to a integer using dictionary and list.\n    '''\n    return dict1\n    \ndef int_to_list(dict1):\n    '''\n    Write a function to convert an integer to a list using dictionary and set.\n    '''\n    return dict1\n    \ndef list_to_int(list1):\n    '''\n    Write a function to convert a list to an integer using dictionary and set.\n    '''\n    return list1\n    \ndef tup_dict_int(dict1):\n    '''\n    Write a function to convert a dictionary to a integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_int_list(dict1):\n    '''\n    Write a function to convert a dictionary to an integer using dictionary and list.\n    '''\n    return dict1\n    \ndef list_int_dict(dict1):\n    '''\n    Write a function to convert a list to an integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_string_int(dict1):\n    '''\n    Write a function to convert a dictionary to a string and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_string_list(dict1):\n    '''\n    Write a function to convert a dictionary to a string and integer using dictionary and list.\n    '''\n    return dict1\n    \ndef dict_set_int_list(dict1):\n    '''\n    Write a function to convert a dictionary to a set and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef list_string_int_dict(dict1):\n    '''\n    Write a function to convert a list to a string and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_string_set_int(dict1):\n    '''\n    Write a function to convert a dictionary to a string and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef set_int(dict1):\n    '''\n    Write a function to convert a dictionary to a integer using dictionary and set.\n    '''\n    return dict1\n    \ndef set_list(dict1):\n    '''\n    Write a function to convert a dictionary to a list using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_set_int_list(dict1):\n    '''\n    Write a function to convert a dictionary to a set and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef list_set_int(dict1):\n    '''\n    Write a function to convert a dictionary to a set and integer using dictionary and list.\n    '''\n    return dict1\n    \ndef list_int_set_dict(dict1):\n    '''\n    Write a function to convert a list to an integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_set_list_int(dict1):\n    '''\n    Write a function to convert a dictionary to a set and integer using dictionary and list.\n    '''\n    return dict1\n    \ndef set_int_list(dict1):\n    '''\n    Write a function to convert a dictionary to a integer using dictionary and set.\n    '''\n    return dict1\n    \ndef int_to_dict(dict1):\n    '''\n    Write a function to convert an integer to a dictionary using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_int_list_dict(dict1):\n    '''\n    Write a function to convert a dictionary to a integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_set_int_list_dict(dict1):\n    '''\n    Write a function to convert a dictionary to a set and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_int_int_list(dict1):\n    '''\n    Write a function to convert a dictionary to an integer using dictionary and integer using set.\n    '''\n    return dict1\n    \ndef set_int_int_list(dict1):\n    '''\n    Write a function to convert a set and integer using dictionary and set.\n    '''\n    return dict1\n    \ndef dict_int_list_dict_int(dict1):\n    '''\n    Write a function to convert a dictionary to an integer using dictionary and list.\n    '''\n    return dict1\n    \ndef set_int_list_dict_int(dict1):\n    '''\n    Write a function to convert a dictionary to an integer using dictionary and set.\n    '''\n    return dict1\n    \ndef set_string_int_list(dict1):\n    '''\n    Write a function to convert a set to an integer using dictionary and list.\n    '''\n    return dict1\n    \ndef list_int_string(dict1):\n    '''\n    Write a function to convert a dictionary to an integer using dictionary and string.\n    '''\n    return dict1\n    \ndef dict_string_int_list(dict1):\n    '''\n    Write a function to convert a dictionary to an integer using dictionary and integer using set.\n    '''\n    return dict1\n    \ndef dict_int_string_int_list(dict1):\n    '''\n    Write a function to convert a dictionary to an integer using dictionary an"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = \"(\"\n    for index, item in enumerate(tup1):\n        if index!= len(tup1)-1:\n            string_tup += str(item) + \", \"\n        else:\n            string_tup += str(item)\n    string_tup += \")\"\n    return string_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i) +''\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Initialize an empty string\n    string1 = \"\"\n    # Convert the tuple to a string\n    string2 = \"\".join(map(str,tup1))\n    # Return the result\n    return string2\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(', '.join(str(elem) for elem in tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '{' + ', '.join([str(x) for x in tup1]) + '}'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for i in range(len(tup1)):\n        string += str(tup1[i]) + \" \"\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"('\"\n    for i in range(len(tup1)-1):\n        str1 += str(tup1[i])+','\n    str1 += str(tup1[-1])\n    str1 += \"')\"\n    return str1\n    \ndef tup_to_str(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for i in range(len(tup1)-1):\n        str1 += tup_string(tup1[i])+', '\n    str1 += tup_string(tup1[-1])+\")\"\n    return str1\n        "
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in range(len(tup1)):\n        str1 = str1 + str(tup1[i])\n        if i < len(tup1)-1:\n            str1 = str1 + ','\n    return str1\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_negativ = 0\n    for num in nums:\n        if num < 0:\n            num_negativ += num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    numbers_sum = 0\n    for num in nums:\n        if num < 0:\n            numbers_sum = numbers_sum - num\n    return numbers_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # negative nums = [-1, -2, -3, -4, -5]\n    # return sum(-num)\n    negative_num = []\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg = 0\n    for num in nums:\n        if num < 0:\n            neg += num\n    return neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #Write your code here\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #dividing the list in negative and positive numbers\n    neg = []\n    pos = []\n    for num in nums:\n        if num < 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n    \n    #summing the numbers\n    if len(neg) == 0:\n        return 0\n    else:\n        return sum(neg) + sum(pos)"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum = negative_sum + num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        return None\n    return (n ** 2) + (n ** 2 + 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n < 2): \n        print(\"Square numbers cannot be found!\") \n        return \n    else: \n        for i in range(1, n+1): \n            if (i == 1 or i == n): \n                print(n, end ='') \n            else: \n                print(n//3, end ='') \n                n = n//3 \n            if (i % 2 == 0): \n                print(i, end ='') \n            else: \n                print(i, end ='') \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    num = 0\n    if n%4 == 0:\n        num = n//4\n    else:\n        num = (n+1)//4 + 1\n    \n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return(n**2 + (n+1)**2 - n*(n+1))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x, y = n, 0\n    while x >= y:\n        if (x % 2 == 0) and (y % 2 == 0):\n            print(x, y)\n            x //= 2\n            y //= 2\n        else:\n            y += 1\n    print(x, y)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 0\n    while i <= n: \n        if (n-i) % 6 == 1: \n            return(i) \n        i += 1\n    return(0)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #   Use formula to find the nth hexagonal number.\n    if n in (1,3):\n        return n\n    elif n%3 == 0:\n        return hexagonal_num(n-1) + 2\n    else:\n        return hexagonal_num(n-1) + 2*(n%3) + 1\nprint(hexagonal_num(int(input()))"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    hex_num = (1 + (n%4))%6\n    if hex_num == 0:\n        hex_num = 3\n    elif hex_num == 1:\n        hex_num = 5\n    elif hex_num == 2:\n        hex_num = 7\n    else:\n        hex_num = 9\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h = int(n / 6)\n    \n    # if (n <= 0):\n        # return -1\n    \n    # for i in range(h, 2 * h):\n        # if i == n:\n            # return -1\n        # else:\n            # return (i + 2*h)\n    \n    if n < h:\n        return -1\n    else:\n        return hexagonal_num(n-h)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    zero_nums = []\n    for i in nums:\n        if i == 0:\n            count_zeroes += 1\n            zero_nums.append(i)\n        else:\n            continue\n    return int(count_zeroes/len(zero_nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    return int(zeroes/non_zeroes*100)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #Assume 0th index starts at 0.\n    zero_counter = 0\n    #Assume no elements have a zero in that index.\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_counter += 1\n        else:\n            zero_count +=1\n    #Assume the entire array has at least one 0.\n    zero_count += len(nums) - zero_counter\n    return float(zero_count) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # empty list to store values\n    zero_count = []\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for item in nums:\n        if item == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count = count + 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = len(nums)\n    for i in range(0, n):\n        if nums[i] == 0:\n            z += 1\n    return z / (n * n)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    if n == 3:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    num_of_sum_of_pow = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            num_of_sum_of_pow += i\n    return num_of_sum_of_pow == 2\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    if n==0:\n        return True\n    else:\n        a=1\n        while n!=0:\n            if n%2==0:\n                a=a*2\n                n=n//2\n            else:\n                break\n        return is_Sum_Of_Powers_Of_Two(a)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    else:\n        for i in range(n, 0, -1):\n            if is_Sum_Of_Powers_Of_Two(i):\n                return True\n            else:\n                pass\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Sum_Of_Powers_Of_Two(n): \n        if n < 10: \n            return True\n        else: \n            # n = n * (n - 1) / 6 \n            # if n % 2 == 0: \n            #     return is_Sum_Of_Powers_Of_Two(n // 2) \n            # else: \n            #     return False \n            \n            # Solved using a pointer \n            # j = n \n            # while(j > 0): \n            #     if n % j == 0: \n            #         return False\n            #     j //= 2 \n            # return True \n            # print(n)\n            # try: \n            #     if n % 2 == 0: \n            #         return is_Sum_Of_Powers_Of_Two(n // 2) \n            #     else: \n            #         return False \n            # except: \n            #     return False \n            \n            # with a single while loop \n            # try: \n            #     return is_Sum_Of_Powers_Of_Two(n) \n            # except: \n            #     return False \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n < 0: \n        return False\n    \n    while (n >= 2): \n        if n%2 == 0: \n            n = n//2\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return (n>0) and (n==n+1) and (n%2==0)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    x = str(bin(n))[2:]\n    y = len(x)\n    if y % 2 == 1:\n        return False\n    if x == '0':\n        return False\n    else:\n        for i in range(0,y//2):\n            for j in range(0,i):\n                if n == n*(n-1)/2:\n                    return True\n        return False\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n > 0 and (n%2 == 0 or n == 3) and (n == sum(map(lambda x: x**2, range(1, n+1))))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n < 2): \n        print(\"Incorrect input\")\n    else: \n        n = n%2\n        p = 2\n        sum = 0\n        while (p<=n): \n            if (n%p == 0): \n                sum += p\n                n = n//p\n            else: \n                p += 1\n        print(\"Sum of 2^\", n, \"is\", sum)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*r*math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #add your code here\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum_radius = 2 * 3.14 * (r * r)\n    print(f'The circumference of the circle is: {circum_radius:.2f}.')\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # if r is a float then raise error\n    if type(r) is not float:\n        raise TypeError(\"r must be a float\")\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat = []\n    for i in test_list:\n        if type(i) == list:\n            for j in i:\n                flat.append(j)\n        else:\n            flat.append(i)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    temp = []\n    for elem in test_list:\n        if isinstance(elem, list):\n            temp.extend(elem)\n        elif elem is not None:\n            flattened.append(elem)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    from collections import Counter\n    test_list.sort()\n    my_dict = Counter(test_list)\n    return my_dict.most_common()[-1][0]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Your code here\n    \n    return list(map(int, test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(list_of_lists):\n        numbers = []\n        for sublist in list_of_lists:\n            for item in sublist:\n                numbers.append(item)\n        return numbers\n    flattened_list = flatten(test_list)\n    return flattened_list\n    \n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # TODO: Write your function here\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for n in test_list:\n        for t in n:\n            flattened_list.append(t)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    lst = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            lst.append(test_list[i][j])\n    return lst\n    \n    \n    \n    \ndef extract_as_string(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    lst = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            lst.append(test_list[i][j])\n    return lst\n    \n    \n    \n    \n    \ndef main():\n    print (\"I have to find out\")\n    # insert your code here\n    print(\"Enter the test list:\")\n    test_list = [ [1,2,3], [4,5,6] ]\n    print (extract_singly(test_list))\n    print (extract_as_string(test_list))\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = test_list[:]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find the index of the maximum value in the list\n        index = nums.index(max(nums))\n        # Swap the ith index and the last index\n        nums[i], nums[index] = nums[index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    max_length = len(nums)\n    for i in range(max_length):\n        min_index = i\n        for j in range(max_length - i):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        nums[min_index], nums[i] = nums[i], nums[min_index]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return\n    \n    index = 0\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n            index = index + 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    curr_nums = nums\n    for i in range(len(curr_nums)-1):\n        min_idx = i\n        for j in range(i+1, len(curr_nums)):\n            if curr_nums[j] < curr_nums[min_idx]:\n                min_idx = j\n        if i!= min_idx:\n            tmp = curr_nums[i]\n            curr_nums[i] = curr_nums[min_idx]\n            curr_nums[min_idx] = tmp\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    index = 0\n    while index < n:\n        for i in range(index+1, n):\n            if nums[i] < nums[index]:\n                index = i\n        nums[index], nums[index] = nums[index], nums[index]\n        index += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def is_sorted(arr):\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    n = len(nums)\n    if not nums:\n        return []\n    \n    if n == 1:\n        return nums\n    \n    arr = [0] * n\n    for i in range(n):\n        arr[nums[i]-1] = i\n    \n    sort_arr = [0] * n\n    for i in range(n):\n        sort_arr[arr[i]-1] = i\n    \n    for i in range(n):\n        nums[nums[i]-1] = sort_arr[i]\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    left_part = len(nums)\n    right_part = left_part - 1\n    # find the index of the first element\n    i = 0\n    while i < len(nums):\n        if i == 0 or nums[i] < nums[i-1]:\n            i += 1\n        elif nums[i] > nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            i -= 1\n            left_part -= 1\n            right_part -= 1\n    if left_part == 0:\n        return nums\n    while right_part >= left_part:\n        nums[left_part], nums[right_part] = nums[right_part], nums[left_part]\n        left_part -= 1\n        right_part -= 1\n    print(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1) == 0 or len(list2) == 0 or len(list3) == 0:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_item = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i]!= list3[j]:\n                count_item += 1\n    return count_item\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    i=0\n    j=0\n    if (list1[0]!=list2[0]):\n        while(i<len(list1)):\n            if(list1[i]==list2[j]):\n                i+=1\n                j+=1\n            else:\n                j+=1\n    return j\ndef mergeSort(arr):\n    '''\n    Write a function to merge two sorted arrays.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        l=arr[:mid]\n        r=arr[mid:]\n        mergeSort(l)\n        mergeSort(r)\n        i=0\n        j=0\n        k=0\n        while i<len(l) and j<len(r):\n            if(l[i]<r[j]):\n                arr[k]=l[i]\n                i+=1\n            else:\n                arr[k]=r[j]\n                j+=1\n            k+=1\n        while i<len(l):\n            arr[k]=l[i]\n            i+=1\n            k+=1\n        while j<len(r):\n            arr[k]=r[j]\n            j+=1\n            k+=1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,3):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #list1.sort()\n    #list2.sort()\n    #list3.sort()\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list4 = []\n    list5 = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list2[i]!= list2[j] and list1[i]!= list2[j]:\n                list4.append(list1[i])\n    for i in range(len(list3)):\n        for j in range(len(list4)):\n            if list3[i] == list4[j] and list4[j]!= list4[j] and list3[i]!= list4[j]:\n                list5.append(list3[i])\n    if list4 == list5:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            if list1[i] == list2[j] and list1[i]!= list3[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #count number of different pairs\n    samepairs = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list1[j] and list2[i] == list2[j]:\n                samepairs += 1\n    return samepairs\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n                list3.remove(i)\n            break\n    return count\ndef check_same_length(list1,list2):\n    '''\n    Write a function to check the length of the two lists. \n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_same_list(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in the same place.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_short_list(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in the same positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_different_list(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in different positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_same_empty_list(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in the same position.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_different_empty_list(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in different positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_different_length(list1,list2):\n    '''\n    Write a function to check the length of the two lists.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef count_list_elements(list1):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    count=0\n    for i in list1:\n        count+=1\n    return count\ndef count_list_elements_1(list1):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    count=0\n    for i in list1:\n        count+=len(i)\n    return count\ndef count_list_elements_2(list1):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    count=0\n    for i in list1:\n        for j in i:\n            count+=1\n    return count\ndef check_different_elements(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in different positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_different_elements_1(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in different positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_different_elements_2(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in different positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_different_elements_3(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in different positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    list1.sort()\n    list1=list(set(list1))\n    list1.sort()\n    return list1\ndef check_duplicates(list1):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    list1.sort()\n    list1=remove_duplicates(list1)\n    return list1\ndef check_diff_one_position(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in the same position.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_diff_two_positions(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in the same positions.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_diff_same_elements(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in the same position.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            print(\"This should not happen\")\n            exit()\n    return\ndef check_diff_two_elements(list1,list2):\n    '''\n    Write a function to check if the two lists have the same elements in the same position.\n    '''\n    if len(list1)!= len(list2):\n        print(\"This should not happen\")\n        exit()\n    for "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=0\n    for i in range(0,len(Input)):\n        if Input[i]=='1':\n            n=n+1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # TODO: Implement this function\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_list = 0\n    for el in Input:\n        if type(el) is tuple:\n            num_list += 1\n    return num_list\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    f=open(Input,\"r\")\n    Lists={}\n    for line in f:\n        if line!=\"\":\n            Lists[line.split()[0]]=int(line.split()[1])\n    f.close()\n    return Lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    for i in range(0, len(Input)):\n        if type(Input[i]) == tuple:\n            if len(Input[i]) == 1:\n                return len(Input[i])\n            elif type(Input[i][0]) == tuple:\n                return len(Input[i][0])\n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    def find_lists(tuple):\n        counter = 0\n        for i in range(len(tuple)):\n            if isinstance(tuple[i], (list, tuple, set)):\n                counter = counter + len(tuple[i])\n        return counter\n        \n    return find_lists(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = dict()\n    count = 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    res = 0\n    for i in Input:\n        if type(i) == list:\n            res += 1\n    return res\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = 0\n    for i in range(len(Input)):\n        if Input[i][0] == 'L':\n            L = L + 1\n    return L\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # 1. Declare a variable:\n    # Assign the tuple to a variable:\n    # Create a loop:\n    # Iterate through the tuple:\n    # Check the first index (0) of the tuple:\n    # If the tuple contains a number:\n    #   - Assign that number to the variable:\n    #       - Check the first index (0) of the tuple:\n    #   - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the second index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the third index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the forth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the fifth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the sixth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the seventh index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the eighth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the ninth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the tenth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check the eleventh index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thetwelfth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thefourteenth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thefifteenth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thesixteenth index (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check theseventindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thesixthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thesevenindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check theeightindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check theninethindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thetwothindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirtindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thetwothindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to the variable:\n    #       - Check thethirteenthindex (0) of the tuple:\n    #       - If the tuple contains a list:\n    #       - Assign that list to th"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    max_index_val = -1\n    max_index_val_value = -1\n    for i in range(0,len(arr)):\n        abs_diff = abs(arr[i] - arr[max_index_val])\n        if (abs_diff > max_abs_diff):\n            max_abs_diff = abs_diff\n            max_index_val = i\n            max_index_val_value = arr[i]\n    return [max_index_val_value,max_index_val]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif arr[-1] - arr[0] > arr[-2] - arr[0]:\n        return arr[-1] - arr[0]\n    elif arr[-1] - arr[0] == arr[-2] - arr[0]:\n        return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max_Abs_Diff_Array = []\n    Max_Abs_Diff_Array.append(arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            x = arr[i]\n            y = arr[j]\n            x_diff = abs(x - y)\n            y_diff = abs(y - x)\n            max_diff = max(x_diff, y_diff, max_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_abs_diff = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff > max_abs_diff:\n                max_abs_diff = abs_diff\n    return max_abs_diff"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max=arr[0]\n    for i in range(1,len(arr)):\n        if(arr[i]>Max):\n            Max=arr[i]\n    return Max\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if not arr:\n        return 0\n    max_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, abs(arr[i] - arr[i - 1]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = -float('inf')\n    n = len(arr)\n    # iterating for each element in the array\n    for i in range(n):\n        for j in range(i, n):\n            # calculating the absolute difference of the two elements\n            abs_diff = abs(arr[i] - arr[j])\n            # calculating the maximum absolute difference\n            max_abs_diff = max(abs_diff, max_abs_diff)\n    return max_abs_diff\n    \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr) \n    max_diff = arr[0] - arr[1] \n    for i in range(n-2): \n        diff = arr[i] - arr[i+1] \n        if diff > max_diff: \n            max_diff = diff \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_num = -99999\n    max_num_index = -1\n    \n    arr.sort()\n    \n    for i in range(len(arr) - 1):\n        num = arr[i + 1] - arr[i]\n        if num > max_num:\n            max_num = num\n            max_num_index = i\n    \n    return max_num\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def find_solutions(a, b, n):\n        '''\n        Returns a tuple of tuples of integers that satisfy ax + by = n as a tuple.\n        '''\n        if n == 0:\n            return []\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return (a,b)\n    if a == 0:\n        return (b,n)\n    if b == 0:\n        return (a,n)\n    \n    if a > 0:\n        (x,y) = find_solution(a//a, b//b, n//n)\n        x, y = x if x < n else n, y if y < n else n\n        return (x,y)\n    \n    (x,y) = find_solution(-b//b, a//a, n//n)\n    x, y = x if x < n else n, y if y < n else n\n    return (x,y)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if a == b:\n        return a, b\n    \n    if a == 0:\n        return None\n    \n    if n == 1:\n        return a, b\n    \n    if a < 0:\n        return None\n    \n    if b % a == 0:\n        return (a, b//a)\n    \n    if n == b // a:\n        return None\n    \n    if n % a == 0:\n        return None\n    \n    if n % a == 0:\n        return None\n    \n    # print(n,a,b)\n    \n    return find_solution(a-1, b, n//a) + (a,b//a)\n    \n    \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    raise NotImplementedError\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Find two of the two integers that satisfy both ax + by = n.\n    x = (a, b)\n    y = (a + b, a - b)\n    if not x[0] or not y[0]:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    if(a == 0):\n        return None, None\n    if(b == 0):\n        return None, None\n    x, y = a, b\n    for x in range(n):\n        x, y = y, x + y * n\n    return x, y"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n <= 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return find_solution(a, b, 2)\n    elif n == 2:\n        return find_solution(a, b, 3)\n    elif n == 3:\n        return find_solution(a, b, 4)\n    elif n == 4:\n        return find_solution(a, b, 5)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = None\n    for i in range(1, n+1):\n        if a*i + b == n:\n            x = i\n            y = n\n    return x,y\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # ///////////////////////////////END OF YOUR CODE ///////////////////////////////\n    '''\n    Do not edit the code below this line\n    '''\n    i = 0\n    for i in range(len(list1)):\n        while list1[i] in list2:\n            list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for index in range(len(list2)):\n        list1.remove(list2[index])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through each element in list1\n    for i in range(len(list1)):\n        # Iterate through each element in list2\n        for j in range(len(list2)):\n            # If the element is found in list1 then remove it\n            if list1[i] == list2[j]:\n                list1.pop(i)\n                j -= 1\n        # If the number of elements that has been found in list2 is greater than the number of elements\n        # in list1 then call the function again\n        if len(list1) > len(list2):\n            list1 = remove_elements(list1, list2)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        if not x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for el in list1:\n        if el in list2:\n            list2.remove(el)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    a = list1\n    b = list2\n    for i in range(len(b)):\n        for j in range(len(a)):\n            if a[j] == b[i]:\n                del(a[j])\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # your code here\n    count = 0\n    for element in list1:\n        if element not in list2:\n            list2.append(element)\n            count = count + 1\n    list2.sort()\n    print(list2)\n    print(f'{count} elements are removed.')\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n-2*n+sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (sum_series(n-2) + (n-4)) % 1000000007\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n + (n - 2) + (n - 4)) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Your code here\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-1)\n    \nprint(sum_series(5))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    x = 0\n    for i in range(n // 2):\n        x = x + i\n        \n    return x + n - 2 * (n - 2)\n        \ndef is_palindrome(n):\n    '''\n    Given a number, determine if it is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam.\n    \n    >>> is_palindrome(1221)\n    True\n    >>> is_palindrome(16)\n    True\n    >>> is_palindrome(16)\n    False\n    >>> is_palindrome(1630)\n    True\n    >>> is_palindrome(1630)\n    False\n    >>> is_palindrome(1111)\n    True\n    '''\n    if n < 2:\n        return False\n    \n    return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def helper(n, x):\n        return sum(x for x in range(n) if x % 2!= 0 or x % n == n//2)\n    return helper(n, range(1, n//2+1)) + helper(n, range(n//2+1, n))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    while n>1:\n        s += n - 2*n\n        n -= 1\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n):\n        result += (n - i)\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return sum_series(n-1) + sum_series(n-2) + sum_series(n-3)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_sequence = 0\n    if n > 0:\n        for i in range(0, n // 2 + 1):\n            sum_sequence = sum_sequence + (n - i)\n    return sum_sequence\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    area = 0.5 * l * (tan(s/2)) ** 2\n    \n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0.5 * l * (s ** 2)\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s*2*(tan(pi/l))\n    return a\ndef area_triangle(a, l):\n    '''\n    Write a function to calculate the area of a regular triangle given the base and height of the triangle.\n    '''\n    return a*(l/2)\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a regular square given the length of its sides.\n    '''\n    return s*(s-1)/2\ndef area_cube(a, l):\n    '''\n    Write a function to calculate the area of a regular cube given the base and height of the cube.\n    '''\n    return a*(l**3)/3\ndef area_dodecahedron(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron given the base and height of the dodecahedron.\n    '''\n    return a*(l**3)/6\ndef area_icosahedron(a, l):\n    '''\n    Write a function to calculate the area of a regular icosahedron given the base and height of the icosahedron.\n    '''\n    return a*(l**3)/16\ndef area_heptagon(a, l):\n    '''\n    Write a function to calculate the area of a regular heptagon given the base and height of the heptagon.\n    '''\n    return a*(l**3)/32\ndef area_octagon(a, l):\n    '''\n    Write a function to calculate the area of a regular octagon given the base and height of the octagon.\n    '''\n    return a*(l**3)/24\ndef area_rhombus(a, l):\n    '''\n    Write a function to calculate the area of a regular rhombus given the base and height of the rhombus.\n    '''\n    return a*(l**3)/8\ndef area_dodecahedron_parametric(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric given the base and height of the dodecahedron.\n    '''\n    return a*(l**3)/3*(4*l**3)/3\ndef area_dodecahedron_spherical(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron spherical given the base and height of the dodecahedron.\n    '''\n    return a*(l**3)/3*(4*l**3)/3*(4*l**3)/3\ndef area_dodecahedron_spherical_parametric(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric spherical given the base and height of the dodecahedron.\n    '''\n    return a*(l**3)/3*(4*l**3)/3*(4*l**3)/3*(4*l**3)/3\ndef area_dodecahedron_spherical_parametric_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric spherical given the base and height of the dodecahedron.\n    '''\n    return a*(l**3)/3*(4*l**3)/3*(4*l**3)/3*(4*l**3)/3\ndef area_cylinder(a, l):\n    '''\n    Write a function to calculate the area of a regular cylinder given the base and height of the cylinder.\n    '''\n    return a*(l**2)/3\ndef area_heptagon_parametric(a, l):\n    '''\n    Write a function to calculate the area of a regular heptagon parametric given the base and height of the heptagon.\n    '''\n    return a*(l**2)/3\ndef area_dodecahedron_parametric_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric given the base and height of the dodecahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3\ndef area_dodecahedron_parametric_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric given the base and height of the dodecahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3*(4*l**2)/3\ndef area_heptahedron_spherical_parametric(a, l):\n    '''\n    Write a function to calculate the area of a regular heptahedron parametric given the base and height of the heptahedron.\n    '''\n    return a*(l**2)/3\ndef area_heptahedron_spherical_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular heptahedron parametric given the base and height of the heptahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3\ndef area_heptahedron_spherical_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular heptahedron parametric given the base and height of the heptahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3*(4*l**2)/3\ndef area_heptahedron_spherical_cartesian_parametric(a, l):\n    '''\n    Write a function to calculate the area of a regular heptahedron parametric given the base and height of the heptahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3*(4*l**2)/3*(4*l**2)/3\ndef area_cylinder_parametric(a, l):\n    '''\n    Write a function to calculate the area of a regular cylinder parametric given the base and height of the cylinder.\n    '''\n    return a*(l**2)/3\ndef area_heptahedron_parametric_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular heptahedron parametric given the base and height of the heptahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3\ndef area_heptahedron_parametric_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular heptahedron parametric given the base and height of the heptahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3*(4*l**2)/3\ndef area_dodecahedron_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric given the base and height of the dodecahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3\ndef area_dodecahedron_cartesian_parametric(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric given the base and height of the dodecahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3*(4*l**2)/3*(4*l**2)/3\ndef area_dodecahedron_cartesian_parametric_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric given the base and height of the dodecahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/3*(4*l**2)/3*(4*l**2)/3*(4*l**2)/3\ndef area_dodecahedron_cartesian_parametric_cartesian(a, l):\n    '''\n    Write a function to calculate the area of a regular dodecahedron parametric given the base and height of the dodecahedron.\n    '''\n    return a*(l**2)/3*(4*l**2)/"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += l ** 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = 0\n    for i in range(l-1):\n        A += tan(s/l) * l\n    A = A/2\n    return A\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (2*s[i]-1)*tan(i*pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * s * (l**2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l*s/2\ndef volume_polygon(l, s):\n    '''\n    Write a function to calculate the volume of a regular polygon given the length and number of its sides.\n    '''\n    return l*s*3.14\ndef unit_vec(v):\n    '''\n    Write a function to get the unit vector from a 3-vector given in the format of x,y,z.\n    '''\n    return (v[0], v[1], v[2])\ndef vector_angle(v1, v2):\n    '''\n    Write a function to get the vector angle from a 3-vector.\n    '''\n    v1_norm = unit_vec(v1)\n    v2_norm = unit_vec(v2)\n    return (v1_norm[0] * v2_norm[0] + v1_norm[1] * v2_norm[1] + v1_norm[2] * v2_norm[2]) / (unit_vec(v1)[0] * unit_vec(v2)[0] + unit_vec(v1)[1] * unit_vec(v2)[1] + unit_vec(v1)[2] * unit_vec(v2)[2])\ndef vector_angle_2D(v1, v2):\n    '''\n    Write a function to get the vector angle from a 2D point given in the format of x,y.\n    '''\n    v1_norm = unit_vec(v1)\n    v2_norm = unit_vec(v2)\n    return (v1_norm[0] * v2_norm[1] + v1_norm[1] * v2_norm[0]) / (unit_vec(v1)[0] * unit_vec(v2)[1] + unit_vec(v1)[1] * unit_vec(v2)[0])\ndef normalize_vector(v):\n    '''\n    Write a function to normalize a given 3D vector.\n    '''\n    n = [0, 0, 0]\n    for i in range(3):\n        n[i] = v[i]\n    return n\ndef normalize_point(p):\n    '''\n    Write a function to normalize a given 3D point.\n    '''\n    n = [0, 0, 0]\n    for i in range(3):\n        n[i] = p[i]\n    return n\ndef normalize_point_2D(p):\n    '''\n    Write a function to normalize a given 2D point.\n    '''\n    n = [0, 0]\n    for i in range(2):\n        n[i] = p[i]\n    return n\ndef angle_to_segment(v1, v2, v3):\n    '''\n    Write a function to calculate the angle between two given 3D vectors.\n    '''\n    n = unit_vec(v1)\n    n2 = unit_vec(v2)\n    n3 = unit_vec(v3)\n    p = [0, 0, 0]\n    p[0] = (n[0] * n2[0] - n[1] * n2[1] - n[2] * n2[2]) / (n[0] * n2[0] + n[1] * n2[1] + n[2] * n2[2])\n    p[1] = (n[0] * n3[0] - n[1] * n3[1] - n[2] * n3[2]) / (n[0] * n3[0] + n[1] * n3[1] + n[2] * n3[2])\n    p[2] = (n[0] * n3[0] * n[0] - n[1] * n3[1] * n[1] - n[2] * n3[2] * n[2]) / (n[0] * n3[0] * n[0] + n[1] * n3[1] * n[1] + n[2] * n3[2] * n[2])\n    return (p[0] * 360 / (2 * pi)) + 360\ndef angle_to_segment_2D(v1, v2, v3):\n    '''\n    Write a function to calculate the angle between two given 2D points.\n    '''\n    n = unit_vec(v1)\n    n2 = unit_vec(v2)\n    n3 = unit_vec(v3)\n    p = [0, 0, 0]\n    p[0] = (n[0] * n2[0] - n[1] * n2[1] - n[2] * n2[2]) / (n[0] * n2[0] + n[1] * n2[1] + n[2] * n2[2])\n    p[1] = (n[0] * n3[0] - n[1] * n3[1] - n[2] * n3[2]) / (n[0] * n3[0] + n[1] * n3[1] + n[2] * n3[2])\n    p[2] = (n[0] * n3[0] * n[0] - n[1] * n3[1] * n[1] - n[2] * n3[2] * n[2]) / (n[0] * n3[0] * n[0] + n[1] * n3[1] * n[1] + n[2] * n3[2] * n[2])\n    return (p[0] * 360 / (2 * pi)) + 360\ndef arc_to_segment_2D(v1, v2, v3):\n    '''\n    Write a function to calculate the arc angle between two given 2D points.\n    '''\n    n = unit_vec(v1)\n    n2 = unit_vec(v2)\n    n3 = unit_vec(v3)\n    p = [0, 0, 0]\n    p[0] = (n[0] * n2[0] - n[1] * n2[1] - n[2] * n2[2]) / (n[0] * n2[0] + n[1] * n2[1] + n[2] * n2[2])\n    p[1] = (n[0] * n3[0] - n[1] * n3[1] - n[2] * n3[2]) / (n[0] * n3[0] + n[1] * n3[1] + n[2] * n3[2])\n    p[2] = (n[0] * n3[0] * n[0] - n[1] * n3[1] * n[1] - n[2] * n3[2] * n[2]) / (n[0] * n3[0] * n[0] + n[1] * n3[1] * n[1] + n[2] * n3[2] * n[2])\n    return (p[0] * 360 / (2 * pi)) + 360\ndef angle_to_arc_2D(v1, v2, v3):\n    '''\n    Write a function to calculate the arc angle between two given 2D points.\n    '''\n    n = unit_vec(v1)\n    n2 = unit_vec(v2)\n    n3 = unit_vec(v3)\n    p = [0, 0, 0]\n    p[0] = (n[0] * n2[0] - n[1] * n2[1] - n[2] * n2[2]) / (n[0] * n2[0] + n[1] * n2[1] + n[2] * n2[2])\n    p[1] = (n[0] * n3[0] - n[1] * n3[1] - n[2] * n3[2]) / (n[0] * n3[0] + n[1] * n3[1] + n[2] * n3[2])\n    p[2] = (n[0] * n3[0] * n[0] - n[1] * n3[1] * "
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate area\n    r = s / 2\n    a = l * pi\n    return pi * r**2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = 0\n    for k in range(l):\n        A = A + k * s\n    return A\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum_div_1 = n // 2\n        sum_div_2 = n // 2\n        if sum_div_1 == sum_div_2:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    divisors = []\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if (n % i == 0):\n            sum += i\n            if (n/i == sum):\n                return \"No, the divisors of the number \" + str(n) + \" are \" + str(i) + \".\"\n                break\n        i += 1\n    return \"No, the divisors of the number \" + str(n) + \" are \" + str(i) + \".\"\n    \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1: \n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(1,n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    try: \n        if n < 0: \n            return False\n        if n == 0:\n            return True\n        d = n % 10\n        return div_sum(int(str(n) + str(d)))\n    except:\n        return False\ndef is_prime(n): \n    '''\n    check if a number is prime or not \n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6): \n        if n % i == 0 or n % (i+2) == 0: \n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(n % i == 0):\n            sum += i\n    if(n == sum):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # i = 1\n    # j = 1\n    # while i < n:\n    #     if n % i == 0:\n    #         j = n//i\n    #         break\n    #     i+=1\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n%2 == 0:\n        return div_sum(int(n/2))\n    elif n%2 == 1:\n        return False\n    elif n == int(n/2):\n        return div_sum(int(n/2))\n    else:\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<0:\n        n*=-1\n    \n    divs = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            divs.append(i)\n    \n    for i in divs:\n        if n//i==i:\n            return True\n    \n    return False\n    \ndef gcd(a,b):\n    '''\n    Returns the greatest common divisor of two integers.\n    '''\n    while b:\n        a,b=b,a%b\n    return a\n    \ndef calc_p(a,b,p):\n    '''\n    Returns the Prime number P such that 1 <= P <= n.\n    '''\n    if b==0:\n        return False\n    if b%a==0:\n        return False\n    if b==a:\n        return True\n    if p==2:\n        return False\n    if b>a and b%a==0:\n        return True\n    while b:\n        if b%a==0:\n            return False\n        b//=a\n    return True\n    \ndef gcd_prime(p,q):\n    '''\n    Returns the greatest common divisor of two primes p and q.\n    '''\n    while True:\n        if p==q:\n            return p\n        if p<q:\n            p,q=q,p\n        if p%q==0:\n            return q\n    \ndef gcd_pq(a,b):\n    '''\n    Returns the Greatest Common Divisor of a and b.\n    '''\n    while b:\n        a,b=b,a%b\n    return a\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count=count+1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(str1.replace(\" \", \"\"))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for char in str1:\n        if char.isupper():\n            char_count += 1\n        else:\n            char_count = 0\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # declare\n    list = []\n    # loop\n    for index in range(len(str1)):\n        # get\n        letter = str1[index]\n        # count\n        list.append(str1[index] == letter)\n    # return\n    return(sum(list))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    positions = []\n    for char in str1:\n        positions.append(char.upper() in alphabet)\n    return position"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0 \n    for i in range(0,len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counts = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].lower() in alphabet:\n                counts += 1\n    return counts\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char_position = 0\n    for index, char in enumerate(str1):\n        if str1[index].isupper():\n            count_char_position += 1\n        elif str1[index].islower():\n            count_char_position += 1\n        else:\n            count_char_position += 1\n    return count_char_position\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for x in A:\n        if x % 2 == 0:\n            even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        if i % 2 == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(len(A)):\n        if A[i]&1 == 0:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in A:\n        for j in range(0,i):\n            if (A[j] & A[i]):\n                even_count +=1\n        if (even_count % 2!=0):\n            return even_count\n        \n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_num = 0\n    even_num = 0\n    for a in A:\n        if a % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return odd_num, even_num\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i] & A[j] == 0:\n                odd_pair_count += 1\n    return odd_pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] & A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    even_count = 0\n    odd_count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (A[i] & A[j] == 0):\n                even_count = even_count + 1\n            else:\n                odd_count = odd_count + 1\n    return even_count, odd_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in A:\n        if i % 2 == 0:\n            even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j] == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = 0\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            l += 1\n        if (l > 1):\n            return i\n    return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = []\n    for i in range(n+1):\n        if i < 2 or 2**i > n:\n            l.append(i)\n    return l[-1]\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while True: \n        i += 1\n        if i % 2 == 1: \n            break \n    while True: \n        i += 1\n        if i % 2 == 0: \n            break \n    if i > n: \n        return i \n    else: \n        return n \n    \n    \ndef main(): \n    '''\n    Make a function that meets the specifications below.\n    ''' \n    # print(next_power_of_2(3)) \n    # print(next_power_of_2(2)) \n    # print(next_power_of_2(12)) \n    # print(next_power_of_2(3)) \n    # print(next_power_of_2(3)) \n    # print(next_power_of_2(12)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2(123)) \n    # print(next_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 2 \n    while power <= n: \n        if n%2 == 0: \n            print(n, \"is not a power of 2\") \n            break \n        else: \n            if n%2 == 1: \n                print(n, \"is a power of 2\") \n                break \n            else: \n                power += 2\n    else: \n        print(n, \"is a power of 2\") \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            return i \n        i += 1\n    return 0 \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Code goes here\n    if n <= 2:\n        return n\n    else:\n        return next_power_of_2(n-2) + 2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 2\n    while 2**power_of_2 <= n:\n        power_of_2 += 1\n    return 2**power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return n//i\n        else:\n            i += 1\n    return n - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n > 0:\n        while n % 2 == 0:\n            n /= 2\n        return n\n    else:\n        print(\"Please enter a positive integer\")\n        return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    return n * next_power_of_2(n-1)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    i = 0\n    c = 0\n    while i < len(a):\n        if a[i] == x:\n            c += 1\n        i += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort() # sort the list \n    occurrence = 0\n    for index in range(0, len(a)): # start with all the elements\n        if(a[index] == x): \n            occurrence += 1\n    return occurrence\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if x==a[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Your code here\n    print (a,x)\n    return len(a)\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    l = len(a)\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    x=set(x)\n    return len(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # Create a dictionary with a 'a' key \n    dictionary = {}\n    for char in a:\n        # if the key is present, add 1 to the count\n        if char in dictionary.keys():\n            dictionary[char] = dictionary[char] + 1\n        # if the key is not present, add 1 to the count\n        else:\n            dictionary[char] = 1\n    \n    # Build the output list by using the dictionary as a key\n    output = []\n    for key, val in dictionary.items():\n        output.append(val)\n    \n    # Use count() to return the value\n    return output.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if type(x)==type([]):\n        d = dict(Counter(x))\n        return d[x]\n    else:\n        return len(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    output = 0\n    for i in range(m, n):\n        output += list1[i]\n    return output\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n    \ndef create_zero_matrix(m, n):\n    '''\n    Write a function that returns a matrix filled with zeroes.\n    '''\n    matrix = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(0)\n        matrix.append(row)\n    return matrix\n    \ndef print_matrix(matrix):\n    '''\n    Write a function that prints a matrix.\n    '''\n    for row in matrix:\n        print(row)\n        \ndef check_in_matrix(matrix, row, column):\n    '''\n    Check if the position given by the user is in the matrix.\n    '''\n    if row >= 0 and row < len(matrix) and column >= 0 and column < len(matrix[0]):\n        return True\n    return False\n    \ndef check_valid_input(prompt, valid_input):\n    '''\n    Ask the user for input, and convert it into an integer if it is valid.\n    '''\n    while True:\n        try:\n            user_input = int(input(prompt))\n            if user_input in valid_input:\n                break\n            else:\n                print(\"That is not a valid value\")\n        except ValueError:\n            print(\"That is not a valid value\")\n            \ndef user_input_int():\n    '''\n    Read user input, and convert it into an integer.\n    '''\n    row = 0\n    while row < 2:\n        while True:\n            try:\n                row = int(input(\"Enter row: \"))\n            except ValueError:\n                print(\"That is not a valid value\")\n                row = 0\n                break\n            if row < 2:\n                break\n        row -= 1\n    return row\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if list1 == None:\n        return 0\n    if m == None or n == None:\n        return 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+m]) + sum(list1[i+m:i+2*m]) + sum(list1[i+2*m:i+3*m]) + sum(list1[i+3*m:i+4*m]) + sum(list1[i+4*m:i+5*m])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    print(sum)\n    return sum                                                                                                                                                                                                                                                                                                                                                                         \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    result = 0\n    for i in range(m, n):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0 or a == 1 or a == 2:\n        return 5\n    if a < 0:\n        a = -a\n        a = int(a / 2)\n    if a % 2 == 0:\n        return math.sqrt(a**2)\n    return int(a / 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here\n    return (a * 4) + 2 * (a * 2) + 4 * (a * 4) + 4 * (a * 4) + 2 * (a * 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 1:\n        return 5 * 3\n    if a == 2:\n        return 4 * 3 + 1\n    if a == 3:\n        return 3 * 3 + 1\n    if a == 4:\n        return 5 * 2 + 1\n    if a == 5:\n        return 6 * 2 + 1\n    if a == 6:\n        return 7 * 2 + 1\n    if a == 7:\n        return 8 * 2 + 1\n    if a == 8:\n        return 9 * 2 + 1\n    if a == 9:\n        return 10 * 2 + 1\n    if a == 10:\n        return 11 * 2 + 1\n    if a == 11:\n        return 12 * 2 + 1\n    if a == 12:\n        return 13 * 2 + 1\n    if a == 13:\n        return 14 * 2 + 1\n    if a == 14:\n        return 15 * 2 + 1\n    if a == 15:\n        return 16 * 2 + 1\n    if a == 16:\n        return 17 * 2 + 1\n    if a == 17:\n        return 18 * 2 + 1\n    if a == 18:\n        return 19 * 2 + 1\n    if a == 19:\n        return 20 * 2 + 1\n    if a == 20:\n        return 21 * 2 + 1\n    if a == 21:\n        return 22 * 2 + 1\n    if a == 22:\n        return 23 * 2 + 1\n    if a == 23:\n        return 24 * 2 + 1\n    if a == 24:\n        return 25 * 2 + 1\n    if a == 25:\n        return 26 * 2 + 1\n    if a == 26:\n        return 27 * 2 + 1\n    if a == 27:\n        return 28 * 2 + 1\n    if a == 28:\n        return 29 * 2 + 1\n    if a == 29:\n        return 30 * 2 + 1\n    if a == 30:\n        return 31 * 2 + 1\n    if a == 31:\n        return 32 * 2 + 1\n    if a == 32:\n        return 33 * 2 + 1\n    if a == 33:\n        return 34 * 2 + 1\n    if a == 34:\n        return 35 * 2 + 1\n    if a == 35:\n        return 36 * 2 + 1\n    if a == 36:\n        return 37 * 2 + 1\n    if a == 37:\n        return 38 * 2 + 1\n    if a == 38:\n        return 39 * 2 + 1\n    if a == 39:\n        return 40 * 2 + 1\n    if a == 40:\n        return 41 * 2 + 1\n    if a == 41:\n        return 42 * 2 + 1\n    if a == 42:\n        return 43 * 2 + 1\n    if a == 43:\n        return 44 * 2 + 1\n    if a == 44:\n        return 45 * 2 + 1\n    if a == 45:\n        return 46 * 2 + 1\n    if a == 46:\n        return 47 * 2 + 1\n    if a == 47:\n        return 48 * 2 + 1\n    if a == 48:\n        return 49 * 2 + 1\n    if a == 49:\n        return 50 * 2 + 1\n    if a == 50:\n        return 51 * 2 + 1\n    if a == 51:\n        return 52 * 2 + 1\n    if a == 52:\n        return 53 * 2 + 1\n    if a == 53:\n        return 54 * 2 + 1\n    if a == 54:\n        return 55 * 2 + 1\n    if a == 55:\n        return 56 * 2 + 1\n    if a == 56:\n        return 57 * 2 + 1\n    if a == 57:\n        return 58 * 2 + 1\n    if a == 58:\n        return 59 * 2 + 1\n    if a == 59:\n        return 60 * 2 + 1\n    if a == 60:\n        return 61 * 2 + 1\n    if a == 61:\n        return 62 * 2 + 1\n    if a == 62:\n        return 63 * 2 + 1\n    if a == 63:\n        return 64 * 2 + 1\n    if a == 64:\n        return 65 * 2 + 1\n    if a == 65:\n        return 66 * 2 + 1\n    if a == 66:\n        return 67 * 2 + 1\n    if a == 67:\n        return 68 * 2 + 1\n    if a == 68:\n        return 69 * 2 + 1\n    if a == 69:\n        return 70 * 2 + 1\n    if a == 70:\n        return 71 * 2 + 1\n    if a == 71:\n        return 72 * 2 + 1\n    if a == 72:\n        return 73 * 2 + 1\n    if a == 73:\n        return 74 * 2 + 1\n    if a == 74:\n        return 75 * 2 + 1\n    if a == 75:\n        return 76 * 2 + 1\n    if a == 76:\n        return 77 * 2 + 1\n    if a == 77:\n        return 78 * 2 + 1\n    if a == 78:\n        return 79 * 2 + 1\n    if a == 79:\n        return 80 * 2 + 1\n    if a == 80:\n        return 81 * 2 + 1\n    if a == 81:\n        return 82 * 2 + 1\n    if a == 82:\n        return 83 * 2 + 1\n    if a == 83:\n        return 84 * 2 + 1\n    if a == 84:\n        return 85 * 2 + 1\n    if a == 85:\n        return 86 * 2 + 1\n    if a == 86:\n        return 87 * 2 + 1\n    if a == 87:\n        return 88 * 2 + 1\n    if a == 88:\n        return 89 * 2 + 1\n    if a == 89:\n        return 90 * 2 + 1\n    if a == 90:\n        return 91 * 2 + 1\n    if a == 91:\n        return 92 * 2 + 1\n    if a == 92:\n        return 93 * 2 + 1\n    if a == 93:\n        return 94 * 2 + 1\n    if a == 94:\n        return 95 * 2 + 1\n    if a == 95:\n        return 96 * 2 + 1\n    if a == 96:\n        return 97 * 2 + 1\n    if a == 97:\n        return 98 * 2 + 1\n    if a == 98:\n        return 99 * 2 + 1\n    if a == 99:\n        return 100 * 2 + 1\n    if a == 100:\n        return 101 * 2 + 1\n    if a == 101:\n        return 102 * 2 + 1\n    if a == 102:\n        return 103 * 2 + 1\n    if a == 103:\n        return 104 * 2 + 1\n    if a == 104:\n        return 105 * 2 + 1\n    if a == 105:\n        return 106 * 2 + 1\n    if a == 106:\n        return 107 * 2 + 1\n    if a == 107:\n        return 108 * 2 + 1\n    if a == 108:\n        return 109 * 2 + 1\n    if a == 109:\n        return 110 * 2 + 1\n    if a == 110:\n        return 111 * 2 + 1\n    if a == 111:\n        return 112 * 2 + 1\n    if a == 112:\n        return 113 * 2 + 1\n    if a == 113:\n        return 114 * 2 + 1\n    if a == 114:\n        return 115 * 2 + 1\n    if a == 115:\n        return 116 * 2 + 1\n    if a == 116:\n        return 117 * 2 + 1\n    if a == 117:\n        return 118 * 2 + 1\n    if a == 118:\n        return 119 * 2 + 1\n    if a == 119:\n        return 120 * 2 + 1\n    if a == 120:\n        return 121 * 2 + 1\n    if a == 121:\n        return 122 * 2 + 1\n    if a == 122:\n        return 123 * 2 + 1\n    if a == 123:\n        return 124 * 2 + 1\n    if a == 124:\n        return 125 * 2 + 1\n    if a == 125:\n        return 126 * 2 + 1\n    if a == 126:\n        return 127 * 2 + 1\n    if a == 127:\n        return 128 * 2 + 1\n    if a == 128:\n        return 129 * 2 + 1\n    if a == 129:\n        return 130 * 2 + 1\n    if a == 130:\n        return 131 * 2 + 1\n    if a == 131:\n        return 132 * 2 + 1\n    if a == 132:\n        return 133 * 2 + 1\n    if a == 133:\n        return 134 * 2 + 1\n    if a == 134:\n        return 135 * 2 + "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Calculate the area of the polygon\n    area = (a*3)+(a*6)+(a*9)\n    #Check if the area is even\n    if area % 2 == 0:\n        return (math.sqrt(area))\n    else:\n        return None\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #declare the perimeter as a variable that will hold the value of the perimeter\n    p = 0\n    #define a loop for the length of the sides\n    for i in range(2):\n        #the loop repeats as long as the current value is not greater than the next value\n        while p < a:\n            #loop runs until the current value is greater than the next value\n            p = p + a\n    #return the perimeter\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*3\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.pi*math.pow(a,2)\ndef is_triangle(a,b,c):\n    '''\n    Write a function to check whether a triangle is possible or not.\n    '''\n    return (a+b+c) == (a+c+b)\ndef a_pairs_triangle(a,b,c):\n    '''\n    Write a function to count the number of pairs of sides that are triangles.\n    '''\n    if a+b==c or a+c==b+c:\n        return 2\n    if is_triangle(a,b,c):\n        return 4\n    if is_triangle(a,c,b):\n        return 6\n    if is_triangle(b,c,a):\n        return 6\n    return 8\ndef closest_area(a,b,c):\n    '''\n    Write a function to find the closest area of a triangle to the length of its sides.\n    '''\n    return area_pentagon(a+b+c)*(area_pentagon(a+c)-area_pentagon(b+c))/(2*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(3/2)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(3))\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(5/8)\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(5))\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (a**2)*(6/16)\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(6))\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return (a**2)*(7/32)\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(7))\ndef perimeter_octagon_hepta(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(7/32)\ndef area_octagon_hepta(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(7))\ndef perimeter_pentagon_hepta(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(4/7)\ndef area_pentagon_hepta(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(4))\ndef perimeter_octagon_hepta_2(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(4/7)\ndef area_octagon_hepta_2(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(4))\ndef perimeter_hepta(a):\n    '''\n    Write a function to find the perimeter of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(7/16)\ndef area_hepta(a):\n    '''\n    Write a function to find the area of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(7))\ndef perimeter_pentagon_hepta_2(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(4/7)\ndef area_pentagon_hepta_2(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(4))\ndef perimeter_octagon_hepta_2(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(4/7)\ndef area_octagon_hepta_2(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(4))\ndef perimeter_hepta_2(a):\n    '''\n    Write a function to find the perimeter of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(4/7)\ndef area_hepta_2(a):\n    '''\n    Write a function to find the area of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(4))\ndef perimeter_pentagon_hepta_3(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(7/16)\ndef area_pentagon_hepta_3(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(7))\ndef perimeter_octagon_hepta_3(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(7/32)\ndef area_octagon_hepta_3(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(7))\ndef perimeter_hepta_3(a):\n    '''\n    Write a function to find the perimeter of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(7/16)\ndef area_hepta_3(a):\n    '''\n    Write a function to find the area of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(7))\ndef perimeter_pentagon_hepta_4(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(5/8)\ndef area_pentagon_hepta_4(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(5))\ndef perimeter_octagon_hepta_4(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(5/8)\ndef area_octagon_hepta_4(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(5))\ndef perimeter_hepta_4(a):\n    '''\n    Write a function to find the perimeter of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(5/8)\ndef area_hepta_4(a):\n    '''\n    Write a function to find the area of a regular hepta from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(5))\ndef perimeter_pentagon_hepta_5(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(5/8)\ndef area_pentagon_hepta_5(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a**2)*(math.sqrt(5))\ndef perimeter_octagon_hepta_5(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return ("
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (2*a + math.sqrt(5)*a*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4 * a * math.sqrt(3) * math.sqrt(2 * a)) / 3\ndef area_of_triangle(a, b, c):\n    '''\n    Write a function to find the area of a triangle given three side lengths.\n    '''\n    return (math.sqrt(a * a + b * b + c * c) / 2)\ndef area_of_parallelepiped(a, b, c):\n    '''\n    Write a function to find the area of a parallelepiped given its length.\n    '''\n    return (a * b * c) / 2\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    return (3.14 * r ** 2) / 4\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle given its radius.\n    '''\n    return (2 * math.pi * r)\ndef volume_of_cuboid(a, b, c):\n    '''\n    Write a function to find the volume of a cube given its volume and its base.\n    '''\n    return (4 * math.sqrt(a ** 3 + b ** 3 + c ** 3) * math.sqrt(3) / 3)\ndef volume_of_cube(r):\n    '''\n    Write a function to find the volume of a cube given its radius.\n    '''\n    return (4 / 3) * math.pi * (r ** 3)\ndef volume_of_cuboid_twice(a, b, c):\n    '''\n    Write a function to find the volume of a cube given its volume and its base.\n    '''\n    return (4 / 3) * math.pi * (a ** 3 + b ** 3 + c ** 3) * math.sqrt(3) / 3\ndef volume_of_cube_twice(r):\n    '''\n    Write a function to find the volume of a cube given its radius.\n    '''\n    return 4 / 3 * math.pi * (r ** 3)\ndef volume_of_circle_twice(r):\n    '''\n    Write a function to find the volume of a circle given its radius.\n    '''\n    return 4 / 3 * math.pi * (r ** 3)\ndef volume_of_circle_twice_base(r):\n    '''\n    Write a function to find the volume of a circle given its radius.\n    '''\n    return 4 / 3 * math.pi * (r ** 3) * math.sqrt(3)\ndef volume_of_circle_twice_base_numerically(r):\n    '''\n    Write a function to find the volume of a circle given its radius.\n    '''\n    return 4 / 3 * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(2) / 3\ndef volume_of_pentagon_twice(a):\n    '''\n    Write a function to find the volume of a pentagon given its base and its length.\n    '''\n    return (2 * a * math.sqrt(3) * math.sqrt(2) * math.sqrt(2) / 3)\ndef volume_of_parallelepiped_twice(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped given its base and its length.\n    '''\n    return (2 * a * math.sqrt(3) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) / 3)\ndef volume_of_triangle(a, b, c):\n    '''\n    Write a function to find the volume of a triangle given its base and its length.\n    '''\n    return (a * b * c) / 2\ndef area_of_triangle_twice(a, b, c):\n    '''\n    Write a function to find the area of a triangle given its base and its length.\n    '''\n    return ((a * b * c) / 2)\ndef volume_of_cube_twice_base(r):\n    '''\n    Write a function to find the volume of a cube given its base and its radius.\n    '''\n    return ((r ** 3) * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(3) * math.sqrt(3) / 3)\ndef volume_of_cube_twice_base_numerically(r):\n    '''\n    Write a function to find the volume of a cube given its base and its radius.\n    '''\n    return ((r ** 3) * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(3) * math.sqrt(3) / 3)\ndef volume_of_circle_twice_base(r):\n    '''\n    Write a function to find the volume of a circle given its base and its radius.\n    '''\n    return ((r ** 3) * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(2) / 3)\ndef volume_of_circle_twice_base_numerically(r):\n    '''\n    Write a function to find the volume of a circle given its base and its radius.\n    '''\n    return ((r ** 3) * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(2) / 3)\ndef volume_of_pentagon_twice_base(a):\n    '''\n    Write a function to find the volume of a pentagon given its base and its radius.\n    '''\n    return (a * math.sqrt(3) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) / 3)\ndef volume_of_parallelepiped_twice_base(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped given its base and its length.\n    '''\n    return ((a * math.sqrt(3) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) / 3) + (b * math.sqrt(3) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) / 3) + c * math.sqrt(3) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) / 3)\ndef volume_of_cube_twice_base_numerically(r):\n    '''\n    Write a function to find the volume of a cube given its base and its radius.\n    '''\n    return ((r ** 3) * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(3) * math.sqrt(3) / 3)\ndef volume_of_circle_twice_base_numerically(r):\n    '''\n    Write a function to find the volume of a circle given its base and its radius.\n    '''\n    return ((r ** 3) * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(2) / 3)\ndef volume_of_circle_twice_base_numerically(r):\n    '''\n    Write a function to find the volume of a circle given its base and its radius.\n    '''\n    return ((r ** 3) * math.pi * (r ** 3) * math.sqrt(3) * math.sqrt(2) / 3)\ndef volume_of_pentagon_twice_base(a, b, c):\n    '''\n    Write a function to find the volume of a pentagon given its base and its length.\n    '''\n    return ((a * b * c) / 2)\ndef volume_of_parallelepiped_twice_base(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped given its base and its length.\n    '''\n    return (2 * a * math.sqrt(3) * math.sqrt(2) * math.sqrt(2) * math.sqrt(2) / 3)\ndef volume_of_triangle_twice_bas"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # TO DO\n    # Write your code here\n    if a == 0:\n        return 0\n    return (4 * math.pi * a) * a\n    \ndef area_triangle(a):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    # TO DO\n    # Write your code here\n    return math.pi * a ** 2\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # Create a dictionary to record the occurence of the string\n    d = {}\n    # Loop through the string and count the occurrence of'std'\n    for ch in s:\n        if ch in d:\n            d[ch] += 1\n        else:\n            d[ch] = 1\n    # Return the number of occurence of the string'std'\n    return d[s[0]]\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import re\n    # TODO\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if s.find(i)!= -1:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    string ='std'\n    lst_str = list(string)\n    lst_str.remove('?')\n    lst_str.remove('.')\n    lst_str.remove('-')\n    lst_str.remove(' ')\n    occ_str = []\n    \n    for i in lst_str:\n        occ_str.append(s.count(i))\n    \n    occ_str.sort()\n    \n    return occ_str\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print(\"There are no occurence of:'std' in given string\")\n    print(\"The number of occurrence of'std' is: \",s.count('std'))\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.replace(' ', '').lower()\n    occurances = s.count('std')\n    print(\"Occurances of'std' in string: {}\".format(occurances))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurances = s.count('std')\n    return occurances\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check type of all elements in the tuple\n    # if list is of float and list is of string then type is not same\n    # if list is of float and list is of numeric then type is same\n    # if list is of string then type is not same\n    # if all elements have same data type then return True\n    # if some elements have same data type then return False\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is not type(1.0):\n            return False\n    return True\n    #return all(type(i)==type(j) for i,j in zip(test_tuple,test_tuple[1:]))\n    #return all(type(i)==type(j) for i,j in zip(test_tuple,test_tuple[1:]) if type(j)==type(i))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # case 1\n    if not isinstance(test_tuple[0], (int, float)):\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list_in, list_out, list_in2 = test_tuple\n    # if the first element has same data type as second element, they are different types, they cannot be compared\n    if list_in[0].dtype == list_in2[0].dtype:\n        print(\"The first element has same data type as the second element.\")\n        return True\n    else:\n        print(\"The first element has different data type from the second element.\")\n        return False\n    \ndef check_unique(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple are unique.\n    '''\n    list_in, list_out = test_tuple\n    # if the first element is unique, we need to check that it has only one occurrence\n    if len(list_in) == 1 and len(list_out) == 1:\n        print(\"The first element has only one occurrence, it is a unique one.\")\n        return True\n    else:\n        print(\"The first element has more than one occurrence, it is not a unique one.\")\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = ('int', 'float','str', 'bool', 'list')\n    assert test_tuple[0] in types, \"tuple has wrong data type or not\"\n    \n    if test_tuple[0] == 'int':\n        assert len(test_tuple[1]) >= 3, \"tuple has too many or too few integers\"\n    elif test_tuple[0] =='str':\n        assert len(test_tuple[1]) >= 2, \"tuple has too many or too few strings\"\n    elif test_tuple[0] == 'bool':\n        assert len(test_tuple[1]) >= 1, \"tuple has too many or too few booleans\"\n    elif test_tuple[0] == 'list':\n        assert len(test_tuple[1]) >= 2, \"tuple has too many or too few lists\"\n    else:\n        assert False, \"invalid type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for tup in test_tuple:\n        try:\n            tup[0] = int(tup[0])\n        except ValueError:\n            raise TypeError(\"Incorrect data type!\")\n        except TypeError:\n            raise TypeError(\"Incorrect data type!\")\n        except IndexError:\n            raise TypeError(\"Index should be less than length of the list!\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Create a tuple\n    test_tuple_1 = (test_tuple)\n    # Initialize a variable to hold the value\n    value = None\n    # Create a for loop to iterate over each element\n    for element in test_tuple_1:\n        # Check if the elements value is the same\n        if test_tuple_1[0]!= element:\n            # If not - raise an exception\n            raise Exception(\"Tuple is not of the same data type.\")\n    return True\n    \n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_of_element = []\n    for element in test_tuple:\n        if type(element) == str:\n            type_of_element.append(str)\n        elif type(element) == bytes:\n            type_of_element.append(bytes)\n        elif type(element) == float:\n            type_of_element.append(float)\n        elif type(element) == int:\n            type_of_element.append(int)\n        else:\n            print(\"Invalid data type\")\n            return\n    if all(type_of_element) == bool:\n        print(\"Valid data type\")\n    else:\n        print(\"Invalid data type\")\n        return\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #tuple_1 = (1, 'a', True)\n    #tuple_2 = (1, 'a', False)\n    #check_type(tuple_1)\n    #check_type(tuple_2)\n    #Tuple1 = tuple(tuple_1)\n    #Tuple2 = tuple(tuple_2)\n    #print(Tuple1 == Tuple2)\n    return all(i.isalpha() for i in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    first = test_tuple[0]\n    second = test_tuple[1]\n    \n    if isinstance(first, float) and isinstance(second, float):\n        if first == second:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)!= 4:\n        return False\n    for i in test_tuple:\n        if not isinstance(i, (int, float, complex)):\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    n1 = n+1\n    n2 = n\n    if n == 1:\n        return True\n    elif n%2 == 0:\n        for i in range(1, n1, 2):\n            if arr[i] > arr[i-1]:\n                return False\n    else:\n        for i in range(1, n1, 2):\n            if arr[i] < arr[i-1]:\n                return False\n    for i in range(n1, n, 2):\n        if arr[i] > x:\n            return False\n    return True\n    # return arr.count(x) >= n//2\n    # return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    if n == 1:\n        return arr[0]==x\n    else:\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        if count == n/2:\n            return True\n        else:\n            return False\n    \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return find_majority(arr, n, x) == arr[0]\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count / n > 0.5:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    # We will check for the occurrence of the element x in the array\n    # Sort the array in ascending order\n    for i in range(n):\n        if x == arr[i]:\n            return False\n    # If element does not occur then return false\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr == []: return False\n    if n == 0: return False\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    while i <= j:\n        count += 1\n        if arr[i] == x:\n            if count > (n/2):\n                return True\n        else:\n            if count < n/2:\n                return False\n        if arr[i] >= x:\n            i += 1\n        else:\n            j -= 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    s=0\n    #print(len(arr))\n    for i in range(n):\n        s+=arr[i]\n        if s>x:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) <= 1:\n        return True\n    else:\n        return (x in arr and (arr.count(x) >= n/2 or arr[arr.index(x)]!= x))\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if arr[i] == x:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        if is_majority(arr, n-1, x):\n            return True\n        if is_majority(arr, n-1, x):\n            return True\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n < 0:\n        print(\"Invalid Input.\")\n        return -1\n    bits = 0\n    while n > 0:\n        n = n & 255\n        bits += 1\n    return bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #Your code here\n    \n    return 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an odd number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        # print(binary)\n    # print(binary)\n    return count\n    \ndef count_Set_Bits_r(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an odd number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n        \ndef count_Set_Bits_r_divisor(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_r_summ(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_summ(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_summ_divisor(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_summ_r(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_r_summ(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_r_summ_divisor(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_r_summ_r(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize count\n    count = 0\n    # convert to string\n    str_n = str(n)\n    # convert string to binary\n    binary = list(str_n)\n    # iterate through list\n    for i in range(len(binary)):\n        # set bit 1 at index i \n        binary[i] = '1'\n        # check if it is an odd number, if it is an even number, set it to 0\n        # if it is an even number, set it to 1\n        if binary[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n    \ndef count_Set_Bits_r_summ_divisor(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) i"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    for i in range(n):\n        c += 1 if ((n % 2) == 0) else 1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # set_bits = bin(n).count('1')\n    # return set_bits\n    set_bits = 0\n    for i in range(1, n+1):\n        set_bits += int(str(i)[-1])\n    return set_bits\n    # return sum(int(str(i)[-1]) for i in range(1, n+1))\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def binary_count(num): \n        '''\n        # Create a variable to store the result of the number of set bits\n        '''\n        result = 0\n        # Loop through the number\n        for i in range(0, len(num)): \n            # Check if it is even or odd\n            if num[i] % 2 == 0: \n                # If the number is even, add 1 \n                result += 1\n            else: \n                # If the number is odd, only add 1 \n                result -= 1\n            # Print the result\n            print(result)\n        # Return the number of set bits \n        return result \n    # Return the number of set bits\n    return binary_count(n) \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    while n!= 0:\n        c += 1\n        n = n // 2\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n): \n        if (i % 2) == 0: \n            if n & i: \n                count += 1 \n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = bin(n)\n    count = s.count('1')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    odd_value_indices = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_value_indices.append(i)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace('o','1').replace('O','1').replace('O','0')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str = new_str + str[i]\n    print(new_str)\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    count = 0\n    for i in str:\n        if (i % 2)!= 0:\n            count += 1\n            result += i\n        else:\n            result += i\n    return result, count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_str = str.lower()\n    list_str = []\n    count = 0\n    for char in str_str:\n        if count % 2 == 0:\n            list_str.append(char)\n        else:\n            continue\n        count += 1\n    return ''.join(list_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_len = len(str)\n    odd_val = 0\n    for i in range(0,str_len):\n        if i % 2!= 0:\n            if str[i] % 2 == 0:\n                odd_val += 1\n            else:\n                continue\n    return odd_val\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\"1\",\"\" + str[1] + \"\")\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for i in str:\n        if i % 2 == 0:\n            res += i\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code here\n    result_string = ''\n    for letter in str:\n        if letter % 2 == 1:\n            result_string += letter\n    return result_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # str = 'abcdcdcabcdcabcdc'\n    # result = 'c'\n    # i = 0\n    # while i < len(str):\n    #     if str[i] % 2 == 1:\n    #         result += str[i]\n    #     else:\n    #         result += str[i]\n    #     i += 1\n    # return result\n    # \n    # return str.replace('a', 'b').replace('a', 'c').replace('a', 'd').replace('a', 'e').replace('a', 'f').replace('a', 'g')\n    result = ''\n    i = 0\n    while i < len(str):\n        if str[i] % 2 == 0:\n            result += str[i]\n        else:\n            result += str[i]\n        i += 1\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        print(a)\n    elif b>c:\n        print(b)\n    else:\n        print(c)\na = int(input(\"Enter the first number:\"))\nb = int(input(\"Enter the second number:\"))\nc = int(input(\"Enter the third number:\"))\nmin_of_three(a,b,c"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \n    \ndef sum_of_three(a,b,c): \n    '''\n    Write a function that returns sum of three numbers.\n    '''\n    sum=a+b+c\n    return sum\n    \n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function that returns maximum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \n    \ndef mean_of_three(a,b,c): \n    '''\n    Write a function that returns mean of three numbers.\n    '''\n    return (a+b+c)/3\n    \n    \ndef median_of_three(a,b,c): \n    '''\n    Write a function that returns median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \n    \ndef mode_of_three(a,b,c): \n    '''\n    Write a function that returns mode of three numbers.\n    '''\n    return (a,b,c)[a%3]\n    \n    \ndef smallest_of_three(a,b,c): \n    '''\n    Write a function that returns smallest of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \n    \ndef largest_of_three(a,b,c): \n    '''\n    Write a function that returns largest of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \n    \ndef median_of_four(a,b,c,d): \n    '''\n    Write a function that returns median of four numbers.\n    '''\n    if a>b and a>c and a>d:\n        return a\n    elif b>a and b>c and a>d:\n        return b\n    elif c>a and c>b and a>d:\n        return c\n    elif d>a and d>b and a>d:\n        return d\n    \n    \ndef mode_of_four(a,b,c,d): \n    '''\n    Write a function that returns mode of four numbers.\n    '''\n    return (a,b,c,d)[a%4]\n    \n    \ndef main():\n    print(\"Write a program that prompts the user for two numbers, a and b, and calculates the sum, min, average, median, mode and the mode of the numbers.\")\n    print(\"The program will then prompt the user for three numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for four numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for five numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for six numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for seven numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for eight numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for nine numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for ten numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twelve numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for thirteen numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for fourteen numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for fifteen numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for sixteen numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for seventeen numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for eighteen numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for nineteen numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a dictionary.\")\n    print(\"The program will then prompt the user for twenty numbers and return the results in a list.\")\n    print(\"The program will then promp"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        return c\n    elif b > c:\n        if b > a:\n            return b\n        return c\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b and a==c: \n        return a\n    if a==b or a==c: \n        return a\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        return c\n    if b>a:\n        if b>c:\n            return b\n        return c\n    if c>a:\n        if c>b:\n            return c\n        return b\n    \n    return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if a<b and b<c else b if b<c else c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = None\n    if a < b+c and a < c and b < c: \n        min = a + b + c\n    elif a < b and a < c and b < c:\n        min = a + c\n    elif a < b and b < c and a < c: \n        min = b + c\n    return min\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your code here\n    if l > n or r > n:\n        return 'Value is out of range'\n    else:\n        return n-l+1\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l<=n and r>=0):\n        temp=n\n        while (temp>=l and temp<=r):\n            if (n&(temp+1)==0):\n                return False\n            else:\n                temp=temp+1\n        if (n&(temp+1)==0):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    i = 0\n    while i < l:\n        if n & (1 << i):\n            count += 1\n        i += 1\n    \n    if count == r - l:\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    '''\n    To check whether the bits are unset or not in the given range or not.\n    '''\n    \n    print(\"Check the bits in the given range of size 2,3,4 and 5.\\n\")\n    \n    n=15\n    l=2\n    r=5\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n    print(\"\\n\")\n    \n    n=4\n    l=3\n    r=3\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n    print(\"\\n\")\n    \n    n=10\n    l=6\n    r=20\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n    print(\"\\n\")\n    \n    n=16\n    l=6\n    r=20\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n    print(\"\\n\")\n    \n    n=32\n    l=32\n    r=64\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n    print(\"\\n\")\n    \n    n=5\n    l=5\n    r=5\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n    print(\"\\n\")\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1 << i)):\n            print (\"Not set: \",i)\n        else:\n            print (\"Set: \",i)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(n&(1<<i)==0 for i in range(l,r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l<=r:\n        if n&(l&1):\n            return False\n        l=l>>1\n        if n&(r&1):\n            return False\n        r=r>>1\n        n=n>>1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    b = l\n    for i in range(0,l):\n        if (b & (2**i)):\n            return False\n    for i in range(0,r):\n        if (b >> i) & (2**(l-i)-1):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n > (r-l+1):\n        return False\n    else:\n        return l <= n < r\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return (n&0xFF==0)\n    if (l>r):\n        return None\n    # n is the number of bits of the given range\n    # l is the starting bit number\n    # r is the ending bit number\n    # Return True if all bits are unset in the given range\n    # Else False\n    return all_Bits_Set_In_The_Given_Range(n,l,r-1) and all_Bits_Set_In_The_Given_Range(n,l+1,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    result = 0\n    if l == r:\n        result = 1\n    elif n == 1:\n        result = 0\n    else:\n        for i in range(l,r+1):\n            result = result | (1<<i)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n    arr[0] = -arr[0]\n    arr = re_arrange_array(arr, n - 1)\n    arr[0] = arr[0] * -1\n    arr = re_arrange_array(arr, n - 1)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = np.array(arr)\n    index = np.arange(arr.size)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    out_arr = []\n    for index, el in enumerate(arr):\n        if el >= 0:\n            out_arr.append(el)\n        else:\n            out_arr.append(-el)\n    return out_arr\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Hard-coded points, we can do this much faster by reversing the array elements and keeping track of which negative element is now the highest position.\n    # We can do that by comparing it with the last element, if that element is negative then we can replace it with the highest negative element, and if it is positive then we can swap it with the highest positive element.\n    # This should be done in O(n), but we can find a solution to this later: https://codingcompetitions.withgoogle.com/code/problem/143/optimal-swap-two-pos-and-negatives-from-the-given-array\n    # Time complexity = O(n)\n    # Space Complexity = O(1)\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] = abs(arr[i])\n    arr_rearranged = []\n    for i in range(n):\n        arr_rearranged.append(arr[i])\n    for i in range(n):\n        if arr[i] > 0:\n            arr_rearranged.append(-arr[i])\n    for i in range(n):\n        arr[i] = arr_rearranged[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return arr\n    new = []\n    i = 0\n    while len(arr) > i:\n        if arr[i] < 0:\n            new.append(arr[i])\n            arr.remove(arr[i])\n            i += 1\n        else:\n            new.append(arr[i])\n            i += 1\n    arr[:] = new\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    my_arr = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            my_arr.append(arr[i])\n        else:\n            my_arr.append(arr[i]*-1)\n    \n    if len(my_arr) > n:\n        my_arr.sort(reverse = True)\n    \n    return my_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = np.asarray(arr)\n    arr = arr[~np.isnan(arr)]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    array_len = len(arr)\n    new_arr = [None]*(array_len+1)\n    i = 0\n    while i<array_len:\n        if arr[i] < 0:\n            new_arr[i] = arr[i]\n            i += 1\n        else:\n            new_arr[i] = -arr[i]\n            i += 1\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: complete this function\n    arr = arr[:]\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n            \n    arr.sort()\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = list(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    arr[0] = arr[-1]\n    arr[n-1] = arr[0]\n    arr.reverse()\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    list_1=str1.split(' ')\n    str1_1 = list(map(lambda x: x.strip(),list_1))\n    str1_2 =''.join(str1_1)\n    return str1_2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ').strip()\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1.replace(' ','')\n    str1.replace('\\n','')\n    str1.replace('\\t','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(char,\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"`\",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.strip()\n    print(str1)\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\",\",\"\")\n    str1=str1.replace(\";\",\"\")\n    str1=str1.replace(\":\",\"\")\n    str1=str1.replace(\"|\",\"\")\n    str1=str1.replace(\"<\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\">\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"'\",\"\")\n    str1=str1.replace(\">\",\"\")\n    str1=str1.replace(\"<\",\"\")\n    str1=str1.replace(\"\\\"\",\"\")\n    str1=str1.replace(\"?\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\"|\",\"\")\n    str1=str1.replace(\" \",\"\")\n    return(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str1 = str1.replace('\\n', char)\n    return new_str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('  ','')\n    str1=str1.replace('.',char)\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return [x for x in list1[:n]]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    newlist = []\n    for i in list1:\n        if i < n:\n            newlist.append(i)\n        if i == n:\n            break\n    return newlist\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\ndef bolin_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef count_dist(list1):\n    '''\n    Write a function that takes in a list and returns the number of items in the list.\n    '''\n    return len(list1)\ndef diameter(list1):\n    '''\n    Write a function that takes in a list and returns the diameter of the tree.\n    '''\n    #get the list length and store in list1\n    list1.sort()\n    diameter=1\n    for i in range(1,len(list1)):\n        diameter=diameter+1\n    return diameter\ndef reverse_dictionary(dict1):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary in reverse order.\n    '''\n    list1=[]\n    for key,value in dict1.items():\n        list1.append(value)\n    return dict1\ndef sublist(list1,sublist1):\n    '''\n    Write a function that takes in a list and a list of sublists and returns a list that contains only those sublists.\n    '''\n    list1.sort()\n    newlist=[]\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n    for i in range(len(list1)):\n        newlist.pop(i)\n    return newlist\ndef perm(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list that contains the n permutations of the list.\n    '''\n    list1.sort()\n    if n==len(list1):\n        return list1\n    else:\n        for i in range(len(list1)):\n            list1[i]=list1[i]+\"(\"+str(i)+\")\"\n        return perm(list1,n+1)\ndef join_list(list1):\n    '''\n    Write a function that takes in a list and returns a list containing all of the elements in the list.\n    '''\n    for i in range(len(list1)):\n        list1.append(list1[i])\n    list1.sort()\n    return list1\ndef range_n(n):\n    '''\n    Write a function that takes in an integer n and returns a list that contains the range of the input integer n from 1 to n.\n    '''\n    list1=[1]\n    while n>0:\n        list1.append(list1[n-1]+1)\n        n-=1\n    return list1\ndef hex_to_dec(hex):\n    '''\n    Write a function that takes in a hexadecimal string and returns the decimal version.\n    '''\n    if \"0x\" in hex:\n        hex=hex.replace(\"0x\",\"\")\n        hex=hex.split(\"-\")\n        hex[1]=hex[1].replace(\"x\",\"\")\n        hex.remove(\"x\")\n        hex=hex[0]+hex[1]\n    elif \"0x\" in hex:\n        hex=hex.replace(\"0x\",\"\")\n        hex=hex.split(\"-\")\n        hex[1]=hex[1].replace(\"x\",\"\")\n        hex.remove(\"x\")\n        hex=hex[0]+hex[1]\n    return hex\ndef print_heap(heap):\n    '''\n    Write a function that takes in a list and returns the heap.\n    '''\n    for i in range(len(heap)):\n        for j in range(len(heap[i])):\n            print(heap[i][j],end=\" \")\n        print()\n        print()\ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the n largest elements from the list.\n    '''\n    list1.sort()\n    heap=[]\n    heapq.heapify(heap)\n    return heap\ndef insert_heap(heap,item):\n    '''\n    Write a function that takes in a list and an integer and returns a list containing the n largest elements from the list.\n    '''\n    heap.append(item)\n    heapq.heapify(heap)\n    return heap\ndef heap_toseck(heap):\n    '''\n    Write a function that takes in a list and returns a list of all of the items in the list in order of the n largest elements from the list.\n    '''\n    list1=[]\n    for i in range(len(heap)):\n        list1.append(heap[i][len(heap[i])-1])\n        heap[i]=heap[i][0:len(heap[i])-1]\n    return list1\ndef merge_heap(heap):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest elements from the list.\n    '''\n    list1=[]\n    for i in range(len(heap)):\n        list1.append(heap[i][len(heap[i])-1])\n        heap[i]=heap[i][0:len(heap[i])-1]\n    return list1\ndef pop_heap(heap):\n    '''\n    Write a function that takes in a list and returns a list containing the n smallest elements from the list.\n    '''\n    list1=[]\n    for i in range(len(heap)):\n        list1.append(heap[i][0:len(heap[i])-1])\n        heap[i]=heap[i][len(heap[i])-1:]\n    return list1\ndef heap_sift(heap):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest elements from the list.\n    '''\n    for i in range(len(heap)):\n        heapq.heapify(heap)\n        heap[0],heap[len(heap)-1]=heap[len(heap)-1],heap[0]\ndef heap_down(heap):\n    '''\n    Write a function that takes in a list and returns a list containing the n smallest elements from the list.\n    '''\n    for i in range(len(heap)):\n        heapq.heapify(heap)\n        heap[len(heap)-1],heap[0]=heap[0],heap[len(heap)-1]\n        heap[len(heap)-1],heap[0]=heap[0],heap[len(heap)-1]\ndef heap_up(heap):\n    '''\n    Write a function that takes in a list and returns a list containing the n smallest elements from the list.\n    '''\n    for i in range(len(heap)):\n        heapq.heapify(heap)\n        heap[0],heap[len(heap)-1]=heap[len(heap)-1],heap[0]\n        heap[0],heap[len(heap)-1]=heap[0],heap[len(heap)-1]\ndef heap_sort(heap):\n    '''\n    Write a function that takes in a list and returns a list that contains the n largest elements from the list.\n    '''\n    heap=heap_down(heap)\n    heap=heap_toseck(heap)\n    heap=merge_heap(heap)\n    heap=heap_up(heap)\n    heap=heap_sift(heap)\n    heap=heap_down(heap)\n    heap=heap_toseck(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    if n == 1:\n        return list1\n    elif n > len(list1):\n        return []\n    else:\n        return [heapq.nlargest(n, list1)[0]]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n    l = []\n    while len(heap) > 0:\n        heapq.heappop(heap)\n        l.append(heapq.heappop(heap))\n    return l\ndef product(list1,list2):\n    '''\n    Write a function that takes in two lists and returns the product of their values.\n    '''\n    product = 1\n    for item in list1:\n        product = product * item\n    for item in list2:\n        product = product * item\n    return product\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    x=[]\n    for i in list1:\n        if(len(x)<n):\n            heapq.heappush(x,i)\n    return x\ndef lloyd_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    x=[]\n    for i in range(len(list1)):\n        if(list1[i]<0):\n            heapq.heapreplace(x,list1[i])\n    return x\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Example 1:\n    list1.sort()\n    list1.reverse()\n    return list1\n    # Example 2:\n    list1.sort(reverse=True)\n    list1.reverse()\n    return list1\n    # Example 3:\n    # The greatest element in a list is always the element\n    # at the bottom.\n    # If a list contains lists, all of them are the same size.\n    # Therefore, the greatest element in the list is the smallest.\n    # Function takes a list of integers and an integer n and returns a list of integers.\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    return heap\ndef group_n_sum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the list containing the n largest items grouped together by the sum.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,sum(list1[i]))\n    return heap\ndef quick_sort(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items in the list.\n    '''\n    def sort_helper(list1,low,high):\n        if low >= high:\n            return None\n        mid = int((low + high)/2)\n        sort_helper(list1,low,mid)\n        sort_helper(list1,mid+1,high)\n        pivot = list1[mid]\n        i = low\n        j = mid+1\n        while True:\n            if i < j:\n                if pivot < list1[j]:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n                elif pivot > list1[i]:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n            else:\n                break\n        return list1\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n    return sort_helper(heap,0,len(heap)-1)\ndef quick_sort2(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items in the list.\n    '''\n    def sort_helper(list1,low,high):\n        if low >= high:\n            return None\n        pivot = list1[low]\n        i = low\n        j = high\n        while True:\n            if i < j:\n                if list1[j] < pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n                elif list1[j] > pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n            else:\n                break\n        return list1\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n    return sort_helper(heap,0,len(heap)-1)\ndef quick_sort3(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items in the list.\n    '''\n    def sort_helper(list1,low,high):\n        if low >= high:\n            return None\n        pivot = list1[low]\n        i = low\n        j = high\n        while True:\n            if i < j:\n                if list1[j] < pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n                elif list1[j] > pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n            else:\n                break\n        return list1\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n    return sort_helper(heap,0,len(heap)-1)\ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items in the list.\n    '''\n    def sort_helper(list1,low,high):\n        if low >= high:\n            return None\n        pivot = list1[low]\n        i = low\n        j = high\n        while True:\n            if i < j:\n                if list1[j] < pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n                elif list1[j] > pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n            else:\n                break\n        return list1\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n    return sort_helper(heap,0,len(heap)-1)\ndef heap_sort2(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items in the list.\n    '''\n    def sort_helper(list1,low,high):\n        if low >= high:\n            return None\n        pivot = list1[low]\n        i = low\n        j = high\n        while True:\n            if i < j:\n                if list1[j] < pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n                elif list1[j] > pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n            else:\n                break\n        return list1\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n    return sort_helper(heap,0,len(heap)-1)\ndef heap_sort3(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items in the list.\n    '''\n    def sort_helper(list1,low,high):\n        if low >= high:\n            return None\n        pivot = list1[low]\n        i = low\n        j = high\n        while True:\n            if i < j:\n                if list1[j] < pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n                elif list1[j] > pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i = i + 1\n                    j = j + 1\n            else:\n                break\n        return list1\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n    return sort_helper(heap,0,len(heap)-1)\ndef heap_sort4(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the n largest items in the list.\n    '''\n    def sort_helper(list1,low,high):\n        if low >= high:\n            return None\n        pivot = list1[low]\n        i = low\n        j = high\n        while True:\n            if i < j:\n                if list1[j] < pivot:\n                    list1[i],list1[j] = list1[j],list1[i]\n                    i "
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n <= 0:\n        return list1\n    else:\n        for i in range(0,n):\n            heapq.heappush(list1,heapq.heappop(list1))\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(list1[i])\n    heapq.heapify(list2)\n    heapq.nlargest(n, list2)\n    return(list2)\n    \ndef larg_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(list1[i])\n    heapq.nlargest(n, list2)\n    return(list2)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #this function will return the lateral surface area of a cylinder\n    #pass the radius and height of the cylinder in tuple format\n    #pass a number and a number of the unit cube\n    #pass the number and the unit cube\n    #pass a number and a number of the unit cube\n    #pass a number and a number of the unit cube\n    \n    def lat_area_cylinder(r,h):\n        '''\n        This function will calculate the lateral area of a cylinder\n        '''\n        #get the radius and the height of the cylinder\n        r_sq = r[0]**2 + r[1]**2\n        h_sq = h[0]**2 + h[1]**2\n        #get the area of the cylinder\n        l_sq = r_sq + h_sq\n        #get the area of the cylinder\n        area = math.pi*(r_sq + h_sq)*(1-math.fabs(r_sq-h_sq)/l_sq)*(1-math.fabs(r_sq-h_sq)/l_sq)\n        #return the area\n        return area\n    #call the lat_area_cylinder function and return the result\n    return lat_area_cylinder(r,h)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    from scipy.interpolate import interp1d\n    import matplotlib.pyplot as plt\n    # Define a function to find the lateral surface area of a cylinder.\n    def l_suface_cylinder(r,h):\n        # The area of a cylinder is the square of its radius r squared.\n        a=r**2\n        # The intersection points for the first surface, s.t. a.s.t. r <= h.\n        s1 = ((np.sqrt((np.sin(np.radians(h))*np.sin(np.radians(r))-np.cos(np.radians(h)))**2+(np.cos(np.radians(h))*np.cos(np.radians(r))-np.sin(np.radians(h)))**2)))**2)\n        # The intersection points for the second surface, s.t. r <= h.\n        s2 = ((np.sqrt((np.sin(np.radians(h))*np.sin(np.radians(r))-np.cos(np.radians(h)))**2+(np.cos(np.radians(h))*np.cos(np.radians(r))-np.sin(np.radians(h)))**2)))**2)\n        # The intersection points for the third surface, s.t. r <= h.\n        s3 = ((np.sqrt((np.sin(np.radians(h))*np.sin(np.radians(r))-np.cos(np.radians(h)))**2+(np.cos(np.radians(h))*np.cos(np.radians(r))-np.sin(np.radians(h)))**2)))**2)\n        # The intersection points for the fourth surface, s.t. r <= h.\n        s4 = ((np.sqrt((np.sin(np.radians(h))*np.sin(np.radians(r))-np.cos(np.radians(h)))**2+(np.cos(np.radians(h))*np.cos(np.radians(r))-np.sin(np.radians(h)))**2)))**2)\n        # The lateral surface area.\n        l = ((2*s1 + 2*s2 + 2*s3 + 2*s4) - (a+h**2))\n        return l\n    # Set a default value for r if the input is not an integer.\n    if type(r)!= int:\n        print(\"Please enter a value for r in meters\")\n        r = float(r)\n    # Find the lateral surface area.\n    l = l_suface_cylinder(r,h)\n    # Return the lateral surface area.\n    return l\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return ((4/3)*np.pi*r**3)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A=4*np.pi*r**2\n    L=r**2*np.pi\n    return A,L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Input\n    u=r\n    #Variables\n    r_r=1\n    h_r=0\n    #Output\n    return u/(2*h_r*r_r)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A=3.1416\n    r_A=r*A\n    sigma_r=h/2\n    sigma_h=h/2\n    return(sigma_r)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #print(r,h)\n    import math\n    import numpy as np\n    #print(math.pi)\n    #print(np.pi/2)\n    n=int(h/r)\n    x=np.zeros([n,n])\n    y=np.zeros([n,n])\n    for i in range(n):\n        for j in range(n):\n            x[i][j]=i*r\n            y[i][j]=j*r\n    #print(x,y)\n    #print(x.shape,y.shape)\n    xl,xr,yl,yr=0,0,0,0\n    for i in range(n):\n        for j in range(n):\n            #print(x[i][j],y[i][j])\n            if i!=j:\n                if math.ceil(x[i][j])<math.ceil(x[j][i]):\n                    xl=x[i][j]\n                else:\n                    xl=x[j][i]\n                if math.ceil(y[i][j])<math.ceil(y[j][i]):\n                    yl=y[i][j]\n                else:\n                    yl=y[j][i]\n                if math.ceil(x[i][j])>math.ceil(x[j][i]):\n                    xr=x[i][j]\n                else:\n                    xr=x[j][i]\n                if math.ceil(y[i][j])>math.ceil(y[j][i]):\n                    yr=y[i][j]\n                else:\n                    yr=y[j][i]\n    xl,xr,yl,yr=xl*r,xr*r,yl*r,yr*r\n    if xl>xr:\n        xl,xr=xr,xl\n    if yl>yr:\n        yl,yr=yr,yl\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    f = lambda r: h/2*(r**2-r**4)\n    return f(r)*(4*np.pi*f(r*(r+0.5)))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #raise NotImplementedError\n    return r*h**2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14 * (r ** 2) * (1 - np.tan(h))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Write your code here\n    return 4/3 * l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def volume(a,b,c):\n        '''\n        returns the volume of a cube given its sides.\n        '''\n        return (a*b*c)**(1/3)\n    vol = volume(l,l,l)\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # You can assume that the function is called with an integer argument and returns a floating point number.\n    def volume(side_length):\n        return side_length ** 3\n    # You can assume that the function is called with a string argument and returns a floating point number.\n    def volume_string(side_length):\n        return side_length ** 3\n    # You can assume that the function is called with two arguments and returns a floating point number.\n    def volume_two(side_length, side_length_2):\n        return side_length ** 3 + side_length_2 ** 3\n    # The return type is a tuple, but you can assume that you return a single value.\n    return (volume(l), volume_string(l), volume_two(l, l), volume_string(l), volume(l))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if i!= j and j!= k and k!= i:\n                    volume += 1\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    a = 3.14*l**3\n    print(a)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for i in range(l, 0, -1):\n        for j in range(l, 0, -1):\n            for k in range(l, 0, -1):\n                if (i * j * k) % 4 == 1:\n                    vol += 1\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    x = int(l/2)\n    y = int(l/2)\n    z = l\n    r = 3\n    volume = (r**3)*(4*(l**2)-3*(l**2*z))\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 0\n    for i in range(l):\n        v = v + 4 * (1/3) * (3**i)\n    return v\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin_str = bin(n).replace(\"0b\", \"\")\n    #print(bin_str)\n    i = 0\n    while(i < len(bin_str)):\n        if(bin_str[i] == \"1\"):\n            if(bin_str[i+1]!= \"0\" and bin_str[i+1]!= \"1\"):\n                bin_str = bin_str[:i] + \"0\" + bin_str[i+1:]\n                #print(bin_str)\n            i += 1\n        else:\n            i += 1\n    return int(bin_str, 2)\ndef odd_bit_set_number(n):\n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    bin_str = bin(n).replace(\"0b\", \"\")\n    #print(bin_str)\n    i = 0\n    while(i < len(bin_str)):\n        if(bin_str[i] == \"1\"):\n            if(bin_str[i+1]!= \"0\" and bin_str[i+1]!= \"1\"):\n                bin_str = bin_str[:i] + \"0\" + bin_str[i+1:]\n                #print(bin_str)\n            i += 1\n        else:\n            i += 1\n    return int(bin_str, 2)\ndef set_bin_str(n):\n    '''\n    write a python function to set all even and odd bits of a given number.\n    '''\n    bin_str = bin(n).replace(\"0b\", \"\")\n    #print(bin_str)\n    i = 0\n    while(i < len(bin_str)):\n        if(bin_str[i] == \"1\"):\n            if(bin_str[i+1]!= \"0\" and bin_str[i+1]!= \"1\"):\n                bin_str = bin_str[:i] + \"0\" + bin_str[i+1:]\n                #print(bin_str)\n            i += 1\n        else:\n            i += 1\n    #print(bin_str)\n    return int(bin_str, 2)\ndef set_bit_str(n):\n    '''\n    write a python function to set all even bits of a given number.\n    '''\n    bin_str = bin(n).replace(\"0b\", \"\")\n    #print(bin_str)\n    i = 0\n    while(i < len(bin_str)):\n        if(bin_str[i] == \"1\"):\n            bin_str = bin_str[:i] + \"0\" + bin_str[i+1:]\n            #print(bin_str)\n            i += 1\n        else:\n            i += 1\n    #print(bin_str)\n    return int(bin_str, 2)\ndef set_bit_str_1(n):\n    '''\n    write a python function to set all even bits of a given number.\n    '''\n    bin_str = bin(n).replace(\"0b\", \"\")\n    #print(bin_str)\n    i = 0\n    while(i < len(bin_str)):\n        if(bin_str[i] == \"1\"):\n            bin_str = bin_str[:i] + \"0\" + bin_str[i+1:]\n            #print(bin_str)\n            i += 1\n        else:\n            i += 1\n    #print(bin_str)\n    return int(bin_str, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    new_n = n\n    while (n % 2)!= 0: \n        new_n = new_n * 2\n    return new_n\ndef check_even_bit_set(n):\n    '''\n    Write a python function to check if a given number is even.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = bin(n)\n    b = b[2:]\n    b = b.zfill(len(b))\n    for i in range(0,len(b)):\n        if b[i] == '1':\n            b[i] = '0'\n    return int(\"0b\"+ b, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, n+1, 2):\n        if i % 2 == 0:\n            numbers[i] = 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            n = n - 1\n        else:\n            n = n - 1\n            count = count + 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    evens = []\n    for i in range(0, n+1):\n        if (i % 2 == 0):\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            result = result + \"0\"\n        else:\n            result = result + \"1\"\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(n):\n        if (i%2) == 0:\n            even_bits+=1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_list = []\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            even_bit_list.append('1')\n        else:\n            even_bit_list.append('0')\n        i += 1\n    return even_bit_list\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0\n    while n > 0:\n        if n & 1 == 0:\n            i += 1\n        n >>= 1\n    return i\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    answer = dict()\n    for i in test_list:\n        if i[0] not in answer:\n            answer[i[0]] = 1\n        else:\n            answer[i[0]] = answer[i[0]] + 1\n    return answer\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for x in test_list:\n        dictionary[x[0]] = dictionary.get(x[0], 0) + 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in test_list:\n        if i[1] in test_dict:\n            test_dict[i[1]][0] += 1\n        else:\n            test_dict[i[1]] = [1, 1]\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tup in test_list:\n        result[tup] = test_list.count(tup)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    numbers = {}\n    for each in test_list:\n        numbers[each[0]] = numbers.get(each[0], 0) + 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for i in test_list:\n        if i[0] not in output:\n            output[i[0]] = 1\n        else:\n            output[i[0]] += 1\n    return output\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #IMPORTANT!! If you have not done this before, you will have to write it this way\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_dic = Counter(test_list)\n    return counter_dic\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # get list of tuples\n    t_list = []\n    for x in test_list:\n        t_list.append(x)\n    # get number of unique elements in list\n    n = len(set(t_list))\n    # initialize dictionary\n    dict = {}\n    # iterate through dict\n    for x in dict:\n        dict[x] = t_list.count(x)\n    # return dictionary\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    a = \"\"\n    s = 0\n    for i in range(0, len(str)):\n        a = a + str[i]\n        if a!= str[i]:\n            s = s + 1\n        else:\n            s = 0\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for index in range(len(str)-1):\n        for i in range(index,len(str)):\n            if str[index:i+1] in str:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    substring_count = 0\n    for index, char in enumerate(str):\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            if index + 1 < len(str):\n                if char == str[index + 1] and char!= str[index + 2]:\n                    substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # count each substring.\n    num_sub = 0\n    # for every substring in the given string\n    for i in range(0, len(str) - 1):\n        # if the substring is found\n        if (str[i:i + 2] in str):\n            # increment the count of non-empty substrings\n            num_sub += 1\n    # return the number of non-empty substrings.\n    return num_sub\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str) - (str.count('a')) - (str.count('z'))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)-1):\n        if str[i:i+2]==str[i+1:i+3]:\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    for i in range(1,len(str)): \n        if(str[i] == str[i-1]): \n            pass\n        else: \n            return(1 + number_of_substrings(str[:i] + str[i+1:])) \n    return 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    total = 0\n    for i in range(0, len(str)):\n        count = 0\n        for j in range(0, len(str) - i):\n            if str[j: j + i + 1]!= str[j: j + i]:\n                count += 1\n        total += count\n    return total\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(0, len(str) - 1):\n        if str[i]!= str[i+1]:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # define a variable for the number of sequences of length n\n    n_sequences = 0\n    \n    # iterate over m and n\n    for i in range(m,n+1):\n        # find the largest positive integer n <= i\n        while i <= n and i % 2 == 0:\n            i = i/2\n        # find the sum of the squares of the 2 positive integers that are less than or equal to i\n        n_sequences += (i**2)\n        \n    return n_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_length = 0\n    for i in range(m, m+n):\n        if i == 0:\n            total_length += 1\n        else:\n            total_length += m - i\n    return total_length\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # write your code here\n    sequence_size = 2 ** (n-1)\n    result = []\n    \n    for i in range(m, sequence_size):\n        if i % 2 == 0:\n            result.append(2)\n        else:\n            result.append(3)\n    \n    result.append(2)\n    \n    return(sum(result))\n    \nprint(get_total_number_of_sequences(5,2))"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # First, find the mth smallest positive integer of n.\n    # The smallest integer is m.\n    # After this integer, the smallest negative integer of n is m - 1.\n    # We can write n = m - 1 as m = m - 2, and therefore, m = m - 2 - 1.\n    mth_smallest_positive_integer_of_n = min(m, m - 2)\n    # Find all the positive integers smaller than mth_smallest_positive_integer_of_n.\n    mth_smallest_positive_integer_smaller_than_mth_smallest_positive_integer_of_n = []\n    for x in range(mth_smallest_positive_integer_of_n, m):\n        if x % 2 == 0:\n            mth_smallest_positive_integer_smaller_than_mth_smallest_positive_integer_of_n.append(x)\n    # Finally, find the sum of all the positive integers smaller than mth_smallest_positive_integer_of_n.\n    total_sum_of_smallest_positive_integers = sum(mth_smallest_positive_integer_smaller_than_mth_smallest_positive_integer_of_n)\n    return total_sum_of_smallest_positive_integers\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # write your code here\n    num_seqs = 0\n    for i in range(m,n+1):\n        if i % 2!= 0:\n            num_seqs += 1\n        else:\n            num_seqs += 2\n    return num_seqs\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((n*(n+1))/2 - m*(m+1) - m)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 1 + get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - 1, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # note you can pass in negative values\n    if m <= 0 or n <= 0:\n        raise Exception('m and n should be greater than 0')\n    \n    total_number_of_sequences = 0\n    \n    for i in range(2, n + 1):\n        if m > 1:\n            m = m / 2\n            total_number_of_sequences += 1\n        if n % i == 0:\n            total_number_of_sequences += i\n        if m % i == 0 and i < n:\n            total_number_of_sequences += i\n    \n    return total_number_of_sequence"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==n==1: return 1\n    if m==n==2: return 2\n    if m>n: return 0\n    if m == 2: return 1\n    if m == n: return 2\n    \n    def get_if_unique(e,n):\n        if n == 1: return e\n        if n == 2: return 1\n        if n % 2 == 0:\n            if e == 2: return 3\n            if e == 1: return 2\n            if e == 0: return 1\n            if e == e: return 0\n        else:\n            if e == 1: return 2\n            if e == 0: return 1\n            if e == e: return 0\n            if e == e: return 3\n    \n    def find_sequences(n):\n        n = get_if_unique(n,n)\n        if n == 1: return 2\n        if n == 2: return 1\n        if n == 3: return 3\n        if n == 4: return 2\n        if n == 5: return 1\n        if n == 6: return 0\n        if n == 7: return 4\n        if n == 8: return 3\n        if n == 9: return 2\n        if n == 10: return 1\n        if n == 11: return 0\n        if n == 12: return 4\n        if n == 13: return 3\n        if n == 14: return 2\n        if n == 15: return 1\n        if n == 16: return 0\n        if n == 17: return 5\n        if n == 18: return 4\n        if n == 19: return 3\n        if n == 20: return 2\n        if n == 21: return 1\n        if n == 22: return 0\n        if n == 23: return 5\n        if n == 24: return 4\n        if n == 25: return 3\n        if n == 26: return 2\n        if n == 27: return 1\n        if n == 28: return 0\n        if n == 29: return 5\n        if n == 30: return 4\n        if n == 31: return 3\n        if n == 32: return 2\n        if n == 33: return 1\n        if n == 34: return 0\n        if n == 35: return 6\n        if n == 36: return 5\n        if n == 37: return 4\n        if n == 38: return 3\n        if n == 39: return 2\n        if n == 40: return 1\n        if n == 41: return 0\n        if n == 42: return 7\n        if n == 43: return 6\n        if n == 44: return 5\n        if n == 45: return 4\n        if n == 46: return 3\n        if n == 47: return 2\n        if n == 48: return 1\n        if n == 49: return 0\n        if n == 50: return 8\n        if n == 51: return 7\n        if n == 52: return 6\n        if n == 53: return 5\n        if n == 54: return 4\n        if n == 55: return 3\n        if n == 56: return 2\n        if n == 57: return 1\n        if n == 58: return 0\n        if n == 59: return 9\n        if n == 60: return 8\n        if n == 61: return 7\n        if n == 62: return 6\n        if n == 63: return 5\n        if n == 64: return 4\n        if n == 65: return 3\n        if n == 66: return 2\n        if n == 67: return 1\n        if n == 68: return 0\n        if n == 69: return 10\n        if n == 70: return 9\n        if n == 71: return 8\n        if n == 72: return 7\n        if n == 73: return 6\n        if n == 74: return 5\n        if n == 75: return 4\n        if n == 76: return 3\n        if n == 77: return 2\n        if n == 78: return 1\n        if n == 79: return 0\n        if n == 80: return 11\n        if n == 81: return 10\n        if n == 82: return 9\n        if n == 83: return 8\n        if n == 84: return 7\n        if n == 85: return 6\n        if n == 86: return 5\n        if n == 87: return 4\n        if n == 88: return 3\n        if n == 89: return 2\n        if n == 90: return 1\n        if n == 91: return 0\n        if n == 92: return 12\n        if n == 93: return 11\n        if n == 94: return 10\n        if n == 95: return 9\n        if n == 96: return 8\n        if n == 97: return 7\n        if n == 98: return 6\n        if n == 99: return 5\n        if n == 100: return 4\n        if n == 101: return 3\n        if n == 102: return 2\n        if n == 103: return 1\n        if n == 104: return 0\n        if n == 105: return 13\n        if n == 106: return 14\n        if n == 107: return 15\n        if n == 108: return 16\n        if n == 109: return 17\n        if n == 110: return 18\n        if n == 111: return 19\n        if n == 112: return 20\n        if n == 113: return 21\n        if n == 114: return 22\n        if n == 115: return 23\n        if n == 116: return 24\n        if n == 117: return 25\n        if n == 118: return 26\n        if n == 119: return 27\n        if n == 120: return 28\n        if n == 121: return 29\n        if n == 122: return 30\n        if n == 123: return 31\n        if n == 124: return 32\n        if n == 125: return 33\n        if n == 126: return 34\n        if n == 127: return 35\n        if n == 128: return 36\n        if n == 129: return 37\n        if n == 130: return 38\n        if n == 131: return 39\n        if n == 132: return 40\n        if n == 133: return 41\n        if n == 134: return 42\n        if n == 135: return 43\n        if n == 136: return 44\n        if n == 137: return 45\n        if n == 138: return 46\n        if n == 139: return 47\n        if n == 140: return 48\n        if n == 141: return 49\n        if n == 142: return 50\n        if n == 143: return 51\n        if n == 144: return 52\n        if n == 145: return 53\n        if n == 146: return 54\n        if n == 147: return 55\n        if n == 148: return 56\n        if n == 149: return 57\n        if n == 150: return 58\n        if n == 151: return 59\n        if n == 152: return 60\n        if n == 153: return 61\n        if n == 154: return 62\n        if n == 155: return 63\n        if n == 156: return 64\n        if n == 157: return 65\n        if n == 158: return 66\n        if n == 159: return 67\n        if n == 160: return 68\n        if n == 161: return 69\n        if n == 162: return 70\n        if n == 163: return 71\n        if n == 164: return 72\n        if n == 165: return 73\n        if n == 166: return 74\n        if n == 167: return 75\n        if n == 168: return 76\n        if n == 169: return 77\n        if n == 170: return 78\n        if n == 171: return 79\n        if n == 172: return 80\n        if n == 173: return 81\n        if n == 174: return 82\n        if n == 175: return 83\n        if n == 176: return 84\n        if n == 177: return 85\n        if n == 178: return 86\n        if n == 179: return 87\n        if n == 180: return 88\n        if n == 181: return 89\n        if n == 182: return 90\n        if n == 183: return 91\n        if n == 184: return 92\n        if n == 185: return 93\n        if n == 186: return 94\n        if n == 187: return 95\n        if n == 188: return 96\n        if n == 189: return 97\n        if n == 190: return 98\n        if n == 191: return 99\n        if n == 192: return 100\n        if n == 193: return 101\n        if n == 194: return 102\n        if n == 195: return 103\n        if n == 196: return 104\n        if n == 197: return 105\n        if n == 19"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count_arr = []\n    total_arr = []\n    for i in range(0,n):\n        count_arr.append(0)\n        total_arr.append(m)\n    for i in range(0,n):\n        for j in range(0,m):\n            if (j>=total_arr[i]):\n                count_arr[i]+=1\n    for i in range(0,n):\n        total_arr[i] = total_arr[i]*2\n    for i in range(0,n):\n        if count_arr[i]>0:\n            total_arr[i] = total_arr[i]/count_arr[i]\n    return total_arr\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1] = list2[0]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    new_list = list1 + list2\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in list1:\n        list1[-1] = i\n    for j in list2:\n        list2[-1] = j\n    print(list1,list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        list3.append(list1[i][-1])\n    for j in range(len(list2)):\n        list3.append(list2[j][-1])\n    return list3\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if type(list1[-1]) == list:\n        list1 = list1[:-1]\n    elif type(list2[-1]) == list:\n        list2 = list2[:-1]\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(list2[i],list2[i])\n    return list1\n    \ndef main():\n    inp = input(\"Enter file: \")\n    if inp:\n        filename = inp\n        f = open(filename, 'r')\n        for line in f:\n            for word in line.split():\n                word = word.strip()\n                if word!= '':\n                    if word[-1] == '\\n':\n                        word = word[:-1]\n                    new_line = word.split(',')\n                    print(word)\n                    print(new_line)\n                    print()\n        f.close()\n    else:\n        print('Enter valid file name!')\n        main()\n        \nmain()    "
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[-1]\n    return list1\n    \nlist1=[1,2,3,4,5]\nlist2=[6,7,8,9,10]\nlist1=replace_list(list1,list2)\nprint(list1"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # COMPLETE THIS FUNCTION\n    return [list1[-1]] + list"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    return list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[0]=list2[-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\n    "
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        if c in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # count each character\n    count_a = 0\n    count_b = 0\n    count_c = 0\n    count_d = 0\n    count_e = 0\n    count_f = 0\n    count_g = 0\n    count_h = 0\n    count_i = 0\n    count_j = 0\n    count_k = 0\n    count_l = 0\n    count_m = 0\n    count_n = 0\n    count_o = 0\n    count_p = 0\n    count_q = 0\n    count_r = 0\n    count_s = 0\n    count_t = 0\n    count_u = 0\n    count_v = 0\n    count_w = 0\n    count_x = 0\n    count_y = 0\n    count_z = 0\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt = 0\n    for char in str1:\n        if char =='' or char == '\\t':\n            cnt += 1\n        else:\n            continue\n    return cnt\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_num = 0\n    for char in str1:\n        char_num += 1\n    return char_num\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # YOUR CODE HERE\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \n    # This is the original function\n    # def count_charac(str1):\n    #     count = 0\n    #     for i in str1:\n    #         if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n    #             count += 1\n    #     return count\n        \n    # print(count_charac(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if(str1[i] in 'aeiou'):\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_cnt = 0\n    for i in str1:\n        char_cnt += 1\n    return char_cnt\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    a = 1\n    while (a**2 + 1) <= N:\n        if N % a == 0:\n            return N\n        a = a + 1\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    result = int((2*N)-1)\n    if N < result:\n        print('Not a perfect square')\n        return -1\n    if N == result:\n        print('Perfect Square')\n        return result\n    while (N!= 1):\n        result = next_Perfect_Square(N)\n        if result == -1:\n            N += 1\n        else:\n            break\n    return result\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    print(\"Next perfect square greater than N is\", next_Perfect_Square_guess(N))\n    \ndef next_Perfect_Square_guess(N):\n    #check if the number is even and if the number is greater than the last number \n    #if it is even we then the number is found \n    if (N == 0):\n        return 0\n    elif (N%2 == 0):\n        return 2*N+1\n    else:\n        return 2*N\n    \ndef is_prime(x):\n    '''\n    Check if the number is prime or not\n    '''\n    if (x<2):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(x))+1):\n            if x%i==0:\n                return False\n        return True\n    \ndef is_square(x):\n    '''\n    Check if the number is square or not\n    '''\n    if (x<2):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(x))+1):\n            if x%i==0:\n                return False\n        return True\n        \ndef find_P(N):\n    '''\n    Find the prime number\n    '''\n    prime=[]\n    for i in range(N):\n        if (is_prime(i)):\n            prime.append(i)\n    return(prime)\n    \ndef find_square(N):\n    '''\n    Find the square of a number\n    '''\n    square=[]\n    for i in range(N):\n        if is_square(i):\n            square.append(i)\n    return(square)\n    \ndef find_P_square(N):\n    '''\n    Find the prime number square\n    '''\n    P_square=[]\n    for i in range(N):\n        if is_square(i):\n            if i==0:\n                P_square.append(1)\n            else:\n                P_square.append(i*i)\n    return(P_square)\n    \ndef find_P_P_square(N):\n    '''\n    Find the prime number square and square of a number square\n    '''\n    P_square=[]\n    P_square.append(0)\n    square=[]\n    for i in range(N):\n        if is_square(i):\n            square.append(i)\n            if i==0:\n                P_square.append(1)\n            else:\n                P_square.append(i*i)\n    return(P_square, square)\n    \ndef find_P_squared(N):\n    '''\n    Find the prime number square\n    '''\n    P_square=[]\n    for i in range(N):\n        if is_square(i):\n            if i==0:\n                P_square.append(1)\n            else:\n                P_square.append(i*i)\n    return(P_square)\n    \ndef find_P_P_squared(N):\n    '''\n    Find the prime number square and square of a number square\n    '''\n    P_square=[]\n    P_square.append(0)\n    square=[]\n    for i in range(N):\n        if is_square(i):\n            square.append(i)\n            if i==0:\n                P_square.append(1)\n            else:\n                P_square.append(i*i)\n    return(P_square, square)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return  math.sqrt(N) + 1 \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def perfect(x):\n        '''\n        Find the next perfect square greater than the given number.\n        '''\n        y = x**2\n        while y >= 1:\n            if y == (x**2) + y:\n                return True\n            if y % 2 == 0:\n                break\n            y = y // 2\n        return False\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 3\n    square = math.sqrt(N)\n    if square == N :\n        return square\n    else:\n        return 4*next_Perfect_Square(square)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    lst = []\n    for i in range(N+1):\n        lst.append(i)\n    sq = [x ** 2 for x in lst]\n    def is_Perfect_Square(N):\n        if N in sq:\n            return True\n        else:\n            return False\n    for i in range(2, len(sq)):\n        if is_Perfect_Square(i) and is_Perfect_Square(i + sq[i-1]):\n            return i + sq[i-1]\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N==1): \n        return 2\n    if(N%2==0):\n        return (N-1)*(N+1)/2\n    else:\n        return math.floor(math.sqrt(N))*math.floor(math.sqrt(N))\n    \n    \ndef is_perfect(N):\n    '''\n    This function checks if a given number is a perfect square.\n    '''\n    if(N==2):\n        return True\n    if(N%2==0):\n        return is_perfect(N//2) and N%(N//2)==0\n    else:\n        return (N**0.5)==N+1\n    \n    \ndef next_Perfect_Square_2(N):\n    '''\n    This function returns the next perfect square greater than or equal to a given number.\n    '''\n    if(N==1):\n        return 2\n    if(N%2==0):\n        return (N-1)*(N+1)/2\n    else:\n        return math.floor(math.sqrt(N))*math.floor(math.sqrt(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N):\n        if N%i==0:\n            j=N//i\n            if j*i>N:\n                j=N//i+1\n            if N%j==0:\n                return N\n            else:\n                return 0\n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        print(N)\n        return N\n    elif N == 2:\n        return 3\n    elif N%2 == 0:\n        mid = int(N/2)\n        for i in range(N, mid, -1):\n            if N%i == 0:\n                return i\n    else:\n        mid = int(N/2)\n        for i in range(mid, N, -1):\n            if N%i == 0:\n                return i\n    return N+1\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr == None: \n        return None\n    if len(arr) == 1:\n        return arr[0]\n    sum = arr[0]\n    current = arr[0]\n    for i in range(1, len(arr)):\n        current = arr[i] + max(current, arr[i])\n        sum = max(current, sum)\n    return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    ans = 0\n    for i in range(len(arr) - 1): \n        if arr[i] > 0: \n            ans += arr[i] \n        else: \n            ans += arr[i] \n    return ans \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    output = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] < arr[j]:\n                output = max(output, arr[i] + arr[j])\n    return output\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            for j in range(i, len(arr)):\n                if arr[j] == 0:\n                    continue\n                if arr[j] == 1:\n                    max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    ans = 0\n    n = len(arr)\n    for i in range(1, n):\n        max_i = 0\n        for j in range(i):\n            if arr[j] > arr[i] and max_i < arr[j]:\n                max_i = arr[j]\n        \n        if max_i > ans:\n            ans = max_i\n    \n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        count += 1\n        # print(count, end=\" \")\n        if arr[i] > arr[i+1]:\n            max_ending_here = max(max_ending_here, arr[i+1])\n        if arr[i] < arr[i+1]:\n            if max_ending_here < arr[i+1]:\n                max_ending_here = arr[i+1]\n    # print(\"Max_ending_here: \", max_ending_here)\n    max_ending_here += 1\n    for i in range(n-1, -1, -1):\n        count += 1\n        # print(count, end=\" \")\n        if arr[i] > arr[i+1]:\n            max_ending_here = max(max_ending_here, arr[i+1])\n        if arr[i] < arr[i+1]:\n            if max_ending_here < arr[i+1]:\n                max_ending_here = arr[i+1]\n    # print(\"Max_ending_here: \", max_ending_here)\n    return max_ending_here\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        i = 1\n        j = 0\n        max_sum = 0\n        while i < n and j < n:\n            if arr[i] >= arr[j]:\n                i += 1\n                j += 1\n                max_sum += arr[i]\n            else:\n                max_sum = max(max_sum, arr[i])\n                i += 1\n        \n        return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if the given array has only one element, return it.\n    if len(arr) == 1:\n        return arr[0]\n    # if the array is already an array of bitonic numbers, return the result\n    if type(arr[0]) is list:\n        return max_sum(arr[1:])\n    # if the given array is an array of bitonic numbers, find the maximum sum of all the element in the array and return it.\n    else:\n        # array is a bitonic sequence\n        return max(arr[0], arr[1:])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    m = []\n    m.append(arr[0])\n    sum = 0\n    i = 0\n    for j in range(1, len(arr)):\n        # bitonic subsequence\n        if arr[j] - arr[i] > 0:\n            # sequence\n            m.append(arr[j])\n            sum += arr[j] - arr[i]\n        # sequence\n        else:\n            # sequence\n            m.append(arr[j])\n            sum -= arr[j] - arr[i]\n        i = j\n    return sum\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    y = sqrt(number)\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #Method 1: using absolute value of a number.\n    #Use abs to convert numbers to integers, and then to calculate a new number\n    #in the same way.\n    num = abs(number)\n    num_sq = int(num * num)\n    num_sq_int = int(num_sq)\n    if num_sq_int == 0:\n        return num\n    else:\n        #Method 2: using the Babylonian method.\n        #Then, we need to compute the square root of a number using the Babylonian method.\n        #We need to compute the square root of a number using the Babylonian method.\n        #Then we need to calculate the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #We need to calculate the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finally, we need to compute the square root of a number using the Babylonian method.\n        #Finall"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squared = 0\n    while abs(number) > 1:\n        if number < 0:\n            number = -number\n        else:\n            number = 2 * number\n        squared += 1\n    return squared\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    ab = []\n    number_sq = []\n    number = round(number)\n    \n    # Iterate through every number\n    for i in range(1, number + 1):\n        # Check to see if it is a multiple of 2\n        if (i % 2) == 0:\n            # Find the root of a number\n            if number % i == 0:\n                ab.append(i)\n                number_sq.append(i**2)\n            # Check to see if the next number is a multiple of 2\n            elif number % i == 0:\n                number_sq.append(i**2)\n                number_sq.append(number)\n    # Return the tuple\n    return (ab, number_sq)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Avoid division by zero\n    if number == 0:\n        return 0\n    elif number < 0:\n        return -babylonian_squareroot(-number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    return babylonian_squareroot(number - 1) + 1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    srt = 0\n    while number > 0:\n        r = number % 10\n        srt = srt + pow(r, 2)\n        number = number // 10\n    return srt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    list_of_numbers = []\n    temp_list = []\n    for i in range(number):\n        value = i**2\n        temp_list.append(value)\n    for i in temp_list:\n        list_of_numbers.append(i)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 2:\n        return 0\n    \n    # create an empty string to store the longest palindromic subsequence\n    longest_palindrome = ''\n    \n    # Check to see if the string is palindrome. If it is palindrome, check to see if the length\n    # of the longest palindrome is larger than the current longest palindrome. \n    # If it is larger, return the length of the longest palindrome.\n    def longest_palindrome_recur(i,j):\n        # for all characters in the string, if they are equal\n        # then the strings are palindromes\n        if i == j:\n            return 1\n        elif str[i] == str[j]:\n            # check if the length of this subsequence is larger than the current one\n            if longest_palindrome_recur(i+1, j-1) > longest_palindrome_recur(i, j-1):\n                return longest_palindrome_recur(i+1, j)\n            else:\n                return longest_palindrome_recur(i+1, j-1)\n        \n        # if the characters are different, return the length of the longest palindrome\n        return longest_palindrome_recur(i+1, j) + 1\n    \n    # check to see if the string is palindrome, if it is palindrome, return the length of the longest palindrome\n    return longest_palindrome_recur(0, len(str) - 1)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    '''\n    # Write your code here.\n    str = input()\n    palindrome = []\n    for i in range(len(str)):\n        palindrome.append(str[i:i+2])\n    print(len(palindrome))\n    '''\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Write your code here\n    '''\n    Initializes\n    str_ = a String with the string to be tested\n    k = An integer representing the size of the string\n    ans = The longest palindromic subsequence of str_\n    '''\n    a, k = 0, 0\n    ans = -1\n    for i in range(len(str_)):\n        for j in range(i, len(str_)):\n            if str_[j] == str_[i]:\n                if j-i + 1 > k:\n                    a, k = i, j-i+1\n                    ans = max(ans, k)\n    return an"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 1: \n        return 1\n    dp = [[0]*(n+1) for i in range(n+1)]\n    for i in range(1, n+1): \n        dp[i][i] = 1\n    for i in range(2, n+1): \n        for j in range(1, i): \n            if str[i-j] == str[i-j-1]: \n                dp[i][j] = dp[i-j-1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i-j][j], dp[i-j-1][j-1])\n    return dp[n][n]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #note: this is not a method because I use recursion.\n    #the idea is that I will start from the length of a string and take that index and use a 2 pointer method to go through each string\n    #this approach is not the correct way to do it. I take the length of the string and check if the string is palindromic. If the palindrome is a palindrome, return it's length. Otherwise, return a sequence of palindromic subsequences.\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a dictionary to keep track of the longest palindrome so far\n    longest_palindrome = {}\n    # Create a reverse dictionary to keep track of the longest palindrome so far\n    longest_palindrome_reverse = {}\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    if not str[0] or not str[-1]:\n        return 0\n    # if the starting and ending indices are the same,\n    # then it's not a palindrome\n    if str[0] == str[-1]:\n        return 1\n    # if the starting index is greater than the ending index,\n    # then it's not a palindrome\n    if len(str) <= 1 or str[0] > str[-1]:\n        return 0\n    # if the starting index is less than the ending index,\n    # then it's not a palindrome\n    if len(str) == 1:\n        return 1\n    # if the starting index is the same,\n    # then it's a palindrome\n    if str[0] == str[1]:\n        return 1 + lps(str[1:])\n    # if the ending index is the same,\n    # then it's a palindrome\n    if str[-1] == str[0]:\n        return 1 + lps(str[1:])\n    # if the ending index is smaller than the starting index,\n    # then it's not a palindrome\n    return max(lps(str[1:]), lps(str)) + 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    if len(str) == 1:\n        return 1\n    ans = 1\n    for i in range(len(str)):\n        for j in range(i+1):\n            if j+1 < len(str) and str[j] == str[j+1]:\n                if j+2 < len(str) and str[j] == str[j+2]:\n                    ans = max(ans, 1 + lps(str[j:j+2]))\n            else:\n                break\n    return ans\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_helper(s):\n        if len(s) == 1:\n            return 1\n        if s[0] == s[-1]:\n            return lps_helper(s[1:-1]) + 1\n        return max(lps_helper(s[1:]), lps_helper(s[:-1]))\n    return lps_helper(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if len(str) == 0: \n        return 0\n    \n    if str == str[::-1]: \n        return 1 + lps(str[1:]) \n    \n    else: \n        return max(lps(str[1:]), lps(str)) \n  \n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(1/n)-(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += i / (i + 1)\n    return round(total, 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1,n):\n        harmonic_sum = harmonic_sum*(i+1)/(i+1+n)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # n > 0\n    if n == 0:\n        return 0\n    return (1 + harmonic_sum(n - 1)) * n\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n,0,-1):\n        sum = sum + i\n    return sum\ndef harmonic_sum_recursive(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + harmonic_sum_recursive(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #Calculate the harmonic sum\n    return n+1/2*(harmonic_sum(n-1) + harmonic_sum(n-2))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return 1/n + (1/2) * (harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h_sum = n+1\n    for i in range(2,n+1):\n        h_sum = h_sum - (n/i)\n    return h_sum\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # your code goes here\n    # make sure you are calculating the length of the arrays\n    len1 = len(array_nums1)\n    len2 = len(array_nums2)\n    if len1 == len2:\n        return sorted(array_nums1)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # INPUT:\n    # array_nums1: the first array to intersect\n    # array_nums2: the second array to intersect\n    # OUTPUT:\n    # a set of sets of numbers that appear in both array_nums1 and array_nums2\n    # (do not use sets or lists as inputs, use the sets and lists functions)\n    #\n    # Hint:\n    #\n    # To make your solutions iterative, make sure that your solution is not\n    # sensitive to the order of the input arrays. \n    # If the input arrays are already sorted, then make sure that the order is\n    # maintained (for example, [2,4,1,3] is assumed to be in sorted order)\n    #\n    #\n    # You may assume that the input arrays have no duplicates\n    #\n    # if an array is not sorted, then you are on the wrong side of the intersection\n    # if an array is sorted, then the intersection can be from 0 to n-1\n    \n    # EXAMPLES:\n    # intersection_array([4,2,5,1], [5,2,4,1])\n    # {3}\n    # intersection_array([4,2,3], [2,2])\n    # {4,2}\n    # intersection_array([6,9,8,7,4,5], [2,1,3,4,6,8])\n    # {3,4,6,8}\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    first_array = set(array_nums1)\n    second_array = set(array_nums2)\n    intersection_array = first_array.intersection(second_array)\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    # For loop, find the intersection\n    new_array1 = []\n    new_array2 = []\n    for i in range(len(array_nums1)):\n        new_array1.append(array_nums1[i])\n    for i in range(len(array_nums2)):\n        new_array2.append(array_nums2[i])\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection_nums.append(num1)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr = []\n    for num in array_nums1:\n        if num in array_nums2:\n            arr.append(num)\n    if arr:\n        return arr[0]\n    return False\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # creating a 2D list\n    intersection = []\n    # iterating through each row\n    for row in range(len(array_nums1)):\n        # iterating through each column\n        for col in range(len(array_nums2[0])):\n            # if there is a match\n            if array_nums1[row][col] == array_nums2[row][col]:\n                # adding to the intersection list\n                intersection.append(array_nums2[row][col])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                intersection_array.append(array_nums1[i])\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dummy_list = list(array_nums1)\n    for i in array_nums2:\n        for j in dummy_list:\n            if i in j:\n                return i\n    return \"No intersection\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)!= len(array_nums2):\n        return 'incorrect input'\n    output_list = list()\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                output_list.append(num1)\n                break\n    return output_list\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup) == 0:\n        return 0\n    else:\n        occ = tup.count(x)\n        return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    n = 0\n    for i in tup:\n        if i == x:\n            n += 1\n    return n\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Write your code here\n    x = list(x)\n    l = []\n    for i in range(len(tup)):\n        if tup[i] in x:\n            l.append(x.count(tup[i]))\n    if l:\n        return l\n    else:\n        return \"No matches found\"\n    \ndef count_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Write your code here\n    x = list(y)\n    l = []\n    for i in range(len(tup)):\n        if y[i] in x:\n            l.append(x.count(y[i]))\n    if l:\n        return l\n    else:\n        return \"No matches found\"\n    \ndef count_P(tup, p):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Write your code here\n    x = list(p)\n    l = []\n    for i in range(len(tup)):\n        if p[i] in x:\n            l.append(x.count(p[i]))\n    if l:\n        return l\n    else:\n        return \"No matches found\"\n    \ndef count_S(tup, s):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Write your code here\n    x = list(s)\n    l = []\n    for i in range(len(tup)):\n        if s[i] in x:\n            l.append(x.count(s[i]))\n    if l:\n        return l\n    else:\n        return \"No matches found\"\n    \ndef count_X_X(tup, tup2):\n    '''\n    Write a python function that takes in a tuple and two tuples and returns the amount of occurences of each pair of elements in the tuples.\n    '''\n    # Write your code here\n    x = count_X(tup, tup2)\n    y = count_Y(tup, tup2)\n    l = count_P(tup, tup2)\n    r = count_S(tup, tup2)\n    if l:\n        return l\n    else:\n        return r\n    \ndef count_Y_Y(tup, tup2):\n    '''\n    Write a python function that takes in a tuple and two tuples and returns the amount of occurences of each pair of elements in the tuples.\n    '''\n    # Write your code here\n    x = count_Y(tup, tup2)\n    y = count_Y(tup, tup2)\n    l = count_P(tup, tup2)\n    r = count_Y(tup, tup2)\n    if l:\n        return l\n    else:\n        return r\n    \ndef count_P_P(tup, tup2):\n    '''\n    Write a python function that takes in a tuple and two tuples and returns the amount of occurences of each pair of elements in the tuples.\n    '''\n    # Write your code here\n    x = count_P(tup, tup2)\n    y = count_P(tup, tup2)\n    l = count_X(tup, tup2)\n    r = count_X_X(tup, tup2)\n    if l:\n        return l\n    else:\n        return r\n    \ndef count_S_S(tup, tup2):\n    '''\n    Write a python function that takes in a tuple and two tuples and returns the amount of occurences of each pair of elements in the tuples.\n    '''\n    # Write your code here\n    x = count_S(tup, tup2)\n    y = count_S(tup, tup2)\n    l = count_Y_Y(tup, tup2)\n    r = count_Y_Y(tup, tup2)\n    if l:\n        return l\n    else:\n        return r\n    \ndef count_prod(lst):\n    '''\n    Write a python function that takes in a list and returns the product of the elements in the list.\n    '''\n    # Write your code here\n    lst1 = []\n    for i in lst:\n        if type(i) is int:\n            lst1.append(i)\n    if lst1:\n        return sum(lst1)\n    else:\n        return 0\n    \ndef main():\n    '''\n    Do not modify this function.\n    '''\n    # Get the x and y values from the user.\n    x = input('Enter a list of elements: ')\n    y = input('Enter an element: ')\n    \n    # Print the amount of occurences of each element.\n    print('\\nList of element values: ',x)\n    print('\\nNumber of element values: ',count_prod(x))\n    \n    # Test your code:\n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # Test your code:\n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of element values: ',count_prod(y))\n    \n    # print('\\nList of element values: ',x)\n    # print('\\nNumber of element values: ',count_prod(x))\n    \n    # print('\\nList of element values: ',y)\n    # print('\\nNumber of elemen"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code goes here\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for el in tup:\n        if el == x:\n            c += 1\n    return c\n    \ndef count_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for el in tup:\n        if el == y:\n            c += 1\n    return c\n    \ndef count_N(tup, n):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for el in tup:\n        if el == n:\n            c += 1\n    return c\n    \ndef count_num(tup, num):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for el in tup:\n        if el == num:\n            c += 1\n    return c\n    \ndef count_X_Y(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_X(tup, x)\n    c += count_Y(tup, y)\n    return c\n    \ndef count_X_Y_N(tup, x, y, n):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_X(tup, x)\n    c += count_Y(tup, y)\n    c += count_N(tup, n)\n    return c\n    \ndef count_Y_N(tup, y, n):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_Y(tup, y)\n    c += count_N(tup, n)\n    return c\n    \ndef count_num_X_Y(tup, x, y, n):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_num(tup, x)\n    c += count_X(tup, y)\n    c += count_Y(tup, n)\n    return c\n    \ndef count_num_X_Y_n(tup, x, y, n):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_num(tup, x)\n    c += count_X(tup, y)\n    c += count_Y(tup, n)\n    c += count_N(tup, n)\n    return c\n    \ndef count_X_Y_N_num(tup, x, y, n, num):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_X(tup, x)\n    c += count_Y(tup, y)\n    c += count_N(tup, n)\n    c += count_num(tup, num)\n    return c\n    \ndef count_num_X_Y_num(tup, x, y, n, num):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_num(tup, x)\n    c += count_X(tup, y)\n    c += count_Y(tup, n)\n    c += count_num(tup, num)\n    return c\n    \ndef count_num_X_Y_n_num(tup, x, y, n, num):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_num(tup, x)\n    c += count_X(tup, y)\n    c += count_Y(tup, n)\n    c += count_num(tup, num)\n    return c\n    \ndef count_X_Y_N_num_num(tup, x, y, n, num, num_num):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_X(tup, x)\n    c += count_Y(tup, y)\n    c += count_N(tup, n)\n    c += count_num(tup, num)\n    c += count_num(tup, num_num)\n    return c\n    \ndef count_X_Y_N_num_num_num(tup, x, y, n, num, num_num, num_num_num):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = count_X(tup, x)\n    c += count_Y(tup, y)\n    c += count_N(tup, n)\n    c += count_num(tup, num)\n    c += count_num(tup, num_num)\n    c += count_num(tup, num_num_num)\n    return c\n    \ndef get_sum(tup):\n    '''\n    Write a python function that takes in a tuple and returns the sum of all the values in the tuple.\n    '''\n    sum = 0\n    for el in tup:\n        sum += el\n    return sum\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    new_tup = list(tup)\n    counter = 0\n    for i in new_tup:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    list.sort()\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    for j in element:\n        new_list.append(j)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_2=[]\n    for index in range(len(list)):\n        list_2.append(list[index])\n    list_2.insert(index,element)\n    return list_2\n    \n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.sort()\n    x=0\n    while x<len(list):\n        list[x] = element\n        x=x+1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    insert_position = 0\n    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.insert(insert_position,i)\n        insert_position += 1\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return list\n    elif list == []:\n        return list\n    else:\n        return insert_element(list[1:],element) + list[0]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for index, element in enumerate(list):\n        new_list.append(element)\n        if index == len(list) - 1:\n            new_list.append(element)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    \n    polar_number = list()\n    for num in numbers:\n        polar_number.append(cmath.polar(num))\n    return polar_number\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Test if the user input contains an integer or a string\n    if type(numbers) == int or type(numbers) == float:\n        print(numbers,'is a float')\n        # Convert the user input to complex numbers\n        numbers = float(numbers)\n        # Do the calculation\n        polar = cmath.polar(numbers)\n        # Return the polar coordinates\n        return polar\n    # Test if the user input is a list\n    elif type(numbers) == list:\n        # Convert the user input to complex numbers\n        numbers = [float(n) for n in numbers]\n        # Do the calculation\n        polar = cmath.polar(numbers)\n        # Return the polar coordinates\n        return polar\n    # Test if the user input is not a list\n    else:\n        # Error message and prompt the user to enter a valid complex number or enter a list to convert\n        print('Error: Input must be an integer, float, or list of integers')\n        # Enter a valid input\n        numbers = input('Input a complex number or a list of complex numbers to convert: ')\n        # Convert the user input to complex numbers\n        numbers = [float(n) for n in numbers.split(',')]\n        # Do the calculation\n        polar = cmath.polar(numbers)\n        # Return the polar coordinates\n        return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    parsedNumbers = []\n    for x in numbers:\n        if isinstance(x, complex):\n            parsedNumbers.append(x.real)\n            parsedNumbers.append(x.imag)\n        elif x == 0:\n            parsedNumbers.append(0)\n            parsedNumbers.append(0)\n        elif isinstance(x, int) or isinstance(x, float):\n            parsedNumbers.append(x)\n        elif isinstance(x, list):\n            parsedNumbers.append(complex(x[0], x[1]))\n        else:\n            print('ERROR')\n    return parsedNumbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # convert complex numbers to polar coordinates\n    # if values are complex -> radians\n    # if not, turn them into real numbers\n    if type(numbers[0]) is complex:\n        numbers = [complex(a,b) for a,b in zip(numbers,numbers[1:])]\n    numbers = [complex(a,b) for a,b in zip(numbers,numbers[1:]) if a!=0 and b!=0]\n    # return values\n    return numbers\n    \n    \n    \ndef rotate_circles(numbers,period,degree,n,label):\n    '''\n    Rotate a set of numbers by a given period of time in the form of a list of circles\n    '''\n    #rotate the circles\n    # rotate the list, convert to complex numbers\n    # sort the list, get the index of the first position,\n    # rotate the first position, and concatenate the position of the second with the first index,\n    # return the result\n    \n    \n    # get position of first circle\n    x1,y1,x2,y2 = convert([x,y])\n    # get position of second circle\n    x3,y3,x4,y4 = convert([x2,y2])\n    # get position of third circle\n    x5,y5,x6,y6 = convert([x3,y3])\n    # get position of fourth circle\n    x7,y7,x8,y8 = convert([x4,y4])\n    # get position of fifth circle\n    x9,y9,x10,y10 = convert([x5,y5])\n    # get position of sixth circle\n    x11,y11,x12,y12 = convert([x6,y6])\n    # get position of seventh circle\n    x13,y13,x14,y14 = convert([x7,y7])\n    # get position of eighth circle\n    x15,y15,x16,y16 = convert([x8,y8])\n    # get position of ninth circle\n    x17,y17,x18,y18 = convert([x9,y9])\n    # get position of tenth circle\n    x19,y19,x20,y20 = convert([x10,y10])\n    # get position of eleventh circle\n    x21,y21,x22,y22 = convert([x11,y11])\n    # get position of twelfth circle\n    x23,y23,x24,y24 = convert([x12,y12])\n    # get position of thirteenth circle\n    x25,y25,x26,y26 = convert([x13,y13])\n    # get position of fourteenth circle\n    x27,y27,x28,y28 = convert([x14,y14])\n    # get position of fifthteenth circle\n    x29,y29,x30,y30 = convert([x15,y15])\n    # get position of sixteenth circle\n    x31,y31,x32,y32 = convert([x16,y16])\n    # get position of seventhteenth circle\n    x33,y33,x34,y34 = convert([x17,y17])\n    # get position of eightheenth circle\n    x35,y35,x36,y36 = convert([x18,y18])\n    # get position of nineteenth circle\n    x37,y37,x38,y38 = convert([x19,y19])\n    # get position of twentieth circle\n    x39,y39,x40,y40 = convert([x20,y20])\n    # get position of sexteenth circle\n    x41,y41,x42,y42 = convert([x21,y21])\n    # get position of eighteenth circle\n    x43,y43,x44,y44 = convert([x22,y22])\n    # get position of nineteenth circle\n    x45,y45,x46,y46 = convert([x23,y23])\n    # get position of twentieth circle\n    x47,y47,x48,y48 = convert([x24,y24])\n    # get position of sexteenth circle\n    x49,y49,x50,y50 = convert([x25,y25])\n    # get position of eighteenth circle\n    x51,y51,x52,y52 = convert([x26,y26])\n    # get position of nineteenth circle\n    x53,y53,x54,y54 = convert([x27,y27])\n    # get position of twentieth circle\n    x55,y55,x56,y56 = convert([x28,y28])\n    # get position of sexteenth circle\n    x57,y57,x58,y58 = convert([x29,y29])\n    # get position of eighteenth circle\n    x59,y59,x60,y60 = convert([x30,y30])\n    # get position of nineteenth circle\n    x61,y61,x62,y62 = convert([x31,y31])\n    # get position of twentieth circle\n    x63,y63,x64,y64 = convert([x32,y32])\n    # get position of sexteenth circle\n    x65,y65,x66,y66 = convert([x33,y33])\n    # get position of eighteenth circle\n    x67,y67,x68,y68 = convert([x34,y34])\n    # get position of nineteenth circle\n    x69,y69,x70,y70 = convert([x35,y35])\n    # get position of twentieth circle\n    x71,y71,x72,y72 = convert([x36,y36])\n    # get position of sexteenth circle\n    x73,y73,x74,y74 = convert([x37,y37])\n    # get position of eighteenth circle\n    x75,y75,x76,y76 = convert([x38,y38])\n    # get position of nineteenth circle\n    x77,y77,x78,y78 = convert([x39,y39])\n    # get position of twentieth circle\n    x79,y79,x80,y80 = convert([x40,y40])\n    # get position of sexteenth circle\n    x81,y81,x82,y82 = convert([x41,y41])\n    # get position of eighteenth circle\n    x83,y83,x84,y84 = convert([x42,y42])\n    # get position of nineteenth circle\n    x85,y85,x86,y86 = convert([x43,y43])\n    # get position of twentieth circle\n    x87,y87,x88,y88 = convert([x44,y44])\n    # get position of sexteenth circle\n    x89,y89,x90,y90 = convert([x45,y45])\n    # get position of eighteenth circle\n    x91,y91,x92,y92 = convert([x46,y46])\n    # get position of nineteenth circle\n    x93,y93,x94,y94 = convert([x47,y47])\n    # get position of twentieth circle\n    x95,y95,x96,y96 = convert([x48,y48])\n    # get position of sexteenth circle\n    x97,y97,x98,y98 = convert([x49,y49])\n    # get position of eighteenth circle\n    x99,y99,x100,y100 = convert([x50,y50])\n    # get position of nineteenth circle\n    x101,y101,x102,y102 = convert([x51,y51])\n    # get position of twentieth circle\n    x103,y103,x104,y104 = convert([x52,y52])\n    # get position of sexteenth circle\n    x105,y105,x106,y106 = convert([x53,y53])\n    # get position of nineteenth circle\n    x107,y107,x108,y108 = convert([x54,y54])\n    # get position of twentieth circle\n    x109,y109,x110,y110 = convert([x55,y55])\n    # get position of sexteenth circle\n    x111,y111,x112,y112 = convert([x56,y56])\n    # get position of nineteenth circle\n    x113,y113,x114,y114 = convert([x57,y57])\n    # get position of twentieth circle\n    x115,y115,x116,y116 = convert([x58,y58])\n    # get position of s"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = list(numbers)\n    numbers[0] = complex(numbers[0])\n    numbers[1] = complex(numbers[1])\n    numbers[2] = complex(numbers[2])\n    #arithmetic operations\n    y = numbers[0] - numbers[2]\n    x = y.real**2 + y.imag**2\n    #print('x = ',x)\n    #converting polar coordinates to real and imaginary part of the equation\n    #using cmath library to convert real and imaginary part of the equation to\n    #real and imaginary part of the equation\n    numbers = [x.real, x.imag, y.real, y.imag]\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar2(complex):\n        '''\n        Convert a complex number to polar coordinates.\n        '''\n        if complex.imag == complex.real:\n            return complex\n        else:\n            #check if complex is in radians\n            #return complex as polar\n            return complex * cmath.pi\n    #if it is a complex number\n    if isinstance(numbers, complex):\n        #return polar as long complex and real as complex\n        return polar2(numbers), numbers.real\n    else:\n        return numbers"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #get current and previous numbers as lists\n    c_numbers = list(numbers)\n    c_numbers[0] = c_numbers[0].replace(',','.')\n    c_numbers[0] = c_numbers[0].split('.')\n    c_numbers[0] = [float(i) for i in c_numbers[0]]\n    c_numbers[0] = tuple(c_numbers[0])\n    #reverse the first number\n    c_numbers[0] = tuple(reversed(c_numbers[0]))\n    #get the actual numbers and sum them together\n    c_sum = sum(c_numbers[1:])\n    #convert to radians\n    c_convert_radian = cmath.rect(c_sum,1)\n    #convert to polar coordinates\n    c_convert_polar = c_convert_radian.real*(np.pi/180) + c_convert_radian.imag\n    return c_convert_polar\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def f(x,y):\n        return  cmath.polar(x,y)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    c = a*a - 2*a*b\n    \n    d = b*b - 4*a*c\n    e = c*c - 6*a*b\n    \n    x = cmath.sqrt(d)\n    y = cmath.sqrt(e)\n    z = complex(x, y)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = cmath.polar(numbers)\n    return x[0], x[1]\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            i+=1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_count = 0\n    for i in list1:\n        if type(i) == int:\n            integer_count = integer_count + 1\n    return integer_count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    count=0\n    for i in list1:\n        if i.isdigit():\n            count=count+1\n    return count\n    \ndef average(list1):\n    '''\n    Write a python function that returns the average of a given list.\n    '''\n    \n    avg=0\n    for i in list1:\n        avg=avg+i\n    \n    return avg/len(list1)\n    \ndef longest_substring(string,substring):\n    '''\n    Write a python function that returns the longest substring in a given string that contains a given substring.\n    '''\n    \n    longest=0\n    count=0\n    for i in range(len(string)):\n        if string[i:i+len(substring)]==substring:\n            count=count+1\n        if count>longest:\n            longest=count\n            index=i\n    return string[index:index+longest]\n    \ndef remove_punctuation(text):\n    '''\n    Write a python function that returns a string where all punctuation except for\n    the specified characters has been removed.\n    '''\n    \n    punctuation=['(',')','.','!','?']\n    clean_text=text\n    for char in punctuation:\n        clean_text=clean_text.replace(char,'')\n    return clean_text\n    \ndef remove_newlines(text):\n    '''\n    Write a python function that removes newlines from a string.\n    '''\n    \n    clean_text=text.replace('\\n','')\n    return clean_text\n    \ndef string_splitter(text):\n    '''\n    Write a python function that splits a string into separate words.\n    '''\n    \n    split_text=text.split(' ')\n    return split_text\n    \ndef remove_number(text):\n    '''\n    Write a python function that removes all numbers from a string.\n    '''\n    \n    clean_text=text\n    for char in num_chars:\n        clean_text=clean_text.replace(char,'')\n    return clean_text\n    \ndef check_string(string,required_char):\n    '''\n    Write a python function that checks whether a given string contains the required character.\n    '''\n    \n    flag=0\n    for char in string:\n        if char==required_char:\n            flag=1\n            break\n    return flag\n    \ndef split_string(text):\n    '''\n    Write a python function that splits a string into separate words.\n    '''\n    \n    split_text=text.split(' ')\n    return split_text\n    \ndef is_number(string):\n    '''\n    Write a python function that checks whether a given string contains a number.\n    '''\n    \n    flag=0\n    for char in num_chars:\n        if char in string:\n            flag=1\n            break\n    return flag\n    \ndef is_alphabet(string):\n    '''\n    Write a python function that checks whether a given string contains alphabet.\n    '''\n    \n    flag=0\n    for char in alphabet_chars:\n        if char in string:\n            flag=1\n            break\n    return flag\n    \ndef unique_characters(string):\n    '''\n    Write a python function that returns a list of all unique characters in a given string.\n    '''\n    \n    unique_text=set(string)\n    return list(unique_text)\n    \ndef is_sequence(string):\n    '''\n    Write a python function that checks whether a given string is a sequence of given characters.\n    '''\n    \n    flag=0\n    for char in sequence_chars:\n        if char in string:\n            flag=1\n            break\n    return flag\n    \ndef characters(string):\n    '''\n    Write a python function that returns a list of all characters in a given string.\n    '''\n    \n    characters=set(string)\n    return list(characters)\n    \ndef lowercase(string):\n    '''\n    Write a python function that changes a string to lowercase.\n    '''\n    \n    clean_text=string.lower()\n    return clean_text\n    \ndef remove_extra_spaces(string):\n    '''\n    Write a python function that removes spaces from a string.\n    '''\n    \n    clean_text=string\n    for i in ['  ',' ','  ',' ',' ']:\n        clean_text=clean_text.replace(i,' ')\n    return clean_text\n    \ndef remove_double_spaces(string):\n    '''\n    Write a python function that removes double spaces from a string.\n    '''\n    \n    clean_text=string\n    for i in ['  ',' ','  ',' ','  ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','  ','  ',' ',' ',' ',' ',' ',' ','  ','  ',' ',' ',' ',' ',' ',' ','  ',' ',' ',' ',' ',' ',' ','  ','  ',' ',' ',' ','  ']:\n        clean_text=clean_text.replace(i,' ')\n    return clean_text\n    \ndef remove_punctuation(string):\n    '''\n    Write a python function that removes all punctuation from a string.\n    '''\n    \n    clean_text=string\n    for char in punctuation:\n        clean_text=clean_text.replace(char,'')\n    return clean_text\n    \ndef remove_newlines(string):\n    '''\n    Write a python function that removes all newlines from a string.\n    '''\n    \n    clean_text=string\n    for char in newline_chars:\n        clean_text=clean_text.replace(char,'\\n')\n    return clean_text\n    \ndef extract_numbers(string):\n    '''\n    Write a python function that returns a list of all numbers from a given string.\n    '''\n    \n    clean_text=string\n    for char in num_chars:\n        clean_text=clean_text.replace(char,'')\n    return clean_text.split(' ')\n    \ndef split_words(string):\n    '''\n    Write a python function that splits a string into separate words.\n    '''\n    \n    split_text=string.split(' ')\n    return split_text\n    \ndef remove_common_numbers(string):\n    '''\n    Write a python function that removes all common numbers from a string.\n    '''\n    \n    clean_text=string\n    for num in num_chars:\n        for i in clean_text.split(' '):\n            if i.count(num)>1:\n                clean_text=clean_text.replace(i,'')\n                break\n    return clean_text\n    \ndef join_words(string):\n    '''\n    Write a python function that joins all words from a given string into a single string.\n    '''\n    \n    clean_text=string\n    for i in clean_text.split():\n        if len(i)>=2:\n            clean_text=clean_text.replace(i,'')\n            break\n    return clean_text\n    \ndef is_alphabet(string):\n    '''\n    Write a python function that checks whether a given string contains a alphabet.\n    '''\n    \n    flag=0\n    for char in alphabet_chars:\n        if char in string:\n            flag=1\n            break\n    return flag\n    \ndef is_valid_word(string):\n    '''\n    Write a python function that checks whether a given string is a word.\n    '''\n    \n    flag=0\n    for char in string:\n        if char in alphabet_chars:\n            flag=1\n            break\n    return flag\n    \ndef is_valid_word_lower(string):\n    '''\n    Write a python function that checks whether a given string is a word in lowercase.\n    '''\n    \n    flag=0\n    for char in string:\n        if char in alphabet_chars:\n            flag=1\n            break\n    return flag\n    \ndef is_valid_word_uppercase(string):\n    '''\n    Write a python function that checks whether a given string is a word in uppercase.\n    '''\n    \n    flag=0"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    i=0\n    colors = []\n    while i < n:\n        if(l[i] in colors):\n            i+=1\n        else:\n            colors.append(l[i])\n            i+=1\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a list of tuples with the values of each element\n    # pair (e.g. 'ab' is a tuple (1,2,3))\n    # then it will add to the list, \n    # the values of that tuple will be a list\n    # then it will append to the list.\n    # The values of a tuple is the combined values of the elements in the list.\n    # For example, 'aaabb' will be a tuple with values (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    # return the list of tuples\n    # All elements in the list are paired.\n    # For example, [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n    # Return a list of tuples with all the combinations of elements in the list.\n    # This is the fastest and most efficient way to generate all combinations of the elements.\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    print([(i,j) for i in range(len(l)) for j in range(len(l)) if (i+j)%2!=0])\n    print(list(combinations_with_replacement(l,n)))\n    \n    \ndef combinations_colors_in_order(l, n):\n    '''\n    Write a function that takes in a list of colours and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    print([(i,j) for i in range(len(l)) for j in range(len(l)) if (i+j)%2!=0])\n    print(list(combinations_with_replacement(l,n)))\n    \n    \ndef combinations_colors_in_random(l, n):\n    '''\n    Write a function that takes in a list of colours and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    print([(i,j) for i in range(len(l)) for j in range(len(l)) if (i+j)%2!=0])\n    print(list(combinations_with_replacement(l,n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return \"Error: n must be at least as long as the number of elements in the list.\"\n    if len(l) == n:\n        return [tuple(l)]\n    return [tuple(l[:i]+l[i+1:] for i in range(len(l)-n+1))]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    s = list(l)\n    l = [elem for elem in l for i in range(l.index(elem)+1, n)]\n    return l + [tuple(s)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    def combinations(l, n):\n        if len(l) == 0:\n            return []\n        else:\n            for c in combinations(l[1:], n-1):\n                comb_list.append((list(l), tuple(c)))\n    if n < 1:\n        raise ValueError('The number of elements must be greater than 0')\n    combinations(l, n)\n    return comb_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(l):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) <= n:\n        return [(x,) for x in l]\n    else:\n        return combinations_colors(l[:-n], n) + combinations_colors(l[-n:], n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    prime = [1] * n\n    prime[0] = 0\n    prime[1] = 0\n    for i in range(2, n):\n        if prime[i] == 1:\n            for j in range(i + i, n, i):\n                prime[j] = 0\n    count = 0\n    for i in range(len(prime)):\n        if prime[i] == 1:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    else:\n        for n in range(n):\n            if isPrime(n):\n                return 2\n            else:\n                pass\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n==4:\n        return 2\n    elif n%3==0:\n        return 2\n    elif n%3==1:\n        return 3\n    elif n%3==2:\n        return 4\n    else:\n        return 5\ndef triangle_solution(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of ways of computing the triangle.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 3\n    elif n==4:\n        return 6\n    elif n==5:\n        return 5\n    elif n==6:\n        return 8\n    else:\n        return 9\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of primes below the given number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 6\n    elif n==5:\n        return 9\n    elif n==6:\n        return 12\n    elif n==7:\n        return 15\n    elif n%3==0:\n        return 2\n    elif n%3==1:\n        return 3\n    elif n%3==2:\n        return 5\n    else:\n        return 6\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of primes below the given number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 12\n    elif n==6:\n        return 15\n    elif n==7:\n        return 18\n    elif n%3==0:\n        return 2\n    elif n%3==1:\n        return 3\n    elif n%3==2:\n        return 4\n    else:\n        return 5\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of primes below the given number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 12\n    elif n==6:\n        return 15\n    elif n==7:\n        return 18\n    elif n%3==0:\n        return 2\n    elif n%3==1:\n        return 3\n    elif n%3==2:\n        return 4\n    else:\n        return 5\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of primes below the given number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 12\n    elif n==6:\n        return 15\n    elif n==7:\n        return 18\n    elif n%3==0:\n        return 2\n    elif n%3==1:\n        return 3\n    elif n%3==2:\n        return 5\n    else:\n        return 6\ndef triangle_solution(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of ways of computing the triangle.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 14\n    elif n==6:\n        return 21\n    elif n==7:\n        return 28\n    elif n%3==0:\n        return 3\n    elif n%3==1:\n        return 4\n    elif n%3==2:\n        return 6\n    else:\n        return 9\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of primes below the given number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 14\n    elif n==6:\n        return 21\n    elif n==7:\n        return 28\n    elif n%3==0:\n        return 3\n    elif n%3==1:\n        return 4\n    elif n%3==2:\n        return 6\n    else:\n        return 9\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of primes below the given number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 14\n    elif n==6:\n        return 21\n    elif n==7:\n        return 28\n    elif n%3==0:\n        return 3\n    elif n%3==1:\n        return 4\n    elif n%3==2:\n        return 6\n    else:\n        return 9\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of primes below the given number.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Error: cannot get primes less than or equal to 0\"\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    elif n==4:\n        return 9\n    elif n==5:\n        return 14\n    elif n==6:\n        return 21\n    elif n==7:\n        return 28\n    elif n%3==0:\n        return 3\n    elif n%3==1:\n        return 4\n    elif n%3==2:\n        return 6\n    else:\n        return 9\ndef triangle_solution(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of p"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if(n <= 0):\n        raise Exception(\"Input must be a positive integer\")\n    prime_nums = [2, 3, 5]\n    count = 0\n    for num in prime_nums:\n        if(n % num == 0):\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes = primes + 1\n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime = [True for i in range(n + 1)]\n    \n    for i in range(2, n + 1):\n        if prime[i]:\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n    \n    count = 0\n    for i in range(2, n + 1):\n        if prime[i]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = []\n    for num in range(2, n):\n        if n % num == 0:\n            prime_nums.append(num)\n    return len(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # write your code here\n    if n <= 0:\n        return 0\n    count = 0\n    # nums = [2,3,5,7,11]\n    # nums = [1,2,3,4,5]\n    for i in range(2,n+1):\n        count += 1 if i % 2 == 0 else 0\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if (b < a):\n        b,a = a,b\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if type(a) == tuple and type(b) == tuple:\n        return (b[1], a[1])\n    else:\n        print('Wrong data types')\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if b==1:\n        return (a,b)\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x=a\n    y=b\n    new_tuple=y,x\n    return new_tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_number = a\n    return b,new_number\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # YOUR CODE HERE\n    if a > b:\n        return a,b\n    else:\n        return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max = test_tup1[0]\n    for element in test_tup2:\n        if element > max:\n            max = element\n    return max\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val1 = -1\n    max_val2 = -1\n    for x in test_tup1:\n        if x > max_val1:\n            max_val1 = x\n    for x in test_tup2:\n        if x > max_val2:\n            max_val2 = x\n    return max_val1, max_val2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print('Testing maximum of'+ str(test_tup1) +'and'+ str(test_tup2))\n    print('The result is:', max(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max = test_tup1[0]\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max:\n            max = test_tup1[i]\n    \n    max = test_tup2[0]\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max:\n            max = test_tup2[i]\n    \n    return max\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #TODO write your code here\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return False\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(\"The max of the two tuples is {}\".format(max(test_tup1,test_tup2)))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = sorted(test_tup1, key=lambda x: x[0])\n    tup2 = sorted(test_tup2, key=lambda x: x[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # remove the first element (the tuple)\n    test_tup1.pop(0)\n    # remove the last element (the tuple)\n    test_tup2.pop()\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(n,0,-1):\n        if(i%5==0 and i%2==0 and i%3==0 and i%4==0):\n            return i\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return (newman_prime(n//2) + newman_prime(n//3) + newman_prime(n//4))\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n): \n        for i in range(2, n): \n            if (n % i) == 0: \n                return False\n        return True\n    prime = [] \n    for i in range(2, n): \n        if isprime(i): \n            prime.append(i) \n    return prime[-1] \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime =[]\n    if n <= 2:\n        return n\n    for i in range(3, n + 1, 2):\n        if is_prime(i) == False:\n            prime.append(i)\n    return prime[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    for i in range(2,n): \n        # i is not prime \n        if (n % i == 0): \n            # i is divisible by multiple of i \n            # i is not prime \n            pass \n        else: \n            # i is not divisible by multiple of i \n            # i is prime \n            prime.append(i) \n    # return the first newman\u2013shanks\u2013williams prime \n    return prime[len(prime)-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if(n==1): \n        return 1\n    if (n==2): \n        return 1\n    if (n%2==0): \n        return 0\n    for i in range(3, n, 2): \n        if (n%i == 0): \n            return 0\n    return n+1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [True for i in range(n + 1)] \n    prime[0], prime[1] = False, False\n    for i in range(2, n + 1):\n        if (prime[i]):\n            for j in range(i*i, n + 1, i):\n                prime[j] = False\n    return [i for i in range(n + 1) if prime[i]]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while (i * i <= n): \n        if (n % i == 0): \n            return False\n        i = i + 1\n    return True \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    check = 2\n    while (check <= n):\n        if(prime(check)):\n            for i in range(2,check):\n                if((check - i) % 2 == 0):\n                    if(check + i == n):\n                        return check + i\n            check += 2\n        else:\n            check += 1\n    return None\n    \ndef newman_factorial(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams factorial.\n    '''\n    if(n == 1):\n        return 1\n    else:\n        return n * newman_factorial(n - 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def check_tuples(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        if len(test_tup1)!= len(test_tup2):\n            return False\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division(tup):\n        '''\n        Divides each item in the tuple, returning the resulting tuple.\n        '''\n        return tuple(x/y for x,y in zip(tup[0],tup[1]))\n    \n    # Divide each tuple by each item in the tuple.\n    division = map(division, zip(test_tup1, test_tup2))\n    \n    return list(division)\n    \n    "
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1, test_tup2 = map(tuple, (test_tup1, test_tup2))\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(f\"Called function: {division_elements.__name__}\")\n    \n    # all the tuples are passed as a parameter, so that the function can be called with the tuples\n    for element in range(len(test_tup1)):\n        # use the eval function to evaluate the expression of the tuple for the corresponding element\n        test_tup1[element] = eval(f\"{test_tup1[element]}/{test_tup2[element]}\")\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError(\"The tuple's lengths do not match.\")\n    result = []\n    for element1, element2 in zip(test_tup1, test_tup2):\n        result.append(element1 // element2)\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i].__floordiv__(test_tup2[i])\n    return test_tup1\n    \ndef swap(lst):\n    '''\n    Swaps the items in a list.\n    '''\n    temp = lst[0]\n    lst[0] = lst[1]\n    lst[1] = temp\n    \n    return lst\n    \ndef main():\n    print(division_elements(Tuple(\"Cat\", \"Dog\"), Tuple(\"Pook\", \"Dog\")))\n    print(division_elements(Tuple(\"Cat\", \"Dog\"), Tuple(\"Pook\", \"Dog\")))\n    \n    # print(swap(Tuple(\"Cat\", \"Dog\")))\n    \n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # pass the arguments as tuples and perform the calculation on the tuple\n    def calc(test_tup1, test_tup2):\n        return test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]\n    result = calc(test_tup1, test_tup2)\n    # return the result of the calculation\n    return result\n    # insert your code here\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # get sum of values\n    def get_sum(test_tup):\n        return sum(test_tup)\n    # get difference\n    def get_diff(test_tup):\n        return sum(test_tup)-1\n    # get product\n    def get_product(test_tup):\n        return reduce(lambda x, y: x * y, test_tup)\n    # get quotient\n    def get_quotient(test_tup):\n        return get_product(test_tup)/get_sum(test_tup)\n    # get remainder\n    def get_remainder(test_tup):\n        return get_product(test_tup)-get_quotient(test_tup)\n    # get quotient and remainder\n    def get_quotient_and_remainder(test_tup):\n        return (get_product(test_tup) - get_quotient(test_tup)) / (get_sum(test_tup) - get_diff(test_tup)), get_remainder(test_tup)\n    # return result\n    return get_quotient_and_remainder(test_tup1)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('tuples must have the same length.')\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #get the number of elements in each tuple and add it to a variable\n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n    test_tup1.extend(test_tup2)\n    #loop over the elements in the tuples and calculate their divison of them\n    for i in range(len_tup1):\n        test_tup1[i] = test_tup1[i]/test_tup2[i]\n    #return the list\n    return test_tup1"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if not list1:\n        return []\n    else:\n        list2 = []\n        for i in range(len(list1)):\n            list2.append(list1[i][:L])\n        return list2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return []\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result = (list1[0:L], list1[L:])\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # return the lengths of each parts\n    return [(list1[i:i + L]) for i in range(0, len(list1), L)]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = []\n    L2 = []\n    for x in list1:\n        L1.append(x)\n    return L1, L2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    tup = []\n    for i in range(0, len(list1), L):\n        tup.append(list1[i:i+L])\n    return tup\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    parts = []\n    for item in list1:\n        parts.append(item)\n    return parts[:L], parts[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return tuple(list1[i:i+L])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    splitList = []\n    for x in list1:\n        splitList.append(x[0:L])\n    return splitList\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age*365)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (h_age * 365) + 0.5\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 4:\n        print(\"A dog's age is \" + str(h_age) + \" years old.\")\n    else:\n        print(\"A dog's age is \" + str(h_age) + \" years old.\")"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age*365\n    if h_age < 1:\n        years = h_age*365\n    if h_age < 10:\n        years = h_age*30\n    if h_age < 13:\n        years = h_age*30\n    if h_age < 17:\n        years = h_age*30\n    if h_age < 21:\n        years = h_age*30\n    if h_age < 25:\n        years = h_age*30\n    if h_age < 27:\n        years = h_age*30\n    if h_age < 30:\n        years = h_age*30\n    return years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 365 * 24 * 60\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(h_age)\n    if h_age >= 18:\n        print('You are old enough to vote')\n    else:\n        print('Sorry, you are not old enough to vote')\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    ages = [0, 0, 0, 0, 0]\n    dogs = 0\n    for dog in h_age:\n        if dog > 0:\n            dogs = dogs + 1\n            ages[0] = dogs * dog\n            ages[1] = dogs * 1\n            ages[2] = dogs * 2\n            ages[3] = dogs * 3\n            ages[4] = dogs * 4\n    return ages\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n    "
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return \"This a dog has \" + str(h_age) + \" dog years.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return \"a dog's age is \" + str(h_age)\n    elif h_age <= 4:\n        return \"a dog's age is \" + str(h_age) + \" and is \" + str(h_age + 1)\n    else:\n        return \"a dog's age is \" + str(h_age) + \" and is \" + str(h_age + 2)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    for i in range(0, len(S), step):\n        yield [S[i:i+step]]\n    return\n    \n    "
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #s = ''.join(map(str, S))\n    s = ''.join(map(str, S))\n    res = []\n    for i in range(0, len(s), step):\n        if s[i:i+step] not in res:\n            res.append(s[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert step >= 0 and step <= S.length, 'Invalid input, step must be a non-negative integer and < list length]'\n    if step == 0: return S\n    else: return [[S[i]] + list_split(S, step-1) for i in range(0, S.length, step)]"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[S[i:i + step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    print(S)\n    \n    splitted = []\n    \n    for i in range(0,len(S),step):\n        splitted.append(S[i:i+step])\n    \n    return splitted\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > len(S):\n        return []\n    return [S[i:i+step] for i in range(0,len(S),step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # For each element in S:\n    #   If len(S) < step:\n    #     add that element to a temporary variable, and increment the step.\n    #   else:\n    #     add the current element to a temporary variable, and increment the step.\n    # Return the list formed by the temporary variable.\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 3.14 * (l ** 2)\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # define variable dimensions\n    x_dim = l\n    y_dim = l\n    z_dim = l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n    ]\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            for k in range(len(l[i][j])):\n                if (i==0 or j==0 or k==0):\n                    l[i][j][k] = 0\n    return l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**3)/2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l <= 0:\n        return 0\n    elif l == 1:\n        return 3\n    elif l == 2:\n        return 6\n    elif l == 3:\n        return 12\n    elif l == 4:\n        return 16\n    elif l == 5:\n        return 18\n    elif l == 6:\n        return 24\n    elif l == 7:\n        return 27\n    elif l == 8:\n        return 32\n    elif l == 9:\n        return 37\n    elif l == 10:\n        return 42\n    elif l == 11:\n        return 47\n    elif l == 12:\n        return 52\n    elif l == 13:\n        return 58\n    elif l == 14:\n        return 65\n    elif l == 15:\n        return 72\n    elif l == 16:\n        return 78\n    elif l == 17:\n        return 83\n    elif l == 18:\n        return 87\n    elif l == 19:\n        return 92\n    elif l == 20:\n        return 98\n    elif l == 21:\n        return 104\n    elif l == 22:\n        return 108\n    elif l == 23:\n        return 117\n    elif l == 24:\n        return 122\n    elif l == 25:\n        return 128\n    elif l == 26:\n        return 133\n    elif l == 27:\n        return 131\n    elif l == 28:\n        return 136\n    elif l == 29:\n        return 143\n    elif l == 30:\n        return 144\n    elif l == 31:\n        return 146\n    elif l == 32:\n        return 147\n    elif l == 33:\n        return 152\n    elif l == 34:\n        return 158\n    elif l == 35:\n        return 162\n    elif l == 36:\n        return 167\n    elif l == 37:\n        return 172\n    elif l == 38:\n        return 189\n    elif l == 39:\n        return 194\n    elif l == 40:\n        return 196\n    elif l == 41:\n        return 203\n    elif l == 42:\n        return 207\n    elif l == 43:\n        return 208\n    elif l == 44:\n        return 219\n    elif l == 45:\n        return 225\n    elif l == 46:\n        return 233\n    elif l == 47:\n        return 246\n    elif l == 48:\n        return 251\n    elif l == 49:\n        return 256\n    elif l == 50:\n        return 270\n    elif l == 51:\n        return 276\n    elif l == 52:\n        return 293\n    elif l == 53:\n        return 327\n    elif l == 54:\n        return 342\n    elif l == 55:\n        return 348\n    elif l == 56:\n        return 351\n    elif l == 57:\n        return 356\n    elif l == 58:\n        return 363\n    elif l == 59:\n        return 366\n    elif l == 60:\n        return 364\n    elif l == 61:\n        return 368\n    elif l == 62:\n        return 373\n    elif l == 63:\n        return 379\n    elif l == 64:\n        return 395\n    elif l == 65:\n        return 404\n    elif l == 66:\n        return 409\n    elif l == 67:\n        return 419\n    elif l == 68:\n        return 421\n    elif l == 69:\n        return 426\n    elif l == 70:\n        return 429\n    elif l == 71:\n        return 441\n    elif l == 72:\n        return 446\n    elif l == 73:\n        return 482\n    elif l == 74:\n        return 463\n    elif l == 75:\n        return 467\n    elif l == 76:\n        return 472\n    elif l == 77:\n        return 478\n    elif l == 78:\n        return 479\n    elif l == 79:\n        return 451\n    elif l == 80:\n        return 461\n    elif l == 81:\n        return 466\n    elif l == 82:\n        return 472\n    elif l == 83:\n        return 489\n    elif l == 84:\n        return 487\n    elif l == 85:\n        return 486\n    elif l == 86:\n        return 493\n    elif l == 87:\n        return 495\n    elif l == 88:\n        return 498\n    elif l == 89:\n        return 499\n    elif l == 90:\n        return 521\n    elif l == 91:\n        return 526\n    elif l == 92:\n        return 533\n    elif l == 93:\n        return 541\n    elif l == 94:\n        return 546\n    elif l == 95:\n        return 551\n    elif l == 96:\n        return 557\n    elif l == 97:\n        return 572\n    elif l == 98:\n        return 583\n    elif l == 99:\n        return 591\n    elif l == 100:\n        return 596\n    elif l == 101:\n        return 601\n    elif l == 102:\n        return 602\n    elif l == 103:\n        return 604\n    elif l == 104:\n        return 608\n    elif l == 105:\n        return 611\n    elif l == 106:\n        return 616\n    elif l == 107:\n        return 623\n    elif l == 108:\n        return 632\n    elif l == 109:\n        return 641\n    elif l == 110:\n        return 647\n    elif l == 111:\n        return 652\n    elif l == 112:\n        return 658\n    elif l == 113:\n        return 673\n    elif l == 114:\n        return 681\n    elif l == 115:\n        return 696\n    elif l == 116:\n        return 698\n    elif l == 117:\n        return 703\n    elif l == 118:\n        return 705\n    elif l == 119:\n        return 712\n    elif l == 120:\n        return 717\n    elif l == 121:\n        return 722\n    elif l == 122:\n        return 727\n    elif l == 123:\n        return 742\n    elif l == 124:\n        return 751\n    elif l == 125:\n        return 756\n    elif l == 126:\n        return 763\n    elif l == 127:\n        return 771\n    elif l == 128:\n        return 786\n    elif l == 129:\n        return 803\n    elif l == 130:\n        return 805\n    elif l == 131:\n        return 812\n    elif l == 132:\n        return 817\n    elif l == 133:\n        return 823\n    elif l == 134:\n        return 831\n    elif l == 135:\n        return 846\n    elif l == 136:\n        return 852\n    elif l == 137:\n        return 858\n    elif l == 138:\n        return 873\n    elif l == 139:\n        return 891\n    elif l == 140:\n        return 896\n    elif l == 141:\n        return 903\n    elif l == 142:\n        return 905\n    elif l == 143:\n        return 912\n    elif l == 144:\n        return 917\n    elif l == 145:\n        return 923\n    elif l == 146:\n        return 932\n    elif l == 147:\n        return 941\n    elif l == 148:\n        return 946\n    elif l == 149:\n        return 953\n    elif l == 150:\n        return 961\n    elif l == 151:\n        return 976\n    elif l == 152:\n        return 983\n    elif l == 153:\n        return 991\n    elif l == 154:\n        return 996\n    elif l == 155:\n        return 1004\n    elif l == 156:\n        return 1013\n    elif l == 157:\n        return 1019\n    elif l == 158:\n        return 1021\n    elif l == 159:\n        return 1026\n    elif l ="
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 0\n    for i in range(0,l):\n        s = s + (2*(i + 1))*(2*i + 1)\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def area(x):\n        return ((x*x)*(x*x)-(x**2))**0.5\n    return area(l)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # get the user input and convert it to float\n    sideLength = float(input('Enter side length of the cube (m): '))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        s=s+i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    s = 0\n    for i in range(1,n):\n        if i % 2 == 0:\n            s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n, 2):\n        total += i ** 2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + (i ** 2)\n        i = i + 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # your code goes here\n    square=[]\n    for i in range(0, n, 2):\n        square.append(i*i)\n    \n    return sum(square)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return int(n ** 0.5)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n + 1, 2):\n        sum += x**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i*i\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**2\n    return sum\nn = int(input(\"enter the number to be searched: \"))\nprint(square_Sum(n))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i*i)\n    return lst[-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 1\n    if n == 4: \n        return 1\n    if n == 5: \n        return 1\n    if n == 6: \n        return 1\n    if n == 7: \n        return 1\n    if n == 8: \n        return 1\n    if n == 9: \n        return 1\n    if n == 10: \n        return 1\n    if n == 11: \n        return 1\n    if n == 12: \n        return 1\n    if n == 13: \n        return 1\n    if n == 14: \n        return 1\n    if n == 15: \n        return 1\n    if n == 16: \n        return 1\n    if n == 17: \n        return 1\n    if n == 18: \n        return 1\n    if n == 19: \n        return 1\n    if n == 20: \n        return 1\n    if n == 21: \n        return 1\n    if n == 22: \n        return 1\n    if n == 23: \n        return 1\n    if n == 24: \n        return 1\n    if n == 25: \n        return 1\n    if n == 26: \n        return 1\n    if n == 27: \n        return 1\n    if n == 28: \n        return 1\n    if n == 29: \n        return 1\n    if n == 30: \n        return 1\n    if n == 31: \n        return 1\n    if n == 32: \n        return 1\n    if n == 33: \n        return 1\n    if n == 34: \n        return 1\n    if n == 35: \n        return 1\n    if n == 36: \n        return 1\n    if n == 37: \n        return 1\n    if n == 38: \n        return 1\n    if n == 39: \n        return 1\n    if n == 40: \n        return 1\n    if n == 41: \n        return 1\n    if n == 42: \n        return 1\n    if n == 43: \n        return 1\n    if n == 44: \n        return 1\n    if n == 45: \n        return 1\n    if n == 46: \n        return 1\n    if n == 47: \n        return 1\n    if n == 48: \n        return 1\n    if n == 49: \n        return 1\n    if n == 50: \n        return 1\n    if n == 51: \n        return 1\n    if n == 52: \n        return 1\n    if n == 53: \n        return 1\n    if n == 54: \n        return 1\n    if n == 55: \n        return 1\n    if n == 56: \n        return 1\n    if n == 57: \n        return 1\n    if n == 58: \n        return 1\n    if n == 59: \n        return 1\n    if n == 60: \n        return 1\n    if n == 61: \n        return 1\n    if n == 62: \n        return 1\n    if n == 63: \n        return 1\n    if n == 64: \n        return 1\n    if n == 65: \n        return 1\n    if n == 66: \n        return 1\n    if n == 67: \n        return 1\n    if n == 68: \n        return 1\n    if n == 69: \n        return 1\n    if n == 70: \n        return 1\n    if n == 71: \n        return 1\n    if n == 72: \n        return 1\n    if n == 73: \n        return 1\n    if n == 74: \n        return 1\n    if n == 75: \n        return 1\n    if n == 76: \n        return 1\n    if n == 77: \n        return 1\n    if n == 78: \n        return 1\n    if n == 79: \n        return 1\n    if n == 80: \n        return 1\n    if n == 81: \n        return 1\n    if n == 82: \n        return 1\n    if n == 83: \n        return 1\n    if n == 84: \n        return 1\n    if n == 85: \n        return 1\n    if n == 86: \n        return 1\n    if n == 87: \n        return 1\n    if n == 88: \n        return 1\n    if n == 89: \n        return 1\n    if n == 90: \n        return 1\n    if n == 91: \n        return 1\n    if n == 92: \n        return 1\n    if n == 93: \n        return 1\n    if n == 94: \n        return 1\n    if n == 95: \n        return 1\n    if n == 96: \n        return 1\n    if n == 97: \n        return 1\n    if n == 98: \n        return 1\n    if n == 99: \n        return 1\n    if n == 100: \n        return 1\n    if n == 101: \n        return 1\n    if n == 102: \n        return 1\n    if n == 103: \n        return 1\n    if n == 104: \n        return 1\n    if n == 105: \n        return 1\n    if n == 106: \n        return 1\n    if n == 107: \n        return 1\n    if n == 108: \n        return 1\n    if n == 109: \n        return 1\n    if n == 110: \n        return 1\n    if n == 111: \n        return 1\n    if n == 112: \n        return 1\n    if n == 113: \n        return 1\n    if n == 114: \n        return 1\n    if n == 115: \n        return 1\n    if n == 116: \n        return 1\n    if n == 117: \n        return 1\n    if n == 118: \n        return 1\n    if n == 119: \n        return 1\n    if n == 120: \n        return 1\n    if n == 121: \n        return 1\n    if n == 122: \n        return 1\n    if n == 123: \n        return 1\n    if n == 124: \n        return 1\n    if n == 125: \n        return 1\n    if n == 126: \n        return 1\n    if n == 127: \n        return 1\n    if n == 128: \n        return 1\n    if n == 129: \n        return 1\n    if n == 130: \n        return 1\n    if n == 131: \n        return 1\n    if n == 132: \n        return 1\n    if n == 133: \n        return 1\n    if n == 134: \n        return 1\n    if n == 135: \n        return 1\n    if n == 136: \n        return 1\n    if n == 137: \n        return 1\n    if n == 138: \n        return 1\n    if n == 139: \n        return 1\n    if n == 140: \n        return 1\n    if n == 141: \n        return 1\n    if n == 142: \n        return 1\n    if n == 143: \n        return 1\n    if n == 144: \n        return 1\n    if n == 145: \n        return 1\n    if n == 146: \n        return 1\n    if n == 147: \n        return 1\n    if n == 148: \n        return 1\n    if n == 149: \n        return 1\n    if n == 150: \n        return 1\n    if n == 151: \n        return 1\n    if n == 152: \n        return 1\n    if n == 153: \n        return 1\n    if n == 154: \n        return 1\n    if n == 155: \n        return 1\n    if n == 156: \n        return 1\n    if n == 157: \n        return 1\n    if n == 158: \n        return 1\n    if n == 159: \n        return 1\n    if n == 160: \n        return 1\n    if n == 161: \n        return 1\n    if n == 162: \n        return 1\n    if n == 163: \n        return 1\n    if n == 164: \n        return 1\n    if n == 165: \n        return 1\n    if n == 166: \n        return 1\n    if n == 167: \n        return "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = n\n    while result > 1:\n        if (result%2) == 0:\n            result = result/2\n        else:\n            result = 3*result + 1\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if j * j <= i * i:\n                break\n        else:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code goes here\n    for i in range(1, n):\n        if num_list[i] < num_list[i-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_nums = [2,3,5,7,11] \n    for i in star_nums: \n        if i == n: \n            return i \n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for x in range(1, n+1):\n        if n%x==0:\n            return x\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1 \n    elif n % 2 == 0: \n        return find_star_num(n - 1) + 2 \n    else: \n        return find_star_num(n - 1) + 2 * find_star_num(n - 1 - 2) \n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = int(n ** 0.5) \n    for i in range(1,x+1):\n        if n % i == 0:\n            return (x + i)\n    return None \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + find_star_num(n - 1)\n    \ndef find_num_of_triplets(n): \n    '''\n    Write a function to find the number of triplets below n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + find_num_of_triplets(n - 1)\n    \ndef main(): \n    print(\"The nth to the nth number:\", find_star_num(5))\n    print(\"The number of triplets:\", find_num_of_triplets(5))\n    \nmain()\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in '1234567890':\n        return k\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \" \":\n        return 0\n    else:\n        return chr(ord(k) - 96)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - 32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    v = ord(k)\n    if v >= 32 and v <= 126:\n        return v - 32\n    else:\n        raise ValueError(\"Invalid character\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(int(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        k = int(k)\n    except ValueError:\n        raise ValueError('The given character is not a number.')\n    if 0 <= k <= len(string_chars):\n        return string_chars[k]\n    else:\n        raise ValueError('The given character is not in the alphabet.')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        if type(k) == int:\n            return chr(k)\n        elif type(k) == str:\n            return chr(int(k,16))\n        else:\n            raise Exception(\n                'An error occurred. The value of the character is not of type int or str.')\n    except Exception as e:\n        print(e)\n        return 'An error occurred. The value of the character is not of type int or str'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k+ord('A'))\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum=0\n    odd_sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            even_sum+=arr[i]\n        else:\n            odd_sum+=arr[i]\n    return even_sum+odd_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            even_list.append(arr[i])\n    return sum(even_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in arr:\n        if x % 2 == 0:\n            sum += x\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr)):\n        if arr[i]%2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2) == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    \n    for index in range(len(arr)):\n        if index % 2 == 0:\n            even_sum += arr[index]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    index = 0\n    while index < len(arr):\n        if index % 2 == 0:\n            if arr[index] % 2 == 0:\n                even_sum += arr[index]\n            else:\n                even_sum += arr[index]\n            index += 1\n        else:\n            index += 1\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    \n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) < 2:\n        return 0\n    even_sum = 0\n    sum_even_index = 0\n    sum_even_index = even_sum + sum_even_index\n    for i in range(len(arr)):\n        if (arr[i] % 2) == 0:\n            if (arr[i] % 2 == 0):\n                sum_even_index = sum_even_index + arr[i]\n            else:\n                sum_even_index = sum_even_index + arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # YOUR CODE HERE\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n * (n+1)//2\n    else:\n        return n*(n+1)//2 - (n+1)//2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 5\n    output = 0\n    for i in range(1, n + 1):\n        output += i ** power\n        power -= 1\n    return output\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<=0:\n        return -1\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([pow(n, i) for i in range(1, 5)])\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += (i**5)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if(n == 0): \n        return 0\n    \n    sum = 0\n    for i in range(1, n): \n        sum += pow(i, 5) \n    return sum \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum + n\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    powers = 1\n    while n > 1:\n        if n%2==0:\n            break\n        else:\n            n = n - 1\n    print(n)\n    return n\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for n in range(1, n+1):\n        sum += n**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda t: t[0], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for item in test_list:\n        result_list.append(item[1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: (x[0],x[1]), test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract_list = []\n    for i in test_list:\n        rear_extract_list.append(i[0])\n    return rear_extract_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for i in test_list:\n        result_list.append(i[1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted_list = []\n    for i in range(len(test_list)):\n        rear_extracted_list.append(test_list[i][1])\n    return rear_extracted_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # clear the current line of the input text\n    test_list.remove('\\n')\n    # check for empty input\n    if test_list == []:\n        return []\n    # create an empty list\n    rear = []\n    # set the variable to be the list of tuples\n    list_of_tuples = test_list\n    # loop through the list\n    for i in range(0, len(list_of_tuples)):\n        # add the element to rear\n        rear.append(list_of_tuples[i][1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[0] for t in test_list]\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert (len(test_tup1)==len(test_tup2)), \"tuples must be of the same length\"\n    #first make a new list of the tuples\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup2[i]-test_tup1[i])\n    # return the tuple in result\n    return tuple(result)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    index1, index2 = test_tup1\n    value1 = test_tup2[index2]\n    value2 = test_tup1[index1]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(\"Subtracting elements from tuples:\")\n    substracted_test_tup1 = tuple(map(substract_elements, test_tup1, test_tup2))\n    print(substracted_test_tup1)\n    return substracted_test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples are not of the same length\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n        \n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_list = []\n    for i in range(len(test_tup1)):\n        if i not in test_tup2:\n            subtracted_list.append(test_tup1[i])\n    return(subtracted_list)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = []\n    test_tup4 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] - test_tup2[i])\n    for i in range(len(test_tup2)):\n        test_tup4.append(test_tup1[i] - test_tup2[i])\n    print(test_tup3)\n    return test_tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 4\n    if n == 3: \n        return 6\n    if n == 4: \n        return 8\n    if n == 5: \n        return 9\n    if n == 6: \n        return 10\n    if n == 7: \n        return 11\n    if n == 8: \n        return 12\n    if n == 9: \n        return 14\n    if n == 10: \n        return 15\n    if n == 11: \n        return 16\n    if n == 12: \n        return 17\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = [0,0,0] # (0,0,0)\n    for k in range(1,n+1):\n        binomial_coeff[0] += binomial_coeff[1]*(2**k)*(2**(k-1))*(n-k)/((2**k)*(2**(k-1))-1)\n        binomial_coeff[1] = binomial_coeff[0]\n        binomial_coeff[2] = binomial_coeff[1] + binomial_coeff[0]\n    return binomial_coeff[2] \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Compute the number of binomial coefficients, n\n    coeff_sum = n * (2 * n - 1)\n    # Check for overflow\n    if (coeff_sum >= 2**(n-1)):\n        coeff_sum = 2**(n-1)\n    # Write code to find the sum of even binomial coefficients\n    return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    l = 0\n    k = 0\n    while k < n: \n        l = (n - k) // 2\n        \n        if l == 0:\n            l = 1\n            k = 0\n        elif l == 1:\n            l = 2\n            k = 0\n        else: \n            k += 1\n            \n    return (l * l * 2) + k - n\n    \ndef even_binomial_Coeff_Sum_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n    \n    return s\n    \ndef even_binomial_Coeff_Sum_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_4( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.ceil(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_5( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_6( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.ceil(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_7( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_8( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.ceil(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_9( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_10( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.ceil(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_11( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_12( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_13( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_14( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_15( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_16( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.ceil(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_17( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_18( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.floor(m)\n    return s\n    \ndef even_binomial_Coeff_Sum_19( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    m = n\n    while m!= 0: \n        s += even_binomial_Coeff_Sum(m)\n        m -= 1\n        m = math.ceil(m)\n    retur"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n == 0):\n        return 0\n    sum_of_odd = 0\n    for i in range(n):\n        sum_of_odd = sum_of_odd + even_binomial_Coeff(i)\n    return sum_of_odd\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # This is the formula for the sum of even binomial coefficients.\n    # We use a formula for the sum of even binomial coefficients\n    # that is, if n = 7, then the result would be\n    # 7*(2^(4/3))-2\n    # Based on this formula we can calculate the sum of the even index binomial coefficients.\n    \n    # Create the variables.\n    # To compute the sum of even index binomial coefficients.\n    # n = 4\n    # Sum = 2^(4/3) = 2\n    # i = 3\n    # Sum = 2^(2/3) = 2\n    # i = 2\n    # Sum = 2^(1/3) = 1\n    # i = 1\n    \n    # Now we return the sum of even index binomial coefficients.\n    \n    # n = 4\n    # i = 3\n    # Sum = 2^(2/3) = 2\n    # i = 2\n    # Sum = 2^(1/3) = 1\n    # i = 1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total_sum = 0\n    i = 0\n    while i < n:\n        total_sum += int(math.log2(i+1)) * even_binomial_Coeff_Sum(i)\n        i += 1\n    return total_sum\ndef even_binomial_Coeff(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total_sum = 0\n    i = 0\n    while i < n:\n        total_sum += int(math.log2(i+1)) * even_binomial_Coeff(i)\n        i += 1\n    return total_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print(\"Please enter an integer greater than or equal to one.\")\n        return\n    elif n == 1:\n        print(\"1\")\n        return\n    elif n == 2:\n        print(\"0\")\n        return\n    elif n%2 == 0:\n        print(\"0\")\n        return\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coeff(n, k):\n        return math.factorial(n) // math.factorial(n - k) // math.factorial(k)\n    n_list = list(range(0, n+1))\n    sum = 0\n    for i in n_list:\n        sum += binomial_coeff(i, 0) * binomial_coeff(i, k)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Determine binomial coefficient\n    def binomial(n, k): \n        '''\n        A helper function that returns the binomial coefficient for a given n and k.\n        '''\n        return math.factorial(n) // math.factorial(k) // math.factorial(n - k)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3*3.14*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.1416*(r**2)*h\n    return(vol)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Create a variable named volume, and set it equal to the amount of volume of the cylinder.\n    volume = (4*3.14*r**2)\n    print(f'Volume of the cylinder is: {volume}')\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*h*(3.1416/2))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = r*h\n    print(volume)\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume.\n    '''\n    volume = 3.14*(r**3)\n    print(volume)\n    \n    \ndef cylinder_volume(radius,height):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of the cylinder. The function should return the volume of the cylinder.\n    '''\n    volume = 3.14*(radius**2)*height\n    print(volume)\n    \ndef sphere_volume(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume.\n    '''\n    volume = 4/3 * pi * r**3\n    print(volume)\n    \n    \ndef main():\n    '''\n    Call the volume function.\n    '''\n    volume_cylinder(1,4)\n    \n    \n    volume_sphere(3)\n    \n    cylinder_volume(3,5)\n    \n    sphere_volume(5)\n    \n    \n    \n    \nmain("
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.141592*r*h)/(4*3.14159*r*h**2)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*h**2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4.0*pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    volume=4*np.pi*(r**2)\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # If dict is None\n    if dict is None:\n        return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict=dict()\n    for key,value in dict.items():\n        if value>=n:\n            newdict[key]=value\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result={}\n    for k in dict.keys():\n        if dict[k]>=n:\n            result[k]=dict[k]\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #Return a new dictionary with only entries with values greater than or equal to n\n    new_dict = {k: v for k, v in dict.items() if v > n}\n    #Return the filtered dictionary\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_keys = list(dict.keys())\n    dict_keys.sort()\n    dict_keys = list(dict_keys)\n    dict_values = list(dict.values())\n    count = 0\n    for key in dict_keys:\n        if dict[key] > n:\n            dict[key] = dict_values[count]\n            count += 1\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out_dict=dict()\n    for i in dict:\n        if dict[i] >= n:\n            out_dict[i]=dict[i]\n    return out_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict=dict()\n    for k in dict.keys():\n        if dict[k]>=n:\n            newDict[k]=dict[k]\n    return newDict\n    \ndef print_dictionary(dict):\n    '''\n    Write a function that prints a dictionary.\n    '''\n    for k,v in dict.items():\n        print(k,v)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Code here\n    pass\n    # raise NotImplementedError('Need to implement')\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = 0\n    for i in test_tup:\n        if i < test_tup[first]:\n            first = test_tup.index(i)\n    return first\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)-1):\n            if test_tup[j] > test_tup[j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                num = num + 1\n    return num\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # get the tuple\n    tup = test_tup\n    # create a list\n    num_elements = []\n    for i in tup:\n        num_elements.append(len(i))\n    # sort the list\n    num_elements = sorted(num_elements)\n    # find the first element\n    index = num_elements.index(tup[0])\n    return index\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    list_of_tups = test_tup\n    count = 0\n    for element in list_of_tups:\n        if element == test_tup[0]:\n            count+=1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # list_to_check = test_tup\n    # for element in list_to_check:\n    #     print(element)\n    #     if element in list_to_check:\n    #         print(f'{element} occurs before {test_tup[0]}')\n    #     else:\n    #         print(f'{element} occurs before {test_tup[0]}')\n    #         break\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # i.e. you have to make a decision about the decimal\n    # making the number of decagualation a power of 2\n    # this is only possible if you can make a number of decagualation\n    # equal to 2^n\n    # and you can make a number of decagualation equal to 2^n\n    # your function should be able to determine the decagualation\n    # power by modifying the given input number and test if the\n    # given input number is less than the given number\n    # In this case you should be able to make a decagualation\n    # power equal to or less than 2^n\n    # the function should return the decagualation power\n    # power of 2\n    if(n == 0):\n        return 2\n    if(n % 2 == 1):\n        return n//2\n    return n*(n-1)//2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    temp = n+1\n    for i in range(1,n):\n        temp *= 2\n        temp %= 10007\n    return temp\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = 1\n    while n % 2 == 0: \n        x = 2 * x \n        n = n//2\n    return x \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n-1\n    if n == 0: \n        return True\n    if n == 1: \n        return False\n    if n % 2 == 0:\n        return is_num_decagonal(n-1)\n    else:\n        if n % 2!= 0: \n            return is_num_decagonal(n-1) and is_num_decagonal(n-2)\n        else:\n            if n % 2 == 0: \n                return is_num_decagonal(n-1) and is_num_decagonal(n-2) and is_num_decagonal(n-3)\n            else:\n                return is_num_decagonal(n-1) and is_num_decagonal(n-2) and is_num_decagonal(n-3) and is_num_decagonal(n-4)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0: \n        return None\n    if n==0: \n        return 1\n    elif n==1: \n        return 2\n    else: \n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # Your code goes here\n    x = 1\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 21\n    elif n == 10:\n        return 23\n    elif n == 11:\n        return 29\n    elif n == 12:\n        return 31\n    elif n == 13:\n        return 33\n    elif n == 14:\n        return 37\n    elif n == 15:\n        return 41\n    elif n == 16:\n        return 43\n    elif n == 17:\n        return 47\n    elif n == 18:\n        return 53\n    elif n == 19:\n        return 59\n    elif n == 20:\n        return 61\n    elif n == 21:\n        return 67\n    elif n == 22:\n        return 71\n    elif n == 23:\n        return 73\n    elif n == 24:\n        return 79\n    elif n == 25:\n        return 83\n    elif n == 26:\n        return 89\n    elif n == 27:\n        return 97\n    elif n == 28:\n        return 101\n    elif n == 29:\n        return 103\n    elif n == 30:\n        return 109\n    elif n == 31:\n        return 113\n    elif n == 32:\n        return 127\n    elif n == 33:\n        return 131\n    elif n == 34:\n        return 137\n    elif n == 35:\n        return 143\n    elif n == 36:\n        return 149\n    elif n == 37:\n        return 153\n    elif n == 38:\n        return 167\n    elif n == 39:\n        return 173\n    elif n == 40:\n        return 179\n    elif n == 41:\n        return 181\n    elif n == 42:\n        return 193\n    elif n == 43:\n        return 197\n    elif n == 44:\n        return 203\n    elif n == 45:\n        return 205\n    elif n == 46:\n        return 207\n    elif n == 47:\n        return 209\n    elif n == 48:\n        return 211\n    elif n == 49:\n        return 223\n    elif n == 50:\n        return 227\n    elif n == 51:\n        return 229\n    elif n == 52:\n        return 231\n    elif n == 53:\n        return 233\n    elif n == 54:\n        return 247\n    elif n == 55:\n        return 249\n    elif n == 56:\n        return 251\n    elif n == 57:\n        return 253\n    elif n == 58:\n        return 257\n    elif n == 59:\n        return 259\n    elif n == 60:\n        return 261\n    elif n == 61:\n        return 263\n    elif n == 62:\n        return 265\n    elif n == 63:\n        return 267\n    elif n == 64:\n        return 269\n    elif n == 65:\n        return 271\n    elif n == 66:\n        return 273\n    elif n == 67:\n        return 277\n    elif n == 68:\n        return 279\n    elif n == 69:\n        return 281\n    elif n == 70:\n        return 283\n    elif n == 71:\n        return 285\n    elif n == 72:\n        return 287\n    elif n == 73:\n        return 289\n    elif n == 74:\n        return 291\n    elif n == 75:\n        return 293\n    elif n == 76:\n        return 295\n    elif n == 77:\n        return 297\n    elif n == 78:\n        return 299\n    elif n == 79:\n        return 301\n    elif n == 80:\n        return 302\n    elif n == 81:\n        return 303\n    elif n == 82:\n        return 304\n    elif n == 83:\n        return 305\n    elif n == 84:\n        return 306\n    elif n == 85:\n        return 307\n    elif n == 86:\n        return 308\n    elif n == 87:\n        return 309\n    elif n == 88:\n        return 310\n    elif n == 89:\n        return 311\n    elif n == 90:\n        return 312\n    elif n == 91:\n        return 313\n    elif n == 92:\n        return 314\n    elif n == 93:\n        return 315\n    elif n == 94:\n        return 316\n    elif n == 95:\n        return 317\n    elif n == 96:\n        return 318\n    elif n == 97:\n        return 319\n    elif n == 98:\n        return 320\n    elif n == 99:\n        return 321\n    elif n == 100:\n        return 322\n    elif n == 101:\n        return 323\n    elif n == 102:\n        return 324\n    elif n == 103:\n        return 325\n    elif n == 104:\n        return 326\n    elif n == 105:\n        return 327\n    elif n == 106:\n        return 328\n    elif n == 107:\n        return 329\n    elif n == 108:\n        return 330\n    elif n == 109:\n        return 331\n    elif n == 110:\n        return 332\n    elif n == 111:\n        return 333\n    elif n == 112:\n        return 334\n    elif n == 113:\n        return 335\n    elif n == 114:\n        return 336\n    elif n == 115:\n        return 337\n    elif n == 116:\n        return 338\n    elif n == 117:\n        return 339\n    elif n == 118:\n        return 340\n    elif n == 119:\n        return 341\n    elif n == 120:\n        return 342\n    elif n == 121:\n        return 343\n    elif n == 122:\n        return 344\n    elif n == 123:\n        return 345\n    elif n == 124:\n        return 346\n    elif n == 125:\n        return 347\n    elif n == 126:\n        return 348\n    elif n == 127:\n        return 349\n    elif n == 128:\n        return 350\n    elif n == 129:\n        return 351\n    elif n == 130:\n        return 352\n    elif n == 131:\n        return 353\n    elif n == 132:\n        return 354\n    elif n == 133:\n        return 355\n    elif n == 134:\n        return 356\n    elif n == 135:\n        return 357\n    elif n == 136:\n        return 358\n    elif n == 137:\n        return 359\n    elif n == 138:\n        return 360\n    elif n == 139:\n        return 361\n    elif n == 140:\n        return 362\n    elif n == 141:\n        return 363\n    elif n == 142:\n        return 364\n    elif n == 143:\n        return 365\n    elif n == 144:\n        return 366\n    elif n == 145:\n        return 367\n    elif n == 146:\n        return 368\n    elif n == 147:\n        return 369\n    elif n == 148:\n        return 370\n    elif n == 149:\n        return 371\n    elif n == 150:\n        return 372\n    elif n == 151:\n        return 373\n    elif n == 152:\n        return 374\n    elif n == 153:\n        return 375\n    elif n == 154:\n        return 376\n    elif n == 155:\n        return 377\n    elif n == 156:\n        return 378\n    elif n == 157:\n        return 379\n    elif n == 158:\n        return 380\n    elif n == 159:\n        return 381\n    elif n == 160:\n        return 382\n    elif n == 161:\n        return 383\n    elif n == 162:\n        return 384\n    elif n == 163:\n        return 385\n    elif n == 164:\n        return 386\n    elif n == 165:\n        return 387\n    elif n == 16"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    assert(isinstance(n, int))\n    if n == 0 or n == 1: \n        return n \n    \n    if n == 2: \n        return 1\n    \n    if n == 3: \n        return 2 \n    \n    for i in range(1, n): \n        if n % i == 0: \n            return (n // i) + i \n    \n    return n \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Set a flag that will be used to indicate if we're at the end of the array\n    found = False\n    position = -1\n    # Loop through the array\n    for index in range(len(dlist)):\n        # Check to see if the element is found at the current index and increment the position\n        if dlist[index] == item:\n            position = index\n            found = True\n            break\n    # If not found, return -1 and the position (or -1 if the element was not found)\n    if not found:\n        return -1, -1\n    # Return the position of the element and the element itself\n    return position, dlist[position]\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for idx, item in enumerate(dlist):\n        if item == item:\n            return (True, idx)\n    return (-1, -1)\n    \n    \ndlist = [0, 1, 2, 8, 5, 6, 4]\nprint(sequential_search(dlist, 8))\nprint(sequential_search(dlist, 6))\nprint(sequential_search(dlist, 5)"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    try:\n        index = 0\n        for element in dlist:\n            if item == element:\n                return (True, index)\n            else:\n                index += 1\n        return (False, -1)\n    except:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos=0\n    while pos!=-1:\n        if pos in dlist:\n            return pos, dlist.index(pos)\n        pos=pos+1\n    return -1, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for index, element in enumerate(dlist):\n        if element == item:\n            position = index\n            break\n    return position, position\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return index, index + 1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, e in enumerate(dlist):\n        if e == item:\n            return i, e\n    return -1\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set()\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n    return len(unique_set) > 1\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_with_duplicates = []\n    for i in test_list:\n        if i not in test_list_with_duplicates:\n            test_list_with_duplicates.append(i)\n    return test_list_with_duplicates\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    count_list = []\n    for i in range(len(test_list)):\n        count_list.append(test_list.count(test_list[i]))\n    #print(count_list)\n    if count_list!= []:\n        return 'Not unique'\n    else:\n        return 'Unique'\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [i for i in test_list if i not in test_list]\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for test in test_list:\n        if test not in unique_list:\n            unique_list.append(test)\n    return len(unique_list) == len(set(unique_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for x in test_list:\n        if x not in unique:\n            unique.append(x)\n    if len(unique) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1 or not nums2:\n        return []\n    n1,n2=len(nums1),len(nums2)\n    for i in range(n1):\n        for j in range(n2):\n            nums1[i][j]=-nums2[j][i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    i = 0\n    \n    # Iterate the second list by iterating over the first list\n    while i < len(nums2):\n        # Iterate over the first list element-wise and add it to the new_list.\n        # If the element is not present in the second list, append it to the new_list.\n        new_list.append(nums2[i])\n        if i < len(nums1)-1:\n            # If the element is present in the first list, add it to the new_list.\n            new_list.append(nums1[i+1])\n        else:\n            # If the element is present in the first list, append it to the new_list.\n            new_list.append(nums1[0])\n        i += 1\n    \n    # Return the result.\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # your code goes here\n    print('Starting')\n    try:\n        a = []\n        b = []\n        for i in nums1:\n            a.append(i)\n        for i in nums2:\n            b.append(i)\n        print(f'a = {a}')\n        print(f'b = {b}')\n        c = []\n        for i in range(len(nums2)):\n            c.append(a[i] - b[i])\n        print(f'c = {c}')\n        return c\n    except:\n        print('A Error Occured')\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)==len(nums2):\n        return [[nums1[i]-nums2[i] for i in range(len(nums1))] for j in range(len(nums2))]\n    else:\n        return [[nums1[i]-nums2[j] for i in range(len(nums1))] for j in range(len(nums2))]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #print(nums1)\n    #print(nums2)\n    l=len(nums2)\n    sub_list=[]\n    for i in range(0,l):\n        sum_of_nums=0\n        for j in range(0,l):\n            sum_of_nums+=nums1[j]*nums2[j]\n        sum_of_nums=sum_of_nums**(1/2)\n        sum_of_nums=round(sum_of_nums)\n        sum_of_nums=sum_of_nums**(1/2)\n        #print(sum_of_nums)\n        sub_list.append(sum_of_nums)\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Your code here\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same size')\n    l = []\n    for i in range(0,len(nums1)):\n        l.append(nums1[i]-nums2[i])\n    return l\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #length of nums1 and nums2 should be equal\n    length1 = len(nums1)\n    length2 = len(nums2)\n    #find the max value of each array\n    max1 = max(nums1)\n    max2 = max(nums2)\n    min1 = min(nums1)\n    min2 = min(nums2)\n    #find the min value of each array\n    min = min(min1,min2)\n    #find the max value of each array\n    max = max(max1,max2)\n    #get the number of elements of nums1\n    nums1.remove(min1)\n    nums1.remove(max1)\n    #get the number of elements of nums2\n    nums2.remove(min2)\n    nums2.remove(max2)\n    #add the min and max value of each array to the merged array\n    for i in range(len(nums1)):\n        nums1[i] += min\n        nums1[i] += max\n    for i in range(len(nums2)):\n        nums2[i] += min\n        nums2[i] += max\n    #return the merged array\n    return(nums1+nums2)\n    #return the nums1 + nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    # for i in range(len(nums1)):\n    #     nums1[i] -= nums2[i]\n    # return nums1\n    \ndef multiply_list(nums1,nums2):\n    '''\n    Write a function that takes two lists of numbers and returns their product.\n    '''\n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    # return nums1 * nums2\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    # return nums1[0] * nums2[0]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,1,2,3,4]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [3,4,5,6,7]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [1,2,3,4,5]\n    \n    # nums1 = [1,2,3,4,5]\n    # nums2 = [2,3,4,5,6]\n    \n    # nums1 = [1,"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Subtract the two lists \n    return [element for element in nums1 if element not in nums2]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = n\n    for i in range(0, 10):\n        s = s*10\n    return n < s\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in str(n): \n        digits.append(int(i)) \n    frequency = {} \n    for i in digits: \n        if i in frequency: \n            frequency[i] += 1 \n        else: \n            frequency[i] = 1 \n    for k in frequency: \n        if frequency[k] < len(digits): \n            return False\n    return True \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n==0:\n        print(True)\n        return\n    if not isinstance(n,int):\n        print(False)\n        return\n    if (n%10)>=10:\n        print(False)\n        return\n    if n%10==0:\n        print(True)\n        return\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    ans=[]\n    for digit in str(n):\n        count=0\n        for i in range(len(digit)):\n            if digit[i]==\"0\":\n                count+=1\n        if count>=1:\n            ans.append(False)\n        else:\n            ans.append(True)\n    return ans\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    for i in range(len(n)):\n        for j in range(len(n)):\n            if i!= j:\n                if n[i] == n[j]:\n                    if i + j < len(n):\n                        if n[i + j] > n[i]:\n                            return False\n                    else:\n                        return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def is_digit(n):\n        if not isinstance(n, str):\n            return False\n        count = 0\n        for i in n:\n            if i.isdigit():\n                count += 1\n        if count == n.count('0'):\n            return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) > 1:\n        raise ValueError(\"Only digit allowed\")\n    else:\n        digits = []\n        for i in range(0, len(str(n))):\n            digits.append(str(n)[i])\n        if len(digits) >= 7:\n            raise ValueError(\"Too many digits\")\n        else:\n            for i in range(0, len(digits)):\n                if digits[i]!= digits[0]:\n                    raise ValueError(\"Incorrect data\")\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <=0 or n>=1000000:\n        return 'Please input a number greater than 0 and less than or equal to 1000000'\n    else:\n        digit_count = {}\n        for i in range(10):\n            digit = str(i)\n            digit_count[digit] = digit_count.get(digit, 0) + 1\n        if n not in digit_count:\n            return 'Number not in the given digit range'\n        else:\n            return digit_count.get(n)\n        \ndef main():\n    while True:\n        try:\n            n = int(input())\n            print(validate(n))\n        except Exception as e:\n            print(str(e))\n        \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i!= element:\n            count = count + 1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        if list.count(element) == len(list):\n            return True\n        else:\n            return False\n        \n    #Test Cases\n    #list = [2,2,3,4,5]\n    #element = 3\n    #answer = True\n    #answer = check_element(list,element)\n    #answer = answer and list == answer\n    #print(answer)\n    #answer = check_element(list,element)\n    #answer = answer and list == answer\n    #answer = check_element(list,element)\n    #answer = answer and list == answer\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in range(len(list)):\n        if element == list[x]:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return False\n        return True\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(element == i for i in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return \"Element is there\"\n    return \"element is not there\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index in range(0,len(list)):\n        if list[index]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # split the string into two or three parts\n    split_str = text.split()\n    # split the string into the two or three parts\n    split_two_or_three = split_str.split('a')\n    # check if the two or three parts contains the character\n    for part in split_two_or_three:\n        if part[-1] not in ['b']:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_seventeen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b' in text and 'c' not in text and 'd' not in text:\n        return 'MATCH'\n    elif 'a' not in text and 'b' not in text and 'c' not in text and 'd' in text:\n        return 'NO MATCH'\n    else:\n        return 'MISMATCH'\ndef text_match_two_eighteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and 'b"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    if re.search(r'^a([bc]?)b?$', text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    counter = 0\n    text_list = re.split('[a-b]', text)\n    for word in text_list:\n        counter += 1\n        if counter == 2:\n            if text[counter-1] == 'a' and text[counter+1] == 'b':\n                return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # def test_text_match_two_three(text):\n    #     # start_index = text.find(\"a\")\n    #     # end_index = text.find(\"b\")\n    #     # result = text[start_index:end_index]\n    #     # if result == \"a\":\n    #     #     return \"a b\"\n    #     # elif result == \"b\":\n    #     #     return \"a b\"\n    #     # else:\n    #     #     return result\n    #     pattern = r\"a{1,3}b\"\n    #     match = re.findall(pattern,text)\n    #     if match == None:\n    #         return False\n    #     return match\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return (re.match(\"(a)(b)(c)$\", text)!= None)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    # First check to see if we are at the start of the string\n    if text[0] == 'a' or text[0] == 'b':\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bc]b'\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or four 'b' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or five 'b' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or six 'b' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or seven 'b' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or eight 'b' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or nine 'b' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'z' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '1' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '2' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '3' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '4' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '5' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '6' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '7' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three '8' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_four_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four '0' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_four_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four '1' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_four_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four '2' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_four_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four '3' characters.\n    '''\n    # 1. define a function\n    # 2. define a pattern to find a character \"a\"\n    # 3. run the function\n    # return the result\n    return re.findall(r'[a-z]', text)\ndef text_match_four_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four '4' characters.\n    '''\n    # 1. define a functio"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex_match_two = 'b'\n    regex_match_three = 'a'\n    is_match_two = False\n    is_match_three = False\n    for i in range(len(text)):\n        if text[i] == regex_match_two or text[i] == regex_match_three:\n            if i+2 >= len(text):\n                return True\n            if text[i+2] == 'b':\n                is_match_two = True\n            elif text[i+2] == 'a':\n                is_match_three = True\n        else:\n            if is_match_two and is_match_three:\n                return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_sub_array = -1\n    for i in range(n):\n        if k > 0:\n            sum = a[i] + a[i]\n            k -= 1\n        else:\n            sum = a[i]\n        max_sum_sub_array = max(sum, max_sum_sub_array)\n    return max_sum_sub_array\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if len(a) == 0:\n        return 0\n    \n    max_sum = 0\n    for i in range(n):\n        # calculate max_sum + max_sum\n        max_sum += a[i]\n        # calculate min_sum + max_sum\n        min_sum = k\n        for j in range(k):\n            min_sum += a[i+j]\n        if max_sum >= min_sum:\n            continue\n        else:\n            max_sum += a[i]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #define the array to be operated on\n    arr = [i for i in range(1,n+1)]\n    #store the maximum of k repetitions\n    max_sub_array_sum = 0\n    #number of repetitions \n    sub_arr_cnt = 0\n    #loop\n    for i in range(0, n, k):\n        #add each substring of arr to the maximum sum\n        max_sub_array_sum = max(max_sub_array_sum, sum(arr[i:i+k]))\n        #increase count of repeating the substring\n        sub_arr_cnt += 1\n        #remove the substring from arr if it's been repeated too many times\n        arr.remove(arr[i:i+k])\n    return max_sub_array_sum, sub_arr_cnt\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # array = [0] * n\n    # for i in range(n):\n    #     array[i] = i+1\n    # a = a[::-1]\n    # result = [0] * n\n    # print(a)\n    # print(a)\n    # print(a)\n    # result[0] = a[0]\n    # print(result)\n    # for i in range(1,n):\n    #     result[i] = result[i-1] + a[i]\n    # print(result)\n    # return max(result[i] for i in range(n) if i % k == 0)\n    \n    # return max(result[i:n:k] for i in range(n))\n    # if n == 0:\n    #     return 0\n    # if k == 0:\n    #     return a[0]\n    # return max(max_sub_array_sum_repeated(a, n, k-1), \n    #         max_sub_array_sum_repeated(a, n-k, k))\n    # return max_sub_array_sum_repeated(a, n-k, k-1)\n    # if k == 0:\n    #     return sum(a)\n    # return max(sum(a[i:n-k:k]), sum(a[n-k:n]))\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Find the max of the starting point \n    # This is the first element as a sum can be found at least n times.\n    max_index = find_index(a, n, k)\n    \n    # Initialize the sum as the \n    # largest sum \n    sum = a[max_index]\n    \n    # Find the elements from the starting \n    # point till the ending point \n    for i in range(max_index, -1, -1): \n        sum += a[i]\n        \n    # Return the sum \n    return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if there are only one element in the array, return the sum of it\n    if n==1:\n        return a[0]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = 0\n    r = k-1\n    k = k-1\n    i = 0\n    while i < n:\n        # print(a[i], k, l)\n        l = max(l, a[i]+k*a[i])\n        i += 1\n    j = 0\n    i = 0\n    while j < n:\n        # print(a[j], k, l)\n        r = max(r, a[j]+k*a[j])\n        j += 1\n    return l+r\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create array to store max sum\n    max_sum = []\n    \n    # create array to store max sum\n    max_sum_arr = []\n    \n    for i in range(n):\n        temp_sum = []\n        for j in range(k):\n            temp_sum.append(a[i][j])\n        max_sum.append(max(temp_sum))\n        \n    # find max sum in array\n    for i in range(n):\n        for j in range(k):\n            if max_sum[i][j] == max(max_sum[i - 1][j:j + k - 1]):\n                max_sum_arr.append(a[i][j])\n                \n    return max_sum_arr\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_array = []\n    for i in range(k):\n        max_sum_array.append(a[i])\n    for i in range(k,n):\n        if max_sum_array[i-k] > a[i]:\n            max_sum_array[i-k] = a[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_sub_array = 0\n    max_sub_array = []\n    for i in range(n):\n        curr_sum = 0\n        sub_array = []\n        for j in range(k):\n            curr_sum += a[i]\n            sub_array.append(curr_sum)\n        if curr_sum < 0:\n            continue\n        else:\n            for j in range(k):\n                curr_sum -= sub_array[j]\n                if curr_sum < 0:\n                    break\n                else:\n                    sub_array.pop()\n                    curr_sum -= sub_array[j]\n                    if curr_sum < 0:\n                        break\n            max_sum_sub_array = max(max_sum_sub_array, sum(sub_array))\n            max_sub_array.append(sub_array)\n    return max_sum_sub_array\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum=0\n    for i in range(1,n):\n        sum+=i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code goes here\n    sqs = 0\n    for i in range(n):\n        if(i%2==0):\n            sqs += i\n    return sqs\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += n * n\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i**2\n        i=i+2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 2)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        s+=i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #Create a new array\n    #Create a new array\n    #Sum\n    #Return the new array\n    def square_sum(n):\n        s=0\n        for i in range(1, n+1):\n            s += (i**2)\n        return s\n    \n    #Function\n    def square_Sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n    \n    #Function\n    def square_sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n    \n    #Function\n    def square_sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n    \n    #Function\n    def square_sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n    \n    #Function\n    def square_sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n    \n    #Function\n    def square_sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n    \n    #Function\n    def square_sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n    \n    #Function\n    def square_sum(n):\n        #Set the sum to 0\n        #Set the sum to 1\n        s = 0\n        #Sum\n        #S\n        for i in range(2, n+1):\n            s = s + i\n        return s\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # dic = {}\n    # for i in range(len(list1)):\n    #     for j in range(len(list1[i])):\n    #         dic[list1[i][j]] = j\n    # return max(dic.values())\n    # for i in range(len(list1)):\n    #     for j in range(len(list1[i])):\n    #         print(list1[i][j], end ='')\n    #     print()\n    # print('\\n')\n    res = []\n    for i in range(len(list1)):\n        res.append(list1[i][0])\n        for j in range(len(list1[i])):\n            if list1[i][j] in res:\n                res.remove(list1[i][j])\n    return max(res)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for element in list1:\n        if len(element)>len(max_length_list):\n            max_length_list = element\n    return max_length_list\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max=0\n    for i in range(len(list1)):\n        if len(list1[i])>max:\n            max=len(list1[i])\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    temp = []\n    for l in list1:\n        temp.append(l[0])\n    if len(temp) == 0:\n        return 0\n    else:\n        max_length = len(max(temp, key=len))\n        return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if max_length < len(list1[i][j]):\n                max_length = len(list1[i][j])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    temp=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]>temp:\n                temp=list1[i][j]\n    return temp\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # YOUR CODE HERE\n    return max([len(l1) for l1 in list1])\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    if n == 0:\n        return 1\n    else:\n        for i in range(k):\n            if (i < k - 2) or (i > (k - 2) - 2):\n                continue\n            else:\n                count += count_no_of_ways(n - 1, i + 1)\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # n = number of posts in the fence\n    # k = number of colors in the fence\n    # Create an empty dictionary to store the ways \n    # to paint the fence with n posts and k colors \n    \n    # To check that the values of the dictionary are an integer.\n    if not isinstance(n, int) or not isinstance(k, int) or k < 0:\n        return 'Invalid Input'\n    \n    # Dictionaries will store the value of n, k, and the number of ways to paint the fence. \n    # It will be a dictionary of the values of n, k, and the number of ways to paint the fence. \n    # Each dictionary stores the value of n, k, and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k, and the number of ways to paint the fence. \n    # Dictionaries will store the value of n, k, and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k and the number of ways to paint the fence. \n    # For example, if n = 3, k = 1 and n = 3 and k = 5, then n = 3, k = 5 and n = 3 and k = 1 and n = 3, k = 5, and n = 3, k = 1 and n = 3, k = 5, and n = 3 and k = 1.\n    #\n    # We need to store the values of the key in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    # This dictionary will store the value of n, k and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k and the number of ways to paint the fence. \n    # Each dictionary has a key of n, k and the number of ways to paint the fence. \n    # For example, if n = 3, k = 1 and n = 3 and k = 5, then n = 3, k = 5 and n = 3 and k = 1 and n = 3, k = 5, and n = 3, k = 1 and n = 3, k = 5, and n = 3, k = 1.\n    #\n    # We need to store the values of the key in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a list to store the number of ways to paint the fence with n posts and k colors.\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    # For example, if n = 3, k = 1 and n = 3 and k = 5, then n = 3, k = 5 and n = 3 and k = 1 and n = 3, k = 5, and n = 3, k = 1 and n = 3, k = 5, and n = 3, k = 1.\n    #\n    # We need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    # For example, if n = 3, k = 1 and n = 3 and k = 5, then n = 3, k = 5 and n = 3 and k = 1 and n = 3, k = 5, and n = 3, k = 1 and n = 3, k = 5, and n = 3, k = 1.\n    #\n    # We need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n, k, and the number of ways to paint the fence.\n    # To store the value of the list in the dictionary, where n and k must be integers and the value of the dictionary must be an integer.\n    #\n    # Now we need to create a dictionary to store the number of ways to paint the fence with n posts and k colors.\n    #\n    # We need to convert the number of posts to an integer and create a list with the value of n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2 or n > 2 or k > 2:\n        return 0\n    \n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n+1):\n        dp[i][0] = 1\n        \n        for j in range(1, k+1):\n            if i-1 >= 0:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            if j-1 >= 0:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 0\n    if k == 1: \n        return 1\n    if n < 2: \n        return 0 \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return 0\n    if n == 2 or k == 0:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif k == 1:\n        return 1\n    else:\n        return (count_no_of_ways(n - 1, k) + count_no_of_ways(n, k - 1)) % MOD \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==k:\n        return 1\n    elif n==k+1:\n        return n\n    else:\n        return n+count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2 or k <= 2:\n        return n*k\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 1 or n == 2): \n        return 1\n    elif (n == 3): \n        return 4\n    elif (k == 2):\n        return 5\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k-2)"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 and k == 0: return 2\n    elif n == 2 and k > 0: return 3\n    elif n == 2: return 1\n    elif k == 0: return 2\n    elif k == 1: return 1\n    elif n >= 2: \n        if k == 1: return 2\n        elif n % 2 == 0: \n            return (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)) * 2\n        elif n % 2 == 1: \n            return (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k - 1)) * 2 + 1\n    \ndef paint_fence(n, k, color_list): \n    '''\n    Paint fence with n posts and k colors.\n    '''\n    color_list = [color_list[i % len(color_list)] for i in range(n)]\n    \n    if n == 2: return [color_list[0], color_list[1]]\n    elif n == 3: return [color_list[0], color_list[1], color_list[2]]\n    elif k == 0: return [color_list[0], color_list[1], color_list[2], color_list[3]]\n    elif k == 1: return [color_list[0], color_list[1], color_list[2], color_list[3]]\n    else: return [color_list[0], color_list[1], color_list[2], color_list[3], color_list[4]]\n    \ndef count_by_color(n, k, color_list): \n    '''\n    Count number of ways to paint the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 and k == 0: return 2\n    elif n == 2 and k > 0: return 3\n    elif n == 2: return 1\n    elif k == 0: return 2\n    elif k == 1: return 1\n    elif n >= 2: \n        return count_by_color(n - 1, k, color_list) * 2\n    else:\n        return count_by_color(n - 1, k, color_list) * 3 + count_by_color(n - 2, k - 1, color_list) + 1\n    \ndef color_fence(n, k, color_list): \n    '''\n    Color fence, which consists of k distinct colors.\n    '''\n    color_list = [color_list[i % len(color_list)] for i in range(n)]\n    \n    if n == 2: return [color_list[0], color_list[1]]\n    elif n == 3: return [color_list[0], color_list[1], color_list[2]]\n    elif k == 0: return [color_list[0], color_list[1], color_list[2], color_list[3]]\n    elif k == 1: return [color_list[0], color_list[1], color_list[2], color_list[3]]\n    else: return [color_list[0], color_list[1], color_list[2], color_list[3], color_list[4]]\n    \ndef count_solution(n, k, color_list): \n    '''\n    Count the number of ways to paint the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 and k == 0: return 2\n    elif n == 2 and k > 0: return 3\n    elif n == 2: return 1\n    elif k == 0: return 2\n    elif k == 1: return 1\n    elif n >= 2: \n        if k == 1: return 2\n        elif n % 2 == 0: \n            return (count_solution(n - 1, k, color_list) * 2) * 2 + count_solution(n - 2, k - 1, color_list)\n        elif n % 2 == 1: \n            return (count_solution(n - 1, k, color_list) * 2) * 2 + count_solution(n - 2, k - 1, color_list) + 1\n    \ndef can_find_solution(n, k, color_list): \n    '''\n    Find the color of the nearest block.\n    '''\n    color_list = [color_list[i % len(color_list)] for i in range(n)]\n    \n    if n == 2: return color_list[0]\n    elif n == 3: return color_list[0]\n    elif k == 0: return color_list[1]\n    elif k == 1: return color_list[2]\n    else: return color_list[3]\n    \ndef count_solution_1(n, k, color_list): \n    '''\n    Count the number of ways to paint the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 and k == 0: return 2\n    elif n == 2 and k > 0: return 3\n    elif n == 2: return 1\n    elif k == 0: return 2\n    elif k == 1: return 1\n    elif n >= 2: \n        if k == 1: return 2\n        elif n % 2 == 0: \n            return (count_solution_1(n - 1, k, color_list) * 2) * 2 + count_solution_1(n - 2, k - 1, color_list)\n        elif n % 2 == 1: \n            return (count_solution_1(n - 1, k, color_list) * 2) * 2 + count_solution_1(n - 2, k - 1, color_list) + 1\n    \ndef can_find_solution_1(n, k, color_list): \n    '''\n    Find the color of the nearest block.\n    '''\n    color_list = [color_list[i % len(color_list)] for i in range(n)]\n    \n    if n == 2: return color_list[0]\n    elif n == 3: return color_list[0]\n    elif k == 0: return color_list[1]\n    elif k == 1: return color_list[2]\n    else: return color_list[3]\n    \ndef count_solution_2(n, k, color_list): \n    '''\n    Count the number of ways to paint the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 and k == 0: return 2\n    elif n == 2 and k > 0: return 3\n    elif n == 2: return 1\n    elif k == 0: return 2\n    elif k == 1: return 1\n    else: return 3\n    \ndef count_solution_3(n, k, color_list): \n    '''\n    Count the number of ways to paint the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 and k == 0: return 2\n    elif n == 2 and k > 0: return 3\n    elif n == 2: return 1\n    elif k == 0: return 2\n    elif k == 1: return 1\n    else: return 3\n    \ndef max_sum_of_fence_cost(n, k, color_list): \n    '''\n    Find the maximum sum of the fence cost.\n    '''\n    if n == 2 and k == 0: return 2\n    elif n == 2 and k > 0: return 3\n    elif n == 2: return 1\n    elif k == 0: return 2\n    elif k == 1: return 1\n    else: return 3\n    \ndef count_solution_4(n, k, color_list): \n    '''\n    Count the number of ways to paint the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(isinstance(n,int) and isinstance(m,int)):\n        if n > 0 and m > 0:\n            if n < m:\n                return -1\n            return (n // m)\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n < m):\n        print(\"Incorrect input, n must be greater than m.\")\n    elif(n == m):\n        return n\n    else:\n        i = 0\n        for i in range(1,(m+1)):\n            if(i%n==0):\n                return i\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quot = (n*1000) + m\n    if quot >= 1000:\n        return 'The first number is greater than the second number'\n    else:\n        return 'The first number is less than the second number'\n        \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < 0 or n > m:\n        raise ValueError('Input must be non-negative')\n    p = 1\n    while m%p == 0:\n        p += 1\n    return p\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    if m == 1:\n        return n\n    while n >= m:\n        if n%m == 0:\n            return n//m\n        m -= 1\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    m=abs(m)\n    if n%m==0:\n        return (n//m)\n    elif n%m!=0:\n        return (find(n,m//2))\n    else:\n        return n//m"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    m = m%n\n    if m == 0:\n        return n\n    return find(n, m//10)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    else:\n        return n/m;\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    if n == 0:\n        return 0\n    if n < 0 or m < 0:\n        return 0\n    return n / m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return m-n/2 \n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w < h):\n        return (h)\n    else:\n        return (w)\n    \ndef otherside_rightangled_angle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w < h):\n        return (w)\n    else:\n        return (h)\n    \ndef leftside_rightangled_angle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w < h):\n        return (w)\n    else:\n        return (h)\n    \ndef get_cross_product(a,b):\n    '''\n    Write a function to compute the cross product of a and b.\n    '''\n    return (a*b)\n    \ndef get_rightangled_angle(a,b):\n    '''\n    Write a function to compute the right angled angle of a and b.\n    '''\n    return (math.acos(get_cross_product(a,b)/(otherside_rightangled_angle(a,b))))\n    \ndef get_rightangled_angle_remaining(a,b):\n    '''\n    Write a function to compute the right angled angle of a and b.\n    '''\n    return (math.acos((otherside_rightangled_angle_remaining(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rightangled_angle_remaining(a,b):\n    '''\n    Write a function to compute the right angled angle of a and b.\n    '''\n    return (math.acos((otherside_rightangled_angle_remaining(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rightangled_angle_lateral(a,b):\n    '''\n    Write a function to compute the right angled angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rightangled_angle_lateral(a,b):\n    '''\n    Write a function to compute the right angled angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos(((get_cross_product(a,b)))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos(((get_cross_product(a,b)))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rotated_angle_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos(((get_cross_product(a,b)))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rightangled_angle_lateral_remaining(a,b):\n    '''\n    Write a function to compute the right angled angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rotated_angle_lateral_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_lateral_remaining(a,b)))\n    \ndef get_rightangled_angle_lateral(a,b):\n    '''\n    Write a function to compute the rightangled angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle_lateral(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle_lateral_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rightangled_angle_sides(a,b):\n    '''\n    Write a function to compute the rightangled angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle_sides(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle_sides_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rotated_angle_sides_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rightangled_angle_perpendicular(a,b):\n    '''\n    Write a function to compute the rightangled angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle_perpendicular(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle(a,b)))\n    \ndef get_rotated_angle_perpendicular_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rotated_angle_perpendicular_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rightangled_angle_perpendicular_lateral(a,b):\n    '''\n    Write a function to compute the rightangled angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rotated_angle_perpendicular_lateral(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    '''\n    return (math.acos((get_cross_product(a,b))/otherside_rightangled_angle_remaining(a,b)))\n    \ndef get_rotated_angle_perpendicular_lateral_remaining(a,b):\n    '''\n    Write a function to compute the rotated angle of a and b.\n    ''"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = 0.0\n    for i in range(w):\n        for j in range(h):\n            area = area + math.sin(math.radians(i + 90)) * math.sin(math.radians(j + 90))\n    return area\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # your code goes here\n    # return second side of a right angle\n    return w/2 + h/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #The side of the triangle.\n    s = h/2\n    #The angle of the triangle.\n    theta = math.radians(90-w/2)\n    #A new width.\n    c = math.cos(theta)\n    #A new height.\n    s_inverse = 1/c\n    #The side of the triangle.\n    s_new = ((s*s_inverse)+w)/2\n    #The angle of the triangle.\n    theta_new = w*c\n    #The angle of the triangle.\n    t_new = (theta_new - theta)\n    #The angle of the triangle.\n    u = math.asin(s_new/math.cos(theta_new))\n    #The angle of the triangle.\n    w_new = (2*u*math.sin(theta) + math.tan(theta))/s_new\n    #Calculate the angle of the triangle.\n    theta_new_2 = w_new*c\n    #The angle of the triangle.\n    t_new_2 = (theta_new_2 - theta)\n    #Return the angle.\n    return theta_new_2\ndef otherside_rightangle_semi(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #The side of the triangle.\n    s = h/2\n    #The angle of the triangle.\n    theta = math.radians(90-w/2)\n    #A new width.\n    c = math.cos(theta)\n    #A new height.\n    s_inverse = 1/c\n    #The side of the triangle.\n    s_new = ((s*s_inverse)+w)/2\n    #The angle of the triangle.\n    theta_new = w*c\n    #The angle of the triangle.\n    t_new = (theta_new - theta)\n    #The angle of the triangle.\n    u = math.asin(s_new/math.cos(theta_new))\n    #The angle of the triangle.\n    w_new = (2*u*math.sin(theta) + math.tan(theta))/s_new\n    #Calculate the angle of the triangle.\n    theta_new_2 = w_new*c\n    #The angle of the triangle.\n    t_new_2 = (theta_new_2 - theta)\n    #Return the angle.\n    return t_new_2\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #The side of the triangle.\n    s = h/2\n    #The angle of the triangle.\n    theta = math.radians(180-w/2)\n    #A new width.\n    c = math.cos(theta)\n    #A new height.\n    s_inverse = 1/c\n    #The side of the triangle.\n    s_new = ((s*s_inverse)+w)/2\n    #The angle of the triangle.\n    theta_new = w*c\n    #The angle of the triangle.\n    t_new = (theta_new - theta)\n    #The angle of the triangle.\n    u = math.asin(s_new/math.cos(theta_new))\n    #The angle of the triangle.\n    w_new = (2*u*math.sin(theta) + math.tan(theta))/s_new\n    #Calculate the angle of the triangle.\n    theta_new_2 = w_new*c\n    #The angle of the triangle.\n    t_new_2 = (theta_new_2 - theta)\n    #Return the angle.\n    return t_new_2\ndef otherside_leftangle_semi(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #The side of the triangle.\n    s = h/2\n    #The angle of the triangle.\n    theta = math.radians(180-w/2)\n    #A new width.\n    c = math.cos(theta)\n    #A new height.\n    s_inverse = 1/c\n    #The side of the triangle.\n    s_new = ((s*s_inverse)+w)/2\n    #The angle of the triangle.\n    theta_new = w*c\n    #The angle of the triangle.\n    t_new = (theta_new - theta)\n    #The angle of the triangle.\n    u = math.asin(s_new/math.cos(theta_new))\n    #The angle of the triangle.\n    w_new = (2*u*math.sin(theta) + math.tan(theta))/s_new\n    #Calculate the angle of the triangle.\n    theta_new_2 = w_new*c\n    #The angle of the triangle.\n    t_new_2 = (theta_new_2 - theta)\n    #Return the angle.\n    return t_new_2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Take the length of the sides of the triangle\n    L = float(input('What is the length of the sides of the triangle? '))\n    # Add the length of the sides to L\n    L = L + L\n    # Find the angle\n    angle = math.acos(L/math.sqrt(L**2 + w**2 + h**2))\n    # Find the aspect ratio\n    a = (w * h) / math.sin(angle)\n    # Convert the aspect ratio to a decimal number\n    a = float(a)\n    # Return the third side\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    p1 = (0,0)\n    p2 = (w,h)\n    s1 = (math.sqrt(w**2 + h**2) * 2) / math.sqrt(2)\n    s2 = (1 / math.sqrt(3)) * (w + h) / 3\n    s3 = (1 / math.sqrt(3)) * (w - h) / 3\n    if s1 == s2 == s3 == 0:\n        print('Triangle with sides:', w, h)\n    else:\n        print('The third side of a right angled triangle is:', s1, s2, s3)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the square root of the height\n    l = h**2 / math.sqrt(w)\n    # if the height is too low, give the user a hint\n    if l < 1:\n        return 1.5\n    # calculate the side length\n    s = 2 * math.sqrt(l)\n    # calculate the angle\n    # angle = pi/2\n    # if the angle is too close to the edge of the triangle\n    # to give the user a hint\n    if (s <= w/2 + 1) or (s >= (w/2) - 1):\n        return 1.5\n    # if the side length is too high\n    # or too small, give the user a hint\n    if s >= h:\n        return 1.5\n    # return the value\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    cos_three = math.sqrt(w * w + h * h)\n    if cos_three == 0:\n        print('That is a right angled triangle!')\n    elif (math.fabs(w / cos_three) < 1.141421356 and math.fabs(h / cos_three) < 1.141421356):\n        print('That is a right angled triangle!')\n    else:\n        print('That is not a right angled triangle!')\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w<h:\n        n=h\n        h=w\n        w=n\n    elif w>h:\n        n=w\n        w=h\n        h=n\n    else:\n        return 'nope'\n    p=(2*(w+h)/3)-1\n    return p\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h/w > 0:\n        d = math.sqrt(w*w - h*h)\n        if d < 1:\n            a = (w + math.sqrt(d))/2\n            b = (w - math.sqrt(d))/2\n            c = 0\n        else:\n            a = math.sqrt(w*w - h*h)\n            b = (w - math.sqrt(d))/2\n            c = math.sqrt(w*w - h*h)\n        return a, b, c\n    else:\n        return math.sqrt(w*w - h*h)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for value in listval:\n        if maximum < value:\n            maximum = value\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    largest = listval[0]\n    for elem in listval:\n        if elem > largest:\n            largest = elem\n    return largest\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=0\n    for val in listval:\n        if val>max:\n            max=val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # A function to return the maximum value of a list\n    def max_val_func(listval):\n        if len(listval) == 0:\n            return 0\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef median(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    return sorted(listval)[len(listval)//2]\n    \ndef test_sort_and_median():\n    '''\n    Write a function that sorts a given list using Python and then prints the median.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, key = median))\n    print(median(list_in))\n    \n    \ndef test_max_median():\n    '''\n    Write a function that returns the maximum element value in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(max_val(list_in))\n    print(max(list_in))\n    \n    \ndef test_max_median_of_two_lists():\n    '''\n    Write a function that returns the maximum element value in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(max_val(list_in))\n    print(max(list_in))\n    \n    \ndef test_sum():\n    '''\n    Write a function that returns the sum of the numbers in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sum(list_in))\n    print(sum(list_in, 2))\n    \n    \ndef test_sum_of_two_lists():\n    '''\n    Write a function that returns the sum of the numbers in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sum(list_in))\n    print(sum(list_in, 2))\n    \n    \ndef test_count():\n    '''\n    Write a function that returns the number of items in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(list_in.count(3))\n    print(list_in.count(3, 2))\n    \n    \ndef test_length():\n    '''\n    Write a function that returns the length of a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(len(list_in))\n    print(len(list_in, 2))\n    \n    \ndef test_length_of_two_lists():\n    '''\n    Write a function that returns the length of a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(len(list_in))\n    print(len(list_in, 2))\n    \n    \ndef test_length_of_three_lists():\n    '''\n    Write a function that returns the length of a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(len(list_in))\n    print(len(list_in, 3))\n    \n    \ndef test_reverse():\n    '''\n    Write a function that reverses a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(list_in)\n    print(list_in[::-1])\n    \n    \ndef test_reverse_all():\n    '''\n    Write a function that reverses a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(list_in)\n    print(list_in[::-1])\n    \n    \ndef test_sort_and_reverse():\n    '''\n    Write a function that sorts a given heterogeneous list using Python and then reverses a given list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, key = lambda x: x))\n    print(sorted(list_in, reverse = True))\n    \n    \ndef test_sort_and_reverse_all():\n    '''\n    Write a function that sorts a given heterogeneous list using Python and then reverses a given list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, key = lambda x: x))\n    print(sorted(list_in, reverse = True))\n    \n    \ndef test_replace_sort_and_reverse():\n    '''\n    Write a function that sorts a given heterogeneous list using Python and then reverses a given list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, key = lambda x: x, reverse = True))\n    print(sorted(list_in, reverse = True))\n    \n    \ndef test_remove_last():\n    '''\n    Write a function that removes the last item in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop()\n    print(list_in)\n    \n    \ndef test_remove_last_all():\n    '''\n    Write a function that removes the last item in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop(4)\n    print(list_in)\n    \n    \ndef test_remove_all():\n    '''\n    Write a function that removes all items in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop(3)\n    print(list_in)\n    \n    \ndef test_remove_all_all():\n    '''\n    Write a function that removes all items in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop(2)\n    print(list_in)\n    \n    \ndef test_remove_first():\n    '''\n    Write a function that removes the first item in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop(0)\n    print(list_in)\n    \n    \ndef test_remove_first_all():\n    '''\n    Write a function that removes the first item in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop(0)\n    print(list_in)\n    \n    \ndef test_remove_second():\n    '''\n    Write a function that removes the second item in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop(2)\n    print(list_in)\n    \n    \ndef test_remove_second_all():\n    '''\n    Write a function that removes the second item in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True))\n    list_in.pop(2)\n    print(list_in)\n    \n    \ndef test_remove_third():\n    '''\n    Write a function that removes the third item in a given heterogeneous list.\n    '''\n    list_in = [1, 2, 3, 3, 2, 1]\n    print(sorted(list_in, reverse = True)"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    l = len(listval)\n    l1 = []\n    for i in range(l):\n        for j in range(l):\n            if j < i:\n                l1.append(listval[j])\n    for i in range(l-1):\n        for j in range(l-1):\n            if j >= i:\n                if listval[i] < listval[j]:\n                    l1.append(listval[j])\n    return max(l1)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in range(len(listval)):\n        val = listval[i]\n        if val > max_val:\n            max_val = val\n    return max_val\n    \ndef find_max(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Write your code here.\n    val = listval[0]\n    for i in listval:\n        if i > val:\n            val = i\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def sum_div(number):\n        count = 0\n        for i in range(1, number + 1):\n            if number % i == 0:\n                count += 1\n        return count\n        #return sum(range(1, number + 1))\n    return sum_div(number)\n    #return sum(range(1, number + 1))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for divisor in range(1, int(number**0.5)+1):\n        if number % divisor == 0:\n            divisors.append(divisor)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = []\n    for i in range(1,number+1):\n        if number % i == 0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1,number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    from math import sqrt\n    # return int(number / sqrt(number) * sqrt(number))\n    s = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # define a function to find all divisors\n    def divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    \n    # define the function to return the sum of all divisors\n    def sum_div_2(number):\n        # divide the number by each divisor\n        if number > 1:\n            return sum(divisors(number))\n        else:\n            return 1\n    \n    # return the sum of all divisors\n    return sum_div_2(number"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number < 2:\n        return number\n    \n    elif number % 2 == 0:\n        return sum_div(number-1)\n    \n    else:\n        return number + sum_div(number-2)\n    \nsum_div(1)"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # we'll use a helper function and built in math module\n    def divisors(x):\n        if x == 0:\n            return 0\n        else:\n            for i in range(1,x):\n                if x % i == 0:\n                    yield i\n            yield x\n    # we'll take a number and return the sum of all divisors\n    return sum(divisors(i) for i in range(1,number+1))\n    # function to return sum of all divisors of a number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i + 1]:\n            inv += 1\n    return inv \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # code here\n    x = 1\n    inv = 0\n    while(x < len(arr)):\n        if(arr[x] < arr[x-1]):\n            x = x + 1\n        else:\n            inv = inv + 1\n            x = x + 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv=[]\n    for i in arr:\n        if i not in inv:\n            inv.append(i)\n    inv.sort()\n    print(inv)\n    return len(inv)\n    #Runtime: 28 ms, faster than 90.88% of Python online submissions for Count Inversions in an Array.\n    #Memory Usage: 14.2 MB, less than 62.73% of Python online submissions for Count Inversions in an Array.\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            inv_count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    # loop through all the array elements\n    for i in range(len(arr)): \n        # check if current value is greater than its neighbors\n        if arr[i] > arr[i+1]: \n            # If yes increment count \n            inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            inversion += 1\n    return inversion\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # your code goes here\n    n=len(arr)\n    low=0\n    high=n-1\n    while low<=high:\n        mid=low+ (high-low) // 2\n        if arr[mid]<arr[mid+1]:\n            low=mid+1\n        else:\n            high=mid-1\n    return low+1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr == None or len(arr) == 0: \n        return 0\n    inv_count = 0\n    if len(arr) == 1: \n        return 0\n    else: \n        for i in range(len(arr)): \n            for j in range(i, len(arr)): \n                if arr[i] > arr[j]: \n                    arr[i], arr[j] = arr[j], arr[i] \n                    inv_count += 1\n        return inv_count\n        "
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    sorted_list = []\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            count += 1\n            sorted_list.append(arr[i])\n    for i in range(len(arr)):\n        if arr[i]!= sorted_list[i]:\n            count += 1\n            sorted_list.pop(i)\n    print(count)\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # TODO: modify this to work with different kinds of inputs\n    #       how they work\n    # Example:\n    # nested_list = [{'first': {'a': ['a1', 'a2']}}, {'second': [{'b': 'b2'}]}, {'third': {'c': 'c3'}}]\n    # print(nested_list)\n    # nested_list = [{'first': {'a': ['a1', 'a2']}}, {'second': [{'b': 'b2'}]}, {'third': {'c': 'c3'}}]\n    # flattened_list = flatten_list(nested_list)\n    # print(flattened_list)\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    # for i in list1:\n    #     if type(i) is list:\n    #         flatten_list += flatten_list(i)\n    #     else:\n    #         flattened_list.append(i)\n    flattened_list = flatten(list1)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Write your code here. Make sure to update this to return different output\n    if type(list1) == list:\n        result = []\n        for item in list1:\n            if type(item) == list:\n                result = result + flatten_list(item)\n            else:\n                result.append(item)\n        return result\n    else:\n        return [list1]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for sublist in list1:\n        if type(sublist) is list:\n            result.extend(flatten_list(sublist))\n        else:\n            result.append(sublist)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    i = 0\n    out = []\n    while i < len(list1):\n        out.append(list1[i])\n        i += 1\n    return out\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for i in list1:\n        if isinstance(i, list):\n            res.extend(flatten_list(i))\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for element in list1:\n        if type(element) is list:\n            flattened = flattened + flatten_list(element)\n        else:\n            flattened.append(element)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None:\n        return []\n    if type(list1) is not list:\n        raise TypeError('TypeError: The given argument must be a list')\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in list1:\n        if type(i) == list:\n            flatten_list(i)\n        elif type(i) == int:\n            list1.append(i)\n        elif type(i) == dict:\n            flatten_list(i['list'])\n        else:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # find the minimum aggregate\n    min_aggregate = float('inf')\n    aggregate = defaultdict(list)\n    for tuple in stdata:\n        aggregate[tuple[0]].append(tuple[1])\n        aggregate[tuple[1]].append(tuple[0])\n        if min_aggregate < tuple[1]:\n            min_aggregate = tuple[1]\n    return min_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    unique_bids = defaultdict(list)\n    max_aggregate = 0\n    \n    for bid in stdata:\n        # Get rid of duplicate bids\n        if bid in unique_bids:\n            unique_bids[bid].append(bid)\n        else:\n            unique_bids[bid] = [bid]\n    \n    for key, value in unique_bids.items():\n        # Find all bids with the same bidder in the list\n        for i in range(len(value)):\n            bidder = stdata[i][0]\n            if bidder == key:\n                # Count up how many times that bidder has been on the list\n                num_on_list = value[i].count(bidder) + 1\n                # Add up to the number of times the bidder has been on that list\n                max_aggregate += num_on_list\n    \n    return max_aggregate\n    \ndef get_max_list_of_bids(stdata):\n    '''\n    Write a function to return a list of tuples containing the unique bid and the bid's count in the list.\n    '''\n    max_list = []\n    \n    for bid in stdata:\n        # Get rid of duplicate bids\n        if bid in max_list:\n            max_list.append(max_list[bid])\n        else:\n            max_list.append([bid, stdata[bid].count(bid)])\n    \n    return max_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = -1\n    for x in stdata:\n        if max_value < x[0]:\n            max_value = x[0]\n    return max_value\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += len(t)\n    return cnt\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += len(t)\n    return cnt\ndef max_aggregate_prime(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += max(t)\n    return cnt\ndef min_aggregate_prime(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += min(t)\n    return cnt\ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    sum=0\n    cnt=0\n    for t in stdata:\n        cnt+=len(t)\n        sum+=len(t)\n    return (sum/cnt)\ndef min_aggregate_prime_prime(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += max(t)\n    return cnt\ndef max_aggregate_prime_prime(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += min(t)\n    return cnt\ndef std_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += (t[0]-t[1])**2\n    return math.sqrt(cnt/len(stdata))\ndef var_aggregate(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += (t[0]-t[1])**2\n    return math.sqrt(cnt/len(stdata))\ndef std_aggregate_prime(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += (t[0]-t[1])**2\n    return math.sqrt(cnt/len(stdata))\ndef var_aggregate_prime(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    cnt=0\n    for t in stdata:\n        cnt += (t[0]-t[1])**2\n    return math.sqrt(cnt/len(stdata))\ndef cnt(t):\n    return t[0]+t[1]\ndef fmean(a,b,c):\n    '''\n    Write a function to calculate the average of the numbers in a, b, c.\n    '''\n    return (a+b+c)/3\ndef fmean2(a,b):\n    '''\n    Write a function to calculate the average of the numbers in a, b.\n    '''\n    return (a+b)/2\ndef hmean(a,b,c):\n    '''\n    Write a function to calculate the harmonic mean of a, b, c.\n    '''\n    return (1+(b**2)/(4*a**2))\ndef hmean2(a,b):\n    '''\n    Write a function to calculate the harmonic mean of a, b.\n    '''\n    return (1+(b**2)/(4*a**2))**0.5\ndef hmean3(a,b):\n    '''\n    Write a function to calculate the harmonic mean of a, b.\n    '''\n    return (1+(b**2)/(4*a**2))**0.3333333333333333\ndef mean_dev(a,b,c,d,e):\n    '''\n    Write a function to calculate the mean deviation of two numbers\n    '''\n    return (a+b+c+d+e)/6\ndef sdev(a,b,c,d,e):\n    '''\n    Write a function to calculate the standard deviation of two numbers\n    '''\n    return math.sqrt(mean_dev(a,b,c,d,e))\ndef dev(a,b,c,d,e):\n    '''\n    Write a function to calculate the standard deviation of two numbers\n    '''\n    return math.sqrt(sdev(a,b,c,d,e))\ndef logdev(a,b,c,d,e):\n    '''\n    Write a function to calculate the logarithm of the standard deviation of two numbers\n    '''\n    return math.log10(sdev(a,b,c,d,e))\ndef logdev2(a,b):\n    '''\n    Write a function to calculate the logarithm of the standard deviation of two numbers\n    '''\n    return math.log10(sdev(a,b,b,a,b))\ndef logdev3(a,b,c):\n    '''\n    Write a function to calculate the logarithm of the standard deviation of two numbers\n    '''\n    return math.log10(sdev(a,b,c,b,a))\ndef mean(a,b,c,d,e):\n    '''\n    Write a function to calculate the mean of two numbers\n    '''\n    return (a+b+c+d+e)/6\ndef mean2(a,b):\n    '''\n    Write a function to calculate the mean of two numbers\n    '''\n    return (a+b)/2\ndef std(a,b,c,d,e):\n    '''\n    Write a function to calculate the standard deviation of two numbers\n    '''\n    return math.sqrt(mean2(a,b)**2+(e-mean2(a,b))**2)\ndef stdev(a,b,c,d,e):\n    '''\n    Write a function to calculate the standard deviation of two numbers\n    '''\n    return math.sqrt(std(a,b,c,d,e))\ndef var(a,b,c,d,e):\n    '''\n    Write a function to calculate the variance of two numbers\n    '''\n    return (mean(a,b,c,d,e)-mean(a,b,c,d))/(math.sqrt(mean2(a,b)**2+(e-mean2(a,b))**2))\ndef var2(a,b):\n    '''\n    Write a function to calculate the variance of two numbers\n    '''\n    return math.sqrt((mean2(a,b)-mean2(a,b))**2+(e-mean2(a,b))**2)\ndef cov_var(a,b):\n    '''\n    Write a function to calculate the covariance of two numbers\n    '''\n    return math.sqrt((var2(a,b)-var(a,b))**2+(var2(a,b)-var(a,b))**2)\ndef cov_std(a,b):\n    '''\n    Write a function to calculate the covariance of two numbers\n    '''\n    return math.sqrt((std(a,b)-std(a,b))**2+(std(a,b)-std(a,b))**2)\ndef cov_std2(a,b):\n    '''\n    Write a function to calculate the covariance of two numbers\n    '''\n    return math.sqrt((std(a,b)-std(a,b))**2+(std(a,b)-std(a,b))**2)\ndef cov_var_std(a,b):\n    '''\n    Write a function to calculate the covariance of two numbers\n    '''\n    return math.sqrt((var2(a,b)"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the list of aggregate to zero\n    aggregate = []\n    # Loop through the data and add the results together\n    for x in stdata:\n        aggregate.append(x[1] + x[2])\n    # Return the max aggregate\n    return max(aggregate)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in stdata:\n        max_agg = max(i[0], max_agg)\n        max_agg = max(i[1], max_agg)\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print(\"===== Starting the maximum aggregation =====\")\n    max_aggregate_list = []\n    max_aggregate_list_ind = []\n    max_aggregate_list_agg = []\n    # print(stdata)\n    for i in range(0, len(stdata), 2):\n        for j in range(0, len(stdata[i]), 2):\n            # print(\"i: \", i, \" j: \", j)\n            # print(\"sdata[i][j] is: \", stdata[i][j])\n            # print(\"sdata[i][j] + sdata[i][j + 1] is: \", stdata[i][j] + stdata[i][j + 1])\n            max_aggregate_list.append((stdata[i][j], stdata[i][j] + stdata[i][j + 1]))\n    for i in range(0, len(max_aggregate_list), 2):\n        # print(\"i: \", i, \" max_aggregate_list[i] is: \", max_aggregate_list[i])\n        # print(\"max_aggregate_list[i] + max_aggregate_list[i + 1] is: \", max_aggregate_list[i] + max_aggregate_list[i + 1])\n        max_aggregate_list_agg.append((max_aggregate_list[i][0], max_aggregate_list[i][1] + max_aggregate_list[i + 1][0]))\n    return max_aggregate_list_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # write your code here\n    if len(stdata) == 0:\n        return 0\n    stdata = sorted(stdata, key=lambda x: x[1], reverse=True)\n    return stdata[0][1]\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    # write your code here\n    if len(stdata) == 0:\n        return 0\n    stdata = sorted(stdata, key=lambda x: x[1], reverse=True)\n    return stdata[0][1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(n):\n        b1 = bin(i)[2:]\n        b2 = bin(i+1)[2:]\n        if len(b1)!= len(b2):\n            return 0\n        else:\n            if b1 == b2:\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # O(n) time | O(n) space\n    def count_binary_seq_helper(n, p):\n        if n == 0:\n            return 1\n        \n        res = 0\n        for i in range(n):\n            res += p[i]\n            \n            if res > (1 << n):\n                return 0\n        \n        return 1 + count_binary_seq_helper(n - 1, p)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # use modulo \n    count = 0\n    \n    # binary array\n    binary = [0,1]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    mask = 1 << n\n    count = 0\n    for i in range(n):\n        if i & mask == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    arr = [0]*2*n\n    total = 1\n    for i in range(2*n-1):\n        total = total*2+arr[i]\n        arr[i] = total\n    return arr\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n_ = int(n)\n    count_1 = n_//2\n    count_0 = (n_ - 2*count_1 +1 )//2\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(n):\n        cnt += (1 << i)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = n%8\n    if (n<=1): return 0\n    if (n%2==0): return 1\n    s = bin(n)[2:]\n    l = int(s[0])\n    r = int(s[1])\n    count = 0\n    while (l<r):\n        mid = (l+r)//2\n        if (n<mid): r = mid-1\n        elif (n>mid): l = mid+1\n        else:\n            count += 1\n            l = mid+1\n            r = mid-1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize count_seq\n    count_seq = [0 for i in range(n)]\n    count_seq[0] = 1\n    count_seq[n] = 1\n    \n    for i in range(1, n):\n        count_seq[i] = (count_seq[i-1] + count_seq[i-2] * 2) % (10**9 + 7)\n        count_seq[n-i] = (count_seq[n-i-1] + count_seq[n-i-2] * 2) % (10**9 + 7)\n        \n    return count_seq\n    \ndef find_pow(n): \n    '''\n    Write a function to find the power of a number n, using the recursive formula \n    to calculate the number of terms in n.\n    '''\n    \n    # Base case of n = 1\n    if n == 1: \n        return 1\n    \n    # Base case of n = 0 \n    if n == 0: \n        return 0\n    \n    # Base case of n = 2n\n    if n == 2 * n: \n        return 2\n    \n    # Initialize total_pow\n    total_pow = 0\n    \n    # Recur for n = 1 to 2\n    for i in range(1, 3):\n        total_pow = total_pow + find_pow(n-i)\n        \n    # Recur for n = 2 to 2n\n    for i in range(2, n+1):\n        total_pow = total_pow + (2 * find_pow(i-1) * (2 ** i))\n        \n    # Return the result\n    return total_pow % (10**9 + 7)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d:\n        return len(d.keys()) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    left = 0\n    right = d.__len__() - 1\n    while left < right:\n        mid = (left + right) // 2\n        if d[mid] > d[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return left + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d: return 0\n    elif len(d) == 1: return 1\n    else: return dict_depth(d[1:]) + 1 + dict_depth(d[1:])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for k in d:\n        if isinstance(d[k], dict):\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([len(i) for i in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while d:\n        depth += 1\n        d = d.get()\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if not d:\n        return 0\n    if type(d) == type({}):\n        depth = 1 + dict_depth(d.keys())\n        for k in d.keys():\n            depth += dict_depth(d[k])\n    elif type(d) == type([]):\n        depth = 1 + len(d)\n        for i in range(len(d)):\n            depth += dict_depth(d[i])\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d,curr = None):\n        if not curr:\n            curr = d\n        for k,v in d.items():\n            curr[k] = depth(v,curr)\n        return curr\n    return depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return 1 + dict_depth(d.keys())\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) > 0:\n        depth = 1\n        for key in d:\n            if isinstance(d[key], dict):\n                depth += dict_depth(d[key])\n            else:\n                depth += 1\n        return depth\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        for k in range(ranges[1]):\n            if i==0 :\n                if arr[k][index] == 0:\n                    return k\n            else :\n                if arr[k][index] == 0:\n                    return k\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #The range of elements need to be defined \n    #Replace the value of range(0, 1000)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) - 1)\n    for i in range(len(arr)-1):\n        #print(range(i,len(arr)-1))\n        #print(range(i,len(arr)-1))\n        if ranges[i] <= ranges[i+1] :\n            break\n    #Now the range need to be defined\n    #Replace the value of range(0, len(arr) "
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if r!= [] : \n        for i in range(len(r)) :\n            if r[i][0] >= index and r[i][1] <= index :\n                break\n        \n        if r[i][1] >= index :\n            rotations = r[i][0]\n        else :\n            rotations = r[i][1]\n    \n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index <= ranges[i][1] :\n            index = ranges[i][1]\n            break\n        \n    return rotations\n    \ndef find_Index(arr,index) : \n    '''\n    Write a python function to find an index given an array and the index.\n    '''\n    \n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr)==0:\n        return -1\n    \n    for i in range(0,len(arr)):\n        if(arr[i][0]==ranges[index][0] and arr[i][1]==ranges[index][1]):\n            return arr[i][2]\n    \n    if(rotations==0):\n        return arr[0][2]\n    elif(rotations==1):\n        return arr[-1][2]\n    \n    rotations+=1\n    \n    for i in range(0,len(arr)):\n        if(arr[i][0]==ranges[index][0] and arr[i][1]==ranges[index][1]):\n            return arr[i][2]\n    \n    return find_Element(arr,ranges,rotations,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(len(ranges)==0) :\n        return arr[index]\n    if(index>=len(arr)) :\n        return -1\n    if(rotations==0) :\n        return find_Element(arr,ranges,1,index+1)\n    else :\n        middle = int((index+index)/2)\n        if(arr[middle]==index):\n            return find_Element(arr,ranges,rotations-1,middle)\n        elif(arr[middle]>index):\n            return find_Element(arr,ranges,rotations,index)\n        else:\n            return find_Element(arr,ranges,rotations,middle)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try :\n        temp=arr[index]\n        temp_index=index-rotations\n        for i in range(rotations) :\n            arr[temp_index] = arr[temp_index+1]\n            temp_index += 1\n        arr[temp_index] = temp\n    except :\n        print(\"Index out of range.\")\n        return -1\n    return temp\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr)<=ranges[0] or ranges[1]<=len(arr)<=ranges[1]+1 :\n        return 0\n    if rotations == 0 :\n        return arr[index]\n    for i in range(len(arr)) :\n        if index>=len(arr) and i in range(ranges[0],ranges[1]) :\n            return arr[i]\n        if ranges[1]+1>index and i==ranges[0] and arr[index]<arr[i] :\n            return arr[index]\n        if i in range(ranges[0],ranges[1]) and ranges[1]+1>index and arr[i]<arr[index] :\n            return arr[i]\n        if i>=ranges[0] and i<ranges[1] and arr[index]==arr[i] :\n            return arr[index]\n    return 0\n    \ndef solution(array, commands):\n    answer = []\n    arr=[]\n    for command in commands:\n        if command[0]==1 :\n            for i in range(1,len(array)):\n                if i+command[1]>=len(array) and array[i-1]<array[i]:\n                    arr.append(find_Element(array,(i,i+command[1]-1),command[2],i))\n                if i+command[1]>=len(array) and array[i-1]>array[i]:\n                    arr.append(find_Element(array,(i,i+command[1]-1),command[2],i))\n        else :\n            for i in range(1,len(array)):\n                if i+command[1]>=len(array) and array[i-1]<array[i]:\n                    arr.append(find_Element(array,(i,i+command[1]-1),command[2],i))\n                if i+command[1]>=len(array) and array[i-1]>array[i]:\n                    arr.append(find_Element(array,(i,i+command[1]-1),command[2],i))\n        answer.append(len(arr))\n    return answer\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if r.find_index(index) < len(arr) and r.rotation(arr,ranges,rotations,index) :\n        return arr[r.find_index(index)]\n    else :\n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) < 2 :\n        return arr[index]\n    for i in range(len(ranges)-1, -1, -1) :\n        if ranges[i] <= arr[index] < ranges[i+1] :\n            return find_Element(arr,ranges,rotations,index)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # code goes here\n    \n    if ranges[0] == 0 :\n        return arr[index]\n    \n    if ranges[0] == 1 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 2 :\n        index = index - 1\n        return arr[index]\n        \n    if ranges[0] == 3 :\n        index = index - 1\n        return arr[index]\n        \n    if ranges[0] == 4 :\n        index = index - 1\n        return arr[index]\n        \n    if ranges[0] == 5 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 6 :\n        index = index - 1\n        return arr[index]\n        \n    if ranges[0] == 7 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 8 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 9 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 10 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 11 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 12 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 13 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 14 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 15 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 16 :\n        index = index - 1\n        return arr[index]\n        \n    if ranges[0] == 17 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 18 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 19 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 20 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 21 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 22 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 23 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 24 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 25 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 26 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 27 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 28 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 29 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 30 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 31 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 32 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 33 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 34 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 35 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 36 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 37 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 38 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 39 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 40 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 41 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 42 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 43 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 44 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 45 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 46 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 47 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 48 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 49 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 50 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 51 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 52 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 53 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 54 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 55 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 56 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 57 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 58 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 59 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 60 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 61 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 62 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 63 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 64 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 65 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 66 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 67 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 68 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 69 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 70 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 71 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 72 :\n        index = index - 1\n        return arr[index]\n    \n    if ranges[0] == 73 :\n        index = index - 1\n        return arr[index]\n    \n    i"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word[0:3] == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    return [word[:len(pattern)] for word in words if word.startswith(pattern)]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = 'p'\n    words.sort()\n    for word in words:\n        if word[0]!= p:\n            return word\n    else:\n        return words[-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if not words:\n        return False\n    if len(words) == 1:\n        return words[0]\n    return words[0] + \"p\" + start_withp(words[1:])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[:1] == 'p':\n            return word, word[1:]\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^[A-Z]\\w*p')\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return (words[i], 'p')\n    return (words[i], 'i')\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef middle_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:-1] for word in words if word[0] == 'p']\ndef end_withp2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[-1] == 'p']\ndef middle_withp2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[-1] == 'p']\ndef start_withp3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[-1] == 'p']\ndef start_withp4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[-1] == 'p']\ndef start_withp5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:-1] for word in words if word[0] == 'p']\ndef start_withp6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef start_withp7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:-1] for word in words if word[0] == 'p']\ndef start_withp8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:-1] for word in words if word[0] == 'p']\ndef start_withp9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:-1] for word in words if word[0] == 'p']\ndef start_withp10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:-1] for word in words if word[0] == 'p']\ndef start_withp11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:-1] for word in words if word[0] == 'p']\ndef start_withp12(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[:-1] for word in words if word[0] == 'p']\ndef end_withp12(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word[1:] for word in words if word[0] == 'p']\ndef middle_withp12(words)"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word = words[0]\n    for i in range(1,len(words)):\n        if words[i] == 'p':\n            return word + words[i-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i] == 'p':\n            return words[:i], words[i+1:]\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_str = ''\n    for i in range(0, len(words)):\n        if words[i] == 'p':\n            p_str = p_str + words[i]\n    return p_str\n    \ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_str = ''\n    for i in range(0, len(words)):\n        if words[i] == 'p':\n            p_str = p_str + words[i]\n    p_str = p_str + words[len(words)-1]\n    return p_str\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if k < 0:\n        return -1\n    if index == n:\n        return a[index]\n    \n    if k == 0:\n        return a[index]\n    \n    val = a[index]\n    i = index\n    for j in range(i+1, n):\n        if a[j] < val:\n            val = a[j]\n            i = j\n    # print(f'i: {i}')\n    # print(f'j: {j}')\n    # print(f'val: {val}')\n    # print(f'i+1: {i+1}')\n    # print(f'j+1: {j+1}')\n    return val+max_sum_increasing_subseq(a, n, i+1, k-1)\n    # return val+max_sum_increasing_subseq(a, n, i, k)\n    \n    \n    \n    \ndef max_sum_decreasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is before i, i.e., k > i.\n    '''\n    if index >= n:\n        return 0\n    if k < 0:\n        return -1\n    if index == n:\n        return a[index]\n    \n    if k == 0:\n        return a[index]\n    \n    val = a[index]\n    i = index\n    for j in range(index+1, n):\n        if a[j] > val:\n            val = a[j]\n            i = j\n    # print(f'i: {i}')\n    # print(f'j: {j}')\n    # print(f'val: {val}')\n    # print(f'i+1: {i+1}')\n    # print(f'j+1: {j+1}')\n    return val+max_sum_decreasing_subseq(a, n, i+1, k)\n    # return val+max_sum_decreasing_subseq(a, n, i, k)\n    \n    \n    \ndef max_sum_increasing_subseq_dp(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is before i, i.e., k > i.\n    '''\n    if index >= n:\n        return 0\n    if k < 0:\n        return -1\n    if index == n:\n        return a[index]\n    \n    if k == 0:\n        return a[index]\n    \n    val = a[index]\n    i = index\n    for j in range(index+1, n):\n        if a[j] < val:\n            val = a[j]\n            i = j\n    # print(f'i: {i}')\n    # print(f'j: {j}')\n    # print(f'val: {val}')\n    # print(f'i+1: {i+1}')\n    # print(f'j+1: {j+1}')\n    return val+max_sum_increasing_subseq_dp(a, n, i+1, k)\n    # return val+max_sum_increasing_subseq_dp(a, n, i, k)\n    \n    \n    \ndef max_sum_decreasing_subseq_dp(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is before i, i.e., k > i.\n    '''\n    if index >= n:\n        return 0\n    if k < 0:\n        return -1\n    if index == n:\n        return a[index]\n    \n    if k == 0:\n        return a[index]\n    \n    val = a[index]\n    i = index\n    for j in range(index+1, n):\n        if a[j] < val:\n            val = a[j]\n            i = j\n    # print(f'i: {i}')\n    # print(f'j: {j}')\n    # print(f'val: {val}')\n    # print(f'i+1: {i+1}')\n    # print(f'j+1: {j+1}')\n    return val+max_sum_decreasing_subseq_dp(a, n, i+1, k)\n    # return val+max_sum_decreasing_subseq_dp(a, n, i, k)\n    \n    \n    \ndef min_consecutive_subsequence(a, n, index, k):\n    '''\n    Write a function to find the minimum consecutive subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index >= n:\n        return 0\n    if k < 0:\n        return -1\n    if index == n:\n        return a[index]\n    \n    if k == 0:\n        return a[index]\n    \n    val = a[index]\n    i = index\n    for j in range(index+1, n):\n        if a[j] > val:\n            val = a[j]\n            i = j\n    # print(f'i: {i}')\n    # print(f'j: {j}')\n    # print(f'val: {val}')\n    # print(f'i+1: {i+1}')\n    # print(f'j+1: {j+1}')\n    return val+min_consecutive_subsequence(a, n, i+1, k)\n    # return val+min_consecutive_subsequence(a, n, i, k)\n    \n    \n    \ndef min_consecutive_subsequence_dp(a, n, index, k):\n    '''\n    Write a function to find the minimum consecutive subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index >= n:\n        return 0\n    if k < 0:\n        return -1\n    if index == n:\n        return a[index]\n    \n    if k == 0:\n        return a[index]\n    \n    val = a[index]\n    i = index\n    for j in range(index+1, n):\n        if a[j] > val:\n            val = a[j]\n            i = j\n    # print(f'i: {i}')\n    # print(f'j: {j}')\n    # print(f'val: {val}')\n    # print(f'i+1: {i+1}')\n    # print(f'j+1: {j+1}')\n    return val+min_consecutive_subsequence_dp(a, n, i+1, k)\n    # return val+min_consecutive_subsequence_dp(a, n, i, k)\n    \n    \n    \ndef max_sum_increasing_subseq_dp(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is before i, i.e., k > i.\n    '''\n    if index >= n:\n        return 0\n    if k < 0:\n        return -1\n    if index == n:\n        return a[index]\n    \n    if k == 0:\n        return a[index]\n    \n    val = a[index]\n    i = index\n    for j in range(index+1, n):\n        if a[j] < val:\n            val = a[j]\n            i = j\n    # print(f'i: {i}')\n    # print(f'j: {j}')\n    # print(f'val: {val}')\n    # print(f'i+1: {i+1}')"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    max_sum = 0\n    while i < n:\n        max_sum += a[i]\n        if max_sum > k:\n            break\n        i += 1\n    return i, max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base Cases\n    if index == n:\n        return a[k]\n    if k == index:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1))\n    \n    # Recursion\n    return max_sum_increasing_subseq(a, n, index + 1, k) + max_sum_increasing_subseq(a, n, index, k + 1)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n:\n        max_sum = 0\n        for i in range(index, n):\n            if a[i] < a[i - 1] + k:\n                a[i], a[i - 1] = a[i - 1], a[i]\n                max_sum += a[i]\n                index = i + 1\n                break\n        \n        max_sum += a[n - 1]\n        return max_sum\n    return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n    if k == 0:\n        return a[0]\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index], a[k])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    for i in range(index, n):\n        for j in range(i + 1):\n            if k == 0:\n                if a[j] > a[i] + a[j]:\n                    break\n                continue\n            if a[j] > a[i] + a[j] and k > j:\n                k -= j\n                break\n            if a[j] < a[i] + a[j]:\n                break\n        if k == 0:\n            break\n        max_sum += a[j]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    a[index] = 0\n    sum = 0\n    for i in range(index, n):\n        if a[i] < 0:\n            sum += a[i]\n            continue\n        if a[i] >= 0:\n            sum += a[i]\n        if i + 1 < n and a[i] < 0 and sum > k:\n            sum += a[i]\n    return sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] < k: return -1\n    \n    if index == n - 1:\n        return max(a[index], a[index - k + 1] + k)\n    \n    # Start from all elements except the one at index i. \n    # i.e., a[i + 1] <= k < a[i].\n    # At each iteration, keep comparing the elements of subarray from i to i + k.\n    # Once all the elements in subarray are increasing, update max sum. \n    # If k is not passed, return the maximum sum.\n    \n    return max(\n        max_sum_increasing_subseq(\n            a, \n            n, \n            index + 1, \n            k\n        ),\n        max(\n            a[index] + k, \n            max_sum_increasing_subseq(\n                a, \n                n, \n                index + 1, \n                k - a[index]\n            )\n        )\n    )\n    \n    # Your code here\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return a[0]\n    else:\n        if index == n:\n            return max(a[index] + min_max_sum_increasing_subseq(a, n-1, index, k), \n                a[index] + min_max_sum_increasing_subseq(a, n-1, index-k, k))\n        elif index == 0:\n            return a[index]\n        else:\n            return max(a[index] + min_max_sum_increasing_subseq(a, n-1, index-1, k), \n                a[index] + min_max_sum_increasing_subseq(a, n-1, index-k-1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    left, right = 0, 1\n    \n    # recursive\n    # return max(\n    #     max_sum_increasing_subseq(a, n, left, index + 1, k),\n    #     max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    # )\n    \n    # b = [i for i in range(n)]\n    # b.remove(index)\n    \n    # return max(\n    #     max_sum_increasing_subseq(a, n, index + 1, k),\n    #     max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    # )\n    \n    if right >= n:\n        return a[index]\n    \n    # if there is a value in the subsequence\n    if a[index] >= 0:\n        return a[index]\n    \n    # else\n    # return the max of its left and right subsequences\n    return max(\n        max_sum_increasing_subseq(a, n, index + 1, k),\n        max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    )\n    "
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = []\n    if len(tuplex)!= m*n:\n        return None\n    for i in range(0,m):\n        temp = []\n        for j in range(0,n):\n            temp.append(tuplex[i][j])\n        colon_tuplex.append(temp)\n    return colon_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col_tuplex = []\n    while m!= n:\n        col_tuplex.append(tuplex[m])\n        m += 1\n    return col_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    return m*n+n+m+2*m+n*n\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    assert isinstance(tuplex, tuple) and len(tuplex) == 2, \"Tupllex should be 2 elements\"\n    assert tuplex[0] < m and tuplex[1] < n and tuplex[0] > 0 and tuplex[1] > 0, \"Coordinates should be 0<x<m and 0<y<n\"\n    if m == n:\n        return tuplex\n    return (tuplex[0],tuplex[1])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = ()\n    for i in range(m-1):\n        result = result + tuplex[n][i]\n    result = result + tuplex[n][m-1]\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m = m\n    n = n\n    res = []\n    for i in range(n):\n        res.append(tuplex[i])\n    res.reverse()\n    for i in range(m):\n        res.insert(0,tuplex[i])\n    return tuple(res)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst=[]\n    for i in range(len(tuplex)):\n        if m in tuplex[i]:\n            lst.append(n)\n        elif n in tuplex[i]:\n            lst.append(m)\n    return lst\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        return tuplex\n    else:\n        return colon_tuplex(tuplex[1:],m,n)\n    \ndef cat_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a cat of a tuple.\n    '''\n    if len(tuplex) == 1:\n        return tuplex\n    else:\n        return cat_tuplex(tuplex[1:],m,n)\n    \ndef add_tuple(tuplex,x):\n    '''\n    Write a function to add a tuple.\n    '''\n    if x in tuplex:\n        return tuplex\n    else:\n        return add_tuple(tuplex[1:],x)\n    \ndef add_tuple_full(tuplex,x):\n    '''\n    Write a function to add a tuple.\n    '''\n    if x in tuplex:\n        return tuplex\n    else:\n        return add_tuple_full(tuplex[1:],x)\n    \ndef copy_tuplex(tuplex):\n    '''\n    Write a function to copy a tuple.\n    '''\n    return deepcopy(tuplex)\n    \ndef deepcopy_tuplex(tuplex):\n    '''\n    Write a function to copy a tuple.\n    '''\n    return deepcopy(tuplex)\n    \ndef str_tuplex(tuplex):\n    '''\n    Write a function to return a string.\n    '''\n    return ''.join(str(i) for i in tuplex)\n    \ndef is_subset(x,y):\n    '''\n    Write a function to test if an item is a subset of another.\n    '''\n    if x in y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = len(tuplex)\n    col = len(tuplex[0])\n    return m + n*(col-1),(row-1)*n\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #returns the tuple given by m,n\n    return tuplex[m][n]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find number of factors in list 1\n    factors1 = N//len(nums1)\n    N = N - (N//len(nums1))*factors1\n    \n    # find number of factors in list 2\n    factors2 = N//len(nums2)\n    N = N - (N//len(nums2))*factors2\n    \n    # find product of list1 and list2\n    prod1 = sum(nums1[0:factors1])\n    prod2 = sum(nums2[0:factors2])\n    \n    return prod1 * prod2"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #get the biggest of the two lists\n    biggest = max(nums1, nums2)\n    biggest_ind = nums1.index(biggest)\n    #get the factors of nums1\n    factors1 = [1] + [x for x in nums1 if x!= biggest]\n    #get the factors of nums2\n    factors2 = [1] + [x for x in nums2 if x!= biggest]\n    #get the number of factors\n    factors = []\n    for i in range(len(factors1)):\n        for j in range(len(factors2)):\n            if factors1[i] % factors2[j] == 0:\n                factors.append([factors1[i], factors2[j]])\n    #sort the factors list\n    factors = sorted(factors, key=lambda x: x[0])\n    #get the products\n    result = []\n    for i in range(N):\n        product = 1\n        for j in range(len(factors)):\n            if i < factors[j][0]:\n                product *= factors[j][1]\n        result.append(product)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    smallest_prod = nums1[0] * nums2[0]\n    for i in range(1, len(nums1)):\n        smallest_prod = min(smallest_prod, nums1[i] * nums2[i])\n    smallest_prod = smallest_prod * N\n    return smallest_prod\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # # Method 1\n    # for i in range(1, N):\n    #     if nums1[i-1] * nums2[i-1] > nums1[i] * nums2[i]:\n    #         nums1.append(nums1[i])\n    #         nums2.append(nums2[i])\n    #     else:\n    #         pass\n    # return nums1, nums2\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists\n    nums1.sort()\n    nums2.sort()\n    \n    # for each index, find the greatest product\n    for i in range(len(nums2)):\n        for j in range(len(nums1)):\n            if nums1[i]**N == nums2[j]:\n                return nums1[i]**N\n    return None"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize the factor and result\n    factor = 1\n    result = 1\n    # keep looping if the result has not been calculated yet\n    while True:\n        # if the number of factors of this number is less than the\n        # specified number of products, just add one to the product\n        if len(nums1) > N:\n            nums1.pop()\n        # if the number of factors of this number is greater than the\n        # specified number of products, just add 1 to the product\n        elif len(nums2) > N:\n            nums2.pop()\n        # if the result has been calculated and the result has not been\n        # calculated yet, then return\n        elif len(nums1) < N and len(nums2) < N:\n            return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return 1, [nums1[0]*nums2[0]]\n    elif N == 2:\n        return 1, [nums1[0]*nums2[1], nums1[1]*nums2[0]]\n    elif N == 3:\n        return 2, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[0]]\n    elif N == 4:\n        return 3, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[0]]\n    elif N == 5:\n        return 4, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[0]]\n    elif N == 6:\n        return 5, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[0]]\n    elif N == 7:\n        return 6, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[0]]\n    elif N == 8:\n        return 7, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[0]]\n    elif N == 9:\n        return 8, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[0]]\n    elif N == 10:\n        return 9, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[9], nums1[9]*nums2[0]]\n    elif N == 11:\n        return 10, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[9], nums1[9]*nums2[10], nums1[10]*nums2[0]]\n    elif N == 12:\n        return 11, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[9], nums1[9]*nums2[10], nums1[10]*nums2[11], nums1[11]*nums2[0]]\n    elif N == 13:\n        return 12, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[9], nums1[9]*nums2[10], nums1[10]*nums2[11], nums1[11]*nums2[12], nums1[12]*nums2[0]]\n    elif N == 14:\n        return 13, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[9], nums1[9]*nums2[10], nums1[10]*nums2[11], nums1[11]*nums2[12], nums1[12]*nums2[13], nums1[13]*nums2[0]]\n    elif N == 15:\n        return 14, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[9], nums1[9]*nums2[10], nums1[10]*nums2[11], nums1[11]*nums2[12], nums1[12]*nums2[13], nums1[13]*nums2[14], nums1[14]*nums2[0]]\n    elif N == 16:\n        return 15, [nums1[0]*nums2[1], nums1[1]*nums2[2], nums1[2]*nums2[3], nums1[3]*nums2[4], nums1[4]*nums2[5], nums1[5]*nums2[6], nums1[6]*nums2[7], nums1[7]*nums2[8], nums1[8]*nums2[9], nums1[9]*nums2[10], nums1[10]*nums2[11], nums1[11]*nums2[12], nums1[12]*nums2[13], nums1[13]*nums2[14], nums1[14]*nums2[15], nums1[15]*nums2[16], nums1[16]*num"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] * nums2[i])\n    \n    sorted_result = sorted(result, reverse=True)\n    \n    final_nums = []\n    for i in range(N):\n        final_nums.append(sorted_result[i])\n    \n    return final_nums\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = N + 2\n    f = {}\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product = []\n    # for i in nums1:\n    #     product.append(i)\n    #     product.append(i)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n    \ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2\n    \n    \ndef percentile(a,b):\n    '''\n    Write a python function to find the percentile of two numbers.\n    '''\n    return (a+b)/2\n    \n    \ndef variance(a,b):\n    '''\n    Write a python function to find the variance of two numbers.\n    '''\n    variance=0\n    for i in range(0,len(a)):\n        variance += (a[i] - average(a,i))**2\n    variance/=len(a)\n    return variance\n    \n    \ndef standard_deviation(a,b):\n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    variance=variance(a,b)\n    stdev = standard_deviation(a,b)\n    return variance/(len(a)-1)**(0.5)\n    \n    \ndef range(a,b):\n    '''\n    Write a python function to find the range of two numbers.\n    '''\n    if b>a:\n        return b\n    else:\n        return a\n    \n    \ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if len(a)>len(b):\n        return b\n    else:\n        return a\n    \n    \ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if len(a)>len(b):\n        return b\n    else:\n        return a\n    \n    \ndef max(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if len(a)>len(b):\n        return b\n    else:\n        return a\n    \n    \ndef min(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if len(a)>len(b):\n        return b\n    else:\n        return a\n    \n    \ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return sum(a)/len(a)\n    \n    \ndef standard_deviation(a,b):\n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    return standard_deviation(a,b)**0.5\n    \n    \ndef standard_error(a,b):\n    '''\n    Write a python function to find the standard error of two numbers.\n    '''\n    return standard_deviation(a,b)**0.5\n    \n    \ndef correlation(a,b):\n    '''\n    Write a python function to find the correlation of two numbers.\n    '''\n    correlation_coefficient = 0\n    for i in range(0,len(a)):\n        correlation_coefficient += (a[i] - average(a,i))*(b[i] - average(b,i))\n    return correlation_coefficient\n    \n    \ndef correlation_ratio(a,b):\n    '''\n    Write a python function to find the correlation ratio of two numbers.\n    '''\n    correlation_coefficient = correlation(a,b)/((len(a))**(0.5))\n    return correlation_coefficient\n    \n    \ndef coefficient_of_variance(a,b):\n    '''\n    Write a python function to find the coefficient of variance of two numbers.\n    '''\n    variance = variance(a,b)\n    return variance/(len(a)**2)\n    \n    \ndef coefficient_of_standard_deviation(a,b):\n    '''\n    Write a python function to find the coefficient of standard deviation of two numbers.\n    '''\n    return standard_deviation(a,b)/((len(a))**0.5)\n    \n    \ndef coefficient_of_standard_error(a,b):\n    '''\n    Write a python function to find the coefficient of standard error of two numbers.\n    '''\n    return standard_error(a,b)/((len(a))**0.5)\n    \n    \ndef coefficient_of_range(a,b):\n    '''\n    Write a python function to find the coefficient of range of two numbers.\n    '''\n    return range(a,b)\n    \n    \ndef coefficient_of_range_of_maximum(a,b):\n    '''\n    Write a python function to find the coefficient of range of the maximum of two numbers.\n    '''\n    return maximum(a,b)\n    \n    \ndef coefficient_of_range_of_minimum(a,b):\n    '''\n    Write a python function to find the coefficient of range of the minimum of two numbers.\n    '''\n    return minimum(a,b)\n    \n    \ndef coefficient_of_range_of_average(a,b):\n    '''\n    Write a python function to find the coefficient of range of the average of two numbers.\n    '''\n    return average(a,b)\n    \n    \ndef coefficient_of_range_of_median(a,b):\n    '''\n    Write a python function to find the coefficient of range of the median of two numbers.\n    '''\n    return median(a,b)\n    \n    \ndef coefficient_of_range_of_mode(a,b):\n    '''\n    Write a python function to find the coefficient of range of the mode of two numbers.\n    '''\n    return mode(a,b)\n    \n    \ndef coefficient_of_range_of_median_of_two_numbers(a,b):\n    '''\n    Write a python function to find the coefficient of range of the median of two numbers.\n    '''\n    return median(a,b)\n    \n    \ndef coefficient_of_range_of_mode_of_two_numbers(a,b):\n    '''\n    Write a python function to find the coefficient of range of the mode of two numbers.\n    '''\n    return mode(a,b)\n    \n    \ndef coefficient_of_range_of_average_of_two_numbers(a,b):\n    '''\n    Write a python function to find the coefficient of range of the average of two numbers.\n    '''\n    return average(a,b)\n    \n    \ndef coefficient_of_range_of_standard_deviation_of_two_numbers(a,b):\n    '''\n    Write a python function to find the coefficient of range of the standard deviation of two numbers.\n    '''\n    return standard_deviation(a,b)\n    \n    \ndef coefficient_of_range_of_standard_deviation_of_two_numbers_of_mode(a,b):\n    '''\n    Write a python function to find the coefficient of range of the standard deviation of two numbers.\n    '''\n    return standard_deviation(a,b)/(len(a))\n    \n    \ndef coefficient_of_range_of_standard_deviation_of_two_numbers_of_mode(a,b):\n    '''\n    Write a python function to find the coefficient of range of the standard deviation of two numbers.\n    '''\n    return standard_deviation(a,b)/(len(a))\n    \n    \ndef coefficient_of_range_of_average_of_two_numbers(a,b):\n    '''\n    Write a python function to find the coefficient of range of the average of two numbers.\n    '''\n    return average(a,b)\n    \n    \ndef coefficient_of_range_of_average_of_two_numbers_of_mode(a,b):\n    '''\n    Write a python function to find the coefficient of range of the average of two numbers.\n    '''\n    return average(a,b)/(len(a))\n    \n    \ndef coefficient_of_rang"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    for i in range(2, a+1):\n        if a%i==0 and b%i==0:\n            if i!=a and i!=b:\n                return i\n            else:\n                return i\n    return a\nprint(maximum(10,20)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    if b > a:\n        return b\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if b >= a else b\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if b < a else b\ndef print_values(values,m,n):\n    '''\n    Write a python function to print the values in the matrix.\n    '''\n    for i in range(m):\n        for j in range(n):\n            print(values[i][j], end ='')\n        print()\n    return\ndef main():\n    '''\n    Write a python function to find the maximum and the minimum values of two numbers.\n    '''\n    a,b = eval(input(\"Enter the two numbers: \").strip().split(\" \"))\n    m = maximum(a,b)\n    n = minimum(a,b)\n    print_values(values,m,n)\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #code here\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b==0:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\nprint(maximum(9,12)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print (a)\n    else:\n        print (b)\n    return "
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a if a > b else b\n    return maximum\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = []\n    for letter in str1:\n        result.append(letter)\n    return tuple(result)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple = ()\n    for character in str1:\n        tuple += (character, )\n    return tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_tuple = ()\n    for i in range(len(str1)):\n        my_tuple = my_tuple + (ord(str1[i]),)\n    return tuple(my_tuple)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    t = list(str1)\n    return tuple(t)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not str1:\n        return ()\n    if len(str1) < 1:\n        return tuple(str1)\n    temp = tuple(str1[0])\n    while len(str1) > 1:\n        t = str1[1]\n        str1 = str1[2:]\n        t = t + temp\n        temp = t\n        temp = tuple(t)\n    return temp\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # get a list of the characters\n    list_of_characters = list(str1)\n    # convert each character to a tuple\n    tuple_of_characters = tuple(list_of_characters)\n    return tuple_of_characters\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code here\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # your code here\n    return n << 1 \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & 0x01\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & 0xFF\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    i = 1 \n    while True: \n        if n & (1 << i) == 0: \n            break\n        else: \n            n ^= 1 << i\n        i += 1\n    return n \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    \n    i = 1 \n    while True: \n        if n & (1 << i) == 0: \n            break\n        else: \n            n ^= 1 << i \n        i += 1\n    return n \n    \ndef get_next_set_bit(n, i): \n    '''\n    Write a python function to get the set bit with the given index.\n    '''\n    \n    return (n & (1 << i))!= 0 \n    \ndef get_right_most_set_bit(n): \n    '''\n    Write a python function to get the right most set bit.\n    '''\n    \n    i = 0\n    while True: \n        if n & (1 << i) == 0: \n            break\n        else: \n            n ^= 1 << i\n        i += 1\n    return n \n    \ndef get_left_most_set_bit(n): \n    '''\n    Write a python function to get the left most set bit.\n    '''\n    \n    i = 0\n    while True: \n        if n & (1 << i) == 0: \n            break\n        else: \n            n ^= 1 << i\n        i += 1\n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    print(\"\\n### set left most unset bit ###\")\n    print(\"N =\", n)\n    \n    for i in range(0, n-1):\n        if (n & (1 << i)):\n            print(\"\\tbit\", i, \"has been set to 1\")\n        else:\n            print(\"\\tbit\", i, \"has not been set\")\n    \n    # if (n & (1 << (n-1))) == 0:\n    #     print(\"\\tbit\", n-1, \"has been set to 0\")\n    # else:\n    #     print(\"\\tbit\", n-1, \"has not been set\")\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n > 0: \n        n &= n-1\n        if n & 0x80: \n            n |= 0x80\n        else: \n            n >>= 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    while n: \n        n = n & 0x1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_idx = 0\n    while bit_idx < n:\n        bit_idx = bit_idx << 1\n    return bit_idx\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 0x80 == 0:\n        return n\n    else:\n        return n | 0x80\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & 1) + (n >> 1)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3)*(math.pi)*math.pow(r*math.pow(h,3),3)*math.pow(math.pow(math.pi,3),3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 0.5*r*h**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    s = 1\n    for _ in range(2,int(math.sqrt(h))):\n        s *= (h / _)\n    return 4 * math.pi * r * s\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*math.pi*h*r**3\ndef surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (4*math.pi*h)*r**2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef cylinder_volume(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return radius*height\ndef cylinder_surface_area(radius, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (math.pi*radius*height)/2\ndef cylinder_volume_conical(radius, height):\n    '''\n    Write a function to find the volume of a conical cylinder.\n    '''\n    return radius*height*(math.pi/3)\ndef circle_area(r,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 4*math.pi*r*h\ndef circle_volume(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return 4*math.pi*r*r\ndef circle_volume_conical(r):\n    '''\n    Write a function to find the volume of a conical circle.\n    '''\n    return 4*math.pi*r*r*math.pi\ndef surface_area_conical(r):\n    '''\n    Write a function to find the surface area of a conical circle.\n    '''\n    return 4*math.pi*r*r*math.pi\ndef surface_area_cylinder(radius, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*radius*height\ndef surface_area_cone(radius,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (4*math.pi*radius*h)/2\ndef cone_surface_area(radius, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (math.pi*radius*height)/2\ndef cone_volume_conical(radius, height):\n    '''\n    Write a function to find the volume of a conical cone.\n    '''\n    return 4*math.pi*radius*radius*h\ndef cone_volume_cylinder(radius, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*radius*radius*h\ndef concave_surface_area(radius, h):\n    '''\n    Write a function to find the concave surface area.\n    '''\n    return 4*math.pi*radius*radius*(math.pi/3)\ndef concave_volume_conical(radius, height):\n    '''\n    Write a function to find the volume of a conical cylinder.\n    '''\n    return 4*math.pi*radius*radius*math.pi\ndef concave_volume_cylinder(radius, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 4*math.pi*radius*radius*math.pi*h\ndef parabola_surface_area(a, b, c, d):\n    '''\n    Write a function to find the surface area of a parabola.\n    '''\n    return (4*a*b)/3\ndef parabola_volume_conical(a, b, c, d):\n    '''\n    Write a function to find the volume of a conical parabola.\n    '''\n    return 4*a*b*c*d\ndef parabola_volume_cylinder(a, b, c, d):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 4*a*b*c*d*(math.pi/3)\ndef parallelogram_surface_area(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return 4*a*b*c\ndef parallelogram_volume(a, b, c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return 4*a*b*c*math.sqrt(1-b**2-4*a*c)\ndef parallelogram_volume_conical(a, b, c):\n    '''\n    Write a function to find the volume of a conical parallelogram.\n    '''\n    return 4*a*b*c*c*math.sqrt(1-b**2-4*a*c)\ndef parallelogram_volume_cylinder(a, b, c):\n    '''\n    Write a function to find the volume of a cylindrical parallelogram.\n    '''\n    return 4*a*b*c*c*math.pi\ndef parallelogram_surface_area(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c))\ndef parallelogram_volume(a, b, c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c))\ndef parallelogram_volume_conical(a, b, c):\n    '''\n    Write a function to find the volume of a conical parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c))\ndef parallelogram_volume_cylinder(a, b, c):\n    '''\n    Write a function to find the volume of a cylindrical parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c))\ndef parallelogram_surface_area(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c))\ndef parallelogram_volume(a, b, c):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c))\ndef parallelogram_volume_conical(a, b, c):\n    '''\n    Write a function to find the volume of a conical parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c))\ndef parallelogram_volume_cylinder(a, b, c):\n    '''\n    Write a function to find the volume of a cylindrical parallelogram.\n    '''\n    return 4*a*b*c*c*(math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c)*math.sqrt(1-b**2-4*a*c))\ndef parallelogram_surface_area(a, b, c):\n    ''"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c_vol = 4 * math.pi * r**2 * h / 3\n    return c_vol\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=0\n    for i in range(1,math.ceil(h/r)):\n        v=v+r*i*(1/3)\n    return v\n    "
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def haversine_distance(lon1,lat1,lon2,lat2):\n        '''\n        calculate the distance between two points\n        '''\n        a = 6371\n        lon1 = radians(lon1)\n        lat1 = radians(lat1)\n        lon2 = radians(lon2)\n        lat2 = radians(lat2)\n        d = r*a*math.cos(lat1)*math.cos(lat2)*math.sin(lon1-lon2)\n        return d\n    \n    return round(3.142*math.pi*(r**2)*h,4)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = r*h\n    vol = area*3.14*(3*r**2+h**2)\n    return(vol)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    area = r*h\n    vol = area*3.14*h\n    return(vol)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 3*math.pi*(r**3)\n    return(vol)\ndef volume_rectangle(r1,r2):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    vol = r1*r2\n    return(vol)\ndef volume_square(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_hexa(r):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_dodo(r):\n    '''\n    Write a function to find the volume of a dodo.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_hexahedron(r):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_tetrahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_decahedron(r):\n    '''\n    Write a function to find the volume of a decahedron.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_dodohedron(r):\n    '''\n    Write a function to find the volume of a dodo.\n    '''\n    vol = r*r*3\n    return(vol)\ndef volume_fractal_surface(r,f,t):\n    '''\n    Write a function to find the volume of a fractal surface.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_cylinder(r,f,t):\n    '''\n    Write a function to find the volume of a fractal cylinder.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_sphere(r,f,t):\n    '''\n    Write a function to find the volume of a fractal sphere.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_rectangle(r,f,t):\n    '''\n    Write a function to find the volume of a fractal rectangle.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_square(r,f,t):\n    '''\n    Write a function to find the volume of a fractal square.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_hexahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal hexahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_octahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal octahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_dodo(r,f,t):\n    '''\n    Write a function to find the volume of a fractal dodo.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_hexahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal hexahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_tetrahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal tetrahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_decahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal decahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_dodohedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal dodo.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_surface(r,f,t):\n    '''\n    Write a function to find the volume of a fractal surface.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_cylinder(r,f,t):\n    '''\n    Write a function to find the volume of a fractal cylinder.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_sphere(r,f,t):\n    '''\n    Write a function to find the volume of a fractal sphere.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_rectangle(r,f,t):\n    '''\n    Write a function to find the volume of a fractal rectangle.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_square(r,f,t):\n    '''\n    Write a function to find the volume of a fractal square.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_hexahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal hexahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_octahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal octahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_dodo(r,f,t):\n    '''\n    Write a function to find the volume of a fractal dodo.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_hexahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal hexahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_tetrahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal tetrahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_decahedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal decahedron.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_dodohedron(r,f,t):\n    '''\n    Write a function to find the volume of a fractal dodo.\n    '''\n    vol = r*r*f*t\n    return(vol)\ndef volume_fractal_surface("
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Define the radius of the cone\n    c = 3\n    # Compute the area of the circumference\n    area = 3*math.pi*(r**2)\n    # Find the volume of the cone\n    return (4*math.pi*area)/h\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=0\n    num=n\n    while(i<=n):\n        num*=2\n        i+=1\n    return num\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if (n % i) == 0:\n            return i\n        i+=1\n    return None\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 0\n    # Compute the highest power of 2 that is less than or equal to n\n    for i in range(1, n + 1):\n        result = result + i\n    # If result is greater than or equal to n\n    if result >= n:\n        return result\n    else:\n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_2 = 2**(n-1)\n    if power_2 >= n:\n        return power_2\n    else:\n        return highest_Power_of_2(n-power_2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # your code goes here\n    x = 0\n    while x < n:\n        if x < 2:\n            if x == 2:\n                return x\n            else:\n                x = x * 2\n                continue\n        else:\n            x = x * 2\n    return x\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n < 2):\n        return 0\n    else:\n        return highest_Power_of_2(n - 1) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #base cases\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_Power_of_2(n-1) + highest_Power_of_2(n//2)\n        \n    "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    for i in range(2, n+1):\n        if n%i == 0:\n            max = max + 1\n    if max == 0:\n        return -1\n    else:\n        return max\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n!= 0:\n        # print(power)\n        power += 1\n        n = n // 2\n    if power <= n:\n        return power\n    else:\n        return 0\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n_LUCAS = 1\n    for n_iteration in range(n):\n        n_LUCAS *= 2\n        if n_iteration == 0:\n            n_LUCAS = 1\n        if n_iteration == 1:\n            n_LUCAS = 2\n        if n_iteration == 2:\n            n_LUCAS = 3\n    return n_LUCAS\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    tens = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12}\n    return tens.get(n % 10, 0)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x,y=0,1\n    for i in range(2,n+1):\n        x,y=y,x+y\n    return x\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0: \n        raise ValueError(\"n must be non-negative\") \n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n    lucas_nums = [1, 3] \n    lucas_nums.extend([i * j for i in range(1, n//2 + 1) for j in range(1, n//2 + 1)]) \n    return lucas_nums[n//2]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return 0\n    \n    return int((n-1)**0.5)*int(n**0.5)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for x in range(n):\n        for y in range(x):\n            if y % 2 == 1:\n                if x > 1:\n                    x -= 1\n            else:\n                if x < n - 2:\n                    x += 1\n    return x\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return n * find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for el in list_:\n        el = el.replace(string, \"\")\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.format(string)\n        print(element)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string_list = list_\n    for i in range(len(list_)):\n        string_list[i] = string_list[i].replace(\"\\n\",\"\")\n    string_list.append(string)\n    return string_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_) == str:\n        list_ = [string.format(i) for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = []\n    for el in string:\n        list_.append(el.replace(\"{\", \"\"))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for el in list_:\n        list_[list_.index(el)] = string\n        \n    return list_\n    \n    \n    \n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = str(list_[i]) + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if list_ == []:\n        return list_\n    \n    for i in list_:\n        i.append(string)\n    \n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.strip()\n        new_string = f'{string.format(element)}{element}'\n        list_.append(new_string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item = string.replace('%','')\n        item = item.replace('+','')\n        item = item.replace('/','')\n        item = item.replace('*','')\n        item = item.replace('(','')\n        item = item.replace(')','')\n        item = item.replace('(','')\n        item = item.replace(')','')\n        item = item.replace('|','')\n        item = item.replace('<','')\n        item = item.replace('>','')\n        item = item.replace(';','')\n        item = item.replace(';','')\n        item = item.replace('&','')\n        item = item.replace('!','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('#','')\n        item = item.replace('-','')\n        item = item.replace('+','')\n        item = item.replace('=','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('|','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('/','')\n        item = item.replace('*','')\n        item = item.replace('(','')\n        item = item.replace(')','')\n        item = item.replace('+','')\n        item = item.replace('=','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('<','')\n        item = item.replace('>','')\n        item = item.replace(' ','')\n        item = item.replace('+','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('%','')\n        item = item.replace('#','')\n        item = item.replace('/','')\n        item = item.replace('*','')\n        item = item.replace('(','')\n        item = item.replace(')','')\n        item = item.replace('+','')\n        item = item.replace('=','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('|','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('&','')\n        item = item.replace('#','')\n        item = item.replace(';','')\n        item = item.replace(';','')\n        item = item.replace('<','')\n        item = item.replace('>','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('|','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('%','')\n        item = item.replace('#','')\n        item = item.replace('/','')\n        item = item.replace('*','')\n        item = item.replace('(','')\n        item = item.replace(')','')\n        item = item.replace('+','')\n        item = item.replace('=','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('|','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('/','')\n        item = item.replace(' ','')\n        item = item.replace('+','')\n        item = item.replace('=','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('&','')\n        item = item.replace('#','')\n        item = item.replace(';','')\n        item = item.replace(';','')\n        item = item.replace('<','')\n        item = item.replace('>','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('|','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('%','')\n        item = item.replace('#','')\n        item = item.replace('/','')\n        item = item.replace('*','')\n        item = item.replace('(','')\n        item = item.replace(')','')\n        item = item.replace('+','')\n        item = item.replace('=','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('/','')\n        item = item.replace(' ','')\n        item = item.replace('+','')\n        item = item.replace('=','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('/','')\n        item = item.replace(' ','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('.','')\n        item = item.replace('_','')\n        item = item.replace('!','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n        item = item.replace('_','')\n    "
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return None\n    elif len(l1) == 1:\n        return {l1[0]: l2[0]}\n    else:\n        for i in range(len(l1)):\n            if l2[i] not in res:\n                res[l2[i]] = {}\n            if l3[i] not in res[l2[i]]:\n                res[l2[i]][l3[i]] = l1[i]\n            else:\n                return None\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    converted_dict = {}\n    l3_len = len(l3)\n    for i in range(l3_len):\n        converted_dict[i] = {}\n        for j in range(len(l1)):\n            converted_dict[i][l1[j]] = l2[j]\n    return converted_dict\n    \ndef main():\n    l1 = [1,2,3]\n    l2 = [[1,2,3],[4,5,6]]\n    l3 = ['one','two','three']\n    \n    print(convert_list_dictionary(l1, l2, l3))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary1 = {}\n    for i in range(len(l1)):\n        if l1[i] in dictionary1:\n            dictionary1[l1[i]] += [l2[i]]\n        else:\n            dictionary1[l1[i]] = [l2[i]]\n    for i in range(len(l3)):\n        if l3[i] in dictionary1:\n            if l1[i] in dictionary1:\n                dictionary1[l1[i]].extend(dictionary1[l3[i]])\n            else:\n                dictionary1[l1[i]] = dictionary1[l3[i]]\n        else:\n            dictionary1[l1[i]] = [l3[i]]\n    return dictionary1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    for i, j in zip(l1, l2):\n        d[i] = j\n    for i, j in zip(l3, l4):\n        d[i] = j\n    return d\n    \n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    #Create empty dictionaries\n    l4 = {}\n    l5 = {}\n    \n    #Loop through each element in the lists\n    for i in range(0, len(l1)):\n        l4[l1[i]] = l2[i]\n        \n    for i in range(0, len(l3)):\n        if l1[i] not in l4.keys():\n            l4[l1[i]] = l3[i]\n            \n    #Loop through each element in the dictionaries\n    for i in l4.keys():\n        if l3[i] not in l5.keys():\n            l5[l3[i]] = l4[i]\n            \n    #Return dictionaries\n    return l5\n    \n    # For testing\n    # print(convert_list_dictionary([\"yellow\", \"blue\", \"red\", \"green\"], [\"pink\", \"white\", \"black\"], [\"white\", \"black\"]))\n    # print(convert_list_dictionary([\"yellow\", \"blue\", \"red\", \"green\"], [\"pink\", \"white\", \"black\"], [\"black\"]))\n    # print(convert_list_dictionary([\"yellow\", \"blue\", \"red\", \"green\"], [\"pink\", \"white\", \"black\"], [\"black\", \"white\"]))\n    # print(convert_list_dictionary([\"yellow\", \"blue\", \"red\", \"green\"], [\"white\", \"black\", \"white\"], [\"black\", \"white\"]))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = dict()\n    # convert both lists\n    for i, j in zip(l1, l2):\n        res[i] = j\n    # convert the dictionary\n    for key, value in res.items():\n        res[key] = {'p': value}\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        for j in range(len(l1[i])):\n            d[l3[i][j]] = l1[i][j]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    return d1\n    \ndef convert_list_dictionary_to_json(d1):\n    '''\n    Write a function to convert nested dictionary to json\n    '''\n    return json.dumps(d1, indent=4)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Save the first dictionary\n    d1 = dict()\n    \n    # Save the second dictionary\n    d2 = dict()\n    \n    # Save the third dictionary\n    d3 = dict()\n    \n    # Loop through each list in order\n    for i in l1:\n        \n        # Find the key and value of that key in the dictionary\n        key = i[0]\n        value = i[1]\n        \n        # If the key already exists, add the new value to the existing\n        if key in d1.keys():\n            # Add the new value to the existing dictionary\n            d1[key].append(value)\n        # Otherwise, create a new key with the new value\n        else:\n            # Create the key\n            d1[key] = [value]\n            \n    # Loop through each list in order\n    for i in l2:\n        \n        # Find the key and value of that key in the dictionary\n        key = i[0]\n        value = i[1]\n        \n        # If the key already exists, add the new value to the existing\n        if key in d2.keys():\n            # Add the new value to the existing dictionary\n            d2[key].append(value)\n        # Otherwise, create a new key with the new value\n        else:\n            # Create the key\n            d2[key] = [value]\n            \n    # Loop through each list in order\n    for i in l3:\n        \n        # Find the key and value of that key in the dictionary\n        key = i[0]\n        value = i[1]\n        \n        # If the key already exists, add the new value to the existing\n        if key in d3.keys():\n            # Add the new value to the existing dictionary\n            d3[key].append(value)\n        # Otherwise, create a new key with the new value\n        else:\n            # Create the key\n            d3[key] = [value]\n            \n    return d1, d2, d3"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_l1 = {}\n    dict_l2 = {}\n    dict_l3 = {}\n    for item in l1:\n        if item[1] not in dict_l1:\n            dict_l1[item[1]] = [item]\n        else:\n            dict_l1[item[1]].append(item)\n    for item in l2:\n        if item[1] not in dict_l2:\n            dict_l2[item[1]] = [item]\n        else:\n            dict_l2[item[1]].append(item)\n    for item in l3:\n        if item[1] not in dict_l3:\n            dict_l3[item[1]] = [item]\n        else:\n            dict_l3[item[1]].append(item)\n    return (dict_l1, dict_l2, dict_l3)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # 1. initialize variables\n    sum = 0\n    n = int(n)\n    # 2. define the function\n    def f (x):\n        return ( (f(x/2) + f(x/3) + f(x/4) + f(x/5)) * x )\n    # 3. iterate through each\n    for n in range(1, n):\n        # 4. calculate sum of previous n\n        sum = sum + f(n)\n    # 5. return sum\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for n_ in range (1, n + 1):\n        max_sum += f(n_)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return (2 + 2)\n    if n == 2:\n        return (3 + 2)\n    if n == 3:\n        return (4 + 2)\n    if n == 4:\n        return (5 + 2)\n    if n == 5:\n        return (6 + 2)\n    if n % 2 == 0:\n        return (n // 2)\n    return (n + 3)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return get_max_sum (n-1) + get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return\n    \n    return max(max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_f = 0\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n        if sum > max_f:\n            max_f = sum\n    return max_f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            j = int(i/2)\n            j = int(j/2)\n            f = i*(j+1)\n            f = f/2\n            f = f - (i/2)\n            max_f = max(f, max_f)\n            i = i + 1\n        else:\n            j = int(i/3)\n            j = int(j/3)\n            f = i*(j+1)\n            f = f/3\n            f = f - (i/3)\n            max_f = max(f, max_f)\n            i = i + 1\n    return max_f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n**2) + (n**3) + n**4\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    i = 0\n    while i < n:\n        max_sum = max(max_sum, i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+i+"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # define the maximum sum\n    sum = 0\n    for i in range (1,n):\n        sum = sum + i\n    return sum\ndef get_fibonacci_list (n):\n    '''\n    Write a function to calculate the fibonacci sequence using the given function f(n).\n    '''\n    fib_list = [0,1]\n    if n == 1:\n        return fib_list\n    for i in range(1,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list\ndef sum_of_fibonacci_numbers (n):\n    '''\n    This function takes a number as an argument and returns the sum of the fibonacci numbers.\n    '''\n    sum = 0\n    fib_list = get_fibonacci_list(n)\n    for i in range (1,len(fib_list)):\n        sum = sum + fib_list[i]\n    return sum\ndef main():\n    print (get_max_sum(10))\n    print(get_fibonacci_list(10))\n    print (sum_of_fibonacci_numbers(10))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n    return max(length_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for x in input_list:\n        if len(x) > max_length:\n            max_length = len(x)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 'Empty List'\n    elif len(input_list) == 1:\n        return input_list\n    elif len(input_list) == 2:\n        return input_list[0] +'and'+ input_list[1]\n    elif len(input_list) > 2:\n        return input_list[0] +'and'+ str(len(input_list)-1) +'and'+ input_list[1] +'and'+ str(len(input_list)-2)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = len(input_list)\n    i = 0\n    while i < max:\n        if input_list[i] >= input_list[i+1]:\n            max = max\n        i += 1\n    return max\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t = tuple(test_tup)\n    lst = list(t)\n    if len(lst) == len(set(lst)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    print(f\"\\nChecking if {test_tup} contains no duplicates:\")\n    print(f\"\\t{test_tup} is in the set {set(test_tup)}\")\n    #print(f\"\\tlen({test_tup}): {len(test_tup)}\")\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup=[]\n    for i in test_tup:\n        if i not in tup:\n            tup.append(i)\n    return tup\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup_set = set(test_tup)\n    return not test_tup_set\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tuple_len = len(test_tup)\n    # if not check_duplicates:\n    #     return\n    if tuple_len < 10:\n        return\n    for i in range(tuple_len):\n        if test_tup[i] in test_tup[i+1:]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i]:\n            count += 1\n    if count == len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    dic = {}\n    for i in test_tup:\n        if i in dic:\n            return False\n        else:\n            dic[i] = 1\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # First, a loop that iterates through the string and checks for the first character.\n    # If the first character is not the same, it should not be found and thus no character is found.\n    # Else, it should be found.\n    first_non_repeating_character = ''\n    first_non_repeating_character_idx = 0\n    for i in range(len(str1)):\n        if str1[i]!= str1[first_non_repeating_character_idx]:\n            break\n        first_non_repeating_character_idx += 1\n    return first_non_repeating_character\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    n = len(str1)\n    # Initialize the first char\n    first_char = str1[0]\n    for i in range(1, n):\n        if str1[i]!= first_char:\n            return first_char\n    # First character is always repeated\n    return first_char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Your code here\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count.keys():\n        if char_count[char] == 1:\n            return char\n    else:\n        return 'No character is non-repeating'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Coding Problem: Given a string, find the first non-repeating character in it.\n    # Largest recurrence?\n    # Try all lengths of the string\n    \n    # Return the first non-repeating character in the string\n    if not str1 or len(str1) == 0:\n        return \"None\"\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i] == str1[j]:\n                break\n            elif str1[j] > str1[i]:\n                return str1[i]\n    \n    # return the first non-repeating character\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Write your code here\n    for i in range(len(str1)):\n        if str1[i] not in str1[i + 1:]:\n            return str1[i]\n    return 'No repeated character'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0]\n    # This code is contributed by @harsiby\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1.lower()\n    for i in range(len(str1)):\n        if str1[i] not in str1[i + 1:]:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # answer = ''\n    # if len(str1) == 0:\n    #     answer =''\n    # else:\n    #     count = 0\n    #     for char in str1:\n    #         if char == str1[count]:\n    #             count += 1\n    #         else:\n    #             answer += char\n    #             count = 0\n    #     answer += str1[count:]\n    #     if answer!= answer[::-1]:\n    #         answer = answer[::-1]\n    #     else:\n    #         answer = ''\n    # return answer\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if string[0] == string[-1] == string[0]:\n        print(string[0])\n    elif string[0]!= string[-1]!= string[0]:\n        print(\"Not a valid\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    regex_pattern = re.compile(regex)\n    if regex_pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    is_starts_with_character = re.search(pattern, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0 or string[0] =='':\n        return True\n    else:\n        return False\ndef check_domain(domain):\n    '''\n    Write a function to check whether the given string is a valid domain name.\n    '''\n    if '.' not in domain:\n        return True\n    else:\n        return False\ndef check_number(number):\n    '''\n    Write a function to check whether the given string is a valid number.\n    '''\n    if re.match(r'^[0-9]*$', number):\n        return True\n    else:\n        return False\ndef check_numbers(numbers):\n    '''\n    Write a function to check whether the given string is a valid number.\n    '''\n    for i in range(len(numbers)):\n        if not check_number(numbers[i]):\n            return False\n    return True\ndef check_symbols(symbols):\n    '''\n    Write a function to check whether the given string is a valid symbol.\n    '''\n    for i in range(len(symbols)):\n        if not check_char(symbols[i]):\n            return False\n    return True\ndef check_words(words):\n    '''\n    Write a function to check whether the given string is a valid word.\n    '''\n    for i in range(len(words)):\n        if not check_domain(words[i]) and not check_char(words[i]) and not check_numbers(words[i]) and not check_symbols(words[i]):\n            return False\n    return True\ndef check_url(url):\n    '''\n    Write a function to check whether the given string is a valid URL.\n    '''\n    if re.match(r'^(http|ftp|https)s?://', url):\n        return True\n    else:\n        return False\ndef check_email(email):\n    '''\n    Write a function to check whether the given string is a valid email address.\n    '''\n    if re.match(r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$', email):\n        return True\n    else:\n        return False\ndef check_image(image):\n    '''\n    Write a function to check whether the given string is a valid image URL.\n    '''\n    if re.match(r'^(http|ftp|https)s?://(www|m)\\.\\w{2,3}\\.\\w{2,3}\\.\\w{2,3}/\\w{3,4}/\\w{3,4}/\\w{3,4}\\.jpeg$', image):\n        return True\n    else:\n        return False\ndef check_html(text):\n    '''\n    Write a function to check whether the given string is a valid HTML document.\n    '''\n    if re.match(r'^[a-z]+$', text):\n        return True\n    else:\n        return False\ndef check_javascript(text):\n    '''\n    Write a function to check whether the given string is a valid Javascript document.\n    '''\n    if re.match(r'^[a-z]+$', text):\n        return True\n    else:\n        return False\ndef check_js(text):\n    '''\n    Write a function to check whether the given string is a valid Javascript document.\n    '''\n    if re.match(r'^(window|window\\.init)$', text):\n        return True\n    else:\n        return False\ndef check_css(text):\n    '''\n    Write a function to check whether the given string is a valid CSS document.\n    '''\n    if re.match(r'^(\\.\\w{1,2}\\.css)$', text):\n        return True\n    else:\n        return False\ndef check_py(text):\n    '''\n    Write a function to check whether the given string is a valid Python document.\n    '''\n    if re.match(r'^(\\.\\w{1,2}\\.py)$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex_str = r'^[a-z]$|^([a-z]).*\\1$'\n    if(re.search(regex_str,string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string)!= None:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    l = []\n    i = 0\n    while i < len(string):\n        if string[i] == string[i+1]:\n            l.append(string[i])\n        else:\n            return False\n        i = i+1\n    if len(l)!= 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0 or len(b) == 0 or len(c) == 0:\n        return None\n    \n    if len(a) == 1 and len(b) == 1 and len(c) == 1:\n        return a[0]\n    elif len(a) == 1 and len(b) > 1:\n        return b[0]\n    elif len(a) > 1 and len(b) == 1:\n        return a[0]\n    elif len(a) > 1 and len(b) > 1:\n        return median(a[0],b[0],c[0])\n    elif len(a) > 1:\n        return median(a[0], median(b,c,a[1:]),a[1:])\n    else:\n        return median(a[0], median(b,c,a[1:]),a[1:])\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import math\n    x = a + b + c\n    if x % 2 == 0:\n        return math.floor((x/2))\n    else:\n        return math.floor(x/2)-1\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0 or len(b) == 0 or len(c) == 0:\n        return 0\n    else:\n        return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    s=int(a)+int(b)+int(c)\n    if s%2==0:\n        return int(s/2)\n    else:\n        return int((s+1)/2)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    elif c < a < b:\n        return c\n    else:\n        return a + b + c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a+b+c)/3\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if len(a) == 3:\n        if len(b) == 3:\n            if len(c) == 3:\n                if a == b and a == c:\n                    return a\n                else:\n                    return (a+b+c)//3\n            else:\n                return (a+b+c)//3\n        else:\n            return (a+b+c)//3\n    else:\n        return (a+b+c)//3\n        \n        \nprint(median_numbers([1,4,7], [5,2,8,10], [1,1,1])"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a%b==0)&(a%c==0):\n        print(a)\n    elif (a%b==0)&(a%c!=0):\n        print(a)\n    else:\n        print(\"The median is \",a)\n    if (b%c==0)&(b%a==0):\n        print(b)\n    elif (b%c!=0)&(b%a==0):\n        print(b)\n    else:\n        print(\"The median is \",b)\n    if (c%a==0)&(c%b==0):\n        print(c)\n    elif (c%a!=0)&(c%b==0):\n        print(c)\n    else:\n        print(\"The median is \",c)\n    \ndef main():\n    a=int(input(\"Enter a number: \"))\n    b=int(input(\"Enter b number: \"))\n    c=int(input(\"Enter c number: \"))\n    median_numbers(a,b,c)\n    \nmain()"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if not a or not b or not c:\n        raise ValueError('Input must not be empty.')\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # write your code here\n    # initialize the sum\n    # count the digits\n    # return the sum\n    sum = 0\n    for i in nums:\n        sum += int(i)\n    # return the sum\n    return sum\n    \n    \nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_of_digits([3, 4, 5, 6, 7]))\nprint(sum_of_digits([4, 5, 6])"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for n in nums:\n        sum = sum + n\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    num_list = []\n    for num in nums:\n        num_list.append(int(num))\n    num_list.sort()\n    sum = 0\n    for num in num_list:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(str(num)[-1])\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = [int(x) for x in nums]\n    return sum(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_digits = 0\n    for num in nums:\n        total_digits += int(num)\n    return total_digits\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # TO DO\n    # Note: if nums is a list, return the sum of each element in nums\n    # This is the method that you will be using to compute the sum of the digits\n    # nums_2d = [[1,2,3],[4,5,6],[7,8,9]]\n    # sum = 0\n    # for i in range(0,len(nums_2d)):\n    #     for j in range(0,len(nums_2d[i])):\n    #         sum += nums_2d[i][j]\n    # return sum\n    \n    # TO DO: compute the sum of the digits of each number in the list nums\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    sum_digits = 0\n    \n    for n in nums:\n        sum_digits = sum_digits + n % 10\n        \n    return sum_digits\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = [test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1))]\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= (test_tup1[i] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (\n        test_tup1[0] ^ test_tup2[0],\n        test_tup1[1] ^ test_tup2[1],\n        test_tup1[2] ^ test_tup2[2],\n        test_tup1[3] ^ test_tup2[3],\n        test_tup1[4] ^ test_tup2[4],\n        test_tup1[5] ^ test_tup2[5],\n        test_tup1[6] ^ test_tup2[6],\n        test_tup1[7] ^ test_tup2[7],\n        test_tup1[8] ^ test_tup2[8]\n    )\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    test_tup1[0] = str(bin(test_tup1[0]))[2:]\n    test_tup2[0] = str(bin(test_tup2[0]))[2:]\n    test_tup1.append('0')\n    test_tup2.append('0')\n    test_tup1 = list(map(lambda x: str(x), test_tup1))\n    test_tup2 = list(map(lambda x: str(x), test_tup2))\n    test_tup1 = list(map(lambda x: x, test_tup1))\n    test_tup2 = list(map(lambda x: x, test_tup2))\n    test_tup1 = list(map(lambda x: str(x), test_tup1))\n    test_tup2 = list(map(lambda x: str(x), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    for index in range(len(test_tup1)):\n        test_tup1[index] = bin(test_tup1[index])[2:]\n        test_tup2[index] = bin(test_tup2[index])[2:]\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    return ''.join(map(lambda x: str(x)[2:], test_tup1)) + ''.join(map(lambda x: str(x)[2:], test_tup2))\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the bitwise and operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    test_tup1[0] = str(bin(test_tup1[0]))[2:]\n    test_tup2[0] = str(bin(test_tup2[0]))[2:]\n    test_tup1.append('0')\n    test_tup2.append('0')\n    test_tup1 = list(map(lambda x: str(x), test_tup1))\n    test_tup2 = list(map(lambda x: str(x), test_tup2))\n    test_tup1 = list(map(lambda x: x, test_tup1))\n    test_tup2 = list(map(lambda x: x, test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    for index in range(len(test_tup1)):\n        test_tup1[index] = bin(test_tup1[index])[2:]\n        test_tup2[index] = bin(test_tup2[index])[2:]\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    return ''.join(map(lambda x: str(x)[2:], test_tup1)) + ''.join(map(lambda x: str(x)[2:], test_tup2))\n    \ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the bitwise or operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    test_tup1[0] = str(bin(test_tup1[0]))[2:]\n    test_tup2[0] = str(bin(test_tup2[0]))[2:]\n    test_tup1.append('0')\n    test_tup2.append('0')\n    test_tup1 = list(map(lambda x: str(x), test_tup1))\n    test_tup2 = list(map(lambda x: str(x), test_tup2))\n    test_tup1 = list(map(lambda x: x, test_tup1))\n    test_tup2 = list(map(lambda x: x, test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    for index in range(len(test_tup1)):\n        test_tup1[index] = bin(test_tup1[index])[2:]\n        test_tup2[index] = bin(test_tup2[index])[2:]\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tup2 = list(map(lambda x: int(x, 2), test_tup2))\n    test_tup1 = list(map(lambda x: int(x, 2), test_tup1))\n    test_tu"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Write your code here\n    temp = 0\n    for i in range(0, len(test_tup1)):\n        temp = temp ^ test_tup1[i]\n    for i in range(0, len(test_tup2)):\n        temp = temp ^ test_tup2[i]\n    return temp\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_int = [i for i in test_tup1]\n    test_tup2_int = [i for i in test_tup2]\n    xor = 0\n    for i in range(len(test_tup1_int)):\n        xor ^= test_tup1_int[i] ^ test_tup2_int[i]\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = [0 for i in range(32)]\n    for x in test_tup1:\n        for y in test_tup2:\n            res[x ^ y] = 1\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = 0\n    for i in range(len(test_tup1)):\n        res = res ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        res = res ^ test_tup2[i]\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Your code here\n    if (len(test_tup1) == len(test_tup2)):\n        for i in range(len(test_tup1)):\n            test_tup1[i] = int(test_tup1[i]) ^ int(test_tup2[i])\n    else:\n        print(\"Some of the arguments are not of the same size.\")\n    return tuple(test_tup1)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples should have same length\")\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert test_list to a list\n    test_list = list(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = Counter(test_list)\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    \n    for item in test_list:\n        if type(item) == type([]):\n            for subitem in item:\n                if type(subitem) == type([]):\n                    for sub_item in subitem:\n                        if type(sub_item) == type([]):\n                            for item2 in sub_item:\n                                if type(item2) == type([]):\n                                    for item3 in item2:\n                                        if type(item3) == type([]):\n                                            for item4 in item3:\n                                                if type(item4) == type([]):\n                                                    for item5 in item4:\n                                                        if type(item5) == type([]):\n                                            \n                                                        for item6 in item5:\n                                                            if type(item6) == type([]):\n                                                                for item7 in item6:\n                                                                        if type(item7) == type([]):\n                                                                    for item8 in item7:\n                                                                                if type(item8) == type([]):\n                                                                                    for item9 in item8:\n                                                                                        if type(item9) == type([]):\n                                                                                            for item10 in item9:\n                                                                                            if type(item10) == type([]):\n                                                                                                for item11 in item10:\n                                                                                                            if type(item11) == type([]):\n                                                                                                                for item12 in item11:\n                                                                                                                    if type(item12) == type([]):\n                                                                                                                    for item13 in item12:\n                                                                                                                        if type(item13) == type([]):\n                                                                                                                    for item14 in item13:\n                                                                                                                        if type(item14) == type([]):\n                                                                                                                    for item15 in item14:\n                                                                                                                            if type(item15) == type([]):\n                                                                                                                    for item16 in item15:\n                                                                                                                            if type(item16) == type([]):\n                                                                                                                                for item17 in item16:\n                                                                                                                                if type(item17) == type([]):\n                                                                                                                                for item18 in item17:\n                                                                                                                                    if type(item18) == type([]):\n                                                                                                                                    for item19 in item18:\n                                                                                                                                        if type(item19) == type([]):\n                                                                                                                                    for item20 in item19:\n                                                                                                                                        if type(item20) == type([]):\n                                                                                                                                    for item21 in item20:\n                                                                                                                                        if type(item21) == type([]):\n                                                                                                                                    for item22 in item21:\n                                                                                                                                        if type(item22) == type([]):\n                                                                                                                                    for item23 in item22:\n                                                                                                                                        if type(item23) == type([]):\n                                                                                                                                    for item24 in item23:\n                                                                                                                                        if type(item24) == type([]):\n                                                                                                                                    for item25 in item24:\n                                                                                                                                        if type(item25) == type([]):\n                                                                                                                                    for item26 in item25:\n                                                                                                                                        if type(item26) == type([]):\n                                                                                                                                    for item27 in item26:\n                                                                                                                                        if type(item27) == type([]):\n                                                                                                                                    for item28 in item27:\n                                                                                                                                        if type(item28) == type([]):\n                                                                                                                                    for item29 in item28:\n                                                                                                                                        if type(item29) == type([]):\n                                                                                                                                    for item30 in item29:\n                                                                                                                                        if type(item30) == type([]):\n                                                                                                                                    for item31 in item30:\n                                                                                                                                        if type(item31) == type([]):\n                                                                                                                                    for item32 in item31:\n                                                                                                                                        if type(item32) == type([]):\n                                                                                                                                    for item33 in item32:\n                                                                                                                                        if type(item33) == type([]):\n                                                                                                                                    for item34 in item33:\n                                                                                                                                        if type(item34) == type([]):\n                                                                                                                                    for item35 in item34:\n                                                                                                                                        if type(item35) == type([]):\n                                                                                                                                    for item36 in item35:\n                                                                                                                                        if type(item36) == type([]):\n                                                                                                                                    for item37 in item36:\n                                                                                                                                        if type(item37) == type([]):\n                                                                                                                                    for item38 in item37:\n                                                                                                                                        if type(item38) == type([]):\n                                                                                                                                    for item39 in item38:\n                                                                                                                                        if type(item39) == type([]):\n                                                                                                                                    for item40 in item39:\n                                                                                                                                        if type(item40) == type([]):\n                                                                                                                                    for item41 in item40:\n                                                                                                                                        if type(item41) == type([]):\n                                                                                                                                    for item42 in item41:\n                                                                                                                                        if type(item42) == type([]):\n                                                                                                                                    for item43 in item42:\n                                                                                                                                        if type(item43) == type([]):\n                                                                                                                                    for item44 in item43:\n                                                                                                                                        if type(item44) == type([]):\n                                                                                                                                    for item45 in item44:\n                                                                                                                                        if type(item45) == type([]):\n                                                                                                                                    for item46 in item45:\n                                                                                                                                        if type(item46) == type([]):\n                                                                                                                                    for item47 in item46:\n                                                                                                                                        if type(item47) == type([]):\n                                                                                                                                    for item48 in item47:\n                                                                                                                                        if type(item48) == type([]):\n                                                                                                                                    for item49 in item48:\n                                                                                                                                        if type(item49) == type([]):\n                                                                                                                                    for item50 in item49:\n                                                                                                                                        if type(item50) == type([]):\n                                                                                                                                    for item51 in item50:\n                                                                                                                                        if type(item51) == type([]):\n                                                                                                                                    for item52 in item51:\n                                                                                                                                        if type(item52) == type([]):\n                                                                                                                                    for item53 in item52:\n                                                                                                                                        if type(item53) == type([]):\n                                                                                                                                    for item54 in item53:\n                                                                                                                                        if type(item54) == type([]):\n                                                                                                                                    for item55 in item54:\n                                                                                                                                        if type(item55) == type([]):\n                                                                                                                                    for item56 in item55:\n                                                                                                                                        if type(item56) == type([]):\n                                                                                                                                    for item57 in item56:\n                                                                                                                                        if type(item57) == type([]):\n                                                                                                                                    for item58 in item57:\n                                                                                                                                        if type(item58) == type([]):\n                                                                                                                                    for item59 in item58:\n                                                                                                                                        if type(item59) == type([]):\n                                                                                                                                    for item60 in item59:\n                                                                                                                                        if type(item60) == type([]):\n                                                                                                                                    for item61 in item60:\n                                                                                                                                        if type(item61) == type([]):\n                                                                                                                                    for item62 in item61:\n                                                                                                                                        if type(item62) == type([]):\n                                                                                                                                    for item63 in item62"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    test_freq = {}\n    \n    for i in range(len(test_list)):\n        test_tuple = test_list[i]\n        if not test_tuple in test_freq:\n            test_freq[test_tuple] = 1\n        else:\n            test_freq[test_tuple] += 1\n    \n    return len(test_freq)"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], (int, float, str, list)):\n            freq += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for t in test_list:\n        t.pop()\n    return len(set(map(int, test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #extract number of tuples\n    import collections\n    freq_table = collections.defaultdict(int)\n    for item in test_list:\n        freq_table[item] += 1\n    return freq_table\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += len(i)\n    return sum\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(set(i))\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for data in test_list:\n        if data in freq:\n            freq[data] = freq[data] + 1\n        else:\n            freq[data] = 1\n    return len(freq.keys())\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def helper(t1, t2):\n        '''\n        Parameters\n        ----------\n        t1: A tuple\n        t2: A tuple\n        '''\n        def add_tuples(x,y):\n            '''\n            Helper function to add two tuples to the input tuple.\n            '''\n            return tuple([x[0]+y[0], x[1]+y[1]])\n        return add_tuples(t1, t2)\n    return helper(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(nested1, nested2):\n        result = []\n        # Go through each pair of nested tuples\n        for i in range(len(nested1)):\n            result.append(nested1[i] + nested2[i])\n        return result\n    # Return the result of the function\n    return add_nested_tuples(test_tup1, test_tup2)\n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_1 = test_tup1[0]\n    test_tup1_2 = test_tup1[1]\n    test_tup1_3 = test_tup1[2]\n    test_tup2_1 = test_tup2[0]\n    test_tup2_2 = test_tup2[1]\n    test_tup2_3 = test_tup2[2]\n    test_tup1_1_index = test_tup1_1[0]\n    test_tup1_2_index = test_tup1_2[0]\n    test_tup1_3_index = test_tup1_3[0]\n    test_tup2_1_index = test_tup2_1[0]\n    test_tup2_2_index = test_tup2_2[0]\n    test_tup2_3_index = test_tup2_3[0]\n    for item in range(0, len(test_tup1)):\n        test_tup1[item] = test_tup1_1[item] + test_tup1_2[item] + test_tup1_3[item]\n        test_tup1[item][test_tup1_1_index] = test_tup1_1[item][test_tup1_1_index] + test_tup1_2[item][test_tup1_2_index] + test_tup1_3[item][test_tup1_3_index]\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test_tup1_1_index] = int(test_tup1_1[item][test_tup1_1_index]) + int(test_tup1_2[item][test_tup1_2_index]) + int(test_tup1_3[item][test_tup1_3_index])\n        test_tup1[item][test"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for index, element in enumerate(test_tup1):\n        test_tup2[index][0] = element\n    for index, element in enumerate(test_tup2):\n        test_tup1[index][0] = element\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # start writing your code here\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    tup = test_tup1 + test_tup2\n    return tup\n    pass\n    # write your code here\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError(\"Arguments must be same size\")\n    \n    for i in range(len(test_tup1)):\n        add_tuple = test_tup1[i] + test_tup2[i]\n        test_tup1[i] = add_tuple\n    \n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tuple(add_tuple(t1, t2) for t1, t2 in zip(test_tup1, test_tup2)) for t1 in test_tup1)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup_1 = (1, 2, 3, 4, 5)\n    tup_2 = (6, 7, 8, 9, 10)\n    \n    tup_t1 = tuple(tup_1)\n    tup_t2 = tuple(tup_2)\n    \n    tup_t3 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    \n    #print(tup_1)\n    #print(tup_2)\n    #print(tup_t1)\n    #print(tup_t2)\n    #print(tup_t3)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('---------------------------')\n    print('Adding index wise elements in tuples')\n    print('---------------------------')\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(sum, zip(test_tup1, test_tup2)))"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b == 0: \n        return a\n    else: \n        return minimum(b,a%b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        a,b = b,a\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # Your code here\n    print(\"Minimum number of two elements is\",a,\"and\",b)\n    print(\"Minimum number of elements is\",a+b)\n    if a<b:\n        a,b=b,a\n    print(\"Updated minimum number of elements is\",a,\"and\",b)\n    return a,b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a = a+b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n    a = a-b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a,b = min(a,b) \n    if a>b: \n        a,b = b,a \n    return a,b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    for i in range(a,b):\n        if i%2==0:\n            print(i)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 0\n    else:\n        if a < b:\n            return a\n        else:\n            return b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 0\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 0\n    else:\n        if a < b:\n            return a\n        else:\n            return b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 0\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n        \ndef sum_of_all(nums):   \n    '''\n    Write a python function to find the sum of all numbers in a list.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n    \ndef nth_absolute_value(n,a):   \n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(n-a)\n        \ndef sum_of_all_pairs(nums):   \n    '''\n    Write a python function to find the sum of all numbers in a list.\n    '''\n    sum = 0\n    for i in range(len(nums)-1):\n        sum += nums[i]\n    return sum\n    \ndef number_divisible_by(n, div):   \n    '''\n    Write a python function to find the number of n numbers\n    which are divisible by a given value.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n            if count == div:\n                return True\n            else:\n                return False\n        \ndef is_prime(n):   \n    '''\n    Write a python function to check whether a given number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i**2 <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef factorial_of_primes(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    i = 1\n    total = 1\n    while i <= n:\n        total *= i\n        i += 1\n    return total\n    \ndef is_leap_year(year):   \n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    leap = False\n    if year % 4 == 0:\n        leap = True\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n            else:\n                leap = False\n    return leap\n    \ndef is_leap_year(year):   \n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef rev(n):   \n    '''\n    Write a python function to get the reverse of a number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return rev(n-1)\n    \ndef greatest_digit(n):   \n    '''\n    Write a python function to get the greatest digit of a number.\n    '''\n    n_list = []\n    while n > 0:\n        n_list.append(n % 10)\n        n //= 10\n    return n_list\n    \ndef group_by_character(text):   \n    '''\n    Write a python function to group a string of characters into separate strings.\n    '''\n    grouped_text = []\n    for i in range(len(text)):\n        grouped_text.append(text[i:i + 3])\n    return grouped_text\n    \ndef rotate_string(text):   \n    '''\n    Write a python function to rotate a string.\n    '''\n    for i in range(len(text) - 1, -1, -1):\n        text[i] = text[i + 1]\n    text[0] =''\n    return text\n    \ndef is_palindrome(n):   \n    '''\n    Write a python function to check whether a given number is palindrome.\n    '''\n    if n == n[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(n):   \n    '''\n    Write a python function to check whether a given number is palindrome.\n    '''\n    return n == n[::-1]\n    \ndef is_triangle_number(n):   \n    '''\n    Write a python function to check whether a given number is triangle number.\n    '''\n    if n > 0:\n        if n == n + n:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef triangle_number(n):   \n    '''\n    Write a python function to determine the number of triangles in a number.\n    '''\n    if n > 1:\n        triangle = 3 * n - 2\n        return triangle\n    else:\n        return 0\n    \ndef find_triangle_number(n):   \n    '''\n    Write a python function to determine the number of triangles in a number.\n    '''\n    if n > 0:\n        triangle = 3 * n - 2\n        return triangle\n    else:\n        return 0\n    \ndef triangle_recursive(n, a):   \n    '''\n    Write a python function to find the number of triangles in a number.\n    '''\n    if n > 0:\n        triangle = 3 * n - 2\n        return triangle\n    else:\n        return 0\n    \ndef find_triangle_recursive(n, a):   \n    '''\n    Write a python function to find the number of triangles in a number.\n    '''\n    if n > 0:\n        triangle = 3 * n - 2\n        return triangle\n    else:\n        return 0\n    \ndef maximum_of_two_numbers(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 0\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n        \ndef sum_of_all_numbers(nums):   \n    '''\n    Write a python function to find the sum of all numbers in a list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef is_leap_year(year):   \n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    leap = False\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n            else:\n                leap = False\n        else:\n            leap = True\n    return leap\n    \ndef is_leap_year(year):   \n    '''\n    Write a python function to check whether a given year is a leap year.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                retur"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    if a==b:\n        return 0\n    return (a+b)/2\n    \ndef median(a,b):   \n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n    \ndef median_diff(a,b):   \n    '''\n    Write a python function to find the median difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode(a,b):   \n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    return a if a>b else b\n    \ndef mode_diff(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a<b:\n        return a\n    return b-a\n    \ndef mode_diff_ind(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a<b:\n        return a\n    return b-a\n    \ndef percentile(a,b):   \n    '''\n    Write a python function to find the percentile of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b\n    \ndef percentile_diff(a,b):   \n    '''\n    Write a python function to find the percentile difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_2(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_3(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_4(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_5(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_6(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_7(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_8(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_9(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_10(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_11(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_12(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_13(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_14(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_15(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_16(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_17(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_18(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_19(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_20(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_21(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b-a\n    \ndef mode_diff_ind_22(a,b):   \n    '''\n    Write a python function to find the mode difference of two numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        return a\n    return b"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 1:\n        if tuple1 == tuplex[0]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(tuplex)):\n            if tuplex[i] == tuple1[i]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)!= tuple: \n        raise TypeError('tuplex must be a tuple')\n    elif tuplex[0] == tuplex[1]: \n        return True\n    elif tuplex[0] > tuplex[1]: \n        return tuplex[0] in tuple1\n    else: \n        return tuplex[1] in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_index = 0\n    while tuplex_index < len(tuplex):\n        if tuplex[tuplex_index] == tuple1:\n            return True\n        tuplex_index += 1\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef get_file_path(file_name):\n    '''\n    Return the absolute path of a file\n    '''\n    try:\n        f=open(file_name, 'r')\n    except:\n        print(\"Could not find the file\")\n        quit()\n    else:\n        return file_name\n    finally:\n        f.close()\ndef get_file_content(file_name):\n    '''\n    Return the content of a file\n    '''\n    try:\n        f=open(file_name, 'r')\n    except:\n        print(\"Could not find the file\")\n        quit()\n    else:\n        return f.read()\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    tuple_list = []\n    tuple_list = tuplex[0]\n    \n    for element in tuplex:\n        if element[0] in tuple_list:\n            return True\n        else:\n            return False\n    \n    return False\n    \n    \n    \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #tuple1 = (3, 4)\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \nprint(check_tuplex((2, 4, 3),(2, 3)))"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Check if number is odd\n    if x % 2 == 0: \n        return 'Even' \n    else: \n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2 == 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0:\n        return False\n    else:\n        if x%2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return 'odd'\n    else:\n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print(1)\n    else:\n        print(0)\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # raise NotImplementedError('This function is not implemented yet')\n    \n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0:\n        return \"no parity\"\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = int(x)\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = int(str(n)[::-1])\n    return num"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        temp = n % 10\n        n = n // 10\n        a = n % 10\n        n = n // 10\n        a = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        temp = n % 10\n        n = n // 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 10\n        n = n // 10\n        n = n % 1"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    sum=0\n    num=n\n    while n>0:\n        digit=n%10\n        sum+=digit**3\n        n=n//10\n    return sum\n    \ndef test(solution):\n    assert solution(300) == 108\n    assert solution(55) == 445\n    assert solution(24) == 255\n    assert solution(110) == 619\n    assert solution(300) == 108\n    assert solution(0) == 0\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0: return '0'\n    if n < 10:\n        return str(n)\n    last_digit = n % 10\n    next_digit = n // 10\n    return str(last_digit) + rearrange_bigger(next_digit)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_l = n // 10**len(str(n))\n    n_r = n - n_l*10**len(str(n))\n    return n_l, n_r\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        a = n//10\n        b = n%10\n        if b > a:\n            return a\n        else:\n            return b\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    next_bigger_number = ''\n    next_bigger_number += str(n % 10)\n    n //= 10\n    n = n//10\n    if n:\n        next_bigger_number += str(n % 10)\n    return next_bigger_number\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n + sum(map(lambda x: str(x)[::-1], str(n)[1:-1]))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    elif n == 2:\n        return 1\n    elif n < 10:\n        return n + rearrange_bigger(n - 1)\n    else:\n        n = 10 ** (n - 1)\n        dig = n % 10\n        m = n // 10\n        while m!= 1:\n            n = (10 ** (m - 1) - 1) * n // 10\n            m -= 1\n        n -= 1\n        return n + rearrange_bigger(n - 1)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    count=0\n    for i in range(len(nums1)):\n        count+=1\n        for j in range(len(nums2)):\n            if nums1[i]==nums2[j]:\n                count-=1\n                break\n    return count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # write your code here\n    if len(nums1)==0 or len(nums2)==0:\n        return 0\n    heap = []\n    for i in nums1:\n        heapq.heappush(heap, (i, i))\n    for j in nums2:\n        heapq.heappush(heap, (j, j))\n    ans = 0\n    # print(heap)\n    while len(heap)>0:\n        one, two = heapq.heappop(heap)\n        # print(one, two)\n        ans += 1\n        if k>0 and ans>=k:\n            break\n        if two-one == 0:\n            return ans\n        else:\n            heapq.heappush(heap, (two-one, two))\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Write your code here.\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (-nums1[i], nums1[i]))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pairs = []\n    smallest_pairs_indexes = []\n    heapq.heapify(smallest_pairs)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                continue\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i]*nums2[j], nums1[i], nums2[j]))\n            else:\n                if nums1[i]*nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i]*nums2[j], nums1[i], nums2[j]))\n    result = []\n    for i in range(k):\n        result.append((heapq.heappop(heap)[1], heapq.heappop(heap)[2], heapq.heappop(heap)[0]))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # brute force\n    # O(n^2)\n    # O(n)\n    nums1.sort()\n    nums2.sort()\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    pair = []\n    heapq.heapify(pair)\n    for i in range(k):\n        if pair[0] == nums1[i]:\n            heapq.heappop(pair)\n            heapq.heappush(pair, nums2[i])\n        elif pair[0] == nums2[i]:\n            heapq.heappop(pair)\n            heapq.heappush(pair, nums1[i])\n    return sum(pair)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #Your code here\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    result = []\n    num_dict = {}\n    \n    for num1 in nums1:\n        if num1 not in num_dict:\n            num_dict[num1] = 1\n        else:\n            num_dict[num1] += 1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # The idea is to sort the two array and compare the key value and return it\n    # If key is the same, then it is not a pair\n    # If key is different, then the pair is a pair\n    # if the key is same then we have two pairs\n    #\n    # The function has O(N^2) complexity\n    \n    def smallest_pair(first, second):\n        #\n        # first is sorted\n        # second is sorted\n        #\n        if len(first) < len(second):\n            return second, first\n        else:\n            return first, second\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product += (list1[i][0] * list1[j][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    smallest_product = 0\n    smallest_product_tuple = ()\n    for i in range(len(list1)):\n        if list1[i][1] < smallest_product:\n            smallest_product = list1[i][1]\n            smallest_product_tuple = list1[i]\n    return smallest_product_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    t = 0\n    for i in range(0, len(list1)):\n        t = (list1[i][1] * list1[i][0])\n        print(t)\n        if t < list1[i][1]:\n            list1[i] = (list1[i][0], list1[i][1])\n            t = list1[i][1]\n    return list1[t]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            min_product = min(min_product, list1[i] * list1[j])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    \n    else:\n        min_product = list1[0][0] * list1[1][0]\n        for i in list1[2:]:\n            min_product = min(min_product, i[0] * i[1])\n        return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    min_pair = None\n    for t in list1:\n        if (min_product == None) or (t[1] < min_pair[1]):\n            min_pair = t\n            min_product = t[0]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product=list1[0]\n    for element in list1:\n        if min_product<element:\n            min_product=element\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    else:\n        smallest = list1[0][0] * list1[0][1]\n        smallest_index = 0\n        for i in range(1, len(list1)):\n            if list1[i][0] < smallest:\n                smallest = list1[i][0] * list1[i][1]\n                smallest_index = i\n        return smallest_index * smallest\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    min_product = list1[0][0]\n    min_x = list1[0][1]\n    for x in range(len(list1)):\n        if list1[x][0] > min_product:\n            min_product = list1[x][0]\n            min_x = list1[x][1]\n    return min_product, min_x\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for elem in listval:\n        if elem < minval:\n            minval = elem\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n        return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Write your code here.\n    if listval:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val\n    return None\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for item in listval:\n        if item < min:\n            min = item\n    return min\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for elem in listval:\n        if elem < min_num:\n            min_num = elem\n    return min_num\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for elem in listval:\n        if elem > max_num:\n            max_num = elem\n    return max_num\n    \ndef even(listval):\n    '''\n    Write a function to find the even numbers in a given heterogeneous list.\n    '''\n    even_list = []\n    for elem in listval:\n        if elem % 2 == 0:\n            even_list.append(elem)\n    return even_list\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=0\n    for i in range(len(listval)):\n        if listval[i]<min:\n            min=listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return -1\n    else:\n        min_val = listval[0]\n        for v in listval:\n            if v < min_val:\n                min_val = v\n        return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    if result!= word:\n        result = re.sub(r'([a-z])\\1{2,}', r'\\1_\\2', result)\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Your code here\n    x = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # YOUR CODE HERE\n    return x\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'((?:(?<=[a-z])[A-Z])|(?<=[A-Z])(?=[A-Z][A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z])[A-Z])'\n    return re.sub(pattern, r'\\1 \\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    #build the list of items in snake case\n    #then in every item, replace the number with a lowercase letter\n    #then in every item, replace the number with an uppercase letter\n    #then replace the number with a space.\n    #then in every item, convert the number to lowercase.\n    #then in every item, convert the number to uppercase.\n    #then replace the number with a space.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then replace the number with a space.\n    #then in every item, convert the number to titlecase.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with a space.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then replace the number with a space.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace the number with an uppercase letter.\n    #then in every item, convert the number to titlecase.\n    #then replace th"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'[A-Z][a-z]+'\n    s = re.sub(pattern, '', word)\n    return s[::-1]\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', res)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def camel_to_snake(x):\n        \"\"\"\n        Assumes x is a string\n        Returns a string like'something_dont_exist'\n        \"\"\"\n        return x.replace('_','').title()\n    return camel_to_snake(word)\ndef snake_to_camel_without_lower(word):\n    '''\n    Converts the given snake case string to camel case string without lowercase.\n    '''\n    return snake_to_camel(word.lower())\ndef camel_to_snake(word):\n    '''\n    Assumes word is a string\n    Returns a string like'something_dont_exist'\n    '''\n    # We must return an empty string in case the input is not a string\n    if len(word) == 0:\n        return ''\n    else:\n        # We should be able to return'something'\n        if word[0] == 'd':\n            return snake_to_camel(word)\n        # We are not a snake case\n        else:\n            return word[0].lower() + camel_to_snake(word[1:])\ndef snake_to_camel_without_lower(word):\n    '''\n    Assumes word is a string\n    Returns a string like'something_dont_exist'\n    '''\n    # We must return an empty string in case the input is not a string\n    if len(word) == 0:\n        return ''\n    else:\n        # We should be able to return'something'\n        if word[0] == 'd':\n            return snake_to_camel(word)\n        # We are not a snake case\n        else:\n            return snake_to_camel_without_lower(word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([camel_to_snake(word[0], word[1])] + word[2:] if len(word) >= 2 and word[0] == word[1] else [word])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2 == 1:\n            odd.append(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(1)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    l.sort()\n    s = 0\n    for i in range(len(l)-1):\n        if l[i]%2!= 0:\n            l[i]=l[i]**2\n            s+=1\n        if s == 0:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = []\n    for i in l:\n        if i % 2!= 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    odd_list = []\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l[i] = l[i] // 2\n        if l[i] % 2 == 0:\n            odd_list.append(l[i])\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    print(f\"{l}\\n\")\n    \n    if len(l) > 0:\n        i = 0\n        num = l[0]\n        while i < len(l):\n            if l[i] % 2 == 1:\n                l.pop(i)\n            else:\n                i += 1\n    else:\n        print(\"List is empty\")\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # your code goes here\n    if len(l)<2:\n        return l\n    odd=0\n    for i in l:\n        if i%2==1:\n            odd=odd+1\n            l.remove(i)\n    print(\"Number of odd numbers are: \",odd)\n    return l\nprint(remove_odd([1,2,3,4,5]))\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l[i] = l[i] // 2\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            l[i] = l[i]/2\n        else:\n            new_list.append(l[i])\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_nums = []\n    for element in l:\n        if element % 2 == 0:\n            odd_nums.append(element)\n    return odd_nums\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index = 0\n    if n == 1:\n        return list1[index][0]\n    elif n > 1:\n        while index < len(list1):\n            if list1[index][0] > list1[index - 1][0]:\n                index += 1\n            else:\n                index = 0\n    return list1[index][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        raise IndexError\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    i = 0\n    j = len(list1) - 1\n    \n    while i < n:\n        i += 1\n        j -= 1\n    \n    return list1[j]\n    \ndef create_list_of_tuples(num_tuples):\n    '''\n    Write a function that returns a list of tuples, where each tuple is formed of\n    the first two elements from a given list of tuples.\n    '''\n    lst = []\n    for i in range(num_tuples):\n        tup = tuple(random.randint(0, 10) for i in range(2))\n        lst.append(tup)\n    return lst\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # we first define a function that takes a list of tuples as a parameter\n    # and returns the first n elements of the list, where n is a parameter\n    # passed in by the user.\n    def extract_nth_elem(list1):\n        # Define a variable to hold the first n elements of the list\n        n_elem_list = []\n        # Loop over the given list to extract the nth element\n        for x in list1:\n            # If n is given, add it to the list\n            if n == 1:\n                n_elem_list.append(x[0])\n            else:\n                # If n is not given, then n is 1, then append the element to the list\n                n_elem_list.append(x[0])\n        # return the nth element from the list\n        return n_elem_list\n    \n    return extract_nth_elem(list1)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[list1.index(n)+1:])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return None\n    if n > len(list1):\n        return extract_nth_element(list1, n-1)\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n-1])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(list1)==len(list2) and all(el in list1 for el in list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x = 0\n    while x < len(list1):\n        if list1[x] in list2:\n            print(list1[x])\n            x += 1\n        else:\n            print(list1[x])\n            x += 1\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # write your code here\n    \n    l1 = list1\n    l2 = list2\n    \n    if list1==[]:\n        return True\n    if list2==[]:\n        return True\n    if list1[0]==list2[0]:\n        for i in range(len(list1)):\n            if list1[i]!=list2[i]:\n                return False\n    else:\n        return False\n    \n    return True\n    \ndef second_highest(list1):\n    '''\n    Write a python function to find the second highest value in a sequence.\n    '''\n    \n    # write your code here\n    \n    l1 = list1\n    \n    if l1==[]:\n        return -1\n    if l1[0]==l1[-1]:\n        return l1[-1]\n    \n    for i in range(len(l1)-1):\n        if l1[i+1]>l1[i]:\n            return l1[i+1]\n    \n    return -1\n    \ndef first_highest(list1):\n    '''\n    Write a python function to find the first highest value in a sequence.\n    '''\n    \n    # write your code here\n    \n    l1 = list1\n    \n    if l1==[]:\n        return -1\n    if l1[0]==l1[-1]:\n        return l1[0]\n    \n    for i in range(len(l1)-1):\n        if l1[i+1]<l1[i]:\n            return l1[i+1]\n    \n    return -1\n    \ndef all_values(list1):\n    '''\n    Write a python function to check if all values in a sequence are present in a sequence or not.\n    '''\n    \n    # write your code here\n    \n    l1 = list1\n    \n    if l1==[]:\n        return True\n    if l1[0]==l1[-1]:\n        for i in l1:\n            if i not in l1:\n                return False\n    else:\n        return False\n    \n    return True\n    \ndef reverse(list1):\n    '''\n    Write a python function to reverse a sequence using iteration.\n    '''\n    \n    # write your code here\n    \n    l1 = list1\n    \n    for i in range(len(l1)//2):\n        if i==len(l1)-1:\n            l1.reverse()\n        else:\n            l1.reverse()\n            l1[i],l1[i+1] = l1[i+1],l1[i]\n        \n    return l1\n    \ndef main():\n    print('*'*50)\n    print('Sequence checker')\n    print('*'*50)\n    \n    list1 = eval(input('Enter a list: '))\n    list1 = list(map(int,list1))\n    \n    if list1==[]:\n        print('The list is empty')\n        \n    else:\n        print(f'The list is: {list1}')\n        \n        print('*'*50)\n        \n        print(f'The second highest value in the list is {second_highest(list1)}')\n        print(f'The first highest value in the list is {first_highest(list1)}')\n        print('*'*50)\n        \n        print(f'The all values in the list are: {all_values(list1)}')\n        print(f'The reverse of the list is: {reverse(list1)}')\n        print('*'*50)\n        \n    print('Done')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # your code goes here\n    if len(list1) < len(list2):\n        list2, list1 = list1, list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if len(list1) > len(list2) else False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (list1[0] in list2) or (list1[-1] in list2):\n        return \"Yes\"\n    else:\n        return \"No\"\n    # Write an Python function to check whether a string is a palindrome or not.\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x,y=0,0\n    if len(list1)<len(list2):\n        for i in range(len(list1)):\n            x+=1\n    else:\n        for i in range(len(list2)):\n            y+=1\n    print(x,y)\n    if x>y:\n        return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Create a dictionary for the pair\n    prd = {i: arr[i]*arr[j] for i,j in enumerate(arr)}\n    # sort the dictionary by the keys\n    sorted_prd = sorted(prd.items(), key=lambda x:x[1])\n    return sorted_prd[0][0]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    max_product = arr[0] * arr[1]\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_product:\n                max_product = prod\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = 0\n    for i in range(len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product*arr[i], arr[i])\n    return max_product\n    \n    \narr = [1,3,6,7]\nprint(max_Product(arr))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # initialize dictionary to store values\n    dictionary = {}\n    # initialize value to zero\n    value = 0\n    # iterate through the array\n    for num in arr:\n        # check if num is in dictionary\n        if num in dictionary:\n            # increment value if it is\n            value += 1\n        else:\n            # if it is not in dictionary\n            # add it to dictionary\n            dictionary[num] = 1\n    # return dictionary and the value\n    return (dictionary, value)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    def find_max_product(arr):\n        temp = arr[0]\n        for i in range(1,len(arr)):\n            if arr[i] > temp:\n                temp = arr[i]\n                curr = temp\n            #print(curr)\n        print(curr)\n        return curr\n    max_product = arr[0]\n    #print(max_product)\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                curr = arr[i]\n                #print(curr)\n                #print(arr[j])\n    print(max_product)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    max_prod = -1\n    max_prod_index = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_prod_index = i\n    #print(max_prod_index)\n    return max_prod_index\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # get the length of the array\n    n = len(arr)\n    # initialize the min and max value of the product\n    m1 = min(arr)\n    m2 = max(arr)\n    # create a empty array for the result\n    result = []\n    # set the result to 1\n    result.append(1)\n    # set the result to 0 for the first iteration\n    result.append(0)\n    # loop through the array until the first value is less than or equal to 0\n    for i in range(1, n):\n        # if the first number is less than the current one\n        if arr[i] < m1:\n            # set the value of the first number to the current one\n            result[0] = arr[i]\n        # if the first number is greater than the current one\n        elif arr[i] > m2:\n            # set the value of the first number to the current one\n            result[0] = arr[i]\n        # if the first number is equal to the current one\n        elif arr[i] == m1:\n            # set the value of the first number to the current one\n            result[0] = arr[i]\n    # loop through the array and if the first number is greater than 0\n    for i in range(1, n):\n        # if the first number is greater than 0\n        if arr[i] > 0:\n            # set the product of the first number to the current one\n            result[i] = (result[i - 1] * arr[i])\n        # if the first number is less than 0\n        elif arr[i] < 0:\n            # set the product of the first number to the current one\n            result[i] = (result[i - 1] * m2)\n    # return the maximum product\n    return max(result)\n    "
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Start with arr[0] = 1, arr[1] = 2, arr[2] = 3\n    # \n    # You will take all the values of arr[0], arr[1] and arr[2] and find the product of all the pairs.\n    # For example, if arr is [1,2,3] and the product of arr[0] and arr[1] is 3, then there are three pairs that have the product of arr[0] and arr[1].\n    #\n    # You can assume that you will not have duplicate values in the array.\n    #\n    # If the product of arr[0] and arr[1] is not in the array then return the pair with the highest product.\n    #\n    # Please note that you are allowed to create a new array of size 3 and assume that the following properties hold:\n    #\n    # * 3 elements in the array.\n    # * the product of arr[0] and arr[1] is not in the array.\n    # * arr[0] * arr[1] is not equal to 1.\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maximum = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            max_product = i\n    return max_product, maximum\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    from collections import Counter \n    counter = Counter(Input)\n    return counter.most_common(1)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique = [] \n    for i in range(len(Input)): \n        if Input[i] not in unique: \n            unique.append(Input[i]) \n    return unique\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    set_list = []\n    set_tuple = []\n    for x in Input:\n        set_list.append(x[0])\n    for y in set_list:\n        for z in Input:\n            if y == z[0]:\n                set_tuple.append(z)\n    return set_tuple\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input is a list of tuples.\n    \n    # A, B, C = Input[0], Input[1], Input[2]\n    \n    # First element is the first common element.\n    # Second element is the second common element.\n    \n    # Output is a list of tuples, sorted in order of common element.\n    \n    # For example, if the given list of tuples is [('a', 2), ('b', 2), ('c', 2)], and the input list is [('a', 2), ('b', 1), ('c', 2)] then the function should return the list [('a', 2)], which is a common element in the given list.\n    \n    # Write your solution here.\n    \n    if len(Input)!= 2:\n        return\n    elif type(Input[0]) is not tuple or type(Input[1]) is not tuple:\n        return\n    elif type(Input[0][0]) is not str or type(Input[0][1]) is not int or type(Input[0][2]) is not str or type(Input[0][3]) is not str:\n        return\n    elif len(Input) > 2:\n        return\n    \n    return sorted(list(set(sorted(Input))))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i] == Input[j]:\n                lst.append(Input[i])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # create an empty list\n    output_list = []\n    \n    # iterate over each element and check its position\n    for i in range(len(Input)):\n        for j in range(len(Input[0])):\n            if Input[i][j] == 1:\n                output_list.append(Input[i][:j])\n    # return the list if it is empty\n    if len(output_list) == 0:\n        return []\n    # otherwise return the first element of the list\n    else:\n        return output_list[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #TODO: implement this function.\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Add your code here\n    \n    return(max(set(map(tuple,Input)), key=tuple.count))\n    \ndef group_duplicates(Input):\n    '''\n    Write a function to find all distinct elements of given list of tuple.\n    '''\n    # Add your code here\n    \n    return list(set(map(tuple,Input)))\n    \ndef group_tuple(Input):\n    '''\n    Write a function that takes a list of tuples and returns a list of tuples with\n    the same order as the original list.\n    '''\n    # Add your code here\n    \n    return map(tuple,Input)\n    \ndef dict_composition(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples as a list of tuples.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_length(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples as a list of tuples with the same order as the length of the tuples.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map(tuple,Input))\n    \ndef dict_composition_by_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order_of_tuples_in_order(Input):\n    '''\n    Write a function that takes a list of tuples and returns the dictionary of the\n    tuples in reverse order as a list of tuples with the same order as the tuples\n    in the original list.\n    '''\n    # Add your code here\n    \n    return list(map("
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Input = [(1,2), (1,3), (1,4)]\n    # Output = 3\n    \n    Input = list(map(tuple, Input))\n    Input.sort()\n    # Input = [1, 1, 2, 2, 3, 3, 4, 4, 4]\n    # Output = 1\n    \n    return Input[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first = Input[0]\n    count = 0\n    for element in Input:\n        if element == first:\n            count += 1\n    if count == 0:\n        return None\n    else:\n        return first\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = 0\n    for x in lst:\n        if len(str(x)) > maxlen:\n            maxlen = len(str(x))\n    return maxlen\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_lst = []\n    for i in lst:\n        if len(max_lst) < i:\n            max_lst.append(i)\n    return max_lst\n    \ndef Length_Sort(lst): \n    '''\n    Write a python function to sort a list in Ascending order.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] > lst[j]:\n                temp = lst[j]\n                lst[j] = lst[i]\n                lst[i] = temp\n    return lst\n    \ndef Remove_Zero(lst): \n    '''\n    Write a python function to remove the zeros in a list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            lst.remove(0)\n    return lst\n    \ndef Count_Div_2(lst): \n    '''\n    Write a python function to count the number of divisors in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] % lst[j] == 0:\n                count += 1\n                if lst[j]!= lst[i] + 1:\n                    count += 1\n    return count\n    \ndef Print_List(lst, size): \n    '''\n    Write a python function to print a list in a certain size.\n    '''\n    for i in range(size):\n        print(lst[i], end=\" \")\n    print()\n    return\n    \ndef Sum_List(lst, index): \n    '''\n    Write a python function to find the sum of a list.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_List2(lst, index): \n    '''\n    Write a python function to find the sum of a list.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i] * pow(10,index)\n    return sum\n    \ndef Count_List(lst): \n    '''\n    Write a python function to count the number of elements in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            count += 1\n    return count\n    \ndef Sort_List(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] > lst[j]:\n                temp = lst[j]\n                lst[j] = lst[i]\n                lst[i] = temp\n    return lst\n    \ndef Sort_List2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] > lst[j]:\n                temp = lst[j]\n                lst[j] = lst[i]\n                lst[i] = temp\n    return lst\n    \ndef Reverse_List(lst): \n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(len(lst)//2):\n        lst[i], lst[len(lst) - i - 1] = lst[len(lst) - i - 1], lst[i]\n    return lst\n    \ndef Reverse_List2(lst): \n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(len(lst)//2):\n        lst[i], lst[len(lst) - i - 1] = lst[len(lst) - i - 1], lst[i]\n    return lst\n    \ndef Count_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst)):\n            if lst[j] == 0:\n                count = count + 1\n        if count == 0:\n            for k in range(len(lst)):\n                if lst[k]!= 0:\n                    lst[k] = -1\n    return lst\n    \ndef Count_Sort2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst)):\n            if lst[j] == 0:\n                count = count + 1\n        if count == 0:\n            for k in range(len(lst)):\n                if lst[k]!= 0:\n                    lst[k] = -1\n    return lst\n    \ndef Merge_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if len(lst) <= 1: \n        return lst\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    return Merge_Sort(left) + [right] + Merge_Sort(right)\n    \ndef Merge_Sort2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if len(lst) <= 1: \n        return lst\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    return Merge_Sort2(left) + [right] + Merge_Sort2(right)\n    \ndef Merge_Sort3(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    if len(lst) <= 1: \n        return lst\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    return Merge_Sort3(left) + [right] + Merge_Sort3(right)\n    \ndef Search_List(lst, key): \n    '''\n    Write a python function to search a list for a specific key.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == key:\n            return i\n    return -1\n    \ndef Search_List2(lst, key): \n    '''\n    Write a python function to search a list for a specific key.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == key:\n            return i\n    return -1\n    \ndef Search_List3(lst, key): \n    '''\n    Write a python function to search a list for a specific key.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == key:\n            return i\n    return -1\n    \ndef Search_List4(lst, key): \n    '''\n    Write a python function to search a list for a specific key.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == key:\n            return i\n    return -1\n    \ndef Search_List5(lst, key): \n    '''\n    Write a python function to search a list for a specific key.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == key:\n            return i\n    return -1\n    \ndef Search_List6(lst, key): \n    '''\n    Write a python function to search a list for a specific key.\n    '''\n    for i in range(len(lst)):"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        max_size = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > max_size:\n                max_size = lst[i]\n        return max_size\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = -1\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #return the element of the list\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    mx = lst[0]\n    for elem in lst: \n        if elem > mx:\n            mx = elem\n    return mx\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            return lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen=0\n    for i in lst:\n        if len(str(i))>maxlen:\n            maxlen=len(str(i))\n            maxlen=maxlen+2\n    return maxlen"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    #Create a new list\n    sum_of_numbers=[]\n    \n    #Create a list of integers\n    for numbers in list1:\n        sum_of_numbers.append(numbers)\n    \n    #Get the total sum\n    sum=0\n    for numbers in sum_of_numbers:\n        sum+=numbers\n        \n    #Print the sum\n    print(sum)\n    \n    #Get the length of the list\n    length=len(list1)\n    \n    #Print the total sum multiplied by the length\n    print(sum_of_numbers[length-1]*length)\n    \n    #Return the sum\n    return sum\n    \n    "
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for num in list1:\n        num = round(num)\n    sum = 0\n    for num in list1:\n        sum = sum + num\n    print(sum)\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Your code here\n    for i in list1:\n        i = round(i)\n    return i\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += num\n    print(f\"{total_sum} = {round(total_sum,2)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for n in list1:\n        sum += n\n    print(sum*len(list1))\n    \ndef input_number_one_digit():\n    '''\n    Write a function that accepts a number and prints the smallest number that is more than 9 digits long and returns the number in that position.\n    '''\n    number = input('Input the number you want to find: ')\n    for n in number:\n        if len(n) < 9:\n            return int(n)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    count = 0\n    for i in list1:\n        total = total + i\n        count += 1\n    print(f'The sum of the numbers in {count} numbers = {total}')\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result=0\n    for item in list1:\n        result+=item\n    return result\ndef reverse_list(list1):\n    '''\n    Write a function that takes a list and reverses it.\n    '''\n    return list1[::-1]\ndef find_missing_element(list1):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    return list1[list1.index(min(list1))+1]\ndef total_sum_list(list1):\n    '''\n    Write a function that takes a list and returns the total sum of the numbers in the list.\n    '''\n    total_sum=0\n    for item in list1:\n        total_sum+=item\n    return total_sum\ndef insert_to_end(list1,value):\n    '''\n    Write a function that takes a list and a value and adds the value to the end of the list.\n    '''\n    list1.append(value)\ndef remove_from_end(list1,value):\n    '''\n    Write a function that takes a list and a value and removes the value from the end of the list.\n    '''\n    list1.pop(list1.index(value)+1)\ndef remove_from_beginning(list1):\n    '''\n    Write a function that takes a list and removes the value from the beginning of the list.\n    '''\n    list1.pop(0)\ndef reverse_list(list1):\n    '''\n    Write a function that takes a list and returns the reverse of the list.\n    '''\n    list1.reverse()\ndef add_number_to_end(list1,value):\n    '''\n    Write a function that takes a list and a value and adds the value to the end of the list.\n    '''\n    list1.append(value)\ndef add_number_to_beginning(list1,value):\n    '''\n    Write a function that takes a list and a value and adds the value to the beginning of the list.\n    '''\n    list1.insert(0,value)\ndef sub_list(list1,value):\n    '''\n    Write a function that takes a list and a value and subtracts the value from the end of the list.\n    '''\n    list1.pop()\ndef sub_list(list1,value):\n    '''\n    Write a function that takes a list and a value and subtracts the value from the beginning of the list.\n    '''\n    list1.insert(0,value)\ndef find_the_min_element(list1):\n    '''\n    Write a function that takes a list and returns the minimum element of the list.\n    '''\n    minimum=list1[0]\n    for item in list1:\n        if item<minimum:\n            minimum=item\n    return minimum\ndef find_the_max_element(list1):\n    '''\n    Write a function that takes a list and returns the maximum element of the list.\n    '''\n    maximum=list1[0]\n    for item in list1:\n        if item>maximum:\n            maximum=item\n    return maximum\ndef find_the_mean(list1):\n    '''\n    Write a function that takes a list and returns the mean of the list.\n    '''\n    sum=0\n    for item in list1:\n        sum+=item\n    return sum/len(list1)\ndef sort(list1):\n    '''\n    Write a function that takes a list and returns it in sorted order.\n    '''\n    list1.sort()\ndef find_the_median(list1):\n    '''\n    Write a function that takes a list and returns the median of the list.\n    '''\n    return find_the_mean(list1)/len(list1)\ndef find_the_mode(list1):\n    '''\n    Write a function that takes a list and returns the mode of the list.\n    '''\n    return find_the_mean(list1)/len(list1)\ndef find_the_median(list1):\n    '''\n    Write a function that takes a list and returns the median of the list.\n    '''\n    return find_the_mean(list1)/len(list1)\ndef find_the_mode(list1):\n    '''\n    Write a function that takes a list and returns the mode of the list.\n    '''\n    return find_the_mean(list1)/len(list1)\ndef find_the_median(list1):\n    '''\n    Write a function that takes a list and returns the median of the list.\n    '''\n    return find_the_mean(list1)/len(list1)\ndef find_the_mode(list1):\n    '''\n    Write a function that takes a list and returns the mode of the list.\n    '''\n    return find_the_mean(list1)/len(list1)\ndef find_the_median(list1):\n    '''\n    Write a function that takes a list and returns the median of the list.\n    '''\n    return find_the_mean(list1)/len(list1)\ndef main():\n    print('The program to determine the median and mode of a list.')\n    print('1. Find the minimum element.')\n    print('2. Find the maximum element.')\n    print('3. Find the mean element.')\n    print('4. Find the median.')\n    print('5. Find the mode.')\n    print('6. Find the median.')\n    print('7. Find the mode.')\n    print('8. Find the median.')\n    print('9. Find the mode.')\n    print('10. Find the mode.')\n    print('11. Find the median.')\n    print('12. Find the mode.')\n    print('13. Find the mode.')\n    print('14. Find the median.')\n    print('15. Find the mode.')\n    print('16. Find the median.')\n    print('17. Find the mode.')\n    print('18. Find the median.')\n    print('19. Find the mode.')\n    print('20. Find the median.')\n    print('21. Find the mode.')\n    print('22. Find the median.')\n    print('23. Find the mode.')\n    print('24. Find the median.')\n    print('25. Find the mode.')\n    print('26. Find the mode.')\n    print('27. Find the median.')\n    print('28. Find the mode.')\n    print('29. Find the mode.')\n    print('30. Find the median.')\n    print('31. Find the mode.')\n    print('32. Find the median.')\n    print('33. Find the mode.')\n    print('34. Find the median.')\n    print('35. Find the mode.')\n    print('36. Find the mode.')\n    print('37. Find the median.')\n    print('38. Find the mode.')\n    print('39. Find the median.')\n    print('40. Find the mode.')\n    print('41. Find the median.')\n    print('42. Find the mode.')\n    print('43. Find the median.')\n    print('44. Find the mode.')\n    print('45. Find the median.')\n    print('46. Find the mode.')\n    print('47. Find the median.')\n    print('48. Find the mode.')\n    print('49. Find the median.')\n    print('50. Find the mode.')\n    print('51. Find the median.')\n    print('52. Find the mode.')\n    print('53. Find the median.')\n    print('54. Find the mode.')\n    print('55. Find the median.')\n    print('56. Find the mode.')\n    print('57. Find the median.')\n    print('58. Find the mode.')\n    print('59. Find the median.')\n    print('60. Find the mode.')\n    print('61. Find the median.')\n    print('62. Find the mode.')\n    print('63. Find the median.')\n    print('64. Find the mode.')\n    print('65. Find the median.')\n    print('66. Find the mode.')\n    print('67. Find the median.')\n    print('68. Find the mode.')\n    print('69"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_sum = 0\n    list1_length = len(list1)\n    for i in range(0, list1_length):\n        list1_sum = list1_sum + list1[i]\n    print(list1_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    sum1 = 0\n    i = 0\n    while i < len(list1):\n        list2.append(list1[i])\n        i += 1\n    i = 0\n    while i < len(list1):\n        sum1 += list1[i] * len(list1)\n        i += 1\n    print(\"The total sum of the number is:\", sum1)\n    print(\"The total length of the list:\", len(list2))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = sorted(list1)\n    sum_of_list = 0\n    length_of_list = len(list1)\n    for i in range(len(list1)):\n        sum_of_list += list1[i]\n    print(\"The total sum of all the numbers is \" + str(sum_of_list*length_of_list))\n    return sum_of_list * length_of_list\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return cube_Sum(n-1) + cube_Sum(n-2) + cube_Sum(n-3)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum\n    \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    n = int(n)\n    while n >= 1:\n        a += n**3\n        n -= 1\n    return a\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(input(\"Enter the number : \"))\n    if n<=0:\n        print(\"Invalid input\")\n    elif n==0:\n        print(\"The sum of even numbers is : \",n)\n    elif n==1:\n        print(\"The sum of odd numbers is : \",n)\n    else:\n        sum_of_even = 0\n        for i in range(1,n+1,2):\n            sum_of_even = sum_of_even + i\n        print(\"The sum of odd numbers is : \", sum_of_even)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n**3\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '\\n'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = \"\"\n    for i in test_tup:\n        s += i\n        s += \" \"\n    return s\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + \":\" + str(test_tup[1])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat = ()\n    for element in test_tup:\n        concat += element\n    return concat\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(len(test_tup)):\n        if i < (len(test_tup)-1):\n            test_tup[i] = test_tup[i][:test_tup[i][-1]]\n        else:\n            test_tup[i] = test_tup[i][:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple = ()\n    for el in test_tup:\n        tuple += el\n    return tuple\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for each in test_tup:\n        test_str += each + '\\n'\n    return test_str\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2])\n    \ndef get_string_length(string):\n    '''\n    Write a function to get the length of a string.\n    '''\n    return len(string)\n    \ndef get_number_of_characters(string):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return len(string)\n    \ndef get_all_words(string):\n    '''\n    Write a function that returns all the words from a string.\n    '''\n    return string.split()\n    \ndef remove_double_spaces(string):\n    '''\n    Write a function to remove double spaces from a string.\n    '''\n    return \"\".join(string.split())\n    \ndef remove_punctuation(string):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return string.translate(remove_punctuation_dict)\n    \ndef remove_numbers(string):\n    '''\n    Write a function that removes numbers from a string.\n    '''\n    return string.replace(str(number), '')\n    \ndef remove_chars(string,chars):\n    '''\n    Write a function to remove characters from a string.\n    '''\n    return \"\".join([c for c in string if c not in chars])\n    \ndef remove_symbol(string):\n    '''\n    Write a function that removes symbols from a string.\n    '''\n    return string.replace('!','!\\n')\n    \ndef count_words(string):\n    '''\n    Write a function that counts the number of words in a string.\n    '''\n    return len(string.split())\n    \ndef count_symbols(string):\n    '''\n    Write a function that counts the number of symbols in a string.\n    '''\n    return len(string) - string.count(' ') - string.count('\\n') - string.count('.') - string.count('!') - string.count(':') - string.count(';') - string.count('?') - string.count('@') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('$') - string.count('%') - string.count('&') - string.count('*') - string.count('+') - string.count('-') - string.count('=') - string.count(';') - string.count('<') - string.count('>') - string.count('?') - string.count('&') - string.count('!') - string.count('#') - string.count('"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(test_tup)\n    print(test_tup[0].strip())\n    return\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # get the first element and remove the delimiter\n    tuple1 = test_tup[0]\n    test_tup[0] = tuple1[:-1]\n    return tuple(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math \n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def find_Average_Of_Cube(n):\n        if n < 0:\n            return\n        if n == 0:\n            return 0\n        return n * find_Average_Of_Cube(n - 1)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 1\n    for i in range(1,n+1):\n        s = s + i\n    s = s/n\n    return s\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 1\n    for i in range(n):\n        cube = cube * 3 + 1\n    return cube / 3\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    my_list = []\n    for x in range(n):\n        my_list.append(x**3)\n    print(my_list)\n    total = 0\n    for y in my_list:\n        total += y\n    average = total/len(my_list)\n    print(\"The average of cubes is: \", average)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += i**3\n    return s/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum += i**3\n    return sum/n\n    \nprint(find_Average_Of_Cube(9))\n    \n    \n    \n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube=1\n    for i in range(0,n):\n        cube=cube+i\n    return cube/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [int(n)**3 for n in range(1, n+1)]\n    total = sum(cubes)\n    average = total / n\n    print(average)\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Code here\n    return (test_tuple[0])\n    \ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    # Code here\n    return (test_tuple[1])\n    \ndef extract_latter(test_tuple):\n    '''\n    Write a function to extract only the latter index element of each string in the given tuple.\n    '''\n    # Code here\n    return (test_tuple[2])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x:x[-1],test_tuple))"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    (s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) = test_tuple\n    return [s2[2], s3[3], s4[4], s5[5], s6[6], s7[7], s8[8], s9[9], s10[10]]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize the empty list for rear index\n    rear = []\n    # Iterate through the tuple and extract the string in rear index\n    for item in test_tuple:\n        if item in rear:\n            rear.remove(item)\n        else:\n            rear.append(item)\n    # Return the list\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    print(f'{test_tuple}', end='\\n\\n')\n    \n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_str = list()\n    for i in range(0, len(test_tuple)):\n        if i == (len(test_tuple) - 1):\n            rear_str.append(test_tuple[i])\n        else:\n            rear_str.append(test_tuple[i][-1])\n    return(rear_str)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = {}\n    for key in test_tuple:\n        temp = []\n        for i in range(len(test_tuple[key])):\n            if test_tuple[key][i] in rear:\n                temp.append(rear[test_tuple[key][i]])\n            else:\n                temp.append(test_tuple[key][i])\n        rear[test_tuple[key]] = temp\n    return(rear)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = list(test_tuple)\n    for index, element in enumerate(test_tuple):\n        if element == \"Rear\":\n            test_tuple[index] = test_tuple[index].split()[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == str:\n            result.append(i[-1])\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    l = list(test_tuple)\n    r = []\n    r.append(l[0])\n    for i in range(1,len(l),1):\n        r.append(l[i])\n    return r\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        if i == x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    i = 0\n    while i < len(list1):\n        if list1[i] == x:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count = count + 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Initialize counter with 0\n    cnt = 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Your code here\n    c=0\n    for i in range(len(list1)):\n        if list1[i][x] == 1:\n            c+=1\n    return c\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Your code here\n    c=0\n    for i in range(len(list1)):\n        if list1[i][x] == 1:\n            if (len(list1[i]) == 0):\n                c+=1\n    return c\n    \n    \n    \ndef count_element_in_list3(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Your code here\n    c=0\n    for i in range(len(list1)):\n        if list1[i][x] == 1:\n            if (len(list1[i]) == 0):\n                c+=1\n    return c\n    \n    \n    \ndef swap_element(list1, x, y): \n    '''\n    Write a function to swap the value of an element in a list.\n    '''\n    # Your code here\n    list1[x], list1[y] = list1[y], list1[x]\n    return list1\n    \n    \n    \ndef array_contains_element(list1, x):\n    '''\n    Write a function to determine if a list contains a particular element.\n    '''\n    # Your code here\n    return list1[x] == 1\n    \n    \n    \ndef get_sum_of_elements(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum\n    \n    \n    \ndef get_sum_of_elements2(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][0]\n    return sum\n    \n    \n    \ndef get_sum_of_elements3(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][1]\n    return sum\n    \n    \n    \ndef get_sum_of_elements4(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][2]\n    return sum\n    \n    \n    \ndef get_sum_of_elements5(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][3]\n    return sum\n    \n    \n    \ndef get_sum_of_elements6(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][4]\n    return sum\n    \n    \n    \ndef get_sum_of_elements7(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][5]\n    return sum\n    \n    \n    \ndef get_sum_of_elements8(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][6]\n    return sum\n    \n    \n    \ndef get_sum_of_elements9(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][7]\n    return sum\n    \n    \n    \ndef get_sum_of_elements10(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][8]\n    return sum\n    \n    \n    \ndef get_sum_of_elements11(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][9]\n    return sum\n    \n    \n    \ndef get_sum_of_elements12(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][10]\n    return sum\n    \n    \n    \ndef get_sum_of_elements13(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][11]\n    return sum\n    \n    \n    \ndef get_sum_of_elements14(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][12]\n    return sum\n    \n    \n    \ndef get_sum_of_elements15(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][13]\n    return sum\n    \n    \n    \ndef get_sum_of_elements16(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][14]\n    return sum\n    \n    \n    \ndef get_sum_of_elements17(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][15]\n    return sum\n    \n    \n    \ndef get_sum_of_elements18(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][16]\n    return sum\n    \n    \n    \ndef get_sum_of_elements19(list1):\n    '''\n    Write a function to return the sum of all of the elements in a list.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(lis"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    sublist_count = 0\n    for sublist in list1:\n        if x in sublist:\n            sublist_count += 1\n    return sublist_count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == x:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # for n in nums:\n    #     if n % 2 == 1:\n    #         nums.remove(n)\n    return [n for n in nums if n % 2!= 1]\n    # return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for i in nums:\n        if i % 2 == 1:\n            filtered_nums.append(i)\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x:x%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = nums[i]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = list()\n    filtered_nums = [i for i in nums if i % 2 == 1]\n    return filtered_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_list = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_list.append(num)\n    return filtered_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Construct pattern for date\n    date_pattern = r\"(\\d{4}-\\d{2}-\\d{2})$\"\n    # Convert to date\n    date = re.compile(date_pattern)\n    match = date.search(dt)\n    if match:\n        d,m,y = match.groups()\n        dt = \"{}-{}-{}\".format(d,m,y)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    if dt[:2] == '12':\n        return dt\n    else:\n        return dt[:6] + \"-\" + dt[6:8] + \"-\" + dt[8:10] + \"-\" + dt[10:12]\n    \n    # return dt[:6] + \"-\" + dt[6:8] + \"-\" + dt[8:10] + \"-\" + dt[10:12]\ndef change_datetime_format(dt):\n    '''\n    Write a function to convert a datetime of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    # parse the date and time\n    p = re.compile(\"(?P<d>\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}|0))?)\")\n    m = p.search(dt)\n    if m == None:\n        return dt\n    else:\n        return change_date_format(m.group('d')) + \" \" + change_date_format(m.group('m')) + \" \" + change_date_format(m.group('y'))\n    \n    # parse the date and time\n    p = re.compile(\"(?P<d>\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}|0))?)\")\n    m = p.search(dt)\n    if m == None:\n        return dt\n    else:\n        return change_date_format(m.group('d')) + \" \" + change_date_format(m.group('m')) + \" \" + change_date_format(m.group('y'))\n    \n    # parse the date and time\n    p = re.compile(\"(?P<d>\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}|0))?)\")\n    m = p.search(dt)\n    if m == None:\n        return dt\n    else:\n        return change_date_format(m.group('d')) + \" \" + change_date_format(m.group('m')) + \" \" + change_date_format(m.group('y'))\n    \n    # parse the date and time\n    p = re.compile(\"(?P<d>\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}|0))?)\")\n    m = p.search(dt)\n    if m == None:\n        return dt\n    else:\n        return change_date_format(m.group('d')) + \" \" + change_date_format(m.group('m')) + \" \" + change_date_format(m.group('y'))\n    \n    # parse the date and time\n    p = re.compile(\"(?P<d>\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}|0))?)\")\n    m = p.search(dt)\n    if m == None:\n        return dt\n    else:\n        return change_date_format(m.group('d')) + \" \" + change_date_format(m.group('m')) + \" \" + change_date_format(m.group('y'))\n    \n    # parse the date and time\n    p = re.compile(\"(?P<d>\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}(?:\\d{1,2}|\\d{1,2}:\\d{1,2}|0))?)\")\n    m = p.search(dt)\n    if m == None:\n        return dt\n    else:\n        return change_date_format(m.group('d')) + \" \" + change_date_format(m.group('m')) + \" \" + change_date_format(m.group('y'))\n    \ndef change_datetime_format_to_date(dt):\n    '''\n    Write a function to convert a datetime of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    if dt[:2] == '12':\n        return dt\n    else:\n        return dt[:6] + \"-\" + dt[6:8] + \"-\" + dt[8:10] + \"-\" + dt[10:12]\n    \n    # return dt[:6] + \"-\" + dt[6:8] + \"-\" + dt[8:10] + \"-\" + dt[10:12]\ndef change_time_format(t):\n    '''\n    Write a function to convert a time of hh:mm:ss format to hh:mm:ss format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    return t[:2] + \":\" + t[2:4] + \":\" + t[4:6] + \":\" + t[6:8]\n    \n    # return t[:2] + \":\" + t[2:4] + \":\" + t[4:6] + \":\" + t[6:8]\ndef change_time_format_to_date(t):\n    '''\n    Write a function to convert a time of hh:mm:ss format to dd-mm-yyyy format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    if t[:2] == '12':\n        return change_datetime_format(t)\n    else:\n        return change_time_format(t)\n    \n    # return change_datetime_format(t)\ndef time_from_date(dt):\n    '''\n    Write a function to convert a datetime of yyyy-mm-dd format to hh:mm:ss format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    if dt[:2] == '12':\n        return dt\n    else:\n        return change_time_format(dt[:2]) + \":\" + dt[2:4] + \":\" + dt[4:6] + \":\" + dt[6:8]\n    \n    # return change_time_format(dt[:2]) + \":\" + change_time_format(dt[2:4]) + \":\" + change_time_format(dt[4:6]) + \":\" + change_time_format(dt[6:8])\ndef datetime_from_time(t):\n    '''\n    Write a function to convert a time of hh:mm:ss format to dd-mm-yyyy format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    if t[:2] == '12':\n        return change_time_format_to_date(t)\n    else:\n        return change_time_format(t)\n    \n    # return change_time_format_to_date(t)\ndef time_from_datetime(dt):\n    '''\n    Write a function to convert a datetime of yyyy-mm-dd format to hh:mm:ss format.\n    '''\n    # TODO: replace the format string with a regex.\n    \n    if dt[:2] == '12':\n        return dt\n    else:\n        return change_datetime_format(dt"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not isinstance(dt, str):\n        raise TypeError('Input must be of type string.')\n    if not re.match('^\\d{4}-\\d{2}-\\d{2}$', dt):\n        raise ValueError('Input must be of type string.')\n    \n    output_format = '%d-%m-%Y'\n    \n    return dt.split('-')[0] + output_format + dt.split('-')[1]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    re_date = re.compile(r'^(0?[1-9]|[12][0-9]|3[01])[-](0?[1-9]|1[012])\\d{2}-(0?[1-9]|[12][0-9]|3[01])\\d{2}$')\n    \n    if re_date.match(dt):\n        match = re_date.match(dt)\n        dt = match.group()\n        dt = dt.split('-')\n        dt[0] = str(int(dt[0]) - 1)\n        dt[1] = '0'+dt[1]\n        return dt\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #code\n    d_list = dt.split('-')\n    d_list[1] = d_list[1].zfill(2)\n    d_list[2] = d_list[2].zfill(2)\n    \n    return dt.replace('-','') + '-' + d_list[2] + '-' + d_list[1]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression to match dates\n    date_regex = re.compile(r'''\n        ^(\\d{4})\n        (\\d{2})\n        (\\d{2})\n        ((0?[1-9]|1[012])0?[1-9])\n        (\n            (\n                (\n                    ((0?[1-9])\n                    |(0?[1-9]|1[012-9]|[12][0-9]|3[01-9]|[01][0-9]|[02][0-9])\n                    |(1[0-2])\n                    |(1[0-9])\n                    |(2[0-3]))\n                )\n            )\n        )\n        (\n            (\n                (\n                    (0?[1-9])\n                    |(0?[1-9]|1[012-9]|[12][0-9]|3[01-9]|[01][0-9])\n                    |(1[0-2])\n                    |(1[0-9])\n                    |(2[0-3])\n                    |(3[01-2])\n                )\n            )\n        )\n        (\n            (\n                ((0?[1-9])\n                |(0?[1-9]|1[012-9]|[12][0-9]|3[01-9]|[01][0-9])\n                |(1[0-2])\n                |(1[0-9])\n                |(2[0-3])\n                |(3[01-2])\n                |(3[01-9])\n                |(4[01-8])\n                |(4[02-9])\n                |(4[03-9])\n                |(4[04-9])\n                |(4[05-9])\n                |(4[06-9])\n                |(4[07-9])\n                |(4[08-9])\n                |(4[09-9])\n                |(4[10-9])\n                |(4[11-9])\n                |(4[12-9])\n                |(4[13-9])\n                |(4[14-9])\n                |(4[15-9])\n                |(4[16-9])\n                |(4[17-9])\n                |(4[18-9])\n                |(4[19-9])\n                |(4[20-9])\n                |(4[21-9])\n                |(4[22-9])\n                |(4[23-9])\n                |(4[24-9])\n                |(4[25-9])\n                |(4[26-9])\n                |(4[27-9])\n                |(4[28-9])\n                |(4[29-9])\n                |(4[30-9])\n                |(4[31-9])\n                |(4[32-9])\n                |(4[33-9])\n                |(4[34-9])\n                |(4[35-9])\n                |(4[36-9])\n                |(4[37-9])\n                |(4[38-9])\n                |(4[39-9])\n                |(4[40-9])\n                |(4[41-9])\n                |(4[42-9])\n                |(4[43-9])\n                |(4[44-9])\n                |(4[45-9])\n                |(4[46-9])\n                |(4[47-9])\n                |(4[48-9])\n                |(4[49-9])\n                |(4[50-9])\n                |(4[51-9])\n                |(4[52-9])\n                |(4[53-9])\n                |(4[54-9])\n                |(4[55-9])\n                |(4[56-9])\n                |(4[57-9])\n                |(4[58-9])\n                |(4[59-9])\n                |(4[60-9])\n                |(4[61-9])\n                |(4[62-9])\n                |(4[63-9])\n                |(4[64-9])\n                |(4[65-9])\n                |(4[66-9])\n                |(4[67-9])\n                |(4[68-9])\n                |(4[69-9])\n                |(4[70-9])\n                |(4[71-9])\n                |(4[72-9])\n                |(4[73-9])\n                |(4[74-9])\n                |(4[75-9])\n                |(4[76-9])\n                |(4[77-9])\n                |(4[78-9])\n                |(4[79-9])\n                |(4[80-9])\n                |(4[81-9])\n                |(4[82-9])\n                |(4[83-9])\n                |(4[84-9])\n                |(4[85-9])\n                |(4[86-9])\n                |(4[87-9])\n                |(4[88-9])\n                |(4[89-9])\n                |(4[90-9])\n                |(4[91-9])\n                |(4[92-9])\n                |(4[93-9])\n                |(4[94-9])\n                |(4[95-9])\n                |(4[96-9])\n                |(4[97-9])\n                |(4[98-9])\n                |(4[99-9])\n                |(4[100-9])\n                |(4[101-9])\n                |(4[102-9])\n                |(4[103-9])\n                |(4[104-9])\n                |(4[105-9])\n                |(4[106-9])\n                |(4[107-9])\n                |(4[108-9])\n                |(4[109-9])\n                |(4[110-9])\n                |(4[111-9])\n                |(4[112-9])\n                |(4[113-9])\n                |(4[114-9])\n                |(4[115-9])\n                |(4[116-9])\n                |(4[117-9])\n                |(4[118-9])\n                |(4[119-9])\n                |(4[120-9])\n                |(4[121-9])\n                |(4[122-9])\n                |(4[123-9])\n                |(4[124-9])\n                |(4[125-9])\n                |(4[126-9])\n                |(4[127-9])\n                |(4[128-9])\n                |(4[129-9])\n                |(4[130-9])\n                |(4[131-9])\n                |(4[132-9])\n                |(4[133-9])\n                |(4[134-9])\n                |(4[135-9])\n                |(4[136-9])\n                |(4[137-9])\n                |(4[138-9])\n                |(4[139-9])\n                |(4[140-9])\n                |(4[141-9])\n                |(4[142-9])\n                |(4[143-9])\n                |(4[144-9])\n                |(4[145-9])\n                |(4[146-9])\n                |(4[147-9])\n                |(4[148-9])\n                |(4[149-9])\n                |(4[150-9])\n                |(4[151-9])\n                |(4[152-9])\n                |(4[153-9])\n                |(4[154-9])\n                |(4[155-9])\n                |(4[156-9])\n                |(4[157-9])\n                |(4[158-9])\n                |(4[159-9])\n                |(4[160-9])\n                |(4[16"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt).split('-')\n    if dt[0] == '' or dt[0] =='':\n        dt = dt[2] + '-' + dt[1] + '-' + dt[0]\n    else:\n        dt = dt[2] + '-' + dt[1] + '-' + dt[0] + '-' + dt[3]\n    return dt\n    \ndef change_date_format_dd(dt):\n    '''\n    Write a function to convert a date of dd-mm-yyyy format to yyyy-mm-dd format.\n    '''\n    dt = str(dt).split('-')\n    if dt[0] == '' or dt[0] =='':\n        dt = dt[1] + '-' + dt[2] + '-' + dt[0] + '-' + dt[3]\n    else:\n        dt = dt[1] + '-' + dt[2] + '-' + dt[0] + '-' + dt[3] + '-' + dt[4]\n    return dt\n    \ndef change_date_format_dd_mm(dt):\n    '''\n    Write a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n    '''\n    dt = str(dt).split('-')\n    if dt[0] == '' or dt[0] =='':\n        dt = dt[1] + '-' + dt[2] + '-' + dt[3] + '-' + dt[4]\n    else:\n        dt = dt[1] + '-' + dt[2] + '-' + dt[3] + '-' + dt[4] + '-' + dt[5]\n    return dt\n    \ndef change_date_format_dd_mm_yy(dt):\n    '''\n    Write a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n    '''\n    dt = str(dt).split('-')\n    if dt[0] == '' or dt[0] =='':\n        dt = dt[1] + '-' + dt[2] + '-' + dt[3] + '-' + dt[4] + '-' + dt[5] + '-' + dt[6]\n    else:\n        dt = dt[1] + '-' + dt[2] + '-' + dt[3] + '-' + dt[4] + '-' + dt[5] + '-' + dt[6] + '-' + dt[7]\n    return dt\n    \ndef change_date_format_yyyy(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt).split('-')\n    if dt[0] == '' or dt[0] =='':\n        dt = dt[1] + '-' + dt[2] + '-' + dt[0] + '-' + dt[3]\n    else:\n        dt = dt[1] + '-' + dt[2] + '-' + dt[0] + '-' + dt[3] + '-' + dt[4]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Remove the leading zeros from the date\n    # date_string = re.sub(r'^0', '', dt)\n    # date_string = re.sub(r'^0', '', dt)\n    # convert_dt = dt.split('-')\n    # d = int(convert_dt[0])\n    # m = int(convert_dt[1])\n    # y = int(convert_dt[2])\n    # date = date_string\n    # # check for year\n    # if int(date[2]) == 0:\n    #     date[2] = y\n    #     if int(date[1]) == 0:\n    #         date[1] = m\n    #         date[0] = d\n    #     else:\n    #         date[1] = m\n    #         date[0] = d\n    #     return date\n    # # check for month\n    # elif int(date[1]) == 0:\n    #     date[1] = y\n    #     if int(date[0]) == 0:\n    #         date[0] = m\n    #         date[2] = d\n    #     else:\n    #         date[0] = m\n    #         date[2] = d\n    #     return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime(\"%d-%m-%Y\")\ndef change_string_format(string, base, suffix):\n    '''\n    Write a function to convert a string into a certain format.\n    '''\n    date_regex = re.compile(\"\\d{4}-\\d{2}-\\d{2}\")\n    string = string.lower()\n    if base == \"y\":\n        string = string.replace(\"a\", \"A\")\n        string = string.replace(\"b\", \"B\")\n        string = string.replace(\"c\", \"C\")\n        string = string.replace(\"d\", \"D\")\n        string = string.replace(\"e\", \"E\")\n        string = string.replace(\"f\", \"F\")\n        string = string.replace(\"g\", \"G\")\n        string = string.replace(\"h\", \"H\")\n        string = string.replace(\"i\", \"I\")\n        string = string.replace(\"j\", \"J\")\n        string = string.replace(\"k\", \"K\")\n        string = string.replace(\"l\", \"L\")\n        string = string.replace(\"m\", \"M\")\n        string = string.replace(\"n\", \"N\")\n        string = string.replace(\"o\", \"O\")\n        string = string.replace(\"p\", \"P\")\n        string = string.replace(\"q\", \"Q\")\n        string = string.replace(\"r\", \"R\")\n        string = string.replace(\"s\", \"S\")\n        string = string.replace(\"t\", \"T\")\n        string = string.replace(\"u\", \"U\")\n        string = string.replace(\"v\", \"V\")\n        string = string.replace(\"w\", \"W\")\n        string = string.replace(\"x\", \"X\")\n        string = string.replace(\"y\", \"Y\")\n        string = string.replace(\"z\", \"Z\")\n        string = string.replace(\"\u00f1\", \"\u00d1\")\n        string = string.replace(\"\u00f1\", \"\u00d1\")\n    elif base == \"m\":\n        string = string.replace(\"A\", \"a\")\n        string = string.replace(\"B\", \"b\")\n        string = string.replace(\"C\", \"c\")\n        string = string.replace(\"D\", \"d\")\n        string = string.replace(\"E\", \"e\")\n        string = string.replace(\"F\", \"f\")\n        string = string.replace(\"G\", \"g\")\n        string = string.replace(\"H\", \"h\")\n        string = string.replace(\"I\", \"i\")\n        string = string.replace(\"J\", \"j\")\n        string = string.replace(\"K\", \"k\")\n        string = string.replace(\"L\", \"l\")\n        string = string.replace(\"M\", \"m\")\n        string = string.replace(\"N\", \"n\")\n        string = string.replace(\"O\", \"o\")\n        string = string.replace(\"P\", \"p\")\n        string = string.replace(\"Q\", \"q\")\n        string = string.replace(\"R\", \"r\")\n        string = string.replace(\"S\", \"s\")\n        string = string.replace(\"T\", \"t\")\n        string = string.replace(\"U\", \"u\")\n        string = string.replace(\"V\", \"v\")\n        string = string.replace(\"W\", \"w\")\n        string = string.replace(\"X\", \"x\")\n        string = string.replace(\"Y\", \"y\")\n        string = string.replace(\"Z\", \"z\")\n        string = string.replace(\"\u00f1\", \"\u00f1\")\n    elif base == \"m\":\n        string = string.replace(\"A\", \"a\")\n        string = string.replace(\"B\", \"b\")\n        string = string.replace(\"C\", \"c\")\n        string = string.replace(\"D\", \"d\")\n        string = string.replace(\"E\", \"e\")\n        string = string.replace(\"F\", \"f\")\n        string = string.replace(\"G\", \"g\")\n        string = string.replace(\"H\", \"h\")\n        string = string.replace(\"I\", \"i\")\n        string = string.replace(\"J\", \"j\")\n        string = string.replace(\"K\", \"k\")\n        string = string.replace(\"L\", \"l\")\n        string = string.replace(\"M\", \"m\")\n        string = string.replace(\"N\", \"n\")\n        string = string.replace(\"O\", \"o\")\n        string = string.replace(\"P\", \"p\")\n        string = string.replace(\"Q\", \"q\")\n        string = string.replace(\"R\", \"r\")\n        string = string.replace(\"S\", \"s\")\n        string = string.replace(\"T\", \"t\")\n        string = string.replace(\"U\", \"u\")\n        string = string.replace(\"V\", \"v\")\n        string = string.replace(\"W\", \"w\")\n        string = string.replace(\"X\", \"x\")\n        string = string.replace(\"Y\", \"y\")\n        string = string.replace(\"Z\", \"z\")\n        string = string.replace(\"\u00f1\", \"\u00f1\")\n    return string\ndef change_time_format(time):\n    '''\n    Write a function to convert a time of HH:MM:SS format to dd-mm-yyyy format.\n    '''\n    if time == '0':\n        return \"00-00-00\"\n    time = time.replace('.', '-')\n    time = time.replace(':', '-')\n    time = time.replace('h', 'h')\n    time = time.replace('m','m')\n    time = time.replace('s','s')\n    return time\ndef change_date_format_many(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime(\"%d-%m-%Y\")\ndef change_time_format_many(time):\n    '''\n    Write a function to convert a time of HH:MM:SS format to dd-mm-yyyy format.\n    '''\n    return time.replace('.', '-')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = '%Y-%m-%d'\n    return re.sub(date_format, 'dd-mm-yyyy', dt)\ndef convert_to_date(dt):\n    '''\n    Write a function that converts a date into a standard format like yyyy-mm-dd.\n    '''\n    date_format = '%Y-%m-%d'\n    return re.sub(date_format, 'dd-mm-yyyy', dt)\ndef make_date(date):\n    '''\n    Write a function that transforms a date into standard format like yyyy-mm-dd.\n    '''\n    date_format = '%Y-%m-%d'\n    return re.sub(date_format, 'dd-mm-yyyy', date)\ndef make_date_list(dates):\n    '''\n    Write a function that transform a list of dates into standard format like yyyy-mm-dd.\n    '''\n    date_list = []\n    for d in dates:\n        date_list.append(make_date(d))\n    return date_list\ndef format_to_list(dt):\n    '''\n    Write a function that converts a standard format date into a list of dates.\n    '''\n    date_format = '%Y-%m-%d'\n    return re.sub(date_format, 'dd-mm-yyyy', dt).split('-')\ndef month_year(dt):\n    '''\n    Convert a date into a list of month, year format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef month_number(dt):\n    '''\n    Convert a date into a list of month, year format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef month_weekday(dt):\n    '''\n    Convert a date into a list of month, week day format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef is_weekday(dt):\n    '''\n    Convert a date into a list of week day format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef weekday_number(dt):\n    '''\n    Convert a date into a list of weekday number format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef weekday_date(dt):\n    '''\n    Convert a date into a list of weekday date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef weekday_month(dt):\n    '''\n    Convert a date into a list of weekday month format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_month(dt):\n    '''\n    Convert a date into a list of date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_weekday(dt):\n    '''\n    Convert a date into a list of date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef month_year_to_weekday(dt):\n    '''\n    Convert a date into a list of date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef is_weekend(dt):\n    '''\n    Convert a date into a list of week day format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef weekend_number(dt):\n    '''\n    Convert a date into a list of weekend number format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef weekend_date(dt):\n    '''\n    Convert a date into a list of weekend date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef weekend_month(dt):\n    '''\n    Convert a date into a list of weekend month format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef time_to_datetime(dt):\n    '''\n    Convert a date into a list of date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_time(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_time_weekday(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_time_weekday_weekend(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_time_weekday_weekend_year(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef time_to_date(dt):\n    '''\n    Convert a date into a list of date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef time_to_datetime(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_date(dt):\n    '''\n    Convert a date into a list of date format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef time_to_datetime(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_time_month(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef time_to_datetime_month(dt):\n    '''\n    Convert a date into a list of time format.\n    '''\n    dt = dt.split('-')\n    return [int(dt[0]), int(dt[1]), int(dt[2])]\ndef date_to_date_mont"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    #print(\"\\nOriginal list: \" + str(my_list))\n    gap = int(n/2)\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            #print(\"\\nTmp is at index \" + str(i) + \"\\n\")\n            while j >= gap and my_list[j-gap] > temp:\n                #print(\"j - gap is at index \" + str(j - gap))\n                my_list[j] = my_list[j-gap]\n                #print(\"j is at index \" + str(j - gap))\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    #print(\"\\nShell Sort list: \" + str(my_list))\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def sort(arr, n):\n        '''\n        Write an algorithm to sort the given list.\n        '''\n        # find the length of the list\n        l = len(arr)\n        # count how many times the last element has been already inserted\n        # into the list\n        c = 1\n        while c <= n:\n            c += 1\n            # the i-th iteration through the array\n            # is the index of the last element\n            i = l - c\n            while i >= 0:\n                # if the element at the current iteration is smaller than the next element\n                # in the list, swap the current element with the next element\n                if arr[i] < arr[i + 1]:\n                    arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                # increment the index of the next element\n                i -= 1\n        # return the sorted array\n        return arr\n    def shell_sort(arr):\n        '''\n        Write a shell sort algorithm that runs in O(n^2) time.\n        '''\n        # find the length of the list\n        l = len(arr)\n        # count how many times the last element has been already inserted\n        # into the list\n        c = 1\n        while c < l:\n            # find the length of the sub-array\n            m = c * 2 + 1\n            # find the sub-array starting from index m,\n            # then increase the count of elements by m\n            while m < l:\n                if arr[m] < arr[m + 1]:\n                    m += 1\n                # increment the count of elements by 1\n                c += 1\n            # update the sub-array\n            # if the last element of the sub-array is less than the next element in the array,\n            # then swap the sub-array with the next element\n            if arr[c * 2] < arr[c * 2 + 1]:\n                arr[c * 2], arr[c * 2 + 1] = arr[c * 2 + 1], arr[c * 2]\n            # update the sub-array\n            # if the last element of the sub-array is greater than the next element in the array,\n            # then swap the sub-array with the next element\n            if arr[l - 1] < arr[l - c * 2]:\n                arr[l - c * 2], arr[l - c * 2 + 1] = arr[l - c * 2 + 1], arr[l - c * 2]\n            # increment the sub-array\n            l = m\n            c = m // 2\n        # return the sorted array\n        return arr\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # steps\n    step_size = len(my_list) // 2\n    while step_size > 0:\n        for i in range(step_size, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= step_size and my_list[j-step_size] > temp:\n                my_list[j] = my_list[j-step_size]\n                j -= step_size\n            my_list[j] = temp\n        step_size = step_size // 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #code goes here\n    #Time complexity : O(n log(n))\n    #Space Complexity : O(1)\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #print('Shell_sort')\n    #print(my_list)\n    gap = len(my_list)//2\n    while gap>=0:\n        for i in range(gap,len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            k = j\n            while k > 0 and my_list[k] < my_list[k+1]:\n                my_list[k], my_list[k+1] = my_list[k+1], my_list[k]\n                k = k-1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # WRITE CODE HERE\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [a1 for a1, a2 in zip(test_tup1, test_tup2) if a1!= a2]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    # write your code here\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    ans1 =''.join(l1)\n    ans2 =''.join(l2)\n    \n    return ans1, ans2"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0] and test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1_list = test_tup1\n    test_tup2_list = test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = test_tup1 + test_tup2\n    return result\n    \n    \nif __name__ == '__main__':\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    print(and_tuples(test_tup1, test_tup2)"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # WRITE YOUR CODE HERE\n    if not test_tup1 or not test_tup2:\n        return None\n    return [test_tup1[i] and test_tup2[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Test tuples must have same length')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i], test_tup2[i]))\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup_and_ele = []\n    for ele in test_tup1:\n        tup_and_ele.append(ele)\n    for ele in test_tup2:\n        tup_and_ele.append(ele)\n    return tuple(tup_and_ele)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return b\n    return ((b*b) - (4*a*c))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == 0): \n        return b/2 * (b - a)\n    else: \n        return a * b * (b - a)**2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return lambda x : a*x**2 + b*x + c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print('The parabola is direct. Please enter coordinates, A = (', a, ',', b, ',', c, ')')\n    A = float(input('Enter first coordinate: '))\n    B = float(input('Enter second coordinate: '))\n    C = float(input('Enter third coordinate: '))\n    D = (A**2 + (B ** 2) + (C ** 2))\n    print('Direct is', A, B, C, 'and D =', D)\n    if (D == 0):\n        print('The parabola is vertical.')\n    elif (D > 0):\n        print('The parabola is horizontal.')\n    else:\n        print('The parabola is tangential.')\n    \nparabola_directrix(10, 10, 10)\n    \ndef parabola_trapezoidal(a, b, c):\n    '''\n    Write a function to find the trapezoidal of a parabola.\n    '''\n    print('The trapezoidal is', a + b + c,'and D =', abs(a) + abs(b) + abs(c))\n    if (abs(a) + abs(b) + abs(c)) > 0:\n        print('The trapezoidal is vertical.')\n    else:\n        print('The trapezoidal is horizontal.')\n    \nparabola_trapezoidal(10, 10, 10)\n    \ndef parabola_circular(a, b, c):\n    '''\n    Write a function to find the circular of a parabola.\n    '''\n    print('The circular is', a + b + c,'and D =', abs(a) + abs(b) + abs(c))\n    if (abs(a) + abs(b) + abs(c)) > 0:\n        print('The circular is vertical.')\n    else:\n        print('The circular is horizontal.')\n    \nparabola_circular(10, 10, 10)\n    \ndef parabola_square(a, b, c):\n    '''\n    Write a function to find the square of a parabola.\n    '''\n    print('The square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    if (((a**2 + b**2 + c**2)**(1/2)) == (a**2 + b**2 + c**2)):\n        print('The square is quadrilateral.')\n    else:\n        print('The square is cubic.')\n    \nparabola_square(10, 10, 10)\n    \ndef parabola_square_slant(a, b, c):\n    '''\n    Write a function to find the square of a parabola with a slant.\n    '''\n    print('The square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The square is parallelogramic.')\n    print('The slant is', (a + b)/2,'and D =', (a + b)/2)\n    print('The slant is', (a + b)/2,'and D =', (a + b)/2)\n    print('The slant is', (a + b)/2,'and D =', (a + b)/2)\n    print('The slant is', (a + b)/2,'and D =', (a + b)/2)\n    print('The slant is', (a + b)/2,'and D =', (a + b)/2)\n    \nparabola_square_slant(10, 10, 10)\n    \ndef parabola_square_proline(a, b, c):\n    '''\n    Write a function to find the parallelogramic square of a parabola with a point-line.\n    '''\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', (a**2 + b**2 + c**2))\n    print('The parallelogramic square is', a**2 + b**2 + c**2,'and D =', ("
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(a+b)*(a+c) - b*b*c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_0 = ((-b + sqrt(b**2 - 4*a*c))/2*a)\n    y_0 = (2*a*x_0)/(b-x_0)\n    print(\"Directrix of a parabola is: \\n x = {}, y = {}\".format(x_0, y_0))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return (c, 0, b)\n    delta = (b**2 - 4*a*c)**0.5\n    t = delta/(2*a)\n    x1 = (t**2 + 4*t*a)**0.5\n    x2 = (-t**2 - 4*t*a)**0.5\n    x3 = t**2 + 4*t*a\n    x4 = (-t**2 - 4*t*a)**0.5\n    y = (x1**2 + x2**2 + x3**2 + x4**2)**0.5\n    return (y,x1,x2,x3,x4)\n    \ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = (b**2 - 4*a*c)**0.5\n    t = delta/(2*a)\n    x1 = (t**2 + 4*t*a)**0.5\n    x2 = (-t**2 - 4*t*a)**0.5\n    x3 = t**2 + 4*t*a\n    x4 = (-t**2 - 4*t*a)**0.5\n    y = (x1**2 + x2**2 + x3**2 + x4**2)**0.5\n    return (y,x1,x2,x3,x4)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*(c**2) + b*c + b**2)**(1/2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a = a + b\n    a = a + c\n    return a\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a**2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # test first and second list\n    if len(list1) < len(list2):\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common = False\n    if len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                common = True\n        return common\n    else:\n        return False\n    \n    \nprint(common_element([2, 3, 4, 4, 5, 3, 2, 1], [4, 5, 5, 6, 7, 8, 9]))\nprint(common_element([2, 3, 4, 4, 5, 3, 2, 1], [4, 5, 5, 6, 7, 8, 9]))"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1)==len(list2) and len(list1)!=0 and len(list2)!=0 and list1[0] in list2 and list2[0] in list1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if len(list1) == 0:\n        return False\n    \n    for item in list1:\n        if item in list2:\n            list2.remove(item)\n        else:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for element in list1:\n        if element in list2:\n            common.append(element)\n    return len(common) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == []:\n        return False\n    if list2 == []:\n        return False\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = list1.count(list2)\n    return common_element!= 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0*height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(base1,base2,height):\n        return (base1 + base2) / 2 * (height + (height * (height - 1)))\n    print(trapezium(base1,base2,height))\n    trapezium(base1,base2,height)\n    \ndef trap(base1,base2,height):\n    '''\n    Write a function to find the trapping area of a trapezium.\n    '''\n    if height == 0:\n        return 0\n    elif base1 < base2:\n        return max(base1,base2) * height\n    elif base2 < base1:\n        return max(base1,base2) * height\n    else:\n        return height\n    \ndef trapezium(base1,base2,height):\n    return height * (height - 1) / 2 * (base1 + base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height = int(height)\n    base1 = int(base1)\n    base2 = int(base2)\n    if (base1 > base2):\n        upper = base1\n        lower = base2\n    else:\n        upper = base2\n        lower = base1\n    if(height%2==0):\n        middle = (height+1)/2\n    else:\n        middle = height/2\n    trapezium = (lower+upper)/2\n    return trapezium,middle,upper,lower\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # base case:\n    if (height == 0):\n        return 0\n    # if base cases are correct:\n    if (height == 1):\n        return base1 + base2\n    # if base cases are incorrect:\n    if (height > 1):\n        return (base1 + base2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # YOUR CODE HERE\n    if base1<0:\n        base1 = 0\n    if base2<0:\n        base2 = 0\n    if height<0:\n        height = 0\n    if base1+base2>height:\n        return height\n    else:\n        l1 = base1 + base2\n        l2 = height - base1\n        if l1 < l2:\n            return base1\n        elif l2 < l1:\n            return base2\n        else:\n            return base1+base2\n    "
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<base2:\n        return (base1 + base2) / 2.0\n    else:\n        return (base1 + base2)/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length=0\n    start=0\n    end=height\n    while start<=end:\n        median=(base1+base2)/2\n        if median>=start and median<=end:\n            length=length+1\n        else:\n            break\n        start=median\n    return length\ndef trapezium_area(height):\n    '''\n    Write a function to compute the area of a trapezium.\n    '''\n    return height*(height+1)/2\ndef trapezium_area_recursive(base,height):\n    '''\n    Write a recursive function to compute the area of a trapezium.\n    '''\n    if base<0:\n        return 0\n    elif base==0:\n        return height\n    else:\n        return base*height+trapezium_area_recursive(base-1,height)\ndef find_median_area(height):\n    '''\n    Write a function to find the median area of a trapezium.\n    '''\n    return median_trapezium(1,trapezium_area(height),height)\ndef find_median(height):\n    '''\n    Write a function to find the median area of a trapezium.\n    '''\n    return trapezium_area(height)\ndef main():\n    print(\"*** Trapezium area ***\")\n    print(find_median_area(int(input(\"Enter a height: \"))))\nif __name__==\"__main__\":\n    main()\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1+base2>height:\n        return None\n    \n    if base1==0 or base2==0:\n        return 0\n    \n    if height==base1 or height==base2:\n        return base1\n    \n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1+base2==0:\n        return height\n    elif base1+base2>0:\n        return ((base1+base2)//2)*(height+base2//2)*(height+base2//2)\n    else:\n        return (base1*(height+base2))//(base2*(height+base2))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    num1,num2 = 0,0\n    while num1<height:\n        num1 += base1\n        num2 += base2\n    median = (num1+num2)/2\n    return median\n    \ndef area_trapezium(base1,base2,height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    area = (base1*base2)/2\n    return area\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(number, \"is greater than\", arr[i])\n            return\n        else:\n            return\n    print(\"Number is greater than any element in array.\")\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        print('Number is less than the first element')\n    elif arr[1] > number:\n        print('Number is greater than the second element')\n    elif number == arr[0]:\n        print('Number is equal to the first element')\n    else:\n        print('Number is greater than the second element')\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # if arr[i] > number:\n    #     return False\n    # return True\n    return True if arr[0] > number else arr[1] > number\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr is None:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Use a for loop to iterate over the list\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr is None or len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n        \n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if not re.match('^[a-zA-Z]+$', text):\n        return False\n    if not re.match('^[a-zA-Z]+$', text+text):\n        return False\n    if not re.match('^[a-zA-Z]+$', text+text+text):\n        return False\n    if not re.match('^[a-zA-Z]+$', text+text+text+text):\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    txt = text.replace(' ','')\n    if txt.count('a') > 1:\n        return False\n    if 'b' in txt:\n        return False\n    for b in text:\n        if 'b' in b:\n            return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'a(?=b){1}[\\S]{1}b', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'a\\b(?:[^b]b?[b])?', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=\\b)'\n    for i in range(len(text)):\n        if re.search(pattern, text[i]):\n            return i\n    return -1\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('[a-b]$')\n    return pattern.match(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    if len(text) < 1:\n        return \"Invalid\"\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has two d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has three d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has four d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has six d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has seven d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has eight d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has nine d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has ten d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has eleven d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has twelve d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has thirteen d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has fourteen d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has fifteen d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has sixteen d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has seventeen d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has eighteen d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has nineteen d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has twenty d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has thirty d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has forty d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has fifty d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has sixty d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has seventy d's followed by one or more a's.\n    '''\n    # TODO: add your code here\n    \n    # TODO: add your code here\n    \n    return text[0] in ['a', 'b']\n    \ndef text_match_eighty(text):"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '^(\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+)'\n    #findall returns a list of tuples containing the results\n    match = re.findall(pattern,text)\n    return match\ndef text_match_all(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '^(\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+)'\n    #findall returns a list of tuples containing the results\n    match = re.findall(pattern,text)\n    return match\ndef text_match_different(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = '^(\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+)'\n    #findall returns a list of tuples containing the results\n    match = re.findall(pattern,text)\n    return match\ndef text_match_extended(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's followed by a d followed by one or more c followed by one or more d followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more a followed by one or more c followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more a followed by one or more "
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub('\\s{2,}','',text)\n    if text.endswith('a'):\n        return False\n    elif text.endswith('b'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[\\w][a-zA-Z]*'\n    return re.match(pattern, text) is not None\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    assert type(n) == int, \"Your function argument must be an integer.\"\n    if n >= 10:\n        assert n <= 9999, \"Your function argument must be less than 10, and not greater than 999\"\n        assert n < 10, \"Your function argument must be less than 10\"\n        return n % 10\n    else:\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n)!= int or n < 0 :\n        raise TypeError('Value must be a valid integer')\n    else:\n        if n == 0:\n            return 0\n        elif n > 0:\n            return 10-n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 9 : return n\n    else : return last_Digit(n//10) + n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return str(n % 10)\n    else :\n        return str(n % 10) + str(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = n % 10\n    n //= 10\n    return lastDigit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lst = list(str(n))\n    lst[-1] = lst[-1][-1]\n    num = int(\"\".join(lst))\n    return num\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #Your code here\n    return n % 10\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        return None\n    \n    last = 0\n    for i in str(n) :\n        last = int(i)\n        break\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n <= 9:\n        return n\n    return int(str(n)[-1])\n    #Return last digit of number\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        neg_list.append(-i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for num in list1:\n        if num < 0:\n            neg_nos.append(num)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n = list1\n    for i in range(len(n)):\n        if n[i] < 0:\n            n[i] = -n[i]\n    return n\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for n in list1:\n        if n < 0:\n            neg.append(n)\n        else:\n            neg.append(-n)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(-list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list1[::-1]\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1_neg = []\n    for i in list1:\n        if i < 0:\n            list1_neg.append(i)\n    return list1_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for number in list1:\n        if number < 0:\n            neg_nos.append(number)\n        else:\n            neg_nos.append(-number)\n    return neg_nos\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    odd_chars = 0\n    for char in str1:\n        if char % 2!= 0:\n            odd_chars += 1\n    if odd_chars > 0:\n        return \"Odd Characters Removed\"\n    else:\n        return f\"Odd Characters Removed\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char % 2!= 0:\n            str2 += char\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(list(filter(lambda x: not x.isnumeric(), str1)))\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new = \"\"\n    for i in str1:\n        if i % 2 == 1:\n            new += i\n    return new\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = ''\n    for char in str1:\n        if char % 2!= 0:\n            odd_str += char\n    return odd_str\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = []\n    for i in str1:\n        if i % 2 == 1:\n            odd.append(i)\n    return ''.join(odd)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) == 0:\n        return str1\n    else:\n        str1 = str1.lower()\n        odd_str = []\n        for i in str1:\n            if i % 2!= 0:\n                odd_str.append(i)\n        for i in odd_str:\n            str1 = str1.replace(i, \"\")\n        return str1\n        \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    import re\n    result = \"\"\n    for i in str1:\n        if i % 2 == 1:\n            result += i\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #print(str1)\n    if str1 == \"\":\n        return str1\n    str2 = \"\"\n    for i in str1:\n        if i % 2!= 0:\n            str2 += i\n        else:\n            continue\n    print(str2)\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    l = []\n    for i in str1:\n        if i%2==1:\n            l.append(i)\n    return \"\".join(l)\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # f(a,b) = (f(a,b), f(b,a))\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_pair_pairs = 0\n    count_pair_pair_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                count_pair_pair_pairs += 1\n            else:\n                count_pair_pair_pairs += 2\n    return count_pair_pair_pairs, count_pair_pair_pair_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #create empty list to hold bidirectional tuples\n    bidirectional_list = []\n    #For each tuple in the list...\n    for i in range(len(test_list)):\n        #Create a new tuple using the first index as the element and\n        #the second index as the count\n        new_tuple = test_list[i][0] + ('count', test_list[i][1])\n        #Add the tuple to the list of tuples...\n        bidirectional_list.append(new_tuple)\n    #Return the number of pairs\n    return len(bidirectional_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = test_list + [' '] * (len(test_list) - 1)\n    num_of_dicts = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            if test_list[i + 1] == '<':\n                num_of_dicts += 1\n            else:\n                num_of_dicts -= 1\n    return num_of_dicts\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for row in test_list:\n        if (row[0][0] == row[1][0] and row[0][1] == row[1][1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    i = 0\n    count = 0\n    while i < len(test_list):\n        if test_list[i][0] > test_list[i][1]:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if len(i) > 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # TODO: do not ignore list indices when counting directions\n    # TODO: unpack input list\n    # TODO: start with count of directional direction\n    # TODO: create count of directional tuple pairs\n    # TODO: return count of directional tuple pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # return sum([1 for i,j in test_list if i < j])\n    return len([1 for i,j in test_list if i < j])\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    counter = 0\n    for test_tuple in test_list:\n        if test_tuple[0] == test_tuple[1]:\n            counter += 1\n        else:\n            counter += 1\n        if counter == 2:\n            return counter\n            break\n    return counter\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    def join_int(L):\n        '''\n        \n        Write a function to join a list of multiple integers into a single integer.\n        \n        '''\n        \n        if L == []:\n            return 0\n        else:\n            L_1 = L[0]\n            L_2 = L[1]\n            if L_1[0] == L_2[0]:\n                return int(L_1[1] + L_2[1])\n            else:\n                return int(L_1[0] + L_2[0])\n            \n    return join_int(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(map(int,L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [str(l) for l in L]\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for x in L:\n        res = res * 10 + x\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # TODO: Write a function to join a list of multiple integers into a single integer.\n    # Print out a list of the joined integers.\n    # NOTE: Do NOT worry about a solution that can't join a list into a single integer,\n    # since you may not know how to join a list into a single integer.\n    return \"\".join([str(x) for x in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def list_to_int(L):\n        '''\n        Use this function to convert a list of numbers into an integer.\n        '''\n        return int(''.join(map(str, L)))\n    return list_to_int(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n    \ndef join_list(L):\n    '''\n    Write a function to join a list of lists into a single list.\n    '''\n    return [x + y for x, y in zip(L, L)]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join(a,b):\n        if not (b or a):\n            return 0\n        else:\n            return a+b\n    return reduce(join, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [int(l) for l in L]\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Write your code here\n    return L[0] + L[1] * 10\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(?:\\w+)(?=.*adv)\\.?(?=.*s\\.?)'\n    regex = re.compile(pattern)\n    adverb_positions = []\n    for match in regex.finditer(text):\n        pos = match.start()\n        if pos:\n            adverb_positions.append(pos)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pat = re.compile(r'(?<=[0-9]\\d+)([a-zA-Z])(?=[A-Z])')\n    result = pat.search(text)\n    #print(result.group())\n    if result:\n        return result.group()[0], result.start()\n    else:\n        return '', 0\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regex_words = r'\\b((ADV)|(ADV[+-])?)(\\w+)'\n    # regex_words = r'\\b((ADV)|(ADV[+-])?)(\\w+)\\b'\n    regex_words = r'\\b((ADV)|(ADV[+-])?)(\\w+)\\b'\n    pos_words = re.findall(regex_words, text)\n    if pos_words:\n        return pos_words[0]\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = []\n    for word in text:\n        if word in adverb:\n            adverb.append(word)\n            position = adverb.index(word)\n        else:\n            adverb.append(word)\n            position = -1\n        if position!= -1:\n            print(f'{word} -> {position}')\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\.?[a-z]+\\b')\n    words = pattern.split(text)\n    for i in range(len(words)):\n        if words[i] in ['a','i','e','o','u']:\n            pos_position = i\n    return pos_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match = re.search(r'\\b(a|an|the|as|i|us)\\b', text)\n    if match is None:\n        print('ERROR: incorrect or unkown ADVERB')\n        return False\n    else:\n        # find the position of the adverb\n        pos_start = 0\n        pos_end = 0\n        adverb = match.group()\n        adverb_position = re.search(r'(\\b\\d+)', adverb)\n        if adverb_position is None:\n            print('ERROR: incorrect or unkown ADVERB')\n            return False\n        else:\n            pos_start = adverb_position.start() + 1\n        adverb_end = len(text) - pos_end\n        adverb_text = text[adverb_end:].replace(adverb, '')\n        adverb_positions = re.findall(r'\\b' + adverb + r'\\b', adverb_text)\n        adverb_positions = [x.lower() for x in adverb_positions]\n        adverb_positions = list(set(adverb_positions))\n        adverb_positions.sort()\n        adverb_positions.remove('on')\n        adverb_positions.remove('no')\n        adverb_positions.remove('n\\'t')\n        adverb_positions.remove('to')\n        adverb_positions.remove('to\\'d')\n        adverb_positions.remove('for')\n        adverb_positions.remove('of')\n        adverb_positions.remove('for\\'s')\n        adverb_positions.remove('by')\n        adverb_positions.remove('on\\'s')\n        adverb_positions.remove('with')\n        adverb_positions.remove('they')\n        adverb_positions.remove('of\\'s')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('to\\'s')\n        adverb_positions.remove('not')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('to\\'\\'s')\n        adverb_positions.remove('to\\'\\'d')\n        adverb_positions.remove('with\\'s')\n        adverb_positions.remove('about')\n        adverb_positions.remove('was')\n        adverb_positions.remove('no\\'s')\n        adverb_positions.remove('at')\n        adverb_positions.remove('has')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('not')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('for')\n        adverb_positions.remove('by')\n        adverb_positions.remove('they')\n        adverb_positions.remove('there')\n        adverb_positions.remove('for')\n        adverb_positions.remove('because')\n        adverb_positions.remove('to')\n        adverb_positions.remove('the')\n        adverb_positions.remove('is')\n        adverb_positions.remove('for\\'s')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('to\\'\\'d')\n        adverb_positions.remove('with\\'\\'s')\n        adverb_positions.remove('of')\n        adverb_positions.remove('but')\n        adverb_positions.remove('that')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('is')\n        adverb_positions.remove('for')\n        adverb_positions.remove('of')\n        adverb_positions.remove('of')\n        adverb_positions.remove('they')\n        adverb_positions.remove('those')\n        adverb_positions.remove('there')\n        adverb_positions.remove('for')\n        adverb_positions.remove('because')\n        adverb_positions.remove('is')\n        adverb_positions.remove('to')\n        adverb_positions.remove('they')\n        adverb_positions.remove('th')\n        adverb_positions.remove('it')\n        adverb_positions.remove('the')\n        adverb_positions.remove('them')\n        adverb_positions.remove('when')\n        adverb_positions.remove('because')\n        adverb_positions.remove('he')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('that\\'s')\n        adverb_positions.remove('can\\'t')\n        adverb_positions.remove('for')\n        adverb_positions.remove('of')\n        adverb_positions.remove('some')\n        adverb_positions.remove('but')\n        adverb_positions.remove('to')\n        adverb_positions.remove('have')\n        adverb_positions.remove('to')\n        adverb_positions.remove('have')\n        adverb_positions.remove('they\\'d')\n        adverb_positions.remove('when')\n        adverb_positions.remove('although')\n        adverb_positions.remove('through')\n        adverb_positions.remove('for')\n        adverb_positions.remove('by')\n        adverb_positions.remove('they\\'d')\n        adverb_positions.remove('for')\n        adverb_positions.remove('they\\'re')\n        adverb_positions.remove('be')\n        adverb_positions.remove('to')\n        adverb_positions.remove('them')\n        adverb_positions.remove('others')\n        adverb_positions.remove('that\\'s')\n        adverb_positions.remove('than')\n        adverb_positions.remove('the')\n        adverb_positions.remove('these')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('can\\'t')\n        adverb_positions.remove('only')\n        adverb_positions.remove('they\\'ve')\n        adverb_positions.remove('could')\n        adverb_positions.remove('would')\n        adverb_positions.remove('by')\n        adverb_positions.remove('they\\'ve')\n        adverb_positions.remove('for')\n        adverb_positions.remove('to')\n        adverb_positions.remove('have')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('there')\n        adverb_positions.remove('have')\n        adverb_positions.remove('they')\n        adverb_positions.remove('not')\n        adverb_positions.remove('they\\'ve')\n        adverb_positions.remove('them')\n        adverb_positions.remove('they')\n        adverb_positions.remove('they\\'d')\n        adverb_positions.remove('and')\n        adverb_positions.remove('to')\n        adverb_positions.remove('the')\n        adverb_positions.remove('they')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('should')\n        adverb_positions.remove('to')\n        adverb_positions.remove('have')\n        adverb_positions.remove('to')\n        adverb_positions.remove('they\\'d')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('though')\n        adverb_positions.remove('than')\n        adverb_positions.remove('it')\n        adverb_positions.remove('you')\n        adverb_positions.remove('your')\n        adverb_positions.remove('yourself')\n        adverb_positions.remove('its')\n        adverb_positions.remove('them')\n        adverb_positions.remove('someone')\n        adverb_positions.remove('thats')\n        adverb_positions.remove('yourself')\n        adverb_positions.remove('them')\n        adverb_positions.remove('or')\n        adverb_positions.remove('theirs')\n        adverb_positions.remove('have')"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # List with all the adverbs\n    adverbs = []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = False\n    adverb_position = []\n    adverb_index = 0\n    for i in text:\n        if i == 'n':\n            adverb = True\n            adverb_index += 1\n        if adverb == True:\n            adverb_position.append(adverb_index)\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not isinstance(text, str):\n        raise TypeError(\"The argument can't be of type'str'\")\n    if not text.endswith('.'):\n        raise ValueError(\"The argument can't be of type'str'\")\n    if text == '.':\n        return find_adverb_position('.')\n    if text in '?':\n        return 0, '?', 0\n    if text in '!?':\n        return 0, '!', 0\n    if text in '?':\n        return 0, '?', 0\n    if text in '?':\n        return 1, '?', 0\n    if text in '?':\n        return 1, '?', 0\n    if text in '!':\n        return 1, '!', 0\n    if text in '!':\n        return 1, '!', 0\n    if text in '!':\n        return 1, '!', 0\n    if text in '?':\n        return 1, '?', 0\n    if text in '!':\n        return 1, '!', 0\n    if text in '?':\n        return 1, '?', 0\n    if text in ',':\n        return 2, ',', 0\n    if text in ',':\n        return 2, '', 0\n    if text in ',':\n        return 2, '', 0\n    if text in ',':\n        return 3, ',', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3, '', 0\n    if text in ',':\n        return 3"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    regex_pattern = r'(VERB|NOUN|ADJECTIVE|AUX|VERB|NOUN|ADJECTIVE)'\n    \n    for word in text:\n        if re.match(regex_pattern, word) is not None:\n            adverbs.append((word, 0))\n    \n    return adverbs\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S = 0\n    for i in l:\n        S += i*i\n    return S\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l * l\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l[0]\n    b = l[1]\n    c = l[2]\n    d = l[3]\n    area = (a**2) + (b**2) + (c**2) + (d**2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import pi, sqrt\n    area = 0\n    for i in range(0, l):\n        for j in range(0, l):\n            for k in range(0, l):\n                if i!=j and j!=k and i!=k:\n                    area += (sqrt(l**2 - (i**2 + j**2 + k**2)**2))\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfaceArea = l**3\n    print(f'\\n{surfaceArea:.2f}')\n    return surfaceArea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 0.0\n    for side in range(l):\n        for direction in [1,0,-1]:\n            if (direction == 0 and side < 3) or (direction == 1 and side > 0):\n                surface_area += side * (side+1) * (2.0 * l - 1.0) / 6.0\n            if (direction == 1 and side == 0) or (direction == -1 and side > 3):\n                surface_area += (4.0 * l * side) * (l-2.0) * (2.0 * l-1.0) / 6.0\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3 * (3.14159 * l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*4*l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #declare variables\n    pi = 3.14\n    area = 0\n    n = 0\n    #calculate area\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                area = 4 * pi * (((i**2) + (j**2) + (k**2))**0.5)\n                area = round(area, 5)\n                print(area)\n                area = round(area, 2)\n    #return area\n    return area\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    ratio=1\n    for i in range(len(nums)):\n        if nums[i]>0:\n            ratio*=nums[i]\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    s = set(nums)\n    return len(s)/sum(s)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    ans = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Your code here\n    positive_count_arr = array('i', [0 for i in range(len(nums))])\n    total_count = 0\n    count = 0\n    \n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positive_count_arr[i] = positive_count_arr[i] + 1\n            total_count = total_count + 1\n            count = count + 1\n    print(\"Total positive numbers = {}\".format(total_count))\n    print(\"Ratio of positive numbers = {}\".format(count / total_count))\n    return positive_count_arr\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_count = {}\n    for i in nums:\n        if i not in num_count:\n            num_count[i] = 1\n        else:\n            num_count[i] += 1\n    \n    #determining the largest element\n    largest = 0\n    largest_number = 0\n    for i in num_count:\n        if num_count[i] > largest:\n            largest = num_count[i]\n            largest_number = i\n    \n    #checking if the element is positive or negative\n    for i in num_count:\n        if num_count[i] > 1:\n            return \"Neither\"\n        elif num_count[i] == 1:\n            return \"Positive\"\n    \n    #checking if the list contains a positive number\n    if num_count[largest_number] > 1:\n        return \"Positive\"\n    else:\n        return \"Negative\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #Convert to list\n    nums_pos = []\n    for n in nums:\n        if n > 0:\n            nums_pos.append(n)\n    \n    #Create an array to store number of positive numbers\n    nums_pos_array = array('i', [0] * len(nums_pos))\n    #Loop through list to count positive numbers\n    for i in range(len(nums_pos)):\n        if nums_pos[i] > 0:\n            nums_pos_array[i] = nums_pos[i]\n            \n    #Calculate the ration of numbers of positive numbers in the array\n    #If number of positive numbers is 0, return 0. Else return the ration.\n    nums_pos_count = 0\n    for i in range(len(nums_pos_array)):\n        if nums_pos_array[i] > 0:\n            nums_pos_count += 1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = array(nums)\n    positive_numbers.sort()\n    return positive_numbers\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    negative_numbers = array(nums)\n    negative_numbers.sort()\n    return negative_numbers\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    arr.sort()\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    l = 0\n    r = len(nums)-1\n    mid = (l+r) // 2\n    for i in nums:\n        if i > 0:\n            mid = i\n            break\n    return int(mid/mid)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in list1: \n        if i < 0: \n            print(i)\n            max_neg = i\n            break\n        elif i < 0: \n            continue\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    i = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_num:\n                max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1) \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    if max_num < 0:\n        max_num = list1[0]\n    for num in list1[1:]:\n        if num < 0:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -99\n    for i in list1:\n        if i < 0:\n            num = i\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    i = 0\n    while i < len(list1):\n        if list1[i] < 0:\n            if list1[i] < max_neg:\n                max_neg = list1[i]\n            else:\n                max_neg = list1[i]\n        i += 1\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = 0\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            if list1[i] < max_negative: \n                max_negative = list1[i] \n    return max_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -float('Inf')\n    for i in range(len(list1)):\n        if list1[i] < 0 and max_num < list1[i]:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if list1[0] < 0:\n        return largest_neg(list1[1:]) + [list1[0]]\n    else:\n        return largest_neg(list1[1:]) + [list1[0]] + largest_neg(list1[1:])\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') \n    for x in list1: \n        if x < 0: \n            if x > largest: \n                largest = x \n    return largest\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #create an empty list\n    new_list = []\n    #create a loop that goes through the given list\n    for element in test_list:\n        #if the element is greater than K\n        if element >= K:\n            #append it to the new_list\n            new_list.append(element)\n    #return the new list\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = []\n    for i in test_list:\n        if len(i) < K:\n            i = (i +''*(K-len(i)))\n        tuple_list.append(i)\n    return tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for item in test_list:\n        result_list.append(item[0:K])\n    return result_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(i, len(test_list[i]), K))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(test_list[i:i+K] for i in range(0, len(test_list), K))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        for j in range(K):\n            del tup[j]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for index, value in enumerate(test_list):\n        if index < K:\n            result.append(value)\n        else:\n            result.append(test_list[index])\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        if len(item) > K:\n            test_list.remove(item)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    return [tuple[:K] for tuple in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Your code here\n    '''\n    test_tup1 = (10, 20)\n    test_tup2 = (30, 40)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = [0] * len(test_tup1)\n    for x in range(len(test_tup1)):\n        result[x] = test_tup1[x] * test_tup2[x]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = [0,0,0,0]\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = 0\n    for i in range(len(test_tup1)):\n        res += test_tup1[i] * test_tup2[i]\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    x=0\n    for i in test_tup1:\n        x=x+i\n    for j in test_tup2:\n        y=x*j\n        if y!=0:\n            print(x,\"*\",j,\"=\",y)\n        else:\n            print(x,\"*\",j,\"= 0\")\n        x=0\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0] * test_tup2[1], test_tup1[1] * test_tup2[0])\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n    "
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in test_tup1:\n        result += (i*test_tup2[0])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            new_tup.append(test_tup1[i] * test_tup2[i])\n        else:\n            new_tup.append(test_tup1[i])\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError(\"Tuple lengths do not match!\")\n    \n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i])\n        \n    return result\n        \nprint(index_multiplication((1, 2, 3), (2, 2, 2))"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ_list = []\n    for element in tup:\n        occ_list.append(lst.count(element))\n    occ_dict = {}\n    for element in tup:\n        occ_dict[element] = lst.count(element)\n    return occ_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return counter.subtract(tup) \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return the number of occurrences\n    if len(lst) == 0:\n        return 0\n    # if the lst is empty,\n    if len(lst) == 1:\n        if lst[0] == tup:\n            return 1\n        else:\n            return 0\n    # if the lst is not empty\n    if len(lst) > 1:\n        # count the occurance of each element\n        for item in lst:\n            # if the item is equal to the tuple \n            # then count 1 \n            if item == tup:\n                return 1 + count_Occurrence(tup, lst[1:])\n            # otherwise count 0 \n            else:\n                return 0 + count_Occurrence(tup, lst[1:])\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0 \n    for i in range(0, len(lst)):\n        if tup[i] in lst[i]:\n            count = count + 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dct = {}\n    for i in lst:\n        if i in dct:\n            dct[i] += 1\n        else:\n            dct[i] = 1\n    return dct\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst) \n    occ = occ.most_common()\n    return occ\n    \ndef count_Occurrence_in_Range(tup,low,high):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(tup[low:high])\n    occ = occ.most_common()\n    return occ\n    \ndef count_Occurrence_in_Range_2(tup,low,high,repeat=1):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(tup[low:high])\n    for i in range(repeat):\n        occ = occ.most_common()\n    return occ\n    \ndef list_repeating(lst):\n    '''\n    Return list containing all the elements of the list that occur in more than once.\n    '''\n    repeated = []\n    for i in lst:\n        if lst.count(i) > 1:\n            repeated.append(i)\n    return repeated\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # your code goes here\n    count = 0\n    for i in tup:\n        count += lst.count(i)\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(tup)\n    occ = occ.values()\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if len(tup) == 0:\n        return 0\n    else:\n        occ = 0\n        for i in tup:\n            occ += lst.count(i)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in lst:\n        if i in tup:\n            tup.remove(i)\n            return tup, lst\n    else:\n        tup, lst = count_Occurrence(tup, lst)\n        return tup, lst\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in range(len(nums)) if i%3==0]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # complete this function\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for number in nums:\n        cube_list.append(number**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #pass\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes=[]\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    l = len(nums)\n    cubes = []\n    for i in range(l):\n        cubes.append(nums[i]**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for i in nums:\n        cube.append(i*i*i)\n    return cube\n    \ndef cube_of_nums(nums):\n    '''\n    Return the cube of each individual number in the list.\n    '''\n    return [cube_nums(nums)[i] for i in range(len(nums))]\n    \ndef cube_of_cube(nums):\n    '''\n    Return the cube of each number of cube in the list.\n    '''\n    return cube_nums(nums)[1:]\n    \ndef cube_of_cube_0(nums):\n    '''\n    Return the cube of each cube of each individual number in the list.\n    '''\n    cube = cube_nums(nums)[1:]\n    for i in cube:\n        i[i] = 0\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in range(1, len(nums)):\n        result.append(nums[i]**3)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        total += i \n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=0:\n        return None\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s=0\n    for i in range(0,n+1): \n        s=s+i \n    return s \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\ndef factorial_iterative(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = factorial_iterative(n-1) * n\n        return result\ndef factorial_recursive(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial_recursive(n-1)\ndef gcd(a,b): \n    while b!= 0: \n        r = a % b \n        a = b \n        b = r \n    return a "
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    for i in range(1,n+1):\n        sum_n += i\n    return sum_n\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        # Just take the first element of the list\n        return str[0:l]\n    except:\n        return str[0:l+1]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = list(l)\n    l[0] = l[0].strip()\n    return ''.join(l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(str)):\n        if i+l <= len(str):\n            yield str[i:i+l]\n        else:\n            yield str[i:]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    idx = 0\n    while True:\n        if idx == len(str):\n            break\n        if str[idx] == \"\\n\":\n            idx += 1\n        elif str[idx] == \"\\r\":\n            idx += 1\n            if idx == len(str):\n                return None\n        else:\n            idx += 1\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str)\n    count = 0\n    for i in str:\n        if count == l:\n            break\n        print(i)\n        count += 1\n    print()\n    print(str[l:len(str)])\n    return str[l:len(str)]\n    \ndef extract_list(list_in, l):\n    '''\n    Write a function to extract a list of strings from a given list of string values.\n    '''\n    print(list_in)\n    count = 0\n    for i in list_in:\n        if count == l:\n            break\n        print(i)\n        count += 1\n    print()\n    print(list_in[l:len(list_in)])\n    return list_in[l:len(list_in)]\n    \ndef print_list(str_in, l):\n    '''\n    Write a function to print a given list of string values.\n    '''\n    print(str_in)\n    count = 0\n    for i in str_in:\n        if count == l:\n            break\n        print(i)\n        count += 1\n    print()\n    print(str_in[l:len(str_in)])\n    \n    \ndef print_pairs(str_in, l):\n    '''\n    Write a function to print a given list of string values.\n    '''\n    print(str_in)\n    count = 0\n    for i in str_in:\n        if count == l:\n            break\n        print(i)\n        count += 1\n    print()\n    print(str_in[l:len(str_in)])\n    \n    \ndef print_string_values(str_in, l):\n    '''\n    Write a function to print a given list of string values.\n    '''\n    print(str_in)\n    count = 0\n    for i in str_in:\n        if count == l:\n            break\n        print(i)\n        count += 1\n    print()\n    print(str_in[l:len(str_in)])\n    \n    \ndef print_string_values_with_indices(str_in, l):\n    '''\n    Write a function to print a given list of string values.\n    '''\n    print(str_in)\n    count = 0\n    for i in str_in:\n        if count == l:\n            break\n        print(i, count)\n        count += 1\n    print()\n    print(str_in[l:len(str_in)])\n    \n    \ndef main():\n    list_str = [\"hi\", \"hello\", \"there\", \"there\", \"hey\", \"hey\", \"howdy\"]\n    \n    print_list(list_str, 10)\n    \n    print_string_values(list_str, 10)\n    \n    print_string_values_with_indices(list_str, 10)\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == l:\n        return str\n    else:\n        return extract_string(str[l:], l+1)\n        \ndef make_length(list_of_strings):\n    '''\n    Write a function that takes in a list of strings.\n    It will then return a string of length\n    '''\n    new_str = \"\"\n    for s in list_of_strings:\n        new_str += extract_string(s, 0) + \" \"\n    return new_str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == None or len(l) == 0:\n        return \"\"\n    if type(l[0]) == type(0):\n        return str[l[0]:l[0]+l[1]]\n    else:\n        return str[l[0]:l[0]+l[2]]\n    \ndef extract_number(str, l):\n    '''\n    Write a function to extract numeric values from a given list of string values.\n    '''\n    if l == None or len(l) == 0:\n        return \"\"\n    if type(l[0]) == type(0):\n        return str[l[0]:l[0]+l[1]]\n    else:\n        return str[l[0]:l[0]+l[2]]\n    \ndef extract_float(str, l):\n    '''\n    Write a function to extract float values from a given list of string values.\n    '''\n    if l == None or len(l) == 0:\n        return \"\"\n    if type(l[0]) == type(0):\n        return str[l[0]:l[0]+l[1]]\n    else:\n        return str[l[0]:l[0]+l[2]]\n    \ndef extract_bool(str, l):\n    '''\n    Write a function to extract boolean values from a given list of string values.\n    '''\n    if l == None or len(l) == 0:\n        return \"\"\n    if type(l[0]) == type(0):\n        return str[l[0]:l[0]+l[1]]\n    else:\n        return str[l[0]:l[0]+l[2]]\n    \ndef extract_address(str, l):\n    '''\n    Write a function to extract string values from a given list of string values.\n    '''\n    if l == None or len(l) == 0:\n        return \"\"\n    if type(l[0]) == type(0):\n        return str[l[0]:l[0]+l[1]]\n    else:\n        return str[l[0]:l[0]+l[2]]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(len(str)):\n        if i % l == l-1:\n            res.append(str[i])\n    return ''.join(res)\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    res = []\n    while i < len(str):\n        res.append(str[i:i+l])\n        i += l\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return_list = []\n    for i in range(0, len(str), l):\n        return_list.append(str[i:i+l])\n    return return_list\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = re.sub(r'\\s+','', text1)\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+',' ',text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('\\s+','', text1)\n    return text\ndef remove_all_links(text1):\n    '''\n    Write a function to remove all links from the given string.\n    '''\n    text = re.sub(r'<a\\s+(/)*?>','', text1)\n    return text\ndef remove_all_tags(text1):\n    '''\n    Write a function to remove all HTML tags from the given string.\n    '''\n    text = re.sub(r'<[^>]*>', '', text1)\n    return text\ndef remove_quotations(text1):\n    '''\n    Write a function to remove all punctuation and quotes from the given string.\n    '''\n    text = re.sub(r'(?:\\!|\\?|\\.|,|!|\"|;|:|&|\\)|\\s+)','', text1)\n    return text\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9]','', text1)\n    return text\ndef remove_start_end_dashes(text1):\n    '''\n    Write a function to remove all dashes from the given string.\n    '''\n    text = re.sub(r'^\\s+', '', text1)\n    return text\ndef remove_stop_words(text1):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    text = re.sub(r'[a-zA-Z0-9]+','', text1)\n    return text\ndef remove_hashtags(text1):\n    '''\n    Write a function to remove all hashtags from the given string.\n    '''\n    text = re.sub(r'#\\w+', '', text1)\n    return text\ndef remove_stop_words_hashtags(text1):\n    '''\n    Write a function to remove all stop words and hashtags from the given string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9]','', text1)\n    text = re.sub(r'#', '', text)\n    text = re.sub(r'@', '', text)\n    text = re.sub(r'#', '', text)\n    text = re.sub(r'[^a-zA-Z0-9]+','', text)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\"  \", \" \")\n    text1 = text1.replace(\"\\t\", \" \")\n    text1 = text1.replace(\"\\n\", \" \")\n    text1 = text1.replace(\"\\r\", \" \")\n    text1 = text1.replace(\"  \", \" \")\n    text1 = text1.replace(\" \", \" \")\n    text1 = text1.replace(\"\\t\", \" \")\n    text1 = text1.replace(\"\\n\", \" \")\n    text1 = text1.replace(\"\\r\", \" \")\n    text1 = text1.replace(\"\\n\", \" \")\n    text1 = text1.replace(\"\\r\", \" \")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # EXAMPLE\n    # Input string = \"  a   b  c  d  e   f   g   h \"\n    # Output string = \"a   b  c  d  e   f   g   h \"\n    # Note that we are removing any whitespaces from the start of a string.\n    \n    pattern = r'(\\s+)'\n    regex = re.compile(pattern)\n    text2 = regex.sub(' ', text1)\n    \n    # Output string = \"a   b  c  d  e   f   g   h \"\n    return text2\n    \ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    # EXAMPLE\n    # Input string = \"   1.   2.   3.   4.   5. \"\n    # Output string = \"1.2.3.4.5. \"\n    # Note that we are removing any numbers from the start of a string.\n    \n    pattern = r'(\\d+)\\.'\n    regex = re.compile(pattern)\n    text2 = regex.sub('', text1)\n    \n    # Output string = \"1.2.3.4.5. \"\n    return text2\n    \ndef convert_to_string(text1):\n    '''\n    Write a function to convert all the symbols in the given string into a string.\n    '''\n    # EXAMPLE\n    # Input string = \"The quick brown fox jumps over the lazy dog.\"\n    # Output string = \"The: qu: c: b: f: s: r: g: h: x: u: d: t: d: l: v: n: g: r: p: f: f: m: c: g: q: e: h: y: u: j: t: z: m: u: o: b: a: d: q: l: n: c: r: t: h: t: t: w: n: g: u: j: t: t: t: q: j: p: i: a: l: e: h: r: h: t: s: s: n: c: h: t: g: f: i: g: q: f: a: b: a: d: t: j: l: g: t: t: t: q: q: n: c: t: q: h: r: m: c: t: n: t: m: c: d: c: g: t: r: l: t: s: q: z: f: o: f: h: j: t: t: x: c: t: y: c: p: y: q: u: d: g: s: n: r: v: f: a: q: i: q: a: g: j: q: g: h: u: m: g: a: c: t: g: i: i: a: a: c: t: d: l: i: l: a: b: e: g: q: e: y: t: r: q: m: f: n: a: b: a: d: g: q: y: n: r: n: f: p: f: g: a: b: d: j: g: r: r: g: q: t: a: c: r: b: a: t: s: c: t: x: q: r: d: y: q: t: x: j: j: t: t: q: q: n: c: t: h: m: q: h: q: j: t: x: y: c: t: y: a: z: g: j: t: q: q: i: x: h: t: t: q: t: n: s: x: q: t: g: s: z: o: t: q: j: p: a: b: x: f: f: a: i: l: e: r: i: t: t: x: c: x: d: q: q: n: b: a: n: q: i: c: t: c: r: t: n: t: b: r: x: a: r: t: t: t: q: b: t: q: d: a: b: r: q: t: q: r: t: g: x: f: g: q: f: y: c: r: q: n: q: n: d: f: c: z: t: q: q: t: q: b: q: r: t: q: q: n: d: q: f: f: y: t: n: g: a: u: t: q: t: j: t: z: c: p: n: j: g: j: n: p: t: m: n: b: z: r: d: x: q: h: r: s: q: g: g: g: y: q: n: a: x: i: q: x: t: t: j: t: r: t: n: d: g: r: q: b: q: q: b: a: h: f: y: a: r: q: r: h: g: q: r: q: g: b: t: q: b: t: t: i: a: n: a: d: r: t: q: q: x: q: y: a: q: g: q: q: b: y: x: q: n: c: i: q: q: i: q: a: b: y: f: n: g: q: n: t: q: t: q: t: q: q: n: d: b: a: r: b: a: a: g: b: g: r: d: y: g: q: q: i: r: n: t: t: n: a: i: r: t: b: r: c: z: q: z: t: t: t: t: t: q: b: b: q: t: q: n: q: q: n: d: q: q: q: t: t: q: q: x: q: n: q: n: q: q: q: q: n: q: q: r: q: t: t: r: q: q: q: t: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q: q"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = ''\n    for char in text1:\n        if char.isspace():\n            result += char\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\n','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\"\\n\", \"\")\n    text1 = text1.replace(\"\\t\", \"\")\n    text1 = text1.replace(\"  \", \" \")\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef rent_amount(expected_rent_amount,sale_amount):\n    '''\n    Write a function that gives rent amount on a sale if the given amount has rent else return 0.\n    '''\n    if sale_amount < expected_rent_amount:\n        return 0\n    else:\n        return sale_amount - expected_rent_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0.0\n    else: \n        return (actual_cost - sale_amount)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #If sale amount is greater than sale price then return 0 as it is not a sale\n    if sale_amount>actual_cost:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=actual_cost:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i==2 or i==4 or i==6:\n                return i\n            return sumofFactors(n/i)\n            \n    \ndef factorial(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    fact = 1\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return factorial(n//i)\n            \n            \ndef sum_digits(n) :\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    return sum([int(c) for c in str(n)])\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1) : \n        if n%i==0 : \n            sum+=i\n            #print(sum)\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 1 :\n        return n \n    else :\n        s = n \n        i = 2 \n        while i <= math.sqrt(n) : \n            if n % i == 0 : \n                s += i \n                if (n / i) % 1 == 0 : \n                    s += (n / i) \n            i += 1\n        return s\nprint(\"1 sum of even factors is\", sumofFactors(1))\nprint(\"2 sum of even factors is\", sumofFactors(2))\nprint(\"3 sum of even factors is\", sumofFactors(3))\nprint(\"4 sum of even factors is\", sumofFactors(4))\nprint(\"5 sum of even factors is\", sumofFactors(5))\nprint(\"6 sum of even factors is\", sumofFactors(6))\nprint(\"7 sum of even factors is\", sumofFactors(7))\nprint(\"8 sum of even factors is\", sumofFactors(8))\nprint(\"9 sum of even factors is\", sumofFactors(9))\nprint(\"10 sum of even factors is\", sumofFactors(10))\nprint(\"11 sum of even factors is\", sumofFactors(11))\nprint(\"12 sum of even factors is\", sumofFactors(12))\nprint(\"13 sum of even factors is\", sumofFactors(13))\nprint(\"14 sum of even factors is\", sumofFactors(14))\nprint(\"15 sum of even factors is\", sumofFactors(15))\nprint(\"16 sum of even factors is\", sumofFactors(16))\nprint(\"17 sum of even factors is\", sumofFactors(17))\nprint(\"18 sum of even factors is\", sumofFactors(18))\nprint(\"19 sum of even factors is\", sumofFactors(19))\nprint(\"20 sum of even factors is\", sumofFactors(20))\nprint(\"21 sum of even factors is\", sumofFactors(21))\nprint(\"22 sum of even factors is\", sumofFactors(22))\nprint(\"23 sum of even factors is\", sumofFactors(23))\nprint(\"24 sum of even factors is\", sumofFactors(24))\nprint(\"25 sum of even factors is\", sumofFactors(25))\nprint(\"26 sum of even factors is\", sumofFactors(26))\nprint(\"27 sum of even factors is\", sumofFactors(27))\nprint(\"28 sum of even factors is\", sumofFactors(28))\nprint(\"29 sum of even factors is\", sumofFactors(29))\nprint(\"30 sum of even factors is\", sumofFactors(30))\nprint(\"31 sum of even factors is\", sumofFactors(31))\nprint(\"32 sum of even factors is\", sumofFactors(32))\nprint(\"33 sum of even factors is\", sumofFactors(33))\nprint(\"34 sum of even factors is\", sumofFactors(34))\nprint(\"35 sum of even factors is\", sumofFactors(35))\nprint(\"36 sum of even factors is\", sumofFactors(36))\nprint(\"37 sum of even factors is\", sumofFactors(37))\nprint(\"38 sum of even factors is\", sumofFactors(38))\nprint(\"39 sum of even factors is\", sumofFactors(39))\nprint(\"40 sum of even factors is\", sumofFactors(40))\nprint(\"41 sum of even factors is\", sumofFactors(41))\nprint(\"42 sum of even factors is\", sumofFactors(42))\nprint(\"43 sum of even factors is\", sumofFactors(43))\nprint(\"44 sum of even factors is\", sumofFactors(44))\nprint(\"45 sum of even factors is\", sumofFactors(45))\nprint(\"46 sum of even factors is\", sumofFactors(46))\nprint(\"47 sum of even factors is\", sumofFactors(47))\nprint(\"48 sum of even factors is\", sumofFactors(48))\nprint(\"49 sum of even factors is\", sumofFactors(49))\nprint(\"50 sum of even factors is\", sumofFactors(50))\nprint(\"51 sum of even factors is\", sumofFactors(51))\nprint(\"52 sum of even factors is\", sumofFactors(52))\nprint(\"53 sum of even factors is\", sumofFactors(53))\nprint(\"54 sum of even factors is\", sumofFactors(54))\nprint(\"55 sum of even factors is\", sumofFactors(55))\nprint(\"56 sum of even factors is\", sumofFactors(56))\nprint(\"57 sum of even factors is\", sumofFactors(57))\nprint(\"58 sum of even factors is\", sumofFactors(58))\nprint(\"59 sum of even factors is\", sumofFactors(59))\nprint(\"60 sum of even factors is\", sumofFactors(60))\nprint(\"61 sum of even factors is\", sumofFactors(61))\nprint(\"62 sum of even factors is\", sumofFactors(62))\nprint(\"63 sum of even factors is\", sumofFactors(63))\nprint(\"64 sum of even factors is\", sumofFactors(64))\nprint(\"65 sum of even factors is\", sumofFactors(65))\nprint(\"66 sum of even factors is\", sumofFactors(66))\nprint(\"67 sum of even factors is\", sumofFactors(67))\nprint(\"68 sum of even factors is\", sumofFactors(68))\nprint(\"69 sum of even factors is\", sumofFactors(69))\nprint(\"70 sum of even factors is\", sumofFactors(70))\nprint(\"71 sum of even factors is\", sumofFactors(71))\nprint(\"72 sum of even factors is\", sumofFactors(72))\nprint(\"73 sum of even factors is\", sumofFactors(73))\nprint(\"74 sum of even factors is\", sumofFactors(74))\nprint(\"75 sum of even factors is\", sumofFactors(75))\nprint(\"76 sum of even factors is\", sumofFactors(76))\nprint(\"77 sum of even factors is\", sumofFactors(77))\nprint(\"78 sum of even factors is\", sumofFactors(78))\nprint(\"79 sum of even factors is\", sumofFactors(79))\nprint(\"80 sum of even factors is\", sumofFactors(80))\nprint(\"81 sum of even factors is\", sumofFactors(81))\nprint(\"82 sum of even factors is\", sumofFactors(82))\nprint(\"83 sum of even factors is\", sumofFactors(83))\nprint(\"84 sum of even factors is\", sumofFactors(84))\nprint(\"85 sum of even factors is\", sumofFactors(85))\nprint(\"86 sum of even factors is\", sumofFactors(86))\nprint(\"87 sum of even factors is\", sumofFactors(87))\nprint(\"88 sum of even factors is\", sumofFactors(88))\nprint(\"89 sum of even factors is\", sumofFactors(89))\nprint(\"90 sum of even factors is\", sumofFactors(90))\nprint(\"91 sum of even factors is\", sumofFactors(91))\nprint(\"92 sum of even factors is\", sumofFactors(92))\nprint(\"93 sum of even factors is\", sumofFactors(93))\nprint(\"94 sum of even factors is\", sumofFactors(94))\nprint(\"95 sum of even factors is\", sumofFactors(95))\nprint(\"96 sum of even factors is\", sumofFactors(96))\nprint(\"97 sum of even factors is\", sumofFactors(97))\nprint(\"98 sum of even factors is\", sumofFactors(98))\nprint(\"99 sum of even factors is\", sumofFactors(99))\nprint(\"100 sum of even factors is\", sumofFactors(100))\nprint(\"101 sum of even factors is\", sumofFactors(101))\nprint(\"102 sum of even factors is\", sumofFactors(102))\nprint(\"103 sum of even factors is\", sumofFactors(103))\nprint(\"104 sum of even factors is\", sumofFactors(104))\nprint(\"105 sum of even factors is\", sumofFactors(105))\nprint(\"106 sum of even factors is\", sumofFactors(106))\nprint(\"107 sum of even factors is\", sumofFactors(107))\nprint(\"108 sum of even factors is\", sumofFactors(108))\nprint(\"109 sum of even factors is\", sumofFactors(109))\nprint(\"110 sum of even factors is\", sumofFactors(110))\nprint(\"111 sum of even factors is\", sumofFactors(111))\nprint(\"112 sum of even factors is\", sumofFactors(112))\nprint(\"113 sum of even factors is\", sumofFactor"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else :\n        x = n\n        factors = 1\n        while x % 2 == 0:\n            x = x / 2\n            factors = factors + 1\n        if (x == 1):\n            return factors\n        return sumofFactors(x) + sumofFactors(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0 \n    if n == 1 : \n        return 1 \n    if n % 2 == 0 : \n        return sumofFactors(n//2) + 1\n    else : \n        return 1 + sumofFactors(n//2) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        sum = 0\n        for i in range(1,int(math.sqrt(n))+1):\n            if n % i == 0:\n                sum += i\n        return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    i = 2\n    while (i * i) <= n :\n        if (n % i) == 0 :\n            res += i \n            n = n // i\n        else :\n            i += 1\n    return res \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=2\n    a=1\n    b=0\n    while a<n:\n        if n%a==0:\n            b+=a\n            n=n/a\n        else:\n            a+=i\n            i+=1\n    return b\ndef sumOfFactors(n):\n    '''\n    return the sum of all even factors of a number\n    '''\n    a=0\n    b=0\n    while a<n:\n        if n%a==0:\n            b+=a\n        a+=2\n    return b\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if (n%i)==0:\n            sum+=i\n    print(\"The sum of even factors is:\",sum)\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print(\"Hello from text_match_wordz!\")\n    return (text.count(\"z\") >= 1)\ndef has_a(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a!\")\n    return len(text) >= 1\ndef has_a_i(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_i!\")\n    return len(text) >= 1\ndef has_a_ii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_ii!\")\n    return len(text) >= 1\ndef has_a_iii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_iii!\")\n    return len(text) >= 1\ndef has_a_iv(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_iv!\")\n    return len(text) >= 1\ndef has_a_v(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_v!\")\n    return len(text) >= 1\ndef has_a_vi(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_vi!\")\n    return len(text) >= 1\ndef has_a_vii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_vii!\")\n    return len(text) >= 1\ndef has_a_viii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_viii!\")\n    return len(text) >= 1\ndef has_a_ix(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_ix!\")\n    return len(text) >= 1\ndef has_a_xx(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_xx!\")\n    return len(text) >= 1\ndef has_a_yy(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_yy!\")\n    return len(text) >= 1\ndef has_a_z(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z!\")\n    return len(text) >= 1\ndef has_a_z_i(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_i!\")\n    return len(text) >= 1\ndef has_a_z_ii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_ii!\")\n    return len(text) >= 1\ndef has_a_z_iii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_iii!\")\n    return len(text) >= 1\ndef has_a_z_iv(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_iv!\")\n    return len(text) >= 1\ndef has_a_z_v(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_v!\")\n    return len(text) >= 1\ndef has_a_z_vi(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_vi!\")\n    return len(text) >= 1\ndef has_a_z_vii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_vii!\")\n    return len(text) >= 1\ndef has_a_z_viii(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_viii!\")\n    return len(text) >= 1\ndef has_a_z_ix(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_ix!\")\n    return len(text) >= 1\ndef has_a_z_xx(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_xx!\")\n    return len(text) >= 1\ndef has_a_z_yy(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_yy!\")\n    return len(text) >= 1\ndef has_a_z_zz(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_zz!\")\n    return len(text) >= 1\ndef has_a_z_abc(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hello from has_a_z_abc!\")\n    return len(text) >= 1\ndef has_a_z_abc_i(text):\n    '''\n    Write a function that takes a string and returns\n    a Boolean indicating whether or not a string contains any\n    letters that occur in the alphabet.\n    '''\n    print(\"Hell"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    text = text.lower()\n    if(re.search(pattern, text)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\ndef text_match_letter(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-z]', text)\ndef text_match_num(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_number(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_alpha(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_symbol(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_symbol_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_no_symbol(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_no_symbol_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_no_number(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_no_number_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_letter(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_letter_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_number(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_alpha(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_alpha_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_symbol(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_symbol_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_symbol_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_symbol_without_arrow_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^a-zA-Z]', text)\ndef text_match_any_number(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_with_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_with_arrow_without_arrow_with_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow_without_arrow_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow_without_arrow_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow_without_arrow_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any_number_without_arrow_without_arrow_without_arrow_without_arrow_without_arrow_without_arrow(text):\n    '''\n    Write a function that matches a word that has one letter that is not a number.\n    '''\n    return re.search('[^0-9]', text)\ndef text_match_any"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    m = pattern.match(text)\n    if m!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    return pattern.search(text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z = \"z\"\n    return re.match(z, text) is not None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    pattern = 'y'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    pattern = 'n'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    pattern = 'o'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    pattern = 'p'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    pattern = 'r'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    pattern ='s'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    pattern = 't'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    pattern = 'u'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordv(text):\n    '''\n    Write a function that matches a word containing 'v'.\n    '''\n    pattern = 'v'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    pattern = 'w'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    pattern = 'x'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    pattern = 'y'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    pattern = 'n'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    pattern = 'o'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    pattern = 'p'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    pattern = 'r'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    pattern ='s'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    pattern = 't'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    pattern = 'u'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordv(text):\n    '''\n    Write a function that matches a word containing 'v'.\n    '''\n    pattern = 'v'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    pattern = 'w'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    pattern = 'x'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    pattern = 'y'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    pattern = 'n'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    pattern = 'o'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    pattern = 'p'\n    match_obj = re.search(pattern,text)\n    if match_obj is not None:\n        return True\n    else:\n        return False\ndef text_match_wordr(text):\n    '''\n    Write a function tha"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.search(r'\\bz\\b', text)\n    if result:\n        print(\"found z\")\n    else:\n        print(\"could not find z\")\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #print(monthnum2)\n    if monthnum2 == 1 or monthnum2 == 2:\n        return True\n    elif monthnum2 == 3 or monthnum2 == 4:\n        return True\n    elif monthnum2 == 5 or monthnum2 == 6:\n        return True\n    elif monthnum2 == 7 or monthnum2 == 8:\n        return True\n    elif monthnum2 == 9 or monthnum2 == 10:\n        return True\n    elif monthnum2 == 11 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return False\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return False\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return False\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return False\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return False\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    for month in range(1,13):\n        if month == monthnum2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return 'Sorry, Month Number must be less than 12'\n    if monthnum2 < 1:\n        return 'Sorry, Month Number must be more than 1'\n    return ''\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum_list = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if monthnum2 >= 31 or monthnum2 <= 0:\n        return \"Error: Month number cannot be greater than 31 or less than 0\"\n    for m in monthnum_list:\n        if monthnum2 == m:\n            return \"Valid Month number\"\n    return \"Invalid Month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_list = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n    for monthnum in monthnumb_list:\n        if monthnum2 == monthnum:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = str(monthnum2)\n    monthnum2 = monthnum2.zfill(2)\n    return monthnum2[0] == '1'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 >= 12:\n        return False\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum1 = int(monthnum2)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def reverse_string(string):\n        if len(string) == 1:\n            return string\n        elif len(string) == 2:\n            return string[-1] + string[0]\n        else:\n            return string[-2] + string[-1] + string[0]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return_list = []\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # TODO: Write your solution here\n    temp_list=[]\n    for i in stringlist:\n        temp_list.append(i[::-1])\n    return temp_list\n    #pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n    \n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    if(stringlist==[]):\n        return stringlist\n    for i in range(len(stringlist)-1,-1,-1):\n        reverse_list.append(stringlist[i])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # your code goes here\n    s=''\n    for word in stringlist:\n        s+=word[::-1]\n    return s\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(map(lambda x: x[::-1], stringlist))\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in stringlist:\n        stringlist.remove(string)\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate through the list\n    for item in stringlist:\n        # replace'' with ''\n        item = item.replace(' ', '')\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if(len(lst) == 0):\n        return(0)\n    else:\n        l = lst[0]\n        for i in range(1, len(lst)):\n            if(len(lst[i]) < len(l)):\n                l = lst[i]\n        return(len(l))\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst) - 1):\n        if (lst[i + 1] - lst[i]) < lst[i]:\n            return lst[i + 1] - lst[i]\n    return 0\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min= lst[0]\n    min_idx= 0\n    for i in range(1,len(lst)):\n        if lst[i]<min:\n            min= lst[i]\n            min_idx= i\n    return min,min_idx\ndef Check_Min(lst,min_idx):\n    '''\n    Write a python function to check if the sublist has a minimum length.\n    '''\n    if lst[min_idx]==1:\n        return True\n    return False\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    #print(lst)\n    min_len = len(lst)\n    #print(min_len)\n    for i in range(0, min_len):\n        #print(i)\n        if lst[i] < lst[i-1]:\n            print(lst[i], lst[i-1], lst[i-2])\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst)\n    for i in range(0, len(lst)):\n        if(len(lst[i]) < minimum):\n            minimum = len(lst[i])\n            min_idx = i\n    return min_idx\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    len_min = 0\n    Min_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len_min:\n            len_min = len(lst[i])\n            Min_list = [i]\n        elif len(lst[i]) == len_min:\n            if lst[i] not in Min_list:\n                Min_list.append(i)\n    return Min_list"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min=lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    min_index = lst[0]\n    for i in range(1, len(lst)):\n        if(lst[i] < min_index):\n            min_index = lst[i]\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for x in lst: \n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Assertion \n    assert len(lst) > 0, \"Invalid input, length of list cannot be 0\"\n    \n    # Start the loop\n    minimum = min(lst)\n    \n    # Check if minimum length is > 0.\n    # If yes, return minimum \n    # Else return None.\n    if len(lst) == 1: \n        return lst[0]\n    else:\n        for index in range(0,len(lst)):\n            if minimum == lst[index]:\n                return index + 1\n        return None\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # Write your code here.\n    return (l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l,b)\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # write your code here\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # Output of this function must be a tuple\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print (\"The area of rectangle is :\",area)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r\"^[A-Z]{2,}\\s\"\n    for char in str1:\n        if char.isupper():\n            str1 = str1.replace(char, \"\")\n    return str1\ndef lowercase_strings(str1):\n    '''\n    Write a function to lowercase all the words in a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = remove_uppercase(str1)\n    str1 = str1.lower()\n    return str1\ndef text_normalization(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    pattern = r\"[0-9]+\\s*[0-9]+\\s*[0-9]+\"\n    for char in str1:\n        if char.isalpha():\n            str1 = str1.replace(char, \"\")\n        elif char.isdigit():\n            str1 = str1.replace(char, \"\")\n        elif char.isupper():\n            str1 = str1.replace(char, \"\")\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    pattern = r\"[^A-Za-z0-9\\n\\s\\,\\']\"\n    for char in str1:\n        if char.isalpha():\n            str1 = str1.replace(char, \"\")\n        elif char.isdigit():\n            str1 = str1.replace(char, \"\")\n        elif char.isupper():\n            str1 = str1.replace(char, \"\")\n    return str1\ndef normalize_keywords(str1):\n    '''\n    Write a function to normalize words that are not under the keywords list.\n    '''\n    pattern = r\"[a-z][a-z]+\\s*[a-z]+\\s*[a-z]+\\s*[a-z]+\"\n    for char in str1:\n        if char.isalpha():\n            str1 = str1.replace(char, \"\")\n        elif char.isdigit():\n            str1 = str1.replace(char, \"\")\n        elif char.isupper():\n            str1 = str1.replace(char, \"\")\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if(len(str1)>0):\n        if(str1[0].isupper()):\n            return str1[1:]\n        else:\n            return str1\n    else:\n        return \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    regex = re.compile('[A-Z]+')\n    return regex.sub('',str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(str(str1)[0], '').replace(str(str1)[-1], '')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # loop through each character\n    # remove the first character\n    # if first character is uppercase, remove the rest\n    # return the new string\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = '^[A-Z]+$'\n    return re.sub(regex, '', str1, count=1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(' ','')\ndef split_into_words(str1):\n    '''\n    Write a function that splits a string into a list of words.\n    '''\n    return str1.split()\ndef remove_spaces(str1):\n    '''\n    Write a function that removes spaces from a given string.\n    '''\n    return str1.replace(' ','')\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function that removes all multiple spaces from a given string.\n    '''\n    return str1.replace(' ','')\ndef remove_digit(str1):\n    '''\n    Write a function that removes all digits from a given string.\n    '''\n    return str1.replace(' ','')\ndef remove_extra_spaces(str1):\n    '''\n    Write a function that removes all spaces from the end of a string.\n    '''\n    return str1.replace(' ','')\ndef remove_newlines(str1):\n    '''\n    Write a function that removes all newlines from a given string.\n    '''\n    return str1.replace('\\n',' ')\ndef split_words_and_slices(str1):\n    '''\n    Write a function that splits a given string into words and slices at the specified indices.\n    '''\n    return str1.split()\ndef format_in_order(str1):\n    '''\n    Write a function that formats a given string in order.\n    '''\n    return str1.lstrip()\ndef remove_numbers(str1):\n    '''\n    Write a function that removes all the numbers from a given string.\n    '''\n    return str1.replace('+','').replace('-','').replace('.','')\ndef remove_special_chars(str1):\n    '''\n    Write a function that removes all the special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z]','', str1).lower()\ndef remove_stopwords(str1):\n    '''\n    Write a function that removes all the stopwords from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z]','', str1).lower()\ndef get_words_from_sentence(str1):\n    '''\n    Write a function that gets all the words from a given sentence.\n    '''\n    return re.findall(r'\\w+', str1)\ndef remove_unique_words(str1):\n    '''\n    Write a function that removes all the unique words from a given sentence.\n    '''\n    return re.sub(r'[^a-zA-Z]+','', str1)\ndef clean_sentence(str1):\n    '''\n    Write a function that cleans a given sentence.\n    '''\n    return str1.replace('.', '').replace(',','').replace('!','').replace('?','').replace('\\'s','').replace('\\'','').replace('\\'','').replace('!','').replace('\\'s','').replace('?','').replace('!','').replace('!','').replace('!','').replace('!','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replac"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    lower_case_str = str1.lower()\n    \n    pattern = re.compile(r'[^\\w]')\n    return pattern.sub('', lower_case_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].isupper()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].isdigit()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef remove_non_digit(str1):\n    '''\n    Write a function to remove non digit from a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(not lst1[i].isdigit()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_length(str1):\n    '''\n    Write a function to count the length of a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].isupper()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return len(new_string)\ndef remove_non_digit_2(str1):\n    '''\n    Write a function to remove non digit from a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(not lst1[i].isdigit()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_lower_case(str1):\n    '''\n    Write a function to count the length of a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].islower()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return len(new_string)\ndef get_upper_case(str1):\n    '''\n    Write a function to count the length of a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].isupper()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return len(new_string)\ndef get_digit(str1):\n    '''\n    Write a function to count the length of a given string.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].isdigit()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return len(new_string)\ndef get_strip(str1):\n    '''\n    Write a function to remove leading and trailing spaces.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].strip()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_strip_2(str1):\n    '''\n    Write a function to remove leading and trailing spaces.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].strip()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_lower_case_2(str1):\n    '''\n    Write a function to remove leading and trailing spaces.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].islower()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_upper_case_2(str1):\n    '''\n    Write a function to remove leading and trailing spaces.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].isupper()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_digit_2(str1):\n    '''\n    Write a function to remove leading and trailing spaces.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].isdigit()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_strip_3(str1):\n    '''\n    Write a function to remove leading and trailing spaces.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].strip()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_strip_4(str1):\n    '''\n    Write a function to remove leading and trailing spaces.\n    '''\n    lst1=list(str1)\n    lst2=[]\n    for i in range(len(lst1)):\n        if(lst1[i].strip()):\n            lst2.append(lst1[i])\n            lst1.remove(lst1[i])\n    new_string=\"\"\n    for i in lst2:\n        new_string+=i\n    return new_string\ndef get_strip_5(str1):\n    '''\n    Write "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst.sort()\n    return lst[0]\n    \ndef main(): \n    '''\n    Check the method above and execute the function.\n    '''\n    lst = [1,2,3,4,5,6,7,8,9]\n    print(Extract(lst))\n    \nmain("
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # get list\n    lst = lst[0]\n    # loop through list\n    for i in lst:\n        print(i)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for x in lst:\n        print(x[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = [0] + lst + [0]\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)-1): \n        lst[i] = lst[i][0] \n    return lst[0] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def find_first(lst):\n        for i in lst:\n            if i[0] == i[0]:\n                return i[0]\n        return False\n    return find_first(lst)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if lst == []:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return Extract(lst[1:])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper+=1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    string = str.upper()\n    return string.count('U')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(char.isupper() for char in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case += 1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str = str.upper()\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    for i in range(0, len(str)):\n        if str[i].isupper():\n            print(str[i], end=' ')\n    print('\\n')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # upper_ctr_s = str.upper()\n    # count_upper = upper_ctr_s.count('A')\n    # print(count_upper)\n    upper_ctr_dict = dict()\n    upper_ctr_dict['A'] = 0\n    upper_ctr_dict['B'] = 0\n    upper_ctr_dict['C'] = 0\n    upper_ctr_dict['D'] = 0\n    upper_ctr_dict['E'] = 0\n    upper_ctr_dict['F'] = 0\n    upper_ctr_dict['G'] = 0\n    upper_ctr_dict['H'] = 0\n    upper_ctr_dict['I'] = 0\n    upper_ctr_dict['J'] = 0\n    upper_ctr_dict['K'] = 0\n    upper_ctr_dict['L'] = 0\n    upper_ctr_dict['M'] = 0\n    upper_ctr_dict['N'] = 0\n    upper_ctr_dict['O'] = 0\n    upper_ctr_dict['P'] = 0\n    upper_ctr_dict['Q'] = 0\n    upper_ctr_dict['R'] = 0\n    upper_ctr_dict['S'] = 0\n    upper_ctr_dict['T'] = 0\n    upper_ctr_dict['U'] = 0\n    upper_ctr_dict['V'] = 0\n    upper_ctr_dict['W'] = 0\n    upper_ctr_dict['X'] = 0\n    upper_ctr_dict['Y'] = 0\n    upper_ctr_dict['Z'] = 0\n    for letter in str:\n        if letter == letter.upper():\n            upper_ctr_dict['A'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['B'] += 1\n        if letter == letter.title():\n            upper_ctr_dict['C'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['D'] += 1\n        if letter == letter.lowercase():\n            upper_ctr_dict['E'] += 1\n        if letter == letter.upper():\n            upper_ctr_dict['F'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['G'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['H'] += 1\n        if letter == letter.upper():\n            upper_ctr_dict['I'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['J'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['K'] += 1\n        if letter == letter.upper():\n            upper_ctr_dict['L'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['M'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['N'] += 1\n        if letter == letter.upper():\n            upper_ctr_dict['O'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['P'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['Q'] += 1\n        if letter == letter.upper():\n            upper_ctr_dict['R'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['S'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['T'] += 1\n        if letter == letter.upper():\n            upper_ctr_dict['U'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['V'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['W'] += 1\n        if letter == letter.upper():\n            upper_ctr_dict['X'] += 1\n        if letter == letter.capitalize():\n            upper_ctr_dict['Y'] += 1\n        if letter == letter.lower():\n            upper_ctr_dict['Z'] += 1\n    upper_ctr_dict = {k: v for k, v in upper_ctr_dict.items() if v > 0}\n    return upper_ctr_dict\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    if len(list1) == 1:\n        return [list1[0]]\n    else:\n        for i in range(len(list1)):\n            list1[i] = list1[i] * list1[i]\n        for i in combinations_list(list1[1:]):\n            list2.append(list1[0] + i + list1[-1])\n            list1[-1] = 0\n        return list2\n    \n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    for i in range(1, len(list1) + 1):\n        combinations_list.append(list1[:i])\n        combinations_list.append(list1[i:])\n    return combinations_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    for i in range(1, len(list1)+1):\n        for comb in itertools.combinations(list1, i):\n            all_combinations.append(comb)\n    return all_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    i = 0\n    while i < len(list1):\n        # Choose a random element\n        random_element = random.choice(list1)\n        # For a list of values, create a combination\n        comb = combinations(random_element, list1.count(random_element))\n        # Append the combination to the list\n        comb_list.append(comb)\n        # Find the next number in the list\n        i = i + 1\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        for j in combinations(i, len(i)):\n            list2.append(j)\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        combinations.append(list(list1[i]))\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    combinations = [list(a) for a in itertools.combinations(list1, len(list1))]\n    return(combinations)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    '''\n    import itertools\n    import math\n    \n    output = []\n    for x in range(0, len(list1)):\n        combinations = list(itertools.combinations(list1, x))\n        for y in range(0, len(combinations)):\n            output.append(combinations[y])\n            output.append(list(combinations[y])[::-1])\n    print(output)\n    '''\n    \n    '''\n    import itertools\n    import math\n    \n    def combination_list(list1):\n        '''\n        Write a function that returns a list of all possible combination of elements in list1.\n        '''\n        output = []\n        for x in range(0, len(list1)):\n            for y in range(0, len(list1)):\n                if list1[x] > list1[y]:\n                    output.append((list1[x], list1[y]))\n        return output\n    \n    def distance(a, b):\n        '''\n        Returns the distance between two points a and b in a list of tuples.\n        '''\n        return math.sqrt(sum([(x[0] - x[1])**2 for x in zip(a,b)]))\n    \n    def combination_list(list1):\n        '''\n        Write a function that returns a list of all possible combination of elements in list1.\n        '''\n        output = []\n        for x in range(0, len(list1)):\n            for y in range(0, len(list1)):\n                if x > y:\n                    output.append((list1[x], list1[y]))\n        return output\n    \n    def shortest_distance(a, b):\n        '''\n        Returns the shortest distance between two points a and b in a list of tuples.\n        '''\n        return math.sqrt(sum([(x[0] - x[1])**2 for x in zip(a,b)]))\n    \n    def sum_of_squares(a, b):\n        '''\n        Returns the sum of squares of the elements in a and b in a list of tuples.\n        '''\n        return sum([(x[0] - x[1])**2 for x in zip(a,b)])\n    \n    def power(a, b):\n        '''\n        Returns the power of a and b in a list of tuples.\n        '''\n        return pow(a,b)\n    \n    def complement(a, b):\n        '''\n        Returns the complement of a and b in a list of tuples.\n        '''\n        return b - (a - b)\n    \n    def next_sum_of_squares(a, b):\n        '''\n        Returns the next sum of squares of the elements in a and b in a list of tuples.\n        '''\n        return sum([(x[0] - x[1])**2 for x in zip(a,b)])\n    \n    def gcd(a, b):\n        '''\n        Returns the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return math.gcd(a, b)\n    \n    def euclid_root(a, b):\n        '''\n        Returns the euclidean root of a and b in a list of tuples.\n        '''\n        return math.sqrt(math.pow(a,2) + math.pow(b,2))\n    \n    def permute(a, b):\n        '''\n        Returns the permutations of a and b in a list of tuples.\n        '''\n        return itertools.product(a, b)\n    \n    def inverse(a, b):\n        '''\n        Returns the inverses of the elements of a and b in a list of tuples.\n        '''\n        return a % b\n    \n    def index_of_pair(a, b):\n        '''\n        Returns the index of the first pair that is a and b in a list of tuples.\n        '''\n        if a == b:\n            return 0\n        if a == b + 1:\n            return 1\n        return index_of_pair(a + 1, b)\n    \n    def dfs(a, b):\n        '''\n        Recursive implementation of a function that returns the data of the pair,\n        to be used by other functions in this module.\n        '''\n        if a == b:\n            return a\n        return dfs(a + 1, b)\n    \n    def divisors(n):\n        '''\n        Returns the divisors of a number in a list of tuples.\n        '''\n        return list(itertools.filterfalse(lambda x: x%2 == 1, range(1, int(math.sqrt(n)+1))))\n    \n    def gcd(a, b):\n        '''\n        Returns the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return gcd(b, a % b)\n    \n    def gcd_factor(a, b):\n        '''\n        Returns the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return (gcd(a, b) * gcd(b, a % b)) // math.gcd(a, b)\n    \n    def gcd_and(a, b):\n        '''\n        Returns the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return gcd(a, b) * gcd_and(b, a % b)\n    \n    def gcd_factors(a, b):\n        '''\n        Returns the factors of the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return itertools.filterfalse(lambda x: x[1] >= (a % x[1]), zip(a, b))\n    \n    def gcd_and_factors(a, b):\n        '''\n        Returns the factors of the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return itertools.filterfalse(lambda x: x[1] >= (a % x[1]), zip(a, b))\n    \n    def mod_inv(a, m):\n        '''\n        Returns the inverse of a mod m in a list of tuples.\n        '''\n        return [math.floor(x / a) for x in range(a)]\n    \n    def mod_inv_factors(a, b):\n        '''\n        Returns the factors of the inverse of a mod m in a list of tuples.\n        '''\n        return itertools.filterfalse(lambda x: x[1] >= (a % x[1]), zip(a, b))\n    \n    def divisor_of_tenth(a, b):\n        '''\n        Returns the divisors of a number in a list of tuples.\n        '''\n        return [x for x in itertools.filterfalse(lambda x: x[1] == 1, itertools.combinations(a, r=2))]\n    \n    def gcd_factors_and_factors(a, b):\n        '''\n        Returns the factors of the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return itertools.filterfalse(lambda x: x[1] >= (a % x[1]), zip(a, b))\n    \n    def gcd_and_factors_and_factors(a, b):\n        '''\n        Returns the factors of the greatest common divisor of two numbers in a list of tuples.\n        '''\n        return itertools.filterfalse(lambda x: x[1] >= (a % x[1]), zip(a, b))\n    \n    def mod_inv_factors_and_factors(a, b):\n        '''\n        Returns the factors of the inverse of a mod m of a and b in a list of tuples.\n        '''\n        return itertools.filterfalse(lambda x: x[1] >= (a % x[1]), zip(a, b))\n    \n    def index_of_factors_and_factors(a, b):\n        '''\n        Returns the index of the first factor of a and b in a list of tuples.\n        '''\n        return index"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    \n    l = len(arr)\n    for i in range(l):\n        max_product = max(max_product, arr[i])\n        \n    return max_product\n        \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if len(arr) == 0:\n        return []\n    \n    max_prod = float('-inf')\n    min_prod = float('inf')\n    \n    for i in range(len(arr)):\n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n    \n    return max_prod, min_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = -100\n    start, end = 0, 0\n    \n    while end < len(arr):\n        max_prod = max(arr[start], arr[end])\n        if max_prod > max_prod:\n            max_prod = max_prod * arr[start]\n        if arr[start] < arr[end]:\n            start += 1\n        end += 1\n    \n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    max_subarray = []\n    arr_len = len(arr)\n    for i in range(0, arr_len):\n        # find the current min element and then add it to max_subarray\n        cur_min = arr[i]\n        for j in range(i, arr_len):\n            if arr[j] < cur_min:\n                cur_min = arr[j]\n                # because if cur_min < arr[i], it'll increase the max_subarray\n                max_subarray = []\n                # add the current subarray to max_subarray\n                max_subarray.append(arr[i])\n                # add the current subarray to max_subarray\n                max_subarray.append(arr[j])\n                # set the current min to arr[j]\n                cur_min = arr[j]\n                break\n        # if the array[i] is not larger than the current min, it's not a product of subarrays\n        if arr[i] > cur_min and len(max_subarray) > 0:\n            # if the current subarray is greater than the max subarray, add it to the max subarray\n            max_subarray.append(arr[i])\n            # set the current min to arr[i]\n            cur_min = arr[i]\n            # set the current subarray to empty list\n            arr[i] = []\n            # add the current subarray to the max subarray\n            max_subarray.append(arr[i])\n            # if the current subarray is larger than the max subarray, set the max_subarray to it\n            if len(max_subarray) > len(max_subarray[0]):\n                max_subarray = max_subarray[0]\n    return max_subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = []\n    max_product = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sub_product = 1\n    size = len(arr)\n    cur_max = 1\n    cur_max_idx = 0\n    for i in range(size):\n        cur_max *= arr[i]\n        cur_max_idx = max(cur_max_idx, i)\n    for i in range(size - cur_max_idx, size):\n        max_sub_product *= arr[i]\n        max_sub_product_idx = max(max_sub_product_idx, i - cur_max_idx)\n    return cur_max\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_sum = 0\n    max_subarray_sum_sum = 0\n    max_subarray_sum_sum_idx = 0\n    max_subarray_sum_sum_len = 0\n    max_subarray_sum_len_idx = 0\n    \n    for idx, val in enumerate(arr):\n        # Find the max subarray sum\n        max_subarray_sum = max(max_subarray_sum, val)\n        \n        # Calculate the length of the max subarray\n        if idx == 0:\n            max_subarray_sum_len = 1\n            max_subarray_sum_len_idx = idx\n        else:\n            max_subarray_sum_len = max(max_subarray_sum_len, arr[idx-1] + 1)\n            max_subarray_sum_len_idx = max(max_subarray_sum_len_idx, idx - 1)\n        \n        # Find the max subarray sum\n        max_subarray_sum_sum = max(max_subarray_sum, val * arr[idx])\n        \n    return max_subarray_sum_sum, max_subarray_sum_len_idx, max_subarray_sum_sum_idx\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_p = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = arr[i]\n        for j in range(i):\n            if arr[j] * temp > max_p:\n                temp = arr[j] * max_p\n        max_p = max(temp, max_p)\n        \n    return max_p\n        \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr)):\n        arr[i] = arr[i-1] * arr[i]\n    return max(arr)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(k in dict for k in n.keys()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    list_of_keys = list(dict.keys())\n    list_of_keys.sort()\n    #print(list_of_keys)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if i!= dict['name']:\n            if (dict['name'].isalpha()) == False:\n                print(\"Not a valid name.\")\n                return False\n            else:\n                return True\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict = dict.copy()\n    for i in range(n):\n        for key in dict.keys():\n            if dict[key]!= key:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict[x] == n for x in dict):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    d = dict.copy()\n    for i in d.values():\n        if not isinstance(i, dict):\n            raise TypeError('Need an dict')\n    for k in d.keys():\n        if not isinstance(d[k], dict):\n            raise TypeError('Need an dict')\n        for key in d[k].keys():\n            if not isinstance(d[k][key], dict):\n                raise TypeError('Need an dict')\n            if len(d[k][key])!= n:\n                raise ValueError(f'Keys and values are not of the same size: {k}, {i}')\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= dict[i]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= key:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # variable to store the actual dictionary\n    actual_dict = dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if len(v) == 0:\n            dict1.pop(k)\n            print(f\"The dictionary after dropping empty item: {dict1}\")\n            return True\n    return False\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if len(dict1[key]) == 0:\n            dict1.pop(key)\n        else:\n            pass\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # TODO: Write your code here\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if(dict1[i]==''):\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = dict1.copy()\n    for key in dict2:\n        if dict2[key] == '':\n            dict2.pop(key)\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if len(dict1[i]) == 0:\n            del dict1[i]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if type(dict1[key])==list:\n            for item in dict1[key]:\n                if len(item)==0:\n                    del dict1[key][item]\n        else:\n            dict1[key] = dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if value == 0:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if dict1[i] =='':\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if len(v) == 0:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # declare an array of the base cases\n    num_arr = [1,1]\n    for i in range(2, len(arr)):\n        num_arr[i] = arr[i]*num_arr[i-1]\n    \n    # declare a result variable\n    max_result = num_arr[0]\n    \n    # iterate through the array till we hit the base cases\n    for i in range(1, len(num_arr)):\n        # use the multiplication operator to calculate the maximum product\n        max_result = max(max_result, num_arr[i]*max_result)\n    \n    # return the maximum product\n    return max_result\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #TODO: Write your code here\n    return arr[0]\n    #return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    index = 0\n    while index < len(arr):\n        product *= arr[index]\n        index += 1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum = float('-inf')\n    current = 1\n    for i in range(1,len(arr)):\n        current *= arr[i]\n        if current > maximum:\n            maximum = current\n    return maximum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m=[]\n    sum=0\n    for i in range(len(arr)):\n        m.append(arr[i]+sum)\n        sum+=arr[i]\n    return max(m)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 0:\n        return 0\n    \n    res = arr[0]\n    \n    for i in range(1,len(arr)):\n        res = max(res*arr[i],arr[i])\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_sum = arr[0]\n    for i in range(1,len(arr)):\n        max_sum = max(arr[i],max_sum*arr[i-1])\n    return max_sum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def recur(lst,i,n):\n        if i==n:\n            return lst[:i+1]\n        else:\n            return max(lst[i]*recur(lst,i+1,n),recur(lst,i+1,n))\n    return recur(arr,0,len(arr))\narr = [2,3,1,2,4,3,5,1]\nprint(max_product(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    print(\"\\n Maximum product of the increasing subsequence: \")\n    max_prod=0\n    product=1\n    for i in range(1,len(arr)):\n        product=arr[i]*product\n        if product>max_prod:\n            max_prod=product\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup[0])\n    m = len(test_tup[1])\n    return n*m, [list(tup) for tup in zip(test_tup[0], test_tup[1])]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \n    \ndef add_pairwise_nested(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \n    \ndef remove_pairwise_nested(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested_old(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \n    \ndef remove_pairwise_nested_old2(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested_old3(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested_old4(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested_old5(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested_old6(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested_old7(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested_old8(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    left, right = test_tup\n    if not isinstance(left, tuple):\n        left = (left,)\n    if not isinstance(right, tuple):\n        right = (right,)\n    \n    left_s = set(left)\n    right_s = set(right)\n    \n    left_s -= right_s\n    left_s -= left_s\n    left_s = list(left_s)\n    left_s.sort()\n    \n    return tuple(left_s + right_s)\n    \ndef remove_pairwise_nested"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    s = set(test_tup)\n    n = len(test_tup)\n    \n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            # Both i and j are not in s, and both i and j are in s.\n            if i not in s and j not in s and i!=j:\n                s.add(i)\n                s.add(j)\n    return s\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        avg = (test_tup[0] + test_tup[1])/2\n        sum_tuple = (test_tup[0] + test_tup[1])\n        for index in range(2, len(test_tup)):\n            sum_tuple = sum_tuple + (test_tup[index] + test_tup[index + 1])\n            avg = sum_tuple/2\n        return avg\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    if (len(test_tup)<=2):\n        return test_tup\n    else:\n        return list(zip(*test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n=len(test_tup[0])\n    o=len(test_tup[1])\n    assert n*o==len(test_tup[0])*len(test_tup[1]), \"Numbers must match\"\n    assert n==o, \"Numbers should be equal\"\n    def add_pairwise_in_place(num,num_list):\n        assert n==o, \"Numbers should be equal\"\n        for i in range(n):\n            for j in range(o):\n                if j>i:\n                    num_list[i][j]+=num[j]\n                    num_list[i][j]%=MOD\n                else:\n                    num_list[i][j]+=num[i]\n                    num_list[i][j]%=MOD\n    def add_pairwise_in_place_rec(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        for i in range(n):\n            for j in range(o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_rec(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_in_place_rec2(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_rec2(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_in_place_rec3(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n    def add_pairwise_rec3(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_in_place_rec4(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_rec4(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_in_place_rec5(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_rec5(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for i in range(1,o):\n            num_list[0][i]+=num[i]\n            num_list[0][i]%=MOD\n        for i in range(1,n):\n            for j in range(1,o):\n                num_list[i][j]+=num[j]\n                num_list[i][j]%=MOD\n    def add_pairwise_in_place_rec6(num_list,num):\n        assert n==o, \"Numbers should be equal\"\n        num_list[0][0]+=num[0]\n        num_list[0][0]%=MOD\n        for i in range(1,n):\n            num_list[i][0]+=num[i]\n            num_list[i][0]%=MOD\n        for "
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[0])\n    \n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0], test_tup[1] + test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if (len(test_tup) > 0):\n        temp = test_tup[0]\n        for i in range(1,len(test_tup)):\n            if(test_tup[i] > temp):\n                temp = test_tup[i]\n            \n        return temp + temp\n    else:\n        return None"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0,len(arr)):\n        product = product*arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = result * arr[i] % n\n    return result\n    \narr = [1, 2, 3, 4, 5]\nn = 4\nans = find_remainder(arr, n)\nprint(ans)"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return arr[n] % 1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n-1, -1, -1):\n        product = product * arr[i]\n    return product % 10\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return sum([int(arr[i] * arr[i%n]) for i in range(len(arr))]) % n \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = 0\n    while i < n: \n        yield arr[i] * arr[i]\n        i += 1\n    \ndef multiple_products(arr, n):\n    \"\"\"\n    Write a function that takes an array of numbers and a number n and returns the product of the array multiplication modulo n.\n    \"\"\"\n    arr = list(arr)\n    remainder = [i for i in range(len(arr)) if i % n!= 0]\n    s = reduce(lambda x, y : x * y, remainder)\n    return s\n    \nprint(multiple_products([1, 2, 3, 4, 5, 6, 7], 3))"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1: \n        return arr[0] \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # start = time.time()\n    s = 1\n    for i in range(len(arr)):\n        s *= arr[i]\n    # print(\"Time: \" + str(time.time() - start))\n    return s % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    n = int(n)\n    i = len(arr) - 1\n    arr = arr[1:]\n    while i >= 0:\n        if arr[i] % n == 0:\n            arr[i] = arr[i] / arr[i]\n            i -= 1\n        else:\n            arr[i] = (arr[i] * (arr[i + 1] % n)) % n\n            i -= 2\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = n\n    temp_arr = []\n    for x in arr:\n        temp_arr.append(x)\n    for i in range(0, len(temp_arr), m):\n        x = temp_arr[i:i+m]\n        temp_arr[i:i+m] = x\n    return sum(temp_arr)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l: \n        return True\n    if not l[0] == l[-1]: \n        return False\n    return len(l) == 1 or l[0]!= l[-1] and l[1] - l[0] >= 2 \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0: \n        return False \n    if len(l) == 1: \n        return l[0] == l[0] \n    elif l[0]!= l[-1]: \n        return False \n    else: \n        return check_Consecutive(l[1:]) \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <=1:\n        return True\n    elif l[0] < l[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    list_ = []\n    for i in l:\n        list_.append(i)\n    check = len(list_)\n    list_ = list(set(list_))\n    for i in list_:\n        if i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive=0\n    for i in l: \n        if i!= consecutive: \n            consecutive=i\n        else: \n            pass\n    if consecutive == l[-1]: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if l[i]!= l[i-1] and l[i]!= l[i+1]: \n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c=0\n    for i in l:\n        if i==l[0]:\n            c=c+1\n        else:\n            if c==1:\n                return False\n            c=1\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = False\n    for i in l:\n        if (i % 10 == 0):\n            flag = True\n            break\n    if(flag):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if(len(l)==0):\n        return True\n    else:\n        i=0\n        while(i<len(l) and l[i]!= l[i+1]):\n            if(l[i]==l[i+1]):\n                i+=1\n            else:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == len(test_list2):\n        list1 = sorted(test_list1)\n        list2 = sorted(test_list2)\n        return tuple(list1[i] for i in range(len(list1)) if list1[i] in list2)\n    else:\n        return []"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(0, len(test_list1)):\n        for j in range(0, len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection.append(test_list1[i])\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1 or not test_list2:\n        return []\n    result = []\n    if len(test_list1) == len(test_list2):\n        for i in range(len(test_list1)):\n            if test_list1[i] == test_list2[i]:\n                result.append(test_list1[i])\n    else:\n        result = set(test_list1).intersection(set(test_list2))\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            test_list3.append(test_list1[i])\n    return test_list3\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i = 0\n    while i < len(test_list1):\n        j = 0\n        while j < len(test_list2):\n            if test_list1[i] == test_list2[j]:\n                return (i, j)\n            j += 1\n        i += 1\n    return None\n    \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    assert len(test_list1) > 0, \"list1 is empty\"\n    assert len(test_list2) > 0, \"list2 is empty\"\n    intersection_index = []\n    for i in range(0, len(test_list1)):\n        for j in range(0, len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection_index.append(j)\n    return tuple(intersection_index)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_order = test_list1[::-1]\n    for test_list2_order in test_list2:\n        if test_list1_order.count(test_list2_order) == 1:\n            return test_list1_order.index(test_list2_order)\n        elif test_list1_order.count(test_list2_order) > 1:\n            return test_list1_order.index(test_list2_order)\n    return None\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set_list = set(test_list1)\n    #print(set_list)\n    dict_list = {}\n    for k in set_list:\n        dict_list[k] = test_list1.count(k)\n    #print(dict_list)\n    return dict_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            tuple_list.append(test_list1[i])\n    return tuple_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                result.append(test_list1[i])\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.lower()\n    str2=str1.replace(ch,\"\")\n    str2=str2.lower()\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = ''\n    for c in str1:\n        if c == ch:\n            res = res + newch\n        else:\n            res = res + c\n    return res\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for char in range(0,len(str1)):\n        str1[char] = newch\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ch in str1[i]:\n            str1=str1.replace(str1[i],newch)\n        else:\n            pass\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #Your code here\n    if ch in str1:\n        pos1=str1.index(ch)\n        str1=str1.replace(ch,newch)\n        print(str1)\n    else:\n        return str1\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Your code here\n    str1 = str1.lower()\n    \n    def replace_sub(str1,start,end,sub):\n        '''\n        replace all occurrences of substring in a string with \n        a new substring.\n        '''\n        return str1[:start].replace(sub,newch) + str1[end:].replace(sub,newch)\n    \n    return replace_sub(str1,0,len(str1),ch)\n    \ndef main():\n    '''\n    This program implements a simple solution to finding the longest common substring in two strings.\n    '''\n    \n    str1 = 'good'\n    str2 = 'good'\n    \n    print(f\"The longest common substring in {str1} is {str1}\")\n    print(f\"The longest common substring in {str2} is {str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} is {str1}{str2}\")\n    \n    print(f\"{str1} and {str2} are common substrings\")\n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"The longest common substring in {str1} and {str2} is: {str1}{str2}\")\n    \n    print(f\"Th"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch =='':\n        return str1\n    else:\n        return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # your code goes here\n    print(\"Replaced:\",str1)\n    print(\"Original:\",ch)\n    print(\"New:\",newch)\n    # time.sleep(1)\n    str1 = str1.replace(ch,newch)\n    print(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(str1)!= str:\n        return \"Error, argument must be a string\"\n    if type(ch)!= str or type(newch)!= str:\n        return \"Error, type of argument must be a string\"\n    for i in range(len(str1)):\n        if str1[i]!= ch:\n            str1 = str1.replace(str1[i],\"\"+newch)\n    return str1\n    \ndef main():\n    print(\"This program will take a string and replace each character in it with a new character.\")\n    string = input(\"Enter a string: \")\n    newchar = input(\"Enter a new character to replace the first character: \")\n    str1 = string.lower()\n    str2 = replace_char(str1,newchar,newchar)\n    print(str2)\n    \nmain()"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # sort on the key (i.e, sort the list in alphabetical order)\n    sorted_list = sorted(dict1.values(), key=lambda x:x.get(\"name\"))\n    \n    # sort on the value (i.e, sort the list in reverse alphabetical order)\n    sorted_dict = dict(zip(sorted_list, range(0,len(sorted_list))))\n    \n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = {k: v for k, v in dict1.items()}\n    dict3 = sorted(dict2.items(), key=lambda x: x[1], reverse=True)\n    dict4 = dict([k, v] for k, v in dict3)\n    return dict4\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = dict1.keys()\n    for key in keys:\n        dict1[key].sort()\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def sort_key(x):\n        if x[1]<0:\n            return x[0]\n        else:\n            return -x[1]\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    lst = list(dict1.keys())\n    # print(lst)\n    # print(len(lst))\n    lst.sort()\n    # print(lst)\n    # print(len(lst))\n    # print(dict1)\n    # print(dict1[lst[0]])\n    # print(dict1[lst[1]])\n    # print(dict1[lst[2]])\n    dict1[lst[0]] = dict1[lst[0]] * 2\n    dict1[lst[1]] = dict1[lst[1]] * 2\n    dict1[lst[2]] = dict1[lst[2]] * 2\n    # print(dict1)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x : x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for x, y in dict1.items():\n        #print(x, y)\n        if type(y) == Counter:\n            #print('is: ',y)\n            #print('is: ',x)\n            dict1[x]=sorted(y.items(), key=lambda kv: kv[1], reverse=True)\n        else:\n            #print('is: ',y)\n            #print('is: ',x)\n            dict1[x]=sorted(y, key=lambda kv: kv[0])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x : x[0])\n    return(sorted_dict)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    if n == 0:\n        return None\n    if n == 1:\n        return nums[0], nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_sum = max(nums)\n    min_sum = min(nums)\n    for i in nums:\n        if i >= max_sum and i <= min_sum:\n            max_sum = i\n        if i > max_sum and i <= min_sum:\n            min_sum = i\n    return max_sum, min_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    if max_num > min_num:\n        return max_num + sum(nums) - min_num\n    else:\n        return min_num + sum(nums) - max_num\n    "
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum = sum + nums[i]\n    return sum\n    \n    \n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums is None:\n        return None\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    n = len(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums == []:\n        return 0\n    return nums[0] + big_sum(nums[1:])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Your code here\n    # Your code here\n    return sum(nums)\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    lower_string_list = list(lower_string)\n    lower_string_list.insert(0,'')\n    lower_string = ''.join(lower_string_list)\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    if type(string)!= str:\n        raise TypeError(\"Input must be a string\")\n    \n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isalpha():\n        return string.lower()\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    # if the string is empty\n    if string == '':\n        return True\n    \n    # if there are characters in the string,\n    # it must be a capitalized word,\n    # so we want to convert it to lower case\n    for character in string:\n        if character.isalpha():\n            string = string.lower()\n    \n    # if there are no characters in the string,\n    # it must be a lower case word,\n    # so we want to convert it to upper case\n    if string == '':\n        return True\n    \n    return False\n    \n    \n    \ndef is_string_equal(string_1, string_2):\n    '''\n    Write a python function to check if two strings are equal.\n    '''\n    \n    # if the strings are empty\n    if string_1 == '' and string_2 == '':\n        return True\n    \n    # if the strings are lower case\n    if is_lower(string_1):\n        if is_lower(string_2):\n            return string_1 == string_2\n    \n    # if the strings are upper case\n    if is_upper(string_1):\n        if is_upper(string_2):\n            return string_1 == string_2\n    \n    # if the strings are not equal\n    return False\n    \n    \ndef main():\n    '''\n    Main function to run the program.\n    '''\n    \n    string_1 = str(input('Enter a string: '))\n    string_2 = str(input('Enter a string: '))\n    \n    # check if the string is equal\n    if is_string_equal(string_1, string_2):\n        print('String {} and {} are equal.'.format(string_1, string_2))\n    else:\n        print('String {} and {} are not equal.'.format(string_1, string_2))\n    \n    print('Bye!')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower("
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[^a-z0-9]+\", '', str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not str1:\n        return str1\n    else:\n        return ''.join(filter(lambda x: x.islower(), str1.lower()))\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # for i in range(len(str1)):\n    #     if(str1[i] == 'u'):\n    #         str1 = str1.replace(str1[i], '')\n    #     if(str1[i] == 'y'):\n    #         str1 = str1.replace(str1[i], 'y')\n    #     if(str1[i] == 'r'):\n    #         str1 = str1.replace(str1[i], 'r')\n    #     if(str1[i] == 'p'):\n    #         str1 = str1.replace(str1[i], 'p')\n    #     if(str1[i] == 't'):\n    #         str1 = str1.replace(str1[i], 't')\n    #     if(str1[i] == 'v'):\n    #         str1 = str1.replace(str1[i], 'v')\n    #     if(str1[i] == 'e'):\n    #         str1 = str1.replace(str1[i], 'e')\n    #     if(str1[i] == 'd'):\n    #         str1 = str1.replace(str1[i], 'd')\n    #     if(str1[i] == 'h'):\n    #         str1 = str1.replace(str1[i], 'h')\n    #     if(str1[i] == 'o'):\n    #         str1 = str1.replace(str1[i], 'o')\n    #     if(str1[i] =='s'):\n    #         str1 = str1.replace(str1[i],'s')\n    #     if(str1[i] == 'c'):\n    #         str1 = str1.replace(str1[i], 'c')\n    #     if(str1[i] == 'k'):\n    #         str1 = str1.replace(str1[i], 'k')\n    #     if(str1[i] =='m'):\n    #         str1 = str1.replace(str1[i],'m')\n    #     if(str1[i] == 'n'):\n    #         str1 = str1.replace(str1[i], 'n')\n    #     if(str1[i] == 'r'):\n    #         str1 = str1.replace(str1[i], 'r')\n    #     if(str1[i] == 'p'):\n    #         str1 = str1.replace(str1[i], 'p')\n    #     if(str1[i] == 'u'):\n    #         str1 = str1.replace(str1[i], 'u')\n    #     if(str1[i] == 'y'):\n    #         str1 = str1.replace(str1[i], 'y')\n    #     if(str1[i] == 'r'):\n    #         str1 = str1.replace(str1[i], 'r')\n    #     if(str1[i] == 'p'):\n    #         str1 = str1.replace(str1[i], 'p')\n    #     if(str1[i] == 't'):\n    #         str1 = str1.replace(str1[i], 't')\n    #     if(str1[i] == 'v'):\n    #         str1 = str1.replace(str1[i], 'v')\n    #     if(str1[i] == 'e'):\n    #         str1 = str1.replace(str1[i], 'e')\n    #     if(str1[i] == 'd'):\n    #         str1 = str1.replace(str1[i], 'd')\n    #     if(str1[i] == 'h'):\n    #         str1 = str1.replace(str1[i], 'h')\n    #     if(str1[i] == 'o'):\n    #         str1 = str1.replace(str1[i], 'o')\n    #     if(str1[i] =='s'):\n    #         str1 = str1.replace(str1[i],'s')\n    #     if(str1[i] == 'c'):\n    #         str1 = str1.replace(str1[i], 'c')\n    #     if(str1[i] == 'k'):\n    #         str1 = str1.replace(str1[i], 'k')\n    #     if(str1[i] =='m'):\n    #         str1 = str1.replace(str1[i],'m')\n    #     if(str1[i] == 'n'):\n    #         str1 = str1.replace(str1[i], 'n')\n    #     if(str1[i] == 'r'):\n    #         str1 = str1.replace(str1[i], 'r')\n    #     if(str1[i] == 'p'):\n    #         str1 = str1.replace(str1[i], 'p')\n    #     if(str1[i] == 'u'):\n    #         str1 = str1.replace(str1[i], 'u')\n    #     if(str1[i] == 'y'):\n    #         str1 = str1.replace(str1[i], 'y')\n    #     if(str1[i] == 'r'):\n    #         str1 = str1.replace(str1[i], 'r')\n    #     if(str1[i] == 'p'):\n    #         str1 = str1.replace(str1[i], 'p')\n    #     if(str1[i] == 't'):\n    #         str1 = str1.replace(str1[i], 't')\n    #     if(str1[i] == 'v'):\n    #         str1 = str1.replace(str1[i], 'v')\n    #     if(str1[i] == 'e'):\n    #         str1 = str1.replace(str1[i], 'e')\n    #     if(str1[i] == 'd'):\n    #         str1 = str1.replace(str1[i], 'd')\n    #     if(str1[i] == 'h'):\n    #         str1 = str1.replace(str1[i], 'h')\n    #     if(str1[i] == 'o'):\n    #         str1 = str1.replace(str1[i], 'o')\n    #     if(str1[i] =='s'):\n    #         str1 = str1.replace(str1[i],'s')\n    #     if(str1[i] == 'c'):\n    #         str1 = str1.replace(str1[i], 'c')\n    #     if(str1[i] == 'k'):\n    #         str1 = str1.replace(str1[i], 'k')\n    #     if(str1[i] =='m'):\n    #         str1 = str1.replace(str1[i],'m')\n    #     if(str1[i] == 'n'):\n    #         str1 = str1.replace(str1[i], 'n')\n    #     if(str1[i] == 'r'):\n    #         str1 = str1.replace(str1[i], 'r')\n    #     if(str1[i] == 'p'):\n    #         str1 = str1.replace(str1[i], 'p')\n    #     if(str1[i] == 'u'):\n    #         str1 = str1.replace(str1[i], 'u')\n    #     if(str1[i] == 'y'):\n    #         st"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Write your code here\n    str2 = str1.lower()\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[^A-Z]', '', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub('\\d+', '', str1)\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return re.sub('[^a-zA-Z0-9_\\s]+', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub('[\\w]+(?![A-Z])|[.,;!?()\\'\"{}$_#\\']+', '', str1)\ndef remove_html_tags(str1):\n    '''\n    Write a function to remove html tags from a given string.\n    '''\n    return re.sub('<.*?>', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #pattern = r'\\b(?<=^|[^\\w])[a-z]+(?=\\w)'\n    #new_str = re.sub(pattern, '', str1)\n    new_str = re.sub(r'[^\\w]','', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_numeric(str1):\n    '''\n    Write a function to remove numeric characters from a given string.\n    '''\n    new_str = re.sub(r'[a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    new_str = re.sub(r'\\d+', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    new_str = re.sub(r'[^a-zA-Z\\w\\s]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    #new_str = re.sub(r'[^a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    new_str = str1.lower()\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    new_str = str1\n    new_str = re.sub(r'[a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_empty_space(str1):\n    '''\n    Write a function to remove empty space from a given string.\n    '''\n    new_str = re.sub(r'\\s+','', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_multiple_chars(str1):\n    '''\n    Write a function to remove multiple characters from a given string.\n    '''\n    new_str = re.sub(r'[^a-zA-Z]','', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    new_str = re.sub(r'\\d+', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_empty(str1):\n    '''\n    Write a function to remove empty characters from a given string.\n    '''\n    new_str = re.sub(r'[^a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_non_english(str1):\n    '''\n    Write a function to remove non english characters from a given string.\n    '''\n    #new_str = re.sub(r'[^a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    #new_str = re.sub(r'[^a-zA-Z]','', str1)\n    new_str = str1.lower()\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_lowercase_special_char(str1):\n    '''\n    Write a function to remove lowercase special characters from a given string.\n    '''\n    #new_str = re.sub(r'[a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    new_str = str1.lower()\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_punctuation_special_char(str1):\n    '''\n    Write a function to remove punctuation special characters from a given string.\n    '''\n    #new_str = re.sub(r'[^a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    new_str = str1.lower()\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_stopwords_special_char(str1):\n    '''\n    Write a function to remove stopwords special characters from a given string.\n    '''\n    #new_str = re.sub(r'[^a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    new_str = str1.lower()\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_space_special_char(str1):\n    '''\n    Write a function to remove spaces special characters from a given string.\n    '''\n    new_str = re.sub(r'\\s+','', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_multiple_chars_special_char(str1):\n    '''\n    Write a function to remove multiple characters special characters from a given string.\n    '''\n    new_str = re.sub(r'[^a-zA-Z]','', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_digits_special_char(str1):\n    '''\n    Write a function to remove digits special characters from a given string.\n    '''\n    new_str = re.sub(r'\\d+','', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_empty_special_char(str1):\n    '''\n    Write a function to remove empty special characters from a given string.\n    '''\n    new_str = re.sub(r'[^a-zA-Z]','', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_non_english_special_char(str1):\n    '''\n    Write a function to remove non english special characters from a given string.\n    '''\n    #new_str = re.sub(r'[^a-zA-Z]', '', str1)\n    #new_str = re.sub(r'\\w+','', str1)\n    new_str = str1.lower()\n    #new_str = re.sub(r'\\w+','', str1)\n    return new_str\ndef remove_lowercase_special_char_special_char(str1):\n    '''\n    Write a function to remove lowercase special characters special characters from a given string.\n    '''\n    #new_str = re.sub(r'[^a-zA-Z]', '', str1)\n    #new_str = re.sub("
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # split the string into a list of words\n    word_list = str1.split(' ')\n    # remove the first word\n    word_list.pop(0)\n    # iterate over the words in a word list\n    for word in word_list:\n        # convert each word to uppercase and remove the punctuation\n        word = word.upper()\n        word = re.sub('[^A-Za-z0-9]+','',word)\n        # remove the remaining words in a word list\n        word_list.remove(word)\n    # return the concatenated words\n    return''.join(word_list)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if(str1 == \"\":\n        return str1\n    final_list = []\n    for i in str1:\n        if(i.islower() == True):\n            final_list.append(i)\n    str1 = ''.join(final_list)\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0:\n        print(\"The first digit of a positive number is: \", n % 10)\n        print(int((n - int(n % 10)) % 10))\n    else:\n        print(\"The number is negative.\")\nfirst_Digit(3)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    def num_digit_1(n) :  \n        '''\n        Write a python function to find the first digit of a given number.\n        '''\n        # check for 0 to see if it is a number\n        # if number is 0, it will not count and return 0\n        if n == 0 : return 0\n        if n < 10 : return 1\n        if n < 100 : return 10\n        if n < 1000 : return 11\n        return 12\n    # get the first digit of a number\n    def num_digit_1(n) :  \n        return num_digit_1(n%10)\n    # create a list of digits \n    # it is (2, 3, 4, 5, 6, 7, 8, 9)\n    # ditto for the rest of the list\n    digits_list = [2, 3, 4, 5, 6, 7, 8, 9]\n    # iterate through the list, check the number of digits\n    for i in range(0, 10) :\n        # if the number is not in digits_list, then print that number\n        if n < digits_list[i] : \n            print(n, \"is the first number of the list.\")\n            return num_digit_1(n)\n    # if the number is not in digits_list, print it\n    print(n, \"is the first number of the list.\")\n    return num_digit_1(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n)!= int :\n        return \"Please enter a number!\"\n    if n < 0 :\n        return \"Please enter a number higher than 0\"\n    if n == 0 :\n        return \"Please enter a positive number\"\n    else :\n        if n > 0 :\n            return n % 10\n        else :\n            return \"Please enter a positive number\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return '0'\n    if n < 0 :\n        return 'Error : invalid number'\n    i = 1\n    while n / i!= 0 :\n        i += 1\n    return n % i\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 0:\n        return n % 10\n    else:\n        return -1\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef five_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef six_Digit(n) :  \n    '''\n    Write a python function to find the six digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef first_Fifth(n) :  \n    '''\n    Write a python function to find the first fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef second_Fifth(n) :  \n    '''\n    Write a python function to find the second fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef third_Fifth(n) :  \n    '''\n    Write a python function to find the third fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef fourth_Fifth(n) :  \n    '''\n    Write a python function to find the fourth fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef six_Digit(n) :  \n    '''\n    Write a python function to find the six digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef seven_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef eight_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef first_Eleventh(n) :  \n    '''\n    Write a python function to find the first eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef second_Eleventh(n) :  \n    '''\n    Write a python function to find the second eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef third_Eleventh(n) :  \n    '''\n    Write a python function to find the third eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef fourth_Eleventh(n) :  \n    '''\n    Write a python function to find the fourth eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef fifth_Eleventh(n) :  \n    '''\n    Write a python function to find the fifth eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef sixth_Eleventh(n) :  \n    '''\n    Write a python function to find the sixth eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef seventh_Eleventh(n) :  \n    '''\n    Write a python function to find the seventh eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef eighth_Eleventh(n) :  \n    '''\n    Write a python function to find the eighth eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef nineth_Eleventh(n) :  \n    '''\n    Write a python function to find the nineth eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef tenth_Eleventh(n) :  \n    '''\n    Write a python function to find the tenth eleventh digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef first_Twelfth(n) :  \n    '''\n    Write a python function to find the first twelfth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef second_Twelfth(n) :  \n    '''\n    Write a python function to find the second twelfth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef third_Twelfth(n) :  \n    '''\n    Write a python function to find the third twelfth digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n % 10  \n  \ndef fourth_Twelfth(n) :  \n    '''\n    Write a python function to find the fourth twelfth digit of a given number"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n    \n    #Uncomment the line below when your function is complete\n    #print(first_Digit(input()))\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Hint : Use String module.\n    \n    #-------------------------------\n    # Hint : You can use the String module.\n    #-------------------------------\n    import string\n    return string.digits[n%10]\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_elems = []\n    for elem in list:\n        if elem % 2!= 0:\n            odd_elems.append(elem)\n    return odd_elems\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i%2!= 0: \n            odd.append(i) \n    return odd \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # your code goes here\n    if len(list) % 2 == 0:\n        # print(list)\n        odd_list = list[::2]\n        return odd_list\n    else:\n        return []\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    print(odd_list)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if (i % 2)!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    odd_list = []\n    for x in list:\n        if x % 2 == 0:\n            even_list.append(x)\n        else:\n            odd_list.append(x)\n    return even_list, odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    count = 0\n    for i in list:\n        if i % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_cubes_1(n) :\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        total = 0\n        for i in range(1, n+1) :\n            total = total + i**3\n        return total\n    \n    return sum_cubes_1(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def cube_sum(n) :\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        sum_cubes = 0\n        for i in range(1,n+1):\n            sum_cubes += i**3\n        return sum_cubes\n    \n    def cube_difference(n) :\n        '''\n        Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n        sum_cubes = cube_sum(n)\n        diff_cubes = cube_sum(n+1) - sum_cubes\n        return diff_cubes\n    \n    def cube_differentiation(n) :\n        '''\n        Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n        sum_cubes = cube_sum(n)\n        diff_cubes = cube_sum(n+1) - sum_cubes\n        return diff_cubes\n    \n    cube_sum = cube_sum(n)\n    cube_difference = cube_difference(n)\n    cube_differentiation = cube_differentiation(n)\n    \n    return [cube_sum,cube_difference,cube_differentiation]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n ** 3 - (n + 1) ** 3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(n)\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return (n + difference(n - 1))\n    \nprint(difference(10))"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n * (n+1) / 6\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n==0 : \n        return 0\n    elif n==1 :\n        return 1\n    else :\n        return (n**3 - (n**3 + 1))**0.5\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    elif n == 3 : \n        return 1\n    else : \n        return n*(n-1)*(n-2)*(n-3)\n    \ndef main():\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers.\n    '''\n    n = int(input(\"Enter the number of natural numbers : \"))\n    \n    print(f\"The sum of cubes of the first {n} natural numbers is : \",end=\"\")\n    print(difference(n))\n    \n    \n    \nmain("
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*n*(n+1)/6\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i**3\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is\", sum)\n    return sum\ndef power(n) :\n    '''\n    Write a python function to find the cube of a given number.\n    '''\n    sum = 1\n    for i in range(1,n+1) :\n        sum = sum * i**3\n    print(sum)\n    return sum\ndef sum_tri(n) :\n    '''\n    Write a python function to find the sum of the three natural numbers in a given range, inclusive.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i\n    print(sum)\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c = 0\n    for i in range(len(A)) : \n        if A[i] == 0 : \n            c+=1\n        if A[i] & 1!= 0 : \n            c+=1\n        if A[i] & 1 == 0 and A[i]!= 0 : \n            c+=1\n    return c\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt=0\n    for i in range(0,N):\n        for j in range(0,i):\n            if(A[i]^A[j])==0:\n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if A[N] == 0:\n        return 0\n    elif A[N] == 1 :\n        return 1\n    else :\n        return 2\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count=0\n    for i in range(0,len(A)) : \n        for j in range(0,i) : \n            if(A[i]^A[j]!=A[j]^A[i]) : \n                if(A[i]!=0) : \n                    if(A[i]&1==1) : \n                        odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = A[i] ^ N\n        if (xor & 1) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(N-i) : \n            if A[i] & 1!= A[j] : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 0 : \n        return 0\n    elif N == 1 :\n        return 1\n    elif N % 2 == 0 :\n        return find_Odd_Pair(A,N//2) + find_Odd_Pair(A,N//2+1)\n    else : \n        return find_Odd_Pair(A,N//2) + find_Odd_Pair(A,N//2+1) + find_Odd_Pair(A,N//2+1)\n    \nN = int(input())\nA = list(map(int,input().split()))\nodd_pairs = find_Odd_Pair(A,N)\nprint(odd_pairs)"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    \n    for i in range(0,len(A)):\n        for j in range(0,len(A)):\n            if A[i]==A[j] and i!=j:\n                if A[i]&1!= A[j]&1:\n                    odd_count += 1\n            \n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Write your code here\n    odd_pairs = 0\n    odd_pairs = A.count_pairs(odd_pairs)\n    print(odd_pairs)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if (A[i] + A[j]) % 2!= 0 :\n                count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string:\n        temp = ''\n        for i in string:\n            temp += i.upper() +''\n        return temp[:-1]\n    else:\n        return ''\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.title()\n    \ndef toggle_multiple_string(string):\n    '''\n    Write a function that turns a string into multiple lines.\n    '''\n    result = \"\"\n    for character in string:\n        result += character + \"\\n\"\n    return result\n    \ndef print_multiline_string(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string2(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string3(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string4(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string5(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string6(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string7(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string8(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string9(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string10(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string11(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string12(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string13(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string14(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \" \"\n    \ndef print_multiline_string15(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string16(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string17(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string18(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string19(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string20(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string21(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string22(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string23(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string24(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string25(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string26(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string27(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string28(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string29(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string30(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string31(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string32(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string33(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string34(string):\n    '''\n    Write a function that prints a multiline string.\n    '''\n    string = string.replace(\"\\n\", \"\")\n    return string + \"\\n\"\n    \ndef print_multiline_string35(string):\n    '''\n    Write "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.upper() == char.lower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.title()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle = False\n    for c in string:\n        if c.isupper():\n            toggle = True\n    if toggle:\n        return string.swapcase()\n    else:\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # write your code here\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Create a regex to match characters\n    regex = '[a-zA-Z]{1,}[^\\s\\w]'\n    # Check if the string is empty\n    if re.match(regex, string):\n        string = string.strip()\n        string = ''.join(re.findall(regex, string))\n    else:\n        return 'Invalid String'\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def switch(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    res = \"\"\n    for c in string:\n        res += switch(c)\n    return res\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle(string, char):\n        return char.upper() if string.upper() == char.upper() else char.lower()\n    for char in string:\n        string = string.replace(char, toggle(string, char))\n    return string\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # TODO: Write a python function to find the sum of the per-digit difference between two integers.\n    # Expected output: 7\n    # Assume the 2 inputs are integer numbers. \n    # Note: You must use int division operator, for example: 10 / 2 = 2, etc. \n    # For example: 10 / 2 = 2, not 2\n    # Hint: In the Python language, for each integer, add it to the sum.\n    # Tip: Do not use the % symbol\n    return n1 - n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = max(n1, n2), min(n1, n2)\n    return sum(\n        [int(str(n1)[i]) - int(str(n2)[i]) for i in range(0, 8)]\n    )\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = sum(n1)\n    d2 = sum(n2)\n    if d1 > d2:\n        d = d2 - d1\n    elif d1 < d2:\n        d = d1 - d2\n    else:\n        d = 0\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def mod_numbers(n1, n2):\n        return n1 % n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for x in range(max(0, n1), min(len(n1), n2)):\n        sum += n1 - x\n    for x in range(max(0, n2), min(len(n2), n1)):\n        sum += n2 - x\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for i in range(len(n1)):\n        digit_sum += int(n1[i]) - int(n2[i])\n    return digit_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([d-n1 if d-n1>0 else 0 for d in range(10)])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(0, n1):\n        diff += int(n1) - n2 - int(n2)\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return n1 - n2\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    i, j, max_sum, count = 0, 0, 0, 0\n    while i < size:\n        count = count + 1\n        max_sum = max(a[j], max_sum)\n        j = j + 1\n        while j < size:\n            count = count + 1\n            max_sum = max(a[j], max_sum)\n            j = j + 1\n        i = i + 1\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start_index = 0\n    max_sum = 0\n    n = len(a)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Initialize the sums array\n    sum_arr = []\n    \n    #Run the loop\n    for i in range(len(a) - size + 1):\n        #Sum all the elements\n        sum_val = sum([a[j] for j in range(i, i + size)])\n        #Add the current element to the sums array\n        sum_arr.append(sum_val)\n    #Return the maximum sum\n    return max(sum_arr)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_index = 0\n    start = 0\n    end = 0\n    for index, value in enumerate(a):\n        # The value is greater than the largest sublist in the list\n        if value > max_sum:\n            # Store the index of the largest sublist\n            max_index = index\n            # Initialize max sum as the sum of all values of sublist\n            max_sum = value\n            # Start the slicing where the largest sublist's index is greater than the current max sublist's index\n            start = index + 1\n            end = index + 1\n    \n    # Now find the number of values of sublist starting from the largest sublist's index\n    while start <= max_index:\n        # Set the current sublist's starting index to the current max sublist's index plus 1\n        end = start + 1\n        # Check the current sublist's value\n        while a[end] <= a[start]:\n            end += 1\n        # Check if the current sublist's value is greater than max sum\n        if end == max_index:\n            continue\n        # Check if the sublist starting at the index and ending at the end is larger than the max sum\n        if a[start] <= a[end]:\n            # Sublist is not a contiguous sublist\n            return 0\n        # Add the number of elements of the sublist to the max sum\n        max_sum += end - start\n        # Update the max sub list's index\n        start += 1\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # Edge cases\n    if(size == 1):\n        return a[0]\n    if(size == 0):\n        return -1\n    \n    # Edge case\n    if(size == 2):\n        if (a[0] + a[1] == 0):\n            return a[0]\n        else:\n            return -1\n    \n    \n    \n    # Find the subarray sums\n    sub_sum = [0] * size\n    sub_sum[0] = a[0]\n    for i in range(1, size):\n        sub_sum[i] = sub_sum[i - 1] + a[i]\n    \n    # Set up a prefix sum array\n    prefix_sum_array = [0] * (size)\n    for i in range(size):\n        prefix_sum_array[i] = sub_sum[i]\n        \n    # Sum each subarray\n    max_sum = -1\n    for i in range(1, size):\n        prefix_sum = prefix_sum_array[i]\n        \n        for j in range(i - 1, size - 1, -1):\n            prefix_sum += prefix_sum_array[j + 1]\n        \n        max_sum = max(prefix_sum, max_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0], a[1])\n    else:\n        return max(a[0], a[1], max_sub_array_sum(a[2:], size - 1))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty dictionary\n    d1 = {}\n    d2 = {}\n    # Traverse through every tuple\n    for i in range(len(test_tup1)):\n        d1[test_tup1[i]] = i\n    for i in range(len(test_tup2)):\n        d2[test_tup2[i]] = i\n    # Create an empty list to store the result\n    res = []\n    # Iterate over each key in the dictionaries\n    for key in d1:\n        # Check if the key is in the second dictionary\n        if key in d2:\n            # Add the key to the list\n            res.append(key)\n            # Remove the key from the second dictionary\n            d1.pop(key)\n            d2.pop(key)\n    # Sort the list\n    res.sort()\n    # Return the result\n    return res\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    i = 0\n    j = 0\n    # loop through both sets\n    while(i < len(test_tup1) and j < len(test_tup2)):\n        # if one element is in first set\n        if test_tup1[i] in test_tup2:\n            # check if element is in second set\n            if test_tup2[j] in test_tup1:\n                # swap the two\n                test_tup2[j] = test_tup1[i]\n                # move the i index\n                i = i + 1\n                # move the j index\n                j = j + 1\n            else:\n                # if the element is not in the second set\n                j = j + 1\n        # if the element is not in the first set\n        else:\n            i = i + 1\n            j = j + 1\n    # if the list of elements is not sorted\n    if not(test_tup1 == test_tup2):\n        # output the elements of the union\n        return [test_tup1, test_tup2]\n    else:\n        # output the first element\n        return test_tup1"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1=[]\n    tup2=[]\n    if(len(test_tup1)==0):\n        tup1=[test_tup2[0]]\n    if(len(test_tup2)==0):\n        tup2=[test_tup1[0]]\n    for i in range(len(test_tup1)):\n        if(test_tup1[i] in test_tup2):\n            tup1.append(test_tup1[i])\n        else:\n            tup2.append(test_tup2[i])\n    tup1.sort()\n    tup2.sort()\n    return tup1,tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = test_tup1[0]\n    test_list2 = test_tup2[0]\n    \n    union = []\n    \n    if len(test_list1) > len(test_list2):\n        # copy the shorter of the tuples\n        for i in range(len(test_list2)):\n            if test_list1[i] in union:\n                pass\n            else:\n                union.append(test_list1[i])\n        \n    else:\n        for i in range(len(test_list1)):\n            if test_list2[i] in union:\n                pass\n            else:\n                union.append(test_list2[i])\n        \n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    if test_tup1[0] > test_tup2[0]:\n        return union_elements(test_tup1, test_tup2[1:])\n    else:\n        return union_elements(test_tup2, test_tup1[1:])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return\n    for el in test_tup2:\n        if el not in test_tup1:\n            return\n    test_tup1.extend(test_tup2)\n    test_tup1.sort()\n    return test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    if len(test_tup1) < len(test_tup2):\n        return union_elements(test_tup1, test_tup2)\n    return test_tup1 if test_tup1[0] < test_tup2[0] else test_tup2 if test_tup1[0] > test_tup2[0] else test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return list(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(sorted(test_tup1 + test_tup2))\n    elif len(test_tup1) > len(test_tup2):\n        return tuple(test_tup2) + tuple(sorted(test_tup1))\n    elif len(test_tup1) < len(test_tup2):\n        return tuple(test_tup1) + tuple(sorted(test_tup2))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return len(lst[0])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    c=0\n    m=0\n    for i in range(0,len(lst)):\n        for j in range(i,len(lst)):\n            c=c+len(lst[i:j])\n            if len(lst[i:j])>c:\n                c=len(lst[i:j])\n        if c>m:\n            m=c\n        c=0\n    return m\n    \nprint('maximum length of sublists is : ',Find_Max_Length(lst)"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] > length:\n                length = lst[i] + lst[j]\n    return length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst==None:\n        return 0\n    elif lst==[]:\n        return 0\n    elif lst[0]==None:\n        return 1+Find_Max_Length(lst[1:])\n    else:\n        return 1+Find_Max_Length(lst[1:])+1+Find_Max_Length(lst[2:])+1\ndef Find_Smallest_Sublist(lst):\n    '''\n    Write a python function to find the smallest sublist in a list.\n    '''\n    if lst==None or lst==[]:\n        return None\n    elif lst[0]==None:\n        return lst\n    elif lst[-1]==None:\n        return lst[:-1]\n    else:\n        return lst[1:lst[-1]]+lst[:-1]+lst[-2:]\ndef Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest sublists.\n    '''\n    if lst==None or lst==[]:\n        return 0\n    elif lst[0]==None:\n        return 1+Find_Min_Length(lst[1:])\n    else:\n        return 1+Find_Min_Length(lst[1:])+1+Find_Min_Length(lst[2:])+1\ndef Find_Longest_Sublist(lst):\n    '''\n    Write a python function to find the longest sublist in a list.\n    '''\n    if lst==None or lst==[]:\n        return None\n    elif lst[0]==None:\n        return lst\n    elif lst[-1]==None:\n        return lst[:-1]\n    else:\n        return lst[1:lst[-1]]+lst[:-1]+lst[-2:]\ndef Find_Longest_Sublist_Max(lst):\n    '''\n    Write a python function to find the longest sublist in a list.\n    '''\n    if lst==None or lst==[]:\n        return None\n    elif lst[0]==None:\n        return lst\n    elif lst[-1]==None:\n        return lst[:-1]\n    else:\n        return lst[1:lst[-1]]+lst[:-1]+lst[-2:]\ndef Find_Longest_Sublist_min(lst):\n    '''\n    Write a python function to find the longest sublist in a list.\n    '''\n    if lst==None or lst==[]:\n        return None\n    elif lst[0]==None:\n        return lst\n    elif lst[-1]==None:\n        return lst[:-1]\n    else:\n        return lst[1:lst[-1]]+lst[:-1]+lst[-2:]\ndef main():\n    '''\n    Write a python function to find the length of the longest sublist.\n    '''\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    print(Find_Max_Length(lst))\n    print(Find_Min_Length(lst))\n    print(Find_Smallest_Sublist(lst))\n    print(Find_Longest_Sublist(lst))\n    print(Find_Longest_Sublist_Max(lst))\n    print(Find_Longest_Sublist_min(lst))\nif __name__=='__main__':\n    main("
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    s=0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            s = max(s,len(lst[i]))\n    return s\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    if len(lst) == 1:\n        return 1\n    \n    if lst[0][1] > lst[1][1]:\n        return Find_Max_Length(lst[1:]) + 1\n    else:\n        return Find_Max_Length(lst[:-1]) + 1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    mylist = []\n    maxlen = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] > lst[j]:\n                mylist.append((i,j))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i][j]!= lst[j][i]:\n                break\n            else:\n                if len(lst[i]) > len(lst[j]):\n                    max_length = len(lst[i])\n                elif len(lst[j]) > len(lst[i]):\n                    max_length = len(lst[j])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    ans = [0]*len(lst)\n    s = 0\n    for i in range(len(lst)):\n        while lst[i]!= s:\n            ans[s] = i\n            s += 1\n        s += 1\n    print(ans)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    if lst==[]:\n        return 0\n    else:\n        l=len(lst)\n        i=0\n        c=0\n        for i in range(l):\n            if lst[i]==0:\n                c+=1\n        return c\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Split the text into a list of words\n    words = text.split('\"')\n    # Iterate over the words\n    for word in words:\n        # Check if the word is a quotation mark\n        if word == word.upper():\n            # Get the first and the last character of the string\n            first = words[words.index(word)+1].lower()\n            last = words[words.index(word)+2].lower()\n            # Return the values as a list of characters\n            return first + last\n        else:\n            # Add the first and last characters of the word\n            first = words[words.index(word)+1].lower()\n            last = words[words.index(word)+2].lower()\n            # Return the values as a string\n            return first + last\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    clean_text = re.compile(r'\\([^)]*\\)')\n    return [value.group() for value in clean_text.findall(text)]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r\"^'(.+)'\")\n    return pattern.search(text).group(1)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Initialize the variables\n    _s = ''\n    # Initialize the variable to be empty\n    _v = ''\n    # Initialize the variables\n    _s2 = ''\n    # Initialize the variable to be empty\n    _v2 = ''\n    # Initialize the variable to be empty\n    _s3 = ''\n    # Initialize the variable to be empty\n    _v3 = ''\n    # Initialize the variable to be empty\n    _s4 = ''\n    # Initialize the variable to be empty\n    _v4 = ''\n    # Initialize the variable to be empty\n    _s5 = ''\n    # Initialize the variable to be empty\n    _v5 = ''\n    # Initialize the variable to be empty\n    _s6 = ''\n    # Initialize the variable to be empty\n    _v6 = ''\n    # Initialize the variable to be empty\n    _s7 = ''\n    # Initialize the variable to be empty\n    _v7 = ''\n    # Initialize the variable to be empty\n    _s8 = ''\n    # Initialize the variable to be empty\n    _v8 = ''\n    # Initialize the variable to be empty\n    _s9 = ''\n    # Initialize the variable to be empty\n    _v9 = ''\n    # Initialize the variable to be empty\n    _s10 = ''\n    # Initialize the variable to be empty\n    _v10 = ''\n    # Initialize the variable to be empty\n    _s11 = ''\n    # Initialize the variable to be empty\n    _v11 = ''\n    # Initialize the variable to be empty\n    _s12 = ''\n    # Initialize the variable to be empty\n    _v12 = ''\n    # Initialize the variable to be empty\n    _s13 = ''\n    # Initialize the variable to be empty\n    _v13 = ''\n    # Initialize the variable to be empty\n    _s14 = ''\n    # Initialize the variable to be empty\n    _v14 = ''\n    # Initialize the variable to be empty\n    _s15 = ''\n    # Initialize the variable to be empty\n    _v15 = ''\n    # Initialize the variable to be empty\n    _s16 = ''\n    # Initialize the variable to be empty\n    _v16 = ''\n    # Initialize the variable to be empty\n    _s17 = ''\n    # Initialize the variable to be empty\n    _v17 = ''\n    # Initialize the variable to be empty\n    _s18 = ''\n    # Initialize the variable to be empty\n    _v18 = ''\n    # Initialize the variable to be empty\n    _s19 = ''\n    # Initialize the variable to be empty\n    _v19 = ''\n    # Initialize the variable to be empty\n    _s20 = ''\n    # Initialize the variable to be empty\n    _v20 = ''\n    # Initialize the variable to be empty\n    _s21 = ''\n    # Initialize the variable to be empty\n    _v21 = ''\n    # Initialize the variable to be empty\n    _s22 = ''\n    # Initialize the variable to be empty\n    _v22 = ''\n    # Initialize the variable to be empty\n    _s23 = ''\n    # Initialize the variable to be empty\n    _v23 = ''\n    # Initialize the variable to be empty\n    _s24 = ''\n    # Initialize the variable to be empty\n    _v24 = ''\n    # Initialize the variable to be empty\n    _s25 = ''\n    # Initialize the variable to be empty\n    _v25 = ''\n    # Initialize the variable to be empty\n    _s26 = ''\n    # Initialize the variable to be empty\n    _v26 = ''\n    # Initialize the variable to be empty\n    _s27 = ''\n    # Initialize the variable to be empty\n    _v27 = ''\n    # Initialize the variable to be empty\n    _s28 = ''\n    # Initialize the variable to be empty\n    _v28 = ''\n    # Initialize the variable to be empty\n    _s29 = ''\n    # Initialize the variable to be empty\n    _v29 = ''\n    # Initialize the variable to be empty\n    _s30 = ''\n    # Initialize the variable to be empty\n    _v30 = ''\n    # Initialize the variable to be empty\n    _s31 = ''\n    # Initialize the variable to be empty\n    _v31 = ''\n    # Initialize the variable to be empty\n    _s32 = ''\n    # Initialize the variable to be empty\n    _v32 = ''\n    # Initialize the variable to be empty\n    _s33 = ''\n    # Initialize the variable to be empty\n    _v33 = ''\n    # Initialize the variable to be empty\n    _s34 = ''\n    # Initialize the variable to be empty\n    _v34 = ''\n    # Initialize the variable to be empty\n    _s35 = ''\n    # Initialize the variable to be empty\n    _v35 = ''\n    # Initialize the variable to be empty\n    _s36 = ''\n    # Initialize the variable to be empty\n    _v36 = ''\n    # Initialize the variable to be empty\n    _s37 = ''\n    # Initialize the variable to be empty\n    _v37 = ''\n    # Initialize the variable to be empty\n    _s38 = ''\n    # Initialize the variable to be empty\n    _v38 = ''\n    # Initialize the variable to be empty\n    _s39 = ''\n    # Initialize the variable to be empty\n    _v39 = ''\n    # Initialize the variable to be empty\n    _s40 = ''\n    # Initialize the variable to be empty\n    _v40 = ''\n    # Initialize the variable to be empty\n    _s41 = ''\n    # Initialize the variable to be empty\n    _v41 = ''\n    # Initialize the variable to be empty\n    _s42 = ''\n    # Initialize the variable to be empty\n    _v42 = ''\n    # Initialize the variable to be empty\n    _s43 = ''\n    # Initialize the variable to be empty\n    _v43 = ''\n    # Initialize the variable to be empty\n    _s44 = ''\n    # Initialize the variable to be empty\n    _v44 = ''\n    # Initialize the variable to be empty\n    _s45 = ''\n    # Initialize the variable to be empty\n    _v45 = ''\n    # Initialize the variable to be empty\n    _s46 = ''\n    # Initialize the variable to be empty\n    _v46 = ''\n    # Initialize the variable to be empty\n    _s47 = ''\n    # Initialize the variable to be empty\n    _v47 = ''\n    # Initialize the variable to be empty\n    _s48 = ''\n    # Initialize the variable to be empty\n    _v48 = ''\n    # Initialize the variable to be empty\n    _s49 = ''\n    # Initialize the variable to be empty\n    _v49 = ''\n    # Initialize the variable to be empty\n    _s50 = ''\n    # Initialize the variable to be empty\n    _v50 = ''\n    # Initialize the variable to be empty\n    _s51 = ''\n    # Initialize the variable to be empty\n    _v51 = ''\n    # Initialize the variable to be empty\n    _s52 = ''\n    # Initialize the variable to be empty\n    _v52 = ''\n    # Initialize the variable to be empty\n    _s53 = ''\n    # Initialize the variable to be empty\n    _v53 = ''\n    # Initialize the variable to be empty\n    _s54 = ''\n    # Initialize the variable to be empty\n    _v54 = ''\n    # Initialize the variable to be empty\n    _s55 = ''\n    # Initialize the variable to be empty\n    _v55 = ''\n    # Initialize the variable to be empty\n    _s56 = ''\n    # Initialize the variable to be empty\n    _v56 = ''\n    # Initialize the variable to be empty\n    _s57 = ''\n    # Initialize the variable to be empty\n    _v57 = ''\n    # Initialize the variable to be empty\n    _s58 = ''\n    # Initialize the variable to be empty\n    _v58 = ''\n    # Initialize the variable to be empty\n    _s59 = ''\n    # Initialize the variable to be empty\n    _v59 = ''\n    # Initialize the variable to be empty\n    _s60 = '"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # create a regular expression for handling quotes\n    rx = re.compile('^\\s*\\'?[^\\s]+\\'?\\s*$')\n    \n    # loop over the text, stripping all of the apostrophes, and then\n    # splitting each word on periods, and stripping each word except\n    # for the period.\n    return [w.strip('.,?!') for w in re.split(rx, text) if w!= '']\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    value = re.findall('\"value\": \"(.*?)\",', text)\n    return value\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    i = 0\n    j = 0\n    while i < len(text):\n        if text[i] == \"\\\"\":\n            j = i + 1\n            i = j\n        else:\n            i = i + 1\n    return text[i:j]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.search(r'^(?:[^\"]|\"\")+$', text).group(0)\ndef extract_text(text):\n    '''\n    Write a function to extract text from a string.\n    '''\n    return text.replace('&','').replace('#','').replace('$','')\ndef extract_uri(text):\n    '''\n    Write a function to extract uri from a string.\n    '''\n    return re.search(r'\\?(?:[^\"]|\"\")+$', text).group(0)\ndef extract_form(text):\n    '''\n    Write a function to extract form from a string.\n    '''\n    return re.search(r'(?:(?:(?:(?:\\w+)|\\\\.{0,1})\\s*)|&#(?:[^;]+|\\n|\\t))+', text).group(0)\ndef extract_params(text):\n    '''\n    Write a function to extract params from a string.\n    '''\n    return re.search(r'(?:(?:(?:\\w+)|\\\\.{0,1})\\s*)|&(?:[^;]+|\\n|\\t)+)', text).group(0)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\"([^\"]*?)\"',text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    res = re.findall(pattern, text)\n    return res[0].replace('\"','')\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    p=0\n    q=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i]==arr[j]:\n                p+=1\n            if arr[j]==arr[i]:\n                q+=1\n    return p,q\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i] == arr[j]):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0:\n        return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            total += ((arr[i] + arr[j])*(arr[i]+arr[j])*(arr[i]+arr[j])*(arr[i]+arr[j]))\n    return total"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    if(n<=0):\n        return 0\n    if(n==1):\n        return 1\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n=len(arr)\n    if n==1:\n        return 1\n    else:\n        return arr[0] * count_Pairs(arr[1:],n-1)\n    \ndef main():\n    '''\n    Test case:  [2,3,1,1,1,4,4,8,3,3,3,4,2,1,1,4,4,4,5,4,1,3,3,3,3]\n    '''\n    n=int(input())\n    arr=list(map(int,input().strip().split()))\n    print(count_Pairs(arr,n))\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total_pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!= arr[j]):\n                total_pairs += 1\n    return total_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #create a list of all possible unordered pairs\n    l=list(permutations(arr))\n    #loop through the list of possible unordered pairs\n    for i in range(0,len(l)):\n        #print out the counter for each unordered pair\n        print(i,l[i])\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    m = len(arr)\n    if m <= 1:\n        return 0\n    count = 0\n    for i in range(m):\n        for j in range(i+1,m):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word) == 0:\n        return word\n    else:\n        return word[0]+split(word[1:])\n        \nword = input('Enter the word to split: ')\nprint(split(word))"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word) <= 1: \n        return word \n    return word[:1] + split(word[1:]) \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    char = ''\n    for i in word:\n        if i == \" \":\n            pass\n        elif i.isupper():\n            char += i.lower()\n        else:\n            char += i.upper()\n    return char\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    l = len(word)\n    return (word[i:l-i] for i in range(0,l))\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    splited_word = [] \n    if len(word) % 2 == 0: \n        for index in range(0,len(word),2): \n            splited_word.append(word[index]) \n        splited_word.append(word[-1]) \n    else: \n        for index in range(0,len(word),2): \n            splited_word.append(word[index]) \n        splited_word.append(word[-1]) \n    return splited_word \ndef is_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    if word == word[::-1]: \n        return True \n    else: \n        return False \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            return True \n    return False \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            return True \n    return False \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to remove the special characters from a given string. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''\n    for char in word: \n        if char!='': \n            word = word.replace(char, '') \n    return word \ndef not_palindrome(word): \n    '''\n    Write a python function to check if a given string is a palindrome. \n    '''"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    # Split the string into a list\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return int(str(n)[-1])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Create a variable for the sum of the digits\n    sum = 0\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"{} is not a valid number.\".format(n))\n    else:\n        return sum(int(i) for i in str(n)[::-1])"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n!= 0:\n        rem = n % 10\n        n = n // 10\n        sum = sum + rem\n    \n    return sum\n    \nprint(sum_digits(1234))"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        n, remainder = divmod(n, 10)\n        sum += remainder\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    return int(n[0]+n[1])\n    #print(int(n[0]+n[1]))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n % 10\n    \nprint(sum_digits(123))\nprint(sum_digits(42))\nprint(sum_digits(123.456))\nprint(sum_digits(876.43))\nprint(sum_digits(7346.789))\nprint(sum_digits(2\"))\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    return True\n    "
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # TODO: implement the function\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)<=1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    print('''\n    Sort an unsorted array into a sorted list.\n    ''')\n    print('-- Input --')\n    print('Sorted:')\n    print(list1)\n    print('\\n')\n    print('-- Output --')\n    print('Sorted:')\n    print(list1)\n    if sorted(list1)==list1:\n        print('The list is sorted')\n    else:\n        print('The list is not sorted')\n    print('''\n    Tested:\n    Sorted: True\n    Tested: True\n    ''')\n    \n    \ndef main():\n    '''\n    Write a function that takes as its input a list of numbers and a\n    number to find. Output a sorted list of those numbers.\n    '''\n    print('-- Input --')\n    print('Input a list of numbers to sort')\n    print('-- Output --')\n    list1=input('-- Input --').split(',')\n    list2=input('-- Input --').split(',')\n    print('-- Output --')\n    print(list1)\n    print(list2)\n    print('''\n    Tested:\n    Sorted: True\n    Tested: True\n    ''')\n    \n    \n    list1=list(map(int,list1))\n    list2=list(map(int,list2))\n    #print(list1)\n    #print(list2)\n    \n    #print('''\n    #Tested:\n    #Sorted: False\n    #Tested: True\n    #''')\n    \n    issort_list(list1)\n    issort_list(list2)\n    \n    \nmain("
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    print(f\"Checking if {list1} is sorted\")\n    if list1 is None or list1 == []:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list()\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for i in range(0,length):\n        dictionaries.append({})\n    return dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    l = []\n    for i in range(0,length):\n        l.append({})\n        \n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    for i in range(length):\n        empty.append({})\n    return empty\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    if length <= 0:\n        return result\n    elif length > 1:\n        for i in range(0,length-1):\n            result.append(dict())\n        return result\n    else:\n        return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(sublist):\n        '''\n        To sort a sublist from the end of the list, we'll need to iterate through the list and through each index in the list.\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"Sorting sublists of \", len(list1), \" elements...\")\n    for i in range(0, len(list1)):\n        if list1[i][1] == \"T\" or list1[i][1] == \"V\":\n            list1[i].sort()\n        else:\n            list1[i].sort(key=lambda x: (x[1], x[0]))\n    print(\"Sublists sorted.\\n\")\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for i in range(len(list1)):\n        sort_list.append([])\n        for j in range(len(list1[i])):\n            sort_list[i].append(list1[i][j])\n    return sort_list\n    #return sort_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    \n    return(list(map(lambda x: sorted(list(x)),list1)))\n    \n    \n    \ndef reverse_string(string):\n    '''\n    Given a string, return the string with all vowels reversed.\n    '''\n    return string.replace('a','e').replace('e','a').replace('i','o').replace('o','i')\n    \n    \n    \ndef main():\n    '''\n    Read a file, print the contents of it.\n    '''\n    \n    \n    file = open('mbox-short.txt')\n    \n    list1 = file.read().splitlines()\n    \n    list1 = sort_sublists(list1)\n    \n    \n    \n    for line in list1:\n        print(line)\n        \n    \n    file.close()\n    \n    \n    \n    \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_by_alphabet(lst):\n        '''\n        You need to sort the strings in lst in alphabetical order by their indices.\n        '''\n        sub = []\n        for i in lst:\n            for j in i:\n                sub.append(j)\n        sub.sort()\n        return sub\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # set a variable to hold the final list of lists\n    final_list = []\n    # loop through the list to sort it\n    for sublist in list1:\n        # sort each sublist by alphabetical order\n        new_sublist = sorted(sublist, key = lambda word:word)\n        # add the new sublist to the final list\n        final_list.append(new_sublist)\n    return final_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sortedList = []\n    for i in list1:\n        if isinstance(i, list):\n            sort_sublists(i)\n        else:\n            sortedList.append(i)\n    return sortedList\n    \ndef list_to_string(lst):\n    '''\n    Return a string representation of the given list of lists\n    '''\n    string = ''\n    for i in lst:\n        string += str(i) +''\n    return string\n    \ndef main():\n    '''\n    Write a function that takes in a list of lists and returns a string representing each sublist.\n    '''\n    lst = [['c','s', 'a', 'b', 'd'],\n        ['e', 'f', 'g'],\n        ['h', 'i', 'j'],\n        ['k', 'l','m', 'n']]\n    print(list_to_string(lst))\n    \nmain("
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    def key_func(x):\n        '''\n        Function to return the value of the key.\n        '''\n        \n        return x[1]\n    \n    return sorted(list1, key=key_func)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    import collections\n    \n    # Create an empty list to store each number\n    uniq_nums = []\n    \n    # Traverse through all nums\n    for i in nums:\n        # Append the number to uniq_nums\n        if i not in uniq_nums:\n            uniq_nums.append(i)\n    \n    # Convert the uniq_nums list into a dictionary to use it as an object\n    uniq_dictionary = collections.OrderedDict(uniq_nums)\n    \n    return uniq_dictionary\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    nums = [i for i in nums if i not in seen and not seen.add(i)]\n    seen = set(seen)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) <= 0:\n        return\n    nums_copy = nums[:]\n    nums_set = set(nums_copy)\n    for i in range(len(nums)):\n        if nums_copy[i] in nums_set:\n            nums_copy[i] = 0\n    return nums_copy\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    def remove_duplicates(nums):\n        if len(nums) > 0:\n            nums.sort()\n            # print(nums)\n            for i in range(len(nums)-1):\n                if nums[i] == nums[i+1]:\n                    pass\n                else:\n                    nums[i+1] = nums[i]\n            return nums\n        else:\n            return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return sorted(list(set(nums)))\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # define the function\n    # remove the numbers that occur in more than one list\n    # return the list with unique numbers removed\n    # if list is empty return None\n    \n    # initialise an empty list\n    # convert the input to a list\n    \n    # traverse the list to find the unique number\n    # add it to the empty list\n    # return the unique number\n    \n    # return None if the list is empty\n    \n    # iterate over the input to remove the numbers from the list\n    \n    # return the unique numbers that have been removed\n    \n    # return None if the list is empty\n    \n    # return the list to the caller\n    \n    return None if not nums else [num for num in nums if num not in nums[:nums.index(num)]]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # REMOVE DUPLICATES\n    nums_2 = []\n    nums_2 = [num for num in nums if num not in nums_2]\n    return nums_2\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Your code here\n    nums1 = []\n    nums2 = []\n    for i in nums:\n        if i not in nums1:\n            nums1.append(i)\n        elif i not in nums2:\n            nums2.append(i)\n    print(nums1)\n    print(nums2)\n    return nums1, nums2\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # your code here\n    return num"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    #Create an empty array to store the unique numbers.\n    unique = []\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data)==0:\n        return 0\n    return list_data[0] * list_data[0]\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 1\n    for i in list_data:\n        total = total * i\n    return total\n    "
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #Creating the list\n    list_unique_numbers = []\n    for number in list_data:\n        if number not in list_unique_numbers:\n            list_unique_numbers.append(number)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_data = []\n    #Creating the array of the data\n    for num in list_data:\n        set_data.append(num)\n    #The below string of condition is for converting all of the numbers in the array to a string and convert to integer\n    #The program will convert the numbers into an integer as long as all the numbers are unique.\n    unique_string = ''\n    for num in set_data:\n        if num not in unique_string:\n            unique_string += str(num)\n    return unique_string\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(len(list_data)):\n        product *= int(list_data[i])\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    tot_price = 0\n    for i in range(len(list_data)):\n        tot_price = tot_price + list_data[i]\n    return tot_price\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers = []\n    for i in range(len(list_data)):\n        numbers.append(list_data[i][0])\n    for j in range(len(numbers)):\n        if numbers[j] not in numbers:\n            numbers[j] = 0\n    print(numbers)\n    return numbers\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_unique = []\n    for item in list_data:\n        if item not in list_unique:\n            list_unique.append(item)\n    return len(list_unique)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return 0\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # compute the radius and height\n    r = r/2\n    h = h/2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    s = 2 * pi * (r**2) * h\n    return s\n    \ndef surfacearea_ellipsoid(a,h):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    s = 1 / 2 * (a * h**2)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #return np.pi*r*h\n    return (np.pi*r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*(pi*r*r*h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return(h*(4*math.pi)**2)*math.sqrt(r**2-4*r*math.sin(math.radians(45))**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Create a variable called r and assign it the value of 1\n    r=1\n    # Create a variable called h and assign it the value of 0\n    h=0\n    # Create a for loop that goes through the values in the radius variable and finds the\n    # area of each circle.\n    for i in range(0,r):\n        for j in range(0,r):\n            for k in range(0,h):\n                print(i*j*k,end=' ')\n            print()\n        # Print the spaces between each circle.\n        print()\n    # Print the stars.\n    print('*' * (r * h))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*(r*h)/3\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 0\n    for i in range(0,r):\n        for j in range(0,r):\n            area += (i**2 + j**2)**0.5\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    a = math.pi * (r**2)\n    b = 4*math.pi*h**2\n    return b * a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return (4*pi*r**2)*h\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B): \n        return False\n    for i in range(len(A)): \n        if A[i]!= B[i]: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Write your code here\n    pass"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    L=[]\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if i<j:\n                L.append(A[i]==B[j])\n    if len(L)==len(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == len(B):\n        for i in range(0,len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return True if len(A) == len(B) else False\n    #return True if A.index(B[0]) == B[0] else False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    D=set(A)\n    E=set(B)\n    # E is set of elements in B\n    return D==E or D&E==E\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s=''\n    for i in range(0,len(A)):\n        if (A[i]==B[i]):\n            s+=A[i]\n        else:\n            return False\n    return s==A\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            return A[1:]\n        elif A[i] == B[1]:\n            return A[:]\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B not in A:\n        return True\n    else:\n        for i in range(len(A)):\n            if A[i] == B[0]:\n                if is_Sub_Array(A[i+1:],B):\n                    return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    # Iterate through list \n    while(i < len(A)): \n        # If this element is in sublist \n        if A[i] in B: \n            # Remove this element from A and B \n            A.pop(i) \n            B.pop(B.index(A[i])) \n        i = i+1 \n    return A == B\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    s = n\n    while s!= 0: \n        temp = s \n        fact = 1\n        while temp > 0: \n            fact *= temp \n            temp -= 1\n        s -= 1\n        print(fact, end ='')\n    print()\n    \n    \ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    s = n\n    sum = 0\n    while s!= 0:\n        sum += s\n        s -= 1\n    return sum\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    s = 1\n    for i in range(1, n+1):\n        s = s * i\n    return s\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print('Invalid input')\n    else: \n        factorial = 1\n        while n > 0: \n            factorial = factorial * n\n            n = n - 1\n        print(\"Factorial of \", n, \" is \", factorial) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # return the factorial of the number.\n    return n % 10\n    \ndef print_factorial(n): \n    '''\n    Write a python function to print the factorial of a given number.\n    '''\n    # return the factorial of the number.\n    i = 1\n    while i <= n:\n        print(n, '!', end='')\n        i += 1\n    print()\n    \ndef sum_digits(n): \n    '''\n    Write a python function to sum the digits of a given number.\n    '''\n    # return the sum of digits.\n    return n % 10 + sum(map(int, str(n)))\n    \ndef factorial(n): \n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    # return the factorial.\n    i = 1\n    while i <= n:\n        print(n, '!', end='')\n        i += 1\n    print()\n    \ndef fibonacci(n): \n    '''\n    Write a python function to compute the fibonacci sequence.\n    '''\n    # return the fibonacci sequence.\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    # return the reversed string.\n    return s[::-1]\n    \ndef has_duplicate(nums): \n    '''\n    Write a python function to check whether the list contains duplicate numbers.\n    '''\n    # return whether the list contains duplicate numbers.\n    return nums.count(nums[0]) > 1\n    \ndef remove_nth_element_from_list(lst, n): \n    '''\n    Write a python function to remove the first n elements from a given list.\n    '''\n    # return the nth elements of the list.\n    i = 1\n    while i < len(lst):\n        if lst[i - 1] == lst[n - 1]:\n            del lst[i - 1]\n        else:\n            i += 1\n    print(lst)\n    \ndef find_prime_number(lst): \n    '''\n    Write a python function to find the nth prime number.\n    '''\n    # return the nth prime number.\n    for i in range(2,len(lst)):\n        if lst[i] < lst[i-1]:\n            break\n        else:\n            continue\n    else:\n        return False\n    print(lst)\n    \ndef count_prime_factors(n): \n    '''\n    Write a python function to count the number of prime factors for a given number.\n    '''\n    # return the number of prime factors for a given number.\n    return factorial(n).count(1)\n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether a given number is prime.\n    '''\n    # return whether the number is prime.\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    return is_prime(n - 1)\n    \ndef merge_sort(lst): \n    '''\n    Write a python function to sort a given list of integers.\n    '''\n    # return the sorted list.\n    if len(lst) == 1:\n        return lst\n    else:\n        i = len(lst) // 2\n        left = lst[:i]\n        right = lst[i:]\n        return merge(merge_sort(left), merge_sort(right))\n    \ndef merge(left, right): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    # return the merged list.\n    i, j = 0, 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\n    \ndef next_permutation(lst): \n    '''\n    Write a python function to find the next permutation of an array.\n    '''\n    # return the next permutation of the given array.\n    if len(lst) == 1:\n        return lst\n    else:\n        i = len(lst) - 2\n        while i >= 0 and lst[i] >= lst[i + 1]:\n            i -= 1\n        if i == -1:\n            return False\n        else:\n            lst[i + 1], lst[i] = lst[i], lst[i + 1]\n            return lst\n    \ndef reverse_string_if_needed(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    # return the reversed string.\n    return s[::-1]\n    \ndef reverse_string(lst): \n    '''\n    Write a python function to reverse a list of strings.\n    '''\n    # return the reversed list.\n    return list(map(reverse_string_if_needed, lst))\n    \ndef reverse_list(lst): \n    '''\n    Write a python function to reverse a given list.\n    '''\n    # return the reversed list.\n    if lst == []:\n        return []\n    return reverse_list(lst[1:]) + [lst[0]] + reverse_list(lst[:1])\n    \ndef merge_sort_iterative(lst): \n    '''\n    Write a python function to sort a given list of integers.\n    '''\n    # return the sorted list.\n    if len(lst) == 1:\n        return lst\n    if len(lst) <= 1:\n        return lst\n    middle = len(lst) // 2\n    left = lst[:middle]\n    right = lst[middle:]\n    return merge(merge_sort_iterative(left), merge_sort_iterative(right))\n    \ndef merge(left, right): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    # return the merged list.\n    i, j = 0, 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\n    \ndef merge_sort_recursive(lst): \n    '''\n    Write a python function to sort a given list of integers.\n    '''\n    # return the sorted list.\n    if len(lst) == 1:\n        return lst\n    if len(lst) <= 1:\n        return lst\n    middle = len(lst) // 2\n    left = lst[:middle]\n    right = lst[middle:]\n    return merge(merge_sort_recursive(left), merge_sort_recursive(right))\n    \ndef most_frequent(lst): \n    '''\n    Write a python function to find the most frequent element in a list.\n    '''\n    # return the most frequent element in a list.\n    return max(set(lst), key=lst.count)\n    \ndef lowest_frequency(lst): \n    '''\n    Write a python function to find the least frequent element in a list.\n    '''\n    # return the least frequent elemen"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x = int(n)\n    y = 1\n    while x!= 0:\n        y = y * x\n        x = x - 1\n    print(y)\n    return y\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n >= 1: \n        factorial = factorial * n \n        n = n - 1 \n    return factorial \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n%10 + last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n > 10:\n        raise ValueError(\"n must be less than 10\")\n    last_digit = 10\n    n = n % 10\n    if n == 0:\n        return 0\n    while n > 0:\n        last_digit = n % 10\n        n = n // 10\n    if last_digit < 10:\n        return last_digit\n    else:\n        return 10 - last_digit\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list3)!= len(list1) or len(list3)!= len(list2):\n        print(\"lists must be the same size\")\n        return\n    \n    # get rid of duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n    list3 = set(list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #Your code here\n    # Find the length of the list so that it is even\n    # Create an empty list of the same size\n    # Copy the elements of list1 to it and append the elements of list2\n    # Copy the elements of list3 to it and append the elements of list1\n    # Return the interleaved list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return (list(zip(list1,list2,list3)))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    interleaved_list1 = []\n    interleaved_list2 = []\n    interleaved_list3 = []\n    list_size = len(list1)\n    new_list.append(list1)\n    new_list.append(list2)\n    new_list.append(list3)\n    interleaved_list1.append(new_list[0])\n    interleaved_list2.append(new_list[1])\n    interleaved_list3.append(new_list[2])\n    \n    for i in range(list_size):\n        interleaved_list1[i][list2[i]] = new_list[0][list1[i]]\n        interleaved_list2[i][list3[i]] = new_list[1][list1[i]]\n        interleaved_list3[i][list1[i]] = new_list[2][list1[i]]\n    return interleaved_list1,interleaved_list2,interleaved_list3\n        \ndef interleave_lists_back(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    interleaved_list1 = []\n    interleaved_list2 = []\n    interleaved_list3 = []\n    \n    for i in range(list_size):\n        new_list[i].append(list1[i][list3[i]])\n        new_list[i].append(list2[i][list3[i]])\n        new_list[i].append(list1[i][list2[i]])\n        \n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if list1 is None:\n        return []\n    if list2 is None:\n        return list3\n    if list3 is None:\n        return list1\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        return list1 + list2 + list3\n    else:\n        return list1 + list2 + list3[:len(list3)//2] + list3[len(list3)//2:]"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    result.extend(list1)\n    result.extend(list2)\n    result.extend(list3)\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    \n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('Wrong length!')\n    \n    return list1 + list2 + list3\n    \ndef interleave_lists_no_nest(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    \n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('Wrong length!')\n    \n    return list1 + list2 + list3\n    \ndef interleave_lists_two_lists(list1,list2):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2):\n        raise ValueError('Wrong length!')\n    return interleave_lists_no_nest(list1,list2,list1+list2)\n    \ndef check_sublists(list_l, list_r):\n    '''\n    Write a function to compare a list of sublists to another list of sublists.\n    '''\n    return list_l == list_r\n    \ndef merge_two_sublists(list_l, list_r):\n    '''\n    Write a function to merge 2 lists of sublists into a single list.\n    '''\n    if len(list_l) == 0 or len(list_r) == 0:\n        return list_l\n    elif list_l[0] > list_r[0]:\n        list_l.append(list_r[0])\n        list_r.pop(0)\n        \n    if len(list_l) == len(list_r):\n        for i in range(len(list_l)):\n            list_l[i] = list_l[i][0]\n    \n    return list_l\n    \ndef merge_two_sublists_no_nest(list_l, list_r):\n    '''\n    Write a function to merge 2 lists of sublists into a single list.\n    '''\n    if len(list_l) == 0 or len(list_r) == 0:\n        return list_l\n    elif list_l[0] > list_r[0]:\n        list_l.append(list_r[0])\n        list_r.pop(0)\n        \n    if len(list_l) == len(list_r):\n        for i in range(len(list_l)):\n            list_l[i] = list_l[i][0]\n    \n    return list_l\n    \ndef merge_three_sublists(list_l, list_r, list_c):\n    '''\n    Write a function to merge 3 lists of sublists into a single list.\n    '''\n    if len(list_l) == 0 or len(list_r) == 0 or len(list_c) == 0:\n        return list_l\n    elif list_l[0] > list_r[0] and list_l[0] > list_c[0]:\n        list_l.append(list_c[0])\n        list_c.pop(0)\n        \n    if len(list_l) == len(list_r) and len(list_l) == len(list_c):\n        for i in range(len(list_l)):\n            list_l[i] = list_l[i][0]\n    \n    return list_l\n    \ndef merge_three_sublists_no_nest(list_l, list_r, list_c):\n    '''\n    Write a function to merge 3 lists of sublists into a single list.\n    '''\n    if len(list_l) == 0 or len(list_r) == 0 or len(list_c) == 0:\n        return list_l\n    elif list_l[0] > list_r[0] and list_l[0] > list_c[0]:\n        list_l.append(list_c[0])\n        list_c.pop(0)\n        \n    if len(list_l) == len(list_r) and len(list_l) == len(list_c):\n        for i in range(len(list_l)):\n            list_l[i] = list_l[i][0]\n    \n    return list_l\n    \ndef merge_two_sublists_two_and_more(list_l, list_r):\n    '''\n    Write a function to merge 2 lists of sublists into a single list.\n    '''\n    if len(list_l) == 0 or len(list_r) == 0:\n        return list_l\n    elif list_l[0] > list_r[0]:\n        list_l.append(list_r[0])\n        list_r.pop(0)\n        \n    if len(list_l) == len(list_r):\n        for i in range(len(list_l)):\n            list_l[i] = list_l[i][0]\n    \n    return list_l\n    \ndef merge_two_sublists_two_and_more_no_nest(list_l, list_r):\n    '''\n    Write a function to merge 2 lists of sublists into a single list.\n    '''\n    if len(list_l) == 0 or len(list_r) == 0:\n        return list_l\n    elif list_l[0] > list_r[0]:\n        list_l.append(list_r[0])\n        list_r.pop(0)\n        \n    if len(list_l) == len(list_r):\n        for i in range(len(list_l)):\n            list_l[i] = list_l[i][0]\n    \n    return list_l\n    \ndef filter_list(list_f, list_f_t):\n    '''\n    Write a function to filter a list of lists using a filter function.\n    '''\n    if list_f == []:\n        return []\n    elif list_f_t == []:\n        return list_f\n    elif list_f[0] > list_f_t[0]:\n        list_f.append(list_f_t[0])\n        list_f_t.pop(0)\n        \n    if list_f[0] == list_f_t[0]:\n        list_f = [list_f[0]] + list_f\n        list_f_t = [list_f_t[0]] + list_f_t\n    \n    return list_f\n    \ndef filter_two_list_two_list_no_nest(list_f, list_f_t):\n    '''\n    Write a function to filter a list of lists using a filter function.\n    '''\n    if list_f == []:\n        return []\n    elif list_f_t == []:\n        return list_f\n    elif list_f[0] > list_f_t[0]:\n        list_f.append(list_f_t[0])\n        list_f_t.pop(0)\n        \n    if list_f[0] == list_f_t[0]:\n        list_f = [list_f[0]] + list_f\n        list_f_t = [list_f_t[0]] + list_f_t\n    \n    return list_f\n    \ndef filter_two_list_two_list_two_and_more(list_f, list_f_t):\n    '''\n    Write a function to filter a list of lists using a filter function.\n    '''\n    if list_f == []:\n        return []\n    elif list_f_t == []:\n        return list_f\n    elif list_f[0] > list_f_t[0]:\n        list_f.append(list_f_t[0])\n        list_f_t.pop(0)\n        \n    if list_f[0] == list_"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l1=list1[:]\n    l2=list2[:]\n    l3=list3[:]\n    \n    l1.extend(l2)\n    l1.extend(l3)\n    \n    return l1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    if len(list1) == len(list2):\n        for index in range(len(list1)):\n            final_list.append(list1[index]+list2[index]+list3[index])\n    elif len(list1) == len(list3):\n        for index in range(len(list2)):\n            final_list.append(list1[index]+list3[index]+list2[index])\n    elif len(list2) == len(list3):\n        for index in range(len(list1)):\n            final_list.append(list1[index]+list2[index]+list3[index])\n    else:\n        print(\"Something went wrong!\")\n    return final_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Pass the parameter test_tup1 and test_tup2 to the two dictionaries below\n    # Create a dictionary of the elements in the tuple test_tup1\n    # Create a dictionary of the elements in the tuple test_tup2\n    # For each element in test_tup1, find the value in the dictionary of the element in test_tup2\n    # For each element in test_tup2, find the value in the dictionary of the element in test_tup1\n    # Return the dictionary\n    tup_1_values = {}\n    tup_2_values = {}\n    for i in range(len(test_tup1)):\n        tup_1_values[test_tup1[i]] = test_tup2[i]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n    test_list3 = []\n    print('I am here now to find the dissimilar elements between:', test_tup1, 'and', test_tup2)\n    # Remove duplicate elements from the tuple\n    if type(test_tup1) is not tuple:\n        test_tup1 = tuple(test_tup1)\n    if type(test_tup2) is not tuple:\n        test_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup = test_tup1 + test_tup2\n    dism = dict()\n    for i in tup:\n        if i not in tup:\n            dism[i] = 1\n    return diss\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_lst = []\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissim_lst.append(i)\n    return dissim_lst\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_dissimilar = []\n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            if (test_tup1[i]!= test_tup2[j]) and (test_tup1[i] not in test_dissimilar):\n                test_dissimilar.append(test_tup1[i])\n            if (test_tup2[i]!= test_tup1[j]) and (test_tup2[i] not in test_dissimilar):\n                test_dissimilar.append(test_tup2[i])\n    return test_dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list_1 = []\n    list_2 = []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diss_lst1 = []\n    diss_lst2 = []\n    for i in test_tup1:\n        diss_lst1.append(i)\n    for i in test_tup2:\n        diss_lst2.append(i)\n    return diss_lst1, diss_lst2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar.append(test_tup1[i])\n                break\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # find the pair with the smallest distance\n    min_dist = test_tup1[0] - test_tup2[0]\n    min_dist_id = test_tup1[1]\n    for i in test_tup2:\n        if i < min_dist:\n            min_dist_id = test_tup1[1]\n            min_dist = i - test_tup1[0]\n    return min_dist, min_dist_id\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar.append(test_tup1[i])\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = {}\n    odd = {}\n    for ele in test_tuple:\n        if ele % 2 == 0:\n            even[ele] = 'even'\n        else:\n            odd[ele] = 'odd'\n    print(f'The even elements in the nested mixed tuple are {even} and the odd elements in the nested mixed tuple are {odd}')\n    print(f'The even elements in the nested mixed tuple are {even} and the odd elements in the nested mixed tuple are {odd}')\n    even_ele = []\n    odd_ele = []\n    for ele in even:\n        if even[ele] == 'even':\n            even_ele.append(even[ele])\n    for ele in odd:\n        if odd[ele] == 'odd':\n            odd_ele.append(odd[ele])\n    print(f'The even elements are {even_ele}')\n    print(f'The odd elements are {odd_ele}')\n    return even_ele, odd_ele\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_fnc(i)\n        else:\n            odd_fnc(i)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # define variables for the outer tuple\n    even_val = []\n    odd_val = []\n    # iterate through the test_tuple and check each value in the tuple\n    for val in test_tuple:\n        # if the value in the tuple is odd, then add it to the even_val list\n        if val % 2 == 0:\n            even_val.append(val)\n        # if the value in the tuple is even, then add it to the odd_val list\n        else:\n            odd_val.append(val)\n    # create a new tuple with the even and odd values\n    even_tuple = tuple(even_val) + tuple(odd_val)\n    print(even_tuple)\n    # call the even_fnc function with the tuple as a parameter\n    even_fnc(even_tuple, even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple, odd_tuple = test_tuple\n    result = []\n    for ele in even_tuple:\n        if ele not in odd_tuple:\n            result.append(ele)\n    return result\n    "
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = tuple(even_fnc(tuple(test_tuple), 0, None))\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    odd_tuple = test_tuple[1]\n    if even_fnc == odd_fnc:\n        even_tuple = even_tuple[1:]\n        return even_tuple\n    else:\n        if odd_fnc == 'even':\n            return odd_tuple[1:]\n        else:\n            return odd_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(f\"\\n\\t\\t\\t\\t\\t\\t\\t\\t{even_fnc.__name__} \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(f\"\\t{test_tuple[0]} - {test_tuple[1]}\")\n    print(f\"\\t{test_tuple[2]} - {test_tuple[3]}\")\n    test_tuple = (test_tuple[0], test_tuple[2], test_tuple[3])\n    return test_tuple \n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(f\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{odd_fnc.__name__} \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(f\"\\t{test_tuple[0]} - {test_tuple[1]}\")\n    print(f\"\\t{test_tuple[2]} - {test_tuple[3]}\")\n    test_tuple = (test_tuple[0], test_tuple[2], test_tuple[3])\n    return test_tuple \n    \ndef mixed_tuple(test_tuple, mixed_fnc):\n    '''\n    Write a function to get mixed elements in the nested mixed tuple.\n    '''\n    print(f\"\\n\\t\\t\\t\\t\\t\\t\\t\\t{mixed_fnc.__name__} \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(f\"\\t{test_tuple[0]} - {test_tuple[1]}\")\n    print(f\"\\t{test_tuple[2]} - {test_tuple[3]}\")\n    test_tuple = (test_tuple[0], test_tuple[2], test_tuple[3])\n    return test_tuple \n    \ndef check(even, odd):\n    '''\n    Check if user has entered correct input.\n    '''\n    test_tuple = (input(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tEnter element: \"), \n    input(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tEnter element: \"), \n    input(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tEnter element: \"))\n    print(f\"\\tThe element in the tuple {test_tuple[0]} : {test_tuple[1]}\")\n    print(f\"\\tThe element in the tuple {test_tuple[2]} : {test_tuple[3]}\")\n    if even == odd:\n        print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\tCorrect\")\n    else:\n        print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\tIncorrect\")\n        \ndef read_data(data_dict):\n    '''\n    Read and print the data from the user.\n    '''\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tPlease choose one of the following options: \")\n    print(\"\\t1. Print all the elements from the nested list\")\n    print(\"\\t2. Print all the elements from the nested list in reverse order\")\n    print(\"\\t3. Print all the elements from the nested list in a list in reverse order\")\n    print(\"\\t4. Print all the elements from the nested list in a single list\")\n    print(\"\\t5. Print all the elements from the nested list in a single list\")\n    print(\"\\t6. Print all the elements from the nested list in a tuple\")\n    print(\"\\t7. Print all the elements from the nested list in a tuple\")\n    print(\"\\t8. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t9. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t10. Print all the elements from the nested list in a set\")\n    print(\"\\t11. Print all the elements from the nested list in a set\")\n    print(\"\\t12. Print all the elements from the nested list in a set\")\n    print(\"\\t13. Print all the elements from the nested list in a set\")\n    print(\"\\t14. Print all the elements from the nested list in a set\")\n    print(\"\\t15. Print all the elements from the nested list in a set\")\n    print(\"\\t16. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t17. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t18. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t19. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t20. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t21. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t22. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t23. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t24. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t25. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t26. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t27. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t28. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t29. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t30. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t31. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t32. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t33. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t34. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t35. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t36. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t37. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t38. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t39. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t40. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t41. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t42. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t43. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t44. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t45. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t46. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t47. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t48. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t49. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t50. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t51. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t52. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t53. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t54. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t55. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t56. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t57. Print all the elements from the nested list in a dictionary\")\n    print(\"\\t58. Print all the element"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    even_tuple = tuple(map(even_fnc,test_tuple))\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    i=0\n    for item in test_tuple:\n        if item==even_fnc:\n            test_tuple[i]=test_tuple[i][1:]\n        i+=1\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_counter = 0\n    for i in test_tuple:\n        if i%2==0:\n            even_counter += 1\n    \n    #for i in test_tuple:\n    #    if i%2!=0:\n    #        even_counter += 1\n    #even_counter = even_counter//2\n    \n    if even_counter > 1:\n        #print('Even')\n        #print(test_tuple)\n        even_tuple = ()\n        even_tuple = test_tuple[0:even_counter] + test_tuple[even_counter+1:]\n        even_fnc(even_tuple)\n    else:\n        #print('Odd')\n        #print(test_tuple)\n        odd_tuple = ()\n        odd_tuple = test_tuple[0:len(test_tuple)-even_counter] + test_tuple[len(test_tuple)-even_counter+1:]\n        odd_fnc(odd_tuple)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b<0: \n        print(\"Base Edge is not positive\")\n        return\n    if s<0: \n        print(\"Height is not positive\")\n        return\n    elif b>4: \n        print(\"The base edge is greater than 4\")\n        return\n    elif s>6: \n        print(\"The height is greater than 6\")\n        return\n    else: \n        area = 4*b*s\n        print(\"Area: \", area)\ndef pyramid_Area(a,b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with base edge a and height b and a\n    conversion factor s.\n    '''\n    if a<0: \n        print(\"Base Edge is not positive\")\n        return\n    if b<0: \n        print(\"Height is not positive\")\n        return\n    elif s<0: \n        print(\"The conversion factor is not positive\")\n        return\n    elif a>4: \n        print(\"The base edge is greater than 4\")\n        return\n    elif b>6: \n        print(\"The height is greater than 6\")\n        return\n    else: \n        area = a*b*s\n        print(\"Area: \", area)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    x=b\n    y=s\n    sum=0\n    while (y>0):\n        sum=sum+(y*(y-1))\n        y=y-1\n    return sum\n    \nprint (\"Square Pyramid with base edge and height\")\nprint (f\"Area: {surface_Area(1,1)}\")\nprint (f\"Area: {surface_Area(5,6)}\")\nprint (f\"Area: {surface_Area(7,7)}\")\nprint (f\"Area: {surface_Area(9,9)}\")\nprint (f\"Area: {surface_Area(11,11)}\")\nprint (f\"Area: {surface_Area(15,15)}\")\nprint (f\"Area: {surface_Area(21,21)}\")\nprint (f\"Area: {surface_Area(25,25)}\")\nprint (f\"Area: {surface_Area(31,31)}\")\nprint (f\"Area: {surface_Area(35,35)}\")\nprint (f\"Area: {surface_Area(41,41)}\")\nprint (f\"Area: {surface_Area(45,45)}\")\nprint (f\"Area: {surface_Area(51,51)}\""
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    try:\n        b=float(b)\n        s=float(s)\n        return b*s*(s-1)/2\n    except Exception:\n        print('Invalid input')\n        return 0\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # baseedge is the base length of the pyramid\n    # height is the height of the pyramid\n    # Pyramid should be of length baseedge + 2*height\n    # Calculate the area for each surface \n    surface_area_list = []\n    for i in range(b): \n        for j in range(2*s): \n            surface_area_list.append((2 * i + j) * b)\n            # surface_area_list.append(2 * i + j * b) \n    return surface_area_list\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pyramid = pyramid_calculation(b,s)\n    surface = 0.0\n    for i in range(0, len(pyramid)):\n        surface += pyramid[i]*(2**i)\n    return surface\ndef pyramid_calculation(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        else:\n            pyramid.append(1)\n    for j in range(1, len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_three_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(1)\n        elif i == 2:\n            pyramid.append(2)\n        else:\n            pyramid.append(1)\n    for j in range(2,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_three_dimension_two_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        else:\n            pyramid.append(1)\n    for j in range(3,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_three_dimension_three_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        elif i == 3:\n            pyramid.append(3)\n        else:\n            pyramid.append(1)\n    for j in range(4,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_three_dimension_four_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        elif i == 3:\n            pyramid.append(3)\n        elif i == 4:\n            pyramid.append(1)\n        else:\n            pyramid.append(1)\n    for j in range(5,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_four_dimension_two_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        elif i == 3:\n            pyramid.append(3)\n        elif i == 4:\n            pyramid.append(2)\n        else:\n            pyramid.append(1)\n    for j in range(6,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_four_dimension_three_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        elif i == 3:\n            pyramid.append(3)\n        elif i == 4:\n            pyramid.append(2)\n        elif i == 5:\n            pyramid.append(3)\n        else:\n            pyramid.append(1)\n    for j in range(7,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_four_dimension_four_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        elif i == 3:\n            pyramid.append(3)\n        elif i == 4:\n            pyramid.append(2)\n        elif i == 5:\n            pyramid.append(3)\n        elif i == 6:\n            pyramid.append(1)\n        else:\n            pyramid.append(1)\n    for j in range(7,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_five_dimension_two_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        elif i == 3:\n            pyramid.append(3)\n        elif i == 4:\n            pyramid.append(2)\n        elif i == 5:\n            pyramid.append(3)\n        elif i == 6:\n            pyramid.append(1)\n        else:\n            pyramid.append(1)\n    for j in range(7,len(pyramid)):\n        pyramid[j] = 2**(j-1)*(pyramid[j-1]+2)\n    return pyramid\ndef pyramid_calculation_five_dimension_three_dimension(b, s):\n    '''\n    Write a python function to calculate a pyramid for the given base edge and height.\n    '''\n    pyramid = []\n    for i in range(b):\n        if i == 0:\n            pyramid.append(0)\n        elif i == 1:\n            pyramid.append(2)\n        elif i == 2:\n            pyramid.append(1)\n        elif i == 3:\n            pyramid.append(3)\n        elif i == 4:\n            pyramid.append(2)\n        elif i == 5:\n            pyramid.append(3)\n        elif i == 6:\n            pyramid.append(1)\n        else:\n            pyramid.append(1)\n    for j in range(7,len(pyramid)):"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = 2*b/s+1\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # edge, height must be positive\n    if b < 0 or s < 0:\n        print('Height or edge must be positive')\n    # check for the validity of base and height values\n    if (abs(b) > abs(s)):\n        print('Height must be greater than base')\n    elif (abs(b) <= abs(s)):\n        return (abs(b) * abs(s))\n    else:\n        return (abs(b) * abs(s) * abs(b) * abs(s))"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_area(a,h): \n        ''' \n        This function calculates the area of a square pyramid. The base edge can be equal to or not equal to zero. \n        The height can be equal to zero or greater than or less than zero.\n        '''\n        return (a * (2*h - 1) - 2 * a * (h - 1))\n    return (surface_area(b,s))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (abs(b) * s * (s - 1) / 2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 1 + (s / 2) *(4 + (s / 4))\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        pass\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if type(dict1)==dict:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if type(dict1) is dict:\n        return 'true'\n    else:\n        return 'false'\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num > (pow(2, 31) - 1) or num < (pow(2, 31)):\n        raise ValueError\n    elif num == 1:\n        return 1\n    else:\n        for i in range(1, int(math.ceil(num/2))):\n            print(i)\n            if num % i == 0:\n                return catalan_number(num - i * 2) + catalan_number(num - i * 2 + 1)\n            else:\n                pass\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0 for _ in range(num + 1)]\n    for i in range(1, num + 1):\n        catalan[i] = catalan[i - 1] + catalan[i - 2]\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        raise ValueError(\"please enter a valid number of numbers\")\n    elif num > 99:\n        raise ValueError(\"numbers can be between 1 and 99\")\n    else:\n        catalan_number_list = [1]\n        for i in range(2, num+1):\n            catalan_number_list.append((catalan_number_list[i-2] + catalan_number_list[i-1]) % i)\n        return catalan_number_list[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # number of different multiples of 3, 5, 7, 9,...\n    res = [1, 3, 5, 7, 9, 11]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case\n    if num == 0:\n        return 1\n    # set dummy value\n    dummy = num\n    # keep recursing until\n    # number is greater than\n    # last number in the\n    # range\n    while dummy < 0:\n        dummy = dummy * dummy\n        # keep looping until\n        # number is greater than the\n        # last number in the\n        # range\n        while dummy > num:\n            # decrement the number\n            # by one and add one\n            # to the current value\n            dummy -= 1\n            # if it's 0, that means that the\n            # current number is bigger than the\n            # last number in the range\n            if dummy == 0:\n                dummy += 1\n    # return the value of the\n    # number\n    return dummy\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    l=[]\n    for i in range(1,num+1):\n        l.append(i*(i+1))\n    return sum(l)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = int(num)\n    if n <= 0:\n        raise ValueError('n must be greater than 0')\n    else:\n        n_sum = 0\n        for i in range(1, n):\n            n_sum += i\n        return n_sum\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return str(int(num*math.log(num)))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = 1\n    for i in range(num):\n        c *= (i+1)\n    return c\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #to search for the first adverb starting with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'y':\n            find = True\n            break\n    if find == True:\n        # to search for the first adverb ending with ly\n        # and to find the adverb ending with ly\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'e':\n            for i in range(i+1, len(text)):\n                if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'e':\n                    found = True\n                    break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'e' and find == True:\n            if text[i-1] == 'ly' and text[i+1] == 'l' and text[i+2] == 'y' and text[i+3] == 'e':\n                found = True\n                break\n    return found\ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    # to search for the first noun ending with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'n' and text[i+2] == 'e':\n            find = True\n            break\n    if find == True:\n        # to search for the first noun ending with ly\n        # and to find the noun ending with ly\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'n' and text[i+2] == 'e' and find == True:\n            for i in range(i+1, len(text)):\n                if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'n' and text[i+2] == 'e':\n                    found = True\n                    break\n    return found\ndef find_prepositions(text):\n    '''\n    Write a function to find the first preposition ending with ly and its positions in a given string.\n    '''\n    # to search for the first preposition ending with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'p':\n            find = True\n            break\n    if find == True:\n        # to search for the first preposition ending with ly\n        # and to find the preposition ending with ly\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'p' and find == True:\n            for i in range(i+1, len(text)):\n                if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'p' and find == True:\n                    found = True\n                    break\n    return found\ndef find_interrogative(text):\n    '''\n    Write a function to find the first interrogative ending with ly and its positions in a given string.\n    '''\n    # to search for the first interrogative ending with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'i':\n            find = True\n            break\n    if find == True:\n        # to search for the first interrogative ending with ly\n        # and to find the interrogative ending with ly\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'i' and find == True:\n            for i in range(i+1, len(text)):\n                if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'i':\n                    found = True\n                    break\n    return found\ndef find_adv(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # to search for the first adverb ending with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'a':\n            find = True\n            break\n    if find == True:\n        # to search for the first adverb ending with ly\n        # and to find the adverb ending with ly\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'a' and find == True:\n            for i in range(i+1, len(text)):\n                if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'a':\n                    found = True\n                    break\n    return found\ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    # to search for the first noun ending with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'n':\n            find = True\n            break\n    if find == True:\n        # to search for the first noun ending with ly\n        # and to find the noun ending with ly\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'n':\n            for i in range(i+1, len(text)):\n                if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'n':\n                    found = True\n                    break\n    return found\ndef find_prepositions(text):\n    '''\n    Write a function to find the first preposition ending with ly and its positions in a given string.\n    '''\n    # to search for the first preposition ending with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'p':\n            find = True\n            break\n    if find == True:\n        # to search for the first preposition ending with ly\n        # and to find the preposition ending with ly\n        if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'p' and find == True:\n            for i in range(i+1, len(text)):\n                if text[i] == 'ly' and text[i-1] == 'l' and text[i+1] == 'p' and find == True:\n                    found = True\n                    break\n    return found\ndef find_interrogative(text):\n    '''\n    Write a function to find the first interrogative ending with ly and its positions in a given string.\n    '''\n    # to search for the first interrogative ending with ly\n    found = False\n    find = False\n    for i in range(len(text)):\n        if found == True:\n            find = False\n            break\n        if text[i] == 'l"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = '([ly])([-])([ly])'\n    match = re.findall(regex, text)\n    return match\ndef find_noun(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are not\n    nouns.\n    '''\n    regex = '([^0-9])([a-z])([A-Z])'\n    match = re.findall(regex, text)\n    return match\ndef find_adjectives(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are not\n    adjectives.\n    '''\n    regex = '([^0-9])([A-Z])'\n    match = re.findall(regex, text)\n    return match\ndef find_adj(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are not\n    adjacent.\n    '''\n    regex = '([^0-9])([A-Z])'\n    match = re.findall(regex, text)\n    return match\ndef count_nouns(text):\n    '''\n    Write a function that takes a string and returns the number of words in the string that are\n    nouns.\n    '''\n    regex = '([^0-9])([A-Z])'\n    match = re.findall(regex, text)\n    return len(match)\ndef count_adj(text):\n    '''\n    Write a function that takes a string and returns the number of words in the string that are\n    adjectives.\n    '''\n    regex = '([^0-9])([A-Z])'\n    match = re.findall(regex, text)\n    return len(match)\ndef count_senses(text):\n    '''\n    Write a function that takes a string and returns the number of words in the string that\n    are a few of the senses.\n    '''\n    regex = '([^0-9])([A-Z])'\n    match = re.findall(regex, text)\n    return len(match)\ndef count_verbs(text):\n    '''\n    Write a function that takes a string and returns the number of words in the string that are\n    verbs.\n    '''\n    regex = '([^0-9])([A-Z])'\n    match = re.findall(regex, text)\n    return len(match)\ndef count_adverbs(text):\n    '''\n    Write a function that takes a string and returns the number of words in the string that are\n    adverbs.\n    '''\n    regex = '([^0-9])([A-Z])'\n    match = re.findall(regex, text)\n    return len(match)\ndef count_noun_and_adj(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are noun\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])'\n    match = re.findall(regex, text)\n    return match\ndef count_adjective_and_noun(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and noun ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_noun(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and noun ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_adjective(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_adjective_and_noun(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_adjective_and_noun_and_senses(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_adjective_and_noun_and_verbs(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.findall(regex, text)\n    return match\ndef count_noun_and_adjective_and_noun_and_adj(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are noun\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.findall(regex, text)\n    return match\ndef count_adjective_and_noun_and_adj(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_adjective_and_noun_and_adj(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_adjective_and_noun_and_adj_and_senses(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.findall(regex, text)\n    return match\ndef count_adj_and_adjective_and_noun_and_adj_and_verbs(text):\n    '''\n    Write a function that takes a string and returns a list of the words in the string that are adjective\n    and adjective ending with ly and its positions in a given string.\n    '''\n    regex = '([A-Z])([-])([A-Z])[^A-Z]*'\n    match = re.fin"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"\\bly\\b\"\n    output = []\n    for i, match in enumerate(re.finditer(regex, text)):\n        if match.end() == len(text) - 2:\n            output.append(match)\n    return output\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    result_index = []\n    regex = r\"((adverbly)|ly)\"\n    new_string = re.sub(regex, \"\", text)\n    result = new_string.split(\"ly\")\n    print(result)\n    for index, element in enumerate(result):\n        if element[-1] == \"ly\":\n            result_index.append(index)\n    print(\"result index\", result_index)\n    print(result_index)\n    print(type(result_index))\n    adverbs = []\n    for i in result_index:\n        adverbs.append(result[i][-1])\n    print(adverbs)\n    adverbs = list(set(adverbs))\n    adverbs.sort()\n    print(adverbs)\n    print(len(adverbs))\n    index = 0\n    while index < len(adverbs):\n        if adverbs[index] == \"ly\":\n            print(adverbs[index])\n            print(text[index:])\n            return text[index:]\n        index = index + 1\n    return \"\"\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = re.sub('ly$','ly',text)\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] in 'AEIOUaeiou':\n            adverbs.append(text[i:i+1])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #import sys\n    #sys.path.append('C:/Users/user/Documents/Python_Projects/')\n    from file_handling import open_file, save_file\n    adverb_list=[]\n    text=text.lower()\n    for i in range(len(text)-1):\n        if text[i]=='ly':\n            adverb_list.append('ly')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='some':\n            adverb_list.append('some')\n        if text[i]=='as':\n            adverb_list.append('as')\n        if text[i]=='with':\n            adverb_list.append('with')\n        if text[i]=='but':\n            adverb_list.append('but')\n        if text[i]=='each':\n            adverb_list.append('each')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='all':\n            adverb_list.append('all')\n        if text[i]=='a':\n            adverb_list.append('a')\n        if text[i]=='about':\n            adverb_list.append('about')\n        if text[i]=='an':\n            adverb_list.append('an')\n        if text[i]=='the':\n            adverb_list.append('the')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='an':\n            adverb_list.append('an')\n        if text[i]=='there':\n            adverb_list.append('there')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='as':\n            adverb_list.append('as')\n        if text[i]=='to':\n            adverb_list.append('to')\n        if text[i]=='here':\n            adverb_list.append('here')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='the':\n            adverb_list.append('the')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='as':\n            adverb_list.append('as')\n        if text[i]=='through':\n            adverb_list.append('through')\n        if text[i]=='but':\n            adverb_list.append('but')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='as':\n            adverb_list.append('as')\n        if text[i]=='through':\n            adverb_list.append('through')\n        if text[i]=='but':\n            adverb_list.append('but')\n        if text[i]=='each':\n            adverb_list.append('each')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='all':\n            adverb_list.append('all')\n        if text[i]=='as':\n            adverb_list.append('as')\n        if text[i]=='at':\n            adverb_list.append('at')\n        if text[i]=='the':\n            adverb_list.append('the')\n        if text[i]=='a':\n            adverb_list.append('a')\n        if text[i]=='about':\n            adverb_list.append('about')\n        if text[i]=='an':\n            adverb_list.append('an')\n        if text[i]=='there':\n            adverb_list.append('there')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='an':\n            adverb_list.append('an')\n        if text[i]=='there':\n            adverb_list.append('there')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='the':\n            adverb_list.append('the')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='as':\n            adverb_list.append('as')\n        if text[i]=='through':\n            adverb_list.append('through')\n        if text[i]=='but':\n            adverb_list.append('but')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='a':\n            adverb_list.append('a')\n        if text[i]=='about':\n            adverb_list.append('about')\n        if text[i]=='an':\n            adverb_list.append('an')\n        if text[i]=='there':\n            adverb_list.append('there')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='an':\n            adverb_list.append('an')\n        if text[i]=='there':\n            adverb_list.append('there')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='the':\n            adverb_list.append('the')\n        if text[i]=='and':\n            adverb_list.append('and')\n        if text[i]=='as':\n            adverb_list.append('as')\n        if text[i]=='through':\n            adverb_list.append('through')\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['im', 'are', 'am', 'are', 'was', 'were', 'was', 'was', 'was', 'was', 'was', 'were']\n    found = 0\n    for i in adverbs:\n        if i in text:\n            found = 1\n    if found == 0:\n        adverb = []\n        adverb.append(text[text.index(i):text.index(i)+len(i)])\n        adverb.append(i)\n        adverb.append(i)\n        adverb = adverb[:-1]\n        adverb = adverb[:len(adverb)-1]\n        adverb = adverb.replace(\"'\", \"\")\n        adverb = adverb.replace(\"'\", \"\")\n        adverb = adverb.replace(\"'\", \"\")\n        return adverb\n    else:\n        return 0\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    p = re.compile(\"([lL]y|([lL]l)|([lL]|[lL])y|y|y[L])\")\n    result = re.findall(p,text)\n    return result\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_nouns(text):\n    '''\n    Write a function to find all verb noun ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverbs_and_nouns(text):\n    '''\n    Write a function to find all adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_noun_adverbs(text):\n    '''\n    Write a function to find all noun adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_noun_adverbs(text):\n    '''\n    Write a function to find all verb noun adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverbs_and_nouns_and_verb_nouns(text):\n    '''\n    Write a function to find all adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_noun_adverbs_and_nouns_and_verb_adverbs(text):\n    '''\n    Write a function to find all noun adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_noun_adverbs_and_nouns_and_verb_adverbs(text):\n    '''\n    Write a function to find all verb noun adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_adverbs_and_nouns(text):\n    '''\n    Write a function to find all verb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverb_nouns(text):\n    '''\n    Write a function to find all adverb noun ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_adverbs_and_nouns(text):\n    '''\n    Write a function to find all verb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverb_adverbs(text):\n    '''\n    Write a function to find all adverb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_adverbs_and_nouns(text):\n    '''\n    Write a function to find all verb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_nouns(text):\n    '''\n    Write a function to find all noun ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_noun_adverbs(text):\n    '''\n    Write a function to find all noun adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_adverbs(text):\n    '''\n    Write a function to find all verb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverbs_and_nouns(text):\n    '''\n    Write a function to find all adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_adverbs_and_nouns(text):\n    '''\n    Write a function to find all verb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverb_nouns(text):\n    '''\n    Write a function to find all adverb noun ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_verb_adverbs(text):\n    '''\n    Write a function to find all verb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverb_adverbs(text):\n    '''\n    Write a function to find all adverb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverb_adverbs(text):\n    '''\n    Write a function to find all adverb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z]\")\n    result = re.findall(p,text)\n    return result\ndef find_adverb_adverbs_and_nouns(text):\n    '''\n    Write a function to find all adverb adverbs ending with a letter in a given string.\n    '''\n    p = re.compile(\"([a-zA-Z])[a-zA-Z"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only adverbs ending with ly\n    # and their positions\n    result = []\n    for word in words:\n        if 'ly' in word:\n            result.append(word[3:])\n    return result\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with cat and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only nouns ending with cat\n    # and their positions\n    result = []\n    for word in words:\n        if 'cat' in word:\n            result.append(word[3:])\n    return result\ndef find_verbs(text):\n    '''\n    Write a function to find the first verb ending with is, the last letter of the word \"is\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only verbs ending with is\n    # and their positions\n    result = []\n    for word in words:\n        if 'is' in word:\n            result.append(word[3:])\n    return result\ndef find_prepositions(text):\n    '''\n    Write a function to find the first verb ending with in, the first letter of the word \"in\".\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only prepositions ending with in\n    # and their positions\n    result = []\n    for word in words:\n        if 'in' in word:\n            result.append(word[3:])\n    return result\ndef find_clauses(text):\n    '''\n    Write a function to find the clauses in the given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only clauses ending with clums\n    # and their positions\n    result = []\n    for word in words:\n        if '(' in word:\n            result.append(word[3:])\n    return result\ndef find_adj_clauses(text):\n    '''\n    Write a function to find the clauses in the given string, but only those ending with adj. clauses.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only clauses ending with adj. clauses\n    result = []\n    for word in words:\n        if '(' in word:\n            result.append(word[3:])\n    return result\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with gop, and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only adjectives ending with gop\n    # and their positions\n    result = []\n    for word in words:\n        if 'gop' in word:\n            result.append(word[3:])\n    return result\ndef find_nouns_prepositions(text):\n    '''\n    Write a function to find the first noun ending with gop, the first letter of the word \"gop\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only nouns ending with gop\n    # and their positions\n    result = []\n    for word in words:\n        if 'gop' in word:\n            result.append(word[3:])\n    return result\ndef find_clauses_prepositions(text):\n    '''\n    Write a function to find the first verb ending with go, the first letter of the word \"go\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only clauses ending with go\n    # and their positions\n    result = []\n    for word in words:\n        if 'go' in word:\n            result.append(word[3:])\n    return result\ndef find_clauses_adj(text):\n    '''\n    Write a function to find the first verb ending with go, the first letter of the word \"go\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only clauses ending with go\n    # and their positions\n    result = []\n    for word in words:\n        if 'go' in word:\n            result.append(word[3:])\n    return result\ndef find_prepositions_adj(text):\n    '''\n    Write a function to find the first verb ending with go, the first letter of the word \"go\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only prepositions ending with go\n    # and their positions\n    result = []\n    for word in words:\n        if 'go' in word:\n            result.append(word[3:])\n    return result\ndef find_prepositions_clauses(text):\n    '''\n    Write a function to find the first verb ending with go, the first letter of the word \"go\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only prepositions ending with go\n    # and their positions\n    result = []\n    for word in words:\n        if 'go' in word:\n            result.append(word[3:])\n    return result\ndef find_clauses_prepositions_adj(text):\n    '''\n    Write a function to find the first verb ending with go, the first letter of the word \"go\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only clauses ending with go\n    # and their positions\n    result = []\n    for word in words:\n        if 'go' in word:\n            result.append(word[3:])\n    return result\ndef find_adjectives_adj(text):\n    '''\n    Write a function to find the first adjective ending with d, the first letter of the word \"d\",\n    and its positions in a given string.\n    '''\n    # get rid of words like \"will\" or \"will've\"\n    words = re.findall(r'[a-zA-Z]+\\(.+\\)', text.lower())\n    # return only adjectives ending with d\n    # and their positions\n    result = []\n    for word in words:\n        if 'd' in word:\n            result.append(word[3:])\n    return result\ndef find_adverbs_adj(text):\n    '''\n    Write a function to find the first a"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    hq = []\n    for i in items:\n        if items[i][0] == 1:\n            heapq.heappush(hq, -items[i][1])\n        else:\n            heapq.heappush(hq, -items[i][1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    m=[]\n    while len(m)<n:\n        if items[0]<heapq.heappop(items):\n            return [heapq.heappop(items)]\n    return [heapq.heappop(items)]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heappush(heap, [0, items[0]])\n    for i in range(1, n):\n        if items[i][1] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, [items[i][1], items[i]])\n    return [i for i in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import math\n    #function to calculate the median of a list\n    def median(items):\n        if len(items) % 2!= 0:\n            return items[math.ceil(len(items)/2)]\n        else:\n            return (sorted(items)[len(items)//2])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)<n:\n        print('Not enough items.')\n        return None\n    items.sort(key=lambda x: x[1],reverse=True)\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,(items[i][1],items[i][0]))\n    for i in range(n,len(items)):\n        print(heapq.heappop(heap)[1],heapq.heappop(heap)[0])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    '''\n    HINT: Remember that a list is un-modified in place and does not return a new list object.\n    '''\n    result_list=[]\n    for item in items:\n        result_list.append(item[1])\n    heapq.heapify(result_list)\n    heapq.nlargest(n,result_list)\n    return result_list\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for item in items:\n        heapq.heappush(h,item[2])\n    for i in range(n):\n        heapq.heappop(h)\n        heapq.heappush(h,item[2])\n    ans = []\n    while h:\n        item = heapq.heappop(h)\n        ans.append(item[0])\n    return ans\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #  [ (count,item) ]\n    h = [ (0,1) ]\n    while h:\n        item, count = heapq.heappop(h)\n        if count == n:\n            return item\n        else:\n            for item in items:\n                if item[1] < count*item[0]:\n                    count += 1\n                    heapq.heappush(h,(count,item))\n    return None\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,items[i][1])\n    \n    h2 = []\n    for i in range(n-1):\n        heapq.heappush(h2,items[i+1][1])\n    \n    count = 0\n    while(count<n):\n        if(h[0]>h2[0]):\n            heapq.heappop(h)\n            heapq.heappop(h2)\n            count+=1\n        else:\n            heapq.heappop(h2)\n            heapq.heappop(h)\n            count+=1\n    return h\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(len(l)-n+1)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return(l[:n]) + l[n:]\n    \ndef sum(l1, l2):\n    '''\n    Write a python function to get the sum of l1 and l2.\n    '''\n    return sum(l1) + sum(l2)\n    \n    \n    "
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list on nth element\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[x:x+n] for x in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    part = []\n    for i in range(n):\n        part.append(l[i])\n    part.append(l[n])\n    return part\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    c = l[n:n+n]\n    return c\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l\n    #print(arr)\n    for i in range(0, len(arr) - n, 1):\n        #print(arr[i])\n        arr[i:i + n] = arr[i:i + n].split(',')\n    arr = list(map(int, arr))\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple = tuple(listx)\n    return tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    def convert_to_tuple(listx):\n        '''\n        Write a function to convert a list to a tuple.\n        '''\n        def convert_to_tuple(listx):\n            '''\n            Write a function to convert a list to a tuple.\n            '''\n            tuplex = tuple(listx)\n            return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef dict_tuple(d):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    return tuple(d)\n    \ndef dict_list(d):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return list(d.values())\n    \ndef dict_set(d):\n    '''\n    Write a function to convert a dictionary to a set.\n    '''\n    return set(d.values())\n    \ndef dict_iterator(d):\n    '''\n    Write a function to iterate over a dictionary.\n    '''\n    return d.items()\n    \ndef dict_from_keys(d):\n    '''\n    Write a function to create a dictionary from a dictionary's keys.\n    '''\n    return dict(d.items())\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # if the list is empty\n    if not nums:\n        return None\n    # if list is empty\n    if not nums:\n        return None\n    # initialize variables\n    smallest = nums[0]\n    largest = nums[0]\n    # iterate over the list and find the smallest and largest\n    for num in nums:\n        # if num is smaller than smallest, assign num to smallest\n        if num < smallest:\n            smallest = num\n        # if num is larger than largest, assign num to largest\n        if num > largest:\n            largest = num\n    # return the value of smallest and largest\n    return smallest + largest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # define a function\n    def second_big(lst):\n        '''\n        if lst[i] > lst[i-1]:\n            return lst[i]\n        else:\n            return lst[i-1]\n        '''\n        \n        \n        # find the second largest\n        second_big = None\n        for i in range(len(lst)-1):\n            if lst[i] < lst[i+1]:\n                second_big = lst[i]\n                break\n        \n        # if there is a second biggest value, then return it\n        if second_big:\n            return second_big\n        \n    # if the list has one or two elements, then return it's value\n    if len(lst) == 1 or len(lst) == 2:\n        return lst[0]\n    \n    # find the second smallest element\n    second_smallest = None\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            second_smallest = lst[i]\n            break\n    \n    # if there is a second smallest value, then return it's value\n    if second_smallest:\n        return second_smallest\n    \n    # otherwise return the smallest value\n    return lst[0]\n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    l = nums[0]\n    smallest = nums[0]\n    largest = nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # finding the lowest and highest value of the list\n    low_num = min(nums)\n    high_num = max(nums)\n    # for every item in the list, if it's not an empty item, the smallest value is assigned to the index\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            if nums[i] < low_num:\n                low_num = nums[i]\n                low_index = i\n            if nums[i] > high_num:\n                high_num = nums[i]\n                high_index = i\n    # if the low_index is the first item in the list, the nums[low_index] should be assigned to its index\n    if low_index == 0:\n        nums[low_index] = low_num\n    # if the high_index is the first item in the list, the nums[high_index] should be assigned to its index\n    if high_index == 0:\n        nums[high_index] = high_num\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = nums[0]\n    max_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return max_num-min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 3:\n        return 0\n    if len(nums) == 3:\n        if nums[0] > nums[1] and nums[0] > nums[2]:\n            return nums[0] - nums[1]\n        if nums[1] > nums[2] and nums[1] > nums[0]:\n            return nums[1] - nums[2]\n        if nums[2] > nums[0] and nums[2] > nums[1]:\n            return nums[2] - nums[1]\n    if len(nums) == 4:\n        if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n            return nums[0] - nums[1]\n        if nums[1] > nums[2] and nums[1] > nums[3] and nums[1] > nums[0]:\n            return nums[1] - nums[2]\n        if nums[2] > nums[3] and nums[2] > nums[0] and nums[2] > nums[1]:\n            return nums[2] - nums[0]\n        if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n            return nums[0] - nums[1]\n        if nums[1] > nums[2] and nums[1] > nums[3] and nums[1] > nums[0]:\n            return nums[1] - nums[2]\n        if nums[2] > nums[3] and nums[2] > nums[0] and nums[2] > nums[1]:\n            return nums[2] - nums[0]\n        if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n            return nums[0] - nums[1]\n        if nums[1] > nums[2] and nums[1] > nums[3] and nums[1] > nums[0]:\n            return nums[1] - nums[2]\n        if nums[2] > nums[3] and nums[2] > nums[0] and nums[2] > nums[1]:\n            return nums[2] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # build a tuple\n    # use tuple to store the difference\n    # copy to the new tuple\n    # return the difference\n    big_diff = (min(nums), max(nums), nums.count(max(nums)))\n    print(big_diff)\n    return big_diff\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x**2 for x in range(a, b+1) if x**2 % int(x) == 0]\n    \ndef all_perfect_squares(a, b):\n    '''\n    Write a function that finds all the perfect squares between two given numbers.\n    '''\n    return perfect_squares(a, b)\n    \ndef divisible_by_four(a, b):\n    '''\n    Write a function to find divisible by four between two given numbers.\n    '''\n    return [x for x in all_perfect_squares(a, b) if x % 4 == 0]\n    \ndef prime(a, b):\n    '''\n    Write a function that returns the prime numbers up to and including\n    the given number n.\n    '''\n    return [x for x in all_perfect_squares(a, b) if x % 2!= 0]\n    \ndef prime_up_to(n):\n    '''\n    Write a function that returns the prime numbers up to and including\n    the number n.\n    '''\n    return [x for x in divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four(n, len(divisible_by_four("
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return(a)\n    if abs(a) == abs(b):\n        return(a)\n    if abs(a) > abs(b):\n        if a > b:\n            a,b = b,a\n        while a < b:\n            if a**2 + b**2 <= b**2:\n                b = b**2\n            else:\n                a = a**2\n        return(a,b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return []\n    if b == 1:\n        return [1]\n    if b % 2 == 0:\n        return [1] + perfect_squares(b // 2, a)\n    else:\n        return [1] + perfect_squares(a // 2, b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a = list(map(int, str(a)))\n    b = list(map(int, str(b)))\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i]!= b[i]:\n            break\n        i += 1\n    if i >= len(a):\n        return []\n    else:\n        return a[i:len(a)-i] + b[i:len(b)-i]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a, b = abs(a), abs(b)\n    if a == b:\n        return [a]\n    elif a < b:\n        x = a\n        a = b\n        b = x\n    else:\n        x = b\n        b = a\n        a = x\n    squares = []\n    while a % b!= 0:\n        if a % b == 0:\n            squares.append(a//b)\n        else:\n            squares.append(b//a)\n        a = b\n        b = a\n    squares.append(a//b)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_square(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x**2 + perfect_square(x - 1)\n    \n    if perfect_square(a) == perfect_square(b):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num_squares = 0\n    \n    for i in range(1, min(a, b) + 1):\n        if a * a + i * i == b * b:\n            num_squares += 1\n        elif a * a + i * i < b * b:\n            pass\n        elif a * a + i * i > b * b:\n            num_squares += 1\n    return num_squares\n    \n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    def perfect_squares_rec(n, m, primes, primes_count):\n        if primes_count >= m:\n            return 0\n        \n        elif n < primes[m]:\n            return perfect_squares_rec(n+1, m, primes, primes_count + 1)\n        \n        else:\n            for prime in primes[m:]:\n                if prime > n:\n                    break\n                if perfect_squares_rec(n, m-1, primes, primes_count + 1) == 0:\n                    return 0\n                \n                primes_count += 1\n                \n            return primes_count\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a < 0):\n        a = -1*a\n    if (b < 0):\n        b = -1*b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    elif a == 0:\n        return [b]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    n = abs(y) #absolute value of y\n    phi = cmath.phase(y) #radians of y\n    r = cmath.rect(x, y) #rectangular coordinates\n    angle = cmath.phase(phi) #radians of angle between two lines in the plane\n    return r.real, r.imag, angle.real, angle.imag\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Formula of the equation\n    r = math.sqrt((x**2)+(y**2))\n    theta = math.acos(x/r)*180/math.pi\n    phi = math.atan((y)/math.sin(theta))\n    #Convert values\n    return (r, theta, phi)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = math.sqrt(x**2 + y**2)\n    phi = math.atan(y/x)\n    x2 = R * math.cos(phi)\n    y2 = R * math.sin(phi)\n    return x2,y2\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = cmath.phase(x,y)\n    angle = cmath.phase(1j*angle)\n    rect_x = cmath.rect(1j*angle,0)\n    rect_y = cmath.rect(1j*angle,0)\n    return rect_x,rect_y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    from math import cos, sin\n    phi = cmath.phase(x, y)\n    r = cmath.rect(x,y)\n    return r.real, r.imag, phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt(x**2 + y**2)\n    t = 2 * math.asin(y/r)\n    b = r * math.cos(t)\n    return (int(b),int(r))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0:\n        if y<0:\n            return 0,0\n        else:\n            return x,y\n    else:\n        numerator=cmath.polar(x)\n        denominator=cmath.polar(y)\n        radians=cmath.phase(numerator,denominator)\n        return polar_rect_helper(x,y,radians)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    r = math.sqrt(x**2 + y**2)\n    phi = math.atan2(y, x)\n    theta = math.asin(math.sqrt(1 - y**2)/r)\n    return r, phi, theta\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x * math.pi/180.\n    y = y * math.pi/180.\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*(math.pi/180.0),y*(math.pi/180.0))\ndef polar_rect_str(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return '%f %f' %(x,y)\ndef polar_int_round(x,y):\n    '''\n    Write a function to convert polar coordinates to round coordinates.\n    '''\n    return (x-x*(math.pi/180.0),y-y*(math.pi/180.0))\ndef polar_int_round_str(x,y):\n    '''\n    Write a function to convert polar coordinates to round coordinates.\n    '''\n    return '%f %f' %(x-x*(math.pi/180.0),y-y*(math.pi/180.0))\ndef polar_float(x,y):\n    '''\n    Write a function to convert polar coordinates to float.\n    '''\n    return (x-x*(math.pi/180.0),y-y*(math.pi/180.0))\ndef polar_float_str(x,y):\n    '''\n    Write a function to convert polar coordinates to float.\n    '''\n    return '%f %f' %(x-x*(math.pi/180.0),y-y*(math.pi/180.0))\ndef polar_str(x,y):\n    '''\n    Write a function to convert polar coordinates to string.\n    '''\n    return '%f %f' %(x,y)\ndef polar_str_str(x,y):\n    '''\n    Write a function to convert polar coordinates to string.\n    '''\n    return '%f %f' %(x,y)\ndef polar_complex(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return complex(x,y)\ndef polar_complex_str(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return str(complex(x,y))\ndef polar_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to real numbers.\n    '''\n    return float(x)/y\ndef polar_rad_str(x,y):\n    '''\n    Write a function to convert polar coordinates to real numbers.\n    '''\n    return str(polar_rad(x,y))\ndef polar_real(x,y):\n    '''\n    Write a function to convert polar coordinates to real numbers.\n    '''\n    return complex(float(x),y)\ndef polar_real_str(x,y):\n    '''\n    Write a function to convert polar coordinates to real numbers.\n    '''\n    return str(polar_real(x,y))\ndef polar_imag(x,y):\n    '''\n    Write a function to convert polar coordinates to imaginary numbers.\n    '''\n    return complex(x,y)\ndef polar_imag_str(x,y):\n    '''\n    Write a function to convert polar coordinates to imaginary numbers.\n    '''\n    return str(polar_imag(x,y))\ndef polar_complex_str_int(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return str(complex(polar_complex(x,y),polar_int_round(x,y)))\ndef polar_complex_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return str(complex(polar_complex(x,y),polar_int_round_str(x,y)))\ndef polar_complex_str_str(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return str(complex(polar_complex(x,y),polar_float(x,y)))\ndef polar_float_str_int(x,y):\n    '''\n    Write a function to convert polar coordinates to float numbers.\n    '''\n    return str(float(polar_float(x,y)))\ndef polar_float_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to float numbers.\n    '''\n    return str(float(polar_float(x,y)))\ndef polar_str_str_int(x,y):\n    '''\n    Write a function to convert polar coordinates to string.\n    '''\n    return str(polar_str(x,y))\ndef polar_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to string.\n    '''\n    return str(polar_str_str(x,y))\ndef polar_str_complex(x,y):\n    '''\n    Write a function to convert polar coordinates to string.\n    '''\n    return str(polar_str_str(complex(x,y),complex(polar_float(x,y))))\ndef polar_str_complex_str(x,y):\n    '''\n    Write a function to convert polar coordinates to string.\n    '''\n    return str(polar_str_str(complex(x,y),complex(polar_float(x,y))))\ndef polar_float_str_str_int(x,y):\n    '''\n    Write a function to convert polar coordinates to float numbers.\n    '''\n    return str(polar_float_str(x,y))\ndef polar_float_str_str_int(x,y):\n    '''\n    Write a function to convert polar coordinates to float numbers.\n    '''\n    return str(polar_float_str(x,y))\ndef polar_complex_str_str_int(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return str(polar_str_str(complex(x,y),complex(polar_float(x,y))))\ndef polar_complex_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return str(polar_str_str(complex(x,y),complex(polar_float(x,y))))\ndef polar_complex_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to complex numbers.\n    '''\n    return str(polar_str_str(complex(x,y),complex(polar_float(x,y))))\ndef polar_float_str_str_str_int(x,y):\n    '''\n    Write a function to convert polar coordinates to float numbers.\n    '''\n    return str(polar_float_str(x,y))\ndef polar_float_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to float numbers.\n    '''\n    return str(polar_float_str(x,y))\ndef polar_float_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to float numbers.\n    '''\n    return str(polar_float_str(x,y))\ndef polar_real_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to real numbers.\n    '''\n    return str(polar_real_str(x,y))\ndef polar_real_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to real numbers.\n    '''\n    return str(polar_real_str(x,y))\ndef polar_real_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to real numbers.\n    '''\n    return str(polar_real_str(x,y))\ndef polar_imag_str_str_int_str(x,y):\n    '''\n    Write a function to convert polar coordinates to imaginary numbers.\n    '''\n    return str(polar_imag_str(x,y))\ndef polar_imag_str_str_int_str(x,y):\n    '''\n    Write a function to conver"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList = [1, 2, 3, 4, 5]\n    #newList[0] = 4\n    #print(newList)\n    newList.reverse()\n    print(newList)\n    print(\"The reversed list is now\")\n    print(newList)\n    \n    #newList = [1, 2, 3, 4, 5]\n    #newList.reverse()\n    #print(newList)\n    #print(\"The reversed list is now\")\n    #print(newList)\n    \n    \n    #newList = [1, 2, 3, 4, 5]\n    #newList.reverse()\n    #print(newList)\n    #print(\"The reversed list is now\")\n    #print(newList)\n    \n    \ndef recursive_binary_search(arr, target): \n    '''\n    Write a python function to find the index of the target number in the given list of numbers. \n    '''\n    \n    start, end = 0, len(arr) - 1\n    \n    while start <= end: \n        mid = (start + end) // 2\n        if arr[mid] == target: \n            return mid \n        elif arr[mid] > target: \n            end = mid - 1\n        else: \n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\ndef bubble_Sort(newList):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    for i in range(len(newList)):\n        for j in range(len(newList)-i-1):\n            if newList[j]>newList[j+1]:\n                newList[j],newList[j+1] = newList[j+1], newList[j]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList = list(newList) \n    print(\"Swapping first and last element of the list\")\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \n    \ndef mutate_list(new_list):\n    '''\n    Write a python function to mutate the list.\n    '''\n    \n    for index in range(len(new_list)):\n        value = random.randint(1, 100)\n        if value > 70:\n            new_list[index] = random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])\n        elif value > 5:\n            new_list[index] = random.choice(['1', '2', '3', '4', '5'])\n        else:\n            new_list[index] = random.choice(['0', '1', '2', '3', '4', '5'])\n    return new_list\n    \n    \n    \ndef quick_sort(new_list):\n    '''\n    Write a python function to sort the elements of the list.\n    '''\n    print(\"Sorting the list in quick-sorting\")\n    return quick_sort_list(new_list, 0, len(new_list) - 1)\n    \n    \ndef quick_sort_list(new_list, start, end):\n    '''\n    Write a python function to sort the elements of the list.\n    '''\n    if end - start < 1:\n        return new_list\n    \n    pivot = random.randint(start, end)\n    # swap\n    temp = new_list[start]\n    new_list[start] = new_list[pivot]\n    new_list[pivot] = temp\n    # divide\n    left, right = start, pivot + 1\n    while left < right:\n        while left < right and new_list[right] >= new_list[left]:\n            right -= 1\n        if new_list[left] <= new_list[right]:\n            temp = new_list[left]\n            new_list[left] = new_list[right]\n            new_list[right] = temp\n            left += 1\n            right -= 1\n        while new_list[left] >= new_list[right]:\n            left += 1\n        if new_list[left] >= new_list[pivot]:\n            temp = new_list[left]\n            new_list[left] = new_list[right]\n            new_list[right] = temp\n    new_list[start], new_list[right] = new_list[right], new_list[start]\n    \n    # conquer\n    left, right = start, end\n    while left < right:\n        while left < right and new_list[left] <= new_list[right]:\n            left += 1\n        while new_list[left] > new_list[right]:\n            right -= 1\n        if new_list[left] >= new_list[right]:\n            temp = new_list[left]\n            new_list[left] = new_list[right]\n            new_list[right] = temp\n            left += 1\n            right -= 1\n    if left < right:\n        new_list[start], new_list[right] = new_list[right], new_list[start]\n        print(\"Left-right-coupled\")\n        quick_sort_list(new_list, start, right)\n        quick_sort_list(new_list, left, end)\n    return new_list\n    \n    \ndef merge_sort(new_list):\n    '''\n    Write a python function to sort the elements of the list.\n    '''\n    print(\"Sorting the list in merge-sorting\")\n    return merge_sort_list(new_list, 0, len(new_list) - 1)\n    \n    \ndef merge_sort_list(new_list, start, end):\n    '''\n    Write a python function to sort the elements of the list.\n    '''\n    if end - start < 1:\n        return new_list\n    # sort left\n    if start < end:\n        pivot = random.randint(start, end)\n        temp = new_list[start]\n        new_list[start] = new_list[pivot]\n        new_list[pivot] = temp\n        # sort right\n        left, right = start + 1, end\n        while left < right:\n            while left < right and new_list[right] >= new_list[left]:\n                right -= 1\n            if new_list[left] <= new_list[right]:\n                temp = new_list[left]\n                new_list[left] = new_list[right]\n                new_list[right] = temp\n                left += 1\n                right -= 1\n            while new_list[left] >= new_list[right]:\n                left += 1\n            if new_list[left] >= new_list[pivot]:\n                temp = new_list[left]\n                new_list[left] = new_list[right]\n                new_list[right] = temp\n        new_list[start], new_list[right] = new_list[right], new_list[start]\n        # conquer\n        left, right = start + 1, end\n        while left < right:\n            while left < right and new_list[left] <= new_list[right]:\n                left += 1\n            while new_list[left] > new_list[right]:\n                right -= 1\n            if new_list[left] >= new_list[right]:\n                temp = new_list[left]\n                new_list[left] = new_list[right]\n                new_list[right] = temp\n                left += 1\n                right -= 1\n    if start < end:\n        new_list[start], new_list[end] = new_list[end], new_list[start]\n        print(\"Left-right-coupled\")\n        merge_sort_list(new_list, start + 1, end)\n        merge_sort_list(new_list, start + 1, end)\n    return new_list\n    \n    \n    \ndef quick_sort_helper(new_list, start, end):\n    '''\n    Write a python function to sort the elements of the list.\n    '''\n    if end - start < 1:\n        return new_list\n    if start < end:\n        pivot = random.randint(start, end)\n        print(\"Swapping left-right\")\n        temp = quick_sort_helper(new_list, start, pivot)\n        quick_sort_helper(new_list, pivot + 1, end)\n        quick_sort_helper(new_list, start, end)\n    return new_list\n    \n    \ndef quick_sort_helper2(new_list):\n    '''\n    Write a python function to sort the elements of the list.\n    '''\n    if len(new_list) <= 1:\n        return new_list\n    pivot = random.randint(0, len(new_list) - 1)\n    print(\"Swapping with pivot\")\n    temp = new_list[pivot]\n    new_list[pivot] = new_list[len(new_list) - 1]\n    new_list[len(new_list) - 1] = temp\n    # partition\n    left, right = 0, len(new_list) - 1\n    while left < right:\n        while left < right and new_list[right] >= new_list[left]:\n            right -= 1\n        if new_list[left] <= new_list[right]:\n            temp = new_list[left]\n            new_list[left] = new_list[right]\n            new_list[right] = temp\n            left += 1\n            right -= 1\n        while new_list[left] >= new_list[right]:\n            left += 1\n        if new_list[left] >= new_list[pivot]:\n            temp = new_list[left]\n            new_list[left] = new_list[right]\n            new_list[right] = temp\n    ne"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    lst = newList\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # swap the first and last elements\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = []\n    for i in range(len(newList)):\n        new_list.append(newList[i][1])\n        new_list.append(newList[i][0])\n    return new_list "
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code goes here\n    \n    newList.reverse()\n    newList.append(newList.pop(0))\n    newList.append(newList.pop())\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[1]\n    newList[1] = temp\n"
    }
]