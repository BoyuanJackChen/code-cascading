[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #declare empty lists\n    shared_elements = []\n    numerical_elements = []\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #find common elements\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #Hint: you may find 'in' is useful here.\n    \n    #Your code here\n    if len(test_tup1) == len(test_tup2):\n        return sorted(test_tup1)\n    else:\n        return None\n    \n    #Use the index operator to get the index of the first element of the first list in the second list\n    #Hint: you may find the built-in function'sorted' is useful here.\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #Pass in two lists\n    lst1 = [1,2,3,4,5,6,7,8]\n    lst2 = [5,4,6,7,8,9,1,2,3]\n    #Find the elements in the two lists\n    shared_elements = set(lst1).intersection(lst2)\n    print(\"\\n\\nSorted list for the shared elements:\")\n    print(sorted(shared_elements))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = list(set(test_tup1) & set(test_tup2))\n    print(l1)\n    return l1\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1 or n==2:\n        return True\n    elif n<2:\n        return False\n    else:\n        if n%2==0:\n            return False\n        else:\n            for i in range(3,int(math.sqrt(n)+1),2):\n                if n%i==0:\n                    return False\n            return True\ndef check_prime(n):\n    '''\n    Write a python function to check a number is prime or not.\n    '''\n    if is_not_prime(n):\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return False\n        return True\ndef f(n):\n    '''\n    Write a python function to calculate the factorial.\n    '''\n    return math.factorial(n)\ndef lcm(a,b):\n    '''\n    Write a python function to calculate the LCM.\n    '''\n    return (a*b)//math.gcd(a,b)\ndef is_prime(n):\n    '''\n    Write a python function to check a number is prime or not.\n    '''\n    if n==1 or n==2:\n        return True\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_rec(n):\n    '''\n    This function is called to perform recursion, \n    to check for prime number.\n    '''\n    if n==1:\n        return False\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return False\n        return True\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor.\n    '''\n    while b:\n        a,b=b,a%b\n    return a\ndef is_perfect_square(n):\n    '''\n    Write a python function to check a number is perfect or not.\n    '''\n    if n==1 or n==2:\n        return True\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return False\n        return True\ndef is_sum_of_prime(n):\n    '''\n    This function is called to perform sum of all prime numbers.\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return True\n    elif n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return False\n        return True\ndef sum_of_all_primes(n):\n    '''\n    This function is called to perform sum of all prime numbers.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_prime_factor(n):\n    '''\n    This function is called to calculate the prime factor of a number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_sum_of_all_primes(n):\n    '''\n    This function is called to calculate the sum of all prime numbers.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_primes(n):\n    '''\n    This function is called to calculate all prime numbers.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef is_prime_factors(n):\n    '''\n    This function is called to calculate prime factors of a number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_factor_sum_of_all_primes(n):\n    '''\n    This function is called to calculate the sum of all prime factors of a number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_sum_of_all_prime_factors(n):\n    '''\n    This function is called to calculate the sum of all prime factors of a number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_sum_of_primes(n):\n    '''\n    This function is called to calculate the sum of all prime numbers.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_prime_factors_sum_of_all_primes(n):\n    '''\n    This function is called to calculate the sum of all prime factors of a number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n<2:\n        return 0\n    elif n%2==0:\n        return 0\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return 0\n        return i\ndef get_prime_factors_sum_of_all_prime_factors(n):\n    '''\n    This function is called to calculate the sum of all prime factors of a number.\n    '''\n    if n==1:\n        return 1\n    elif n="
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Your code here\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to detect if a number is prime or not.\n    '''\n    if n == 1 or n == 0:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\ndef is_primes(n):\n    '''\n    Write a python function to detect if a number is prime or not.\n    '''\n    return is_prime(n)\ndef find_prime(number):\n    '''\n    Write a python function to find the first prime number less than or equal to the given number.\n    '''\n    for x in range(2, number):\n        if is_prime(x) == True:\n            return x\n    return -1\ndef is_proper(n):\n    '''\n    Write a python function to determine whether the number n is a proper number or not.\n    '''\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    for x in range(3, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\ndef check_not_proper(n):\n    '''\n    Write a python function to check whether the number n is a proper number or not.\n    '''\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    for x in range(3, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\ndef get_prime(n):\n    '''\n    Write a python function to get the first prime number less than or equal to the given number.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_naive(n):\n    '''\n    This function is a naive implementation of the is_prime function, which is a very simple implementation.\n    It's probably not a good implementation, but it does the right thing.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_prime_test(n):\n    '''\n    Write a python function to test whether a number is prime or not.\n    '''\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    for x in range(3, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i**2 <= n:\n        if n % i == 0:\n            return False\n        i += 2\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    elif n == 3:\n        return True\n    elif n < 2 or n == 2:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        if(len(heap)==0):\n            heapq.heappush(heap,[i])\n        else:\n            if(heap[0][0]>i):\n                heapq.heapreplace(heap, [i])\n            elif(heap[0][0]==i):\n                heapq.heappop(heap)\n    return(heap)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        if(len(heap)==0):\n            heapq.heappush(heap,[i])\n        else:\n            if(heap[0][0]<i):\n                heapq.heappop(heap)\n            elif(heap[0][0]==i):\n                heapq.heappop(heap)\n    return(heap)\ndef heap_sort(nums,n):\n    '''\n    Write a function to return a modified version of the list of numbers sorted in ascending order.\n    '''\n    i=0\n    list=[]\n    while(i<n):\n        list.append(nums[i])\n        heap_queue_smallest(nums,len(nums))\n        i=i+1\n    return(list)\ndef heap_insert(nums,n):\n    '''\n    Write a function to insert a number in a given list of numbers, and also return the modified list.\n    '''\n    i=0\n    while(n<len(nums)):\n        if(n%2==0):\n            nums[i]=nums[i]+1\n            heap_queue_smallest(nums,len(nums))\n            nums[i]=nums[i-1]\n        else:\n            nums[i]=nums[i]+1\n            heap_queue_largest(nums,len(nums))\n            nums[i]=nums[i-1]\n        i=i+1\n    return(nums)\ndef heap_pop(nums,n):\n    '''\n    Write a function to remove and return the n smallest elements from the given list of numbers, sorted in descending order.\n    '''\n    i=0\n    while(len(nums)>0):\n        if(len(nums)==0):\n            return(nums)\n        if(nums[i]<nums[0]):\n            heap_queue_smallest(nums,len(nums))\n            nums[i]=nums[0]\n            heap_queue_largest(nums,len(nums))\n        heap_queue_smallest(nums,len(nums))\n        nums[i]=(nums[0]+(nums[len(nums)-1]))\n        heap_queue_largest(nums,len(nums))\n        nums[i]=nums[0]\n        i=i+1\n    return(nums)\ndef heap_insert_with_pos(nums,n):\n    '''\n    Write a function to insert a number in a given list of numbers, and also return the modified list.\n    '''\n    i=0\n    while(n<len(nums)):\n        nums[i]=nums[i]+1\n        heap_queue_smallest(nums,len(nums))\n        nums[i]=nums[i-1]\n        i=i+1\n    return(nums)\ndef heap_pop_with_pos(nums,n):\n    '''\n    Write a function to remove and return the n largest elements from the given list of numbers, sorted in ascending order.\n    '''\n    i=0\n    while(len(nums)>0):\n        if(len(nums)==0):\n            return(nums)\n        if(nums[i]<nums[0]):\n            heap_queue_smallest(nums,len(nums))\n            nums[i]=nums[0]\n            heap_queue_smallest(nums,len(nums))\n        heap_queue_smallest(nums,len(nums))\n        nums[i]=(nums[0]+(nums[len(nums)-1]))\n        heap_queue_smallest(nums,len(nums))\n        nums[i]=nums[0]\n        i=i+1\n    return(nums)\ndef heap_remove(nums,n):\n    '''\n    Write a function to remove and return the n smallest elements from the given list of numbers, sorted in ascending order.\n    '''\n    i=0\n    while(len(nums)>0):\n        if(len(nums)==0):\n            return(nums)\n        if(nums[i]<nums[0]):\n            heap_queue_smallest(nums,len(nums))\n            nums[i]=nums[0]\n            heap_queue_smallest(nums,len(nums))\n        else:\n            heap_queue_smallest(nums,len(nums))\n            nums[i]=(nums[0]+(nums[len(nums)-1]))\n            heap_queue_smallest(nums,len(nums))\n        heap_queue_smallest(nums,len(nums))\n        nums[i]=(nums[0]+(nums[len(nums)-1]))\n        i=i+1\n    return(nums)\ndef heap_sort_with_pos(nums,n):\n    '''\n    Write a function to return a modified version of the list of numbers sorted in ascending order.\n    '''\n    i=0\n    list=[]\n    while(i<n):\n        list.append(nums[i])\n        heap_queue_smallest(nums,len(nums))\n        nums[i]=nums[i-1]\n        i=i+1\n    return(list)\ndef heap_sort_without_pos(nums,n):\n    '''\n    Write a function to return a modified version of the list of numbers sorted in ascending order.\n    '''\n    i=0\n    list=[]\n    while(i<n):\n        list.append(nums[i])\n        heap_sort(nums,len(nums))\n        nums[i]=nums[i-1]\n        i=i+1\n    return(list)\ndef heap_select(nums,n):\n    '''\n    Write a function to return a modified version of the list of numbers sorted in ascending order.\n    '''\n    i=0\n    list=[]\n    while(i<n):\n        if(len(nums)>0):\n            if(len(list)==0):\n                list.append(nums[i])\n            elif(nums[i]>list[len(list)-1]):\n                list.append(nums[i])\n            else:\n                list[len(list)-1]=(nums[i]+(nums[len(nums)-1]))\n                heap_queue_largest(nums,len(nums))\n                nums[i]=nums[len(nums)-1]\n                heap_queue_largest(nums,len(nums))\n        else:\n            return(nums)\n        i=i+1\n    return(list)\ndef heap_select_with_pos(nums,n):\n    '''\n    Write a function to return a modified version of the list of numbers sorted in ascending order.\n    '''\n    i=0\n    list=[]\n    while(i<n):\n        if(len(nums)>0):\n            if(len(list)==0):\n                list.append(nums[i])\n            elif(nums[i]>list[len(list)-1]):\n                list.append"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    for _ in range(n):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\n    return [j[1] for j in heap]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    for i in range(n-1):\n        heapq.heappush(heap,-hq.heappop(heap))\n    return -hq.heappop(heap) if len(heap) > n else -1\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    \n    \n    final_nums=[]\n    \n    while heap:\n        n=heq.heappop(heap)\n        final_nums.append(n)\n    \n    return final_nums[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==1:\n        return nums\n    else:\n        if len(nums)==0:\n            return []\n        else:\n            if nums[0]>nums[1]:\n                return heap_queue_largest(nums[1::],n-1) + [nums[0]]\n            else:\n                return heap_queue_largest(nums[::],n-1) + [nums[0]]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    hq.append(nums[0])\n    for i in range(1,len(nums)):\n        hq.append(nums[i])\n        if len(hq)>=n:\n            break\n    return sorted(hq)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < 2:\n        return [nums[0]]\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap,nums[i])\n    for i in range(len(nums)-1):\n        heapq.heappush(heap,-heapq.heappop(heap))\n    return [heapq.heappop(heap)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    heap_nums = []\n    for i in nums:\n        hq.heappush(q,i)\n    while q:\n        if len(q) > n:\n            x = hq.heappop(q)\n            heap_nums.append(x)\n        else:\n            x = hq.heappop(q)\n            heap_nums.append(x)\n    return heap_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n    heapq.heapify(hq)\n    for i in range(n-1, 0, -1):\n        heapq.heappop(hq)\n    return hq\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Your code here\n    # check if x = 0 and compare it to zero\n    if x == 0:\n        return True\n    else:\n        # if x > 0 and x % 2 == 0: # uncomment\n        #     return False\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x + 1\n    z = x - 1\n    if x > y:\n        return False\n    elif x == y:\n        return True\n    elif x < y:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x1 = str(x)\n    x2 = x1[::-1]\n    if (x1 == x2) : return True\n    else: return False\n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #write your code here\n    if x == 1 or x == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    temp = x & -x\n    return bool(temp)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def bin_search (x, l, r):\n        while (l <= r):\n            m = (l+r)//2\n            if x > x[m]:\n                l = m+1\n            else:\n                r = m\n        return l\n    i = 0\n    for i in range (0, len(x)):\n        if x[i]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    chars_long = []\n    for char in text:\n        if len(char) >= 4:\n            chars_long.append(char)\n    return chars_long\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    text = text.lower()\n    chars_short = []\n    for char in text:\n        if len(char) >= 2:\n            chars_short.append(char)\n    return chars_short\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=4]\n    return word_list\n    \ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters short in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)<=2]\n    return word_list\n    \ndef find_char_middle(text):\n    '''\n    Write a function to find all words which are at least 2 characters middle in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)<=2 and len(x)>=3]\n    return word_list\n    \ndef find_char_long_middle(text):\n    '''\n    Write a function to find all words which are at least 2 characters long, and also at least 3 characters middle in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=3]\n    return word_list\n    \ndef find_char_short_middle(text):\n    '''\n    Write a function to find all words which are at least 2 characters short, and also at least 3 characters middle in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)<=2 and len(x)>=3]\n    return word_list\n    \ndef find_char_long_long(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, and also at least 2 characters long in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=3 and len(x)<=3]\n    return word_list\n    \ndef find_char_middle_long(text):\n    '''\n    Write a function to find all words which are at least 2 characters middle, and also at least 3 characters long in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)<=3]\n    return word_list\n    \ndef find_char_short_long(text):\n    '''\n    Write a function to find all words which are at least 2 characters short, and also at least 3 characters long in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)<=2 and len(x)>=3]\n    return word_list\n    \ndef find_char_long_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters long, and also at least 3 characters short in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)<=3]\n    return word_list\n    \ndef find_char_long_long_middle(text):\n    '''\n    Write a function to find all words which are at least 2 characters long, and also at least 3 characters long, and also at least 2 characters middle in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=2 and len(x)>=2 and len(x)<=3]\n    return word_list\n    \ndef find_char_short_long_middle(text):\n    '''\n    Write a function to find all words which are at least 2 characters short, and also at least 3 characters long, and also at least 2 characters long, and also at least 3 characters middle in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=2 and len(x)>=2 and len(x)<=3]\n    return word_list\n    \ndef find_char_long_short_middle(text):\n    '''\n    Write a function to find all words which are at least 2 characters long, and also at least 3 characters short, and also at least 2 characters long, and also at least 3 characters short in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=2 and len(x)<=3 and len(x)<=2 and len(x)>=3]\n    return word_list\n    \ndef find_char_long_long_middle_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters long, and also at least 3 characters long, and also at least 2 characters long, and also at least 3 characters long in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=2 and len(x)>=2 and len(x)<=3 and len(x)<=3]\n    return word_list\n    \ndef find_char_short_long_middle_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters short, and also at least 3 characters long, and also at least 2 characters long, and also at least 3 characters long in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=2 and len(x)<=3 and len(x)>=3]\n    return word_list\n    \ndef find_char_long_long_middle_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters long, and also at least 3 characters long, and also at least 2 characters long, and also at least 3 characters long, and also at least 3 characters long in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=2 and len(x)<=3 and len(x)>=3 and len(x)<=3]\n    return word_list\n    \ndef find_char_short_long_middle_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters short, and also at least 3 characters long, and also at least 2 characters long, and also at least 3 characters long, and also at least 3 characters short in a string.\n    '''\n    \n    words = re.findall(r'[a-zA-Z]+',text)\n    word_list = [x for x in words if len(x)>=2 and len(x)>=2 and len(x)<=3 and len(x)>=3 and len(x)<=3]\n    return word_list\n    \ndef find_char_long_long_middle_long(text):\n    '''\n    Write a function to find all words which are at least 2 characters long, and also at least 3 characters long, and also at least 2 characters long, and also at least 3 characters long, an"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    r1=re.compile(\"[a-zA-Z0-9]+\")\n    r2=re.compile('[^0-9]')\n    \n    match=r1.findall(text)\n    return [m.group() for m in match if len(m)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.replace(\" \", \"\")\n    text = text.lower()\n    long_text = ''\n    for word in text:\n        long_word = len(word)\n        if long_word >= 4:\n            long_text += word\n    return long_text\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('[a-zA-Z]+')\n    long_words = []\n    text = pattern.findall(text)\n    for word in text:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    def is_long(s):\n        if len(s) < 4:\n            return 0\n        if len(s) == 4:\n            return 1\n        if len(s) == 5:\n            return 2\n        if len(s) == 6:\n            return 3\n        if len(s) == 7:\n            return 4\n    \n    for c in text:\n        if is_long(c):\n            print(c, end='')\n    print()\n    \ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    max_length = 0\n    for c in text:\n        if len(c) > max_length:\n            max_length = len(c)\n    print(max_length)\n    print()\n    \ndef find_repeated_word(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_1(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_2(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_3(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_4(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word.isalpha() and word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_5(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word.isalpha() and word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_6(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_7(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_8(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha() and word not in new_words:\n                new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_9(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_10(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word.isalpha() and word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_11(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha() and word not in new_words:\n                new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_12(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word.isalpha() and word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_13(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_14(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word.isalpha() and word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_15(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in new_words:\n            if word.isalpha():\n                if word not in new_words:\n                    new_words.append(word)\n    print(new_words)\n    print()\n    \ndef find_repeated_word_16(text):\n    '''\n    Write a function to find the repeated word in a string.\n    '''\n    words = text.split(\" \")\n    new_words = []\n    for word in words:\n        if word not in ne"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #raise NotImplementedError('find_char_long() not implemented yet')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(\"[a-zA-Z]+\\w+\")\n    return list(regex.findall(text))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) < 4:\n        return None\n    if len(set(text)) == 1:\n        return text\n    if text in \"\":\n        return None\n    else:\n        chars = [x for x in text if x in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n        for i in range(len(chars)-1):\n            if chars[i] == chars[i+1]:\n                chars[i] = None\n            else:\n                break\n        #print(chars)\n        return ''.join(chars)\ndef find_char_long_new(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) < 4:\n        return None\n    if text in \"\":\n        return None\n    if text in \"aeiou\":\n        return None\n    if text in \"1234567890\":\n        return None\n    if text in \"QWERTYUIOPASDFGHJKLZXCVBNM\":\n        return text\n    if text in \"zxcvbnm\":\n        return None\n    if text == \" \":\n        return None\n    if text in \"asdfghjklmnpqrstvwxz\":\n        return text\n    return None\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    if len(text) < 4:\n        return None\n    if text in \"\":\n        return None\n    if text in \"aeiou\":\n        return None\n    if text in \"1234567890\":\n        return None\n    if text in \"QWERTYUIOPASDFGHJKLZXCVBNM\":\n        return text\n    if text in \"zxcvbnm\":\n        return None\n    if text == \" \":\n        return None\n    if text in \"asdfghjklmnpqrstvwxz\":\n        return text\n    return None\ndef find_char_short_new(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    if len(text) < 4:\n        return None\n    if text in \"\":\n        return None\n    if text in \"aeiou\":\n        return None\n    if text in \"1234567890\":\n        return None\n    if text in \"QWERTYUIOPASDFGHJKLZXCVBNM\":\n        return text\n    if text in \"zxcvbnm\":\n        return None\n    if text == \" \":\n        return None\n    if text in \"asdfghjklmnpqrstvwxz\":\n        return text\n    return None\ndef find_char_long_new_new(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) < 4:\n        return None\n    if text in \"\":\n        return None\n    if text in \"aeiou\":\n        return None\n    if text in \"1234567890\":\n        return None\n    if text in \"QWERTYUIOPASDFGHJKLZXCVBNM\":\n        return text\n    if text in \"zxcvbnm\":\n        return None\n    if text == \" \":\n        return None\n    if text in \"asdfghjklmnpqrstvwxz\":\n        return text\n    return None\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_length = len(text)\n    for i in range(text_length):\n        if text[i] >= 'a' and text[i] <= 'z' and text[i]!='':\n            if text[i] == text[i-1] and text[i] == text[i+1] and text[i] == text[i+2] and text[i] == text[i+3]:\n                if text[i] == text[i+4] and text[i] == text[i+5] and text[i] == text[i+6] and text[i] == text[i+7]:\n                    return i\n    return -1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    def square_nums_with_list(nums, n):\n        '''\n        input nums as a list, n as an integer.\n        '''\n        if n == 1:\n            return list(map(lambda x: x**2, nums))\n        else:\n            return list(map(lambda x: x**n, nums))\n    return square_nums_with_list(nums, len(nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for item in nums:\n        squares.append(item**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n    \ndef count_values(nums):\n    '''\n    Write a function to return the number of times that a number appears in a list.\n    '''\n    return dict(Counter(nums))\n    \ndef get_biggest_three_nums(nums):\n    '''\n    Use a dictionary to return the value whose key is greater than the length of the list.\n    '''\n    dic = count_values(nums)\n    return max(dic, key=dic.get)\n    \ndef reverse_string(s):\n    '''\n    Write a function that takes in a string and returns that string reversed.\n    '''\n    if s.lower() == s[::-1].lower():\n        return s\n    else:\n        return s[::-1]\n    \ndef count_odd_even_characters(s):\n    '''\n    Write a function to return the number of occurrences of each character in a string.\n    '''\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    return char_count\n    \ndef lower_case_first_letters(s):\n    '''\n    Write a function to return the first letter of a string.\n    '''\n    return s[0]\n    \ndef remove_spaces(s):\n    '''\n    Write a function that takes a string and returns the same string with all the spaces removed.\n    '''\n    return''.join(s.split())\n    \ndef remove_punctuation(s):\n    '''\n    Write a function that takes a string and returns that string with all the punctuation removed.\n    '''\n    return''.join([c for c in s if not c in string.punctuation])\n    \ndef join_list_of_strings(s):\n    '''\n    Write a function that takes a list of strings and returns a single string.\n    '''\n    return ''.join(s)\n    \ndef count_words(s):\n    '''\n    Write a function that takes a list of words and returns a dictionary with the number of times each word appears.\n    '''\n    counts = {}\n    for word in s:\n        counts[word] = s.count(word)\n    return counts\n    \ndef count_unique_words(s):\n    '''\n    Write a function that takes a list of words and returns a dictionary with the number of times each word appears.\n    '''\n    counts = {}\n    for word in set(s):\n        counts[word] = s.count(word)\n    return counts\n    \ndef count_longest_word(s):\n    '''\n    Write a function that takes a list of words and returns the length of the longest word.\n    '''\n    max = 0\n    for word in s:\n        if len(word) > max:\n            max = len(word)\n    return max\n    \ndef count_word_occurrences(s):\n    '''\n    Write a function that takes a list of words and returns a dictionary with the number of occurrences of each word.\n    '''\n    counts = {}\n    for word in s:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n    \ndef levenshtein(s1, s2):\n    '''\n    Write a function that takes two strings s1, s2 and returns the number of edits (2 edits) required to convert s1 to s2.\n    '''\n    m = len(s1)\n    n = len(s2)\n    if m == 0:\n        return 0\n    if n == 0:\n        return 0\n    #m = len(s1)\n    #n = len(s2)\n    least_k = 1 + m + n\n    if s1 == s2:\n        return 0\n    if least_k < 0:\n        return 0\n    if s1[0]!= s2[0]:\n        least_k -= 1\n    \n    #s1 = s1.lower()\n    #s2 = s2.lower()\n    #s1 = s1.replace(' ','')\n    #s2 = s2.replace(' ','')\n    mapping = [0] * (least_k + 1)\n    #print(s1)\n    #print(s2)\n    for i in range(1, least_k + 1):\n        #print(i, mapping)\n        mapping[i] = max(mapping[i - 1], s1.count(s1[i - 1]), s2.count(s2[i - 1]))\n        #print(i, mapping[i], mapping[i - 1])\n    return mapping[-1]\n    \ndef rotate_list(l,d):\n    '''\n    Write a function that takes a list and a number and returns that list rotated by that number.\n    '''\n    if len(l) <= d:\n        return l\n    elif d == 1:\n        return l[::-1]\n    else:\n        return rotate_list(l[1:],d - 1) + [l[0]] + rotate_list(l[:1] + l[d - 2:],d - 1)\n    \ndef insert_at_end(l, x):\n    '''\n    Write a function that takes a list and an integer and returns that list with the number of elements after x inserted.\n    '''\n    if len(l) == 0:\n        return l\n    elif x == len(l):\n        l.append(x)\n        return l\n    elif l[-1] == x:\n        l.append(x)\n        return l\n    else:\n        return insert_at_end(l, x) + [x]\n    \ndef reverse_string(s):\n    '''\n    Write a function that takes a string and returns that string reversed.\n    '''\n    return reverse_string(s[::-1])\n    \ndef find_nth_position(l, x):\n    '''\n    Write a function that takes a list and an integer and returns the index of the number x in the list.\n    '''\n    if x == 0:\n        return 0\n    if x == len(l):\n        return -1\n    #l = list(l)\n    #l[x] = l[x] + l[x + 1]\n    #l[x - 1] = l[x]\n    #l[x] = l[x] - l[x + 1]\n    return (len(l) + find_nth_position(l,x - 1))\n    \ndef reverse_string2(s):\n    '''\n    Write a function that takes a string and returns that string reversed.\n    '''\n    return reverse_string(s[::-1])\n    \ndef find_greatest_common_divisor(nums):\n    '''\n    Write a function that returns the greatest common divisor of the numbers in the list.\n    '''\n    gcd = nums[0]\n    for num in nums:\n        if num % gcd!= 0:\n            gcd = num\n    return gcd\n    \ndef find_greatest_common_multiple(num1, num2):\n    '''\n    Write a function that returns the greatest common divisor of two numbers.\n    '''\n    gcd = num1 % num2\n    if gcd!= 0:\n        return gcd\n    else:\n        return num2\n    \ndef find_greatest_common_multiple_1(nums):\n    '''\n    Write a function that returns the greatest common divisor of two numbers in the list.\n    '''\n    gcd = nums[0]\n    for num in nums:\n        if num % gcd!= 0:\n            gcd = num\n    return gcd\n    \ndef find_greatest_common_multiple_2(nums):\n    '''\n    Write a function that returns the greatest common divisor of two numbers in the list.\n    '''\n    return max(nums)\n    \ndef intersection(num_1, num_2):\n    '''\n    Write a function that returns the intersection of two lists.\n    '''\n    #print(num_1,num_2)\n    return list(se"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**2)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(nums[i]*nums[i])\n    return lst\n    \n    \ndef factorial(n):\n    '''\n    Write a function to find the factorial of an integer.\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    def squares(nums):\n        for num in nums:\n            squares = num ** 2\n            return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i]*nums[i])\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Input: a string\n    # Output: minimum number of rotations required to get the same string\n    # Expected Output: {0}\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(str)\n    m=0\n    for i in range(len(str)-1):\n        if (str[i]==str[i+1]):\n            continue\n        else:\n            m+=1\n    # print(m)\n    return m\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) % 2 == 0:\n        for i in range(0,len(str),2):\n            if str[i] == str[i+1]:\n                rotations += 1\n            else:\n                rotations = 0\n        return rotations\n    elif len(str) % 2!= 0:\n        for i in range(0,len(str),2):\n            if str[i] == str[i+1]:\n                rotations += 1\n            else:\n                rotations = 0\n        return rotations\n    \ndef print_Rotations(rotations):\n    '''\n    Write a python function to print the minimum number of rotations required to get the same string.\n    '''\n    print(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #def binary_search(a, l, r, n):\n    rotations = 0\n    i = 0\n    n = len(str)\n    while (i < n):\n        j = i + 1\n        if (i < n - 1):\n            if (str[j] == str[i]):\n                j = j + 1\n            else:\n                if (str[j - 1] == str[i]):\n                    j = j - 1\n                else:\n                    rotations = rotations + 1\n                    if (j > i):\n                        j = j + 1\n                    else:\n                        j = j + 1\n        i = i + 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    ans = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    counter = {}\n    count = 0\n    for i in range(len(str)):\n        counter[str[i]] = counter.get(str[i],0) + 1\n        if counter[str[i]] > 1:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    i = 0 \n    n = len(str)\n    # Traverse the string \n    while (i < n): \n        # Check if the current character is greater than the current \n        # character. If so, increment the rotations \n        if(str[i] > str[i - 1]): \n            rotations += 1\n        # Otherwise, if not, just increment by 1 \n        else: \n            i += 1\n    # Return the minimum rotations \n    return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    ans = 0\n    for i in range(len(str)):\n        if (i+1) % 3!= 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # make dictionary to store the number of rotations\n    rotations = {}\n    for i in range(len(str)):\n        if (str[i] in rotations):\n            rotations[str[i]] = rotations[str[i]] + 1\n        else:\n            rotations[str[i]] = 1\n    \n    # print(rotations)\n    min_rotations = float('inf')\n    for key in rotations:\n        if rotations[key] < min_rotations:\n            min_rotations = rotations[key]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0: \n        return False\n    elif ch not in s: \n        return False\n    else: \n        return remove_Occ(s[1:],ch) or remove_Occ(s[:-1],ch)\n    \ns = \"abcb\"\nch = \"b\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if len(s)==0: return ''\n    # if len(s)==1: return ''\n    if len(s)==0: return s[:1]\n    if len(s)==1: return s[1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    l = len(s)\n    if l == 0:\n        return s\n    for i in range(l):\n        if s[i] == ch:\n            s = s[:i] + s[i+1:]\n            break\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    char_set = set(s)\n    char_set.remove(ch)\n    return ''.join(char_set)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0]==ch and s[-1]==ch:\n        return s[1:-1]\n    return \"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0: \n        return\n    elif s[0]==ch: \n        s.pop(0)\n        s.pop()\n    else: \n        return remove_Occ(s,ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # loop through string\n    for i in range(len(s)):\n        # if char is present in s\n        if ch == s[i]:\n            # if we have to remove the character\n            # then we can remove the character at the start\n            if i == 0 or i == len(s)-1:\n                s = s[:i] + s[i+1:]\n            # if we have to remove the char but not at the end\n            else:\n                s = s[:i] + s[i+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[:i] + s[i + 1:]\n        \n    return s\n    \ndef is_palindrome(string):\n    '''\n    Function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    else:\n        if string[0]!= string[-1]:\n            return False\n        else:\n            return is_palindrome(string[1:-1])\n        \ndef count_numbers(string):\n    '''\n    Function to count the number of occurences of each digits.\n    '''\n    digit_counts = dict()\n    string = list(string)\n    for i in string:\n        if i not in digit_counts:\n            digit_counts[i] = 0\n        digit_counts[i] += 1\n    return digit_counts\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Null(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]!=ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Spaces(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Times(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_punct(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Colon(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Duplicate(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==s[i]):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_E(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Vowel(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_adj(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_prep(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_s(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_space(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Number(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_At(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Dot(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i+1\n        else:\n            i=i+1\n            j=j-1\n    if(i<j):\n        return s[i:j+1]\n    else:\n        return -1\ndef remove_Reserved(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    j=len(s)\n    while (i<=j):\n        if(s[i]==ch):\n            i=i"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = []\n    for i in range(len(M)):\n        l.append(sum(M[i]))\n    return sorted(l)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 1\n    while i < len(M):\n        j = 1\n        while j < len(M):\n            if M[j][0] < M[i][0] + M[j][1]:\n                M[i][0], M[j][0] = M[j][0], M[i][0]\n                M[i][1], M[j][1] = M[j][1], M[i][1]\n            j += 1\n        i += 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code goes here\n    for row in range(M.shape[0]):\n        for col in range(row+1, M.shape[1]):\n            if M[row,col] == 0:\n                M[row,col] = -1\n            else:\n                M[row,col] = 0\n    for row in range(M.shape[0]):\n        M[row,row] = 1\n    for col in range(M.shape[1]):\n        M[col,col] = -1\n    for row in range(M.shape[0]-1, -1, -1):\n        for col in range(M.shape[1]-1, -1, -1):\n            if M[row,col] == 0:\n                M[row,col] = -1\n            else:\n                M[row,col] = 0\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # TODO: Complete the function\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s=0\n    for i in M:\n        s+=i\n    for i in range(s):\n        for j in range(s):\n            if j<i:\n                print(end=\" \")\n            else:\n                print(end=\" \")\n        print()\n        \ndef maxsum_matrix(M):\n    '''\n    Write a function to find the maximum sum of a given matrix.\n    '''\n    s=0\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            s+=M[i][j]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if j<i:\n                print(end=\" \")\n            else:\n                print(end=\" \")\n        print()\n    print(\"the maximum sum is \" + str(s))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Input:\n    # M: Matrix to be sorted, must be a list of lists\n    # Output:\n    # sorted_matrix: Matrix, with the sorted rows of M sorted in ascending order\n    # rows_sums: Sum of rows in the matrix, sorted according to their sum\n    # columns_sums: Sum of columns in the matrix, sorted according to their sum\n    # rows_sums_sorted: Sum of rows in the matrix, sorted according to their sum\n    # columns_sums_sorted: Sum of columns in the matrix, sorted according to their sum\n    # m: Size of the matrix\n    # E: Length of the rows of M\n    # f: Length of the columns of M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = []\n    for i in range(0, len(M)):\n        rows.append(sum(M[i]))\n    # print(rows)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # write your code here\n    return [[sum(row) for row in zip(*M)] for _ in M]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Write your code here.\n    M.append([])\n    for i in range(len(M[0])):\n        M.append([])\n        for j in range(len(M)):\n            M[i].append(sum(M[j]))\n    # print(M)\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = M[i][j] % 10\n    # print(M)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = []\n    for i in range(len(M)):\n        sums.append(sum(M[i]))\n    sums.sort()\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sums[j]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l==0 :\n        print(\"l=0, volume is: \",h)\n        return h\n    if b==0 :\n        print(\"b=0, volume is: \",h)\n        return h\n    if h==0 :\n        print(\"h=0, volume is: \",h)\n        return h\n    if h<0 :\n        print(\"Invalid input\",h)\n        return h\n    if h<b :\n        print(\"Invalid input\",h)\n        return h\n    if l<b :\n        print(\"Invalid input\",l)\n        return l\n    if h<=l :\n        return h*b\n    if b<=l :\n        return b*h\n    if l<=b :\n        return l*h\n    return (l+b)*h\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(l,b,h)\n    if ((l+b)>h) or ((l+b)<0) : return 0\n    if ((l<=0) or (b<=0) or (b>=h)) : return 0\n    return (b*b)/3.0\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #range of x-axis, the length of the x-axis\n    lengthx = b * (1 - 0.5 * (l - b))\n    #range of y-axis, the length of the y-axis\n    lengthy = b * (1 - 0.5 * (h - b))\n    #range of z-axis, the length of the z-axis\n    lengthz = b * (1 - 0.5 * (l - b))\n    #volume of the parallelogram\n    volume = lengthx * lengthy * lengthz\n    print('Volume of the Prism is : ',volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #width = l\n    #height = b\n    #depth = h\n    volume = 0\n    for i in range(l,h) : \n        for j in range(l,h) : \n            for k in range(l,h) : \n                if (i+j+k) == 3 :\n                    volume += h \n                    print(volume)\n                elif i+j+k == 4 : \n                    volume += b\n                    print(volume)\n    print(volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #write your code here\n    if l == b and b == h :\n        return 0\n    if l < b and b < h :\n        return abs(l-b) * abs(b-h) * b\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*h*b/3\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*h\n    return v\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b)*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #check if triangle\n    if (b**2)+(h**2)>l**2:\n        print('Triangular Prism Invalid Input')\n        return\n    #check if square\n    elif (b**2)<=l**2:\n        print('Triangular Prism Invalid Input')\n        return\n    #check if cube\n    elif (b**2)>l**2:\n        print('Triangular Prism Invalid Input')\n        return\n    #check if cube\n    elif (l**2)>b**2:\n        print('Triangular Prism Invalid Input')\n        return\n    volume=round(b**3*h**3,2)\n    print(volume)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not re.search(r'\\w', text):\n        return False\n    for i in range(len(text)):\n        if not re.search(r'\\w', text[i]):\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='_':\n        return True\n    for i in range(n-1):\n        if text[i]=='_' and text[i+1]=='_':\n            return True\n    return False\n    \ndef text_is_uppercase(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='_':\n        return True\n    for i in range(n-1):\n        if text[i]=='_' and text[i+1]=='_':\n            return True\n    return False\n    \ndef text_is_digit(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0':\n            return True\n    return False\n    \ndef text_is_punctuation(text):\n    '''\n    Write a function that returns true if the input string contains sequences of punctuation and false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]==' ':\n        return True\n    for i in range(n-1):\n        if text[i]==''and text[i+1]==' ':\n            return True\n    return False\n    \ndef text_is_digit_and_digit_or_zero(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and digits, false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0' or text[0]=='0' and text[1]=='_':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0' or text[i]=='0' and text[i+1]=='_':\n            return True\n    return False\n    \ndef text_is_digits(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0':\n            return True\n    return False\n    \ndef text_is_digit_and_digit_or_zero_and_digit_or_zero(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and digits, digits, and digits, false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0' and text[2]=='0':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0' and text[i+2]=='0':\n            return True\n    return False\n    \ndef text_is_digit_and_digit_or_zero_and_digit_or_zero_or_zero(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and digits, digits, and digits, digits, and digits, false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0' and text[2]=='0' and text[3]=='0':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0' and text[i+2]=='0' and text[i+3]=='0':\n            return True\n    return False\n    \ndef text_is_digit_and_digit_or_zero_and_digit_or_zero_or_zero_and_digit_or_zero(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and digits, digits, and digits, digits, and digits, digits, and digits, false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0' and text[2]=='0' and text[3]=='0' and text[4]=='0':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0' and text[i+2]=='0' and text[i+3]=='0' and text[i+4]=='0':\n            return True\n    return False\n    \ndef text_is_digit_and_digit_or_zero_and_digit_or_zero_or_zero_and_digit_or_zero(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and digits, digits, and digits, digits, and digits, digits, and digits, digits, and digits, false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0' and text[2]=='0' and text[3]=='0' and text[4]=='0' and text[5]=='0':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0' and text[i+2]=='0' and text[i+3]=='0' and text[i+4]=='0' and text[i+5]=='0':\n            return True\n    return False\n    \ndef text_is_digit_and_digit_or_zero_and_digit_or_zero_or_zero_and_digit_or_zero(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and digits, digits, and digits, digits, and digits, digits, and digits, digits, and digits, digits, and digits, false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0' and text[2]=='0' and text[3]=='0' and text[4]=='0' and text[5]=='0' and text[6]=='0':\n        return True\n    for i in range(n-1):\n        if text[i]=='0' and text[i+1]=='0' and text[i+2]=='0' and text[i+3]=='0' and text[i+4]=='0' and text[i+5]=='0' and text[i+6]=='0':\n            return True\n    return False\n    \ndef text_is_digit_and_digit_or_zero_and_digit_or_zero_or_zero_and_digit_or_zero(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits and digits, digits, and digits, digits, and digits, digits, and digits, digits, and digits, digits, and digits, false otherwise.\n    '''\n    n=len(text)\n    if n==0:\n        return True\n    if text[0]=='0' and text[1]=='0' and text[2]=='0' and text"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # The full expression that creates this variable is as below.\n    # $text_lowercase_underscore = \"abcdefghijklmnopqrstuvwxyz\"\n    # In a simple case, text_lowercase_underscore = \"aabbccddeeff\"\n    # The result will be False.\n    # The new variable will be the value of the last substring that contains the underscore.\n    # This value will be 'e', 'f', 'g' and 'h'.\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'i'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'l'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be'm'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'n'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'o'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'p'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'q'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'r'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be's'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 't'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'u'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'v'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'w'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'x'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'y'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'z'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'A'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'B'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'C'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'D'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'E'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'F'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'G'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'H'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'I'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'J'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'K'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'L'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'M'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'N'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'O'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'P'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'Q'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'R'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'S'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'T'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'U'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'V'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'W'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'X'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'Y'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be 'Z'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '1'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '2'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '3'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '4'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '5'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '6'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '7'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '8'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '9'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '10'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '11'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '12'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '13'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '14'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '15'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '16'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '17'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '18'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '19'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '20'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '21'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '22'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '23'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '24'\n    # The new variable will be the value of the last substring that contains the underscore and the new variable will be '25'\n    # The new variable will b"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(x.islower() and x.isupper() for x in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    n = len(text)\n    if n == 0:\n        return False\n    for i in range(n):\n        if not text[i].islower():\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[A-Z][a-z]*', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower() in (\"\"+ text.lower() + \"\".lower() for text in re.findall(r'[a-zA-Z0-9_]+', text_lowercase_underscore(text)))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(c in string.lower() for c in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Check if the input string is empty, because if it is empty then the function should return True\n    if not text:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for char in text:\n        if char.isalpha():\n            if char.lower() == char.lower() and char.isupper():\n                return False\n    return True\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_area = 4*a\n    return square_area\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a*a\n    print(f\"The perimeter of the square is {perimeter}\")\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return(4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s=a*a\n    return s\n    \n    # write your code here"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*a)\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    return (4*a*a)"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Perimeter = sqrt(2 * a * a)\n    return int(math.sqrt(2*a*a))\n    # return int(math.sqrt(a))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a<1:\n        print('Invalid square side length')\n        return \n    print(f'Perimeter of square of size {a} is {2*a}')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    def perimeter(n):\n        if n<2:\n            return n*4\n        else:\n            return (3*(n-1))+(2*n-1)\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*len(a)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(len(string)):\n        if string[i] not in l:\n            l.append(string[i])\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = []\n    for char in string:\n        if char in string:\n            list_str.append(char)\n    return list_str\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in string:\n            list.append(i)\n    return list\ndef list_to_str(list): \n    '''\n    Write a function to combine the characters of the first string and the characters of the second string into one string.\n    '''\n    string = ''\n    for i in range(len(list)):\n        string = string + list[i]\n    return string\ndef str_to_dict(string): \n    '''\n    Write a function to convert the string passed into the function from a string of one element to a dictionary.\n    '''\n    dict = {}\n    for i in string:\n        dict[i] = 0\n    return dict\ndef dict_to_str(dict): \n    '''\n    Write a function to convert the dictionary passed into the function from a string of one element to a string.\n    '''\n    string = ''\n    for i in dict:\n        string = string + str(i) + ':' + str(dict[i]) +''\n    return string\ndef mod_divide(modulo, divisor): \n    '''\n    Write a function to compute the remainder of the division of two numbers. \n    '''\n    result = 0\n    while divisor > 0: \n        remainder = divisor % modulo\n        if remainder == 0: \n            return modulo\n        else: \n            divisor = remainder\n            result = modulo\n    return result\ndef no_of_solutions_for_solution(text, index):\n    '''\n    Write a function to calculate the number of solutions for the given problem. \n    '''\n    count = 0\n    while index < len(text):\n        if text[index] == ')':\n            count = count + 1\n            index = index + 1\n        elif text[index] == '(':\n            index = index + 1\n        elif text[index] == ')':\n            index = index + 1\n        elif text[index] == ']':\n            index = index + 1\n        elif text[index] == '[':\n            index = index + 1\n        else:\n            index = index + 1\n    return count\ndef count_primes(n): \n    '''\n    Write a function to return the number of primes below n. \n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count = count + 1\n    return count\ndef is_prime(n): \n    '''\n    Write a function to check if a number n is prime. \n    '''\n    if n < 2: \n        return False\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6): \n        if n % i == 0: \n            return False\n    return True\ndef find_double_prime(n):\n    '''\n    Write a function to find the first 2n primes, which are not prime numbers. \n    '''\n    prime = 2\n    while prime * prime < n:\n        if is_prime(prime):\n            yield prime\n            prime += 2\n        else:\n            continue\ndef is_prime_cubic(n):\n    '''\n    Write a function to check if a number is prime. \n    '''\n    for i in range(2, n):\n        if is_prime(i):\n            return True\n    return False\ndef is_prime_cubic2(n):\n    '''\n    Write a function to check if a number is prime. \n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    l = []\n    for i in string:\n        if i not in l:\n            l.append(i)\n        if len(l)!= 0:\n            res.append(l)\n            l = []\n    if len(l)!= 0:\n        res.append(l)\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for i in range(len(string)):\n        if string[i] in string:\n            output.append(string[i])\n    return output\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if (string[i] ==''):\n            pass\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    cleaned_string = []\n    for char in string: \n        if char in string:\n            cleaned_string.append(char)\n    return ''.join(cleaned_string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a empty list to save the characters and their respective positions\n    result = []\n    \n    # Traverse through the string in reverse order and save the characters as keys in a dictionary\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] in result:\n            # If we find a duplicate, remove the duplicate and append it to the resulting list\n            result.remove(string[i])\n        else:\n            result.append(string[i])\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    length = len(string)\n    str_out = []\n    for i in range(length):\n        if string[i] in string:\n            str_out.append(string[i])\n    return str_out\n    #return \"\".join(str_out)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    sub_str = string[0:len(string)]\n    sub_str_list = []\n    for i in range(0, len(sub_str)):\n        if (sub_str[i] == string[i]):\n            continue\n        else:\n            sub_str_list.append(sub_str[i])\n    return sub_str_list\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    for i in range(len(array)):\n        if array.count(array[i]) > 1:\n            print('found a duplicate in the input array')\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print('\\nTest case 1: ', arraynums)\n    print('Find the number of duplicate elements: ', duplicate(arraynums))\n    print('\\nTest case 2: ', arraynums)\n    print('Find the number of duplicate elements: ', duplicate2(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = arraynums.copy()\n    def check(element, arraynums):\n        '''\n        For a given element, find whether it is a duplicate element\n        '''\n        arr = arraynums[:]\n        arr.remove(element)\n        for i in range(len(arr)):\n            if element == arr[i]:\n                return True\n        return False\n    for i in range(len(arraynums)):\n        if check(arraynums[i], arraynums) is True:\n            return 'The element'+ str(arraynums[i]) +'is duplicate'\n    return 'The element'+ str(arraynums[i]) +'is not duplicate'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array1 = arraynums\n    array2 = []\n    for i in range(len(arraynums)):\n        array2.append(arraynums[i])\n    for i in range(len(arraynums)):\n        if array2[i] in array1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Testing duplicate\")\n    for element in arraynums:\n        if element in arraynums:\n            print(f\"Element {element} is a duplicate.\")\n        else:\n            print(f\"Element {element} is not a duplicate.\")\n    return\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = arraynums[:]\n    print('Testing duplicate elements:', arraynums)\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums:\n            pass\n        else:\n            return 'FALSE'\n        print('duplicate element:', arraynums[i])\n    return 'TRUE'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return arraynums[0]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    arraynums = [int(x) for x in arraynums]\n    # print(arraynums)\n    # print(arraynums[0])\n    # print(arraynums[1])\n    # print(arraynums[2])\n    # print(arraynums[3])\n    # print(arraynums[4])\n    # print(arraynums[5])\n    # print(arraynums[6])\n    # print(arraynums[7])\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for element in arraynums:\n        arraynums.append(element)\n        arraynums.sort()\n        if arraynums.count(element) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    print(array)\n    print(array.index(7))\n    print(len(array))\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if (array[i] == array[j]):\n                return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #Hint: you can use the is operator to return a Boolean value\n    return True if x == 0 else False\n    "
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==4:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else: \n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Write your code here\n    return x % 2 == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x % 2 == 0 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 2) == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #Your code here\n    if x%10 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num * 2\n    while rev_num >= 1:\n        if rev_num % 2 == 0:\n            rev_num /= 2\n        else:\n            rev_num -= 1\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num=num%10\n    rev_num_int=rev_num-1\n    if rev_num==0:\n        rev_num_int=rev_num\n        if rev_num_int<0:\n            rev_num_int*=-1\n    if rev_num_int<0:\n        rev_num=rev_num_int*-1\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        return rev(num-2)\n    else:\n        return None\n    \ndef rev2(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev(num)\n    else:\n        return None\n    \ndef rev3(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev2(num)\n    else:\n        return None\n    \ndef rev4(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev3(num)\n    else:\n        return None\n    \ndef rev5(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev4(num)\n    else:\n        return None\n    \ndef rev6(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev5(num)\n    else:\n        return None\n    \ndef rev7(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev6(num)\n    else:\n        return None\n    \ndef rev8(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev7(num)\n    else:\n        return None\n    \ndef rev9(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev8(num)\n    else:\n        return None\n    \ndef rev10(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev9(num)\n    else:\n        return None\n    \ndef rev11(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev10(num)\n    else:\n        return None\n    \ndef rev12(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev11(num)\n    else:\n        return None\n    \n    \ndef rev13(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev12(num)\n    else:\n        return None\n    \ndef rev14(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev13(num)\n    else:\n        return None\n    \ndef rev15(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev14(num)\n    else:\n        return None\n    \ndef rev16(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev15(num)\n    else:\n        return None\n    \ndef rev17(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev16(num)\n    else:\n        return None\n    \ndef rev18(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev17(num)\n    else:\n        return None\n    \ndef rev19(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev18(num)\n    else:\n        return None\n    \ndef rev20(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev19(num)\n    else:\n        return None\n    \ndef rev21(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev20(num)\n    else:\n        return None\n    \ndef rev22(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev21(num)\n    else:\n        return None\n    \ndef rev23(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev22(num)\n    else:\n        return None\n    \ndef rev24(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev23(num)\n    else:\n        return None\n    \ndef rev25(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev24(num)\n    else:\n        return None\n    \ndef rev26(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev25(num)\n    else:\n        return None\n    \ndef rev27(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev26(num)\n    else:\n        return None\n    \ndef rev28(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev27(num)\n    else:\n        return None\n    \ndef rev29(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev28(num)\n    else:\n        return None\n    \ndef rev30(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 2:\n        num = num-2\n        return rev29(num)\n    else:\n        return None\n    \ndef rev31(num):    \n    '''\n    Writ"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num\n    while(num!= 0):\n        rem = num % 10\n        num = num // 10\n        rev_num = rev_num * 10 + rem\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    i = num\n    if num > 0:\n        while i!= 0:\n            rev_num = rev_num * 10 + (i%10)\n            i = i // 10\n        if rev_num < num:\n            print('False')\n        else:\n            print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num<num/2+1    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    else:\n        rev = num * 2\n        if rev == num:\n            return rev\n        else:\n            return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Your code here\n    return 2*num-1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    if num < 0:\n        return -1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    try:\n        return (num >= 0 and num == num * 2)\n    except TypeError:\n        return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if (len(arr) == 0): \n        return 0\n    else: \n        min = arr[0] \n        for i in range(1,len(arr)): \n            if (arr[i] < min): \n                min = arr[i] \n        return min\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_num = 0\n    for i in arr :\n        if i > Max_num :\n            Max_num = i\n    return Max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = list(set(arr))\n    if len(l) > 2:\n        return l[0]\n    else:\n        return l[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Init a variable with the largest number as 0\n    largest = 0\n    \n    # Iterate through the list of digits and find the largest number\n    for num in arr:\n        if num > largest:\n            largest = num\n    return largest\n    \n    \n    "
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr :\n        if i > max_num :\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # if the list is empty, return -1.\n    if arr == [] :\n        return -1\n    # if all digits are equal, return the number itself.\n    elif len(arr) == 1 :\n        return arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    import numpy as np\n    maximum = 0\n    for i in arr :\n        if i > maximum :\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) <= 1 : return arr[0] \n    if arr[0] > arr[1]: \n        return arr[0] \n    if arr[1] > arr[2]: \n        return arr[1] \n    for i in range(3, len(arr)): \n        if arr[i] > arr[i-1] and arr[i] > arr[i-2] : \n            return arr[i] \n    return arr[len(arr)-1] \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    #Empty list to store the numbers in\n    num_list = []\n    for i in arr : \n        num_list.append(i)\n    \n    #Initialize an empty dictionary to store the maximum number \n    d = {}\n    for i in num_list : \n        d[i] = d.get(i, 0) + 1\n    \n    #Find the key with the max value \n    max_num = max(d, key=d.get)\n    \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def find_Max_Num2(arr) :\n        i = 0\n        for i in range(len(arr)) :\n            if (arr[i]%2 == 0):\n                i += 1\n                break\n        if (i == len(arr)) :\n            return -1\n        return arr[i]\n    i = 0\n    for i in range(len(arr)) :\n        if (arr[i]%2 == 0):\n            i += 1\n            break\n    return arr[i]\n    \narr = [1,1,2,3,4,5]\nprint(find_Max_Num(arr))"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>y) - (x<y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0:\n        x = -1 * x\n    if y < 0:\n        y = -1 * y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y < 0 or x > 0 and y > 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return x - y \n    else: \n        return y - x \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0:\n        return -1\n    elif y < 0:\n        return 1\n    elif y > 0:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return '>'\n    elif x < y:\n        return '<'\n    else:\n        return '=='\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return x<y\n    else:\n        return y<x\n    \n    \ndef upper_case(x,y): \n    '''\n    Write a python function to check whether the given two integers have upper or not.\n    '''\n    if x>y:\n        return x>y\n    else:\n        return y>x\n    \n    \ndef lower_case(x,y): \n    '''\n    Write a python function to check whether the given two integers have lower or not.\n    '''\n    if x>y:\n        return x>y\n    else:\n        return y>x\n    \n    \ndef check_equality(x,y): \n    '''\n    Write a python function to check whether two integers have equal sign or not.\n    '''\n    if x==y:\n        return True\n    else:\n        return False\n    \n    \ndef check_order(x,y): \n    '''\n    Write a python function to check whether two integers are in ascending or descending order or not.\n    '''\n    if x>y:\n        return x<y\n    else:\n        return y<x\n    \n    \ndef sum_digits(x): \n    '''\n    Write a python function to calculate the sum of the digits of an integer.\n    '''\n    sum = 0\n    while x>0:\n        digit = x % 10\n        sum += digit\n        x = x//10\n    return sum\n    \n    \ndef even_or_odd(x): \n    '''\n    Write a python function to check whether the given integer is even or odd.\n    '''\n    if x%2==0:\n        return 'even'\n    else:\n        return 'odd'\n    \n    \ndef factorial(x): \n    '''\n    Write a python function to find factorial of an integer.\n    '''\n    fact = 1\n    for i in range(1, x+1):\n        fact = fact*i\n    return fact\n    \n    \ndef non_zero(x): \n    '''\n    Write a python function to check whether the given integer is non zero or not.\n    '''\n    if x>0:\n        return True\n    else:\n        return False\n    \n    \ndef preorder(x): \n    '''\n    Write a python function to construct preorder traversal of an integer tree.\n    '''\n    if x>0:\n        return \"root \" + str(x) + \" \" + str(x)\n    else:\n        return str(x) + \" is a non zero\"\n    \n    \ndef postorder(x): \n    '''\n    Write a python function to construct postorder traversal of an integer tree.\n    '''\n    if x>0:\n        return \"left \" + str(x) + \" \" + str(x) + \" \" + str(x)\n    else:\n        return \"right \" + str(x) + \" \" + str(x) + \" \" + str(x)\n    \n    \ndef height(x): \n    '''\n    Write a python function to calculate the height of an integer tree.\n    '''\n    if x>0:\n        return 1+ max(height(x//2), height(x//3))\n    else:\n        return 0\n    \n    \ndef add_tree(x,y): \n    '''\n    Write a python function to perform addition of two trees.\n    '''\n    if x==y:\n        return x\n    elif x>y:\n        return y\n    else:\n        return x\n    \n    \ndef sum_tree(x,y): \n    '''\n    Write a python function to perform subtraction of two trees.\n    '''\n    if x==y:\n        return x\n    elif x>y:\n        return y\n    else:\n        return x\n    \n    \ndef sub_tree(x,y): \n    '''\n    Write a python function to perform subtraction of two trees.\n    '''\n    if x==y:\n        return x\n    elif x<y:\n        return y\n    else:\n        return x\n    \n    \ndef mul_tree(x,y): \n    '''\n    Write a python function to perform multiplication of two trees.\n    '''\n    if x==y:\n        return x\n    elif x<y:\n        return y\n    else:\n        return x\n    \n    \ndef div_tree(x,y): \n    '''\n    Write a python function to perform division of two trees.\n    '''\n    if x==y:\n        return x\n    elif x<y:\n        return y\n    else:\n        return x\n    \n    \ndef sort(x): \n    '''\n    Write a python function to perform in-order traversal of a tree.\n    '''\n    if x>0:\n        return \"left \" + sort(x//2) + \" \" + sort(x//3) + \" \" + sort(x//4)\n    else:\n        return \"right \" + sort(x//2) + \" \" + sort(x//3) + \" \" + sort(x//4)\n    \n    \ndef build_tree(x): \n    '''\n    Write a python function to build a binary tree.\n    '''\n    if x==0:\n        return None\n    if x>0:\n        root = TreeNode(x%2)\n        root.left = build_tree(x//2)\n        root.right = build_tree(x//4)\n        return root\n    else:\n        return None\n    \n    \ndef in_order(x): \n    '''\n    Write a python function to perform in-order traversal of a tree.\n    '''\n    if x>0:\n        return in_order(x//2) + \" \" + in_order(x//4) + \" \" + in_order(x//8)\n    else:\n        return \" \"\n    \n    \ndef left(x): \n    '''\n    Write a python function to perform left traversal of a tree.\n    '''\n    if x>0:\n        return \"left \" + str(x) + \" \"\n    else:\n        return \" \"\n    \n    \ndef right(x): \n    '''\n    Write a python function to perform right traversal of a tree.\n    '''\n    if x>0:\n        return \"right \" + str(x) + \" \"\n    else:\n        return \" \"\n    \n    \ndef delete_node(x): \n    '''\n    Write a python function to delete a node of a binary tree.\n    '''\n    if x==None:\n        return None\n    if x.left == None and x.right == None:\n        return x.parent\n    \n    if x.left!= None:\n        x.left = delete_node(x.left)\n    if x.right!= None:\n        x.right = delete_node(x.right)\n    \n    if x.parent == None:\n        return None\n    if x == x.parent.left:\n        x.parent.left = x.left\n    else:\n        x.parent.right = x.left\n        \n    if x == x.parent.left.right:\n        x.parent.left.right = x.right\n    else:\n        x.parent.left.left = x.right\n    \n    if x.right == None:\n        x.parent.left = None\n    elif x.left == None:\n        x.parent.right = None\n    elif x.right.left == x.left:\n        x.right.left = x.left\n    else:\n        x.right.right = x.left\n        \n    x.left = None\n    x.right = None\n    x.parent = None\n    \n    return x\n    \n    \n    \ndef print_tree(x): \n    '''\n    Write a python function to print the tree of a binary tree.\n    '''\n    if x==None:\n        return\n    else:\n        print_tree(x.left)\n        print(x.data, \" \", end='')\n        print_tree(x.right)\n    \n    \ndef height_tree(x): \n    '''\n    Write a python function to calculate the height of a binary tree.\n    '''\n    if x==None:\n        return "
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x_signs = {'0':1,'1':0}\n    y_signs = {'-':1,'+':0}\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n%2 == 0: \n        return is_octagonal(n//2) + is_octagonal(n//3) + is_octagonal(n//5)\n    else:\n        return is_octagonal(n//3) + is_octagonal(n//5) + is_octagonal(n//7)\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n * n * n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n**(1/2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**3 % 10 == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n-1\n    if n%2 == 0:\n        return n\n    else:\n        return n**2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==0:\n        return n\n    if n%2==0:\n        return is_octagonal(n-1)\n    else:\n        return (is_octagonal(n-1) + is_octagonal(n-2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 5040\n    elif n == 8:\n        return 5828\n    elif n == 9:\n        return 8320\n    elif n == 10:\n        return 10240\n    elif n == 11:\n        return 10800\n    elif n == 12:\n        return 126048\n    elif n == 13:\n        return 1409120\n    elif n == 14:\n        return 1424048\n    elif n == 15:\n        return 1536072\n    elif n == 16:\n        return 1660720\n    elif n == 17:\n        return 1776608\n    elif n == 18:\n        return 1812048\n    elif n == 19:\n        return 193608\n    elif n == 20:\n        return 2040608\n    elif n == 21:\n        return 2071968\n    elif n == 22:\n        return 2075608\n    elif n == 23:\n        return 2111260\n    elif n == 24:\n        return 2212608\n    elif n == 25:\n        return 2312608\n    elif n == 26:\n        return 2412608\n    elif n == 27:\n        return 2512608\n    elif n == 28:\n        return 2612608\n    elif n == 29:\n        return 2712608\n    elif n == 30:\n        return 2812608\n    elif n == 31:\n        return 2912608\n    elif n == 32:\n        return 3024608\n    elif n == 33:\n        return 3112608\n    elif n == 34:\n        return 3212608\n    elif n == 35:\n        return 3312608\n    elif n == 36:\n        return 3412608\n    elif n == 37:\n        return 3512608\n    elif n == 38:\n        return 3612608\n    elif n == 39:\n        return 3712608\n    elif n == 40:\n        return 3812608\n    elif n == 41:\n        return 3912608\n    elif n == 42:\n        return 4031260\n    elif n == 43:\n        return 4131260\n    elif n == 44:\n        return 4231260\n    elif n == 45:\n        return 4331260\n    elif n == 46:\n        return 4431260\n    elif n == 47:\n        return 4531260\n    elif n == 48:\n        return 4631260\n    elif n == 49:\n        return 4731260\n    elif n == 50:\n        return 4831260\n    elif n == 51:\n        return 4931260\n    elif n == 52:\n        return 5031260\n    elif n == 53:\n        return 5131260\n    elif n == 54:\n        return 5231260\n    elif n == 55:\n        return 5331260\n    elif n == 56:\n        return 5431260\n    elif n == 57:\n        return 5531260\n    elif n == 58:\n        return 5631260\n    elif n == 59:\n        return 5731260\n    elif n == 60:\n        return 5831260\n    elif n == 61:\n        return 5931260\n    elif n == 62:\n        return 6031260\n    elif n == 63:\n        return 6131260\n    elif n == 64:\n        return 6231260\n    elif n == 65:\n        return 6331260\n    elif n == 66:\n        return 6431260\n    elif n == 67:\n        return 6531260\n    elif n == 68:\n        return 6631260\n    elif n == 69:\n        return 6731260\n    elif n == 70:\n        return 6831260\n    elif n == 71:\n        return 6931260\n    elif n == 72:\n        return 7031260\n    elif n == 73:\n        return 7131260\n    elif n == 74:\n        return 7231260\n    elif n == 75:\n        return 7331260\n    elif n == 76:\n        return 7431260\n    elif n == 77:\n        return 7531260\n    elif n == 78:\n        return 7631260\n    elif n == 79:\n        return 7731260\n    elif n == 80:\n        return 7831260\n    elif n == 81:\n        return 7931260\n    elif n == 82:\n        return 8031260\n    elif n == 83:\n        return 8131260\n    elif n == 84:\n        return 8231260\n    elif n == 85:\n        return 8331260\n    elif n == 86:\n        return 8431260\n    elif n == 87:\n        return 8531260\n    elif n == 88:\n        return 8631260\n    elif n == 89:\n        return 8731260\n    elif n == 90:\n        return 8831260\n    elif n == 91:\n        return 8931260\n    elif n == 92:\n        return 9031260\n    elif n == 93:\n        return 9131260\n    elif n == 94:\n        return 9231260\n    elif n == 95:\n        return 9331260\n    elif n == 96:\n        return 9431260\n    elif n == 97:\n        return 9531260\n    elif n == 98:\n        return 9631260\n    elif n == 99:\n        return 9731260\n    elif n == 100:\n        return 9831260\n    elif n == 101:\n        return 9931260\n    elif n == 102:\n        return 10031260\n    elif n == 103:\n        return 10131260\n    elif n == 104:\n        return 10231260\n    elif n == 105:\n        return 10331260\n    elif n == 106:\n        return 10431260\n    elif n == 107:\n        return 10531260\n    elif n == 108:\n        return 10631260\n    elif n == 109:\n        return 10731260\n    elif n == 110:\n        return 10831260\n    elif n == 111:\n        return 10931260\n    elif n == 112:\n        return 11031260\n    elif n == 113:\n        return 11131260\n    elif n == 114:\n        return 11231260\n    elif n == 115:\n        return 11331260\n    elif n == 116:\n        return 11431260\n    elif n == 117:\n        return 11531260\n    elif n == 118:\n        return 11631260\n    elif n == 119:\n        return 11731260\n    elif n == 120:\n        return 11831260\n    elif n == 121:\n        return 11931260\n    elif n == 122:\n        return 12031260\n    elif n == 123:\n        return 12131260\n    elif n == 124:\n        return 12231260\n    elif n == 125:\n        return 12331260\n    elif n == 126:\n        return 12431260\n    elif n == 127:\n        return 12531260\n    elif n == 128:\n        return 12631260\n    elif n == 129:\n        return 12731260\n    elif n == 130:\n        return 12831260\n    elif n == 131:\n        return 12931260\n    elif n == 132:\n        return 13031260\n    elif n == 133:\n        return 13131260\n    elif n == 134:\n        return 13231260\n    elif n == 135:\n        return 13331260\n    elif n == 136:\n        return 13431260\n    elif n == 137:\n        return 13531260\n    elif n == 138:\n        return 13631260\n    elif n == 139:\n        return 13731260\n    elif n == 140:\n        return 13831260\n    elif n == 141:\n        return 13931260\n    elif n == 142:\n        return 14031260\n    elif n == 143:\n        return 14131260\n    elif n == 144:\n        return 14231260\n    elif n == 145"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        for i in range(n - 1):\n            a = a * (i + 1)\n        return (a + 1)\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1:\n        return n\n    \n    # Write your code here.\n    start = 1\n    end = n\n    while start <= end:\n        mid = (start + end) // 2\n        if (mid % 2 == 0 and n > 0) or (mid % 2 == 1 and n < 0):\n            return mid\n        else:\n            if mid < n // 2:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return 0\nprint(is_octagonal(7))\nprint(is_octagonal(6))\nprint(is_octagonal(4))\nprint(is_octagonal(3))\nprint(is_octagonal(1))\nprint(is_octagonal(0)"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = (n * (n+1))//2\n    while True:\n        a += 1\n        if a**2 > n:\n            return a\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    S = []\n    for i in range(len(s)):\n        S.append(s[i:i+len(s[0])])\n    for i in range(len(s)):\n        S[i] = len(set(S[i]))\n    return S\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_to_sub = 0\n    \n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].isdigit() and int(s[i:j+1]) == int(s[i:j+1]):\n                count_to_sub = count_to_sub + 1\n            else:\n                break\n        \n    return count_to_sub\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if int(s[i:j]) == int(s[i:j][::-1]):\n                count += 1\n    return count\ndef count_Substrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    l = len(s)\n    sub_list = [s[i:j] for i in range(l) for j in range(i,l)]\n    for elem in sub_list:\n        count += (count_Substrings(elem))\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) <= 2:\n        return 1\n    counter = 1\n    current_sum = int(s[0])\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            counter = counter + 1\n        else:\n            current_sum = current_sum + 1\n    return counter + count_Substrings(s[1:len(s)])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    D = defaultdict(int)\n    for i in range(len(s)):\n        D[s[i]] += 1\n    return D\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    s = int(s)\n    # First, count all the numbers of substrings of length n\n    substrings = defaultdict(int)\n    for i in range(n):\n        # What is the sum of the digits in the current index i?\n        sum = 0\n        for j in range(i, n):\n            sum += int(s[j])\n        substrings[sum] += 1\n    # Then, for each substring, we'll keep track of the number of occurrences\n    # and, for each number, how many of them are used\n    substrings = {k: v for k, v in substrings.items() if v}\n    return len(substrings)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    # Create a list of all the possible characters that can be used.\n    letters = []\n    for i in range(1, len(s)):\n        letters.append(s[i])\n    # Iterate through the characters and check if the sum of digits equals the length of the string.\n    for i in range(1, len(letters)):\n        temp_sum = 0\n        for j in range(0, i):\n            if (int(letters[i]) + int(letters[j])) == int(letters[i]):\n                temp_sum += 1\n        if int(letters[i]) == temp_sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    d = defaultdict(int)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Step 1: Create an empty dict and add the value 0.0\n    dict = {}\n    # Step 2: Loop through the string and add the digit of the string to the dict\n    for i in range(len(s)):\n        dict[s[i]] = dict.get(s[i], 0) + 1\n    # Step 3: Search for the numbers in the dict\n    for key in dict:\n        if dict[key] > 1:\n            # Step 4: If the number of digits is even, increment the counter\n            # (We don't add an if condition because we want to count the number of substrings of the original string)\n            if dict[key] % 2 == 0:\n                dict[key] = dict[key] + dict[key]\n            # Step 5: If the number of digits is odd, decrement the counter\n            else:\n                dict[key] = dict[key] - dict[key]\n        # Step 6: if the number of digits is odd, add the number of digits to the dict\n    # Step 7: Return the dictionary with the sum\n    return dict\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    #print(xs)\n    lst = []\n    for num in xs:\n        lst.append(num)\n    return lst[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lst = []\n    lst2 = []\n    min = 0\n    for x in xs:\n        if x < min:\n            min = x\n    lst.append(min)\n    for x in xs:\n        if x < min:\n            min = x\n    lst2.append(min)\n    return min\ndef max_num(xs):\n    '''\n    Write a python function to find biggest number in a list.\n    '''\n    lst = []\n    max = 0\n    for x in xs:\n        if x > max:\n            max = x\n    lst.append(max)\n    return max\ndef main():\n    '''\n    Driver code to test the function.\n    '''\n    n = eval(input(\"Enter a positive integer (n): \"))\n    xs = list(map(int, input(\"Enter a list of integers (separated by commas): \").split(\",\")))\n    print(f\"{n} in {xs}\")\n    print(f\"{smallest_num(xs)}\")\n    print(f\"{max_num(xs)}\")\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # xs = [0,1,2,3,4,5,6,7,8,9,10]\n    xs = sorted(xs)\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # xs = [5,10,5,5,7,3,3,4,2,4,4,4,2,2,7,9,9,9,3,5,6,3,5,7,3,3,2,5,5,3,6,3,4,1,4,5,9,5,5,5,3,5,6,7,2,7,4,6,2,5,7,4,3,4,3,4,3,4,3,4,3,4,3,6,3,5,4,6,1,4,6,4,2,6,5,4,4,5,7,4,3,7,3,5,7,5,5,5,7,7,6,5,4,6,5,4,3,2,1,5,4,3,2,2,6,5,1,7,4,3,2,2,2,5,7,2,2,7,6,7,5,7,4,6,7,4,4,4,3,7,6,4,2,6,3,7,6,4,3,4,6,2,6,4,5,4,3,3,3,4,6,3,6,5,6,4,5,3,4,7,7,7,7,5,3,5,5,3,5,4,5,4,6,6,4,6,6,6,5,5,5,6,5,4,6,4,5,4,4,3,4,4,6,7,6,6,5,5,5,7,7,7,7,6,4,5,4,5,6,6,4,7,6,3,5,5,7,4,7,7,5,4,7,6,5,4,5,5,7,7,7,4,5,3,5,5,6,6,7,7,5,4,5,4,6,5,5,6,6,5,4,5,5,5,4,6,6,4,4,7,4,7,5,6,5,5,5,7,4,5,5,5,7,7,6,6,5,6,5,4,5,4,6,5,4,5,4,5,6,5,5,4,5,6,5,4,6,6,6,5,5,5,5,6,5,5,7,4,5,5,7,4,6,5,4,5,6,4,5,7,6,6,4,5,6,4,5,6,4,6,7,5,7,4,4,4,4,6,5,4,5,7,4,6,4,5,7,4,7,4,6,5,4,6,7,4,4,4,4,3,7,6,4,5,6,5,4,4,5,4,6,4,5,4,5,4,5,6,5,4,4,5,4,5,6,4,7,4,5,4,6,5,4,5,4,5,6,4,5,4,6,5,4,4,5,4,6,5,6,6,4,5,4,4,5,6,5,5,6,5,6,7,4,4,5,4,5,5,6,6,5,5,7,5,6,4,6,4,6,4,5,4,6,6,5,5,4,6,5,4,7,4,4,4,5,4,4,4,5,4,5,4,5,5,6,6,4,4,5,4,4,4,6,5,4,4,5,6,4,5,5,5,7,4,4,4,5,4,4,4,5,6,5,6,5,6,5,6,6,4,4,4,6,5,4,4,5,4,6,4,6,5,5,7,6,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_value = xs[0]\n    for item in xs:\n        if item < min_value:\n            min_value = item\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    def compare(num1, num2):\n        '''\n        Compare two numbers.\n        '''\n        if num1 > num2:\n            return True\n        elif num1 < num2:\n            return False\n        else:\n            return True\n    \n    num_set = set(xs)\n    count = 0\n    for num in xs:\n        if compare(num, num_set[count]):\n            count += 1\n    return num_set[count]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst = []\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            temp_list = test_list[i]+test_list[j]\n            lst.append(temp_list)\n    return max(lst)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    available_list = []\n    max_difference = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            available_list.append(test_list[i])\n        else:\n            if test_list[i] - test_list[i - 1] > max_difference:\n                max_difference = test_list[i] - test_list[i - 1]\n                available_list = [test_list[i]]\n            else:\n                available_list.append(test_list[i])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    #create a max_diff_array where each element in max_diff_array is the difference of all available\n    #pairs in the given tuple list. \n    max_diff_array = []\n    for x in range(len(test_list)):\n        #sum the values of the values in the tuple list\n        val = 0\n        for y in range(len(test_list)):\n            val += test_list[y][x]\n        #increase the sum of the values in the tuple list by that value\n        val += test_list[x][x]\n        #append the sum of the values in the tuple list to max_diff_array\n        max_diff_array.append(val)\n    #sort max_diff_array in decreasing order\n    max_diff_array = sorted(max_diff_array)\n    #return the maximum difference\n    return max_diff_array[-1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)<=2:\n        return None\n    else:\n        return max(test_list[1:]) - max(test_list[:-1])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            lst.append((test_list[i], test_list[j]))\n    return max(lst)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    i = 0\n    while i < len(test_list):\n        j = i\n        while j < len(test_list) and test_list[i]!= test_list[j]:\n            j += 1\n        if j == i + 1:\n            return test_list[i] - test_list[j]\n        i += 1\n    return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    min_diff = 0\n    for item in test_list:\n        if item[1] - item[0] > max_diff:\n            max_diff = item[1] - item[0]\n        if item[0] - item[1] > min_diff:\n            min_diff = item[0] - item[1]\n    return max_diff, min_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # write your code here\n    if len(test_list)<2:\n        return 0\n    # max_val_list is a tuple that contains two elements, the max difference of two elements of the tuple list.\n    # -1 indicates that the tuple is not available, and it can't be compared with the second tuple.\n    max_val_list = [0, -1]\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                # if the elements are not equal, compare them with the first element.\n                if test_list[i] - test_list[j]!= max_val_list[0]:\n                    max_val_list[0] = test_list[i] - test_list[j]\n                # if the elements are equal, compare them with the second element.\n                if test_list[i] - test_list[j] == max_val_list[1]:\n                    max_val_list[1] = test_list[i] - test_list[j]\n    return max_val_list\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    left = 0\n    right = len(test_list) - 1\n    while left < right:\n        if test_list[left] + test_list[right] < 0:\n            left += 1\n        elif test_list[left] + test_list[right] > 0:\n            right -= 1\n        else:\n            return test_list[left] - test_list[right]\n    return \"No Difference\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # WRITE YOUR CODE HERE\n    def max_difference_recursive(test_list, n, max_difference_recursive_visited=None):\n        if max_difference_recursive_visited == None:\n            max_difference_recursive_visited = test_list\n        if n == 1:\n            max_difference_recursive_visited = [test_list[0], test_list[1]]\n            return max_difference_recursive_visited[1] - max_difference_recursive_visited[0]\n        \n        if test_list[n - 1] - test_list[n - 2] > max_difference_recursive_visited[n - 1] - max_difference_recursive_visited[n - 2]:\n            max_difference_recursive_visited[n - 1] = test_list[n - 1] - max_difference_recursive_visited[n - 1]\n        elif test_list[n - 1] - test_list[n - 2] < max_difference_recursive_visited[n - 1] - max_difference_recursive_visited[n - 2]:\n            max_difference_recursive_visited[n - 1] = test_list[n - 1] - max_difference_recursive_visited[n - 1]\n        else:\n            max_difference_recursive_visited[n - 1] = max(max_difference_recursive_visited[n - 1] - test_list[n - 1],\n                                                            max_difference_recursive_visited[n - 2] - test_list[n - 2])\n        return max_difference_recursive_visited[n - 1]\n    \n    if max_difference_recursive_visited is None:\n        max_difference_recursive_visited = [0, 0]\n    \n    return max_difference_recursive_visited[1] - max_difference_recursive_visited[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted = sorted(subjectmarks, key = lambda x: (x[1], x[0]))\n    return sorted\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Your code here\n    # define a list of tuples for use in the sort function\n    subject_marks = []\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_list=[]\n    subject=[]\n    for t in subjectmarks:\n        subject.append(t[0])\n        subject_list.append(t[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of all of the tuples\n    subject_marks = []\n    # iterate through the subjects and append the subject marks to the list\n    for subj in subjectmarks:\n        subject_marks.append(subj[1])\n    # sort the subjects\n    subject_marks.sort()\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for index in range(len(subjectmarks)):\n        subjectmarks[index].insert(1,subjectmarks[index][1])\n    subjectmarks.sort()\n    for index in range(len(subjectmarks)):\n        subjectmarks[index].insert(1,subjectmarks[index][0])\n    return(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = []\n    for tuples in subjectmarks:\n        sorted_list.append(tuples[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for x in data_list:\n        sum += x\n    return sum\n    "
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for item in data_list:\n        total_sum = total_sum + item\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    if type(data_list[0]) is not list:\n        data_list = [data_list]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for element in data_list:\n        result += element\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #Your code here\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_data = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_data += recursive_list_sum(item)\n        else:\n            flattened_data.append(item)\n    return flattened_data\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return []\n    else:\n        return data_list + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    \n    for element in data_list:\n        if isinstance(element, list):\n            flattened_list.extend(recursive_list_sum(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n        \nprint(recursive_list_sum(['one', 'two', 'three', 'four']) == ['one', 2, 'two', 'three', 'four'])\nprint(recursive_list_sum(['one', 'two', 'three', 'four']) == ['one', 2, 'one', 'two', 'three', 'four'])\nprint(recursive_list_sum([1, 'a', ['a', 2, 3], 4, 5]) == [1, 'a', 2, 'a', 3, 4, 5])\nprint(recursive_list_sum([1, 2, 3, 4]) == [1, 2, 3, 4])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    for item in data_list:\n        if isinstance(item, list):\n            result.extend(recursive_list_sum(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def create_sum(l):\n        '''\n        Given a list, return a list of its elements, in order, as a string.\n        '''\n        s = []\n        for x in l:\n            s.append(str(x))\n        return''.join(s)\n    \n    def flatten(l):\n        '''\n        Given a list, return a list of its elements in order, in a\n        flattened version.\n        '''\n        l = [x for x in l if isinstance(x, list)]\n        return l\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for value in list:\n        if value > 0:\n            pos_count += 1\n    return pos_count\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    neg_count = 0\n    for value in list:\n        if value < 0:\n            neg_count += 1\n    return neg_count\n    \ndef divide_by_two(list):\n    '''\n    Write a python function to divide a list into two parts using the modulo operator.\n    '''\n    return list[0] // list[1], list[1] // list[0]\n    \ndef reverse_list(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list[::-1]\n    \ndef multiply_by_three(list):\n    '''\n    Write a python function to multiply a list by 3.\n    '''\n    return list[0] * list[1] * list[2]\n    \ndef add_all(list):\n    '''\n    Write a python function to sum all of a list.\n    '''\n    return sum(list)\n    \ndef get_longest_value(list):\n    '''\n    Write a python function to return the value with the longest length.\n    '''\n    return max(list)\n    \ndef find_longest_value(list):\n    '''\n    Write a python function to find the value with the longest length.\n    '''\n    return list[0]\n    \ndef sort_array(list):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(list)\n    \ndef copy_array(list):\n    '''\n    Write a python function to copy a list.\n    '''\n    return list[:]\n    \ndef reverse_array(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list[::-1]\n    \ndef create_list(count):\n    '''\n    Write a python function to create a list of a given count.\n    '''\n    return [i for i in range(count)]\n    \ndef create_array(count):\n    '''\n    Write a python function to create an array of a given count.\n    '''\n    return [i for i in range(count)"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for i in list:\n        if i > 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in range(len(list)):\n        if list[i]>0:\n            pos+=1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive=0\n    for i in list:\n        if i>0:\n            positive+=1\n    print(f\"The total positive numbers is: {positive}\")\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for num in list:\n        if num > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    total = 0\n    for number in list:\n        if number > 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    lst = []\n    for i in list:\n        if i > 0:\n            lst.append(i)\n    return len(lst)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def count(n, memo = {}):\n        if n in memo:\n            return memo[n]\n        \n        if n == 0:\n            return 1\n        \n        if n == 1:\n            return 1\n        \n        if n == 2:\n            return 2\n        \n        ans = count(n - 1, memo) + count(n - 2, memo)\n        \n        memo[n] = ans\n        \n        return ans\n    \n    return count(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # return sum(range(n))\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # TODO: create a helper function to find the total number of possible ways to partition a set of numbers.\n    #  0: (0, 0)\n    #  1: (0, 1)\n    #  2: (1, 0)\n    #  3: (1, 1)\n    # ...\n    #  k: (k, k-1)\n    #  1: (0, k-1)\n    #  2: (1, k-1)\n    #  3: (1, k)\n    # ...\n    #  n: number of integers\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 3\n    if n==5:\n        return 4\n    \n    temp = n-1\n    \n    # Find number of ways to get to number=0\n    return (bell_number(temp-1)+bell_number(temp))"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    return bell_number(n-1)+bell_number(n-2)\ndef count_ways(n):\n    '''\n    Given an integer n, return the number of ways to partition the set \n    of Bell numbers.\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    cache = {}\n    def bell_number_rec(n, target):\n        if n == target:\n            return 1\n        if n not in cache:\n            cache[n] = bell_number_rec(n + 1, target)\n        return cache[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return bell_number(n-1) + bell_number(n-2) + 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell(num):\n        if num == 0:\n            return 1\n        elif num == 1:\n            return 0\n        elif num == 2:\n            return 2\n        else:\n            return bell(num - 1) + bell(num - 2) + bell(num - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is monotonic or not\n    if len(A) <= 1:\n        return True\n    # for all indexes except the last one\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    from collections import deque\n    if len(A)>0:\n        dp = []\n        for i in range(len(A)-1):\n            dp.append(max(A[i],A[i+1]))\n        # print(dp)\n        # print(len(dp))\n        for i in range(len(dp)):\n            if i==0:\n                if dp[i]<A[i+1]:\n                    return False\n            elif dp[i]==A[i+1]:\n                if A[i]<A[i-1]:\n                    return False\n            else:\n                if A[i]<A[i-1] and A[i]<dp[i-1]:\n                    return False\n        return True\n    else:\n        return True\n    \nif __name__ == '__main__':\n    print(is_Monotonic([1,2,3,4,5]))\n    print(is_Monotonic([2,2,2,2,2]))\n    print(is_Monotonic([-3,-2,-3,-4]))\n    print(is_Monotonic([1,2,3,4,5]))\n    print(is_Monotonic([2,2,2,2,2]))"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # The function returns the boolean value of true if it finds a positive x-direction in array A \n    # and false if it finds a negative x-direction in array A \n    def is_positive(x):\n        return A[x] < 0\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Binary Search \n    start = 0\n    end = len(A) - 1\n    while start < end: \n        mid = (start + end) // 2\n        if A[mid] == A[mid + 1]: \n            return False \n        elif A[mid] > A[mid + 1]: \n            end = mid \n        else: \n            start = mid + 1\n    return True \n    \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] == A[1] and A[0]!= A[-1]:\n        return False\n    if A[-1] == A[-2] and A[-1]!= A[-2]:\n        return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2: \n        return False\n    for i in range(n-1):\n        if A[i] > A[i+1]: \n            return False\n    return True\n    \ndef QuickSort(A, first_index, last_index): \n    '''\n    Write a python function to sort an array.\n    '''\n    if first_index < last_index: \n        pivot = Partition(A, first_index, last_index)\n        QuickSort(A, first_index, pivot-1)\n        QuickSort(A, pivot+1, last_index)\n        \ndef Partition(A, first_index, last_index): \n    '''\n    Write a python function to partition the array into two.\n    '''\n    x = A[last_index] \n    i = first_index \n    for j in range(first_index, last_index): \n        if A[j] < x: \n            A[i], A[j] = A[j], A[i] \n            i += 1 \n    A[i], A[last_index] = A[last_index], A[i] \n    return i \n    \ndef SelectionSort(A): \n    '''\n    Write a python function to sort an array.\n    '''\n    for i in range(len(A)): \n        min_index = i \n        for j in range(i+1, len(A)): \n            if A[j] < A[min_index]: \n                min_index = j \n        A[i], A[min_index] = A[min_index], A[i] \n    return A\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1] or A[i] >= A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    B = numpy.array(A, dtype=numpy.bool) \n    for i in range(A.size): \n        if B[i] == 1:\n            for j in range(i+1, A.size):\n                if A[j] == 1:\n                    return False\n            return True\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return (len(l) <= len(s)) and all(a < s[i] for i in range(len(s)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0 or len(l) < 2: return False\n    for i in range(len(l)):\n        if l[i:i+2] in s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # your code here\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i:i+len(l)] in l:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def recursive(l, s):\n        if len(s) == 0:\n            return True\n        if len(l) == 0:\n            return False\n        if s[0] == l[0]:\n            return recursive(l[1:], s[1:])\n        return recursive(l[1:], s)\n        \n    return recursive(l, s)"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # to solve this problem, we can sort the list, but not for the whole data structure\n    # time complexity: O(nlog(n)) because it is sorting the list in O(n) time\n    # space complexity: O(n) because it is sorting the list in O(1) space\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    temp = l[0:len(l)-1]\n    if temp == s:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l) > len(s) and any(map(lambda x: x in s, l))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(l)!= list:\n        raise TypeError(\"l should be a list\")\n    if len(l) == 0:\n        return False\n    for i in l:\n        if i in s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if not l:\n        return False\n    \n    if len(l) == 1:\n        return l[0] == s\n    \n    else:\n        return (l[0] in s) and is_sublist(l[1:], s)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    x=0\n    y=0\n    for tup in Input:\n        if len(tup)!= x+y:\n            return False\n        else:\n            y+=1\n    return True\ndef main():\n    print(\"Function: find_equal_tuple()\")\n    print(\"Task: task number 4\")\n    print(\"Result: \", find_equal_tuple([(1,2,3),(4,5,6),(7,8,9),(10,11,12)]),\"\\n\")\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    EqTup=[]\n    for i in range(0,len(Input)):\n        if len(Input[i])!=len(set(Input[i])):\n            return False\n        for j in range(0,len(Input[i])):\n            if Input[i][j]!=Input[i][j]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return Input[0] == Input[0]\n    else:\n        for i in range(len(Input) - 1):\n            if Input[i]!= Input[i + 1]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tup_set = set()\n    for i in Input:\n        if len(i) == len(set(i)):\n            tup_set.add(i)\n    if len(tup_set) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    lst = list(map(tuple, Input))\n    lst.sort()\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n                break\n    if count == len(lst):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==0:\n        return False\n    elif len(Input)==1:\n        return Input[0]==Input[0]\n    else:\n        t1=Input[0]\n        t2=Input[1]\n        return t1==t2\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        Input_len = len(Input)\n        for i in range(0,Input_len):\n            for j in range(i+1,Input_len):\n                if len(Input[i])!= len(Input[j]):\n                    return False\n        return True\n    except Exception as e:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i]!= Input[j]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return Input[0] == Input[0]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Empty list\n    result = []\n    if len(Input) == 0:\n        return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    mid = len(nums)//2\n    left = nums[:mid]\n    right = nums[mid:]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n == 1:\n        return nums\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        position = nums[i]\n        for j in range(len(nums)):\n            if i!= j:\n                if nums[j] > nums[i]:\n                    nums[j],nums[i] = nums[i],nums[j]\n        nums[i] = position\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Setting the length of the array\n    length = len(nums)\n    # Setting the first element as the smallest\n    first = nums[0]\n    # Setting the rest of the elements as the largest\n    rest = nums[length-1]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    T.C: O(n^2) (Best Case)\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    comb = []\n    for x in range(0, len(nums) - 1):\n        for y in range(0, len(nums) - 1):\n            if nums[y] > nums[y+1]:\n                comb.append(nums[y])\n                nums[y], nums[y+1] = nums[y+1], nums[y]\n    comb.append(nums[len(nums)-1])\n    return comb\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    combs = [ [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [] ]\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n%2!= 0:\n        return False\n    else:\n        return dif_Square(n//2) \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n1 = abs(n)\n    n2 = abs(n)\n    if (n1 < n2): \n        return n1 - n2\n    else: \n        return n2 - n1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    m = n\n    n1 = n-1\n    n2 = n-2\n    if n == 1 and m == 2: \n        return True\n    elif m == 2:\n        return n1 > 0 or n1 == -1 and n2 < 0 \n    elif n == 2:\n        return n2 > 0 or n2 == -1 \n    else: \n        if n1 > 0 and n2 > 0 and n2 > n1 and n2 > n1-1 and n2 < m-1 and n2 < m-1:\n            if n2 > n1-1 and n2 > n1: \n                return n1 == n2-1\n            else: \n                return False \n        elif n1 > 0 and n2 > 0 and n1 < n2: \n            return n1 == n1-1\n        else: \n            if n2 > m-1: \n                return False \n            else: \n                return n2 == m-1\n        \ndef is_perm(arr): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    n = len(arr)\n    if n == 1: \n        return True\n    elif n == 2: \n        return arr[0] == arr[1]\n    else: \n        if arr[0] == arr[1]: \n            return is_perm(arr[1:])\n        else: \n            return False\n        \ndef is_perm_rec(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return arr[0] == arr[1]\n    else: \n        if arr[0] == arr[1]: \n            return is_perm_rec(arr[1:], n-1)\n        else: \n            return False\n        \ndef is_perm_iter(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return arr[0] == arr[1]\n    else: \n        if arr[0] == arr[1]: \n            return is_perm_iter(arr[1:], n-1)\n        else: \n            return False\n        \ndef check_perm(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return arr[0] == arr[1]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm(arr[1:], n-1)\n        else: \n            return False \n            \ndef check_perm_iter(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return arr[0] == arr[1]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm_iter(arr[1:], n-1)\n        else: \n            return False \n        \ndef check_perm_rec(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return arr[0] == arr[1]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm_rec(arr[1:], n-1)\n        else: \n            return False \n            \ndef check_perm_iter_rec(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return arr[0] == arr[1]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm_iter_rec(arr[1:], n-1)\n        else: \n            return False \n        \ndef perm_perm(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return arr[0] == arr[1]\n    elif n == 2: \n        return arr[0] == arr[1] or arr[0] == arr[0]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm(arr[1:], n-1)\n        else: \n            return False \n        \ndef perm_perm_iter(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return arr[0] == arr[1]\n    elif n == 2: \n        return arr[0] == arr[1] or arr[0] == arr[0]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm_iter(arr[1:], n-1)\n        else: \n            return False \n        \ndef perm_perm_rec(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return arr[0] == arr[1]\n    elif n == 2: \n        return arr[0] == arr[1] or arr[0] == arr[0]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm_rec(arr[1:], n-1)\n        else: \n            return False \n        \ndef perm_perm_iter_rec(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return arr[0] == arr[1]\n    elif n == 2: \n        return arr[0] == arr[1] or arr[0] == arr[0]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm_iter_rec(arr[1:], n-1)\n        else: \n            return False \n        \ndef perm_perm_rec_iter(arr, n): \n    '''\n    Write a python function to check whether the given array is a permutation of the given array or not.\n    '''\n    if n == 1: \n        return arr[0] == arr[1]\n    elif n == 2: \n        return arr[0] == arr[1] or arr[0] == arr[0]\n    else: \n        if arr[0] == arr[1]: \n            return check_perm_rec_iter(arr[1:], n-1)\n        else: \n            return False \n        \ndef get_rows_or_cols(arr): \n    '''\n    Write a python function to find the total number of rows and columns in an array.\n    '''\n    rows = 0\n    cols = 0\n    for i in range(0, len(arr)): \n        if i % 2 == 0: \n            cols += 1\n        else: \n            rows += 1\n    return rows, cols\n    \ndef get_sum_of_the_diagonal(arr): \n    '''\n    Write a python function to find the sum of the diagonal in an array.\n    '''\n    return arr[0] + arr[-1]\n    \ndef get_sum_of_the_diagonal_rec(arr, n): \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True \n    elif n == 2: \n        return False \n    else: \n        return False \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    elif n%2==0:\n        return dif_Square(n//2)\n    else:\n        return dif_Square(3*n)+dif_Square(n-1)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if n == 1:\n    #     print(1)\n    #     return\n    if n == 1:\n        print(1)\n        return\n    if n == 2:\n        print(2)\n        return\n    \n    # if n == 3:\n    #     print(3)\n    #     return\n    if n == 4:\n        print(4)\n        return\n    \n    square_difference_1 = (n - 1) * (n - 1)\n    square_difference_2 = (n - 1) * (n - 1)\n    square_difference_3 = (n - 1) * (n - 1)\n    square_difference_4 = (n - 1) * (n - 1)\n    square_difference_5 = (n - 1) * (n - 1)\n    square_difference_6 = (n - 1) * (n - 1)\n    square_difference_7 = (n - 1) * (n - 1)\n    square_difference_8 = (n - 1) * (n - 1)\n    square_difference_9 = (n - 1) * (n - 1)\n    square_difference_10 = (n - 1) * (n - 1)\n    square_difference_11 = (n - 1) * (n - 1)\n    square_difference_12 = (n - 1) * (n - 1)\n    square_difference_13 = (n - 1) * (n - 1)\n    square_difference_14 = (n - 1) * (n - 1)\n    square_difference_15 = (n - 1) * (n - 1)\n    square_difference_16 = (n - 1) * (n - 1)\n    square_difference_17 = (n - 1) * (n - 1)\n    square_difference_18 = (n - 1) * (n - 1)\n    square_difference_19 = (n - 1) * (n - 1)\n    square_difference_20 = (n - 1) * (n - 1)\n    square_difference_21 = (n - 1) * (n - 1)\n    square_difference_22 = (n - 1) * (n - 1)\n    square_difference_23 = (n - 1) * (n - 1)\n    square_difference_24 = (n - 1) * (n - 1)\n    square_difference_25 = (n - 1) * (n - 1)\n    square_difference_26 = (n - 1) * (n - 1)\n    square_difference_27 = (n - 1) * (n - 1)\n    square_difference_28 = (n - 1) * (n - 1)\n    square_difference_29 = (n - 1) * (n - 1)\n    square_difference_30 = (n - 1) * (n - 1)\n    square_difference_31 = (n - 1) * (n - 1)\n    square_difference_32 = (n - 1) * (n - 1)\n    square_difference_33 = (n - 1) * (n - 1)\n    square_difference_34 = (n - 1) * (n - 1)\n    square_difference_35 = (n - 1) * (n - 1)\n    square_difference_36 = (n - 1) * (n - 1)\n    square_difference_37 = (n - 1) * (n - 1)\n    square_difference_38 = (n - 1) * (n - 1)\n    square_difference_39 = (n - 1) * (n - 1)\n    square_difference_40 = (n - 1) * (n - 1)\n    square_difference_41 = (n - 1) * (n - 1)\n    square_difference_42 = (n - 1) * (n - 1)\n    square_difference_43 = (n - 1) * (n - 1)\n    square_difference_44 = (n - 1) * (n - 1)\n    square_difference_45 = (n - 1) * (n - 1)\n    square_difference_46 = (n - 1) * (n - 1)\n    square_difference_47 = (n - 1) * (n - 1)\n    square_difference_48 = (n - 1) * (n - 1)\n    square_difference_49 = (n - 1) * (n - 1)\n    square_difference_50 = (n - 1) * (n - 1)\n    square_difference_51 = (n - 1) * (n - 1)\n    square_difference_52 = (n - 1) * (n - 1)\n    square_difference_53 = (n - 1) * (n - 1)\n    square_difference_54 = (n - 1) * (n - 1)\n    square_difference_55 = (n - 1) * (n - 1)\n    square_difference_56 = (n - 1) * (n - 1)\n    square_difference_57 = (n - 1) * (n - 1)\n    square_difference_58 = (n - 1) * (n - 1)\n    square_difference_59 = (n - 1) * (n - 1)\n    square_difference_60 = (n - 1) * (n - 1)\n    square_difference_61 = (n - 1) * (n - 1)\n    square_difference_62 = (n - 1) * (n - 1)\n    square_difference_63 = (n - 1) * (n - 1)\n    square_difference_64 = (n - 1) * (n - 1)\n    square_difference_65 = (n - 1) * (n - 1)\n    square_difference_66 = (n - 1) * (n - 1)\n    square_difference_67 = (n - 1) * (n - 1)\n    square_difference_68 = (n - 1) * (n - 1)\n    square_difference_69 = (n - 1) * (n - 1)\n    square_difference_70 = (n - 1) * (n - 1)\n    square_difference_71 = (n - 1) * (n - 1)\n    square_difference_72 = (n - 1) * (n - 1)\n    square_difference_73 = (n - 1) * (n - 1)\n    square_difference_74 = (n - 1) * (n - 1)\n    square_difference_75 = (n - 1) * (n - 1)\n    square_difference_76 = (n - 1) * (n - 1)\n    square_difference_77 = (n - 1) * (n - 1)\n    square_difference_78 = (n - 1) * (n - 1)\n    square_difference_79 = (n - 1) * (n - 1)\n    square_difference_80 = (n - 1) * (n - 1)\n    square_difference_81 = (n - 1) * (n - 1)\n    square_difference_82 = (n - 1) * (n - 1)\n    square_difference_83 = (n - 1) * (n - 1)\n    square_difference_84 = (n - 1) * (n - 1)\n    square_difference_85 = (n - 1) * (n - 1)\n    square_difference_86 = (n - 1) * (n - 1)\n    square_difference_87 = (n - 1) * (n - 1)\n    square_difference_88 = (n - 1) * (n - 1)\n    square_difference_89 = (n - 1) * (n - 1)\n    square_difference_90 = (n - 1) * (n - 1)\n    square_difference_91 = (n - 1) * (n - 1)\n    square_difference_92 = (n - 1) * (n - 1)\n    square_difference_93 = (n - 1) * (n - 1)\n    square_difference_94 = (n - 1) * (n - 1)\n    square_difference_95 = (n - 1) * (n - 1)\n    square_difference_96 "
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                pass\n            else:\n                if n-i == j-i:\n                    return True\n                elif n-i == i-j:\n                    return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n >= 0):\n        if (n % 2 == 0): \n            return True\n        else:\n            return False\n    else: \n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n < 1 or n > 100): \n        return False\n    if (n % 100!= 0):\n        return False\n    for i in range (1, int(n**0.5) + 1):\n        if (n % i == 0): \n            return False\n    return True \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 0): \n        print(\"Invalid input\") \n    else: \n        for i in range(1,n+1): \n            if ((i*i) % 10 == 0): \n                print(\"Error\") \n                return \n        if (n == 1): \n            print(\"The difference of two squares is: 0\") \n            return \n        elif (n == 2): \n            print(\"The difference of two squares is: 1\") \n            return \n        elif (n == 3): \n            print(\"The difference of two squares is: 2\") \n            return \n        elif (n == 4): \n            print(\"The difference of two squares is: 3\") \n            return \n        elif (n == 5): \n            print(\"The difference of two squares is: 4\") \n            return \n        elif (n == 6): \n            print(\"The difference of two squares is: 5\") \n            return \n        elif (n == 7): \n            print(\"The difference of two squares is: 6\") \n            return \n        elif (n == 8): \n            print(\"The difference of two squares is: 7\") \n            return \n        elif (n == 9): \n            print(\"The difference of two squares is: 8\") \n            return \n        else: \n            print(\"The difference of two squares is: 9\") \n            return \ndef get_name(n): \n    '''\n    Write a python function to get the name of the given number.\n    '''\n    if (n <= 0): \n        print(\"Invalid input\") \n    elif (n == 1): \n        return \"Giovanna\" \n    elif (n == 2): \n        return \"Bob\" \n    elif (n == 3): \n        return \"Arya\" \n    elif (n == 4): \n        return \"Furkan\" \n    elif (n == 5): \n        return \"Gurkan\" \n    elif (n == 6): \n        return \"Samantha\" \n    elif (n == 7): \n        return \"Gasura\" \n    elif (n == 8): \n        return \"Pumshie\" \n    elif (n == 9): \n        return \"Alia\" \n    else: \n        print(\"Error\") \n        return\ndef get_age(n): \n    '''\n    Write a python function to get the age of the given number.\n    '''\n    if (n <= 0): \n        print(\"Invalid input\") \n    elif (n == 1): \n        return \"18\" \n    elif (n == 2): \n        return \"23\" \n    elif (n == 3): \n        return \"35\" \n    elif (n == 4): \n        return \"45\" \n    elif (n == 5): \n        return \"65\" \n    elif (n == 6): \n        return \"125\" \n    elif (n == 7): \n        return \"175\" \n    elif (n == 8): \n        return \"255\" \n    elif (n == 9): \n        return \"325\" \n    else: \n        print(\"Error\") \n        return\ndef get_date(n): \n    '''\n    Write a python function to get the date of the given number.\n    '''\n    if (n <= 0): \n        print(\"Invalid input\") \n    elif (n == 1): \n        return \"2016-07-02\" \n    elif (n == 2): \n        return \"2017-06-27\" \n    elif (n == 3): \n        return \"2018-05-11\" \n    elif (n == 4): \n        return \"2019-04-19\" \n    elif (n == 5): \n        return \"2019-05-19\" \n    elif (n == 6): \n        return \"2019-06-25\" \n    elif (n == 7): \n        return \"2020-07-10\" \n    elif (n == 8): \n        return \"2021-04-23\" \n    elif (n == 9): \n        return \"2021-05-08\" \n    else: \n        print(\"Error\") \n        return\ndef main(): \n    print(\"Hello! Welcome to the Number Guessing Game!\") \n    print(\"Please think of a number between 1 and 100\") \n    print(\"To see if you can guess it, try to think of a number within 1 and 100\") \n    print(\"For example, if you have 10 guesses, you will have to guess a number within 1 and 100\") \n    print(\"Remember to ask questions about your difficulty\") \n    print(\"You will be asked to enter the number of guesses you want\") \n    print(\"If you get your number wrong, you'll lose a life\") \n    print(\"How many guesses do you want\") \n    num_guesses = 0 \n    difficulty = input() \n    difficulty = int(difficulty) \n    print(\"Well, I'm thinking of a number between 1 and 100.\") \n    while (difficulty!= 0): \n        # print(\"Try again\") \n        guess = input() \n        guess = int(guess) \n        num_guesses += 1 \n        if (guess < 1 or guess > 100): \n            print(\"Error\") \n            difficulty = input() \n            continue \n        elif (guess < 1 or guess > 100): \n            print(\"Error\") \n            difficulty = input() \n            continue \n        elif (guess < 1 or guess > 100): \n            print(\"Error\") \n            difficulty = input() \n            continue \n        else: \n            print(\"Number is within 1 and 100\") \n            print(\"Your guess was\", guess) \n            break \n    if (num_guesses < difficulty): \n        print(\"Your number was less than the correct answer\") \n        print(\"I was thinking of number between 1 and 100\") \n        print(\"You will be asked again in\", (num_guesses - difficulty), \"attempts\") \n    else: \n        print(\"Your number was more than the correct answer\") \n        print(\"I was thinking of number between 1 and 100\") \n        print(\"You will be asked again in\", (num_guesses - difficulty), \"attempts\") \n    print(\"Game over\") \nmain() \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color!= pattern:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if p[0]!= colors[0] and p[1]!= colors[1]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {color: 0 for color in colors}\n    pattern_count = {pattern: 0 for pattern in patterns}\n    for color, _ in colors:\n        for pattern, count in patterns:\n            if pattern in color:\n                color_count[color] += count\n            pattern_count[pattern] += count\n    return color_count == pattern_count\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not is_pattern_same(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #Initialise\n    res=False\n    #Check if all the patterns have to be same\n    for pattern in patterns:\n        #If the pattern is a single color\n        if len(pattern)==1:\n            res=True\n            #If all colors are same\n            for color in colors:\n                if pattern[0]!=color:\n                    res=False\n                    break\n        #If the pattern is a list of same color\n        elif len(pattern)==len(colors):\n            #Check if all colors are same\n            for i in range(len(pattern)):\n                #If all colors are same\n                if not pattern[i] in colors:\n                    res=False\n                    break\n        #If the pattern is a tuple of same color\n        else:\n            #Check if all colors are same\n            for i in range(len(pattern)):\n                #If all colors are same\n                if not pattern[i] in colors:\n                    res=False\n                    break\n        #If all colors are different\n        if res==False:\n            return False\n    #Return\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    res = True\n    patterns.sort()\n    if len(colors)!= len(patterns):\n        return False\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        if len(colors)!= len(pattern):\n            res = False\n            return res\n        for index, color in enumerate(pattern):\n            if color == colors[index] or pattern[index] == colors[index]:\n                res = False\n                break\n    return res\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_temp = [i[0] for i in patterns]\n    \n    for i in range(len(colors)):\n        for j in range(len(patterns_temp)):\n            if colors[i] == patterns_temp[j]:\n                return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    output = []\n    for i in range(len(colors)):\n        output.append(colors[i] in patterns[i])\n    return all(output)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # if len(colors)!= len(patterns):\n    #     return False\n    \n    # for i in range(0, len(patterns)):\n    #     if len(colors)!= len(patterns[i]):\n    #         return False\n    \n    # for i in range(0, len(colors)):\n    #     for j in range(0, len(patterns[i])):\n    #         if colors[i][j]!= patterns[i][j]:\n    #             return False\n    \n    # return True\n    \n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Add your code here\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(0, len(test_list), K):\n        if test_list[i] % K!= 0:\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)):\n        if test_list[i] % K == 0:\n            return [test_list[i]]\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # T = list(map(lambda t: tuple(t), test_list))\n    # if T[0] == T[1]:\n    #     return T\n    # return None\n    \n    return list(filter(lambda t: tuple(t) % K == 0, test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    answer = []\n    for tup in test_list:\n        if tup[0] % K == 0:\n            answer.append(tup)\n    return answer\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for test_item in test_list:\n        if not(test_item[0] % K) and test_item[1] % K:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for tuple in test_list:\n        if tuple[0] % K == 0:\n            tuple_list.append(tuple)\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple for tuple in test_list if all(tuple % K == 0 for tuple in test_list)]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda elem: len(elem[0]) % K == 0, test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # This function is already written for you in the write_in_file function\n    return []\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    result = 0\n    while n >= 11: \n        result = result + 1\n        n = n // 10\n    return result % 2 == 1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        print(n, \"is divisible by 11.\") \n    else: \n        print(n, \"is not divisible by 11.\") \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            x += 1\n    if x == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\ndef is_Equal(n): \n    '''\n    Write a python function to check whether a number is equal to itself.\n    '''\n    return n == n\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2, n + 1):\n        if (n % i == 0):\n            return False\n        elif i!= n:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print('the word is even')\n    else:\n        print('the word is odd')\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    if len(words) % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        if s[1]!= s[0] or s[-1]!= s[-2]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) < 4:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s)%2!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) == 1:\n        return \"not a word\"\n    if s[0].lower() == \" \":\n        return \"not a word\"\n    if len(s) == 1 or len(s) % 2!= 0:\n        return \"not a word\"\n    else:\n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # YOUR CODE HERE\n    \n    # Replace this with your code\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return 'no'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return 'Not odd'\n    elif len(s) == 0:\n        return 'Even'\n    elif len(s) == 1:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n): \n        if (n - i) in (n - 1, n - 2): \n            return n - i \n    \n    \n    return 1"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = n-1\n    j = 0\n    while i > 0:\n        i = i - 1\n        j = j + 1\n        if j == 4:\n            j = 0\n    return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    while n % 2 == 0: \n        t += 1\n        n = n // 10 \n    return t \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = []\n    \n    for i in range(1, n + 1):\n        numbers.append(i)\n    \n    return numbers"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(1,n+1):\n        if i == n:\n            return i\n        \n        if a == 1:\n            a = b = c = 1\n            a,b,c = (b,c,a)\n            \n        elif a == 2:\n            a,b = b,a\n            a,b = b,b\n            a,b = b,a\n            a = b\n            \n        elif a == 3:\n            a = c = 1\n            a,b,c = (c,b,a)\n            \n        elif a == 4:\n            a = b = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 5:\n            a = b = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 6:\n            a = b = c = 2\n            a,b = b,a\n            a,b = b,b\n            a,b = b,a\n            a = b\n            \n        elif a == 7:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 8:\n            a = b = c = 2\n            a,b = c,a\n            a,b = c,b\n            a,b = b,a\n            a = b\n            \n        elif a == 9:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 10:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 11:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 12:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 13:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 14:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 15:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 16:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 17:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 18:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 19:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 20:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 21:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 22:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 23:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 24:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 25:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 26:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 27:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 28:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 29:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 30:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 31:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 32:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 33:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 34:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 35:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 36:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 37:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 38:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 39:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 40:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 41:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 42:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 43:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 44:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 45:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 46:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 47:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 48:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 49:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 50:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 51:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 52:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 53:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 54:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 55:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 56:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 57:\n            a = c = 1\n            a,b,c = (c,a,b)\n            \n        elif a == 58:\n            a = b = c = 2\n            a,b,c = (c,a,b)\n            \n        elif a == 59:\n            a = c = "
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # If n is greater than the length of the array, return 0.\n    if n >= len(arr):\n        return 0\n    \n    # Iterate through all the elements of the array.\n    for i in range(n):\n        # For each element, compare the sum of two adjacent elements.\n        # If the sum is greater, return the sum of two adjacent elements.\n        # Otherwise, return 0.\n        sum = 0\n        for j in range(n):\n            sum += arr[j]\n            if sum > 0:\n                break\n        else:\n            return 0\n        \n    # If the sum is equal to zero, return 0.\n    if sum == 0:\n        return 0\n    \n    # If n is odd, return the sum of elements 1 and 3.\n    # If even, return the sum of elements 4 and 6.\n    if n % 2 == 1:\n        return tetrahedral_number(n // 2) + tetrahedral_number(n // 2 + 1)\n    else:\n        return tetrahedral_number(n // 2) + tetrahedral_number(n // 2 + 3"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    k=0\n    while k+1 < n:\n        k=k+1\n        if k==n:\n            continue\n        if n%k==0:\n            return k\n    return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetra_number(n): \n        '''\n        Print the nth tetrahedral number.\n        '''\n        # define the set of variables\n        x = 0\n        n = 1\n        y = 0\n        t = 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n=int(n)\n    x=2\n    for i in range(n):\n        x=x*(i+1)\n    return x\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Write your code here.\n    volume = (4/3) * math.pi * r * r\n    return volume\n    "
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r * math.pi * r * math.pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Your code goes here\n    volume = 4 * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    x = r**3\n    return (4/3)*(x)\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle with a radius of r.\n    '''\n    x = math.pi*r**2\n    return (x)\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that calculates the volume and area of a cylinder.\n    '''\n    v = r*h*(3/2)\n    a = math.pi*(r**2)*(3/2)\n    return (v,a)\ndef area_of_cube(r):\n    '''\n    Write a function that calculates the area of a cube.\n    '''\n    a = math.sqrt(r**2-1)\n    return (a)\ndef volume_of_rectangle(r,h):\n    '''\n    Write a function that calculates the volume and area of a rectangle with\n    the sides of r and h.\n    '''\n    v = 4*math.pi*r*h\n    a = (4/3)*(r*h)\n    return (v,a)\ndef volume_of_triangle(a,b,c):\n    '''\n    Write a function that calculates the volume of a triangle.\n    '''\n    if a==b or a==c or b==c:\n        return(0)\n    else:\n        return(a*b*c)\ndef area_of_grape(r):\n    '''\n    Write a function that finds the area of a grape.\n    '''\n    return (math.pi*r**2*6.5)\ndef volume_of_grape(a):\n    '''\n    Write a function that finds the volume of a grape.\n    '''\n    return (6.5*a)\ndef volume_of_parallelogram(a,b):\n    '''\n    Write a function that finds the volume of a parallelogram.\n    '''\n    return (a*(a-b))\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function that finds the area of a parallelogram.\n    '''\n    return (a*(a-b))\ndef volume_of_trapezoid(a,b,c):\n    '''\n    Write a function that finds the volume of a trapezoid.\n    '''\n    return (a*(a-b))+(b*(b-c))\ndef area_of_trapezoid(a,b,c):\n    '''\n    Write a function that finds the area of a trapezoid.\n    '''\n    return (a*(a-b))+(b*(b-c))\ndef volume_of_pentagon(a,b,c):\n    '''\n    Write a function that finds the volume of a pentagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_pentagon(a,b,c):\n    '''\n    Write a function that finds the area of a pentagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_hexagon(a,b,c):\n    '''\n    Write a function that finds the volume of a hexagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_hexagon(a,b,c):\n    '''\n    Write a function that finds the area of a hexagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_heptagon(a,b,c):\n    '''\n    Write a function that finds the volume of a heptagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_heptagon(a,b,c):\n    '''\n    Write a function that finds the area of a heptagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_octagon(a,b,c):\n    '''\n    Write a function that finds the volume of a octagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_octagon(a,b,c):\n    '''\n    Write a function that finds the area of a octagon.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_star(a,b,c):\n    '''\n    Write a function that finds the volume of a star.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_star(a,b,c):\n    '''\n    Write a function that finds the area of a star.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_tetra(a,b,c):\n    '''\n    Write a function that finds the volume of a tetrahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_tetra(a,b,c):\n    '''\n    Write a function that finds the area of a tetrahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_hexahedron(a,b,c):\n    '''\n    Write a function that finds the volume of a hexahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_hexahedron(a,b,c):\n    '''\n    Write a function that finds the area of a hexahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_octahedron(a,b,c):\n    '''\n    Write a function that finds the volume of a octahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_octahedron(a,b,c):\n    '''\n    Write a function that finds the area of a octahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_dodecahedron(a,b,c):\n    '''\n    Write a function that finds the volume of a dodecahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef area_of_dodecahedron(a,b,c):\n    '''\n    Write a function that finds the area of a dodecahedron.\n    '''\n    return (a*(a-b))+(b*(b-c))+(c*(c-a))\ndef volume_of_nonagon(a,b):\n    '''\n    Write a function that finds the volume of a nonagon.\n    '''\n    return (a*(a-b))+(b*(b-a))\ndef area_of_nonagon(a,b):\n    '''\n    Write a function that finds the area of a nonagon.\n    '''\n    return (a*(a-b))+(b*(b-a))\ndef volume_of_diagonal_line(a,b):\n    '''\n    Write a function that finds the volume of a diagonal line.\n    '''\n    return (a*(a-b))+(b*(b-a))\ndef area_of_diagonal_line(a,b):\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\ndef volume_cylinder(l,r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = (l * r) ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = (side ** 2) * 4\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\ndef volume_cylinder(l,r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = l * r\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\ndef volume_cylinder(l,r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume = (l * r) ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_triangle(side):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume = (4/3) * math.pi * side ** 3\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 5\n    return volume\ndef volume_octagon(side):\n    '''\n    Write a function to calculate the volume of a octagon.\n    '''\n    volume = side ** 6\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * (radius ** 2)\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 5\n    return volume\ndef volume_octagon(side):\n    '''\n    Write a function to calculate the volume of a octagon.\n    '''\n    volume = side ** 6\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = math.pi * side ** 2\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_triangle(side):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_rectangle(width, height):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    volume = width * height\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * radius ** 2\n    return volume\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    volume = side ** 2\n    return volume\ndef volume_pentagon(side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    volume = side ** 4\n    return volume\ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    volume = side ** 5\n    return volume\ndef volume_heptagon(side):\n    '"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r <= 0:\n        return 0\n    volume = (4/3) * 3.14 * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0*3.14159*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.upper()\n    count = 0\n    for i in strr:\n        if i.isalpha():\n            count += ord(i) % 26\n        else:\n            continue\n    return count % 26"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    L = []\n    for i in range(len(strr)):\n        if ord(strr[i]) not in range(65,90):\n            L.append(strr[i])\n        else:\n            L.append(chr(ord(strr[i])-65))\n    L = \"\".join(L)\n    return L\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst_of_chars = []\n    lst_of_chars.extend(ord(i) for i in strr)\n    lst_of_chars.extend(ord(i) for i in strr[::-1])\n    char = chr(int(str(lst_of_chars)[::-1]))\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in range(0, len(strr)):\n        char_sum = char_sum + ord(strr[i])\n    return char_sum % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.upper()\n    list_of_Char = []\n    for i in range(len(strr)):\n        strr[i] = chr(ord(strr[i]) % 26 + 97)\n    for i in range(len(strr)):\n        list_of_Char.append(strr[i])\n    return list_of_Char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    list_char = []\n    for char in strr:\n        if char.isalpha():\n            list_char.append(char)\n    res = int(\"\".join(list_char)) % 26\n    return chr(res)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    res = []\n    for i in range(n):\n        res.append(ord(strr[i]) - ord('A'))\n    return sum(res) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr((ord(strr) - 97) % 26 + 97)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value=0\n    strr_ascii=''\n    for i in strr:\n        ascii_value=ascii_value+ord(i)\n    ascii_value%=26\n    return strr_ascii\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    global ascii_value\n    char_list = list(strr)\n    ascii_value = 0\n    for i in range(len(char_list)):\n        ascii_value += ord(char_list[i])\n    return ascii_value % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 10\n    elif n == 5: \n        return 15\n    elif n == 6: \n        return 20\n    elif n == 7: \n        return 25\n    elif n == 8: \n        return 30\n    elif n == 9: \n        return 35\n    elif n == 10: \n        return 40\n    elif n == 11: \n        return 45\n    elif n == 12: \n        return 50\n    elif n == 13: \n        return 55\n    elif n == 14: \n        return 60\n    elif n == 15: \n        return 65\n    elif n == 16: \n        return 70\n    elif n == 17: \n        return 75\n    elif n == 18: \n        return 80\n    elif n == 19: \n        return 85\n    elif n == 20: \n        return 90\n    elif n == 21: \n        return 95\n    elif n == 22: \n        return 100\n    elif n == 23: \n        return 105\n    elif n == 24: \n        return 110\n    elif n == 25: \n        return 115\n    elif n == 26: \n        return 120\n    elif n == 27: \n        return 125\n    elif n == 28: \n        return 130\n    elif n == 29: \n        return 135\n    elif n == 30: \n        return 140\n    elif n == 31: \n        return 145\n    elif n == 32: \n        return 150\n    elif n == 33: \n        return 155\n    elif n == 34: \n        return 160\n    elif n == 35: \n        return 165\n    elif n == 36: \n        return 170\n    elif n == 37: \n        return 175\n    elif n == 38: \n        return 180\n    elif n == 39: \n        return 185\n    elif n == 40: \n        return 190\n    elif n == 41: \n        return 195\n    elif n == 42: \n        return 200\n    elif n == 43: \n        return 205\n    elif n == 44: \n        return 210\n    elif n == 45: \n        return 215\n    elif n == 46: \n        return 220\n    elif n == 47: \n        return 225\n    elif n == 48: \n        return 230\n    elif n == 49: \n        return 235\n    elif n == 50: \n        return 240\n    elif n == 51: \n        return 245\n    elif n == 52: \n        return 250\n    elif n == 53: \n        return 255\n    elif n == 54: \n        return 260\n    elif n == 55: \n        return 265\n    elif n == 56: \n        return 270\n    elif n == 57: \n        return 275\n    elif n == 58: \n        return 280\n    elif n == 59: \n        return 285\n    elif n == 60: \n        return 290\n    elif n == 61: \n        return 295\n    elif n == 62: \n        return 300\n    elif n == 63: \n        return 305\n    elif n == 64: \n        return 310\n    elif n == 65: \n        return 315\n    elif n == 66: \n        return 320\n    elif n == 67: \n        return 325\n    elif n == 68: \n        return 330\n    elif n == 69: \n        return 335\n    elif n == 70: \n        return 340\n    elif n == 71: \n        return 345\n    elif n == 72: \n        return 350\n    elif n == 73: \n        return 355\n    elif n == 74: \n        return 360\n    elif n == 75: \n        return 365\n    elif n == 76: \n        return 370\n    elif n == 77: \n        return 375\n    elif n == 78: \n        return 380\n    elif n == 79: \n        return 385\n    elif n == 80: \n        return 390\n    elif n == 81: \n        return 395\n    elif n == 82: \n        return 400\n    elif n == 83: \n        return 405\n    elif n == 84: \n        return 410\n    elif n == 85: \n        return 415\n    elif n == 86: \n        return 420\n    elif n == 87: \n        return 425\n    elif n == 88: \n        return 430\n    elif n == 89: \n        return 435\n    elif n == 90: \n        return 440\n    elif n == 91: \n        return 445\n    elif n == 92: \n        return 450\n    elif n == 93: \n        return 455\n    elif n == 94: \n        return 460\n    elif n == 95: \n        return 465\n    elif n == 96: \n        return 470\n    elif n == 97: \n        return 475\n    elif n == 98: \n        return 480\n    elif n == 99: \n        return 485\n    elif n == 100: \n        return 490\n    elif n == 101: \n        return 495\n    elif n == 102: \n        return 500\n    elif n == 103: \n        return 505\n    elif n == 104: \n        return 510\n    elif n == 105: \n        return 515\n    elif n == 106: \n        return 520\n    elif n == 107: \n        return 525\n    elif n == 108: \n        return 530\n    elif n == 109: \n        return 535\n    elif n == 110: \n        return 540\n    elif n == 111: \n        return 545\n    elif n == 112: \n        return 550\n    elif n == 113: \n        return 555\n    elif n == 114: \n        return 560\n    elif n == 115: \n        return 565\n    elif n == 116: \n        return 570\n    elif n == 117: \n        return 575\n    elif n == 118: \n        return 580\n    elif n == 119: \n        return 585\n    elif n == 120: \n        return 590\n    elif n == 121: \n        return 595\n    elif n == 122: \n        return 600\n    elif n == 123: \n        return 625\n    elif n == 124: \n        return 630\n    elif n == 125: \n        return 625\n    elif n == 126: \n        return 630\n    elif n == 127: \n        return 635\n    elif n == 128: \n        return 640\n    elif n == 129: \n        return 645\n    elif n == 130: \n        return 650\n    elif n == 131: \n        return 655\n    elif n == 132: \n        return 660\n    elif n == 133: \n        return 665\n    elif n == 134: \n        return 670\n    elif n == 135: \n        return 675\n    elif n == 136: \n        return 680\n    elif n == 137: \n        return 685\n    elif n == 138: \n        return 690\n    elif n == 139: \n        return 695\n    elif n == 140: \n        return 700\n    elif n == 141: \n        return 705\n    elif n == 142: \n        return 710\n    elif n == 143: \n        return 715\n    elif n == 144: \n        return 720\n    elif n == 145: \n        return 725\n    elif n == 146: \n        return 730\n    elif n == 147: \n        return 735\n    elif n == 148: \n        return 740\n    elif n == 149: \n        return 745\n    elif n == 150: \n        return 750\n    elif n == 151: \n        return 755\n    elif n == 152: \n        return 76"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n + 1\n    i = 0\n    j = 1\n    while n > 1:\n        if j == n:\n            n = n - (i + 1)\n            i = i + 1\n            j = 0\n        else:\n            j = j + 1\n    if i == 0:\n        i = i + 1\n    return i\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #for x in range(n+1):\n    for x in range(n-1):\n        if newman[x] + newman[x+1] == newman[n]:\n            return newman[x+1]\n    return \"Not found\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def sequence_n(n): \n        if n == 0: \n            return None\n        else:\n            return n * sequence_n(n - 1)\n    return sequence_n(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    elif n == 4: \n        return 3\n    elif n == 5: \n        return 4\n    elif n == 6: \n        return 5\n    elif n == 7: \n        return 6\n    elif n == 8: \n        return 7\n    elif n == 9: \n        return 8\n    elif n == 10: \n        return 9\n    else: \n        return n + sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = list(range(1, n+1))\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i-1] == numbers[i]:\n            return numbers[i-1]\n        \n    return numbers[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n%20\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n    elif n == 86:\n        return 86\n    elif n == 87:\n        return 87\n    elif n == 88:\n        return 88\n    elif n == 89:\n        return 89\n    elif n == 90:\n        return 90\n    elif n == 91:\n        return 91\n    elif n == 92:\n        return 92\n    elif n == 93:\n        return 93\n    elif n == 94:\n        return 94\n    elif n == 95:\n        return 95\n    elif n == 96:\n        return 96\n    elif n == 97:\n        return 97\n    elif n == 98:\n        return 98\n    elif n == 99:\n        return 99\n    elif n == 100:\n        return 100\n    elif n == 101:\n        return 101\n    elif n == 102:\n        return 102\n    elif n == 103:\n        return 103\n    elif n == 104:\n        return 104\n    elif n == 105:\n        return 105\n    elif n == 106:\n        return 106\n    elif n == 107:\n        return 107\n    elif n == 108:\n        return 108\n    elif n == 109:\n        return 109\n    elif n == 110:\n        return 110\n    elif n == 111:\n        return 111\n    elif n == 112:\n        return 112\n    elif n == 113:\n        return 113\n    elif n == 114:\n        return 114\n    elif n == 115:\n        return 115\n    elif n == 116:\n        return 116\n    elif n == 117:\n        return 117\n    elif n == 118:\n        return 118\n    elif n == 119:\n        return 119\n    elif n == 120:\n        return 120\n    elif n == 121:\n        return 121\n    elif n == 122:\n        return 122\n    elif n == 123:\n        return 123\n    elif n == 124:\n        return 124\n    elif n == 125:\n        return 125\n    elif n == 126:\n        return 126\n    elif n == 127:\n        return 127\n    elif n == 128:\n        return 128\n    elif n == 129:\n        return 129\n    elif n == 130:\n        return 130\n    elif n == 131:\n        return 131\n    elif n == 132:\n        return 132\n    elif n == 133:\n        return 133\n    elif n == 134:\n        return 134\n    elif n == 135:\n        return 135\n    elif n == 136:\n        return 136\n    elif n == 137:\n        return 137\n    elif n == 138:\n        return 138\n    elif n == 139:\n        return 139\n    elif n == 140:\n        return 140\n    elif n == 141:\n        return 141\n    elif n == 142:\n        return 142\n    elif n == 143:\n        return 143\n    elif n == 144:\n        return 144\n    elif n == 145:\n        return 145\n    elif n == 146:\n        return 146\n    elif n == 147:\n        return 147\n    elif n == 148:\n        return 148\n    elif n == 149:\n        return 149\n    elif n == 150:\n        return 150\n    elif n == 151:\n        return 151\n    elif n == 152:\n        return 152\n    elif n == 153:\n        return 153\n    elif n == 154:\n        return 154\n    elif n == 155:\n        return 155\n    elif n == 156:\n        return 156\n    elif n == 157:\n        return 157\n    elif n == 158:\n        return 158\n    elif n == 159:\n        return 159\n    elif n == 160:\n        return 160\n    elif n == 161:\n        return 161\n    elif n == 162:\n        return 162\n    elif n == 163:\n        return 163\n    elif n == 164:\n        return 164\n    elif n == 165:\n        return 165\n    elif n == 166:\n        return 166\n    elif "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(3.14*r*r,2)\n    \ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return round(3.14*r*r,2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14159*(r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14 * (r**2) * math.pi\ndef surfacearea_cylinder(r, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r * math.pi * height\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r * math.e\ndef volume_cylinder(r, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 4 * math.pi * r * height\ndef volume_triangle(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 3 * r * r\ndef volume_rectangle(l, w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return l * w\ndef volume_oval(r):\n    '''\n    Write a function to find the volume of an oval.\n    '''\n    return 4 * math.pi * (r*r)/3\ndef volume_triangle_sq(r):\n    '''\n    Write a function to find the volume of a triangle squared.\n    '''\n    return 3 * r * r\ndef volume_triangle_cub(r):\n    '''\n    Write a function to find the volume of a triangle cubed.\n    '''\n    return 3 * r * r * r\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of an ellipse.\n    '''\n    return 4 * math.pi * r\ndef volume_ellipse(a, b, c, d):\n    '''\n    Write a function to find the volume of an elliptical surface.\n    '''\n    return (a * d) + (b * c)\ndef volume_quadrilateral(a, b, c, d):\n    '''\n    Write a function to find the volume of a quadrilateral.\n    '''\n    return (a * d) + (b * c)\ndef volume_rhombus(a, b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return (a * b)\ndef volume_circle_triangle(r):\n    '''\n    Write a function to find the volume of a circle triangle.\n    '''\n    return 3.14 * (r**2) * math.pi\ndef volume_rectangle_triangle(l, w):\n    '''\n    Write a function to find the volume of a rectangle triangle.\n    '''\n    return l * w * math.pi\ndef volume_square(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return 4 * math.pi * (r**2)\ndef volume_rectangle_square(l, w):\n    '''\n    Write a function to find the volume of a rectangle square.\n    '''\n    return l * w * math.pi\ndef volume_square_square(l, w):\n    '''\n    Write a function to find the volume of a rectangle rectangle square.\n    '''\n    return l * l * w * math.pi\ndef volume_square_cub(l, w):\n    '''\n    Write a function to find the volume of a rectangle cubed.\n    '''\n    return l * l * w * math.pi * 3\ndef volume_triangle_triangle_cub(l, w):\n    '''\n    Write a function to find the volume of a triangle cubed triangle.\n    '''\n    return 3 * l * w * math.pi * 3\ndef volume_square_triangle_cub(l, w):\n    '''\n    Write a function to find the volume of a rectangle cubed triangle.\n    '''\n    return l * l * w * math.pi * 3\ndef volume_cube(l, w):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return 4 * l * w * math.pi\ndef volume_cuboid(a, b, c, d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return (a * b * c * d)\ndef volume_cuboid_numbers(n):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids.\n    '''\n    return n * n * n * n * n * n\ndef volume_cuboid_square_numbers(n):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids with square numbers.\n    '''\n    return n * n * n * n * n * n\ndef volume_cube_numbers(n):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids.\n    '''\n    return n * n * n * n\ndef volume_cube_square_numbers(n):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids with square numbers.\n    '''\n    return n * n * n * n\ndef volume_cuboid_square_triangle_numbers(l, w):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids with square triangles.\n    '''\n    return (l * w) * (l * w) * (l * w)\ndef volume_cube_square_triangle_numbers(l, w):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids with square triangles.\n    '''\n    return (l * w) * (l * w) * (l * w)\ndef volume_cuboid_triangle_square_numbers(l, w):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids with square triangles.\n    '''\n    return (l * w) * (l * w) * (l * w)\ndef volume_cuboid_triangle_square_triangle_numbers(l, w):\n    '''\n    Write a function to find the volume of a cuboid with given number of cuboids with square triangles.\n    '''\n    return (l * w) * (l * w) * (l * w) * (l * w)\ndef volume_square_triangle_square_numbers(l, w):\n    '''\n    Write a function to find the volume of a square with given number of triangles and squares.\n    '''\n    return l * w * (l * w)\ndef volume_square_triangle_square_numbers(l, w):\n    '''\n    Write a function to find the volume of a square with given number of triangles and squares.\n    '''\n    return l * w * (l * w)\ndef volume_cube_square_triangle_numbers(l, w):\n    '''\n    Write a function to find the volume of a cube with given number of triangles and squares.\n    '''\n    return l * w * (l * w)\ndef volume_cube_square_triangle_square_numbers(l, w):\n    '''\n    Write a function to find the volume of a cube with given number of triangles and squares.\n    '''\n    return l * w * (l * w) * (l * w)\ndef volume_triangle_square_cuboid_numbers(l, w):\n    '''\n    Write a function to find the volume of a triangle cuboid with given number of triangles and squares.\n    '''\n    return (l * w) * (l * w) * (l * w) * (l * w) * (l * w)\ndef volume_square_triangle_cuboid_numbers(l, w):\n    '''\n    Write a function to find the volume of a triangle cuboid with given number of triangles and squares.\n    '''\n    return (l * w) * (l * w) * (l * w) * (l * w) * (l * w)\ndef volume_square_triangle_cuboid_square_numbers(l, w):\n    '''\n    Write a function to find the volume of a triangle cuboid with given number of triangles and squares.\n    '''\n    return (l * w) * (l * w) * (l * w) * ("
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return 0.5 * math.pi * (r ** 2)\ndef spherearea(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return 4.0 * math.pi * r ** 2\ndef surfacearea_sphere(r):\n    '''\n    Write a function that computes the surface area of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return (spherearea(r) * r * spherearea(1 - r))\ndef surfacearea(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return (spherearea(r) * math.pi) * (1.0 - r)\ndef volume(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return (spherearea(r) * math.pi * (1.0 - r))\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return (volume(r) * r * volume(1 - r))\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * math.pi * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * math.pi * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * (1.0 - r)\ndef volume_sphere(r):\n    '''\n    Write a function that computes the volume of a sphere.\n    '''\n    # your code goes here\n    # return your code\n    return volume(r) * (1.0 - r) * ("
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    a = 2 * (r * r * (1 + 8 * r * r) ** 0.5)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*r**3\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.1415\n    return pi * (r ** 2) * (2 * math.pi)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # TODO: Fill this function\n    surfaceArea = 4/3 * math.pi * r**3\n    return surfaceArea\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Write your code here\n    sum = 0\n    \n    for i in range(n+1):\n        if i == 0 or i == n:\n            sum += i\n        else:\n            sum += (i*(i+1))/2\n        \n    return sum\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = n%6\n    if h==0:\n        h=3\n        n//=3\n    else:\n        h=h-1\n    return n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    while (i**2 <= n):\n        if (i**2 == n):\n            return i\n        else:\n            i = i**2\n    return -1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**3 - 4*n**2 + (2*n + 1)*(3*n + 2))**(1/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # corner cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    # base case\n    if n == 3:\n        return 9\n    # recursive case\n    else:\n        return (centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)) % 10\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return \n    return (4 * n * (n + 1) + (n * (n - 1))) // 6\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # return\n    return\n    # a = 0\n    # b = 0\n    # for i in range(1,n+1):\n    #     if i % 3 == 0:\n    #         a = a + b\n    #         b = 0\n    #     if i % 6 == 0:\n    #         a = a + b\n    #         b = 0\n    #     if i % 3 == 0:\n    #         a = a + b\n    # return a\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 6:\n        return n\n    return n + (n % 6)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return None\n    else:\n        return n + n * (n + 1) / 2\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {**dict1, **dict2, **dict3}\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n    \n    for key in d1.keys():\n        d1[key] = merge_dictionaries_one(d1[key], d2[key], d3[key])\n    \n    for key in d2.keys():\n        d2[key] = merge_dictionaries_one(d2[key], d1[key], d3[key])\n    \n    for key in d3.keys():\n        d3[key] = merge_dictionaries_one(d3[key], d1[key], d2[key])\n    return d1\n    \ndef merge_dictionaries_one(dict1, dict2, dict3):\n    '''\n    Write a function to merge dictionaries with equal keys.\n    '''\n    for key in dict1:\n        dict1[key] = merge_dictionaries_two(dict1[key], dict2[key], dict3[key])\n    return dict1\n    \ndef merge_dictionaries_two(dict1, dict2, dict3):\n    '''\n    Write a function to merge dictionaries with equal keys.\n    '''\n    for key in dict2:\n        dict2[key] = merge_dictionaries_two(dict2[key], dict1[key], dict3[key])\n    return dict2\n    \ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge dictionaries with equal keys.\n    '''\n    for key in dict1:\n        dict1[key] = merge_dictionaries_two(dict1[key], dict2[key], dict3[key])\n    return dict1\n    \ndef merge_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to merge dictionaries with equal keys.\n    '''\n    for key in dict2:\n        dict2[key] = merge_dictionaries_two(dict2[key], dict1[key], dict3[key])\n    return dict2\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge three dictionaries into a single dictionary\n    dict1 = collections.OrderedDict(dict1)\n    dict2 = collections.OrderedDict(dict2)\n    dict3 = collections.OrderedDict(dict3)\n    merged = {k:v for k,v in dict1.items() if k in dict2.keys() and k in dict3.keys()}\n    merged.update(dict2)\n    merged.update(dict3)\n    merged.update(dict1)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys_1 = dict1.keys()\n    keys_2 = dict2.keys()\n    keys_3 = dict3.keys()\n    for key in keys_1:\n        dict1[key] = merge_dictionaries_three(dict1[key], dict2[key], dict3[key])\n    for key in keys_2:\n        dict2[key] = merge_dictionaries_three(dict2[key], dict3[key], dict1[key])\n    for key in keys_3:\n        dict3[key] = merge_dictionaries_three(dict3[key], dict1[key], dict2[key])\n    return dict1, dict2, dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge key-value pairs\n    # key - value of dict1\n    # dict_3 = {**dict1,**dict2, **dict3}\n    # key - value of dict2\n    # dict_3 = {**dict1,**dict2}\n    dict_3 = dict1.copy()\n    dict_3.update(dict2)\n    dict_3.update(dict3)\n    return dict_3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {\n        k:v for k,v in dict1.items() if k in dict2 and dict2[k] == dict3[k]\n    }\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key, val in dict2.items():\n        if key in dict1:\n            if type(val) is dict:\n                dict4.update(dict1[key])\n            else:\n                dict4[key] = val\n        else:\n            dict4[key] = val\n    for key, val in dict3.items():\n        if key in dict4:\n            if type(val) is dict:\n                dict4[key] = merge_dictionaries_three(dict4[key], dict3[key], val)\n            else:\n                dict4[key] = val\n        else:\n            dict4[key] = val\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merge=dict1.copy()\n    for k, v in dict2.items():\n        if k not in dict_merge:\n            dict_merge[k]=v\n        else:\n            dict_merge[k]=dict_merge[k]+v\n    for k, v in dict3.items():\n        if k not in dict_merge:\n            dict_merge[k]=v\n        else:\n            dict_merge[k]=dict_merge[k]+v\n    return dict_merge\ndef dictionary_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    return merge_dictionaries_three(dict1,dict2, dict1)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge dictionaries\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = collections.Counter(list1)\n    return my_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # remove blanks from the string\n    str_lst = []\n    for i in list1:\n        if i!= \" \":\n            str_lst.append(i)\n    # convert string into set\n    set_lst = set(str_lst)\n    # convert string into dictionary\n    dic_lst = dict.fromkeys(set_lst, 0)\n    for i in str_lst:\n        dic_lst[i] += 1\n    return dic_lst\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create empty dictionary\n    freq_dict = collections.Counter(list1)\n    # print(freq_dict)\n    # find the max element of the dictionary\n    max_freq_key = list(freq_dict.keys())[0]\n    # print(max_freq_key)\n    # create a list for the frequencies of the max frequency\n    freq_list = []\n    # create a new list for the frequency of all the keys\n    freq_list.append(freq_dict[max_freq_key])\n    # sort the list\n    freq_list.sort()\n    # print(freq_list)\n    # create a dictionary with all the keys and their frequencies\n    freq_dict = {}\n    for i in range(len(freq_list)):\n        freq_dict[freq_list[i][0]] = freq_list[i][1]\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #Initialize count\n    count = {}\n    \n    #Loop through list\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\ndef find_max_freq(list1):\n    '''\n    Write a function to get the maximum number of occurence of an element in a list.\n    '''\n    max_count = 0\n    max_elem = 0\n    for elem in list1:\n        if elem > max_elem:\n            max_elem = elem\n        if elem == max_elem:\n            max_count += 1\n    return max_count\ndef avg_freq(list1):\n    '''\n    Write a function to get the average frequency of all the elements in a list.\n    '''\n    avg_freq = 0\n    freq_count = freq_count(list1)\n    for elem in freq_count:\n        avg_freq += elem\n    return avg_freq/len(freq_count)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency={}\n    for i in list1:\n        if i in frequency:\n            frequency[i]+=1\n        else:\n            frequency[i]=1\n    return frequency\n    \ndef get_common_elements(list1,list2):\n    '''\n    Write a function to get the common elements in a list, a new list, returned as a dictionary.\n    '''\n    \n    c_list1 = collections.Counter(list1)\n    c_list2 = collections.Counter(list2)\n    common_elements = collections.Counter(list1) & collections.Counter(list2)\n    return common_elements\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    max=N\n    for i in range(1,N+1):\n        if N%i==0:\n            return i\n        if N%i==0:\n            if max>N/i:\n                max=N/i\n    return max\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    for i in range(N):\n        if num == N:\n            return i\n        num = N - num\n        if num == 0:\n            return i\n    else:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def find_closest(arr,target):\n        if len(arr)==0:\n            return -1\n        if len(arr)==1:\n            return arr[0]\n        mid=len(arr)//2\n        if arr[mid]==target:\n            return mid\n        if arr[mid]>target:\n            return find_closest(arr[:mid],target)\n        else:\n            return find_closest(arr[mid+1:],target)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    start, end = 1, N\n    closest = float('inf')\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < N:\n            start = mid+1\n        elif mid > N:\n            end = mid-1\n        else:\n            closest = mid\n            break\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(1,N+1):\n        #print(N)\n        if i < N:\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N)\n            print(N"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 100\n    for i in range(0, N):\n        if closest > abs(i):\n            closest = abs(i)\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    closest = 0\n    \n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    \n    while True:\n        \n        if N == 2:\n            return 1\n        \n        if N % 2 == 0:\n            if abs(closest - N) <= abs(closest - n):\n                closest = N\n                \n        if N % 2 == 1:\n            if abs(closest - N) <= abs(closest - n):\n                closest = N\n                \n        n = n // 2\n        \n        if n == 1:\n            return closest"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(N):\n        if smallest > i:\n            smallest = i\n    return smallest\ndef brute_force(N):\n    '''\n    Given a number N, find the closest number for N.\n    '''\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    else:\n        for i in range(2, N):\n            if N % i == 0:\n                break\n        else:\n            return N\n    return brute_force(N-1) + brute_force(N-2) + N\ndef smallest_and_closest(N):\n    '''\n    Find the closest number for N that is smallest and\n    the smallest number that is closest to N.\n    '''\n    smallest = N\n    closest = N\n    if N == 1:\n        return 1\n    for i in range(2, N):\n        if N % i == 0:\n            break\n        if smallest > i:\n            smallest = i\n    for i in range(smallest, N):\n        if N % i == 0:\n            break\n        if closest > i:\n            closest = i\n    return closest, smallest, N\ndef main():\n    '''\n    Test your code with the following inputs.\n    N = 3\n    assert(closest_num(3) == 3)\n    N = 2\n    assert(closest_num(2) == 1)\n    N = 2\n    assert(closest_num(2) == 1)\n    N = 2\n    assert(closest_num(2) == 1)\n    '''\n    N = int(input())\n    assert(closest_num(N) == N)\n    print(closest_num(N))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for n in range(1, N+1):\n        if n < N and n!= 0:\n            if n == n :\n                print(n)\n            else :\n                print(n)\n            print(closest_num(n) + 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        print(\"Please enter a positive number\")\n        return -1\n    if N > 10:\n        print(\"Please enter an integer less than 10\")\n        return -1\n    return min(N, N-N)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict_1 = {}\n    for word in list1:\n        if word in dict_1:\n            dict_1[word] = dict_1[word] + 1\n        else:\n            dict_1[word] = 1\n    longest_word = max(dict_1, key=dict_1.get)\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for word in list1:\n        print('Word length:', len(word))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"Start writing the function\")\n    print(\"LENGTH OF LONGEST WORDS: \", max(list1, key = len))\n    print(\"\\n\")\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    '''\n    # using iterative approach\n    # temp = ''\n    # for i in range(len(list1)):\n    #     temp = temp + list1[i]\n    #     print(temp)\n    # if temp.count(temp[0]) > len(temp):\n    #     print(' '.join(temp))\n    # else:\n    #     print(' '.join(temp).split(' '))\n    #     print(' '.join(temp).split(' ').index(temp[0]))\n    # return len(temp)\n    \n    # using recursion\n    return max(len(i) for i in list1)\n    '''\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list_length = []\n    for i in list1:\n        if len(i) > len(list_length):\n            list_length = i\n    return len(list_length)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # set a max length variable\n    max_length = 0\n    # iterate over list of strings\n    for i in list1:\n        # set a length variable\n        length = len(i)\n        # check if the length is greater than the max\n        if length > max_length:\n            max_length = length\n    # return the length of the longest word\n    return max_length\n    # x = range(len_log(list))\n    # return len(max(x))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if (sub_str in str1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start_pos = 0\n    j = 0\n    while j < len(sub_str):\n        if (sub_str[j] in str1) and (j + len(sub_str) > len(str1)):\n            if (sub_str[j + 1:j + 1 + len(sub_str)] in str1) and (j + 1 + len(sub_str) > len(str1)):\n                start_pos = j + 1\n                j = 0\n        j += 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    #Loop through each element in the list\n    while (i < len(str1)):\n        if (str1[i] == sub_str):\n            #Find the index of that substring\n            #Return -1 if not found\n            j = i\n            #Loop through until we reach the end of the string\n            while (j < len(str1) and str1[j] == sub_str):\n                j+=1\n            #If we found the substring, then return the index of that substring\n            return (j - i)\n        i += 1\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Solution:\n    # count = {}\n    # for i in range(len(str1)):\n    #     if str1[i:i+len(sub_str)] in count:\n    #         count[str1[i:i+len(sub_str)]] += 1\n    #     else:\n    #         count[str1[i:i+len(sub_str)]] = 1\n    # for i in count:\n    #     if count[i] == len(sub_str):\n    #         return True\n    # return False\n    # Time: O(n*m)\n    # Space: O(1)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # create list with indices of each character\n    sub_str_indices = list(map(lambda x: x.index, sub_str))\n    # check if there are any sub strings\n    if len(sub_str_indices) > 0:\n        # return true if there are no common characters\n        return all(str1[i:j].index(sub_str[i])!= j for i,j in zip(sub_str_indices,sub_str_indices[1:]))\n    else:\n        # return false\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1[:sub_str[0]]==sub_str:\n        return True\n    elif str1[:sub_str[-1]]==sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # split the string and store the value in a list\n    splitted_str = list(str1)\n    splitted_str_list = list(str1)\n    \n    # loop through the list to check each character in the string\n    for char in sub_str:\n        # loop through the splitted_str list\n        for i in range(len(splitted_str)):\n            # check if the current character is in the list\n            if char in splitted_str[i]:\n                # if the current character is found, remove it from the list\n                splitted_str_list.remove(splitted_str[i])\n                # if the list is empty, remove the current character\n                if splitted_str_list == []:\n                    splitted_str_list.remove(splitted_str[i])\n            # if the current character isn't in the list, keep adding it to the list\n            else:\n                splitted_str_list.append(char)\n        \n        # if the splitted_str list is empty, remove the substring from the list\n        if splitted_str_list == []:\n            splitted_str_list.remove(char)\n        \n    # return the list of characters\n    return splitted_str_list\n    "
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    for i in range(len(str1)-len(sub_str) +1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #create an empty list\n    n = len(sub_str)\n    list_of_substrings = []\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # your code goes here\n    # initialize\n    d={}\n    # loop over strings\n    for i in range(len(str1)):\n        # check if substring is present in dictionary\n        # initialize empty dictionary\n        d[i]=[]\n    # loop over strings\n    for i in range(len(str1)):\n        # if current substring is present in dictionary\n        if str1[i:i+len(sub_str)]==sub_str:\n            # get value of string\n            # append to list of values\n            d[i]=str1[i:i+len(sub_str)]\n    # check if all strings are present in dictionary\n    if not d:\n        return False\n    # check if substring is present in dictionary\n    return all(d.get(i)==sub_str for i in range(len(d)))\n        \n    "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: \n        return False \n    elif n % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n >= 0 and n <= 9):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True \n    if n < 0: \n        return False \n    \n    divisors = [] \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i) \n            divisors.append(int(n/i)) \n            return True \n    return False \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_undulating(n - 1)\n    else:\n        return is_undulating(n // 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n>=2 and n%3==0 and n%4==0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n1 = n % 10\n    n2 = n // 10 % 10\n    if (n1 == n2) or (n1 < n2) or (n1 > n2) or (n1 == n2) or (n1 == n2):\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_1(n): \n        '''\n        Given a number, determine whether the given number is undulating or not.\n        '''\n        if n >= 10 and n <= 99:\n            return True\n        else:\n            return False\n    \n    def is_undulating_2(n): \n        '''\n        Given a number, determine whether the given number is undulating or not.\n        '''\n        if n >= 10 and n <= 99:\n            if n % 2 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n<=1: \n        return n==1\n    if n%10==0 and n>=2: \n        return n%10==0 and n%10==10\n    return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Write your code here.\n    if n == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if a==0:\n        return 0\n    if b<0:\n        return 0\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    def _power(a,b):\n        if a == 0:\n            return 0\n        elif b == 0:\n            return 1\n        elif b == 1:\n            return a\n        else:\n            return a*_power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b == 0):\n        return a\n    else:\n        return a*power(b,a-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = test_list[0][1]\n    index_of_min = 0\n    for index, item in enumerate(test_list):\n        if item[1] < min_value:\n            min_value = item[1]\n            index_of_min = index\n    return index_of_min\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][j] < test_list[i][1]:\n                minimum.append((test_list[i][0], test_list[j][0]))\n    minimum.sort()\n    return minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = test_list[0][1]\n    for i in test_list:\n        if smallest_second > i[1]:\n            smallest_second = i[1]\n    return smallest_second\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_second = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_second:\n            min_second = test_list[i][1]\n    return min_second\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the greatest second value.\n    '''\n    max_second = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] > max_second:\n            max_second = test_list[i][1]\n    return max_second\ndef index_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all values in the list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum = sum + test_list[i][1]\n    return sum\ndef index_mean(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mean of all values in the list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum = sum + test_list[i][1]\n    return sum/len(test_list)\ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list.\n    '''\n    if len(test_list)%2 == 0:\n        median = (test_list[(len(test_list)-1)//2]+test_list[(len(test_list)-1)//2-1])/2\n        return median\n    else:\n        median = test_list[(len(test_list)-1)//2]\n        return median\ndef index_median_pivot(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    pivot = sorted(test_list, key = itemgetter(1))\n    median = pivot[len(pivot)//2]\n    return median\ndef index_median_pivot_p(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list)\n    return median\ndef index_median_pivot_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    pivot = sorted(test_list, key = itemgetter(0))\n    median = pivot[len(pivot)//2]\n    return median\ndef index_median_pivot_q(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list)\n    return median\ndef index_median_pivot_p_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_pivot_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_pivot_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_pivot_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_pivot_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_pivot_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = False)\n    return median\ndef index_median_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = False)\n    return median\ndef index_median_q_d(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = False)\n    return median\ndef index_median_q_d_p(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_q_d_p(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_q_d_p(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_q_d_p(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_q_d_p(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n    median = index_median_pivot(test_list, reverse = True)\n    return median\ndef index_median_pivot_q_d_p(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all values in the list in the same order as they were sorted.\n    '''\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_tuples = sorted(test_list, key=itemgetter(1))\n    return sorted_tuples[0][0]\n    \ndef index_second_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second value of the tuple with the smallest third value.\n    '''\n    sorted_tuples = sorted(test_list, key=itemgetter(1,2))\n    return sorted_tuples[1][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Write your code here\n    dic = {}\n    for x in test_list:\n        dic[x[0]] = x[1]\n    return min(dic, key=dic.get)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # create list of tuples\n    # create list of tuples with the first element as smallest second element\n    minimum_list = sorted(test_list, key=itemgetter(1))\n    # create list of tuples with the second element as smallest second element\n    minimum_list2 = sorted(minimum_list, key=itemgetter(1))\n    # if the second element of the list is the smallest\n    if minimum_list2[0][1] == minimum_list2[1][1]:\n        # return the first element of the list\n        return minimum_list[0][0]\n    else:\n        # return the first element of the list with the second element as smallest second element\n        return minimum_list2[1][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #create a variable that will store the lowest value in the tuple\n    #repeat the process until there are no more tuples left.\n    lowest_value = test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #initialize min_index\n    min_index = 0\n    #loop through each tuple\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    #return min_index\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_min = min(test_list, key=itemgetter(1))\n    return min_min[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return min(lst[0], lst[1])\n    else:\n        mid = len(lst)//2\n        left = Find_Min_Length(lst[:mid])\n        right = Find_Min_Length(lst[mid:])\n        return min(left, right)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for item in lst:\n        if len(item) < len(min):\n            min = len(item)\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i][j] < lst[i][j-1]:\n                if min_len > len(lst[i]):\n                    min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    else:\n        return len(lst[0]) \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # make a dictionary and find the length\n    dict = {}\n    for i in lst:\n        for j in i:\n            if j in dict:\n                dict[j] += 1\n            else:\n                dict[j] = 1\n        print(dict)\n    print(\"Length of smallest element is\", min(dict.values()))\n    \n    '''\n    # make a dictionary and find the length\n    dictionary = {}\n    for i in lst:\n        for j in i:\n            if j in dictionary:\n                dictionary[j] += 1\n            else:\n                dictionary[j] = 1\n        print(dictionary)\n    print(\"Length of smallest element is\", min(dictionary.values()))\n    '''\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    '''\n    lst = [9, 5, 3, 6, 4, 7, 2, 1, 0, 8]\n    '''\n    smallest_list_length = 0\n    for i in lst:\n        if len(str(i)) < smallest_list_length:\n            smallest_list_length = len(str(i))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    n = 0\n    l = []\n    for i in lst:\n        l.append(len(i))\n        n += 1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0]\n    for item in lst:\n        if item < min_len:\n            min_len = item\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = 1\n    first_item = lst[0]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divs+= 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n % 2 == 0:\n        return 0\n    else:\n        return 1 + divisor(n-1) + divisor(n-2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = 1\n    for x in range(1,n+1):\n        if n % x == 0:\n            divisors += 1\n    \n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=0\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + divisor(n//2) + divisor(n//2 + 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Can you write a recursive function to calculate the number of divisors of a given integer?\n    # See this: https://www.w3resource.com/python-exercises/python-recursion/python-recursion.php\n    if n == 1:\n        return 1\n    else:\n        return n/divisor(n-1)\n    "
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return (n%2)==0\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for x in range(1,n):\n        if n % x == 0:\n            divisors += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = dict()\n    for l in list1:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_of_frequency = {}\n    for element in list1:\n        if element[0] in dict_of_frequency:\n            dict_of_frequency[element[0]] += 1\n        else:\n            dict_of_frequency[element[0]] = 1\n    return dict_of_frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    freq_dict = {}\n    for sublist in list1:\n        freq_dict[sublist[0]] = Counter(sublist)\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for list1 in list1:\n        if list1 in dict1:\n            dict1[list1] += 1\n        else:\n            dict1[list1] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        for y in x:\n            if y in d:\n                d[y] += 1\n            else:\n                d[y] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for l in list1:\n        for e in l:\n            if e in freq:\n                freq[e] = freq[e] + 1\n            else:\n                freq[e] = 1\n    return freq\n    \n    \n    \ndef k_largest_values(list1, k):\n    '''\n    Write a function that takes a list of integers and returns a list of the k largest values in the list.\n    '''\n    sorted_lst = sorted(list1, reverse=True)\n    return sorted_lst[:k]\n    \n    \ndef top_n(list1, n):\n    '''\n    Write a function that takes a list of numbers and returns the top n numbers.\n    '''\n    sorted_lst = sorted(list1, reverse=True)\n    return sorted_lst[:n]\n    \n    \ndef reverse_it(lst):\n    '''\n    Write a function that takes a list of numbers and returns the reversed list.\n    '''\n    rev_lst = []\n    for i in range(len(lst)):\n        rev_lst.append(lst[i])\n    rev_lst = rev_lst[::-1]\n    return rev_lst\n    \n    \ndef largest_prime_factor(lst):\n    '''\n    Write a function that takes a list of numbers and returns the highest prime factor of the numbers.\n    '''\n    num_lst = []\n    for i in lst:\n        if i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                num_lst.append(i)\n    return max(num_lst)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for i in range(len(list1)):\n        freq_list[list1[i][0]] = list1[i][1]\n        \n    return freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    list2 = []\n    for i in range(len(list1)):\n        for j in list1[i]:\n            list2.append(j)\n            freq_dict[j] = list2.count(j)\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dictionary = {}\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if list1[i][j] not in freq_dictionary:\n                freq_dictionary[list1[i][j]] = 1\n            else:\n                freq_dictionary[list1[i][j]] += 1\n    return freq_dictionary\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_array = []\n    for number in numbers:\n        multiply_array.append(number*number)\n    return multiply_array\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied = []\n    for num in numbers:\n        multiplied.append(num*len(numbers))\n    return multiplied\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Write your code here\n    max = numbers[0]\n    temp = 1\n    for i in numbers:\n        temp *= i\n        if temp > max:\n            max = temp\n    print(f'Maximum number is: {max}')\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    output=[]\n    for i in numbers:\n        output.append(i*len(numbers))\n    return output\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # create list\n    ls = []\n    for i in range(len(numbers)):\n        # append to ls\n        ls.append(numbers[i])\n    # loop\n    while len(ls) > 0:\n        # get the first element\n        number = ls.pop(0)\n        # get length of ls\n        l = len(ls)\n        # find the length of the list\n        for i in range(len(ls)):\n            # find the number to multiply\n            if l - i < number:\n                # delete the number from the list\n                ls.pop(l - i)\n                l = len(ls)\n            else:\n                ls.insert(l - i, number * ls.pop(i))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i] * i)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # your code here\n    \n    num_array = []\n    \n    for number in numbers:\n        num_array.append(number)\n        \n    num_array = num_array[::-1]\n    \n    return num_array\n    \n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return(sum(numbers)) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    # Write your code here\n    num_list = numbers.split()\n    for num in num_list:\n        result.append(int(num) * len(num_list))\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    \n    # Base case.\n    if n < 0:\n        print(\"ERROR\")\n        return\n    \n    # Handling zeros.\n    if n == 0:\n        return '0'\n    \n    # Recursive call.\n    return decimal_to_binary(n//2) + str(n%2)"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #dividing the decimal number into two parts\n    d = divmod(n, 2)\n    # returning the integer part\n    l = d[0]\n    # returning the remainder part\n    r = d[1]\n    # returning the number as a string\n    num = str(l) + str(r)\n    # returning the binary equivalent\n    return num\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n!= 0:\n        res = str(n % 2) + res\n        n = n // 2\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = \"1\" + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    str_binary = '' \n    while n: \n        n, n = n // 2, n % 2\n        str_binary += str(n)\n    return str_binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = bin(n)[2:].rjust(8, '0') \n    return res \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    str = str(n)\n    bin_str = ''\n    for i in str:\n        bin_str += format(ord(i), 'b')\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = []\n    while n: \n        result.append(n % 2) \n        n = n // 2\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==0:\n        return -1\n    if num==1:\n        return 1\n    if num==2:\n        return 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # An integer is a palindrome if and only if it is equal to its reverse.\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 0\n    smallest_palindrome = 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    end = len(str(num)) - 1\n    if num <= 0:\n        return 1\n    elif num < 0 or end < 0:\n        return num\n    \n    mid = (end + num // 2) - 1\n    mid = mid % 2\n    if mid == 0:\n        return num\n    if num == 1:\n        return num\n    if mid == 1:\n        return num\n    if num % 10 == 1:\n        return num * 10\n    if num % 10 == 2:\n        return num * 10 + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 2:\n        print(num)\n        sys.exit(0)\n    \n    # get the mid of the range\n    mid = num // 2\n    \n    # check if the mid point is a palindrome\n    while not mid % 2:\n        mid += 1\n    \n    # make the mid point the end of the range\n    end = num - 1\n    while mid >= 1:\n        if mid % 2:\n            mid -= 1\n        else:\n            mid = mid // 2\n            \n        if end >= 1 and end % 2:\n            end -= 1\n        else:\n            end = end // 2\n    return mid\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # write your code here\n    num_str = str(num)\n    num_str = num_str.rstrip(\"0\")\n    num_str = num_str.lstrip(\"-\")\n    num_str = num_str.replace(\"-\",\"\")\n    palindrome = 0\n    for i in range(len(num_str)):\n        palindrome += int(num_str[i])**2\n    if len(num_str) < 5:\n        palindrome = int(palindrome)\n    else:\n        palindrome = int(palindrome) * 2 + int(num_str)\n        palindrome = str(palindrome)\n        palindrome = palindrome.rstrip(\"0\")\n        palindrome = palindrome.lstrip(\"-\")\n        palindrome = palindrome.replace(\"-\",\"\")\n        palindrome = int(palindrome)\n    return palindrome\ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    # write your code here\n    num_str = str(num)\n    num_str = num_str.rstrip(\"0\")\n    num_str = num_str.lstrip(\"-\")\n    num_str = num_str.replace(\"-\",\"\")\n    palindrome = 0\n    for i in range(len(num_str)):\n        palindrome += int(num_str[i])**2\n    palindrome = int(palindrome) * 2 + int(num_str)\n    return palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # TODO\n    return\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = num\n    if (num - 1) % 2 == 0:\n        smallest = num + 1\n    elif (num - 1) % 3 == 0:\n        smallest = num + 2\n    return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(1,num):\n        if (num%i)==0:\n            return num//i\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def get_next_smallest_palindrome(num):\n        start, end = 0, len(str(num)) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if str(num)[mid]!= str(num)[mid + 1]:\n                start = mid\n            else:\n                end = mid\n        return end + 1\n        \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k == n:\n        return arr[n-1]\n    k = k % n\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def next_element(arr, index, k):\n        # check if index is out of bounds\n        if index > len(arr) - 1:\n            index = index - len(arr)\n        if index >= k:\n            index = index - k\n        return arr[index]\n    \n    i = 0\n    while i < len(arr):\n        if i + k > len(arr) - 1 or k > len(arr) - i - 1:\n            return next_element(arr, i, k)\n        i += 1\n    return arr[i]\n    "
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr)-1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < k:\n            left = mid + 1\n        elif arr[mid] > k:\n            right = mid - 1\n        else:\n            return arr[mid]\n    return 'Not found"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def find_kth_elem(arr, k):\n        # Your code here\n        #\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None or len(arr) == 0 or k > len(arr):\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if array is empty then return null\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # turn to lowercase\n    word = word.lower()\n    # split up words\n    lst = word.split('_')\n    # capitalize first letter of each word\n    for i in range(0, len(lst)):\n        lst[i] = lst[i].capitalize()\n    # return new string\n    return ''.join(lst)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    a = \"\"\n    for char in word:\n        if char == \" \":\n            a = a+char\n        elif char.isupper():\n            a = a+char.upper()\n        elif char.islower():\n            a = a+char.lower()\n    return a\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake = word.split('_')\n    return ''.join(snake[0].title() + ''.join(snake[1:])[0] + '_')\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    word = word.lower()\n    word = word.replace(' ','')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')\n    word = word.replace('-','_')"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for char in word:\n        if char.islower():\n            new_word += char.upper()\n        elif char.isupper():\n            new_word += char.lower()\n        else:\n            new_word += char\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    capitalized_word = word.capitalize()\n    first_word = capitalized_word[0]\n    word = first_word + capitalized_word[1:]\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('-', '_')\n    word = word.replace('_', '-')\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) < 3:\n        return word\n    elif word[0] == '_':\n        return ''.join(i for i in word[1:] if i.islower())\n    else:\n        return word[0].upper() + word[1:]\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    if len(word) < 3:\n        return word\n    else:\n        return word[0].upper() + word[1:]\n    \ndef capitalize(word):\n    '''\n    Write a function to capitalize a word.\n    '''\n    if len(word) < 3:\n        return word\n    else:\n        return word[0].upper() + word[1:]\n    \ndef is_unique_word(word, dictionary):\n    '''\n    Write a function that returns whether a word is unique or not.\n    '''\n    if word in dictionary:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '_' in word:\n        first, second = word.split('_')\n        word = first.title() + second.lower()\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for char in word:\n        if char not in letters:\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = []\n    nums = []\n    # find the first edge of an edge \n    for i in range(m):\n        for j in range(m):\n            if i == j:\n                continue\n            num = n + i\n            nums.append(num)\n            if num not in res:\n                res.append(num)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return n + 1\n    else: \n        return eulerian_num(n, m - 1) + eulerian_num(n - 1, m - 1) \ndef is_eulerian(a, m): \n    '''\n    Return True if a is an Eulerian number of order m.\n    '''\n    if m == 0: \n        return True\n    else: \n        return is_eulerian(a, m - 1) and is_eulerian(a - 1, m - 1)\n    \ndef is_circular(a, m): \n    '''\n    Return True if a is circular of order m.\n    '''\n    if m == 0: \n        return True\n    elif m < 2: \n        return False\n    else: \n        return is_circular(a, m - 1) and is_circular(a + 1, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # If m has exactly 2 distinct primes, then return the\n    # number of primes it has.\n    if m == 2:\n        return 1\n    \n    # A is the smallest prime to n.\n    A = 1\n    \n    # d is the largest prime that has n distinct primes.\n    d = min(n - 1, m)\n    \n    # Find the number of primes n that, when divided by m, have n\n    # distinct primes.\n    for i in range(1, m + 1):\n        \n        # Find primes in n that are smaller than i.\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            # If primes have been found, the number of primes\n            # it has is the number of primes that have at least\n            # one prime that divides i.\n            # \n            # m has a factor of 2.\n            if i % 2 == 0:\n                A += 1\n            else:\n                break\n    \n    # If A is the Eulerian number, then it is the Eulerian\n    # number.\n    return A\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    x = [0]*(n+m)\n    a = []\n    for i in range(n):\n        x[i] = i + 1\n    for i in range(n):\n        for j in range(i, n):\n            if x[j] > x[i]:\n                a.append(j)\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n = int(n)\n    m = int(m)\n    c = 0\n    if (n >= 2):\n        for i in range(1, n-1):\n            if (c == m):\n                return i\n            c += 1\n            \n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    assert n == m and m > 0\n    a = [n]\n    \n    b = []\n    for i in range(2, n):\n        b.append(i)\n        for j in range(n-i):\n            if i in b:\n                break\n            b.append(i+j)\n            a.append(i+j)\n    return a, b\n    \ndef eulerian_euler(a, b):\n    '''\n    a: list of integers\n    b: list of integers\n    '''\n    n = len(a)\n    m = len(b)\n    \n    # Create a list of integers to store the eulerian sequence\n    sequence = [0]*(n+m)\n    \n    # Initialize the eulerian sequence with 0\n    sequence[0] = 0\n    \n    # Fill the eulerian sequence\n    for i in range(1, n):\n        sequence[i] = a[i] + sequence[i-1]\n    \n    for j in range(m-1, -1, -1):\n        sequence[n+j] = b[j] + sequence[n+j+1]\n    \n    return sequence\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = 0\n    c = [0 for i in range(n)]\n    d = [0 for i in range(m)]\n    for i in range(m):\n        if (i!= 0):\n            euler_num += (n-i) * d[i-1]\n    for i in range(n):\n        if i == 0:\n            euler_num += 1\n            continue\n        c[i] = c[i-1] + d[i-1]\n        d[i] = 0\n    return euler_num\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # create a list with all possible values of m for n\n    possible_values = list(range(1, n + 1))\n    # create a dictionary with the value of m as key and the number of its possible values as value\n    eulerian = dict(map(lambda x: (x, possible_values.count(x)), possible_values))\n    # find the Eulerian number\n    return eulerian[m]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    e = []\n    for i in range(0, n):\n        e.append(i)\n    for j in range(0, n):\n        e.append(j + m)\n    for i in range(0, n):\n        e.append(i + m)\n    for i in range(0, n):\n        e.append(i + m + n)\n    for i in range(0, n):\n        e.append(i + m - n)\n    for i in range(0, n):\n        e.append(i - n + m)\n    for i in range(0, n):\n        e.append(i - n - m)\n    for i in range(0, n):\n        e.append(i - n + m - n)\n    for i in range(0, n):\n        e.append(i + m + n + m)\n    for i in range(0, n):\n        e.append(i + m + n - m)\n    for i in range(0, n):\n        e.append(i + m - n + m - m)\n    for i in range(0, n):\n        e.append(i - n + m + m + n + m - m - n - m - m - m - n + m + n + m)\n    for i in range(0, n):\n        e.append(i - n + m - m - m - m + m + m - m + n + n - n - n + m + m + m)\n    for i in range(0, n):\n        e.append(i + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m + m "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize list for Eulerian numbers \n    Euler = [] \n    \n    # Return the values in the order they are stored in a list \n    for i in range(n + 1): \n        for j in range(n + 1): \n            # If the node is not visited \n            if (i == j or i + j == n or i - j == n): \n                # Ignore the visited nodes \n                continue \n            # Else if the node is visited and the next node has no incoming edge \n            elif (i + j < n + 1): \n                # Check if node is visited again \n                if (i + j < n + 1): \n                    # If the next node is a different node than the previous one \n                    if (i + j > m - 1 or j + i < n + 1): \n                        # Add the edge and remove the next node \n                        Euler.append((i + j, j + i)) \n                        Euler.remove((i + j, j + i)) \n                # If the next node is a different node than the previous one \n                else: \n                    # Check if the next node is a different node than the previous one \n                    if (i + j < m - 1 or j + i > n + 1): \n                        # Add the edge and remove the next node \n                        Euler.append((i + j, j + i)) \n                        Euler.remove((i + j, j + i)) \n            # If the node is a different node than the previous one \n            else: \n                # Check if the next node is a different node than the previous one \n                if (i + j < m - 1 or j + i > n + 1): \n                    # Add the edge and remove the next node \n                    Euler.append((i + j, j + i)) \n                    Euler.remove((i + j, j + i)) \n                # If the next node is a different node than the previous one \n                else: \n                    # Check if the next node is a different node than the previous one \n                    if (i + j < m - 1 or j + i > n + 1): \n                        # Add the edge and remove the next node \n                        Euler.append((i + j, j + i)) \n                        Euler.remove((i + j, j + i)) \n    # Remove all the edges \n    Euler = list(dict.fromkeys(Euler))\n    \n    return eulerian_num(n, m - 1) + sum(Euler)"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # just in case of sorting a list with a string\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list')\n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list of lists')\n    # create a new list with sorted sublists\n    new_list = []\n    for sublist in input_list:\n        new_list.append(sublist)\n    # sort the sublists\n    new_list.sort()\n    # return the new sorted list\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #if empty list is given\n    if not input_list:\n        raise Exception('Empty list')\n    \n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = str(input_list[i][j])\n    \n    #if elements are not strings\n    if not all(isinstance(item, str) for item in input_list):\n        raise Exception('Only strings are allowed in sublists')\n    \n    for sub_list in input_list:\n        sub_list.sort()\n    \n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) <= 1:\n        return input_list\n    \n    mid = len(input_list) // 2\n    return sort_sublists(input_list[:mid]) + [sort_sublists(input_list[mid:])]\n    \ndef merge_two_sort_lists(input_list):\n    '''\n    Write a function that accepts a sorted input list and returns a new sorted list.\n    '''\n    if len(input_list) <= 1:\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def swap(l):\n        return [x[1] for x in sorted(l,key=lambda x:x[1])]\n    if len(input_list) > 0:\n        input_list.sort(key=swap)\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: len(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    def helper(input_list, index, output_list):\n        if index >= len(input_list[0]):\n            return output_list.append([])\n        output_list = helper(input_list, index + 1, output_list)\n        output_list.append(input_list[index])\n        return output_list\n    \n    output_list = helper(input_list, 0, [])\n    return output_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sub_list in input_list:\n        for item in sub_list:\n            sorted_list.append(item)\n    return sorted_list\n    \ndef check_palindrome(string):\n    '''\n    Check if a given string is a palindrome.\n    '''\n    string_len = len(string)\n    if string_len < 1 or string_len > 25:\n        return False\n    # get middle index\n    middle = string_len // 2\n    if string[middle] == string[string_len - middle]:\n        return True\n    return False\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        new_list.append([])\n        for item in sublist:\n            new_list[-1].append(item)\n    new_list.sort()\n    return new_list\n    \n    \n    \n    \n    \ndef convert_to_list(input_string):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    return [int(x) for x in input_string.split(',')]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        for sublist_item in sublist:\n            sorted_list.append(sublist_item)\n    return sorted_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # # Access each element in the list\n    # for i in lst:\n    #     if i == True:\n    #         lst[lst.index(i)] = 0\n    # return lst\n        \n    # # Check each element in the list\n    # for i in lst:\n    #     if i == True:\n    #         lst[lst.index(i)] = 1\n    # return lst\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if(i==True):\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i == True:\n            c += 1\n    return c\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Iterate through the list\n    for i in lst:\n        # Check if i is True\n        if i == True:\n            # Increment count\n            count += 1\n    # Return count\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i:\n            cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i == True:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x==True:\n            count+=1\n    print(count)\ndef bool_to_str(lst):\n    '''\n    Write a python function to convert a list of booleans to a string.\n    '''\n    string = ''\n    for x in lst:\n        if x==True:\n            string+= \"True\"\n        else:\n            string+= \"False\"\n    return string\ndef is_string(s):\n    '''\n    Write a python function to check if the string passed is a string.\n    '''\n    if s==\"\":\n        return True\n    else:\n        return False\ndef is_list(lst):\n    '''\n    Write a python function to check if the list passed is a list.\n    '''\n    if len(lst)==0:\n        return True\n    else:\n        return False\ndef is_number(x):\n    '''\n    Write a python function to check if the string passed is a number.\n    '''\n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\ndef get_class(s):\n    '''\n    Write a python function to get the class of the string passed.\n    '''\n    if not is_string(s):\n        return \"Error\"\n    else:\n        return s.__class__.__name__\ndef main():\n    '''\n    Write a python function to test your function.\n    '''\n    lst=[True, False, True, False]\n    print(bool_to_str(lst))\n    print(is_string(\"\"))\n    print(is_string(42))\n    print(get_class(\"True\"))\n    print(get_class(\"False\"))\n    print(is_number(\"12.345\"))\n    print(is_number(\"42.23\"))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return len(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count=count+1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO\n    test_tup = tup_append_list(test_tup, test_list)\n    test_list = []\n    return test_list, test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # We want to iterate through each of the tuples in order and add the elements\n    # to our test_list.\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        if i in test_list:\n            continue\n        else:\n            test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    try:\n        test_list.append(test_tup[0])\n        test_list.append(test_tup[1])\n    except Exception:\n        print(\"Exception occurred\")\n        print(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a tuple to use as a base\n    tup = ()\n    # Loop through the elements of the test_tup and append it to the tup\n    for el in test_tup:\n        tup = tup + (el,)\n    # Return the tuple\n    return tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if isinstance(test_tup, tuple):\n        test_list.append(test_tup)\n        return test_list\n    else:\n        return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup[i] += test_list[i]\n    return test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == 0:\n        return num2 + num3\n    elif num2 == 0:\n        return num1 + num3\n    else:\n        return merge_sorted_list(num1-1,num2,num3-1) + num1 + num2 + num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i=0\n    while i<len(num1):\n        if num1[i]<num2[i] and num2[i]<num3[i]:\n            merged_list.append(num2[i])\n        elif num1[i]>num2[i] and num2[i]<num3[i]:\n            merged_list.append(num1[i])\n        elif num1[i]>num2[i] and num2[i]>num3[i]:\n            merged_list.append(num3[i])\n        elif num1[i]>num2[i] and num2[i]>num3[i]:\n            merged_list.append(num2[i])\n        elif num1[i]>num2[i] and num2[i]>num3[i]:\n            merged_list.append(num3[i])\n        else:\n            merged_list.append(num1[i])\n        i=i+1\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            sorted_list.append(num1[i])\n            i=i+1\n        else:\n            sorted_list.append(num2[j])\n            j=j+1\n    while i<len(num1):\n        sorted_list.append(num1[i])\n        i=i+1\n    while j<len(num2):\n        sorted_list.append(num2[j])\n        j=j+1\n    return sorted_list\ndef mergesort(l):\n    if len(l)<=1:\n        return l\n    mid = len(l)//2\n    left = mergesort(l[:mid])\n    right = mergesort(l[mid:])\n    return merge_sorted_list(left,right,l)\ndef merge_2_lists(num1,num2,num3):\n    '''\n    Write a function that merges two sorted lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            sorted_list.append(num1[i])\n            i=i+1\n        else:\n            sorted_list.append(num2[j])\n            j=j+1\n    while i<len(num1):\n        sorted_list.append(num1[i])\n        i=i+1\n    while j<len(num2):\n        sorted_list.append(num2[j])\n        j=j+1\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_lst = []\n    merge_lst.append(num1)\n    merge_lst.append(num2)\n    merge_lst.append(num3)\n    return merge_lst\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = merge_sorted_list_2d(num1)\n    num2 = merge_sorted_list_2d(num2)\n    num3 = merge_sorted_list_2d(num3)\n    result = []\n    for i in range(0,len(num1)):\n        result.append(num1[i]+num2[i]+num3[i])\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list=[]\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            sorted_list.append(num2[j])\n            j+=1\n        elif num1[i]<num2[j] and num2[j]<num3[k]:\n            sorted_list.append(num2[j])\n            j+=1\n        elif num1[i]<num2[j] and num1[i]<num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            sorted_list.append(num2[j])\n            j+=1\n        elif num1[i]<num2[j] and num2[j]<num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        elif num1[i]<num2[j] and num1[i]<num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        elif num1[i]<num2[j] and num1[i]<num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        else:\n            sorted_list.append(num3[k])\n            k+=1\n    if len(sorted_list)==0:\n        return num3\n    else:\n        return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    \n    num1_sorted_list = []\n    num2_sorted_list = []\n    num3_sorted_list = []\n    \n    for i in range(0,len(num1)):\n        if num1[i] not in num1_sorted_list:\n            num1_sorted_list.append(num1[i])\n    \n    for i in range(0,len(num2)):\n        if num2[i] not in num2_sorted_list:\n            num2_sorted_list.append(num2[i])\n    \n    for i in range(0,len(num3)):\n        if num3[i] not in num3_sorted_list:\n            num3_sorted_list.append(num3[i])\n    \n    merged_list.extend(num1_sorted_list)\n    merged_list.extend(num2_sorted_list)\n    merged_list.extend(num3_sorted_list)\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None and num2==None and num3==None:\n        return None\n    elif num1==None:\n        return num2\n    elif num2==None:\n        return num1\n    elif num3==None:\n        return num1\n    else:\n        l=[]\n        if num1[0]<num2[0]:\n            l.append(num1[0])\n            l.append(num1[1])\n            l.append(num2[0])\n            l.append(num2[1])\n        else:\n            l.append(num2[0])\n            l.append(num2[1])\n            l.append(num1[0])\n            l.append(num1[1])\n        \n        l.append(num3[0])\n        l.append(num3[1])\n        return l\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num2[j] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num1[i] > num2[j] and num2[j] > num3[k]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num2[j])\n            j += 1\n            k += 1\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # If the list is empty, return the empty list\n    if num1 == [] and num2 == [] and num3 == []:\n        return []\n    # If the number of the list is odd, we can't merge the two\n    # lists so we treat them as if they are both empty\n    elif len(num1)%2 == 1:\n        num1.extend(num2)\n        num2 = []\n    # If the number of the list is even, we can't merge the two\n    # lists so we treat them as if they are both empty\n    elif len(num2)%2 == 1:\n        num2.extend(num1)\n        num1 = []\n    # If the number of the list is odd and the list is not empty,\n    # we take the elements from the middle of the two lists,\n    # and merge them in a single list\n    else:\n        num1.extend(num2)\n        num2 = []\n        num1.extend(num3)\n    \n    # Return the merged list\n    return num1 + num2 + num3\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0: \n        return 1\n    elif n==1: \n        return 0\n    else:\n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n=n*(n+1)/2\n    for x in range(int(n)):\n        if s[x]%2:\n            s[x]=s[x]+1\n    return s\nprint(odd_Equivalent('101010',2)"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Your code here\n    for i in range(n//2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-(n%2)):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-(n%2)):\n        print(s[i],end=\" \")\n    print()\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1-i,2):\n        print(s[i],end=\" \")\n    print()\n    for i in range(n-1,n-1"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import time\n    start_time = time.time()\n    result = 0\n    for i in range(0,n):\n        result += (2**i)\n    print(\"Result of oddEquivalent :\",result)\n    end_time = time.time()\n    print(\"Execution time of %s is :\" %(str(end_time - start_time)),str((end_time - start_time)))\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return odd_Equivalent(s, n-1) + odd_Equivalent(s, n-2)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result=0\n    for i in range(n):\n        result+=odd_str(s,i)\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(s.count(n)%2==1): \n        return 0\n    else: \n        x = 0\n        for i in range(len(s)): \n            x = x + (s[i] & 1) \n            s[i] = s[i] >> 1\n        if x == 0: \n            return n \n    return n\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Write your code here\n    a=0\n    b=0\n    for i in range(n):\n        a=a+1\n        b+=a\n    return b\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n=n%4\n    s=s*10\n    res=0\n    for i in range(1,n+1,2):\n        if s%2==0:\n            res+=1\n        s=s//2\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    n = int(n)\n    print(\"n : \",n)\n    print(\"l : \",l)\n    if (n>=0):\n        ans = int(1+((l//2)*2+n-1)/2)\n        return ans\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # TODO: Write a function that takes a nested list and returns the list with unique values\n    #        within a list that have been sorted according to their corresponding indices\n    # Hint: Use a hash table to find out the order of the elements in the list\n    #        (Hint: The list being sorted should have no repeated elements)\n    # Hint: Use a stack to perform this task\n    #        (Hint: You can use a stack because you're not sure if you have a stack or not)\n    # Hint: You can use a queue to work out the order of the elements in the list\n    #        (Hint: You will need to push the element and pop the element at the end to maintain the order)\n    \n    # ToDo: Try to complete this function\n    # 1. Create a hash table to find the order of the elements in the list\n    #    2. Create a stack to perform the ordering of the elements in the list\n    # 3. For each element in the list (i.e. the list in the list)\n    #    4. Pop the element from the stack, and increment the index of the element\n    #    5. Push the element to the queue\n    #    6. If the queue is empty, return the element\n    #        (Hint: You will need to use a queue because you're not sure if you have a queue or not)\n    # 4. Return the order of the elements in the list that are in the queue\n    \n    # TODO: Complete the function that returns the order of the elements in a list in a given nested list\n    #        (Hint: You can use a stack to perform this task, which should be a linear time operation)\n    #        (Hint: You can use a queue to work out the order of the elements in the list)\n    \n    # TODO: Try to complete this function\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common=[]\n    for i in range(len(nestedlist)):\n        common.append(set(nestedlist[i]))\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for nested in nestedlist:\n        for nested2 in nested:\n            if nested2 not in result:\n                result.append(nested2)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    l = []\n    for item in nestedlist:\n        l.append(item)\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] == l[j]:\n                l[i] = None\n    return l\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def list_unique_elements(list_of_lists):\n        '''\n        Return True if all the elements in the lists are unique, else False.\n        '''\n        for l in list_of_lists:\n            if len(l) < 2:\n                continue\n            if l[0] == l[-1]:\n                continue\n            if l[0] not in l:\n                return False\n        return True\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1,len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return\n    common = set()\n    for l in nestedlist:\n        if not l:\n            continue\n        common = common.union(set(l))\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_elements:\n                common_elements.append(j)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested in nestedlist:\n        if nested:\n            common_elements.extend(nested)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        common = nestedlist[0]\n        for i in range(1,len(nestedlist)):\n            if common == nestedlist[i]:\n                common = common[0]\n        return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j==\"\":\n                return True\n    return False\ndef check_vowels(list1):\n    '''\n    Write a function to check whether all characters in a string are vowels or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j not in 'aeiouAEIOU':\n                return False\n    return True\ndef duplicate_check(list1):\n    '''\n    Write a function to check whether the elements of a list are duplicate or not.\n    '''\n    if len(list1)%2==0:\n        for i in range(0,len(list1),2):\n            if list1[i]==list1[i+1]:\n                return True\n    return False\ndef list_to_str(list1):\n    '''\n    Write a function that takes a list of numbers and returns a string of those numbers.\n    '''\n    return''.join(str(i) for i in list1)\ndef is_palindrome(number):\n    '''\n    Write a function to check whether a number is palindrome or not.\n    '''\n    num=str(number)\n    return num[::-1]==num[::-1]\ndef palindrome_test(str1):\n    '''\n    Write a function that takes a string and return true if it is a palindrome or false if not.\n    '''\n    return str1==str(list_to_str(reversed(str_to_list(str1))))\ndef positive_test(list1):\n    '''\n    Write a function that takes a list and return whether all elements of the list are positive or not.\n    '''\n    for i in list1:\n        if i<0:\n            return False\n    return True\ndef list_to_str(list1):\n    '''\n    Write a function that takes a list of numbers and returns a string of those numbers.\n    '''\n    return''.join(str(i) for i in list1)\ndef list_to_str2(list1):\n    '''\n    Write a function that takes a list of numbers and returns a string of those numbers.\n    '''\n    return''.join(str(i) for i in list1)\ndef string_to_int(s):\n    '''\n    Write a function that takes a string of numbers and returns a list of numbers.\n    '''\n    return [int(i) for i in s.split() if i.isdigit()]\ndef list_to_int(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list of integers.\n    '''\n    return [int(i) for i in list1 if i.isdigit()]\ndef list_to_list(l):\n    '''\n    Write a function that takes a list of numbers and returns a list of numbers.\n    '''\n    return [int(i) for i in l if i.isdigit()]\ndef list_to_string(l):\n    '''\n    Write a function that takes a list of numbers and returns a list of strings.\n    '''\n    return [str(i) for i in l if i.isdigit()]\ndef check_user_input(user_input):\n    '''\n    Write a function that takes a user input and return whether it is a palindrome or not.\n    '''\n    #string_to_int(user_input)\n    #list_to_int(user_input)\n    if user_input==\"q\":\n        return False\n    if is_palindrome(user_input):\n        return True\n    return user_input==\"n\"\ndef list_to_string(l):\n    return \" \".join(str(i) for i in l)\ndef int_to_str(x):\n    return [str(i) for i in x]\ndef string_to_str(s):\n    return''.join(i for i in s)\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and return whether the string is a palindrome or not.\n    '''\n    return s==s[::-1]\ndef palindrome_test(s):\n    '''\n    Write a function that takes a string and return whether it is a palindrome or not.\n    '''\n    #return list_to_str2(s)\n    return s==s[::-1]"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for x in i.values():\n            if x == {}:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {} or i == None:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for x in list1:\n        if len(x) == 0:\n            empty = False\n            break\n    if empty:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i) is dict:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    try:\n        list1.clear()\n    except:\n        return(\"Can't clear Empty list\")\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # N is the number of elements in the tuple\n    if len(nums) == 0:\n        return 0\n    # Check if all elements are positive\n    if all(e >= 0 for e in nums):\n        # Initialize an empty string to store the result\n        result = ''\n        # Start at 0 as we already have the first positive element\n        for i in range(0, len(nums)):\n            # Add the element to the result\n            result += str(nums[i])\n        # Return the result\n        return int(result)\n    else:\n        raise ValueError('All elements in nums should be positive')\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    return tuple(nums)\n    \ndef add_to_dict(d, key, val):\n    '''\n    Write a function to update a dictionary if it doesn't already exist.\n    '''\n    if key not in d:\n        d[key] = val\n        return True\n    return False\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # for i in nums:\n    #     print(i)\n    i = 0\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    return nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple) or len(nums) == 0:\n        raise TypeError(\"tuple_to_int requires a tuple of integers\")\n    return sum(map(tuple_to_int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_nums = []\n    for i in nums:\n        int_nums.append(int(i))\n    return int_nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(str(n) for n in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(num for num in nums if num >= 0)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        for j in i:\n            if isinstance(j, list):\n                new_list.append(list_to_float(j))\n            else:\n                new_list.append(j)\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [str.replace(i,'','') for i in test_list]\n    # print(test_list)\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for test_list_item in test_list:\n        for num in test_list_item:\n            float_list.append(float(num))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    temp_list = []\n    for item in test_list:\n        temp_list.append(float(item))\n    return temp_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #return [list_to_float(e) for e in test_list]\n    return [[float(e) for e in element] for element in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def add_to_float(test_list):\n        '''\n        Write a function to return the sum of each element in a list of lists.\n        '''\n        def add_to_float(test_list):\n            result = 0\n            for i in range(len(test_list)):\n                for j in range(len(test_list[i])):\n                    result += test_list[i][j]\n            return result\n        result = add_to_float(test_list)\n        return result\n    def list_to_list(test_list):\n        '''\n        Write a function to return the list of lists after the addition of each element in a list of lists.\n        '''\n        result = []\n        for i in test_list:\n            result.append(i)\n        return result\n    test_list = list_to_list(test_list)\n    return test_list\ndef read_line(filename):\n    '''\n    Read a line from a file and convert it to a list.\n    '''\n    result = []\n    with open(filename) as f:\n        for line in f:\n            result.append(line.rstrip())\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if type(test_list) == str:\n        test_list = test_list.split(',')\n    elif type(test_list) == list:\n        pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in test_list:\n        for y in x:\n            y = float(y)\n            test_list[x].append(y)\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split(\" \")\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string)\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list1 = string.split(' ')\n    return list1\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [x for x in string.split(' ') if x!= '']\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_str = string.split(\" \")\n    list_str = [list_str]\n    return list_str\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left=0\n    right=len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end)//2\n        if arr[mid] == arr[mid - 1]:\n            count += 1\n            start = mid + 1\n        else:\n            end = mid - 1\n    return count\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    result = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            result = i\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == res:\n            res += 1\n        else:\n            res = arr[i]\n            \n    return res\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Sort the list by using the heapsort method.\n    # Use a temporary heap to solve the problem.\n    # Time complexity: O(n log n)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for index, ele in enumerate(arr):\n        counter = 0\n        for item in arr:\n            if index + 1 < len(arr):\n                if arr[index] == arr[index + 1]:\n                    counter += 1\n            if counter == 1:\n                return arr[index]\n    return 'Nothing'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return search_every_occurrence(arr,0,len(arr)-1,lambda x,y: x!=y,arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize an empty set to store the first element\n    first = set()\n    # iterate over the array and push the element into the set\n    for num in arr:\n        if num not in first:\n            first.add(num)\n    # return first element of set, if it exists\n    return first\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return arr.count(arr[0])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_tuple = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                max_product_tuple = (list1[i][0], list1[j][0])\n                break\n            elif list1[i][0] > list1[j][0] and list1[i][1] < list1[j][1]:\n                max_product_tuple = (list1[i][1], list1[j][1])\n                break\n    return max_product_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(list(map(lambda x: max(x), list(map(lambda x: (x[0], -x[1]), zip(list1, list1))))))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    if len(list1)==1:\n        return list1[0][0]\n    tuple1 = list1[0]\n    for tuple2 in list1[1:]:\n        if tuple1[0]>tuple2[0] and tuple2[0]>0:\n            tuple1 = tuple2\n    return max([tuple1[0]*tuple1[1], tuple2[0]*tuple2[1]])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = max(list1)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([max(i) for i in zip(*list1)])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # store the first number in a tuple\n    a = list1[0]\n    # loop through the list to find the maximum number\n    for i in range(1,len(list1)):\n        a = max(a,list1[i])\n    # find the product of the numbers\n    product = a*a\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(list1[i][1] * list1[j][1], max_product)\n    return max_product\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            max_product = max(list1[i][0]*list1[j][0],max_product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #Initialize the sum to be used\n    sum = 0\n    \n    #Iterate through all pairs\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            #Find the sum\n            sum = list1[i] + list1[j]\n            #Add it to the sum\n            sum = sum * (sum)\n            #if it is the highest product\n            if sum > max_product:\n                max_product = sum\n                #Return the highest product\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    amicable_numbers_sum_iter = 0\n    numbers = range(1, limit + 1)\n    for n in numbers:\n        if n not in amicable_numbers:\n            amicable_numbers.append(n)\n            amicable_numbers_sum += n\n        elif n == amicable_numbers_sum_iter:\n            amicable_numbers_sum += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n        elif amicable_numbers_sum_iter!= 0:\n            amicable_numbers_sum_iter += amicable_numbers_sum_iter\n            amicable_numbers_sum_iter = 0\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    is_amicable = True\n    amicable_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [i for i in range(1,limit+1) if is_amicable(i)]\n    amicable_numbers.sort()\n    \n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    num_list = []\n    for i in range(1, limit+1):\n        if i == 1 or i == 2:\n            num_list.append(i)\n        else:\n            num_list.append(sum)\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n                elif i % j == 0:\n                    num_list.append(i)\n                    break\n    return sum(num_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_values = 0\n    amicable_numbers = []\n    for i in range(limit):\n        num = i + 1\n        value = num - 1\n        if num!= 1 and num!= num - 1 and num!= num - 2 and num!= num - 3 and num!= num - 4 and num!= num - 5 and num!= num - 6 and num!= num - 7 and num!= num - 8 and num!= num - 9 and num!= num - 10 and num!= num - 11 and num!= num - 12 and num!= num - 13 and num!= num - 14 and num!= num - 15 and num!= num - 16 and num!= num - 17 and num!= num - 18 and num!= num - 19 and num!= num - 20 and num!= num - 21 and num!= num - 22 and num!= num - 23 and num!= num - 24 and num!= num - 25 and num!= num - 26 and num!= num - 27 and num!= num - 28 and num!= num - 29 and num!= num - 30 and num!= num - 31 and num!= num - 32 and num!= num - 33 and num!= num - 34 and num!= num - 35 and num!= num - 36 and num!= num - 37 and num!= num - 38 and num!= num - 39 and num!= num - 40 and num!= num - 41 and num!= num - 42 and num!= num - 43 and num!= num - 44 and num!= num - 45 and num!= num - 46 and num!= num - 47 and num!= num - 48 and num!= num - 49 and num!= num - 50:\n            sum_values += num\n            amicable_numbers.append(num)\n    return sum_values, amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum=0\n    \n    amicable_numbers=[2,3,5,7,11]\n    for number in amicable_numbers:\n        if is_amicable(number,limit):\n            sum+=number\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    if limit == 0:\n        return 0\n    \n    for n in range(1, limit+1):\n        if n % 2 == 0:\n            sum += n\n        else:\n            if sum % n == 0:\n                sum += sum // n\n            else:\n                sum += sum\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    a = 1\n    while a < limit:\n        if (a%2) == 0:\n            sum += a\n            a += 1\n        else:\n            if a%a == 0:\n                sum += a\n            a += 2\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    def is_amicable(number):\n        if (number < 1000):\n            if (number % number == 0):\n                return True\n            return False\n        else:\n            for i in range(1, number + 1):\n                if (number % i == 0):\n                    return True\n            return False\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z=complex(a,b)\n    return (cmath.acos(z.real)+cmath.pi/2)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b)\ndef angle_period(a,b):\n    '''\n    Write a function to get the period of a complex number.\n    '''\n    return cmath.polar(a*b)\ndef conjugate(a,b):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return complex(a.real, -a.imag)\ndef conjugate_to_real(a,b):\n    '''\n    Write a function to convert a complex number to real number.\n    '''\n    return complex(a.real, b.imag)\ndef conjugate_to_imag(a,b):\n    '''\n    Write a function to convert a complex number to imaginary number.\n    '''\n    return complex(a.imag, -a.real)\ndef conjugate_to_complex(a,b):\n    '''\n    Write a function to convert a complex number to complex number.\n    '''\n    return complex(b.real, -b.imag)\ndef complex_to_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return angle_complex(conjugate(a,b),conjugate(b,a))\ndef period(a,b):\n    '''\n    Write a function to get the period of a complex number.\n    '''\n    return angle_period(conjugate_to_complex(a,b),conjugate_to_complex(b,a))\ndef normalize_angle(a):\n    '''\n    Write a function to get the normalized angle of a complex number.\n    '''\n    return angle_complex(conjugate_to_complex(a,a),conjugate_to_complex(a,b))\ndef normalize_period(a):\n    '''\n    Write a function to get the normalized period of a complex number.\n    '''\n    return angle_period(conjugate_to_complex(a,a),conjugate_to_complex(a,b))\ndef normalize_phase(a,b):\n    '''\n    Write a function to get the normalized phase of a complex number.\n    '''\n    return angle_complex(conjugate_to_complex(a,b),conjugate(b,a))\ndef real(a):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    return complex(a.real,0)\ndef imag(a):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return complex(0,a.imag)\ndef complex_to_real_and_imag(a,b):\n    '''\n    Write a function to convert a complex number to real and imaginary number.\n    '''\n    return complex(a.real,b.imag)\ndef concatenate(a,b):\n    '''\n    Write a function to concatenate two complex numbers.\n    '''\n    return complex(a.real + b.real,a.imag + b.imag)\ndef invert(a,b):\n    '''\n    Write a function to invert a complex number.\n    '''\n    return complex(conjugate(a,b),conjugate(b,a))\ndef normalize(a):\n    '''\n    Write a function to normalize a complex number.\n    '''\n    return complex(normalize_angle(a),normalize_period(a))\ndef normalize_and_concatenate(a,b):\n    '''\n    Write a function to concatenate two complex numbers and normalize them.\n    '''\n    return concatenate(normalize(a),normalize(b))\ndef normalize_phase_angle(a,b):\n    '''\n    Write a function to normalize a complex number to phase angle.\n    '''\n    return angle_complex(normalize_angle(a),normalize_period(a))\ndef normalize_phase_period(a,b):\n    '''\n    Write a function to normalize a complex number to phase period.\n    '''\n    return angle_complex(normalize_angle(a),normalize_period(a))\ndef normalize_phase_phase(a,b):\n    '''\n    Write a function to normalize a complex number to phase and phase.\n    '''\n    return angle_complex(normalize_angle(a),normalize_phase_angle(a,b))\ndef normalize_angle_and_concatenate(a,b):\n    '''\n    Write a function to concatenate two complex numbers and normalize them.\n    '''\n    return concatenate(normalize(a),normalize_and_concatenate(b))\ndef normalize_angle_and_concatenate(a,b):\n    '''\n    Write a function to concatenate two complex numbers and normalize them.\n    '''\n    return concatenate(normalize_angle_and_concatenate(a,b))\ndef normalize_angle_and_real(a,b):\n    '''\n    Write a function to normalize a complex number to angle and phase.\n    '''\n    return angle_complex(normalize_angle_and_concatenate(a,b),normalize_phase_angle(a,b))\ndef normalize_angle_and_imag(a,b):\n    '''\n    Write a function to normalize a complex number to angle and phase.\n    '''\n    return angle_complex(normalize_angle_and_concatenate(a,b),normalize_phase_angle(a,b))\ndef dot(a,b):\n    '''\n    Write a function to get the dot product of two complex numbers.\n    '''\n    return complex(a.real*b.real-b.imag*a.imag,a.imag*b.real+b.imag*a.imag)\ndef cross(a,b):\n    '''\n    Write a function to get the cross product of two complex numbers.\n    '''\n    return complex(a.imag*b.imag-b.imag*a.imag,a.imag*b.imag+b.imag*a.imag)\ndef sine(a):\n    '''\n    Write a function to get the sine of a complex number.\n    '''\n    return complex(math.sqrt(1-a*a),0)\ndef cosine(a):\n    '''\n    Write a function to get the cosine of a complex number.\n    '''\n    return complex(math.sqrt(1+a*a),0)\ndef tangent(a):\n    '''\n    Write a function to get the tangent of a complex number.\n    '''\n    return complex(a,0)\ndef conjugate_to_complex(a,b):\n    '''\n    Write a function to convert a complex number to complex number.\n    '''\n    return complex(conjugate(a,b),conjugate(b,a))\ndef conjugate_to_complex(a,b):\n    '''\n    Write a function to convert a complex number to complex number.\n    '''\n    return complex(conjugate_to_complex(a,b),conjugate_to_complex(b,a))\ndef conjugate_to_real(a,b):\n    '''\n    Write a function to convert a complex number to real number.\n    '''\n    return complex(conjugate_to_complex(a,b),conjugate_to_complex(b,a))\ndef conjugate_to_imag(a,b):\n    '''\n    Write a function to convert a complex number to imaginary number.\n    '''\n    return complex(conjugate_to_complex(a,b),conjugate_to_complex(b,a))\ndef conjugate_to_real_and_imag(a,b):\n    '''\n    Write a function to convert a complex number to real and imaginary number.\n    '''\n    return complex(conjugate_to_complex(a,b),conjugate_to_complex(b,a))\ndef dot_angle(a,b):\n    '''\n    Write a function to get the dot product of two complex numbers.\n    '''\n    return angle_complex(dot(a,b),conjugate(b,a))\ndef dot_period(a,"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == b:\n        return 0\n    \n    angle = cmath.phase(a) + cmath.phase(b)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    d = b.real * cmath.cos(a.imag) + b.imag * cmath.sin(a.imag)\n    return cmath.acos(d)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Check the input is complex number or not\n    if a == 0:\n        if b == 0:\n            return 0\n        else:\n            return math.acos(b/a)\n    # Check the input is real or not\n    if a.imag == 0:\n        if b.imag == 0:\n            return math.acos(a.real)\n        else:\n            return math.acos(b.real/a.real)\n    # Check the input is complex number or not\n    if a.imag == b.imag:\n        if a.real == 0:\n            return math.acos(a.real)\n        else:\n            return math.acos(b.real/a.real)\n    # Check the input is real number or not\n    return math.acos(a.imag/b.imag)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if len(a) == 2 and len(b) == 2:\n        a = complex(a[0],a[1])\n        b = complex(b[0],b[1])\n        if abs(a) < 1e-10 and abs(b) < 1e-10:\n            return 0.0\n        angle = acos(complex(b.conjugate())/(a.conjugate()*b))\n        if abs(angle) > 1e-10:\n            angle = angle/pi\n        return angle\n    else:\n        print(\"Complex numbers are not accepted.\")\n        return 0.0\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real*b.real+b.imag*b.imag)\ndef angle_complex_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real*b.real+b.imag*b.imag)**0.5\ndef angle_complex_arc(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))\ndef angle_complex_sqrt_arc(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag)) + cmath.asin(abs(b.real))\ndef angle_complex_arc_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5\ndef angle_complex_abs(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.real*b.real+b.imag*b.imag)\ndef angle_complex_sqrt_abs(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.real*b.real+b.imag*b.imag)**0.5\ndef angle_complex_arc_abs(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))\ndef angle_complex_sqrt_abs_arc(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))\ndef angle_complex_arc_abs_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_sqrt_abs_arc_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_abs_arc_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_abs_arc_sqrt_arc(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_sqrt_abs_arc_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_sqrt_abs_arc_sqrt_arc(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_arc_abs_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_sqrt_abs_arc_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_arc_abs_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5\ndef angle_complex_sqrt_abs_arc_sqrt(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(b.real*b.real+b.imag*b.imag)**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.imag))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs(b.real))**0.5 + cmath.asin(abs("
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        return (b/a)\n    else:\n        return (b/a)*(1 + cmath.cos(a))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #coefficients of a and b\n    a,b=abs(a),abs(b)\n    \n    if(a==0):\n        c=(b+cmath.pi)/2\n        return c\n    \n    if(b==0):\n        c=(-a+cmath.pi)/2\n        return c\n    \n    try:\n        d=abs(b**2-4*a*c)\n        if(d==0):\n            c=(b+cmath.pi)/2\n            return c\n        \n        if(d<0):\n            c=(b+cmath.pi)/2\n            return c\n        \n        c=b-(b**2-4*a*c)\n        if(c<0):\n            c=b-(b**2-4*a*c)\n            return c\n        \n        if(b-cmath.pi<0):\n            c=(b+cmath.pi)/2\n            return c\n        \n        if(b-cmath.pi>0):\n            c=(b-cmath.pi)/2\n            return c\n        \n    except TypeError:\n        print(\"Please enter a real number.\")\n        return \"Please enter a real number.\"\n    \n    except ValueError:\n        print(\"Please enter a real number.\")\n        return \"Please enter a real number.\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return 0\n    if a==0:\n        return 0\n    a = abs(a)\n    b = abs(b)\n    if b==0:\n        return cmath.acos(a/b)\n    theta = 2*cmath.asin(a/b)\n    if a==0:\n        theta = 0\n    return theta\ndef angle_complex_eq(a,b,c):\n    '''\n    Write a function to get the angle of a complex number with the respect to the second argument of the angle_complex function.\n    '''\n    theta = angle_complex(a,b)\n    x = cmath.cos(theta)\n    y = cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    # find_length takes the lenght of the string, which is the maximum number of 0s and number of 1s.\n    count = 0\n    # iterate through the string.\n    for i in range(n): \n        # get the count\n        count += string[i].count(\"1\")\n        # iterate through the string \n        while (string[i].count(\"0\")!= 0 and string[i].count(\"1\")!= 0): \n            # add 1 to count\n            count += 1\n            # increment the count by one\n            i += 1\n            # check if the index is greater than or equal to the len of the string\n            if(i >= n): \n                # if it is, then break out of the loop\n                break\n    return count\ndef flip_binary_string(s):\n    '''\n    Write a function to flip a binary string to a different length and then return the flipped string. \n    '''\n    # return a binary string\n    return str(bin(int(s,2)))[2:]\ndef find_in_string(string,s):\n    '''\n    Write a function to find the index of a string in the given string.\n    '''\n    # find the length of the string\n    length = len(string)\n    # create a counter variable\n    count = 0\n    # iterate through the string\n    for i in range(length):\n        # if the current character matches the search character\n        if string[i] == s:\n            # increment the counter\n            count += 1\n    # return the index\n    return count\ndef find_between(s,start,end):\n    '''\n    Write a function to find the index of a substring between two given strings. \n    '''\n    # count the number of occurrences of the substring\n    count = 0\n    # iterate through the string\n    for i in range(len(s)):\n        # check if the index is greater than or equal to the start index\n        if i >= start and i <= end:\n            # count the number of occurrences\n            count += 1\n    # return the index\n    return count\ndef find_it_in_string(string,s):\n    '''\n    Write a function to find the index of a string in the given string, but only if the substring is present in the given string.\n    '''\n    # create a counter variable\n    count = 0\n    # iterate through the string\n    for i in range(len(string)):\n        # check if the character matches the search character\n        if string[i] == s:\n            # increment the counter\n            count += 1\n    # return the index\n    return count\ndef is_unique_string(s):\n    '''\n    Write a function to check if a given string is unique.\n    '''\n    # create an array to store unique characters\n    unique = []\n    # loop through the string\n    for i in s:\n        # if it is not in the array\n        if i in unique:\n            # increment the count by 1\n            unique.append(i)\n        else:\n            # add it to the array\n            unique.append(i)\n    # return the unique array\n    return unique\ndef is_palindrome(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # loop through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_2(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_3(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_4(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_5(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_6(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_7(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_8(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in s:\n        # if it is not in the array\n        if i not in palindrome:\n            # add it to the array\n            palindrome.append(i)\n        # check if the index is equal to the length of the string\n        else:\n            # if it is, then return false\n            return False\n    # return true\n    return True\ndef is_palindrome_9(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    # create an array to store characters\n    palindrome = []\n    # iterate through the string\n    for i in "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zeroes = 0\n    count_ones = 0\n    start = 0\n    end = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeroes += 1\n        if string[i] == '1':\n            count_ones += 1\n        \n        if i == 0 or string[i-1] == '1':\n            start = i\n        if i == len(string)-1 or string[i+1] == '1':\n            end = i\n    \n    if count_zeroes > count_ones:\n        return (count_zeroes - count_ones)\n    elif count_zeroes < count_ones:\n        return count_ones - count_zeroes\n    else:\n        return (count_zeroes - count_ones) + (count_ones - count_zeroes)\n    \ndef is_palindrome(string):\n    '''\n    Given a string, check to see if it is a palindrome.\n    '''\n    string = list(string)\n    length = len(string)\n    \n    if length <= 1:\n        return True\n    \n    for i in range(length//2):\n        if string[i]!= string[length-i-1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            ans += 1\n        else:\n            ans -= 1\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    len_str = len(string)\n    ans = 0\n    \n    for i in range(len_str):\n        if string[i] == \"0\":\n            ans = max(ans, i - 1)\n        else:\n            ans = max(ans, i + 1 - string[i])\n            \n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: \n        return 0 \n    return find_length(string[1:]) - find_length(string[:-1])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for index in range(len(string)):\n        if string[index] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # get the length of the string\n    string_len = len(string)\n    # create an empty list that will store the sum of the 0s and 1s.\n    zero_list = []\n    one_list = []\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 2:\n        return 0\n    else:\n        l = len(string)\n        #Initialize initial values\n        low_count = 0\n        high_count = 0\n        high_length = 0\n        low_length = 0\n        initial_length = 0\n        for i in range(len(string)):\n            if string[i] == '0':\n                low_count += 1\n            elif string[i] == '1':\n                high_count += 1\n            if low_count >= 1:\n                low_length += 1\n                initial_length = len(string) - low_count - high_count + low_length\n            elif high_count >= 1:\n                high_length += 1\n                initial_length = len(string) - low_count - high_count + high_length\n            if initial_length >= l:\n                low_length = 0\n                high_count = 0\n                high_length = 0\n    if initial_length > len(string) - 2:\n        return initial_length - len(string) - 2\n    else:\n        return initial_length\n        \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    arr = list(string)\n    length = len(arr)\n    l, r = 0, 0\n    for i in range(length):\n        if arr[i] == '1':\n            r += 1\n        else:\n            l += 1\n    return max(l, r)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        raise TypeError('only Integer is accepted as arguments')\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # write your code here\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif a<b:\n        return 1\n    else:\n        return sum(a,b-a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int: \n        raise TypeError('Both numbers must be integer') \n    \n    if a > b:\n        big = a\n        small = b\n    else:\n        big = b\n        small = a\n    \n    count = 0\n    for num in range(1,big + 1):\n        if num % a == 0 and num % b == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b = b,a\n    sum_ = 0\n    for i in range(a,b+1):\n        if i%a==0 and i%b==0:\n            sum_ += i\n    return sum_\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0:\n        return 0\n    elif a > b:\n        return 0\n    elif a < b:\n        return int(a/b)\n    else:\n        return 1 + sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def c_d(n):\n        if (n==1):\n            return [1]\n        if (n==2):\n            return [1,2]\n        a=c_d(n//2)\n        for i in a:\n            if n%i==0:\n                a.append(i)\n        return a\n    ans=c_d(b)\n    ans.append(b)\n    return sum(ans)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        return(a-b)\n    else:\n        return(b-a)\n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0: \n        return 1\n    elif b == 1:\n        return a\n    else:\n        return sum(a,b//2)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return (a+b)/2\ndef main():\n    \n    print(\"\\n\\n-----------------------------------------------------------\\n\")\n    print(\"   ***** Welcome to SUM *****\")\n    print(\"-----------------------------------------------------------\\n\")\n    print(\"Enter the first number to calculate the sum of divisors:\")\n    print(\"\")\n    first_num=int(input(\"Enter the first number: \"))\n    print(\"\")\n    print(\"Enter the second number to calculate the sum of divisors:\")\n    print(\"\")\n    second_num=int(input(\"Enter the second number: \"))\n    print(\"\")\n    print(\"\\nThe sum of the common divisors is:\")\n    print(sum(first_num,second_num))\n    print(\"\\n\\n-----------------------------------------------------------\\n\")\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #can write this as a recursive function\n    if b==0:\n        return 1\n    elif a==b:\n        return a\n    elif a>b:\n        return sum(a,b-1)\n    else:\n        return sum(a-1,b)\n    \ndef main():\n    print(sum(4,6))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"x and y must be ints\")\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    assert x > 0 and y > 0, \"both should be non-negative\"\n    # your code here\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    x_multiply = x\n    y_multiply = y\n    while y > 0:\n        if y_multiply == 0:\n            break\n        if y_multiply < 10:\n            y_multiply = int(y_multiply / 10)\n        else:\n            y_multiply = int(y_multiply / 100)\n        y_multiply = int(y_multiply / 10)\n        y_multiply = int(y_multiply / 10)\n        y = y - y_multiply\n        x_multiply = int(x_multiply * 10)\n    return x_multiply + y_multiply\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # use input validation\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    "
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    word_l = []\n    for i in range(n):\n        word = str[i]\n        word_l.append(word)\n        for j in range(len(word)):\n            if word[j] not in words:\n                words.append(word[j])\n    return len(words)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>=n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str:\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    words = []\n    \n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # get length of the string\n    length = len(str)\n    \n    # create an empty list for the result\n    result = []\n    \n    # loop through the string\n    for word in range(n):\n        if str.count(str[word]) > length:\n            result.append(str[word])\n    \n    # return the result\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    from itertools import combinations \n    import string\n    letters = string.ascii_lowercase\n    for length in range(1,n):\n        words = \"\".join(map(str,combinations(letters, length)))\n        if len(words) >= n:\n            return words\n    return 'ERROR'\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in range(len(str)):\n        if str[i] not in words:\n            words.append(str[i])\n    return words\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n == 1:\n        return True\n    if n == 2:\n        # if there is only one line, print it\n        if my_matrix[0][0] == my_matrix[1][1]:\n            return True\n        # if there is only one column, print it\n        if my_matrix[0][0] == my_matrix[0][1]:\n            return True\n        # if there is only one row, print it\n        if my_matrix[0][0] == my_matrix[1][0]:\n            return True\n        # if there is only one diagonal, print it\n        if my_matrix[0][0] == my_matrix[1][1]:\n            return True\n        # if there is only one diagonal, print it\n        if my_matrix[0][0] == my_matrix[1][1] or \\\n                my_matrix[0][1] == my_matrix[1][0]:\n            return True\n        return False\n    # if the matrix is the only thing within the dimension\n    # print the square\n    print_matrix(my_matrix)\n    # if there are two lines, then print\n    # if there is only one column, print it\n    if my_matrix[0][0] == my_matrix[1][1] or \\\n            my_matrix[0][0] == my_matrix[1][1]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one column, then print\n    # if there is only one line, print it\n    if my_matrix[0][0] == my_matrix[0][1] or \\\n            my_matrix[0][0] == my_matrix[1][0]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one row, then print\n    if my_matrix[0][0] == my_matrix[1][0] or \\\n            my_matrix[0][0] == my_matrix[0][1]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one diagonal, then print\n    if my_matrix[0][0] == my_matrix[1][1] or \\\n            my_matrix[0][0] == my_matrix[1][1]:\n        print_matrix(my_matrix)\n        return False\n    # if there is only one diagonal, then print\n    if my_matrix[0][0] == my_matrix[1][1] or \\\n            my_matrix[0][1] == my_matrix[1][0]:\n        print_matrix(my_matrix)\n        return False\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    else:\n        for x in my_matrix:\n            if len(x)!= len(x[0]):\n                return False\n            else:\n                if sum(sum(x))!= sum(x):\n                    return False\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    # matrix = [\n    #     [1, 2, 3],\n    #     [4, 5, 6],\n    #     [7, 8, 9]\n    # ]\n    # print(magic_square_test(matrix))\n    # result = True\n    # for row in matrix:\n    #     for element in row:\n    #         if element > 1:\n    #             result = False\n    #     return result\n    # result = False\n    # for row in matrix:\n    #     for element in row:\n    #         if element > 1:\n    #             result = False\n    #     return result\n    \n    return matrix.count(1) == matrix[0].count(1) == matrix[-1].count(1) == matrix[-2].count(1) == matrix[-3].count(1)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return len(my_matrix) == len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in range(len(my_matrix)):\n        for column in range(len(my_matrix[row])):\n            if my_matrix[row][column] == '*':\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]) == 0:\n        return False\n    else:\n        return True\n    #return all(row[0] == row[1] == row[2] for row in my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix = list(map(lambda x: list(x), my_matrix))\n    print(matrix)\n    first_row = matrix[0][0]\n    second_row = matrix[1][1]\n    third_row = matrix[2][2]\n    print(first_row, second_row, third_row)\n    if first_row == second_row == third_row == \"*\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    x = len(my_matrix[0])\n    y = len(my_matrix)\n    if x == y:\n        print(\"\\n\\nThis is a magic square matrix.\\n\\n\")\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #test\n    for i in range(len(my_matrix)):\n        for j in range(i+1,len(my_matrix)):\n            if my_matrix[i][j]!=my_matrix[j][i]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    def get_occurrences(nums, value):\n        occurrence = defaultdict(int)\n        for num in nums:\n            occurrence[num] += 1\n        return occurrence\n    \n    max_occurrence = None\n    for num in nums:\n        occurrence = get_occurrences(nums, num)\n        if max_occurrence is None or max_occurrence[num] > occurrence[num]:\n            max_occurrence = occurrence\n    return max_occurrence[num]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = {}\n    for num in nums:\n        if num in occurrences:\n            occurrences[num] += 1\n        else:\n            occurrences[num] = 1\n    return max(occurrences.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #print(nums)\n    #nums.sort()\n    occurrences = []\n    max_freq = 0\n    max_freq_idx = -1\n    for i in range(len(nums)):\n        if nums[i] not in occurrences:\n            occurrences.append(nums[i])\n            if nums[i] > max_freq:\n                max_freq = nums[i]\n                max_freq_idx = i\n        else:\n            occurrences.remove(nums[i])\n            occurrences.append(nums[i])\n            if nums[i] > max_freq:\n                max_freq = nums[i]\n                max_freq_idx = i\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_table = defaultdict(lambda: 0)\n    for number in nums:\n        freq_table[number] += 1\n    for number in freq_table.keys():\n        if freq_table[number] > freq_table[number//2]:\n            return number\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for x in nums:\n        d[x]+=1\n    for i in d.values():\n        if i > 1:\n            return i-1\n    return 0\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    i = 0\n    while i < len(nums):\n        j = i+1\n        while j < len(nums):\n            if nums[i] == nums[j]:\n                nums.pop(j)\n            j+=1\n        i += 1\n    return nums\n    \ndef is_palindrome(s):\n    '''\n    A function to check whether a given string is a palindrome or not.\n    '''\n    i = 0\n    while i < len(s):\n        j = i+1\n        while j < len(s):\n            if s[i] == s[j]:\n                i+=1\n                j+=1\n            else:\n                return False\n    return True\n    \ndef lcs(x, y):\n    '''\n    Write a function to find the longest common substring in a given list.\n    '''\n    m = len(x)\n    n = len(y)\n    if m > n:\n        return lcs(y, x)\n    if m == 0:\n        return []\n    if n == 0:\n        return []\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    \n    # Base case\n    dp[0][0] = 1\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0]\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1]\n        \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if x[i-1] == y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        \n    return dp[m][n]\n    \ndef intersection(A, B):\n    '''\n    Given two sorted lists of equal length, return the intersection of the two sorted lists as a sorted list of integers.\n    If a and b are both empty, the answer is a list containing all the integers from both lists.\n    '''\n    intersect = []\n    if len(A) == 0 and len(B) == 0:\n        return intersect\n    elif len(A) == 0:\n        return B\n    elif len(B) == 0:\n        return A\n    \n    if A[0] < B[0]:\n        i = 0\n        j = 0\n        k = 0\n        while i < len(A) and j < len(B):\n            if A[i] <= B[j]:\n                i += 1\n            else:\n                j += 1\n        while i < len(A):\n            intersect.append(A[i])\n            i += 1\n        while j < len(B):\n            intersect.append(B[j])\n            j += 1\n    else:\n        i = 0\n        j = 0\n        k = 0\n        while i < len(B) and j < len(A):\n            if B[j] <= A[i]:\n                i += 1\n                j += 1\n            else:\n                k += 1\n        while j < len(A):\n            intersect.append(B[j])\n            j += 1\n        while i < len(A):\n            intersect.append(A[i])\n            i += 1\n    return intersect\n    \ndef max_product(nums):\n    '''\n    Write a function to find the maximum product of a given list.\n    '''\n    i = 0\n    p = 1\n    j = 1\n    while i < len(nums):\n        p = p * j\n        j = p\n        i += 1\n    return p\n    \ndef find_prime_factors(n):\n    '''\n    Given an integer, write a function that returns the prime factors of n.\n    '''\n    s = 1\n    while s < n:\n        if n%s == 0:\n            return [s]\n        s += 1\n    return []\n    \ndef word_to_int(s):\n    '''\n    A function to convert a string to an integer.\n    '''\n    i = 0\n    for j in range(len(s)):\n        if s[j]!='':\n            i = i * 26 + ord(s[j]) - ord('a')\n    return i\n    \ndef get_int(s):\n    '''\n    A function to convert a string to an integer.\n    '''\n    i = 0\n    for j in range(len(s)):\n        if s[j]!='':\n            i = i * 26 + ord(s[j]) - ord('a')\n    return i\n    \ndef num_to_char(n):\n    '''\n    A function to convert a number to a corresponding character in a string.\n    '''\n    s = ''\n    while n > 0:\n        n, r = divmod(n, 26)\n        s = chr(r + ord('a')) + s\n    return s\n    \ndef print_word(s):\n    '''\n    A function to print the words in a given string.\n    '''\n    for i in range(len(s)):\n        print(num_to_char(s[i]))\n        \ndef is_palindrome(s):\n    '''\n    A function to check whether a given string is a palindrome or not.\n    '''\n    i = 0\n    while i < len(s):\n        if s[i]!= s[len(s)-1-i]:\n            return False\n        i += 1\n    return True\n    \ndef char_to_int(s):\n    '''\n    A function to convert a string to an integer.\n    '''\n    i = 0\n    for j in range(len(s)):\n        if s[j]!='':\n            i = i * 26 + ord(s[j]) - ord('a')\n    return i\n    \ndef is_subsequence(s1, s2):\n    '''\n    A function to check whether two strings are a subsequence of each other or not.\n    '''\n    i = 0\n    while i < len(s1):\n        j = i + 1\n        while j < len(s2):\n            if s1[i]!= s2[j]:\n                break\n            j += 1\n        if j == len(s2):\n            return True\n        i += 1\n    return False\n    \ndef is_permutation(s1, s2):\n    '''\n    A function to check whether two strings are a permutation of each other or not.\n    '''\n    s = s1 + s2\n    l = len(s)\n    i = 0\n    while i < l:\n        if s[i]!= s[l-1-i]:\n            return False\n        i += 1\n    return True\n    \ndef count_substrings(s):\n    '''\n    A function to count the number of substrings of a given string.\n    '''\n    i = 0\n    p = 1\n    while i < len(s):\n        if s[i] =='':\n            i += 1\n        elif s[i]!= s[i+1]:\n            p = p * (s[i]!= s[i+1])\n            i += 1\n        else:\n            i += 1\n    return p\n    \ndef count_substrings(s):\n    '''\n    A function to count the number of substrings of a given string.\n    '''\n    i = 0\n    p = 1\n    while i < len(s):\n        if s[i] =='':\n            i += 1\n        elif s[i]!= s[i+1]:\n            p = p * (s[i]!= s[i+1]"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Your code here\n    freq_dict = dict()\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    max_freq = 0\n    freq = 0\n    for freq_num, count in freq_dict.items():\n        if count > max_freq:\n            max_freq = count\n            freq = freq_num\n    \n    return freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #O(n) time | O(n) space\n    counter = defaultdict(int)\n    for n in nums:\n        counter[n] += 1\n    return counter[max(counter.keys())]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    items = defaultdict(int)\n    for num in nums:\n        items[num] += 1\n    return max(items.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    reversed = ''\n    for letter in str1:\n        if letter in vowels:\n            reversed += letter\n        else:\n            reversed +=''\n    return reversed\n    # if not vowels:\n    #     return ''\n    # return str1[::-1].replace(' ', '')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Declare vowels and vowels_lst\n    vowels_lst = ['a', 'e', 'i', 'o', 'u']\n    vowels_lst.remove('y')\n    vowels_lst.append('y')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = set('aeiouy')\n    lst = [c for c in str1 if c in vowels]\n    lst.sort()\n    return ''.join(lst)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    new_str = ''\n    for i in str1:\n        if i in vowels:\n            new_str += i\n        else:\n            new_str += '_'\n    return new_str[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1_string = str1.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1_vowels = ''\n    for x in str1_string:\n        if x in vowels:\n            str1_vowels += x\n        else:\n            str1_vowels +=''\n    return str1_vowels\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    nums = []\n    for char in str1:\n        if char in vowels:\n            nums.append(char)\n        else:\n            pass\n    return ''.join(nums)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list_vowels = 'aeiouAEIOU'\n    return ''.join(list_vowels[::-1])\n    # list_vowels = ''.join(list_vowels[::-1])\n    # list_vowels = ''.join(list_vowels[::-1])\n    # list_vowels = ''.join(list_vowels[::-1])\n    # return ''.join(list_vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str1 = str1.lower()\n    return ''.join([i if i in vowels else'' for i in str1])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Set the flag to True, we are going to iterate through the string, we do not want to\n    # check if the vowels are present.\n    vowel_flag = True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s1 = '('\n    s2 = ')'\n    for item in tup1:\n        s1 += '('\n        s2 += ')'\n        s1 += str(item)\n        s2 += str(item)\n    s1 += s2\n    return s1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join([str(elem) for elem in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return ('(' + '', *tup1, ')')\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + str(tup1[0]) + ','+ str(tup1[1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = tuple(tup1)\n    return str(tup2)"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ','.join(str(i) for i in tup1) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #print(tup1)\n    str = \"\"\n    for i in tup1:\n        str = str + str(i) + \" \"\n    str = str[:-1]\n    return str\n    \n    #print(str)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = \"(\"\n    for i in range(0,len(tup1)):\n        str_tup += str(tup1[i])+\",\"\n    str_tup += \")\"\n    return str_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\ndef tup_string(tup2):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup2)\ndef tup_string(tup3):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup3)\ndef tup_string(tup4):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup4)\ndef tup_string(tup5):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup5)\ndef tup_string(tup6):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup6)\ndef tup_string(tup7):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup7)\ndef tup_string(tup8):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup8)\ndef tup_string(tup9):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup9)\ndef tup_string(tup10):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup10)\ndef tup_string(tup11):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup11)\ndef tup_string(tup12):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup12)\ndef tup_string(tup13):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup13)\ndef tup_string(tup14):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup14)\ndef tup_string(tup15):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup15)\ndef tup_string(tup16):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup16)\ndef tup_string(tup17):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup17)\ndef tup_string(tup18):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup18)\ndef tup_string(tup19):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup19)\ndef tup_string(tup20):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup20)\ndef tup_string(tup21):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup21)\ndef tup_string(tup22):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup22)\ndef tup_string(tup23):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup23)\ndef tup_string(tup24):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup24)\ndef tup_string(tup25):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup25)\ndef tup_string(tup26):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup26)\ndef tup_string(tup27):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup27)\ndef tup_string(tup28):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup28)\ndef tup_string(tup29):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup29)\ndef tup_string(tup30):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup30)\ndef tup_string(tup31):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup31)\ndef tup_string(tup32):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup32)\ndef tup_string(tup33):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup33)\ndef tup_string(tup34):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup34)\ndef tup_string(tup35):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup35)\ndef tup_string(tup36):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup36)\ndef tup_string(tup37):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup37)\ndef tup_string(tup38):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup38)\ndef tup_string(tup39):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup39)\ndef tup_string(tup40):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup40)\ndef tup_string(tup41):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup41)\ndef tup_string(tup42):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup42)\ndef tup_string(tup43):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup43)\ndef tup_string(tup44):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup44)\ndef tup_string(tup45):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup45)\ndef tup_string(tup46):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup46)\ndef tup_string(tup47):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup47)\ndef tup_string(tup48):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup48)\ndef tup_string(tup49):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup49)\ndef tup_string(tup50):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup5"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    i = 0\n    total = 0\n    while i < len(nums):\n        if nums[i] < 0:\n            total += nums[i]\n        i += 1\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total -= num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for x in range(len(nums)):\n        if nums[x] < 0:\n            sum = sum + -x\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg = 0\n    for num in nums:\n        if num < 0:\n            neg += 1\n    return neg\n    \n    \ndef num_sums_positive(nums):\n    '''\n    Write a function that returns the sum of the positives in a list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n    return sum\n    \n    \ndef num_sums_negative(nums):\n    '''\n    Write a function that returns the sum of the negatives in a list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n    \n    \ndef max_even(nums):\n    '''\n    Write a function that returns the maximum of a list of numbers.\n    '''\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n    \n    \ndef min_even(nums):\n    '''\n    Write a function that returns the minimum of a list of numbers.\n    '''\n    min_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n    return min_num\n    \n    \ndef max_odd(nums):\n    '''\n    Write a function that returns the maximum of a list of numbers.\n    '''\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n    \n    \ndef min_odd(nums):\n    '''\n    Write a function that returns the minimum of a list of numbers.\n    '''\n    min_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n    return min_num\n    \n    \ndef sum_all(nums):\n    '''\n    Write a function that returns the sum of all numbers in a list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n    \n    \ndef main():\n    \"\"\"\n    # 1.\n    nums = [2,3,4,5,6,7,8,9]\n    print(sum_all(nums))\n    # 2.\n    nums = [2,3,4,5,6,7,8,9]\n    print(min_even(nums))\n    # 3.\n    nums = [2,3,4,5,6,7,8,9]\n    print(max_odd(nums))\n    # 4.\n    nums = [2,3,4,5,6,7,8,9]\n    print(sum_negativenum(nums))\n    # 5.\n    nums = [2,3,4,5,6,7,8,9]\n    print(num_sums_positive(nums))\n    # 6.\n    nums = [2,3,4,5,6,7,8,9]\n    print(num_sums_negative(nums))\n    # 7.\n    nums = [2,3,4,5,6,7,8,9]\n    print(max_even(nums))\n    # 8.\n    nums = [2,3,4,5,6,7,8,9]\n    print(min_even(nums))\n    # 9.\n    nums = [2,3,4,5,6,7,8,9]\n    print(max_odd(nums))\n    # 10.\n    nums = [2,3,4,5,6,7,8,9]\n    print(min_odd(nums))\n    # 11.\n    nums = [2,3,4,5,6,7,8,9]\n    print(sum_all(nums))\n    \"\"\"\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    negative = 0\n    for num in nums:\n        if num < 0:\n            negative += num\n    \n    return negative\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # CODE FOR EXAMPLE\n    # [1, 2, -3, -4, -5]\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n    \ndef negative_sum(nums):\n    '''\n    Write a function to return the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += -num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total -= num\n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for x in range(1, n): \n        if (x % 2) == 0: \n            y = x * 6 - 1 \n        else: \n            y = x * 6 \n        if (x % 2) == 0: \n            if (y % 2) == 0: \n                print(n, end=' ') \n            else: \n                print(n, end=' ') \n        else: \n            if (y % 2) == 0: \n                print(n, end=' ') \n            else: \n                print(n, end=' ') "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    cnt = 0\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            cnt += i\n        else:\n            cnt -= i\n    return cnt\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 0\n    while (x < n):\n        y = x - 1\n        while (y >= 0 and x < n):\n            if (y!= 0):\n                print(n, x, y)\n            y -= 1\n        x += 1\n    return \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 3:\n        return 6\n    elif n % 2 == 0:\n        return hexagonal_num(n//2) + hexagonal_num(n-1)\n    elif n % 2 == 1:\n        return hexagonal_num(n-1) + hexagonal_num(n//2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Write your code here\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # your code goes here\n    if n%2==0:\n        return(n/2)\n    else:\n        return(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n + 1) / 2) + 1\n    \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    result = 0\n    # n is odd\n    if n % 2 == 1:\n        result += 1\n    # n is even\n    else:\n        while n > 0:\n            result += (n - 1) ** 2\n            n = n // 6\n    return result\n    \nif __name__ == \"__main__\":\n    print(hexagonal_num(6))"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            num = hexagonal_num(i)\n            num += hexagonal_num(i + 1)\n        else:\n            num = hexagonal_num(i + 1)\n        print(num)\n    return num\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # make a copy of the array, without the zeroes\n    copy = nums[:]\n    zeroes = 0\n    while copy[zeroes] == 0:\n        zeroes += 1\n    # print(copy)\n    for i in range(zeroes):\n        copy[i] = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return round(count/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len(nums)/sum(nums)\ndef percentage(nums):\n    '''\n    Return the percentage of zeroes in an array of integers.\n    '''\n    return sum(nums)/len(nums)\ndef is_even(nums):\n    '''\n    Return True if the array contains an even number of numbers, False otherwise.\n    '''\n    return len(nums)%2==0\ndef get_next_index(nums, target):\n    '''\n    Return the index of the next occurrence of the target in an array of integers.\n    '''\n    l=0\n    r=len(nums)-1\n    while(l<=r):\n        mid=(l+r)//2\n        if nums[mid]==target:\n            return mid\n        elif nums[mid]<target:\n            l=mid+1\n        else:\n            r=mid-1\n    return l\ndef count_uniques(nums):\n    '''\n    Return the number of unique elements in an array of integers.\n    '''\n    return len(set(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = 0\n    length = len(nums)\n    for index, elem in enumerate(nums):\n        if elem == 0:\n            result += index\n    return result/length\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n        else:\n            non_zeros += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_cnt = 0\n    n = len(nums)\n    for i in nums:\n        if i == 0:\n            zero_cnt += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Your code here\n    '''\n    arr = array(n)\n    res = 0\n    for i in arr:\n        if i == 0:\n            res += 1\n    return res / len(n)\n    '''\n    return len(nums)/len(set(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n in [2,3,5,7,11,13,15,17,19,21]\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n > 0:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow = 2\n    sum = 0\n    while pow <= n:\n        sum = sum + pow\n        pow = pow + pow\n    if n == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    \n    for i in range(1, n+1):\n        sum += pow(i,2)\n    \n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == sum(list(map(lambda x: pow(2,x), range(1,n+1))))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n <= 2:\n        return True\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def pow2(num):\n        if num == 0: return 0\n        res = 1\n        while num % 2 == 0:\n            num = num // 2\n            res += 1\n        return res\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    result = n - (n//2)\n    if (result == 0): \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return pi * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    # calculate the circumference\n    return math.pi * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (3.14*r*r)\ndef circle_volume(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (3.14*(r**2))\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (a*b)/2\ndef triangle_volume(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a*b*c)/"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r**2\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*(r**2)\ndef circle_surface_area(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return (4/3)*3.14*r**3\ndef circle_volume(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return 3.14*(r**2)*4\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for element in test_list:\n        if type(element) is list:\n            for element2 in element:\n                num_list.append(element2)\n        else:\n            num_list.append(element)\n    return num_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if type(item) is list:\n            for sublist in item:\n                result.add(sum(sublist))\n        else:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for n in test_list:\n        if type(n) is list:\n            for l in n:\n                flatten.append(l)\n        elif type(n) is dict:\n            for key, value in n.items():\n                flatten.append(key)\n                flatten.append(value)\n    return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # =============================================================================\n    # PART 1: CONVERT NUMBERS TO LISTS OF INTEGERS\n    # =============================================================================\n    numbers = []\n    for item in test_list:\n        numbers.append(item)\n    numbers = sorted(numbers)\n    return numbers\n    # =============================================================================\n    # PART 2: CREATE A SET OF STRINGS OF NUMBERS IN THE LIST\n    # =============================================================================\n    # =============================================================================\n    # PART 2: PRETURN LISTS TO STRINGS\n    # =============================================================================\n    test_list_strings = []\n    for item in test_list:\n        test_list_strings.append(str(item))\n    test_list_strings = \",\".join(test_list_strings)\n    # =============================================================================\n    # PART 3: MULTIPLY THE LISTS TOGETHER WITH THE NUMBERS IN THE LIST\n    # =============================================================================\n    # =============================================================================\n    # PART 3: CONCATINATE THE LISTS\n    # =============================================================================\n    # =============================================================================\n    # PART 3: CONCATINATE LISTS\n    # =============================================================================\n    return str(test_list_strings)\n    # =============================================================================\n    # PART 4: REVERSE THE STRING LIST\n    # =============================================================================\n    # =============================================================================\n    # PART 4: REMOVE THE 0TH INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF 0 IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A STRING\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS NOT A NUMBER\n    # =============================================================================\n    # =============================================================================\n    # PART 4: CHECK IF LAST INDEX IS THE LAST INDEX\n    # ================================================================"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Write your code here.\n    res = []\n    for x in test_list:\n        res += x\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize output\n    output = []\n    \n    # check if the list is empty\n    if len(test_list) == 0:\n        return output\n    \n    # append the list as a node\n    for item in test_list:\n        output.append(item)\n        \n    # recurse\n    return flatten(output)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # For test cases\n    if test_list == []:\n        return []\n    # Extract singly item from list\n    i = 0\n    while i < len(test_list):\n        j = i + 1\n        # Check if list has any items\n        while j < len(test_list):\n            # Check if the list is contiguous\n            if test_list[i] == test_list[j]:\n                # If no, append the number\n                j += 1\n            else:\n                break\n        # Insert item\n        test_list[i:j] = test_list[i:j][::-1]\n        i = j\n    return test_list"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Testing\n    test_list = [[1,2,3], [4,5,6], [7,8,9]]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the list with bubble sort\n    n = len(nums)\n    for i in range(n-1):\n        # if element is bigger than the first element of the list\n        if nums[i] > nums[i+1]:\n            # swap the two elements\n            nums[i],nums[i+1] = nums[i+1],nums[i]\n            # swap left half of the list\n            p = i\n            for j in range(i,n):\n                # if it is the last element, it is already sorted\n                if j == n-1:\n                    # If it is the last element, remove the last element\n                    if nums[j] < nums[n-1]:\n                        # Swap the last element with the first element\n                        nums[p],nums[j] = nums[j],nums[p]\n                # If it is not the last element, swap the two elements\n                else:\n                    # swap the two elements\n                    nums[j],nums[p] = nums[p],nums[j]\n    # Return the sorted list\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    start = 0\n    end = n - 1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n=len(nums)\n    l=n\n    t=n-1\n    if n%2==1:\n        l-=1\n        n=n-1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1,0,-1):\n        p = i\n        while p > 0 and nums[p] > nums[p-1]:\n            nums[p], nums[p-1] = nums[p-1], nums[p]\n            p -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_number = len(nums)\n    nums_len = len(nums)\n    for i in range(max_number):\n        for j in range(max_number - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        nums[0:max_number - i] = sorted(nums[max_number - i:], key=lambda x: nums.index(x))\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        idx = n - 1 - i\n        while idx >= 0 and nums[idx] < nums[idx + 1]:\n            nums[idx], nums[idx + 1] = nums[idx + 1], nums[idx]\n            idx -= 1\n    nums = nums[:n]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_length = len(nums)\n    # Pick all max elements and put it in the front\n    # So that all other values are not overwritten\n    for i in range(max_length-1, -1, -1):\n        for j in range(max_length-i):\n            if nums[j] > nums[j+1]:\n                nums[j+1], nums[j] = nums[j], nums[j+1]\n    print(nums)\n    # Go through the remaining elements, in reverse order\n    # So that all other values are not overwritten\n    for i in range(max_length-1, -1, -1):\n        for j in range(i, -1, -1):\n            if nums[j] > nums[j-1]:\n                nums[j-1], nums[j] = nums[j], nums[j-1]\n    print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length-1):\n        max_idx = i\n        for j in range(i+1, length):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    set1={}\n    set2={}\n    set3={}\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Define a new variable to track the number of times the same\n    # item appears in both lists.\n    dict1={}\n    # Define a new variable to track the number of times the same\n    # item appears in the first list.\n    dict2={}\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(list1[0]&list2[1]) + len(list1[0]&list2[2]) + len(list1[1]&list2[0]) + len(list1[1]&list2[2]) + len(list1[2]&list2[0]) + len(list1[2]&list2[1])\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            c+=1\n    return c\ndef count_differentpair(list1,list2):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i]!=list2[i]:\n            c+=1\n    return c\ndef count_all_t(list1,list2):\n    '''\n    Write a function to count number of distinct items in three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            c+=1\n    return c\ndef count_consecutive(list1,list2):\n    '''\n    Write a function to count number of items in consecutive lists.\n    '''\n    c=0\n    for i in range(1,len(list1)):\n        if list1[i-1]!=list1[i]:\n            c+=1\n    for i in range(0,len(list2)):\n        if list2[i-1]!=list2[i]:\n            c+=1\n    return c\ndef main():\n    '''\n    main function which takes user input and calls other functions in array_c.py file.\n    '''\n    user_input=input(\"Enter a list : \")\n    user_input_split=user_input.split(\",\")\n    l1,l2,l3=array_c.split_lists(user_input_split)\n    #print(l1)\n    print(count_all_t(l1,l2))\n    print(count_differentpair(l2,l3))\n    print(count_samepair(l1,l3))\n    print(count_differentpair(l3,l1))\n    print(count_samepair(l3,l1))\n    print(count_differentpair(l3,l1))\n    print(count_all_t(l1,l3))\n    print(count_differentpair(l1,l3))\n    print(count_differentpair(l3,l1))\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_diffpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are not identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_difflist(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_diffset(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given sets.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_diffhash(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given hashes.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashset(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given sets.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashsetitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashitemitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_setitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_setitemitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_setitemset(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashitemset(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashitemsetitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashsetitemset(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashitemsetitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashsetitemset(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashsetitemsetitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashsetitemsetitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!= list2[j] and i!= j:\n                res += 1\n    return res\n    \ndef count_hashsetitemsetitem(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given items.\n    '''\n    re"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in list1:\n        if i in list2:\n            count+=1\n    for j in list2:\n        if j in list3:\n            count+=1\n    for k in list3:\n        if k in list1:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #remove the duplicates\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    print(list1)\n    print(list2)\n    print(list3)\n    #check if the numbers are identical\n    same=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i] and list1[i]==list2[i]:\n            same+=1\n    print(\"the numbers are same : \",same)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            result+=1\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2):\n        return \"Wrong input\"\n    if len(list3)!= len(list2):\n        return \"Wrong input\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count = count + 1\n    for j in range(len(list2)):\n        if list2[j] == list3[j]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    total_samepair = 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = 0\n    for x in range(len(Input)):\n        if type(Input[x]) == tuple:\n            L += 1\n    return L\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # TODO: Your code here\n    \n    if len(Input) == 0:\n        return 0\n    if len(Input) == 1:\n        return 1\n    return len(list(set(Input)))\n    \n    \ndef remove_lists(Input):\n    '''\n    Write a function to remove all lists from the given tuple, in which\n    each list is replaced with a unique number.\n    '''\n    \n    # TODO: Your code here\n    if len(Input) == 0:\n        return None\n    if len(Input) == 1:\n        return Input\n    if len(Input) == 2:\n        return Input[:1] + Input[2:]\n    return tuple(map(lambda x: [x], list(set(Input))))\n    \n    \ndef merge_lists(Input):\n    '''\n    Write a function to merge all sub lists into one list.\n    '''\n    \n    # TODO: Your code here\n    \n    if len(Input) == 0:\n        return []\n    if len(Input) == 1:\n        return Input\n    if len(Input) == 2:\n        return Input[:1] + Input[2:]\n    \n    return tuple(map(lambda x: [x[:i] + x[i+1:] for i in range(0, len(x), 2)], list(set(Input))))\n    \n    \ndef unique_numbers(Input):\n    '''\n    Write a function to find the unique number in a given tuple.\n    '''\n    \n    # TODO: Your code here\n    \n    if len(Input) == 0:\n        return []\n    if len(Input) == 1:\n        return Input[:1]\n    if len(Input) == 2:\n        return Input[:1] + Input[2:]\n    return tuple(map(lambda x: [x[:i] + x[i+1:] for i in range(0, len(x), 2)], list(set(Input))))\n    \n    \ndef main():\n    '''\n    Run your function from the command line.\n    '''\n    \n    # TODO: Your code here\n    Input = (2, 1, 3, 2, 4)\n    print(find_lists(Input))\n    print(remove_lists(Input))\n    print(merge_lists(Input))\n    print(unique_numbers(Input))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    from collections import Counter\n    # Initialization\n    all_lists = []\n    # Number of elements in the tuple\n    tuple_len = len(Input)\n    # for loop\n    for i in range(tuple_len):\n        # Check if the element in the tuple is a list\n        if type(Input[i]) == list:\n            all_lists.append(list(set(Input[i])))\n    # Return the number of lists\n    return len(all_lists)"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not Input:\n        return 0\n    if len(Input) == 1:\n        return 1\n    elif Input[0] == Input[1]:\n        return 2\n    else:\n        return find_lists(Input[1:]) + find_lists(Input[:1])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    n = len(Input)\n    # Stores number of lists\n    N = 0\n    # Stores the index of the first occurrence of a character in the string\n    i = 0\n    for k in range(0,n):\n        if Input[k] == \"(\":\n            N += 1\n        elif Input[k] == \")\":\n            N -= 1\n        else:\n            pass\n        i += 1\n    if N == 0:\n        return n\n    else:\n        return i\n    "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code goes here\n    if not len(Input):\n        return 0\n    lists = 0\n    for i in range(len(Input)):\n        if Input[i][0] == \" \":\n            lists = lists + 1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #returns the number of lists\n    a = 0\n    #for list in Input, if you find a list in tuple, a=a+1\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i] == Input[j]:\n                a = a+1\n    return a\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # write your code here\n    if len(Input) < 2:\n        return 0\n    else:\n        for i in range(1,len(Input)):\n            if Input[i] == Input[i-1]:\n                pass\n            else:\n                return len(Input)-1\n        "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input: \n        if(type(x)==list): \n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_diff = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            abs_diff.append(abs(arr[i]-arr[j]))\n    abs_diff = list(dict.fromkeys(abs_diff))\n    return max(abs_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff=arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]-arr[i-1])>max_abs_diff:\n            max_abs_diff=arr[i]\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        max_value = max(max_value - arr[i], arr[i])\n    return max_value\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_val - max_index\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # find the length of the array\n    l = len(arr)\n    # set the maximum absolute difference\n    max_abs_diff = 0\n    # set the minimum index for the array\n    min_index = l - 1\n    # set the maximum absolute difference\n    max_abs_diff = arr[min_index] - arr[min_index-1]\n    # for every element in the array\n    for i in range(l-1):\n        # find the absolute difference between the current element and the previous element\n        # and add it to the maximum absolute difference\n        abs_diff = abs(arr[i] - arr[i+1])\n        # update the minimum index for the array\n        if abs_diff > max_abs_diff:\n            max_abs_diff = abs_diff\n            min_index = i\n    # return the max absolute difference\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    s=[]\n    \n    for i in range(0,len(arr)):\n        if arr[i] not in s:\n            s.append(arr[i])\n    print(s)\n    for i in range(0,len(s)):\n        for j in range(i+1,len(s)):\n            if arr[i] > arr[j]:\n                s[i], s[j] = s[j], s[i]\n            \n    print(s)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = -inf\n    for i in range(0,len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            temp_diff = abs(arr[i] - arr[j])\n            if(temp_diff > max_diff):\n                max_diff = temp_diff\n    return max_diff\n    \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = arr[0]\n    maximum_indices = arr[0]\n    \n    for i in range(1,len(arr)): \n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_indices = i\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                arr[i],arr[j] = arr[j],arr[i]\n    return arr\n    \n    \n    \narr = [12,33,12,34,23,45,56,34,21,23,12,32,12]\nprint(max_Abs_Diff(arr)"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        a, b = b, a % b\n    if b == 0:\n        return a, n\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, b)\n    if b == n:\n        return None\n    if a > n:\n        return None\n    if a < n:\n        return None\n    if n % 2 == 0:\n        return None\n    \n    x = n / 2\n    y = n - x\n    \n    if a * a + b * b == n:\n        return (a, b)\n    elif a * a + b * b > n:\n        return None\n    elif a * a + b * b < n:\n        return None\n    elif a * a + b * b == n:\n        if x % 2!= 0:\n            return None\n        else:\n            if a * x + b * x == n:\n                return (a, b)\n            elif a * x + b * x > n:\n                return None\n            elif a * x + b * x < n:\n                return None\n            elif a * x + b * x == n:\n                return None\n        \n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a == n:\n        if a == b:\n            return (a, b)\n        else:\n            if b % 2!= 0:\n                return None\n            else:\n                return None\n    if a * a > n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    if a * a < n:\n        return None\n    if a * a == n:\n        if b % 2!= 0:\n            return None\n        else:\n            return None\n    \n    \ndef find_x_y(a, b, n):\n    '''\n    Return the tuple that satisfies ax + by = n as a tuple.\n    '''\n    if find_solution(a, b, n):\n        return (a, b)\n    elif find_solution(n, b, n):\n        return (n, n)\n    elif find_solution(a, a, b):\n        return (a, a)\n    elif find_solution(a, n, b):\n        return (a, n)\n    elif find_solution(n, a, n):\n        return (n, n)\n    elif find_solution(a, b, a):\n        return (a, a)\n    elif find_solution(b, n, n):\n        return (b, n)\n    elif find_solution(a, a, b):\n        return (a, b)\n    elif find_solution(a, n, b):\n        return (a, n)\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, n)\n    if n == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    b = (b/n)**2\n    for x in range(0, n):\n        for y in range(0, n):\n            if a[x]*a[y] == n:\n                if (x*y) in a:\n                    return (x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a[0] == b[0] and a[1] == b[1]:\n        return (0, 0)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if a == b and n == 0:\n        return None\n    \n    if b == n:\n        return (a, n)\n    \n    if n % 2 == 0:\n        x = find_solution(a, b, n/2)\n        if x == None:\n            return None\n        y = find_solution(a, b, n/2 + 1)\n        if y == None:\n            return None\n        return (x[0] + y[0], x[1] + y[1])\n    else:\n        x = find_solution(a, b, n/2 + 1)\n        if x == None:\n            return None\n        y = find_solution(a, b, n/2)\n        if y == None:\n            return None\n        return (x[0] + y[0], x[1] + y[1]"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # TODO: Write the code to find a solution.\n    \n    def binary_search(n, a, b):\n        # TODO: Return x and y that satisfy ax + by = n\n        low = 0\n        high = n\n        while low <= high:\n            mid = int((low + high) / 2)\n            if n % mid == 0:\n                return mid, mid\n            elif n % mid > 0:\n                low = mid + 1\n            elif n % mid < 0:\n                high = mid - 1\n        return None\n    \n    # TODO: Return x,y that satisfy ax + by = n\n    # NOTE: It is important to not return None.\n    # TODO: If there are multiple solutions, return the one that is closest to n.\n    # NOTE: If there are multiple solutions, return None if there is no solution.\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list3.append(list2[j])\n    list3.sort()\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_remove = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list_remove.append(list2[j])\n                break\n            else:\n                continue\n        if len(list_remove) == 0:\n            return list1\n        else:\n            list_remove.clear()\n            continue\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.clear()\n    list2.clear()\n    \ndef main():\n    '''\n    Write a function that takes as input a list and a number of elements to remove.\n    Then prints all the elements present in the list, in order of appearance.\n    '''\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 5, 6]\n    remove_elements(list1, list2)\n    print(list1)\n    print(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # remove all elements in list1\n    list1.clear()\n    # remove all elements in list2\n    list2.clear()\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list which will contain elements present in both lists.\n    new_list = []\n    # Iterate over both lists and if element is present in both lists,\n    # delete it and append it in the new list.\n    for el in list1:\n        if el in list2:\n            new_list.append(el)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in range(len(list1)):\n        list1.remove(list1[i])\n        \n    for i in range(len(list2)):\n        list2.remove(list2[i])\n        \n    return list1, list"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    if len(list1)!= len(list2):\n        return list1, list2\n    else:\n        list3 = []\n        for i in range(len(list1)):\n            if list1[i] not in list2:\n                list3.append(list1[i])\n        list3.sort()\n        return list3, list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if i == len(list2) - 1:\n                if list1[i]!= list2[i]:\n                    list1[i] = list2[i]\n            else:\n                if list1[i]!= list2[i]:\n                    list1[i] = list1[i + 1]\n        return list"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 is None or list2 is None:\n        return None\n    \n    if list1[-1] is not None and list2[-1] is not None:\n        if list2[-1] is not None:\n            return [list2[-1]] + remove_elements(list1, list2[:-1])\n        else:\n            return list1[:-1] + remove_elements(list1[:-1], list2)\n    elif list1[-1] is None and list2[-1] is not None:\n        if list2[-1] is not None:\n            return [list2[-1]] + remove_elements(list1, list2[:-1])\n        else:\n            return list1[:-1] + remove_elements(list1[:-1], list2)\n    else:\n        return list1[:-1] + remove_elements(list1[:-1], list2)\n    \n    \n    "
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # base case\n    if n==0:\n        return 0\n    return n-2*sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # First 2nd digit is the sum of digits 2 thru the n//2 + 1\n    sum = 0\n    while (n % 2 == 0):\n        sum += n//2\n        n = n//2\n    # First 3rd digit is the sum of digits 3 thru the n//2 + 1\n    sum += n//2\n    # For a sum of n, n+1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,...\n    sum += n\n    # And so on till n < 0\n    while (n > 0):\n        sum += n%10\n        n = n//10\n    return sum\n    \n    \ndef sum_series_range(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # First 2nd digit is the sum of digits 2 thru the n//2 + 1\n    sum = 0\n    while (n % 2 == 0):\n        sum += n//2\n        n = n//2\n    # First 3rd digit is the sum of digits 3 thru the n//2 + 1\n    sum += n//2\n    # And so on till n < 0\n    while (n > 0):\n        sum += n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for x in range(1, n//2 + 1):\n        total += x\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    s = 0\n    if n == 1:\n        return s\n    for i in range(1,n,2):\n        s = s + i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return sum_series(n+1)\n    else:\n        return n-2*(n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum = 0\n    for i in range(n, 0, -2):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    num = 1\n    for i in range(n // 2):\n        num = num + (n - i) + (n - 2 * i)\n    return num\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for x in range(n//2 + 1):\n        sum += n - 2*x\n    return sum\n    \n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s * 2\n    i = 1\n    while i <= l:\n        a += s * i\n        i += 1\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s**2 + l**2)/2\n    return (a)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 1/4 * pi * s * l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Code goes here\n    area = (4/3) * pi * (s ** 2)\n    print(area)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round((((s)/2)**2)*tan(pi/l),1)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for k in range(0,l):\n        area += tan((pi*k)/s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2 + l**2) ** 0.5\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # TODO: INSERT YOUR CODE BETWEEN THE DASHED LINES\n    # raise NotImplementedError\n    pass\n    # raise NotImplementedError\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    sum = 0\n    for i in range(len(l)):\n        sum += l[i] * s\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Return True if the sum of the divisors is the same\n    # Return False if the sum of the divisors is not the same\n    sum = 0\n    for i in range(1,n+1): \n        sum += i \n    if sum == n: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    for i in range(1,n+1):\n        if n%i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return True\n    elif n<0:\n        return False\n    elif n%2!=0:\n        return False\n    elif n%3!=0:\n        return False\n    elif n%5!=0:\n        return False\n    else:\n        return div_sum(n//2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n%2==0\ndef is_prime(n):\n    '''\n    Returns true if the number is prime, false otherwise.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef count_prime_factors(n):\n    '''\n    Returns the number of prime factors for the number n.\n    '''\n    prime_factors = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            prime_factors+=1\n    return prime_factors\ndef run():\n    '''\n    This program takes in an integer and prints all prime factors for the integer and if the number is prime then it prints the number with prime factor\n    '''\n    number = int(input(\"Enter a number to determine if it is prime: \"))\n    if div_sum(number):\n        print(number)\n        print(\"The given number is prime.\")\n        print(\"The number is prime.\")\n        print(\"The number is\",count_prime_factors(number))\n    else:\n        print(\"The given number is not prime.\")\n        print(\"The number is not prime.\")\nif __name__==\"__main__\":\n    run()"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i==0:\n            divisors.append(i)\n    if len(divisors)==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            return False\n        elif (n % i == n % 2):\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum = div_sum + i\n    return div_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return 0\n    else:\n        for i in range(1, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return 0\n        return n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Edge case\n    if n == 0 or n == 1:\n        return n == 1\n    \n    # Recursive case\n    if n < 1:\n        return False\n    \n    # Recursive case\n    if n == 2:\n        return True\n    \n    # Get the 1st and 2nd terms of the number\n    return div_sum(n - 1) and div_sum(n - 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 2:\n        return n == 1\n    else:\n        i = 3\n        while i <= math.ceil(math.sqrt(n)):\n            if n % i == 0:\n                if div_sum(n//i) == div_sum(n//i*i):\n                    return True\n            i += 1\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in str1:\n        if i.lower() in alphabet:\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    num_char = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            num_char += 1\n    return num_char\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_letter = 0\n    for char in str1:\n        if char in alphabet:\n            count_letter += 1\n    print(count_letter)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = {}\n    for letter in str1:\n        if letter not in result:\n            result[letter] = 0\n        result[letter] += 1\n    return len(result)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            c += 1\n    return c\n    \ndef play_hangman(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splited = [letter if letter.isalpha() else \"_\" for letter in word_to_guess]\n    guess_splited = []\n    for i in range(len(word_to_guess)):\n        if word_to_guess[i] in letters_guessed:\n            guess_splited.append(word_to_guess[i])\n        else:\n            guess_splited.append(\"_\")\n    for i in range(len(word_to_guess_splited)):\n        if word_to_guess_splited[i] in letters_guessed:\n            guess_splited[i] = word_to_guess_splited[i].upper()\n        else:\n            guess_splited[i] = \"_\"\n    return \"\".join(guess_splited)\n    \ndef play_hangman2(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splited = [letter if letter.isalpha() else \"_\" for letter in word_to_guess]\n    guess_splited = []\n    for i in range(len(word_to_guess)):\n        if word_to_guess[i] in letters_guessed:\n            guess_splited.append(word_to_guess[i])\n        else:\n            guess_splited.append(\"_\")\n    for i in range(len(word_to_guess_splited)):\n        if word_to_guess_splited[i] in letters_guessed:\n            guess_splited[i] = word_to_guess_splited[i].upper()\n        else:\n            guess_splited[i] = \"_\"\n    return \"\".join(guess_splited)\n    \ndef play_hangman3(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splited = [letter if letter.isalpha() else \"_\" for letter in word_to_guess]\n    guess_splited = []\n    for i in range(len(word_to_guess)):\n        if word_to_guess[i] in letters_guessed:\n            guess_splited.append(word_to_guess[i])\n        else:\n            guess_splited.append(\"_\")\n    for i in range(len(word_to_guess_splited)):\n        if word_to_guess_splited[i] in letters_guessed:\n            guess_splited[i] = word_to_guess_splited[i].upper()\n        else:\n            guess_splited[i] = \"_\"\n    return \"\".join(guess_splited)\n    \ndef play_hangman4(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splited = [letter if letter.isalpha() else \"_\" for letter in word_to_guess]\n    guess_splited = []\n    for i in range(len(word_to_guess)):\n        if word_to_guess[i] in letters_guessed:\n            guess_splited.append(word_to_guess[i])\n        else:\n            guess_splited.append(\"_\")\n    for i in range(len(word_to_guess_splited)):\n        if word_to_guess_splited[i] in letters_guessed:\n            guess_splited[i] = word_to_guess_splited[i].upper()\n        else:\n            guess_splited[i] = \"_\"\n    return \"\".join(guess_splited)\n    \ndef play_hangman5(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splited = [letter if letter.isalpha() else \"_\" for letter in word_to_guess]\n    guess_splited = []\n    for i in range(len(word_to_guess)):\n        if word_to_guess[i] in letters_guessed:\n            guess_splited.append(word_to_guess[i])\n        else:\n            guess_splited.append(\"_\")\n    for i in range(len(word_to_guess_splited)):\n        if word_to_guess_splited[i] in letters_guessed:\n            guess_splited[i] = word_to_guess_splited[i].upper()\n        else:\n            guess_splited[i] = \"_\"\n    return \"\".join(guess_splited)\n    \ndef play_hangman6(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splited = [letter if letter.isalpha() else \"_\" for letter in word_to_guess]\n    guess_splited = []\n    for i in range(len(word_to_guess)):\n        if word_to_guess[i] in letters_guessed:\n            guess_splited.append(word_to_guess[i])\n        else:\n            guess_splited.append(\"_\")\n    for i in range(len(word_to_guess_splited)):\n        if word_to_guess_splited[i] in letters_guessed:\n            guess_splited[i] = word_to_guess_splited[i].upper()\n        else:\n            guess_splited[i] = \"_\"\n    return \"\".join(guess_splited)\n    \ndef play_hangman7(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splited = [letter if letter.isalpha() else \"_\" for letter in word_to_guess]\n    guess_splited = []\n    for i in range(len(word_to_guess)):\n        if word_to_guess[i] in letters_guessed:\n            guess_splited.append(word_to_guess[i])\n        else:\n            guess_splited.append(\"_\")\n    for i in range(len(word_to_guess_splited)):\n        if word_to_guess_splited[i] in letters_guessed:\n            guess_splited[i] = word_to_guess_splited[i].upper()\n        else:\n            guess_splited[i] = \"_\"\n    return \"\".join(guess_splited)\n    \ndef play_hangman8(word_to_guess,letters_guessed):\n    '''\n    Write a function that returns a string of the word guessed by the computer, based on the letters in the secret word that the computer has guessed.\n    '''\n    word_to_guess_splite"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = {}\n    if(type(str1) == str):\n        if(str1.isalpha() == True):\n            for char in str1:\n                if char in counter:\n                    counter[char] += 1\n                else:\n                    counter[char] = 1\n            return len(counter)\n        else:\n            return -1\n    return -1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char in alphabet:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            c += 1\n    return c\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.upper() == char.lower():\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    l = len(A)\n    even_pairs = 0\n    odd_pairs = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Base case\n    if len(A) == 1:\n        return 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                return i,j\n    \n    \ndef find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                count=count+1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j and A[i] & A[j] == 0:\n                count += 1\n    return count\n    \ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j and A[i] & A[j] == 0:\n                count += 1\n    return count\n    \ndef get_occurrences(list_a, element):\n    '''\n    Return a dictionary of the indices of the occurrences of the element in the list_a\n    '''\n    dict_indices = {}\n    for i,v in enumerate(list_a):\n        if element == v:\n            dict_indices[i] = list_a[i]\n    return dict_indices\n        \ndef find_even_k(A, k):\n    '''\n    Write a function that returns the number of pairs of integers in the list that xor to an even number.\n    '''\n    count = 0\n    count_dict = get_occurrences(A, k)\n    for j in count_dict:\n        if A[j] & (1 << k) == 0:\n            count += 1\n    return count\n    \ndef find_odd_k(A, k):\n    '''\n    Write a function that returns the number of pairs of integers in the list that xor to an odd number.\n    '''\n    count = 0\n    count_dict = get_occurrences(A, k)\n    for j in count_dict:\n        if A[j] & (1 << k) == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0: return 0\n    elif len(A) == 1: return 1\n    else: return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd = 0\n    even = 0\n    for i in A:\n        if i%2 == 0:\n            odd+=1\n        else:\n            even+=1\n    return odd,even\n        \ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    odd = 0\n    even = 0\n    for i in A:\n        if i%2!= 0:\n            odd+=1\n        else:\n            even+=1\n    return odd,even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for index in range(len(A)):\n        if A[index] == A[index+1]:\n            even_count +=1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(0,len(A)): \n        for j in range(0,len(A)):\n            if A[i] ^ A[j] == 0:\n                if i!= j:\n                    A[i] = 0\n    return len(A)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return next_power_of_2(n - 1) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (i**2 < n):\n        i = i + 1\n    return i**2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n * (n + 1) // 2)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2_upper_bound = 2**(n-1)\n    power_of_2_lower_bound = 2**(n-2)\n    while True:\n        if power_of_2_upper_bound <= power_of_2_lower_bound:\n            return power_of_2_upper_bound\n        else:\n            power_of_2_upper_bound *= 2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==1 or n==0:\n        return 1\n    else:\n        return n*next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is a power of two.\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    \n    # Find the largest power of 2.\n    if n < 2: \n        return 0\n    \n    # Find the index of largest power of 2.\n    i = 1\n    while i * i <= n: \n        if n % i == 0: \n            break\n        i += 2\n    if i * i > n: \n        return 0\n    \n    # Find the next power of 2.\n    return n**2 + next_power_of_2(n//i) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return next_power_of_2(n - 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i*i <= n:\n        if n%i == 0:\n            return n//i\n        i = i+1\n    return None\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n!= 0: \n        if n % 2 == 1: \n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n <= 0):\n        return 0\n    elif (n <= 2):\n        return 1\n    else:\n        return n*next_power_of_2(n-1)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Your code here\n    num=0\n    for i in range(len(a)):\n        if a[i]==x:\n            num+=1\n    return num"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # your code here\n    \n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = list(a)\n    for i in range(len(a)):\n        if a[i]==x:\n            return i\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # your code here\n    a = [int(i) for i in a]\n    d = {num: 0 for num in a}\n    d = dict(sorted(d.items(), key=lambda item: item[1]))\n    return len([num for num in d if d[num] > 0])\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    frequency=0\n    for i in a:\n        if i == x:\n            frequency+=1\n    return frequency\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num_of_occur = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            num_of_occur += 1\n    return num_of_occur\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    l = []\n    for i in a: \n        l.append(a.count(i)) \n    return l\n "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counts = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] == a[j]:\n                counts.append(a.count(a[i]))\n    return counts"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index in range(m, n):\n        sum += list1[index]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n+1):\n        s += list1[i]\n    print(s)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index in range(m, n + 1):\n        sum += list1[index]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if (m == n):\n        return list1[m]\n    \n    return sum_range_list(list1, m, n - 1) + sum_range_list(list1, m + 1, n - 1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == None and n == None:\n        return \"Please provide an integer for m and n.\"\n    if m == None or n == None:\n        return \"Please provide an integer for m and n.\"\n    if m < 0 or n < 0:\n        return \"Please provide an integer for m and n.\"\n    if len(list1) > 0:\n        return \"Please provide a list of integers.\"\n    if m > len(list1) or n > len(list1):\n        return \"Please provide an integer for m and n.\"\n    if m < n:\n        return \"Please provide an integer for m and n.\"\n    if m == n:\n        return list1[m]\n    if m == 0 or n == 0:\n        return sum(list1)\n    else:\n        return sum_range_list(list1[m:n], m, n)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # TODO: Write the code to find the sum of numbers in a list within a range\n    if len(list1) < m:\n        return sum_range_list(list1, m, n)\n    else:\n        return sum_range_list(list1, 0, n)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    # Write your code here\n    \n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum=0\n    for i in range(m, n):\n        sum+=list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        print(\"Sum cannot be calculated because of an index out of bound\")\n        return\n    else:\n        total = 0\n        for i in range(m,n):\n            total += list1[i]\n        print(total)\n    return\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a_x = a*3\n    b_x = a_x/2\n    c_x = a_x - b_x\n    return a_x + b_x + c_x\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = (3.1415926 * 2) ** 0.5\n    \n    if a < 0 or a % 2 == 0:\n        print('Need a non-negative integer value for sides.')\n        return\n    \n    n = int((a / 2) ** 0.5)\n    \n    p = 0\n    \n    if a > 2 * n - 2 * n:\n        print('A regular pentagon must have the length of 4. ')\n        return\n    \n    for i in range(1, n + 1):\n        p += 4 * (a / n) ** i\n    \n    print('The perimeter of the regular pentagon is:'+ str(p))\n    \ndef area_cube(x):\n    '''\n    Write a function that calculates the area of a cube.\n    '''\n    a = x * x * 3.1415926\n    \n    print('The area of the cube is:'+ str(a))\n    \ndef area_rectangle(a):\n    '''\n    Write a function that calculates the area of a rectangle.\n    '''\n    l = int(input('Please enter the length of one side: '))\n    \n    if l > 4 or l < 3:\n        print('A rectangle must be of size 4 or less.')\n        return\n        \n    s = l ** 2\n    \n    print('The area of the rectangle is:'+ str(s))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*3.14\ndef area_pentagon(a):\n    '''\n    Write a function that returns the area of a regular pentagon.\n    '''\n    return a*5*math.pi\ndef circumference_pentagon(a):\n    '''\n    Write a function that returns the circumference of a regular pentagon.\n    '''\n    return 2*math.pi*a\ndef main():\n    a = 0.6\n    print(\"Enter the first side of the pentagon\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the second side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the third side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventh side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the ninth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eleventh side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelfth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventhteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the ninteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenths side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eleventh side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelfth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixthteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventhteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventhteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenth side of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the ninthside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenthside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the tenthside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the elevenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the elevenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelvethside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the twelvethside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the thirteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fourteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the fifteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the sixteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventeenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the seventeenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the eighteenside of the pentagon:\")\n    print(\"Enter the length of the pentagon:\")\n    a = float(input())\n    print(\"Enter the nineteenside of the pentagon:\")\n    print(\"Enter the length o"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4 * a) + (4 * a * a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (a**2 + 4*a*a + 2)**0.5\n    print(\"The perimeter of the pentagon is: \", p)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = a # half length of the pentagon\n    h = l*3 # half height of the pentagon\n    return 2*(l+h)*math.sqrt(3)/2 # return value\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    l = a # half length of the hexagon\n    h = l*2 # half height of the hexagon\n    return 2*(l+h)*math.sqrt(5)/2 # return value\ndef area_pentagon(a):\n    '''\n    Write a function to compute the area of a regular pentagon from the length of its sides.\n    '''\n    l = a # half length of the pentagon\n    h = l*3 # half height of the pentagon\n    return math.sqrt(3)*l*l/2 # return value\ndef area_hexagon(a):\n    '''\n    Write a function to compute the area of a regular hexagon from the length of its sides.\n    '''\n    l = a # half length of the hexagon\n    h = l*2 # half height of the hexagon\n    return math.sqrt(5)*l*l/2 # return value\ndef perimeter_octagon(a):\n    '''\n    Write a function to compute the perimeter of a regular octagon from the length of its sides.\n    '''\n    l = a # half length of the octagon\n    h = l*4 # half height of the octagon\n    return 2*l*math.sqrt(3)/4 # return value\ndef perimeter_heptagon(a):\n    '''\n    Write a function to compute the perimeter of a regular heptagon from the length of its sides.\n    '''\n    l = a # half length of the heptagon\n    h = l*3 # half height of the heptagon\n    return 2*l*math.sqrt(5)/2 # return value\ndef perimeter_octagon_precent(a):\n    '''\n    Write a function to compute the perimeter of a regular octagon with percent.\n    '''\n    l = a # half length of the octagon\n    h = l*4 # half height of the octagon\n    return 2*l*(l+h)/4 # return value\ndef perimeter_heptagon_precent(a):\n    '''\n    Write a function to compute the perimeter of a regular heptagon with percent.\n    '''\n    l = a # half length of the heptagon\n    h = l*3 # half height of the heptagon\n    return 2*l*(l+h)/4 # return value\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to compute the perimeter of a regular rectangle from its sides.\n    '''\n    l = a # half length of the rectangle\n    h = l*2 # half height of the rectangle\n    if a == 0: # if the area of a rectangle is 0, return 0\n        return 0\n    if (b*b) - (l*l) <= 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    if (b*b) - (l*l) < 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    return (b*b) - (l*l)\ndef area_rectangle(a,b):\n    '''\n    Write a function to compute the area of a rectangle from its sides.\n    '''\n    l = a # half length of the rectangle\n    h = l*2 # half height of the rectangle\n    if a == 0: # if the area of a rectangle is 0, return 0\n        return 0\n    if (b*b) - (l*l) <= 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    if (b*b) - (l*l) < 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    return (b*b) - (l*l)\ndef perimeter_square(a):\n    '''\n    Write a function to compute the perimeter of a regular square from its sides.\n    '''\n    l = a # half length of the square\n    h = l*4 # half height of the square\n    return 2*l*math.sqrt(3)/4 # return value\ndef perimeter_rectangle_square(a,b):\n    '''\n    Write a function to compute the perimeter of a rectangle with respect to a square.\n    '''\n    l = a # half length of the rectangle\n    h = l*2 # half height of the rectangle\n    if a == 0: # if the area of a rectangle is 0, return 0\n        return 0\n    if (b*b) - (l*l) <= 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    if (b*b) - (l*l) < 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    return (b*b) - (l*l)\ndef area_square(a):\n    '''\n    Write a function to compute the area of a rectangle from its sides.\n    '''\n    l = a # half length of the rectangle\n    h = l*4 # half height of the rectangle\n    if a == 0: # if the area of a rectangle is 0, return 0\n        return 0\n    if (b*b) - (l*l) <= 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    if (b*b) - (l*l) < 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    return (b*b) - (l*l)\ndef perimeter_pentagon_square(a):\n    '''\n    Write a function to compute the perimeter of a rectangle with respect to a pentagon.\n    '''\n    l = a # half length of the pentagon\n    h = l*3 # half height of the pentagon\n    return 2*(l+h)*math.sqrt(3)/4 # return value\ndef perimeter_pentagon_rectangle(a,b):\n    '''\n    Write a function to compute the perimeter of a rectangle with respect to a pentagon.\n    '''\n    l = a # half length of the pentagon\n    h = l*2 # half height of the pentagon\n    if a == 0: # if the area of a rectangle is 0, return 0\n        return 0\n    if (b*b) - (l*l) <= 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    if (b*b) - (l*l) < 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    return 2*(l+h)*(l+h)/4 # return value\ndef perimeter_rectangle_square_square(a,b):\n    '''\n    Write a function to compute the perimeter of a rectangle with respect to a rectangle with respect to a square.\n    '''\n    l = a # half length of the rectangle\n    h = l*2 # half height of the rectangle\n    if a == 0: # if the area of a rectangle is 0, return 0\n        return 0\n    if (b*b) - (l*l) <= 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    if (b*b) - (l*l) < 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    return (b*b) - (l*l)\ndef perimeter_rectangle_pentagon_square(a,b):\n    '''\n    Write a function to compute the perimeter of a rectangle with respect to a pentagon with respect to a square.\n    '''\n    l = a # half length of the pentagon\n    h = l*3 # half height of the pentagon\n    if a == 0: # if the area of a rectangle is 0, return 0\n        return 0\n    if (b*b) - (l*l) <= 0: # if the perimeter of the rectangle is smaller than the area of a rectangle, return 0\n        return 0\n    if (b*b) - (l*l) < "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # a=float(input('enter length of side'))\n    print('Enter side:')\n    b=0\n    while(b!=4):\n        print('a')\n        a=float(input('Enter side'))\n        b+=1\n    print('Perimeter is',2*math.sqrt(a)*3.14)\n    return 'Perimeter is',2*math.sqrt(a)*3.14\ndef radius_pentagon(a):\n    '''\n    Write a function to find the radius of a regular pentagon from the length of its sides.\n    '''\n    print('Enter side:')\n    b=0\n    while(b!=4):\n        print('a')\n        a=float(input('Enter side'))\n        b+=1\n    print('Radius is',2*math.sqrt(a)*math.pi)\n    return 'Radius is',2*math.sqrt(a)*math.pi\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    print('Enter side:')\n    b=0\n    while(b!=4):\n        print('a')\n        a=float(input('Enter side'))\n        b+=1\n    print('Area is',a*a*3.14)\n    return 'Area is',a*a*3.14\ndef volume_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon from the length of its sides.\n    '''\n    print('Enter side:')\n    b=0\n    while(b!=4):\n        print('a')\n        a=float(input('Enter side'))\n        b+=1\n    print('Volume is',a*3.14*a)\n    return 'Volume is',a*3.14*a\ndef main():\n    '''\n    Write a function called main to test your function.\n    '''\n    print('Enter the type of the peting')\n    print('1: regular pentagon')\n    print('2: regular square')\n    print('3: regular triangle')\n    print('4: square')\n    print('5: triangle')\n    print('6: volume pentagon')\n    print('7: area pentagon')\n    print('8: volume regular pentagon')\n    print('9: volume square pentagon')\n    print('10: volume triangle pentagon')\n    print('11: volume volume pentagon')\n    print('12: volume regular square pentagon')\n    print('13: volume square pentagon')\n    print('14: volume triangle pentagon')\n    print('15: volume volume pentagon')\n    print('16: volume regular square pentagon')\n    print('17: volume square pentagon')\n    print('18: volume triangle pentagon')\n    print('19: volume volume pentagon')\n    print('20: volume regular square pentagon')\n    print('21: volume square pentagon')\n    print('22: volume triangle pentagon')\n    print('23: volume volume pentagon')\n    print('24: volume regular square pentagon')\n    print('25: volume square pentagon')\n    print('26: volume triangle pentagon')\n    print('27: volume volume pentagon')\n    print('28: volume regular square pentagon')\n    print('29: volume square pentagon')\n    print('30: volume triangle pentagon')\n    print('31: volume volume pentagon')\n    print('32: volume regular square pentagon')\n    print('33: volume square pentagon')\n    print('34: volume triangle pentagon')\n    print('35: volume volume pentagon')\n    print('36: volume regular square pentagon')\n    print('37: volume square pentagon')\n    print('38: volume triangle pentagon')\n    print('39: volume volume pentagon')\n    print('40: volume regular square pentagon')\n    print('41: volume square pentagon')\n    print('42: volume triangle pentagon')\n    print('43: volume volume pentagon')\n    print('44: volume regular square pentagon')\n    print('45: volume square pentagon')\n    print('46: volume triangle pentagon')\n    print('47: volume volume pentagon')\n    print('48: volume regular square pentagon')\n    print('49: volume square pentagon')\n    print('50: volume triangle pentagon')\n    print('51: volume volume pentagon')\n    print('52: volume regular square pentagon')\n    print('53: volume square pentagon')\n    print('54: volume triangle pentagon')\n    print('55: volume volume pentagon')\n    print('56: volume regular square pentagon')\n    print('57: volume square pentagon')\n    print('58: volume triangle pentagon')\n    print('59: volume volume pentagon')\n    print('60: volume regular square pentagon')\n    print('61: volume square pentagon')\n    print('62: volume triangle pentagon')\n    print('63: volume volume pentagon')\n    print('64: volume regular square pentagon')\n    print('65: volume square pentagon')\n    print('66: volume triangle pentagon')\n    print('67: volume volume pentagon')\n    print('68: volume regular square pentagon')\n    print('69: volume square pentagon')\n    print('70: volume triangle pentagon')\n    print('71: volume volume pentagon')\n    print('72: volume regular square pentagon')\n    print('73: volume square pentagon')\n    print('74: volume triangle pentagon')\n    print('75: volume volume pentagon')\n    print('76: volume regular square pentagon')\n    print('77: volume square pentagon')\n    print('78: volume triangle pentagon')\n    print('79: volume volume pentagon')\n    print('80: volume regular square pentagon')\n    print('81: volume square pentagon')\n    print('82: volume triangle pentagon')\n    print('83: volume volume pentagon')\n    print('84: volume regular square pentagon')\n    print('85: volume square pentagon')\n    print('86: volume triangle pentagon')\n    print('87: volume volume pentagon')\n    print('88: volume regular square pentagon')\n    print('89: volume square pentagon')\n    print('90: volume triangle pentagon')\n    print('91: volume volume pentagon')\n    print('92: volume regular square pentagon')\n    print('93: volume square pentagon')\n    print('94: volume triangle pentagon')\n    print('95: volume volume pentagon')\n    print('96: volume regular square pentagon')\n    print('97: volume square pentagon')\n    print('98: volume triangle pentagon')\n    print('99: volume volume pentagon')\n    print('100: volume regular square pentagon')\n    print('101: volume square pentagon')\n    print('102: volume triangle pentagon')\n    print('103: volume volume pentagon')\n    print('104: volume regular square pentagon')\n    print('105: volume square pentagon')\n    print('106: volume triangle pentagon')\n    print('107: volume volume pentagon')\n    print('108: volume regular square pentagon')\n    print('109: volume square pentagon')\n    print('110: volume triangle pentagon')\n    print('111: volume volume pentagon')\n    print('112: volume regular square pentagon')\n    print('113: volume square pentagon')\n    print('114: volume triangle pentagon')\n    print('115: volume volume pentagon')\n    print('116: volume regular square pentagon')\n    print('117: volume square pentagon')\n    print('118: volume triangle pentagon')\n    print('119: volume volume pentagon')\n    print('120: volume regular square pentagon')\n    print('121: volume square pentagon')\n    print('122: volume triangle pentagon')\n    print('123: volume volume pentagon')\n    print('124: volume regular square pentagon')\n    print('125: volume square pentagon')\n    print('126: volume triangle pentagon')\n    print('127: volume volume pentagon')\n    print('128: volume regular square pentagon')\n    print('129: volume square pentagon')\n    print('130: volume triangle pentagon')\n    print('131: volume volume pentagon')\n    print('132: volume regular square pentagon')\n    print('133: volume square pentagon')\n    print('134: volume triangle pentagon')\n    print('135: volume volume pentagon')\n    print('136: volume regular square pentagon')\n    print('137: volume squar"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a * math.sin(math.pi/4)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here\n    p = math.sqrt(a**2)\n    return p\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    letters = s.lower().split()\n    count = 0\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = [0]\n    dic = {'a':1,'b':1,'c':1,'d':1,'e':1,'f':1,'g':1,'h':1,'i':1,'j':1,'k':1,'l':1,'m':1,'n':1,'o':1,'p':1,'q':1,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,'y':1,'z':1}\n    for x in s:\n        if x in dic:\n            l.append(dic[x])\n    return sum(l)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    l=[]\n    for i in range(0,len(s)):\n        if(s[i]=='std'):\n            l.append(s[i])\n        if(i!=len(s)-1):\n            if(s[i]==s[i+1]):\n                count+=1\n    return count\n    \ndef count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count=0\n    l=[]\n    for i in range(0,len(s)):\n        if(s[i]=='std'):\n            l.append(s[i])\n        if(i!=len(s)-1):\n            if(s[i]==s[i+1]):\n                count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in s:\n        if i==\"std\":\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] =='s':\n            count+=1\n    print(count)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt=0\n    for i in range(len(s)):\n        if s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u' or s[i]=='A' or s[i]=='E' or s[i]=='I' or s[i]=='O' or s[i]=='U':\n            cnt+=1\n    return cnt\ndef words(s):\n    '''\n    Write a function to return the words in the given string.\n    '''\n    return set(s.lower().split())\ndef is_in_dictionary(word, dictionary):\n    '''\n    Return True if word is in the given dictionary.\n    '''\n    return word in dictionary\ndef word_length(s):\n    '''\n    Return the length of the word's'.\n    '''\n    return len(s)\ndef is_space_vowel(word):\n    '''\n    Return True if word contains a space character.\n    '''\n    return word.isalpha()\ndef word_consonant(word):\n    '''\n    Return True if word contains a consonant character.\n    '''\n    return not word.isalpha()\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if test_tuple[1] is not None:\n        return 'data type must be same'\n    elif type(test_tuple[0])!= type(test_tuple[1]):\n        return 'data type must be same'\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t_list = []\n    for t in test_tuple:\n        t_list.append(t.__dict__['data_type'])\n    if t_list == t_list[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # pass\n    \n    try:\n        tuple_tuple = tuple(test_tuple)\n    except TypeError:\n        return False\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_tuple=type(test_tuple[0])\n    if type_tuple==tuple:\n        return True\n    else:\n        return False\n    \n    \n    \n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0])!= type(test_tuple[1]):\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        type(test_tuple[0])\n        type(test_tuple[1])\n        type(test_tuple[2])\n        return True\n    except IndexError:\n        return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)!= 2:\n        raise TypeError(\"Invalid data type\")\n    elif not isinstance(test_tuple[0], int):\n        raise TypeError(\"Invalid data type\")\n    elif not isinstance(test_tuple[1], int):\n        raise TypeError(\"Invalid data type\")\n    elif not isinstance(test_tuple[0], int) or not isinstance(test_tuple[1], int):\n        raise TypeError(\"Invalid data type\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        tuple_type = tuple(test_tuple)\n        if len(tuple_type)!= len(test_tuple):\n            raise TypeError\n        else:\n            return True\n    except TypeError:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t = tuple(test_tuple)\n    if len(t)!= len(set(t)):\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"###### Check Type ######\")\n    print(\"\\nTest Tuples:\")\n    print(test_tuple)\n    for index, element in enumerate(test_tuple):\n        if type(test_tuple[index]) is not type(element):\n            raise TypeError(\"Element at {} has type {} but expected {}.\".format(index, type(element), type(test_tuple[index])))\n    print(\"\\nTest Done\")\n    return\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        if arr[0] == x:\n            return True\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    m = n//2\n    i = 0\n    if n % 2!= 0:\n        # we have to swap it to sort in descending order because we are only interested in finding the maximum element.\n        arr = arr[::-1]\n    for j in range(n-m+1):\n        if arr[j] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[n-1] > x:\n        return is_majority(arr[:n], n-1, x)\n    else:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n    if counter > (n/2):\n        return True\n    else:\n        return False\n    \ndef majority_element_recursive(arr, n, x):\n    if arr == []:\n        return False\n    if len(arr) == 1:\n        if is_majority(arr, n, x):\n            return arr[0]\n        return False\n    \n    if x < arr[0]:\n        return majority_element_recursive(arr[1:], n, x)\n    \n    return majority_element_recursive(arr[1:], n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the variables\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return get_majority_element(arr, n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # find the index of the majority element in the sorted array\n    i = 0\n    j = n - 1\n    while (i < j):\n        if (arr[i] == x):\n            j -= 1\n        else:\n            i += 1\n    return (arr[i] == x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr.sort()\n    \n    # base case\n    if n < 2:\n        return True\n    \n    # find the first element to compare and if there is more than half of the number in the array, return false\n    for i in range(n):\n        if arr[i]!= x:\n            return False\n    \n    # find the second element to compare and if there is more than half of the number in the array, return false\n    for i in range(n - 1):\n        if arr[i]!= arr[n - 1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    left = 0\n    right = len(arr)-1\n    while left < right:\n        if arr[left] == x:\n            if left == right:\n                return False\n            return True\n        elif arr[right] == x:\n            return True\n        elif arr[left] < x:\n            left += 1\n        elif arr[right] > x:\n            right -= 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count = 0\n        if count > n / 2:\n            return True\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n_bin = bin(n)\n    set_bits = []\n    for digit in n_bin[2:]:\n        set_bits.append(digit)\n    set_bits.reverse()\n    \n    return len(set_bits)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def count_Bits_1(n):\n        \n        num = n \n        count = 0 \n        \n        while num!= 0: \n            if num & 1 == 1: \n                count += 1 \n            num >>= 1\n        \n        return count \n    \n    def count_Bits_2(n):\n        \n        num = n \n        count = 0 \n        \n        while num!= 0: \n            if num & 1 == 1: \n                count += 1 \n            num >>= 1\n        \n        return count \n    \n    if n < 0: \n        return 0\n    \n    return count_Bits_1(n) + count_Bits_2(n)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0 \n    for i in range(1, n): \n        if (n % i) == 0: \n            cnt += 1\n    return cnt \ndef count_prime(n):\n    '''\n    Write a python function to count the number of prime numbers less than or equal to the given integer n.\n    '''\n    s = 0\n    for i in range(2, n):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, n):\n        if (n % i) == 0:\n            s += 1\n    return s\ndef count_prime_sum(n):\n    '''\n    Write a python function to count the number of prime numbers with sum equal to the given number n.\n    '''\n    s = 0\n    for i in range(2, n):\n        if n % i == 0:\n            s += 1\n    return s\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number n is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0 or n < 3:\n        return False\n    i = 3\n    while i <= int(n**0.5):\n        if n % i == 0:\n            return False\n        if i % 2 == 0:\n            return False\n        i += 3\n    return True\ndef count_primes(n):\n    '''\n    Write a python function to count the number of prime numbers less than or equal to the given integer n.\n    '''\n    s = 0\n    for i in range(3, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef is_prime_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef get_prime_factors(n):\n    '''\n    Write a python function to get all prime factors of a given number n.\n    '''\n    f = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                f.append(i)\n            else:\n                f.append(n//i)\n    return f\ndef count_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_inverse(n):\n    '''\n    Write a python function to count the number of prime numbers with inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef inverse_mod(n, p):\n    '''\n    Write a python function to compute the inverse of a number.\n    '''\n    s = 0\n    while p!= 1:\n        r = n % p\n        n = p\n        p = r\n    return n\ndef count_primes_and_inverse(n):\n    '''\n    Write a python function to count the number of prime numbers with sum equal to the given number n and the inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_primes_and_inverse_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n with the inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_primes_and_inverse_sum(n):\n    '''\n    Write a python function to count the number of prime numbers with sum equal to the given number n and the inverse.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef sum_factors(n):\n    '''\n    Write a python function to compute the sum of all prime factors of a given number n.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += i\n    return s\ndef count_prime_factors_with_sum(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_sum_mod(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_inverse(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_inverse_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_inverse_sum(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_sum(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef count_prime_factors_with_sum_mod(n):\n    '''\n    Write a python function to count the number of prime factors of a given number n, with the sum equal to the given number n, with the inverse.\n    '''\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef prime_factors(n):\n    '''\n    Write a python function to get all prime factors of a given number n.\n    '''\n    f = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            f.append(i)\n    return f\ndef inverse(n):\n    '''\n    Write a python function to compute the inverse of a number.\n    '''\n    s = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            s += 1\n    return s\ndef inverse_mod(n, p):\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    total = 0\n    for i in range(n):\n        total += (1 if n%2 == 0 else 0)\n    return total\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    count = 0\n    for i in str(n):\n        count += int(i)\n    return count\ndef count_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    return (count_Set_Bits(n))\ndef count_Bits_v1(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    return (count_Set_Bits(n)+count_Bits(n))\ndef count_Bits_v2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    return (count_Set_Bits(n))+(count_Bits(n))\ndef count_Bits_v3(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    count = 0\n    for i in str(n):\n        count += int(i)\n    return count\ndef count_Bits_v4(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    return (count_Set_Bits(n)+count_Bits(n)+count_Bits(n))\ndef count_Bits_v5(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    return (count_Set_Bits(n)+count_Bits(n))\ndef count_Bits_v6(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    count = 0\n    for i in str(n):\n        count += int(i)\n    return count\ndef count_Bits_v7(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    return count_Set_Bits(n)+count_Bits(n)+count_Bits(n)\ndef count_Bits_v8(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    return count_Set_Bits(n)+count_Bits(n)+count_Bits(n)+count_Bits(n)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    total_bits = 0\n    while n>0:\n        remainder = n % 2\n        total_bits += remainder\n        n = n // 2\n    return total_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Set_Bits = 0\n    while n!= 0: \n        if n & 1: \n            Set_Bits += 1 \n        n = n >> 1 \n    return Set_Bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = int(n)\n    if n <= 1: \n        return 0\n    else: \n        return int(bin(n)[2:])\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Write your code here\n    count = 0\n    for i in str(n):\n        count += int(i)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = 0\n    while n: \n        s += int(n % 2) \n        n = n//2\n    return s\n    pass"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''.join([char if (char%2==0) else'' for char in str])\n    return res\n    \ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    res = ''.join([char if (char%2==1) else'' for char in str])\n    return res\n    \ndef even_values_list(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given list.\n    '''\n    res = ''.join([char for char in str if char % 2 == 0])\n    return res\n    \ndef odd_values_list(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given list.\n    '''\n    res = ''.join([char for char in str if char % 2 == 1])\n    return res\n    \nprint(odd_values_string('this is a string'))\nprint(odd_values_string([3, 5, 2, 1, 9, 7]))\nprint(odd_values_string(['a', 'c', 'b']))\nprint(odd_values_string(['b', 'c', 'b', 'a']))\nprint(odd_values_list(['a', 'c', 'b']))\nprint(odd_values_list([3, 5, 2, 1, 9, 7]))\nprint(odd_values_list(['a', 'c', 'b']))\nprint(odd_values_list(['b', 'c', 'b', 'a']))\nprint(odd_values_list(['b', 'c', 'b', 'a']))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd = \"\"\n    for index in str:\n        if index % 2 == 0:\n            odd += index\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # remove_char = ''\n    # for i in str:\n    #     if i % 2 == 1:\n    #         remove_char += i\n    # return remove_char\n    list = str.split()\n    new_list = []\n    for i in list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return''.join(new_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    newstr = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            newstr += str[i]\n    return newstr\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = [index for index, char in enumerate(str) if index % 2 == 1]\n    str = ''.join(str)\n    return str.translate(str.maketrans('','','''\\u03c0-\\u03c9'\n    \\u03c0-\\u03c7'''))\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odds = []\n    for i in range(len(str)):\n        if (str[i] % 2) == 1:\n            odds.append(str[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return\n    odd_count = 0\n    \n    for i in range(len(str)):\n        if i % 2:\n            continue\n        else:\n            if str[i] % 2 == 1:\n                odd_count += 1\n                str = str[:i] + str[i+1:]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    odd_indexes = []\n    for i in range(len(str)):\n        if i%2 == 0:\n            if str[i] not in odd_indexes:\n                odd_indexes.append(str[i])\n        else:\n            pass\n    return str[0:len(str)-len(odd_indexes)]\n    "
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for i in range(0, len(str), 2):\n        if i % 2 == 0:\n            odd_index.append(i)\n    return \"\".join(str[i] for i in odd_index)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return \"Numbers are not in order\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c:\n        return a\n    elif a<b<c:\n        return a\n    elif a>b>c:\n        return b\n    elif a>b<c:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    elif b>a:\n        if b>c:\n            return b\n        else:\n            return c\n    else:\n        if c>a:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    if b<a<c:\n        return b\n    if c<a<b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # write your code here\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c and a>=b:\n        min=a\n        if min>a:\n            min=a\n        if min>b:\n            min=b\n        if min>c:\n            min=c\n        print(min)\n    elif a<b and b<c and a<c:\n        min=a\n        if min>a:\n            min=a\n        if min>b:\n            min=b\n        if min>c:\n            min=c\n        print(min)\n    else:\n        min=c\n        if min>b:\n            min=b\n        if min>a:\n            min=a\n        if min>c:\n            min=c\n        print(min)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    B=0\n    L=0\n    R=n-1\n    if r < L or r > R :\n        return 0\n    while l < R:\n        if l % 2 == 0:\n            if (l-L)%2==1:\n                B=B+1\n            L=L+1\n        else:\n            if (l-L)%2==0:\n                B=B+1\n            L=L-1\n        l=l+1\n    return B"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        bin_num = bin(i)\n        bin_num = bin_num.lstrip('0')\n        bin_num = bin_num.rstrip('L')\n        bin_num = bin_num.zfill(n)\n        for j in range(n):\n            if bin_num[j] == '1':\n                if i in range(l,r+1):\n                    return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<=n<=r:\n        return True\n    elif n>=l and n<=r:\n        if (n%2)==0:\n            return all_Bits_Set_In_The_Given_Range(n,l,r-1)\n        else:\n            return all_Bits_Set_In_The_Given_Range(n+1,l,r-1)\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #initialise return value\n    result = False\n    \n    #if the given range is empty\n    if (n==0):\n        return result\n    #if the range is not empty\n    if (n>0 and n<=((2**l)-(2**r)):\n        #update result\n        result = True\n    else:\n        #return false\n        return result\n    \n    #call the function\n    return all_Bits_Set_In_The_Given_Range(n-1,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if not (0 <= i < n):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = l\n    # if we want to check the whole range\n    if r < n:\n        while i <= r:\n            i+=1\n            if i == n:\n                print(\"The bits in the range [%d,%d] are unset\" % (l, r))\n            else:\n                print(\"The bits in the range [%d,%d] are unset\" % (l, i))\n    else:\n        print(\"There is no unset bits in the given range\")\n    print('Checking...')\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #if both l and r are less than 0\n    if l < 0 or r < 0:\n        return 'Error: The range should be non-negative.'\n    #if both l and r are greater than the number of bits\n    elif l > n or r > n:\n        return 'Error: The range should be in the range of n.'\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #initializing\n    bits = bin(n)\n    bits = bits[2:]\n    bits = bits.zfill(8)\n    bits = list(bits)\n    bits = list(bits[0:4])\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bitSet = set()\n    for i in range(n):\n        if (l-i) == r and i < n:\n            bitSet.add(r-i)\n            \n    return len(bitSet) == n\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n_arr = list(arr)\n    n_arr.sort()\n    print(n_arr)\n    for i in range(n):\n        if arr[i] < 0:\n            n_arr[i] = -arr[i]\n    return n_arr\n    \n    \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = np.empty(n)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    for i in arr:\n        if i < 0:\n            res.append(-i)\n        else:\n            res.append(i)\n    for j in range(len(res)):\n        if res[j] < 0:\n            res[j] *= -1\n        res[j] += abs(n)\n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your code here.\n    res = []\n    arr.sort()\n    for i in range(n):\n        res.append(arr[i])\n    for i in range(n, len(arr)):\n        res.append(arr[i])\n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    num_sorted_elements = 0\n    for i in range(0, n):\n        if (arr[i] < 0):\n            arr[i] = arr[i] * -1\n            num_sorted_elements += 1\n    arr_rearranged = []\n    for i in range(0, n):\n        if (arr[i] < 0):\n            arr_rearranged.append(0)\n        else:\n            arr_rearranged.append(arr[i])\n    for i in range(n, num_sorted_elements):\n        arr_rearranged.append(0)\n    return arr_rearranged\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # find the first positive element\n    pos = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < 0:\n            pos = arr[i]\n    # find the first negative element\n    neg = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            neg = arr[i]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # find the max value in the array\n    maximum = -99999\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your function should return an array.\n    arr_rearrange = []\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_length = len(arr)\n    re_arrange_array = [0] * (n+1)\n    for i in range(arr_length):\n        if arr[i] < 0:\n            for j in range(arr[i] - 1, -1, -1):\n                re_arrange_array[j] += 1\n    # print(re_arrange_array)\n    for i in range(n):\n        if re_arrange_array[i] > 0:\n            arr[i] = -arr[i]\n            # arr[i] = -arr[i] - 1\n            re_arrange_array[arr[i]] = 0\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if arr is None:\n        return None\n    elif not arr:\n        return None\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    temp_string = str1.replace(' ','')\n    return temp_string.replace(char,'')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char == \" \":\n        return str1.replace(\" \",\"\")\n    else:\n        return str1.replace(char,\" \")\n        \nprint(replace_blank('  \\\\|\\\\  ','$'))\nprint(replace_blank(\"\\\\\\n\",\"$\"))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1==None:\n        return None\n    \n    str1=str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == \" \" and str1[i-1]!= \" \":\n            str1 = str1.replace(str1[i-1],' ')\n        elif str1[i]!= \" \" and str1[i-1] == \" \":\n            str1 = str1.replace(str1[i-1],' ')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # define the function\n    def replace_blank(str1,char):\n        # loop to look for character\n        for char in str1:\n            # if char is blank, replace it with character\n            if char =='':\n                return char + char\n        # if char is not blank, return original string\n        return str1\n    # return the new string\n    return replace_blank(str1,char)\n    "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return str1.replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,' ')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1.replace(' ','')\n    str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    s = []\n    while heap and n>0:\n        heapq.heappop(heap)\n        s.append(heapq.heappop(heap))\n        n-=1\n    return s\ndef kth_largest_number(list1,k):\n    '''\n    Write a function that takes in a list of numbers and an integer k and returns a list containing the k-th largest element from the list.\n    '''\n    return list1[-k:]\ndef main():\n    a=[2,3,5,7,8,9,11,13,20,23,34,37,40,42,43]\n    b=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    print(larg_nnum(a,2))\n    print(kth_largest_number(a,2))\n    print(kth_largest_number(b,2))\nmain()"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 1:\n        return list1\n    else:\n        return larg_nnum(list1,n-1) + [list1[0]]\n    \ndef min_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if n == 1:\n        return list1\n    else:\n        return min_nnum(list1,n-1) + [list1[0]]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef longest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef avg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the average of the n largest items from the list.\n    '''\n    avg = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef standard_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the standard deviation of the n largest items from the list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (list1[i] - average_value(list1))**2\n    return (sum/n)**(1/2)\ndef mode_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the n largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef median_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the median of the n largest items from the list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (list1[i] - average_value(list1))\n    return (sum/n)\ndef mode2_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 2nd largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode3_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 3rd largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode4_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 4th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode5_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 5th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode6_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 6th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode7_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 7th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode8_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 8th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode9_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 9th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode10_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 10th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode11_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 11th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode12_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 12th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode13_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 13th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode14_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 14th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode15_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 15th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode16_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the mode of the 16th largest items from the list.\n    '''\n    mode = 0\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    return heap\ndef mode17_nnum(lis"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #TODO: use heapq to return the n largest elements\n    \n    heap = []\n    \n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    \n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) <= n:\n        return list1\n    else:\n        return larg_nnum(list1,n-1)\n        \n    \ndef rem_odd(list1):\n    '''\n    Write a function that takes in a list and a number and returns a list with all items from the list except items with index n-2.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            list1.remove(list1[i])\n    return list1\n        \ndef extend(list1,index):\n    '''\n    Write a function that takes in a list and a number and returns a new list with all items from the list except the item with index index.\n    '''\n    for i in range(index):\n        if i!= index:\n            list1.append(list1[i])\n        else:\n            list1.extend(list1[i])\n    return list1\n        \ndef move_siftdown(list1,index,list2):\n    '''\n    Write a function that takes in a list and a number and returns a new list with all items from the list except the item with index index and their predecessor.\n    '''\n    for i in range(index):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n            list2.remove(list1[i])\n        else:\n            list1.append(list1[i])\n            list2.append(list1[i])\n    return list1,list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    new_list = []\n    for i in range(n):\n        new_list.append(heapq.heappop(list1))\n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n):\n        heapq.heappop(list1)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    list2=[]\n    for i in range(n):\n        list2.append(heapq.heappop(heap))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return [i for i in list1 if i >= n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    result = []\n    for num in list1:\n        heapq.heappush(heap,[num,n])\n    while heap:\n        num,i = heapq.heappop(heap)\n        result.append(num)\n        if len(result) == n:\n            break\n        else:\n            heapq.heappush(heap, [num,i+1])\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from mpl_toolkits.mplot3d import Axes3D\n    from matplotlib import pyplot as plt\n    from matplotlib import animation\n    from matplotlib import colors\n    import numpy as np\n    from scipy.interpolate import UnivariateSpline\n    from scipy.integrate import odeint\n    from scipy.interpolate import interp1d\n    from scipy.spatial.transform import Rotation as R\n    from scipy.spatial.transform import Slerp\n    from scipy.spatial.transform import Rotation as R\n    from scipy.spatial.transform import Slerp\n    from scipy.spatial.transform import Rotation as R\n    from scipy.spatial.transform import Slerp\n    from scipy.spatial.transform import Rotation as R\n    from scipy.spatial.transform import Slerp\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    import numpy.linalg as LA\n    import matplotlib.pyplot as plt\n    import math\n    \n    def sphere_area(r):\n        '''\n        Sphere area in cm^2.\n        '''\n        return (1/3)*(4*math.pi*r*r*1.0)\n        \n    def cylinder_area(r,h):\n        '''\n        Cylinder area in cm^2.\n        '''\n        return sphere_area(r) - sphere_area(r)*(1-h)*h\n        \n    def volume_of_cylinder(r,h):\n        '''\n        Volume of cylinder in cm^3.\n        '''\n        return (1/3)*(4*math.pi*r*r*h)\n        \n    def surface_volume(r,h):\n        '''\n        Surface volume of a cylinder in cm^3.\n        '''\n        return volume_of_cylinder(r,h)\n        \n    def area_of_sphere(r):\n        '''\n        Sphere area.\n        '''\n        return sphere_area(r)\n        \n    def perimeter_of_sphere(r):\n        '''\n        Perimeter of sphere.\n        '''\n        return (1/3)*(4*math.pi*r*r*1.0)\n        \n    def eccentricity(r):\n        '''\n        Eccentricity.\n        '''\n        return (1/3)*(1.0/8.0*math.pi*r*r*1.0)\n        \n    def center_of_sphere(r):\n        '''\n        Center of sphere.\n        '''\n        return (1/3)*(4*math.pi*r*r*1.0)\n        \n    def volume_of_cylinder(r,h):\n        '''\n        Volume of cylinder.\n        '''\n        return (1/3)*(4*math.pi*r*r*h)\n        \n    def volume_of_sphere(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)\n        \n    def volume_of_cylinder_perimeter(r):\n        '''\n        Volume of cylinder.\n        '''\n        return (volume_of_cylinder(r) - volume_of_cylinder(r)/4.0)\n        \n    def volume_of_cylinder_perimeter_from_sphere(r):\n        '''\n        Volume of cylinder.\n        '''\n        return (volume_of_cylinder_perimeter(r) - volume_of_sphere(r))\n        \n    def volume_of_cylinder_from_sphere(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r) - volume_of_sphere(r)\n        \n    def volume_of_cylinder_from_sphere_perimeter(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r) - (volume_of_cylinder_perimeter_from_sphere(r))\n        \n    def volume_of_cylinder_from_sphere_perimeter_from_cylinder(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r) - volume_of_cylinder_perimeter_from_sphere(r)/4.0\n        \n    def volume_of_cylinder_from_cylinder(r,h):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder_from_sphere(r)*(1-h)\n        \n    def volume_of_cylinder_from_cylinder_perimeter(r,h):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h) - volume_of_cylinder(r)/4.0\n        \n    def volume_of_cylinder_from_cylinder_perimeter_from_cylinder(r,h):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h) - volume_of_cylinder_perimeter_from_sphere(r)/4.0\n        \n    def volume_of_cylinder_from_sphere_perimeter(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_cylinder_from_sphere_perimeter_from_cylinder(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)*(1-h) - volume_of_cylinder(r)/4.0\n        \n    def volume_of_cylinder_from_cylinder_perimeter(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_cylinder_from_cylinder_perimeter_from_sphere(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h) - volume_of_cylinder(r)/4.0\n        \n    def volume_of_cylinder_from_sphere_perimeter(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_cylinder_from_sphere(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_cylinder_perimeter_from_cylinder(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_cylinder_perimeter_from_sphere(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)*(1-h) - volume_of_cylinder_perimeter(r)/4.0\n        \n    def volume_of_sphere(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)\n        \n    def volume_of_sphere_perimeter(r):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_sphere_perimeter_from_cylinder(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_sphere_perimeter_from_cylinder_perimeter(r):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_sphere_from_cylinder(r,h):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_sphere_from_cylinder_perimeter(r,h):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h)\n        \n    def volume_of_sphere_from_cylinder_perimeter_from_cylinder(r,h):\n        '''\n        Volume of cylinder.\n        '''\n        return volume_of_cylinder(r)*(1-h) - volume_of_cylinder_perimeter_from_cylinder(r)/4.0\n        \n    def volume_of_sphere_from_cylinder(r,h):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_sphere(r)*(1-h)\n        \n    def volume_of_sphere_perimeter_from_cylinder(r,h):\n        '''\n        Volume of sphere.\n        '''\n        return volume_of_sphere(r)*(1-"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # compute area of cylinder\n    r1 = 0.5 * (r[0] + r[1])\n    r2 = 0.5 * (r[1] + r[2])\n    area = (r1**2 - r2**2) * np.pi\n    # compute lateral surface area\n    s = (4/3) * np.pi * r[0] * r[1] * np.exp(-3 * (r[0]**2 - r[1]**2) / (2 * (r[0]**2 + r[1]**2)))\n    # return\n    return s*area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)/3\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the y components of the cylinder.\n    y1 = -(r**2) + 2*r*h + r*h\n    y2 = (r**2) + 2*(r*h) - 2*(r*h)\n    y3 = (r**2) + (r*h)\n    #calculate the x components of the cylinder.\n    x1 = -(r) + 2*r*h + r*h\n    x2 = (r) + 2*(r*h) - 2*(r*h)\n    x3 = (r) + (r*h)\n    #calculate the solid values of the surface.\n    y = 0.5*(y1 + y2 + y3)\n    x = 0.5*(x1 + x2 + x3)\n    #calculate the solid area using the given solid values.\n    return y/2/3*r**3*np.pi\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # your code here\n    return 2*r*h*np.sin(np.arctan(2*r*h))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import mathutils\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r*math.pi*(math.cos(math.radians(h)))**2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import numpy as np\n    import scipy\n    #https://stackoverflow.com/questions/27873057/are-you-sure-that-a-circle-has-a-face-with-a-radius-of-r\n    \n    def func(r):\n        # pi = 3.14\n        #return math.pi*(r*r)/2\n        return 2*np.pi*r*r*3\n    \n    # define boundaries\n    r0 = r*1.2\n    lb = np.array([np.clip(r0*0.75,0,r0)])\n    ub = np.array([np.clip(r0*1.25,0,r0)])\n    \n    # loop over interior angles\n    lateral_suface = []\n    for i in np.arange(0,360,45):\n        # define new r0 and h\n        r0 = lb[0]+(ub[0]-lb[0])*i/(360)\n        h = (ub[1]-lb[1])*i/(180)\n        \n        # calculate suface area using cylindrical formula\n        suface_area = func(r0)*func(h)\n        lateral_suface.append(suface_area)\n        \n    return lateral_suface\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    LateralSurface = (2*h*r) / (2*r*np.cos(np.pi*h/2))\n    return(LateralSurface)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Write your code here\n    return (4/3)*l**3\n    \n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return round(4/3 * l * math.pi, 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    # if the side length is bigger than 4, return 0\n    if l > 4:\n        return 0\n    \n    # set a variable to store the volume of a cube\n    volume = 0\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    volume = l*l*l*l\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 4*l**3\n    print(f'The volume of a cube with sides of {l} is {v:.2f} m3.')\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # YOUR CODE HERE\n    v=l*l*l*l\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l*l*l\n    print(f'Volume of cube of side length {l} is {volume}')\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for side in range(1, l + 1):\n        volume += side * side * side\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l*l\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_list = []\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            even_list.append(1)\n        else:\n            even_list.append(0)\n        i += 1\n    return even_list\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Declare a new variable as a string\n    new_str = ''\n    # Iterate through the number\n    for i in str(n):\n        if i == '1':\n            # If the number is even, add it to the new string\n            if int(i) % 2 == 0:\n                new_str += '1'\n            # If it's odd, leave it alone\n            else:\n                new_str += '0'\n    # Return the new string\n    return new_str\n    "
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    for i in range(0,n):\n        if (i%2 == 0):\n            count = count + 1\n    if (count > 0):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #Your code here\n    a = bin(n)[2:]\n    while len(a)!= 0:\n        if a[0] == '0':\n            a = a[1:]\n        else:\n            a = '0' + a\n        if a[0] == '0':\n            a = a[1:]\n        else:\n            a = '0' + a\n    return int(a, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0xFFFF  # shifts the bits of n to the left and shifts all the bits to the right\n    while n > 0:\n        n &= 0xFFFF  # shifts the bits of n to the left and shifts all the bits to the right\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n%2 == 0:\n        n = n//2\n    else:\n        n = (n-1)//2+1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n > 0: \n        result += 1\n        if n & 1 == 1: \n            n = n >> 1\n        else: \n            n = n << 1\n    print(result)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n%2 == 0:\n            n = n >> 1\n        else:\n            n = n<<1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    sum=0\n    while n>0:\n        sum=sum+n&1\n        n=n>>1\n    print sum\n    return sum\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    temp_dictionary = {}\n    for i in range(0,len(test_list)):\n        test_list[i] = test_list[i] [0]\n        for item in test_list:\n            if item in temp_dictionary.keys():\n                temp_dictionary[item] += 1\n            else:\n                temp_dictionary[item] = 1\n        test_list[i] = test_list[i] [1]\n        for item in test_list:\n            if item in temp_dictionary.keys():\n                temp_dictionary[item] += 1\n            else:\n                temp_dictionary[item] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    #create dictionary of tuples and their counts\n    dict1 = dict()\n    for x in test_list:\n        if x not in dict1:\n            dict1[x] = 1\n        else:\n            dict1[x] += 1\n    return dict1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    c = Counter(test_list)\n    return dict(c)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for el in test_list:\n        my_dict[el[0]] = my_dict.get(el[0], 0) + 1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuple_counter = Counter(test_list)\n    return unique_tuple_counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list.sort()\n    return {tuple(list(tup)):tup.count(tuple(list(tup))) for tup in test_list}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for item in test_list:\n        d[item[0]] = d.get(item[0],0) + 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    lookup_dict = {}\n    for element in test_list:\n        if element[0] not in lookup_dict:\n            lookup_dict[element[0]] = 1\n        else:\n            lookup_dict[element[0]] += 1\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    c = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if str[i:j] == str[i:j][::-1]:\n                c+=1\n    return c\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(0,len(str)):\n        #if index == 0:\n        #    print(str[0:i+1])\n        if(str[i]!= str[i+1]):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+1:i+3]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        for j in range(len(str)):\n            if str[j] == str[j+1]:\n                count = count+1\n    return count\n    # Write your code here\n    \n    \n    \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    a=str.split(\" \")\n    for i in range(0,len(a)-1):\n        if a[i]==\"\":\n            continue\n        else:\n            if a[i+1]==\"\":\n                continue\n            else:\n                if a[i]==a[i+1]:\n                    count=count+1\n                else:\n                    break\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    max_substr = 0\n    num_substrs = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            num_substrs += 1\n        else:\n            max_substr = max(max_substr, num_substrs)\n            num_substrs = 0\n    return max_substr\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if(str[i:j]!= str[i:j][::-1]):\n                count += 1\n    return count\n    \ndef main():\n    str = input(\"Enter a string: \")\n    print(number_of_substrings(str))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str) - 1):\n        if str[i]!= str[i + 1] and str[i]!='':\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # test cases\n    assert isinstance(str, str) and len(str) > 0, 'The string must be a non-empty string'\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n: \n        print(\"Please provide an integer greater than n.\")\n        return \n    \n    for i in range(2, n+1): \n        if i%2!= 0: \n            continue\n        else: \n            if i%m == 0: \n                return m+1\n            else:\n                continue\n    \n    print(\"No sequences exist with length n.\")\n    return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq_len = 2*m+2\n    f_seq = seq_len\n    return f_seq\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequence = 0\n    for i in range(m, n+1):\n        total_sequence += i * i\n    return total_sequence\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Hint: How to find the total number of sequences of length n?\n    # Hint: Use a recursive function to find the length of the sequence.\n    # Hint: Check the difference between two indices (remember, the same element is multiple times).\n    # Hint: Use the fact that the number of sequences is defined as the sum of the number of elements in the subsequence of length n.\n    # Hint: Return a list of numbers.\n    \n    #Base case of the recursive algorithm:\n    if (m == 0):\n        return n\n    \n    #To find the number of sequences of length n:\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Write your code here\n    def find_sequences(m,n): \n        count = 0\n        for i in range(1,n+1):\n            if m >= (i//2):\n                count += 1\n            else:\n                if m % i == 0:\n                    count += 1\n        return count \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # set variables\n    sum = 0\n    prev_num = -1\n    for i in range(1,n+1):\n        if prev_num==-1:\n            prev_num = i\n            sum+=prev_num\n        else:\n            sum+=prev_num*(prev_num)\n            prev_num = i\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_num_of_sequences = 0\n    for m_num in range(0,m):\n        for n_num in range(0,n):\n            if (m_num + n_num)%2!= 0:\n                total_num_of_sequences += 1\n    return total_num_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    x = 0\n    y = 0\n    a = [1, 1]\n    while a:\n        x += 1\n        y += 1\n        print(x, y)\n        a = [int(i) for i in str(x)]\n        print(a)\n    return x\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # your code here\n    if m > 0 and n > 0:\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return get_total_number_of_sequences(m, n//2)\n        else:\n            return get_total_number_of_sequences(m, n//2) + get_total_number_of_sequences(m, n//2)\n    else:\n        return 0\n        \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(len(list1)-1)\n    list1.insert(0,list2)\n    return list1\n    \nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8,10]))\nprint(replace_list([1,3,5,7,9], [2,4,6,8"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n    \n    \n    \ndef add_list(list1,list2):\n    '''\n    Write a function that takes in two lists and adds the elements of the first list to the second list.\n    '''\n    list1.append(list2[-1])\n    \n    \n    \ndef get_index(list, element):\n    '''\n    Write a function that takes in a list and a value and returns the index of the value in the list.\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            return i\n        \n        \ndef length_of_list(list):\n    '''\n    Write a function that returns the length of the list.\n    '''\n    return len(list)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    newlist = []\n    for index in list1:\n        if index in list2:\n            newlist.append(index)\n            list2.remove(index)\n    print(newlist)\n    return newlist\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3 = list1.copy()\n    list3.pop()\n    list3.append(list2[-1])\n    return list3\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1[-1] = list2[-1]\n    \n    return list"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    new_list.append(list2[0])\n    print(new_list)\n    return new_list\n    \ndef list_addition(list1,list2):\n    '''\n    Write a function that takes in two lists and adds the values in the second list to the first list.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        new_list.append(list1[i]+list2[i])\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    list1[len(list1)-1]=list2[len(list2)-1]\n    print(list1)\n    return list1\n    \ndef test_replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    list2=list2[:-1]\n    print(list2)\n    list1=list1[:-1]\n    print(list1)\n    return list1\n    \nlist1=list(map(int,input('Enter list1:\\n').split()))\nlist2=list(map(int,input('Enter list2:\\n').split()))\nprint(replace_list(list1,list2))\ntest_replace_list(list1,list2)"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:1]+list2+list1[1:]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) < 1:\n        return 0\n    elif len(str1) == 1:\n        return 1\n    elif len(str1) == 2:\n        return 1 + count_charac(str1[0])\n    else:\n        return (count_charac(str1[0]) + count_charac(str1[1:len(str1)]))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char in \"abcdefghijklmnopqrstuvwxyz\":\n            count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for x in str1:\n        if x.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count = count + 1\n    return count\n    #print(\"The total number of characters in the string is: \", count)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    characters = 0\n    for character in str1:\n        characters += 1\n    return characters\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    dict = {}\n    i = 0\n    for char in str1:\n        if char not in dict:\n            dict[char] = 0\n        dict[char] += 1\n        i += 1\n    return i,dict\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    def count_char(str1):\n        '''\n        return the number of characters in string\n        '''\n        count = 0\n        for char in str1:\n            if char.isalpha():\n                count += 1\n        return count\n    \n    if str1 == \"\":\n        raise ValueError(\"String is empty\")\n    else:\n        return count_char(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a')+str1.count('e')+str1.count('i')+str1.count('o')+str1.count('u')+str1.count('A')+str1.count('E')+str1.count('I')+str1.count('O')+str1.count('U')\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.sqrt(N)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 0):\n        return 1\n    elif(N == 1):\n        return 2\n    elif(N == 2):\n        return 3\n    elif(N == 3):\n        return 4\n    elif(N == 4):\n        return 5\n    elif(N == 5):\n        return 6\n    elif(N == 6):\n        return 7\n    elif(N == 7):\n        return 8\n    elif(N == 8):\n        return 9\n    elif(N == 9):\n        return 10\n    else:\n        return N+next_Perfect_Square(N-1)\n    \ndef isPerfect(x):\n    if(N == 1):\n        return False\n    if(N == 2):\n        return True\n    if(N == 3):\n        return x%10 == 0 and (N%2 == 0 or N%10 == 0) and (N%10 == 9)\n    if(N == 4):\n        return x%10 == 0 and (N%2 == 0 or N%10 == 0 or N%10 == 9) and (N%10 == 0 or N%10 == 9)\n    if(N == 5):\n        return x%10 == 0 and (N%2 == 0 or N%10 == 0 or N%10 == 9 or N%10 == 0) and (N%10 == 9 or N%10 == 0)\n    if(N == 6):\n        return x%10 == 0 and (N%2 == 0 or N%10 == 0 or N%10 == 9 or N%10 == 0) and (N%10 == 9 or N%10 == 0 or N%10 == 9)\n    if(N == 7):\n        return x%10 == 0 and (N%2 == 0 or N%10 == 0 or N%10 == 9 or N%10 == 0) and (N%10 == 9 or N%10 == 0 or N%10 == 9)\n    if(N == 8):\n        return x%10 == 0 and (N%2 == 0 or N%10 == 0 or N%10 == 9 or N%10 == 0) and (N%10 == 9 or N%10 == 0 or N%10 == 9)\n    if(N == 9):\n        return x%10 == 0 and (N%2 == 0 or N%10 == 0 or N%10 == 9 or N%10 == 0) and (N%10 == 9 or N%10 == 0 or N%10 == 9)\n    else:\n        return False\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base Case\n    if N == 1:\n        return 1\n    # Base Case\n    elif N == 2:\n        return 2\n    #Recursive Case\n    else:\n        if (N == 2):\n            return 2\n        else:\n            return N**2 + next_Perfect_Square(N-2)\n    \ndef perfect_square(n):\n    '''\n    Write a python function that returns the number of perfect square numbers less than or equal to a given number.\n    '''\n    # Base Case\n    if n == 1:\n        return 1\n    # Recursive Case\n    elif n == 2:\n        return 2\n    else:\n        return perfect_square(n-2) + perfect_square(n-1)\n    \nprint(\"Recursive Practice: \\n\")\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # We can take the step size by taking the ceiling (n) for every number smaller than the input number\n    def next_Perfect_Square(n):\n        if n < n * math.ceil(math.sqrt(n)): \n            return n * math.ceil(math.sqrt(n))\n        return n * math.ceil(math.sqrt(n)) + 1\n    if N <= 0:\n        return 0\n    if N == 1:\n        return 1\n    return next_Perfect_Square(N - 1) + next_Perfect_Square(N - 2)\n    \ndef count_Fibonacci_numbers_below_n(N): \n    '''\n    Write a python function to count the number of Fibonacci numbers below a given value.\n    '''\n    # We can take the step size by taking the ceiling (n) for every number smaller than the input number\n    def Fibonacci_number_below_n(n):\n        if n < n * math.ceil(math.sqrt(n)):\n            return n * math.ceil(math.sqrt(n)) + 1\n        return (n + Fibonacci_number_below_n(n - 1)) * Fibonacci_number_below_n(n - 2)\n    if N <= 0:\n        return 0\n    if N == 1:\n        return 1\n    return Fibonacci_number_below_n(N - 1) + Fibonacci_number_below_n(N - 2)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # I/P: intN = largest number to be checked\n    # Output: intP\n    # Logic:\n    # - If the input is less than or equal to 1, return 0\n    # - If the input is greater than 1, return the smallest power of 2\n    # - Else, find the next perfect square\n    # Example:\n    # Input: N = 12\n    # Output: 32\n    # Explanation:\n    # 32 = sqrt(32)\n    # 32^2 = sqrt(32)\n    # 32^2 = 3\n    # 32^3 = 9\n    # 32^4 = 16\n    # 32^5 = 25\n    # 32^6 = 36\n    # 32^7 = 49\n    # 32^8 = 64\n    # 32^9 = 81\n    # 32^10 = 123\n    if N < 1:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        i = 3\n        while (i * i <= N):\n            if N % i == 0:\n                j = N // i\n                while (j * j <= N):\n                    if N % j == 0:\n                        k = N // j\n                        while (k * k <= N):\n                            if N % k == 0:\n                                l = N // k\n                                while (l * l <= N):\n                                    if N % l == 0:\n                                        m = N // l\n                                        return max(m, i * i, j * j, k * k, l * l, n * n)\n                                    else:\n                                        return m + 1\n                                    break\n                                break\n                            else:\n                                break\n                    else:\n                        break\n                    k = k + 1\n            j = j + 1\n            i = i + 1\n        return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = 2\n    while (x*x <= N):\n        if (N % x == 0):\n            N = N/x\n        else:\n            x = x + 2\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N <= 1):\n        return N\n    if(N % 2 == 0):\n        return next_Perfect_Square(N/2)\n    else:\n        m = int(N**0.5)\n        if m > N:\n            return next_Perfect_Square(N-1)\n        else:\n            return next_Perfect_Square(m+1)\nprint(next_Perfect_Square(5)"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return N\n    elif N == 1:\n        return N\n    elif N == 2:\n        return N\n    elif N == 3:\n        return N\n    elif N == 4:\n        return N\n    elif N == 5:\n        return N\n    elif N == 6:\n        return N\n    elif N == 7:\n        return N\n    elif N == 8:\n        return N\n    elif N == 9:\n        return N\n    elif N == 10:\n        return N\n    elif N == 11:\n        return N\n    elif N == 12:\n        return N\n    elif N == 13:\n        return N\n    elif N == 14:\n        return N\n    elif N == 15:\n        return N\n    elif N == 16:\n        return N\n    elif N == 17:\n        return N\n    elif N == 18:\n        return N\n    elif N == 19:\n        return N\n    elif N == 20:\n        return N\n    elif N == 21:\n        return N\n    elif N == 22:\n        return N\n    elif N == 23:\n        return N\n    elif N == 24:\n        return N\n    elif N == 25:\n        return N\n    elif N == 26:\n        return N\n    elif N == 27:\n        return N\n    elif N == 28:\n        return N\n    elif N == 29:\n        return N\n    elif N == 30:\n        return N\n    elif N == 31:\n        return N\n    elif N == 32:\n        return N\n    elif N == 33:\n        return N\n    elif N == 34:\n        return N\n    elif N == 35:\n        return N\n    elif N == 36:\n        return N\n    elif N == 37:\n        return N\n    elif N == 38:\n        return N\n    elif N == 39:\n        return N\n    elif N == 40:\n        return N\n    elif N == 41:\n        return N\n    elif N == 42:\n        return N\n    elif N == 43:\n        return N\n    elif N == 44:\n        return N\n    elif N == 45:\n        return N\n    elif N == 46:\n        return N\n    elif N == 47:\n        return N\n    elif N == 48:\n        return N\n    elif N == 49:\n        return N\n    elif N == 50:\n        return N\n    elif N == 51:\n        return N\n    elif N == 52:\n        return N\n    elif N == 53:\n        return N\n    elif N == 54:\n        return N\n    elif N == 55:\n        return N\n    elif N == 56:\n        return N\n    elif N == 57:\n        return N\n    elif N == 58:\n        return N\n    elif N == 59:\n        return N\n    elif N == 60:\n        return N\n    elif N == 61:\n        return N\n    elif N == 62:\n        return N\n    elif N == 63:\n        return N\n    elif N == 64:\n        return N\n    elif N == 65:\n        return N\n    elif N == 66:\n        return N\n    elif N == 67:\n        return N\n    elif N == 68:\n        return N\n    elif N == 69:\n        return N\n    elif N == 70:\n        return N\n    elif N == 71:\n        return N\n    elif N == 72:\n        return N\n    elif N == 73:\n        return N\n    elif N == 74:\n        return N\n    elif N == 75:\n        return N\n    elif N == 76:\n        return N\n    elif N == 77:\n        return N\n    elif N == 78:\n        return N\n    elif N == 79:\n        return N\n    elif N == 80:\n        return N\n    elif N == 81:\n        return N\n    elif N == 82:\n        return N\n    elif N == 83:\n        return N\n    elif N == 84:\n        return N\n    elif N == 85:\n        return N\n    elif N == 86:\n        return N\n    elif N == 87:\n        return N\n    elif N == 88:\n        return N\n    elif N == 89:\n        return N\n    elif N == 90:\n        return N\n    elif N == 91:\n        return N\n    elif N == 92:\n        return N\n    elif N == 93:\n        return N\n    elif N == 94:\n        return N\n    elif N == 95:\n        return N\n    elif N == 96:\n        return N\n    elif N == 97:\n        return N\n    elif N == 98:\n        return N\n    elif N == 99:\n        return N\n    elif N == 100:\n        return N\n    elif N == 101:\n        return N\n    elif N == 102:\n        return N\n    elif N == 103:\n        return N\n    elif N == 104:\n        return N\n    elif N == 105:\n        return N\n    elif N == 106:\n        return N\n    elif N == 107:\n        return N\n    elif N == 108:\n        return N\n    elif N == 109:\n        return N\n    elif N == 110:\n        return N\n    elif N == 111:\n        return N\n    elif N == 112:\n        return N\n    elif N == 113:\n        return N\n    elif N == 114:\n        return N\n    elif N == 115:\n        return N\n    elif N == 116:\n        return N\n    elif N == 117:\n        return N\n    elif N == 118:\n        return N\n    elif N == 119:\n        return N\n    elif N == 120:\n        return N\n    elif N == 121:\n        return N\n    elif N == 122:\n        return N\n    elif N == 123:\n        return N\n    elif N == 124:\n        return N\n    elif N == 125:\n        return N\n    elif N == 126:\n        return N\n    elif N == 127:\n        return N\n    elif N == 128:\n        return N\n    elif N == 129:\n        return N\n    elif N == 130:\n        return N\n    elif N == 131:\n        return N\n    elif N == 132:\n        return N\n    elif N == 133:\n        return N\n    elif N == 134:\n        return N\n    elif N == 135:\n        return N\n    elif N == 136:\n        return N\n    elif N == 137:\n        return N\n    elif N == 138:\n        return N\n    elif N == 139:\n        return N\n    elif N == 140:\n        return N\n    elif N == 141:\n        return N\n    elif N == 142:\n        return N\n    elif N == 143:\n        return N\n    elif N == 144:\n        return N\n    elif N == 145:\n        return N\n    elif N == 146:\n        return N\n    elif N == 147:\n        return N\n    elif N == 148:\n        return N\n    elif N == 149:\n        return N\n    elif N == 150:\n        return N\n    elif N == 151:\n        return N\n    elif N == 152:\n        return N\n    elif N == 153:\n        return N\n    elif N == 154:\n        return N\n    elif N == 155:\n        return N\n    elif N == 156:\n        return N\n    elif N == 157:\n        return N\n    elif N == 158:\n        return N\n    elif N == 159:\n        return N\n    elif N == 160:\n        return N\n    elif N == 161:\n        return N\n    elif N == 162:\n        return N\n    elif N == 163:\n        return N\n    elif N == 164:\n        return N\n    elif N == 165:\n        return N\n    elif N == 166:\n        return N\n    elif "
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Write your code here\n    return math.sqrt(N) \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N):\n        if (N%i == 0) and (N//i == i):\n            print(i)\n    return print(\"Perfect Square number found at : \",N)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = arr[0]\n    for i in range(1, len(arr)): \n        if arr[i] > sum:\n            sum = arr[i] \n    return sum \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    max_so_far = -1\n    for i in range(len(arr)):\n        sum += arr[i]\n        if sum > max_so_far:\n            max_so_far = sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    first_decrease = -1\n    first_increasing = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            if first_decrease == -1:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n            else:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n        elif arr[i] > arr[i - 1]:\n            if first_decrease == -1:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n            else:\n                first_decrease = arr[i]\n                first_increasing = arr[i - 1]\n    if first_decrease == -1 or first_increasing == -1:\n        return arr[0]\n    else:\n        return max(first_decrease, first_increasing)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 0\n    l = len(arr)\n    while i < l-1:\n        if arr[i] < arr[i+1]:\n            i+=1\n            continue\n        elif arr[i] > arr[i+1]:\n            arr[i+1] -= arr[i]\n            arr[i] = 0\n            continue\n        else:\n            i += 1\n            continue\n    return arr\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize max_sum to 0\n    max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # return max of every sub array\n    def is_bitonic(subarray):\n        for i in range(1,len(subarray)):\n            if subarray[i] < subarray[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # compute the max sum\n    max_sum = max(arr)\n    \n    # find the corresponding position for the max sum\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] < max_sum:\n            max_sum = arr[i]\n    \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum_value = arr[0]\n    for i in range(1, len(arr)):\n        # taking the first element of the array and adding it to the maximum sum\n        max_sum_value = max(max_sum_value, arr[i] + max(arr[i], arr[i+1]))\n    return max_sum_value\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n        if i!= len(arr) - 1:\n            curr_sum -= arr[i + 1]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # TODO: Write your code here\n    start = 0\n    end = len(arr)-1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    answer = 0\n    \n    #convert the input value into integer\n    number = int(number)\n    \n    #loop over until the input value is a perfect square\n    while True:\n        \n        #divide the input value by two\n        answer = answer + 1\n        \n        if number % 2 == 0:\n            \n            #determine the first term of the quadratic equation\n            quadratic = number * (number - 1)\n            \n            #compute the value of the solution\n            solution = (2 * quadratic) - (quadratic * (quadratic - 1)) / 2\n            \n            #compare the solution to the input value to see if the answer is close to the input value\n            if solution <= number:\n                return answer\n            \n        #remainder\n        number = (number - 1) // 2\n        \n    #error message\n    return \"That is not a perfect square.\"\n    "
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = []\n    if number == 0:\n        return 0\n    elif number < 0:\n        return 1/0\n    else:\n        return babylonian_squareroot(number - 1)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    elif number % 2 == 0:\n        return babylonian_squareroot(number // 2)\n    elif number % 2 == 1:\n        return babylonian_squareroot(number - 1)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = number\n    while square_root > 1:\n        if square_root % 2 == 0:\n            square_root = square_root / 2\n        else:\n            square_root = (square_root * 3) + 1\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0\n    for i in range(1,number):\n        root = root + (number/i)\n    return root\n    \n    \n    \ndef sqrt(number):\n    '''\n    Write a function for computing square roots using the Babylonian method.\n    '''\n    root = 0\n    for i in range(1,number):\n        root = root + (number/i)\n    return root\n    \n    \n    \ndef harmonic_mean(numbers):\n    '''\n    Write a function for computing the harmonic mean of a series of numbers.\n    '''\n    harmonic_mean = 0\n    for number in numbers:\n        harmonic_mean += 1 / number\n    return harmonic_mean\n    \n    \n    \ndef mean_abs_deviation(numbers):\n    '''\n    Write a function for computing the mean absolute deviation of a series of numbers.\n    '''\n    mean_abs_deviation = 0\n    for number in numbers:\n        mean_abs_deviation += abs(number)\n    return mean_abs_deviation\n    \n    \n    \ndef median(numbers):\n    '''\n    Write a function for computing the median of a series of numbers.\n    '''\n    median = 0\n    length = len(numbers)\n    if length % 2 == 0:\n        for i in range(0,int(length/2)):\n            median = median + numbers[i]\n        median = median / 2\n        median = (median + numbers[int(length/2)])\n    else:\n        median = numbers[int(length/2)]\n    return median\n    \n    \n    \ndef mode(numbers):\n    '''\n    Write a function for computing the mode of a series of numbers.\n    '''\n    mode = 0\n    length = len(numbers)\n    if length % 2 == 0:\n        mode = numbers[int(length/2)]\n    else:\n        mode = numbers[int(length/2) + 1]\n    return mode\n    \n    \n    \ndef sum_of_squares(numbers):\n    '''\n    Write a function for computing the sum of squares of a series of numbers.\n    '''\n    sum = 0\n    for number in numbers:\n        sum = sum + (number**2)\n    return sum\n    \n    \n    \ndef variance(numbers):\n    '''\n    Write a function for computing the variance of a series of numbers.\n    '''\n    variance = 0\n    for number in numbers:\n        variance = variance + (number**2)\n    return variance\n    \n    \n    \ndef standard_deviation(numbers):\n    '''\n    Write a function for computing the standard deviation of a series of numbers.\n    '''\n    standard_deviation = 0\n    for number in numbers:\n        standard_deviation = standard_deviation + (number**(1/2))\n    return standard_deviation\n    \n    \n    \ndef sum_of_squares_deviation(numbers):\n    '''\n    Write a function for computing the sum of squared deviations of a series of numbers.\n    '''\n    sum_of_squares_deviation = 0\n    for number in numbers:\n        sum_of_squares_deviation = sum_of_squares_deviation + (number**2)\n    return sum_of_squares_deviation\n    \n    \n    \ndef sum_of_squares_mean(numbers):\n    '''\n    Write a function for computing the mean squared deviations of a series of numbers.\n    '''\n    sum_of_squares_mean = 0\n    for number in numbers:\n        sum_of_squares_mean = sum_of_squares_mean + (number**2)\n    return sum_of_squares_mean\n    \n    \n    \ndef standard_deviation_mean(numbers):\n    '''\n    Write a function for computing the standard deviation of a series of numbers.\n    '''\n    standard_deviation_mean = 0\n    for number in numbers:\n        standard_deviation_mean = standard_deviation_mean + (number**(1/2))\n    return standard_deviation_mean\n    \n    \n    \ndef sample_mean(numbers):\n    '''\n    Write a function for computing the sample mean of a series of numbers.\n    '''\n    sample_mean = 0\n    for number in numbers:\n        sample_mean = sample_mean + (number**2)\n    return sample_mean\n    \n    \n    \ndef square_root_deviation(numbers):\n    '''\n    Write a function for computing the square root deviation of a series of numbers.\n    '''\n    square_root_deviation = 0\n    for number in numbers:\n        square_root_deviation = square_root_deviation + (number**(1/2))\n    return square_root_deviation\n    \n    \n    \ndef quartile_deviation(numbers):\n    '''\n    Write a function for computing the quartile deviation of a series of numbers.\n    '''\n    quartile_deviation = 0\n    for number in numbers:\n        quartile_deviation = quartile_deviation + (number**(1/4))\n    return quartile_deviation\n    \n    \n    \ndef run_tests():\n    '''\n    Write a function for testing the main functions.\n    '''\n    print(\"Test - Babyy-y - It's a 'Test'\")\n    print(\"Test - Standard Deviation - The Standard Deviation\")\n    print(\"Test - Sum of Squares - The Sum of Squares\")\n    print(\"Test - Mode - The Mode\")\n    print(\"Test - Sum of Squares Deviation - The Sum of Squares Deviation\")\n    print(\"Test - Standard Deviation Mean - The Standard Deviation Mean\")\n    print(\"Test - Sample Mean - The Sample Mean\")\n    print(\"Test - Sample Standard Deviation - The Sample Standard Deviation\")\n    print(\"Test - Square Root Deviation - The Square Root Deviation\")\n    print(\"Test - Quartile Deviation - The Quartile Deviation\")\n    print(\"Test - Sum Of Squares - The Sum Of Squares\")\n    print(\"Test - Mode - The Mode\")\n    print(\"Test - Sum of Squares Deviation - The Sum Of Squares Deviation\")\n    print(\"Test - Standard Deviation Mean - The Standard Deviation Mean\")\n    print(\"Test - Sample Mean - The Sample Mean\")\n    print(\"Test - Sample Standard Deviation - The Sample Standard Deviation\")\n    print(\"Test - Square Root Deviation - The Square Root Deviation\")\n    print(\"Test - Quartile Deviation - The Quartile Deviation\")\n    print(\"Test - Sum Of Squares - The Sum Of Squares\")\n    print(\"Test - Mode - The Mode\")\n    print(\"Test - Sum of Squares Deviation - The Sum of Squares Deviation\")\n    print(\"Test - Standard Deviation Mean - The Standard Deviation Mean\")\n    print(\"Test - Sample Mean - The Sample Mean\")\n    print(\"Test - Sample Standard Deviation - The Sample Standard Deviation\")\n    print(\"Test - Square Root Deviation - The Square Root Deviation\")\n    print(\"Test - Quartile Deviation - The Quartile Deviation\")\n    print(\"Test - Sum Of Squares - The Sum Of Squares\")\n    print(\"Test - Mode - The Mode\")\n    print(\"Test - Sum of Squares Deviation - The Sum Of Squares Deviation\")\n    print(\"Test - Standard Deviation Mean - The Standard Deviation Mean\")\n    print(\"Test - Sample Mean - The Sample Mean\")\n    print(\"Test - Sample Standard Deviation - The Sample Standard Deviation\")\n    print(\"Test - Square Root Deviation - The Square Root Deviation\")\n    print(\"Test - Quartile Deviation - The Quartile Deviation\")\n    print(\"Test - Sum Of Squares - The Sum Of Squares\")\n    print(\"Test - Mode - The Mode\")\n    print(\"Test - Sum of Squares Deviation - The Sum Of Squares Deviation\")\n    print(\"Test - Standard Deviation Mean - The Standard Deviation Mean\")\n    print(\"Test - Sample Mean - The Sample Mean\")\n    print(\"Test - Sample Standard Deviation - The Sample Standard Deviation\")\n    print(\"Test - Square Root Deviation - The Square Root Deviation\")\n    print(\"Test - Quartile Deviation - The Quartile Deviation\")\n    print(\"Test - Sum of Squares - The Sum Of Squares\")\n    print(\"Test - Mode - The Mode\")\n    print(\"Test - Sum of Squares Deviation - The Sum Of Squares Deviation\")\n    prin"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    factors = []\n    sqrt = number ** 0.5\n    \n    while sqrt!= 1:\n        if number % sqrt == 0:\n            factors.append(sqrt)\n            number /= sqrt\n        else:\n            sqrt = number ** 0.5\n    \n    return factors\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not number:\n        return None\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    root = None\n    n = number\n    m = int(math.sqrt(n))\n    if m % 2 == 0:\n        root = m / 2\n    else:\n        root = m - 1\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    while True:\n        user_input = input(f'What is the square root of {number}? ')\n        try:\n            user_input = float(user_input)\n            if user_input > 0:\n                print('The square root of %.2f is %.2f' %(number, (user_input ** 0.5)))\n                break\n            else:\n                print('That value was not a valid number. Please try again.')\n        except:\n            print('That is not a valid number. Please try again.')\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def bs(number):\n        if number == 0:\n            return 'error'\n        return number**0.5\n    def sqrt_square_root(number):\n        if number == 0:\n            return 'error'\n        return (number**0.5)**0.5\n    def bs_square_root(number):\n        if number == 0:\n            return 'error'\n        return ((number**0.5)**0.5)**0.5\n    result = list(map(bs, range(number)))\n    result = list(map(sqrt_square_root, result))\n    result = list(map(bs_square_root, result))\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return_string = []\n    \n    # initialize return_string to an empty list\n    for s in str:\n        if s == s[::-1]:\n            return_string.append(s)\n        \n    # start with the last element as it is the largest element, which will represent the length of the longest palindrome\n    i = len(str)-1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # For the given string of length 1 or 2, we have a palindrome\n    if len(str) <= 1:\n        return 1\n    # To store the longest palindromic subsequence\n    pal = {}\n    # For all possible palindromic subsequences\n    for i in range(1, len(str)):\n        # Initialize the lps\n        lps = 1\n        # For every possible subsequence\n        for j in range(i):\n            # Find the length of the lps\n            lps = max(lps, lps + 1 + strlen(str[j:i]))\n        # Add the lps to the dictionary\n        pal[lps] = str[i]\n    return max(pal.values())\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # The input is a string \n    # The function returns the length of the longest palindromic subsequence \n    # without using any extra space \n    def lps(str): \n        length = 0\n        for i in range(len(str)): \n            for j in range(i+1,len(str)+1): \n                if str[i:j] == str[i:j][::-1]: \n                    length += 1\n        return length\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # var_lps = []\n    # for i in range(len(str)):\n    #     var_lps.append([str[i]])\n    #     # print(str[i], \":\", str[i+1])\n    #     for j in range(i, len(str)):\n    #         if str[i] == str[j]:\n    #             var_lps[i].append(str[j])\n    #         else:\n    #             if len(var_lps[j]) > len(var_lps[i]):\n    #                 var_lps[j] = var_lps[i]\n    #                 # var_lps.append(var_lps[i]+var_lps[j])\n    # return max(var_lps, key=len)\n    # return str[0] if len(str) == 1 else str[0] + lps(str[1:])\n    # LPS(str)\n    import re\n    from collections import Counter\n    def lps(str): \n        m = len(str)\n        if m == 0:\n            return \"\"\n        if m == 1:\n            return str\n        if m == 2:\n            return str[0] + str[1]\n        patt = str[0] * m\n        for i in range(m - 1):\n            if m % 2 == 0:\n                patt += str[i] + str[i + 1]\n            else:\n                patt += str[i] + str[i + 1] + str[i + 2]\n        return patt\n    def LCS(s1, s2):\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n+1) for i in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if s1[i-1] == s2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n    def minCost(s1, s2):\n        m, n = len(s1), len(s2)\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 and n == 1:\n            return 1\n        if m == 1:\n            return min(minCost(s1[0], s2), minCost(s1[1], s2))\n        if n == 1:\n            return min(minCost(s1[0], s2), minCost(s1[1], s2))\n        return min(minCost(s1[0], s2), minCost(s1[0], s2[1:]) + LCS(s1, s2[1:]))\n    # m = len(str)\n    # if m == 0 or m == 1:\n    #     return 0\n    # if m == 2:\n    #     return 1\n    # dp[i][j] = max(dp[i-1][j-1], dp[i][j-1]) + dp[i][j]\n    # print(dp[m][n])\n    # return dp[m][n]\n    # return lps(str)\n    # return minCost(s1, s2)\n    # return LCS(s1, s2)\n    m = len(str)\n    n = len(str)\n    dp = [[0] * (n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n    '''\n    def minCost(s1, s2):\n        m, n = len(s1), len(s2)\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 and n == 1:\n            return 1\n        if m == 1:\n            return min(minCost(s1[0], s2), minCost(s1[1], s2))\n        if n == 1:\n            return min(minCost(s1[0], s2), minCost(s1[1], s2))\n        return min(minCost(s1[0], s2), minCost(s1[0], s2[1:]) + LCS(s1, s2[1:]))\n    def LCS(s1, s2):\n        m, n = len(s1), len(s2)\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 and n == 1:\n            return 1\n        if m == 1:\n            return min(minCost(s1[0], s2), minCost(s1[1], s2))\n        if n == 1:\n            return min(minCost(s1[0], s2), minCost(s1[0], s2[1:]))\n        return min(minCost(s1[0], s2), minCost(s1[0], s2[1:]) + LCS(s1, s2[1:]))\n    m = len(str)\n    n = len(str)\n    dp = [[0] * (n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n    '''\n    def LPS(s):\n        m = len(s)\n        if m == 0:\n            return 0\n        if m == 1:\n            return 1\n        if m == 2:\n            return 1\n        dp = [[0] * (m+1) for i in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, m+1):\n                if s[i-1] == s[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][m]\n    # m = len(str)\n    # if m == 0 or m == 1:\n    #     return 0\n    # if m == 2:\n    #     return 1\n    # dp = [[0] * (m+1) for i in range(m+1)]\n    # for i in range(1, m+1):\n    #     for j in range(1, m+1):\n    #         if str[i-1] == str[j-1]:\n    #             dp[i][j] = dp[i-1][j-1] + 1\n    #         else:\n    #             dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # return dp[m][m]\n    # print(len(str))\n    # return minCost(str[0], str[1:])\n    # return LCS(str[0], str[1:])\n    # return minCost(str[0], str[1:])\n    # return LCS(str[0], str[1:])\n    m = len(str)\n    n = len(str)\n    dp = [[0] * (n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                dp["
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<2:\n        return len(str)\n    else:\n        lps=[]\n        for i in range(0,len(str)):\n            print(i)\n            if str[i]!=str[i+1]:\n                lps.append(str[i])\n                lps.append(str[i+1])\n            else:\n                lps.append(str[i])\n        print(lps)\n        lps.sort()\n        return len(lps)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def longestPalindrom(str): \n        maxLen = 0\n        for i in range(len(str)): \n            for j in range(0, len(str) - i): \n                if str[j:j + i] == str[j:j + i][::-1]: \n                    if i == len(str)-1: \n                        maxLen = max(maxLen, len(str[j:j+i])) \n                    else: \n                        maxLen = max(maxLen, len(str[j:j+i])) \n        return maxLen\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Initialize the variables\n    n = len(str)\n    pal = [0]*n\n    #Initialize the LPS array\n    LPS = [0]*(n+1)\n    #Initialize the maximum length\n    M = 0\n    #For each character in string\n    for i in range(n):\n        #If current character is equal to the previous character\n        if pal[i] == 1:\n            #If the character is greater than previous\n            if pal[i] > pal[i-1]:\n                #Add the previous character to the LPS array\n                LPS[i] = LPS[i-1]\n                #Add the previous character to the maximum length\n                M = max(M, LPS[i]-1)\n            #If the character is equal to the previous character\n            else:\n                #Update the maximum length\n                M = max(M, LPS[i])\n        #If the current character is different from the previous character\n        else:\n            #Update the LPS array\n            LPS[i] = i-pal[i] + 1\n    #Print the final LPS array\n    return M\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1: \n        return 1\n    if str[0] == str[-1]: \n        return 1\n    max_sub = 1\n    res = 1\n    for i in range(1, len(str)): \n        if str[i] == str[i-1]: \n            continue\n        if len(str[i:]) > max_sub: \n            max_sub = len(str[i:])\n            res = i\n    return res + 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Build the subsequence.\n    palindromes = [[] for _ in range(len(str) + 1)]\n    for i in range(len(str) - 1, -1, -1):\n        palindromes[i].append(str[i])\n        if i + 1 == len(str):\n            palindromes[i] = [i]\n        else:\n            # If a subpalindrome is present.\n            palindromes[i].append(str[i:i+2])\n    # Find all the palindromes.\n    for i in range(len(palindromes)):\n        for j in range(i + 1):\n            # The subsequence is the longest palindrome.\n            if len(palindromes[i][j]) > len(palindromes[i][j+1]):\n                palindromes[i] = palindromes[i][:j] + palindromes[i][j+2:]\n    # Return the length of the palindromes.\n    return len(palindromes[0])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return 0\n    \n    # create a dict that holds a map from each char to its next\n    map_char = {str[i]: i for i in range(len(str))}\n    # initialization of memoization\n    dp = dict()\n    # loop through all chars in string\n    for i in range(len(str)):\n        # if current char is not a palindrome\n        if i < len(str) - 1 and str[i]!= str[i + 1]:\n            # add current char to the map\n            if str[i] not in dp:\n                dp[str[i]] = i\n            # add the next char of the current char\n            if str[i + 1] not in dp:\n                dp[str[i + 1]] = i + 1\n            # update the memoization map\n            map_char[str[i]] = dp[str[i + 1]]\n    # define the longest palindrome\n    longest_pal = 0\n    # loop through all chars in string\n    for i in range(len(str) - 1):\n        # if the current char is a palindrome\n        if str[i]!= str[i + 1]:\n            # recur on the char until the first occurence\n            # of the char is a palindrome\n            if i > 0 and str[i] == str[i - 1]:\n                # update longest palindrome\n                # by removing the char from the map\n                # at the map point\n                longest_pal = max(longest_pal, i - map_char[str[i]])\n            # if the char is a palindrome\n            # then add the char to the memoization map\n            # at the memoization point\n            elif i > 0:\n                # recur on the next char\n                # until the last occurence of the char\n                # is a palindrome\n                if i < map_char[str[i + 1]] - 1:\n                    # update longest palindrome\n                    # by removing the char from the map\n                    # at the map point\n                    longest_pal = max(longest_pal, i - map_char[str[i + 1]])\n            # if the char is not a palindrome\n            # then add the char to the memoization map\n            # at the memoization point\n            else:\n                # recur on the next char\n                # until the last occurence of the char\n                # is not a palindrome\n                if i < map_char[str[i + 1]] - 1:\n                    longest_pal = max(longest_pal, i - map_char[str[i + 1]])\n    return longest_pal\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==1:\n        return 1\n    return 1/2 * harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1/n) + (harmonic_sum(n - 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = n*(n+1)/2\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i/i)\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return 1.0/(1.0+math.log(n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert n >= 0, 'Invalid input'\n    return int(n*(1/n))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # TODO: Write your code here\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    return (n-1) * (n-1) + (n-2) * (n-2) + (n-3) * (n-3) + (n-4) * (n-4) + (n-5) * (n-5) + (n-6) * (n-6) + (n-7) * (n-7) + (n-8) * (n-8) + (n-9) * (n-9) + (n-10) * (n-10) + (n-11) * (n-11) + (n-12) * (n-12) + (n-13) * (n-13) + (n-14) * (n-14) + (n-15) * (n-15) + (n-16) * (n-16) + (n-17) * (n-17) + (n-18) * (n-18) + (n-19) * (n-19) + (n-20) * (n-20) + (n-21) * (n-21) + (n-22) * (n-22) + (n-23) * (n-23) + (n-24) * (n-24) + (n-25) * (n-25) + (n-26) * (n-26) + (n-27) * (n-27) + (n-28) * (n-28) + (n-29) * (n-29) + (n-30) * (n-30) + (n-31) * (n-31) + (n-32) * (n-32) + (n-33) * (n-33) + (n-34) * (n-34) + (n-35) * (n-35)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    newarray=[]\n    newarray.extend(array_nums1)\n    newarray.extend(array_nums2)\n    newarray.sort()\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection=[]\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #First, find the length of array_nums1, and the length of array_nums2.\n    size_x=len(array_nums1)\n    size_y=len(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # If any two elements are the same, return that element\n    if len(array_nums1) == len(array_nums2):\n        intersection_element = array_nums1[0]\n    elif len(array_nums1) > len(array_nums2):\n        # find the first element that is equal to first element in list\n        for i in range(len(array_nums1)):\n            if array_nums1[i] == array_nums2[0]:\n                intersection_element = array_nums1[i]\n                break\n    elif len(array_nums2) > len(array_nums1):\n        # find the second element that is equal to first element in list\n        for i in range(len(array_nums2)):\n            if array_nums2[i] == array_nums1[0]:\n                intersection_element = array_nums2[i]\n                break\n    \n    return intersection_element\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_array_nums1=[]\n    new_array_nums2=[]\n    new_array_nums1.extend(array_nums1)\n    new_array_nums1.extend(array_nums2)\n    for i in range(len(new_array_nums1)):\n        if new_array_nums1[i] in new_array_nums2:\n            new_array_nums2.remove(new_array_nums1[i])\n    return new_array_nums2\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = set(array_nums1) & set(array_nums2)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a1=set(array_nums1)\n    a2=set(array_nums2)\n    return len(a1.intersection(a2))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # I will create a dict which will keep the number of times it appears.\n    # I will add the number to it.\n    # If I find a number which appears more than two times,\n    # then I will return it.\n    intersection_dict = {}\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_dict[num] = array_nums2.count(num)\n    # I will return the intersection of the two dicts.\n    # If I have not encountered a number, I will return None.\n    # In the event I encounter a number in one of the intersection,\n    # I will return that number.\n    if not intersection_dict:\n        return None\n    # I will sort the intersection dict.\n    sorted_intersection_dict = sorted(intersection_dict.items(), key = lambda item: item[1])\n    # I will return the intersection of the dicts.\n    return sorted_intersection_dict[0][0]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    list_of_ints = []\n    while i < len(array_nums1):\n        if array_nums1[i] in array_nums2:\n            list_of_ints.append(array_nums1[i])\n        else:\n            j += 1\n            while j < len(array_nums2):\n                if array_nums2[j] in array_nums1:\n                    list_of_ints.append(array_nums2[j])\n                    j += 1\n                else:\n                    break\n    return list_of_ints\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            occ += 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Check to see if the element in the tuple is the same as the value of the x variable\n    if x in tup:\n        # Increment the value of the counter\n        tup.count(x)\n        # Print the number of occurrences\n        return tup.count(x)\n    # Return 0 if the element is not in the tuple\n    else: \n        return 0\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # you can use a for loop to do this for a given tuple.\n    # this will do the same thing as the previous section.\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = str(x)\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = (tup)\n    x = (x)\n    tup = list(tup)\n    x = list(x)\n    n = len(tup)\n    count = 0\n    for i in range(n):\n        if tup[i] == x:\n            count += 1\n    return (count)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_of_elements = list\n    \n    #breakpoint()\n    #print(\"LIST:\",list)\n    \n    for i in range(len(list_of_elements)):\n        if element == list_of_elements[i]:\n            list_of_elements.insert(i,element)\n            break\n        \n    #print(\"LIST AFTER INSERT:\",list_of_elements)\n    \n    return list_of_elements\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Step 1: Get the length of the list.\n    length = len(list)\n    # Step 2: Loop through the list, and insert the element at the proper position.\n    for i in range(0,length):\n        if element < list[i]:\n            list[i] = element\n            break\n    # Step 3: Return the updated list.\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i,element)\n        \n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    # Write your code here.\n    pas"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in list:\n        if list.index(i) < list.index(element):\n            list[list.index(i)] = element\n        else:\n            pass\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if element < list[i]:\n            new_list.append(element)\n            element = list[i]\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    returned_list = []\n    for element in list:\n        returned_list.append(element)\n        for index, value in enumerate(list):\n            if index == element:\n                continue\n            returned_list.append(element)\n    return returned_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list)==0:\n        return list\n    else:\n        i = 0\n        list.insert(i, element)\n        while i<len(list):\n            if list[i]==element:\n                list.insert(i,element)\n                break\n            i+=1\n        return list"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #get the real part of the numbers\n    r = numbers.real\n    #get the imaginary part of the numbers\n    i = numbers.imag\n    #get the square root of the real part of the numbers\n    r_sqrt = cmath.sqrt(r)\n    #get the square root of the imaginary part of the numbers\n    i_sqrt = cmath.sqrt(i)\n    #return the complex numbers in polar coordinates\n    return r,i,r_sqrt,i_sqrt\ndef pi2():\n    '''\n    Write a python function to convert the given pi number to a list of coordinates.\n    '''\n    #convert the pi number into a list\n    pi = cmath.pi*1.0\n    #convert the pi number in radians to list\n    rad = pi.real\n    #convert the pi number in radians to list\n    i = pi.imag\n    #return the list\n    return rad,i\ndef calculate_error(real,i,r_sqrt,i_sqrt):\n    '''\n    Write a python function to calculate the error between real and imaginary numbers.\n    '''\n    #convert the real number to float\n    real = float(real)\n    #convert the imaginary number to float\n    i = float(i)\n    #get the real and imaginary squares of the real and imaginary numbers\n    real_sqrt = real**2\n    i_sqrt = i**2\n    #get the square root of the real and imaginary squares\n    r_sqrt = cmath.sqrt(real_sqrt)\n    i_sqrt = cmath.sqrt(i_sqrt)\n    #get the absolute error\n    error = abs(r_sqrt - real_sqrt) + abs(i_sqrt - real)\n    return error\ndef sigmoidal(r,i,r_sqrt,i_sqrt):\n    '''\n    Write a python function to calculate the sigmoidal equation.\n    '''\n    #convert the real and imaginary numbers to polar coordinates\n    r,i,r_sqrt,i_sqrt = convert(r),convert(i),convert(r_sqrt),convert(i_sqrt)\n    #get the real and imaginary squares of the real and imaginary numbers\n    real_sqrt = r_sqrt**2 + i_sqrt**2\n    #get the square root of the real and imaginary squares\n    r_sqrt = cmath.sqrt(real_sqrt)\n    i_sqrt = cmath.sqrt(i_sqrt)\n    #get the sigmoidal equation\n    sigmoidal = r**2 - 2*r*i*cmath.cos(2*pi*r_sqrt) + 2*i*r*cmath.sin(2*pi*r_sqrt)\n    #return the sigmoidal equation\n    return sigmoidal\ndef sigmoid(r,i,r_sqrt,i_sqrt):\n    '''\n    Write a python function to calculate the sigmoidal equation.\n    '''\n    #convert the real and imaginary numbers to polar coordinates\n    r,i,r_sqrt,i_sqrt = convert(r),convert(i),convert(r_sqrt),convert(i_sqrt)\n    #get the real and imaginary squares of the real and imaginary numbers\n    real_sqrt = r_sqrt**2 + i_sqrt**2\n    #get the square root of the real and imaginary squares\n    r_sqrt = cmath.sqrt(real_sqrt)\n    i_sqrt = cmath.sqrt(i_sqrt)\n    #get the sigmoidal equation\n    sigmoidal = cmath.exp(-r**2) * r**2 * (1 - 2*r*cmath.cos(2*pi*r_sqrt) - 2*i*cmath.cos(2*pi*r_sqrt) + 2*i*cmath.sin(2*pi*r_sqrt)) + (1 - cmath.exp(-r**2)) * r**2 * (2*i*cmath.cos(2*pi*i_sqrt) + 2*i*cmath.sin(2*pi*i_sqrt))\n    #return the sigmoidal equation\n    return sigmoidal\ndef sigmoid_derivative(sigmoidal):\n    '''\n    Write a python function to calculate the sigmoidal equation derivative.\n    '''\n    #convert the sigmoidal equation to the real and imaginary numbers\n    sigmoidal = float(sigmoidal)\n    #get the real and imaginary squares of the sigmoidal equation\n    real_sqrt = cmath.sqrt(sigmoidal)\n    #get the real and imaginary squares of the sigmoidal equation\n    i_sqrt = cmath.sqrt(i)\n    #get the real and imaginary squares of the sigmoidal equation\n    i_sqrt = cmath.sqrt(i_sqrt)\n    #get the sigmoidal equation derivative\n    sigmoidal_derivative = (1 + cmath.exp(-real_sqrt)) * (2*sigmoidal)\n    #return the sigmoidal derivative\n    return sigmoidal_derivative\ndef sigmoid_derivative_derivative(sigmoidal_derivative):\n    '''\n    Write a python function to calculate the sigmoidal equation derivative derivative.\n    '''\n    #convert the sigmoidal equation derivative to the real and imaginary numbers\n    sigmoidal_derivative = float(sigmoidal_derivative)\n    #get the real and imaginary squares of the sigmoidal equation derivative\n    real_sqrt = cmath.sqrt(sigmoidal_derivative)\n    #get the real and imaginary squares of the sigmoidal equation derivative\n    i_sqrt = cmath.sqrt(i)\n    #get the real and imaginary squares of the sigmoidal equation derivative\n    i_sqrt = cmath.sqrt(i_sqrt)\n    #get the sigmoidal equation derivative derivative\n    sigmoidal_derivative_derivative = (1 + cmath.exp(-real_sqrt)) * (2*sigmoidal_derivative)\n    #return the sigmoidal derivative derivative\n    return sigmoidal_derivative_derivative\ndef inverse(f,a,b):\n    '''\n    Write a python function to calculate the inverse of a function with respect to b.\n    '''\n    #get the real and imaginary numbers\n    r,i = convert(a),convert(b)\n    #convert the real and imaginary numbers to polar coordinates\n    r,i = convert(r),convert(i)\n    #get the sigmoidal equation\n    sigmoidal = sigmoidal_func(r,i)\n    #get the sigmoidal equation derivative\n    sigmoidal_derivative = sigmoid_derivative(sigmoidal)\n    #return the sigmoidal equation derivative\n    return sigmoidal_derivative*sigmoidal\ndef inverse_derivative(sigmoidal_derivative):\n    '''\n    Write a python function to calculate the inverse of a function with respect to b.\n    '''\n    #convert the sigmoidal equation derivative to the real and imaginary numbers\n    sigmoidal_derivative = float(sigmoidal_derivative)\n    #get the real and imaginary numbers of the sigmoidal equation derivative\n    r,i = convert(i),convert(r)\n    #convert the real and imaginary numbers to polar coordinates\n    r,i = convert(r),convert(i)\n    #get the sigmoidal equation derivative\n    sigmoidal_derivative_derivative = sigmoidal_derivative * sigmoidal_derivative_derivative\n    #return the sigmoidal equation derivative\n    return sigmoidal_derivative_derivative*sigmoidal\ndef sigmoidal_func(r,i):\n    '''\n    Write a python function to calculate the sigmoidal function with respect to r and i.\n    '''\n    #convert the real and imaginary numbers to polar coordinates\n    r,i = convert(r),convert(i)\n    #get the sigmoidal equation\n    sigmoidal = sigmoidal_derivative(r,i)\n    #return the sigmoidal equation\n    return sigmoidal\ndef sigmoid_derivative(r,i):\n    '''\n    Write a python function to calculate the "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Input for the number:\n    if len(numbers)!= 3:\n        return \"Error: the length of the argument does not match the number of arguments\"\n    else:\n        if numbers[0].is_integer():\n            return str(numbers[0]) + \"i\", str(numbers[1]) + \"j\"\n        elif numbers[0].is_rational():\n            if numbers[1].is_integer():\n                return str(numbers[0]) + \"e\" + str(numbers[1]) + \"i\"\n            else:\n                return str(numbers[0]) + \"e\" + str(numbers[1]) + \"j\"\n        else:\n            return \"Error: wrong argument passed for conversion\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Input\n    a: The complex number that you want to convert.\n    \n    Output\n    The polar coordinates of the complex number.\n    '''\n    c=complex(numbers)    \n    deg = c.real**2 + c.imag**2\n    rad=math.sqrt(deg)\n    polar=c.real*c.real + c.imag*c.imag\n    return polar,rad\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = complex(numbers[i][0], numbers[i][1])\n    return numbers\n    \ndef radians(numbers):\n    '''\n    Write a python function to convert a complex numbers to angle of a unit vector.\n    '''\n    angle = 0\n    for i in range(len(numbers)):\n        angle += abs(numbers[i]) * cmath.pi\n    return angle\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\ndef unescape(string):\n    '''\n    Given a string, unescape the string.\n    '''\n    string = string.replace(\"\\\\\\\\\",\"\\\\\")\n    string = string.replace(\"\\\\'\",\"\\\\'\")\n    string = string.replace(\"\\\\\\\"\",\"\\\\\\\"\")\n    string = string.replace(\"\\\\n\",\"\\n\")\n    string = string.replace(\"\\\\r\",\"\\r\")\n    string = string.replace(\"\\\\t\",\"\\t\")\n    return string\ndef listToString(s):\n    '''\n    Given a list of strings, return a single string representing them as a list.\n    '''\n    return''.join(s)\ndef listToMatrix(L):\n    '''\n    Given a list of lists, return a list of lists.\n    '''\n    return [list(x) for x in zip(*L)]\ndef matrixToList(m):\n    '''\n    Given a matrix, return a list of lists.\n    '''\n    return [list(x) for x in zip(*m)]\ndef matrixToMatrix(m):\n    '''\n    Given a matrix, return a list of lists.\n    '''\n    return [list(x) for x in zip(*m)]\ndef makeMatrix(i,j,lines):\n    '''\n    Given an (i,j) coordinate of the center of the matrix, return a list of lists.\n    '''\n    x = 0\n    y = 0\n    L = []\n    for line in lines:\n        for char in line:\n            x += char.real\n            y += char.imag\n            L.append([x,y])\n            x = 0\n        y = 0\n    return L\ndef convertMatrix(m):\n    '''\n    Given a matrix, return a list of lists.\n    '''\n    return [makeMatrix(i,j,m) for i in range(len(m)) for j in range(len(m[i]))]\ndef convertMatrixLine(m):\n    '''\n    Given a matrix, return a list of lists.\n    '''\n    L = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j].real!= 0 or m[i][j].imag!= 0:\n                L.append([m[i][j].real,m[i][j].imag])\n    return L\ndef printMatrix(m):\n    '''\n    Given a matrix, print it.\n    '''\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            print(m[i][j],end='\\t')\n        print()\ndef distance(p1, p2):\n    '''\n    Given two points, return the distance between them.\n    '''\n    return cmath.sqrt(p1[0]**2 + p1[1]**2 - p2[0]**2 - p2[1]**2)\ndef scalarMultiply(m,n):\n    '''\n    Given two matrices, return the matrix multiplication of them.\n    '''\n    return [[(a*b) for a,b in zip(*m)] for b in n]\ndef vectorAdd(v1, v2):\n    '''\n    Given two vectors, return their sum.\n    '''\n    return [a+b for a,b in zip(v1,v2)]\ndef vectorMultiply(v1,v2):\n    '''\n    Given two vectors, return their product.\n    '''\n    return [a*b for a,b in zip(v1,v2)]\ndef vectorNorm(v):\n    '''\n    Given a vector, return its norm.\n    '''\n    return math.sqrt(sum([x**2 for x in v]))\ndef vectorDotProduct(v1,v2):\n    '''\n    Given two vectors, return their dot product.\n    '''\n    return sum([x*y for x,y in zip(v1,v2)])\ndef vectorCrossProduct(v1,v2):\n    '''\n    Given two vectors, return their cross product.\n    '''\n    return [x*y for x,y in zip(v1,v2)]\ndef vectorNormal(v):\n    '''\n    Given a vector, return its norm.\n    '''\n    return math.sqrt(sum([x**2 for x in v]))\ndef vectorCrossNormal(v1,v2):\n    '''\n    Given two vectors, return their cross product.\n    '''\n    return [x*y for x,y in zip(v1,v2)]\ndef vectorCrossProduct(v1,v2):\n    '''\n    Given two vectors, return their cross product.\n    '''\n    return [x*y for x,y in zip(v1,v2)]\ndef vectorDotProduct(v1,v2):\n    '''\n    Given two vectors, return their dot product.\n    '''\n    return sum([x*y for x,y in zip(v1,v2)])\ndef vectorCosine(v1, v2):\n    '''\n    Given two vectors, return their cosine angle.\n    '''\n    return (sum([x*y for x,y in zip(v1,v2)]))/math.sqrt(sum([x**2 for x in v1]))\ndef vectorCrossCosine(v1,v2):\n    '''\n    Given two vectors, return their cross cosine angle.\n    '''\n    return [x*y for x,y in zip(v1,v2)]\ndef vectorCosineToVectorCross(v1,v2):\n    '''\n    Given two vectors, return their cosine angle.\n    '''\n    return [x/math.sqrt(sum([x**2 for x in v1])) for x in v2]\ndef vectorCrossCosineToVectorCosine(v1,v2):\n    '''\n    Given two vectors, return their cross cosine angle.\n    '''\n    return [x/math.sqrt(sum([x**2 for x in v1])) for x in v2]\ndef angleBetweenVectorAndAngleVector(v1,v2):\n    '''\n    Given two vectors, return their angle.\n    '''\n    return math.acos(vectorCrossCosineToVectorCosine(v1,v2)/vectorCosine(v1,v2))\ndef angleBetweenVectorAndAngleVector2D(v1,v2):\n    '''\n    Given two vectors, return their angle.\n    '''\n    return math.acos(vectorCrossVector2DToVectorAngle(v1,v2)/vectorVector2D(v1))\ndef angleBetweenVectorAndAngleVector2D2D(v1,v2):\n    '''\n    Given two vectors, return their angle.\n    '''\n    return math.acos(vectorCrossVector2DToVectorAngle(v1,v2) / vectorVector2D2D(v1))\ndef angleBetweenVectorAndAngleVector2D2D(v1,v2):\n    '''\n    Given two vectors, return their angle.\n    '''\n    return math.acos(vectorCrossVector2DToVectorAngle(v1,v2) / vectorVector2D2D(v1))\ndef distanceBetweenVectorAndAngleVector(v1,v2):\n    '''\n    Given two vectors, return their distance.\n    '''\n    return math.sqrt(vectorCrossVector2DToVectorDistance(v1,v2)/vectorVector2D(v1))\ndef distanceBetweenVectorAndAngleVector2D(v1,v2):\n    '''\n    Given two vectors, return their distance.\n    '''\n    return math.sqrt(vectorCrossVector2DToVectorDistance(v1,v2)/vectorVector2D2D(v1))\ndef vectorDistanceBetweenVectors(v1,v2):\n    '''\n    Given two vectors, return their distance.\n    '''\n    return math.sqrt(vectorCrossVector2DToVectorDistance(v1,v2))\ndef vectorVectorDistanceBetweenVectors(v1,v2):\n    '''\n    Given two vectors, return their distance.\n    '''\n    return math.sqrt(vectorCrossVector2DToVectorDistance(v1,v2))\ndef vectorVectorDistanc"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    i = 0\n    while (i < len(numbers)):\n        result.append(cmath.polar(numbers[i]))\n        i += 1\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #declaring variables \n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers == 1:\n        result = cmath.rect(0, 0, 1)\n    elif numbers == 2:\n        result = cmath.rect(0, 0, 2)\n    elif numbers == 3:\n        result = cmath.rect(0, 0, 3)\n    elif numbers == 4:\n        result = cmath.rect(0, 0, 4)\n    elif numbers == 5:\n        result = cmath.rect(0, 0, 5)\n    elif numbers == 6:\n        result = cmath.rect(0, 0, 6)\n    elif numbers == 7:\n        result = cmath.rect(0, 0, 7)\n    elif numbers == 8:\n        result = cmath.rect(0, 0, 8)\n    elif numbers == 9:\n        result = cmath.rect(0, 0, 9)\n    elif numbers == 10:\n        result = cmath.rect(0, 0, 10)\n    elif numbers == 11:\n        result = cmath.rect(0, 0, 11)\n    elif numbers == 12:\n        result = cmath.rect(0, 0, 12)\n    elif numbers == 13:\n        result = cmath.rect(0, 0, 13)\n    elif numbers == 14:\n        result = cmath.rect(0, 0, 14)\n    elif numbers == 15:\n        result = cmath.rect(0, 0, 15)\n    elif numbers == 16:\n        result = cmath.rect(0, 0, 16)\n    elif numbers == 17:\n        result = cmath.rect(0, 0, 17)\n    elif numbers == 18:\n        result = cmath.rect(0, 0, 18)\n    elif numbers == 19:\n        result = cmath.rect(0, 0, 19)\n    elif numbers == 20:\n        result = cmath.rect(0, 0, 20)\n    elif numbers == 21:\n        result = cmath.rect(0, 0, 21)\n    elif numbers == 22:\n        result = cmath.rect(0, 0, 22)\n    elif numbers == 23:\n        result = cmath.rect(0, 0, 23)\n    elif numbers == 24:\n        result = cmath.rect(0, 0, 24)\n    elif numbers == 25:\n        result = cmath.rect(0, 0, 25)\n    elif numbers == 26:\n        result = cmath.rect(0, 0, 26)\n    elif numbers == 27:\n        result = cmath.rect(0, 0, 27)\n    elif numbers == 28:\n        result = cmath.rect(0, 0, 28)\n    elif numbers == 29:\n        result = cmath.rect(0, 0, 29)\n    elif numbers == 30:\n        result = cmath.rect(0, 0, 30)\n    elif numbers == 31:\n        result = cmath.rect(0, 0, 31)\n    elif numbers == 32:\n        result = cmath.rect(0, 0, 32)\n    elif numbers == 33:\n        result = cmath.rect(0, 0, 33)\n    elif numbers == 34:\n        result = cmath.rect(0, 0, 34)\n    elif numbers == 35:\n        result = cmath.rect(0, 0, 35)\n    elif numbers == 36:\n        result = cmath.rect(0, 0, 36)\n    elif numbers == 37:\n        result = cmath.rect(0, 0, 37)\n    elif numbers == 38:\n        result = cmath.rect(0, 0, 38)\n    elif numbers == 39:\n        result = cmath.rect(0, 0, 39)\n    elif numbers == 40:\n        result = cmath.rect(0, 0, 40)\n    elif numbers == 41:\n        result = cmath.rect(0, 0, 41)\n    elif numbers == 42:\n        result = cmath.rect(0, 0, 42)\n    elif numbers == 43:\n        result = cmath.rect(0, 0, 43)\n    elif numbers == 44:\n        result = cmath.rect(0, 0, 44)\n    elif numbers == 45:\n        result = cmath.rect(0, 0, 45)\n    elif numbers == 46:\n        result = cmath.rect(0, 0, 46)\n    elif numbers == 47:\n        result = cmath.rect(0, 0, 47)\n    elif numbers == 48:\n        result = cmath.rect(0, 0, 48)\n    elif numbers == 49:\n        result = cmath.rect(0, 0, 49)\n    elif numbers == 50:\n        result = cmath.rect(0, 0, 50)\n    elif numbers == 51:\n        result = cmath.rect(0, 0, 51)\n    elif numbers == 52:\n        result = cmath.rect(0, 0, 52)\n    elif numbers == 53:\n        result = cmath.rect(0, 0, 53)\n    elif numbers == 54:\n        result = cmath.rect(0, 0, 54)\n    elif numbers == 55:\n        result = cmath.rect(0, 0, 55)\n    elif numbers == 56:\n        result = cmath.rect(0, 0, 56)\n    elif numbers == 57:\n        result = cmath.rect(0, 0, 57)\n    elif numbers == 58:\n        result = cmath.rect(0, 0, 58)\n    elif numbers == 59:\n        result = cmath.rect(0, 0, 59)\n    elif numbers == 60:\n        result = cmath.rect(0, 0, 60)\n    elif numbers == 61:\n        result = cmath.rect(0, 0, 61)\n    elif numbers == 62:\n        result = cmath.rect(0, 0, 62)\n    elif numbers == 63:\n        result = cmath.rect(0, 0, 63)\n    elif numbers == 64:\n        result = cmath.rect(0, 0, 64)\n    elif numbers == 65:\n        result = cmath.rect(0, 0, 65)\n    elif numbers == 66:\n        result = cmath.rect(0, 0, 66)\n    elif numbers == 67:\n        result = cmath.rect(0, 0, 67)\n    elif numbers == 68:\n        result = cmath.rect(0, 0, 68)\n    elif numbers == 69:\n        result = cmath.rect(0, 0, 69)\n    elif numbers == 70:\n        result = cmath.rect(0, 0, 70)\n    elif numbers == 71:\n        result = cmath.rect(0, 0, 71)\n    elif numbers == 72:\n        result = cmath.rect(0, 0, 72)\n    elif numbers == 73:\n        result = cmath.rect(0, 0, 73)\n    elif numbers == 74:\n        result = cmath.rect(0, 0, 74)\n    elif numbers == 75:\n        result = cmath.rect(0, 0, 75)\n    elif numbers == 76:\n        result = cmath.rect(0, 0, 76)\n    elif numbers == 77:\n        result = cmath.rect(0, 0, 77)\n    elif numbers == 78:\n        result = cmath.rect(0, 0, 78)\n    elif numbers == 79:\n        result = cmath.rect(0, 0, 79)\n    elif numbers == 80:\n        result = cmath.rect(0, 0, 80)\n    elif numbers == 81:\n        result = cmath.rect(0, 0, 81)\n    elif numbers == 82:\n        result = cmath.rect(0, 0, 82)\n    elif numbers == 83:\n        result = cmath.rect(0, 0, 83)\n    elif numbers == 84:\n        result = cmath.rect(0, 0, 84)\n    elif numbers == 85:\n        result = cmath.rect(0, 0, 85)\n    elif numbers == 86:\n        result = cmath.rect(0, 0, 86)\n    elif numbers == 87:\n        result = cmath.rect(0, 0, 87)\n    elif numbers == 88:\n        result = cmat"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(isinstance(numbers, complex)):\n        x,y = complex_conversion(numbers)\n        return x,y\n    else:\n        return numbers\ndef complex_conversion(number):\n    '''\n    Compute the complex number x and y from the given number.\n    '''\n    if(number.imag==0):\n        x = complex(1,0)\n        y = complex(0,number.real)\n        return x,y\n    else:\n        x = complex(0,number.imag)\n        y = complex(1,0)\n        return x,y\ndef bin_to_bin_dec(numbers):\n    '''\n    Convert numbers from binary to binary string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '00'\n        if(numbers==3):\n            return '01'\n        if(numbers==4):\n            return '10'\n        if(numbers==5):\n            return '11'\n    else:\n        return numbers\ndef bin_to_bin_hex(numbers):\n    '''\n    Convert numbers from binary to hex string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '02'\n        if(numbers==3):\n            return '03'\n        if(numbers==4):\n            return '04'\n        if(numbers==5):\n            return '05'\n    else:\n        return numbers\ndef bin_to_bin_oct(numbers):\n    '''\n    Convert numbers from binary to octal string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '01'\n        if(numbers==3):\n            return '11'\n        if(numbers==4):\n            return '10'\n        if(numbers==5):\n            return '11'\n    else:\n        return numbers\ndef bin_to_bin_hex_str(numbers):\n    '''\n    Convert numbers from binary to hex string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '02'\n        if(numbers==3):\n            return '03'\n        if(numbers==4):\n            return '04'\n        if(numbers==5):\n            return '05'\n    else:\n        return numbers\ndef bin_to_bin_oct_str(numbers):\n    '''\n    Convert numbers from binary to octal string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '01'\n        if(numbers==3):\n            return '11'\n        if(numbers==4):\n            return '10'\n        if(numbers==5):\n            return '11'\n    else:\n        return numbers\ndef bin_to_bin_hex_str_int(numbers):\n    '''\n    Convert numbers from binary to hex string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '02'\n        if(numbers==3):\n            return '03'\n        if(numbers==4):\n            return '04'\n        if(numbers==5):\n            return '05'\n    else:\n        return numbers\ndef bin_to_bin_oct_str_int(numbers):\n    '''\n    Convert numbers from binary to octal string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '01'\n        if(numbers==3):\n            return '11'\n        if(numbers==4):\n            return '10'\n        if(numbers==5):\n            return '11'\n    else:\n        return numbers\ndef bin_to_bin_hex_str_int_str(numbers):\n    '''\n    Convert numbers from binary to hex string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '02'\n        if(numbers==3):\n            return '03'\n        if(numbers==4):\n            return '04'\n        if(numbers==5):\n            return '05'\n    else:\n        return numbers\ndef bin_to_bin_oct_str_int_str(numbers):\n    '''\n    Convert numbers from binary to octal string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '01'\n        if(numbers==3):\n            return '11'\n        if(numbers==4):\n            return '10'\n        if(numbers==5):\n            return '11'\n    else:\n        return numbers\ndef bin_to_bin_hex_str_int_str_str(numbers):\n    '''\n    Convert numbers from binary to hex string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '02'\n        if(numbers==3):\n            return '03'\n        if(numbers==4):\n            return '04'\n        if(numbers==5):\n            return '05'\n    else:\n        return numbers\ndef bin_to_bin_oct_str_int_str_str(numbers):\n    '''\n    Convert numbers from binary to octal string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '01'\n        if(numbers==3):\n            return '11'\n        if(numbers==4):\n            return '10'\n        if(numbers==5):\n            return '11'\n    else:\n        return numbers\ndef bin_to_bin_hex_str_int_str_str_str(numbers):\n    '''\n    Convert numbers from binary to hex string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '02'\n        if(numbers==3):\n            return '03'\n        if(numbers==4):\n            return '04'\n        if(numbers==5):\n            return '05'\n    else:\n        return numbers\ndef bin_to_bin_oct_str_int_str_str_str(numbers):\n    '''\n    Convert numbers from binary to octal string.\n    '''\n    if(isinstance(numbers, int)):\n        if(numbers==0):\n            return '0'\n        if(numbers==1):\n            return '1'\n        if(numbers==2):\n            return '0"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        for i in range(len(numbers)):\n            numbers[i] = float(numbers[i])\n            # print(numbers[i])\n        # print(len(numbers))\n        if numbers[0] == 0:\n            # print('zero')\n            x = 0\n            y = 0\n        else:\n            x = abs(numbers[0])\n            y = abs(numbers[1])\n        # print(x, y)\n        return x, y\n    except ValueError:\n        print('Invalid input')\n        return -1\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if element.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_integers = 0\n    for item in list1:\n        if isinstance(item, int):\n            num_integers += 1\n    return num_integers\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if type(list1)!= list:\n        raise TypeError(\"Please give me a list\")\n    else:\n        list2 = []\n        for i in list1:\n            if type(i) == int:\n                list2.append(i)\n        return list2\ndef even_numbers(list1):\n    '''\n    Write a python function that returns a list of all even numbers in a given list.\n    '''\n    list3 = []\n    for i in list1:\n        if i % 2 == 0:\n            list3.append(i)\n    return list3\ndef odd_numbers(list1):\n    '''\n    Write a python function that returns a list of all odd numbers in a given list.\n    '''\n    list4 = []\n    for i in list1:\n        if i % 2 == 1:\n            list4.append(i)\n    return list4\ndef even_numbers_only(list1):\n    '''\n    Write a python function that returns a list of all even numbers in a given list.\n    '''\n    list5 = []\n    for i in list1:\n        if i % 2 == 0:\n            list5.append(i)\n    return list5\ndef odd_numbers_only(list1):\n    '''\n    Write a python function that returns a list of all odd numbers in a given list.\n    '''\n    list6 = []\n    for i in list1:\n        if i % 2 == 1:\n            list6.append(i)\n    return list6\ndef sum_of_even_numbers(list1):\n    '''\n    Write a python function that returns the sum of all even numbers in a given list.\n    '''\n    list7 = []\n    for i in list1:\n        if i % 2 == 0:\n            list7.append(i)\n    return sum(list7)\ndef sum_of_odd_numbers(list1):\n    '''\n    Write a python function that returns the sum of all odd numbers in a given list.\n    '''\n    list8 = []\n    for i in list1:\n        if i % 2!= 0:\n            list8.append(i)\n    return sum(list8)\ndef average_of_even_numbers(list1):\n    '''\n    Write a python function that returns the average of all even numbers in a given list.\n    '''\n    list9 = []\n    for i in list1:\n        if i % 2 == 0:\n            list9.append(i)\n    return sum(list9) / len(list9)\ndef average_of_odd_numbers(list1):\n    '''\n    Write a python function that returns the average of all odd numbers in a given list.\n    '''\n    list10 = []\n    for i in list1:\n        if i % 2!= 0:\n            list10.append(i)\n    return sum(list10) / len(list10)\ndef max_number(list1):\n    '''\n    Write a python function that returns the maximum number in a given list.\n    '''\n    list11 = []\n    for i in list1:\n        list11.append(i)\n    return max(list11)\ndef min_number(list1):\n    '''\n    Write a python function that returns the minimum number in a given list.\n    '''\n    list12 = []\n    for i in list1:\n        list12.append(i)\n    return min(list12)\ndef add_number(list1):\n    '''\n    Write a python function that returns the sum of all the numbers in a given list.\n    '''\n    list13 = []\n    for i in list1:\n        list13.append(i+1)\n    return sum(list13)\ndef average_and_average_of_even_numbers(list1):\n    '''\n    Write a python function that returns the average and average of all even numbers in a given list.\n    '''\n    list14 = []\n    for i in list1:\n        if i % 2 == 0:\n            list14.append(i)\n    return sum(list14) / len(list14), sum(list14) / len(list14)\ndef even_and_average_of_odd_numbers(list1):\n    '''\n    Write a python function that returns the average of all even numbers in a given list.\n    '''\n    list15 = []\n    for i in list1:\n        if i % 2 == 0:\n            list15.append(i)\n    return sum(list15) / len(list15), sum(list15) / len(list15)\ndef average_and_average_of_even_numbers_and_odd_numbers(list1):\n    '''\n    Write a python function that returns the average and average of all even numbers and odd numbers in a given list.\n    '''\n    list16 = []\n    for i in list1:\n        if i % 2 == 0:\n            list16.append(i)\n    return sum(list16) / len(list16), sum(list16) / len(list16)\ndef max_and_min_of_even_numbers(list1):\n    '''\n    Write a python function that returns the maximum and minimum of all even numbers in a given list.\n    '''\n    list17 = []\n    for i in list1:\n        if i % 2 == 0:\n            list17.append(i)\n    return max(list17), min(list17)\ndef average_and_average_of_even_numbers_and_odd_numbers_and_even_numbers(list1):\n    '''\n    Write a python function that returns the average of all even numbers and odd numbers and even numbers in a given list.\n    '''\n    list18 = []\n    for i in list1:\n        if i % 2 == 0:\n            list18.append(i)\n    return sum(list18) / len(list18), sum(list18) / len(list18)\ndef average_and_average_of_even_numbers_and_odd_numbers_and_even_numbers(list1):\n    '''\n    Write a python function that returns the average and average of all even numbers and odd numbers and even numbers in a given list.\n    '''\n    list19 = []\n    for i in list1:\n        if i % 2 == 0:\n            list19.append(i)\n    return sum(list19) / len(list19), sum(list19) / len(list19)\ndef average_and_average_of_odd_numbers(list1):\n    '''\n    Write a python function that returns the average and average of all odd numbers in a given list.\n    '''\n    list20 = []\n    for i in list1:\n        if i % 2 == 1:\n            list20.append(i)\n    return sum(list20) / len(list20), sum(list20) / len(list20)\ndef sum_of_even_and_average_of_odd_numbers(list1):\n    '''\n    Write a python function that returns the sum of all even numbers and average of all odd numbers in a given list.\n    '''\n    list21 = []\n    for i in list1:\n        if i % 2 == 0:\n            list21.append(i)\n    return sum(list21) / len(list21), sum(list21) / len(list21)\ndef average_and_average_of_odd_numbers(list1):\n    '''\n    Write a python function that returns the average and average of all odd numbers in a given list.\n    '''\n    list22 = []\n    for i in list1:\n        if i % 2!= 0:\n            list22.append(i)\n    return sum(list22) / len(list22), sum(list22) / len(list22)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    l = list1.count(int)\n    print(l)\n    return l\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list_len = len(list1)\n    counter = 0\n    for i in range(list_len):\n        if type(list1[i]) is int:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        integer_elements = 0\n        for element in list1:\n            if type(element) == int:\n                integer_elements += 1\n        return integer_elements"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1, len(l)+1):\n        for combi in combinations_with_replacement(l, i):\n            colors.append(combi)\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    from itertools import combinations_with_replacement \n    combinations = []\n    for x in range(l):\n        for i in combinations_with_replacement(l, n-x-1):\n            combinations.append(i)\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(l):\n        temp = combinations_with_replacement([i] * n, n)\n        for j in temp:\n            combos.append((tuple(j)))\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n==0:\n        return [tuple(l)]\n    if n==1:\n        return [tuple(l)]\n    if n%2==0:\n        result= combinations_colors(l, (n-1)/2)\n        result.append((tuple(l[0:n-1]),tuple(l[n-1])))\n        return result\n    result.append((tuple(l[0:n-1]),tuple(l[n-1])))\n    return combinations_colors(l[0:n-1],n/2)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return list(combinations(l, 1))\n    else:\n        combs = []\n        for i in range(l):\n            for j in combinations_with_replacement(l, n-1):\n                combs.append((i, j))\n        return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_of_combinations = []\n    for i in range(n):\n        for j in combinations_with_replacement(l, i + 1):\n            list_of_combinations.append(j)\n    return list_of_combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            comb.append((l[i], l[j]))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1, n+1):\n        for combination in combinations_with_replacement(l, i):\n            combinations.append(tuple(combination))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return [tuple(l)]\n    else:\n        return [tuple(l)] + combinations_colors(l, n-1)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return list()\n    elif n == 1:\n        return list(itertools.combinations(l, 1))\n    else:\n        result = list()\n        for i in combinations_with_replacement(l, n-1):\n            result.append(i)\n        return tuple(result)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Count the prime numbers less than n\n    num = 0\n    #Get the first number\n    first = 2\n    #Get the last number\n    last = n-1\n    #If the number is 0\n    if (n == 0):\n        return 0\n    #If the number is 1\n    if (n == 1):\n        return 1\n    #If it is equal to the first number\n    if (first == n):\n        return 2\n    #If it is equal to the last number\n    if (last == n):\n        return 2\n    #If it is even\n    if (n % 2 == 0):\n        #If the number is even\n        if (n % 2 == 0):\n            #Count the prime numbers less than the number\n            for i in range(first,last+1):\n                #If the number is even, count it 1\n                if (i % 2 == 0):\n                    num += 1\n                    #If the number is prime\n                    if (i < n):\n                        #If the number is odd\n                        if (i % 2!= 0):\n                            #Increment the number by one\n                            num += 1\n    #If the number is odd\n    else:\n        #Count the prime numbers less than the number\n        for i in range(first,last+1):\n            #If the number is prime\n            if (i < n):\n                #If the number is even\n                if (i % 2 == 0):\n                    num += 1\n    #Return the number\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        for i in range(2,num):\n            if(num%i==0):\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # TODO: Loop through the range of n to check for primes\n    # TODO: Print out the prime numbers found.\n    # Hint: You can use the filter function, which you do with Python.\n    # You can use the range() function, which returns a range of numbers that includes n.\n    # For example, range(2, 10) returns the numbers 2 through 9.\n    # Note: Here, we are using a filter to find out if a number is prime or not.\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    c = 0\n    for i in range(2, n + 1):\n        if (n % i) == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = 2\n    while num <= n:\n        if prime(num) == True:\n            yield num\n        num += 1\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    lst = [2]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # TODO: write your code here\n    result = 0\n    for num in range(1, n + 1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(1,n):\n            if n%i == 0:\n                count += 1\n        if count < n:\n            return count\n        else:\n            return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            return count + 1\n            break\n    else:\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    primes_list = []\n    for i in range(1, n):\n        for j in range(2, int(sqrt(i))+1):\n            if i % j == 0:\n                break\n        else:\n            primes_list.append(i)\n    return len(primes_list)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a < b:\n        a,b = b,a\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print(\"The tuple of numbers is:\")\n    print(\"a = {0} and b = {1}\".format(a,b))\n    a,b = b,a\n    print(\"The tuple is now:\")\n    print(\"a = {0} and b = {1}\".format(a,b))\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first_num = a\n    second_num = b\n    return(second_num,first_num)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first_number = a\n    second_number = b\n    return (second_number,first_number)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c=a\n    d=b\n    return c,d\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a, b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # YOUR CODE HERE\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1, key=lambda x: x[0])\n    test_tup2 = sorted(test_tup2, key=lambda x: x[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def compare(a, b):\n        a, b = sorted(a), sorted(b)\n        return a[0] == b[0] and a[1] == b[1]\n    \n    def check(a, b):\n        if compare(a, b):\n            return True\n        else:\n            return False\n    \n    def is_sorted(a):\n        for i in range(0, len(a)-1):\n            if a[i] > a[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    #first, pick up all the elements in the first tuple and swap them\n    #then pick up all the elements in the second tuple and swap them\n    \n    #your code here\n    \n    #return tuple with all the elements swapped\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tuple with the max element\n    \n    #return tupl"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup1[0], test_tup1[1]\n    if test_tup1[1] < test_tup2[1]:\n        return test_tup2[0], test_tup2[1]\n    else:\n        return test_tup1[0], test_tup2[1]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1.sort(reverse=True)\n    test_tup2.sort(reverse=True)\n    x = test_tup1[0]\n    y = test_tup2[0]\n    if x > y:\n        return x, y\n    else:\n        return y, x\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    ele1 = test_tup1[0]\n    ele2 = test_tup2[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max((test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        return test_tup2\n    elif (len(test_tup1) < len(test_tup2)):\n        return test_tup1\n    else:\n        i = 0\n        while(i < len(test_tup1)):\n            if (test_tup1[i] > test_tup2[i]):\n                return test_tup1\n            elif (test_tup1[i] < test_tup2[i]):\n                test_tup2.insert(i, test_tup1[i])\n                del test_tup1[i]\n                i = 0\n                break\n            else:\n                i += 1\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        max_val = -1000000\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max_val = max(max_val, test_tup1[i])\n        return max_val\n    else:\n        return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2: \n        raise ValueError(\"n must be >= 2\") \n    prime_number = True \n    nth_prime = 2 \n    if n % 2 == 0: \n        prime_number = False \n    for i in range(3, n, 2): \n        if prime_number == True: \n            prime_number = False \n        if prime_number == True: \n            if i % 2 == 0: \n                nth_prime += 1 \n                i = 3 \n            else: \n                nth_prime += 1 \n                i = 2 \n    return nth_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Base case\n    if n == 1 or n == 0:\n        return 1\n    # if n is divisible by 2\n    if n % 2 == 0:\n        # n is odd\n        return n + newman_prime(n//2)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2 or n == 3:\n        return 2\n    elif n % 2 == 0 or n % 3 == 0:\n        return 0\n    else:\n        q = 5\n        while q <= n / 2:\n            if n % q == 0:\n                return 0\n            q += 2\n        q = n\n        while q <= n:\n            if n % q == 0:\n                return 0\n            q += 5\n        return 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while i <= n:\n        if isPrime(i):\n            j = i\n            while j <= n:\n                if j % i == 0:\n                    break\n                j += 1\n            else:\n                return i\n        i += 1\n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = 1\n    newman = 0\n    while (n % 2 == 0):\n        n = n // 2\n        if n % 2 == 1:\n            newman = num\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if (n % i == 0):\n            newman = num\n            break\n    return newman\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = 2\n    for i in range(3, n):\n        if n % i == 0:\n            x = i\n            break\n    return x\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    def primes_up_to(n):\n        '''\n        Find the first n numbers that are divisible by n.\n        '''\n        prime = [2,3,5,7,11]\n        for i in range(2, n):\n            for j in prime:\n                if i % j == 0:\n                    break\n            else:\n                prime.append(i)\n        return prime\n    def primes(n):\n        '''\n        Generate all prime numbers from 2 to n.\n        '''\n        primes = [2]\n        i = 3\n        while i <= n:\n            if i % 2 == 0:\n                primes.append(i)\n            i += 1\n        return primes\n    def prime(n):\n        '''\n        Find the nth prime number.\n        '''\n        for i in primes(n):\n            if n % i == 0:\n                return i\n    def prime_list(n):\n        '''\n        Find the list of all prime numbers up to the nth prime.\n        '''\n        prime = primes_up_to(n)\n        return prime\n    return next(filter(lambda n: n % 2 == 1, prime_list(n)))\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 2\n    while(prime**2 < n):\n        if (prime**2 % n == 0):\n            prime += 1\n        else:\n            break\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # your code goes here\n    # DO NOT REMOVE THIS LINE\n    if n < 3: \n        raise Exception('n must be at least 3')\n    elif n == 3:\n        return 3\n    elif n % 2 == 0: \n        return 0\n    else: \n        for i in range(3, n, 2): \n            if n % i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n%2==0:\n        return newman_prime(n-1)\n    else:\n        return n-newman_prime(n-1)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check for None values in elements and strings\n    if test_tup1[0] is None:\n        raise TypeError('None is not a valid element of test_tup1')\n    elif test_tup1[1] is None:\n        raise TypeError('None is not a valid element of test_tup1')\n    elif test_tup1[2] is None:\n        raise TypeError('None is not a valid element of test_tup1')\n    elif test_tup1[3] is None:\n        raise TypeError('None is not a valid element of test_tup1')\n    elif test_tup1[4] is None:\n        raise TypeError('None is not a valid element of test_tup1')\n    else:\n        result = test_tup1[2] / test_tup1[3]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div_tup = [0] * (len(test_tup1) + len(test_tup2))\n    for i in range(len(div_tup)):\n        div_tup[i] = test_tup1[i] // test_tup2[i]\n        \n    return div_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO\n    # Implement\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # call the function, set the output as a variable\n    result = test_tup1 / test_tup2\n    # return the value of the variable\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1_int = int(test_tup1[0])\n    test_tup2_int = int(test_tup2[0])\n    return test_tup1_int / test_tup2_int\n    \ndef main():\n    '''\n    User interface function\n    '''\n    test_tup1 = [1, 2, 3]\n    test_tup2 = [4, 5, 6]\n    print(division_elements(test_tup1, test_tup2))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [a/b for a,b in zip(test_tup1,test_tup2)]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # example = (5, 4)\n    # output = (2, 1)\n    # Divide each element in the tuple using a division operator.\n    # example = (4, 2)\n    # output = (4, 1)\n    # Divide each element in the tuple using a division operator.\n    # example = (3, 1, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (3, 1, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 3, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 3, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 2, 4)\n    # Divide each element in the tuple using a division operator.\n    # example = (2, 3, 4)\n    # output = (1, 4, 4)\n    # Divide eac"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0])\n    \n    \ndef test_division(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #process_div(test_tup1, test_tup2)\n    test_tup1 = process_div(test_tup1, test_tup2)\n    return test_tup1\n    \n    \ndef process_div(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #if len(test_tup1)!= len(test_tup2):\n    #    print(f'Largest of {test_tup1} and {test_tup2} are not of equal length')\n    #    exit(1)\n    #    return\n    result = []\n    #if len(test_tup1)!= len(test_tup2):\n    #    print(f'Largest of {test_tup1} and {test_tup2} are not of equal length')\n    #    exit(1)\n    #    return\n    #print(test_tup1)\n    for i in range(len(test_tup1)):\n        #print(i)\n        #if test_tup1[i][0] == test_tup2[i][0]:\n        #    print(test_tup1[i][0])\n        #    if test_tup1[i][1] == test_tup2[i][1]:\n        #        result.append(test_tup1[i][0]/test_tup2[i][0])\n        #        continue\n        #        exit(1)\n        #        continue\n        #    else:\n        #        exit(1)\n        #        continue\n        #        continue\n        #    continue\n        if test_tup1[i][0]!= test_tup2[i][0]:\n            #print('Division error')\n            exit(1)\n        #    continue\n        #    continue\n        result.append(test_tup1[i][0]/test_tup2[i][0])\n    return result\n    \n    \ndef simple_division(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = process_div(test_tup1, test_tup2)\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i][0]/test_tup2[i][0])\n    return result\n    \n    \ndef add(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical addition operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]+test_tup2[0])\n    \n    \ndef sub(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical subtraction operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]-test_tup2[0])\n    \n    \ndef multiply(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0])\n    \n    \ndef divide(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #if len(test_tup1)!= len(test_tup2):\n    #    print(f'Largest of {test_tup1} and {test_tup2} are not of equal length')\n    #    exit(1)\n    #    return\n    result = []\n    #if len(test_tup1)!= len(test_tup2):\n    #    print(f'Largest of {test_tup1} and {test_tup2} are not of equal length')\n    #    exit(1)\n    #    return\n    #print(test_tup1)\n    for i in range(len(test_tup1)):\n        #if test_tup1[i][0] == test_tup2[i][0]:\n        #    print(test_tup1[i][0])\n        #    if test_tup1[i][1] == test_tup2[i][1]:\n        #        result.append(test_tup1[i][0]*test_tup2[i][0])\n        #        continue\n        #        exit(1)\n        #        continue\n        #    else:\n        #        exit(1)\n        #        continue\n        #    continue\n        #if test_tup1[i][0]!= test_tup2[i][0]:\n        #    print('Division error')\n        #    exit(1)\n        #    continue\n        #    continue\n        result.append(test_tup1[i][0]*test_tup2[i][0])\n    return result\n    \n    \n    \ndef power(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical power operation element-wise across the given tuples.\n    '''\n    result = []\n    #if len(test_tup1)!= len(test_tup2):\n    #    print(f'Largest of {test_tup1} and {test_tup2} are not of equal length')\n    #    exit(1)\n    #    return\n    #print(test_tup1)\n    for i in range(len(test_tup1)):\n        #if test_tup1[i][0] == test_tup2[i][0]:\n        #    print(test_tup1[i][0])\n        #    if test_tup1[i][1] == test_tup2[i][1]:\n        #        result.append(test_tup1[i][0]**test_tup2[i][0])\n        #        continue\n        #        exit(1)\n        #        continue\n        #    else:\n        #        exit(1)\n        #        continue\n        #    continue\n        #if test_tup1[i][0]!= test_tup2[i][0]:\n        #    print('Division error')\n        #    exit(1)\n        #    continue\n        result.append(test_tup1[i][0]**test_tup2[i][0])\n    return result\n    \n    \ndef mod(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical modulus operation element-wise across the given tuples.\n    '''\n    #if len(test_tup1)!= len(test_tup2):\n    #    print(f'Largest of {test_tup1} and {test_tup2} are not of equal length')\n    #    exit(1)\n    #    return\n    result = []\n    #if len(test_tup1)!= len(test_tup2):\n    #    print(f'Largest of {test_tup1} and {test_tup2} are not of equal length')\n    #    exit(1)\n    #    return\n    #print(test_tup1)\n    for i in range(len(test_tup1)):\n        #if test_tup1[i][0] == test_tup2[i][0]:\n        #    print(test_tu"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div = 0\n    for i in range(len(test_tup1)):\n        div += test_tup1[i]/test_tup2[i]\n    return div\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(f\"Called function division_elements({test_tup1}, {test_tup2})\")\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result = []\n    if L <= 2:\n        return result\n    if L%2 == 0:\n        return (split_two_parts(list1[0:L//2], L//2), split_two_parts(list1[L//2:], L//2))\n    else:\n        return (split_two_parts(list1[0:L//2], L//2), split_two_parts(list1[L//2:], L//2))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    splitter = list1[:L]\n    return split_two_parts(splitter, L)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_L1 = []\n    split_L2 = []\n    for i in range(L):\n        if len(list1) > i:\n            split_L1.append(list1[i])\n        else:\n            split_L2.append(list1[i])\n    return split_L1, split_L2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    for element in list1:\n        if len(element)==L:\n            list2.append(element)\n    return list2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to append the first part of the list\n    list1_split_L = []\n    \n    # Iterate through the given list\n    for i in list1:\n        # If length of the first part is less than the length of the second part\n        if len(i) < L:\n            # Add the first part to the list\n            list1_split_L.append(i)\n        # If the length of the first part is greater than the length of the second part\n        elif len(i) > L:\n            # Add the second part of the list to the list\n            list1_split_L.append(i[:L])\n            # Add the second part of the list to the list\n            list1_split_L.append(i[L:])\n            # Replace the length of the second part with the length of the first part\n            list1[len(i)-L] = i[L:]\n        # If the length of the first part is less than the length of the second part\n        elif len(i) < L:\n            # Add the first part to the list\n            list1_split_L.append(i[:L])\n            # Add the first part of the list to the list\n            list1_split_L.append(i[L:])\n            # Replace the length of the first part with the length of the second part\n            list1[len(i)-L] = i[L:]\n    # Return the result\n    return list1_split_L\n    \n    \ndef clean_list(list_to_clean, cleaner_list):\n    '''\n    Write a function that takes in a list and a cleaner list (to clean the data in the list) and returns a list that has only the contents of the cleaner list.\n    '''\n    # Create an empty list to append the contents of the cleaner list\n    clean_list_result = []\n    \n    # Iterate through each list item in the list\n    for i in list_to_clean:\n        # If the list item is not in the cleaner list\n        if i not in cleaner_list:\n            # Append the list item to the empty list\n            clean_list_result.append(i)\n    # Return the list\n    return clean_list_result\n    \n    \ndef main():\n    # Create a list of string values\n    values = [\n        \"Vladimir\",\n        \"Tobias\",\n        \"Kris\",\n        \"Adam\"\n    ]\n    # Split the value string into a list\n    values_split = values.split(' ')\n    # Split the value string into a list of tuples\n    values_split_tuple = values_split.split(',')\n    # Create a new list with the first value\n    new_list = values_split_tuple[0]\n    # Remove the first value from the list\n    new_list.pop(0)\n    # Create a list with the second value\n    new_list_2 = values_split_tuple[1]\n    # Remove the second value from the list\n    new_list_2.pop(1)\n    # Split the first value into a list of tuples\n    new_list_2_tuple = new_list_2.split(',')\n    # Append the values from the first value to the new list\n    new_list_2_tuple.extend(values_split_tuple[2:])\n    # Create a new list with the list of tuples\n    new_list_2_tuple = new_list_2_tuple[1:-1]\n    # Create a dictionary from the list of tuples\n    new_dict = dict(new_list_2_tuple)\n    # Create a tuple with the first value\n    new_tuple = new_dict['Vlad']\n    # Create a new list with the second value\n    new_new_tuple = new_tuple.split(',')\n    # Append the values from the second value to the new list\n    new_new_tuple.extend(values_split_tuple[3:])\n    # Create a dictionary with the new values\n    new_dict_2 = dict(new_new_tuple)\n    # Check if the dictionary contains the new list\n    # If not, raise an error\n    if new_dict == new_dict_2:\n        raise Exception(\"Invalid list\")\n    # Print the new list with new values\n    print(new_list)\n    # Print the new list with new values\n    print(new_new_tuple)\n    # Call the split_two_parts function to split the list into two parts\n    list_one, list_two = split_two_parts(values, 2)\n    # Check the result\n    print(list_one)\n    print(list_two)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_two, new_list_2_tuple)\n    # Print the list of lists\n    print(clean_list)\n    # Call the clean_list function to clean the data in the list\n    clean_list = clean_list(list_one, new_list_2_tuple)\n    "
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #split each element into L parts, where L is the length of the first part\n    l_parts = [list1[i:i + L] for i in range(0, len(list1), L)]\n    #combine L parts into a single list\n    return tuple(l_parts)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_list = []\n    split_list.append(list1[:L])\n    split_list.append(list1[L:])\n    return split_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    L1 = list1[:L]\n    L2 = list1[L:]\n    return (L1, L2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #your code goes here\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return h_age * 12\n    else:\n        return h_age * 10\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError('h_age should be greater than 0')\n    if h_age <= 2:\n        return 'few'\n    elif h_age <= 4:\n        return 'tree'\n    elif h_age <= 6:\n        return 'big'\n    elif h_age <= 8:\n        return 'vival'\n    else:\n        return 'cat'\n    \n    \n    \nprint(dog_age(7))\nprint(dog_age(0))\nprint(dog_age(4))\nprint(dog_age(-1))\nprint(dog_age(2))\nprint(dog_age(21))\nprint(dog_age(-6)"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return 'Old.'\n    elif h_age >= 3 and h_age <= 5:\n        return 'Normal.'\n    elif h_age >= 6 and h_age <= 13:\n        return 'Young.'\n    else:\n        return 'Old.'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return \"The dog's age is %d years old.\" % (h_age)\n    elif h_age <= 2:\n        return \"The dog's age is %d years old.\" % (h_age)\n    elif h_age <= 4:\n        return \"The dog's age is %d years old.\" % (h_age)\n    else:\n        return \"The dog's age is %d years old.\" % (h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 0\n    \n    if h_age < 2:\n        years = h_age\n    elif 2 <= h_age <= 4:\n        years = h_age - 2\n    else:\n        years = h_age - 4\n    \n    return years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365.25\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return 0\n    elif h_age <= 2:\n        return 1\n    elif h_age <= 4:\n        return 2\n    elif h_age <= 6:\n        return 3\n    elif h_age <= 8:\n        return 4\n    else:\n        return 5\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(h_age)\n    print(type(h_age))\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split = []\n    for i in range(0, len(S), step):\n        split.append(S[i:i+step])\n    return split\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S.sort()\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    i = 0\n    while i < len(S):\n        if i % step == 0:\n            L.append(S[i:i + step])\n            i += step\n        i += 1\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    output = []\n    for i in range(0,len(S),step):\n        output.append(S[i:i+step])\n    return output\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i + step])\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result_list = []\n    for i in range(0, len(S), step):\n        result_list.append(S[i:i+step])\n    return result_list\n    #raise NotImplementedError('Code is missing')\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = [[]]\n    for i in range(0, len(S), step):\n        result = result + [S[i:i+step]]\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def inner_split(S, l, n):\n        if n==1:\n            yield [l[:]]\n            return\n        else:\n            for i in range(len(l)):\n                l[i] = S[l[i]]\n                inner_split(S, l, n-1)\n                l[i] = S[l[i]]\n    inner_split(S, l, n)\n    return list(list_split(S, step))\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n    \ndef list_reverse(L):\n    '''\n    Write a function that takes in a list and returns a list that reverses the elements of the input list.\n    '''\n    L = []\n    for i in range(0, len(L), -1):\n        L.append(L[i])\n    return L\n    \ndef list_quantifier(N, L, X):\n    '''\n    Write a function that takes in a list of integers and returns a list of the nth element from the left of the list with a prefix sum of X.\n    '''\n    L = list_reverse(L)\n    for i in range(len(L) - 1, 0, -1):\n        if sum(L[i:]) % N == 0:\n            X = sum(L[0:i+1])\n            L.pop(0)\n            break\n    return X\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n    return []\n    \ndef list_combine(a, b):\n    '''\n    Write a function that takes in two lists of length n and returns the concatenated list.\n    '''\n    pass\n    return []\n    \ndef list_repeats(lst):\n    '''\n    Write a function that takes a list of integers and returns whether the list contains any duplicate integers.\n    '''\n    pass\n    return []\n    \ndef list_first(lst):\n    '''\n    Write a function that takes a list and returns the first element in the list.\n    '''\n    pass\n    return []\n    \ndef list_last(lst):\n    '''\n    Write a function that takes a list and returns the last element in the list.\n    '''\n    pass\n    return []\n    \ndef list_is_even(lst):\n    '''\n    Write a function that takes a list and returns whether the list contains even numbers.\n    '''\n    pass\n    return []\n    \ndef list_is_odd(lst):\n    '''\n    Write a function that takes a list and returns whether the list contains odd numbers.\n    '''\n    pass\n    return []\n    \ndef list_is_sorted(lst):\n    '''\n    Write a function that takes a list and returns whether the list is sorted.\n    '''\n    pass\n    return []\n    \ndef list_sort(lst):\n    '''\n    Write a function that takes a list and sorts it.\n    '''\n    pass\n    return []\n    \ndef list_length(lst):\n    '''\n    Write a function that takes a list and returns the length of the list.\n    '''\n    pass\n    return []\n    \ndef list_add(lst1, lst2):\n    '''\n    Write a function that takes two lists and returns the concatenated lists.\n    '''\n    pass\n    return []\n    \ndef list_sub(lst1, lst2):\n    '''\n    Write a function that takes two lists and returns the concatenated lists.\n    '''\n    pass\n    return []\n    \ndef list_mult(lst1, lst2):\n    '''\n    Write a function that takes two lists and returns the concatenated lists.\n    '''\n    pass\n    return []\n    \ndef list_div(lst1, lst2):\n    '''\n    Write a function that takes two lists and returns the concatenated lists.\n    '''\n    pass\n    return []\n    \ndef list_test():\n    '''\n    Write a function that takes a list and returns a tuple of the first list and the last list.\n    '''\n    pass\n    return ()\n    \ndef list_counter(lst):\n    '''\n    Write a function that takes a list and returns the number of duplicates in the list.\n    '''\n    pass\n    return []\n    \ndef list_count_duplicates(lst):\n    '''\n    Write a function that takes a list and returns the number of duplicate elements.\n    '''\n    pass\n    return []\n    \ndef list_remove_duplicates(lst):\n    '''\n    Write a function that takes a list and returns the list with duplicate elements removed.\n    '''\n    pass\n    return []\n    \ndef list_contains(lst, target):\n    '''\n    Write a function that takes a list and returns whether the list contains the specified element.\n    '''\n    pass\n    return []\n    \ndef list_reverse(lst):\n    '''\n    Write a function that takes a list and returns the list in reverse order.\n    '''\n    pass\n    return []\n    \ndef list_pop(lst):\n    '''\n    Write a function that takes a list and returns the last element in the list.\n    '''\n    pass\n    return []\n    \ndef list_index(lst, target):\n    '''\n    Write a function that takes a list and returns its index of the specified value.\n    '''\n    pass\n    return []\n    \ndef list_sort_ascending(lst):\n    '''\n    Write a function that takes a list and sorts it in ascending order.\n    '''\n    pass\n    return []\n    \ndef list_sort_descending(lst):\n    '''\n    Write a function that takes a list and sorts it in descending order.\n    '''\n    pass\n    return []\n    \ndef list_sort_zero(lst):\n    '''\n    Write a function that takes a list and sorts it in ascending order.\n    '''\n    pass\n    return []\n    \ndef list_sort_zero_asc(lst):\n    '''\n    Write a function that takes a list and sorts it in descending order.\n    '''\n    pass\n    return []\n    \ndef list_sort_zero_desc(lst):\n    '''\n    Write a function that takes a list and sorts it in ascending order.\n    '''\n    pass\n    return []\n    \ndef list_reverse_ascending(lst):\n    '''\n    Write a function that takes a list and reverses it in ascending order.\n    '''\n    pass\n    return []\n    \ndef list_reverse_descending(lst):\n    '''\n    Write a function that takes a list and reverses it in descending order.\n    '''\n    pass\n    return []\n    \ndef list_sort_n(lst, n):\n    '''\n    Write a function that takes a list and sorts it in n-length orders.\n    '''\n    pass\n    return []\n    \ndef list_sort_n_asc(lst, n):\n    '''\n    Write a function that takes a list and sorts it in n-length orders.\n    '''\n    pass\n    return []\n    \ndef list_sort_n_desc(lst, n):\n    '''\n    Write a function that takes a list and sorts it in n-length orders.\n    '''\n    pass\n    return []\n    \ndef list_count(lst, target):\n    '''\n    Write a function that takes a list and returns the number of times the specified element occurs in the list.\n    '''\n    pass\n    return []\n    \ndef list_flatten(lst):\n    '''\n    Write a function that takes a list and returns its flattened list.\n    '''\n    pass\n    return []\n    \ndef list_join(lst):\n    '''\n    Write a function that takes a list and returns the concatenated string of its elements.\n    '''\n    pass\n    return []\n    \ndef list_add_n(lst, n):\n    '''\n    Write a function that takes a list and returns a list with n elements concatenated.\n    '''\n    pass\n    return []\n    \ndef list_sub_n(lst, n):\n    '''\n    Write a function that takes a list and returns a list with n elements subtracted from each element in the list.\n    '''\n    pass\n    return []\n    \ndef list_mult_n(lst, n):\n    '''\n    Write a function that takes a list and returns a list with n elements multiplied by each element in the list.\n    '''\n    pass\n    return []\n    \ndef list_div_n(lst, n):\n    '''\n    Write a function that takes a list and returns a list with n elements divided by each element in the list.\n    '''\n    pass\n    return []\n    \ndef list_sum_n(lst, n):\n    '''\n    Write a function that takes a list and returns a list with n elements added together.\n    '''\n    pass\n    return []\n    \ndef list_length_n(lst, n):\n    '''\n    Write a function that takes a list and returns the length of the list.\n    '''\n    pass\n    return []\n    \ndef list_sum_zero(lst):\n    '''\n    Write a function that takes a list and returns a list with all the elements of the list summed together.\n    '''\n    pass\n    return []\n    \ndef list_product_zero(lst):\n    '''\n    Write a function that takes a list and returns a list with all the products of the elements of the list multiplied together.\n    '''\n    pass\n    return []\n    \ndef list_count_zer"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l <= 0:\n        print(\"The side length of a cube can't be less than 0. \")\n        return\n    else:\n        print(\"Lateral surface area of a cube is: \" + str(l * (l + 2) * (l + 2)))\n        return\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import pi,sqrt\n    s=sqrt(l**2)\n    print('The surface area of a cube of side',l,'is',s)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    A = 10\n    b = 40\n    l = 20\n    \n    def a(x, y):\n        return ((l/2)*(x**2) + (b/2)*(y**2))\n    \n    def b(x, y):\n        return (l/2)*(x**2) - (b/2)*(y**2)\n    \n    def c(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def d(x, y):\n        return (l/2)*(x**2) - (l/2)*(y**2)\n    \n    def e(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def f(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def g(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def h(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def i(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def j(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def k(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def l(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def m(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def n(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def o(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def p(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def q(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def r(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def s(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def t(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def u(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def v(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def w(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def x(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def y(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def z(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta2(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta3(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta4(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta5(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta6(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta7(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta8(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta9(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta10(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta11(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta12(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta13(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta14(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta15(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta16(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta17(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta18(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta19(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta20(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta21(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta22(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta23(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta24(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta25(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta26(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta27(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta28(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta29(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta30(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta31(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta32(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta33(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta34(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta35(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta36(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta37(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta38(x, y):\n        return l*(x**2) + l*(y**2)\n    \n    def zeta39(x, y):\n        return l*(x**2) - l*(y**2)\n    \n    def zeta40(x, y):"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l<=0:\n        print(\"The side length must be greater than 0.\")\n        return\n    elif l>100:\n        print(\"The side length must be less than 100.\")\n        return\n    elif l%4==0:\n        print(\"The side length must be divisible by 4.\")\n        return\n    elif l%2==0:\n        print(\"The side length must be divisible by 2.\")\n        return\n    elif l%3==0:\n        print(\"The side length must be divisible by 3.\")\n        return\n    else:\n        print(\"The side length must be divisible by 4 and 2.\")\n        return\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # YOUR CODE HERE\n    l = float(l)\n    if l<=0.0:\n        print('lateral surface area cannot be calculated. l<=0')\n        return -1\n    elif l==0.0:\n        print('lateral surface area cannot be calculated. l==0')\n        return -1\n    elif l>3.0:\n        print('lateral surface area cannot be calculated. l>3')\n        return -1\n    else:\n        print(3.0*l*l*l*l*l*l*l)\n        return 3.0*l*l*l*l*l*l*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    m = l*l\n    a = math.sqrt(m)/2\n    return a\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = abs(l)\n    if l==0:\n        return 0\n    if l<=1:\n        return 2*l\n    return 0.5*l*(l+1)*(l+1)*(l+1)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    result = None\n    if l >= 0:\n        result = c.sum(1, 0, c.sqrt(l**2 - c.pow(l, 2)) * c.pow(l, 2))\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n * n\n    else:\n        return n * n * n\n    \nprint(square_Sum(50))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # return a value from n * n\n    return n * n\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Declare the function\n    def squares_odd(n):\n        '''\n        Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        # Declare the function\n        s = 0\n        i = 1\n        while i <= n:\n            s = s + i * i\n            i += 2\n        return s\n    # Call the function\n    return squares_odd(n)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_sum = i ** 2\n            odd_sum += even_sum\n    print(odd_sum)\n    \n    \n    #Use a while loop\n    #Sum all odd numbers between 1 and n\n    #Sum all even numbers between 1 and n\n    #Add the sums together\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    result = 0\n    for i in range(1, n, 2):\n        result = result + i*i\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return n*(n+1)*(2*n+1)*(4*n+1)\n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 2:\n        return n\n    else:\n        return square_Sum(n-1) + square_Sum(n-2)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s=s+i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if(n == 1):\n        return 1\n    else:\n        return n * square_Sum(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    num = 0\n    \n    for i in range(1, n + 1): \n        \n        if i * 3 + 2 == n: \n            num = i \n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 11\n    elif n == 6: \n        return 13\n    elif n == 7: \n        return 17\n    elif n == 8: \n        return 19\n    elif n == 9: \n        return 23\n    elif n == 10: \n        return 29\n    elif n == 11: \n        return 31\n    elif n == 12: \n        return 33\n    elif n == 13: \n        return 37\n    elif n == 14: \n        return 41\n    elif n == 15: \n        return 43\n    elif n == 16: \n        return 47\n    elif n == 17: \n        return 51\n    elif n == 18: \n        return 53\n    elif n == 19: \n        return 59\n    elif n == 20: \n        return 61\n    elif n == 21: \n        return 63\n    elif n == 22: \n        return 67\n    elif n == 23: \n        return 71\n    elif n == 24: \n        return 73\n    elif n == 25: \n        return 79\n    elif n == 26: \n        return 83\n    elif n == 27: \n        return 89\n    elif n == 28: \n        return 93\n    elif n == 29: \n        return 99\n    elif n == 30: \n        return 103\n    elif n == 31: \n        return 107\n    elif n == 32: \n        return 111\n    elif n == 33: \n        return 113\n    elif n == 34: \n        return 119\n    elif n == 35: \n        return 123\n    elif n == 36: \n        return 127\n    elif n == 37: \n        return 131\n    elif n == 38: \n        return 133\n    elif n == 39: \n        return 137\n    elif n == 40: \n        return 151\n    elif n == 41: \n        return 153\n    elif n == 42: \n        return 157\n    elif n == 43: \n        return 161\n    elif n == 44: \n        return 163\n    elif n == 45: \n        return 167\n    elif n == 46: \n        return 171\n    elif n == 47: \n        return 173\n    elif n == 48: \n        return 179\n    elif n == 49: \n        return 181\n    elif n == 50: \n        return 203\n    elif n == 51: \n        return 207\n    elif n == 52: \n        return 211\n    elif n == 53: \n        return 223\n    elif n == 54: \n        return 227\n    elif n == 55: \n        return 231\n    elif n == 56: \n        return 233\n    elif n == 57: \n        return 247\n    elif n == 58: \n        return 251\n    elif n == 59: \n        return 253\n    elif n == 60: \n        return 257\n    elif n == 61: \n        return 261\n    elif n == 62: \n        return 263\n    elif n == 63: \n        return 277\n    elif n == 64: \n        return 281\n    elif n == 65: \n        return 283\n    elif n == 66: \n        return 293\n    elif n == 67: \n        return 307\n    elif n == 68: \n        return 311\n    elif n == 69: \n        return 313\n    elif n == 70: \n        return 317\n    elif n == 71: \n        return 331\n    elif n == 72: \n        return 333\n    elif n == 73: \n        return 337\n    elif n == 74: \n        return 341\n    elif n == 75: \n        return 343\n    elif n == 76: \n        return 347\n    elif n == 77: \n        return 351\n    elif n == 78: \n        return 353\n    elif n == 79: \n        return 357\n    elif n == 80: \n        return 361\n    elif n == 81: \n        return 363\n    elif n == 82: \n        return 367\n    elif n == 83: \n        return 369\n    elif n == 84: \n        return 371\n    elif n == 85: \n        return 373\n    elif n == 86: \n        return 379\n    elif n == 87: \n        return381\n    elif n == 88: \n        return 383\n    elif n == 89: \n        return 385\n    elif n == 90: \n        return 387\n    elif n == 91: \n        return391\n    elif n == 92: \n        return393\n    elif n == 93: \n        return397\n    elif n == 94: \n        return401\n    elif n == 95: \n        return403\n    elif n == 96: \n        return407\n    elif n == 97: \n        return411\n    elif n == 98: \n        return413\n    elif n == 99: \n        return415\n    elif n == 100: \n        return417\n    elif n == 101: \n        return421\n    elif n == 102: \n        return423\n    elif n == 103: \n        return427\n    elif n == 104: \n        return431\n    elif n == 105: \n        return433\n    elif n == 106: \n        return439\n    elif n == 107: \n        return441\n    elif n == 108: \n        return443\n    elif n == 109: \n        return447\n    elif n == 110: \n        return451\n    elif n == 111: \n        return453\n    elif n == 112: \n        return457\n    elif n == 113: \n        return461\n    elif n == 114: \n        return463\n    elif n == 115: \n        return469\n    elif n == 116: \n        return471\n    elif n == 117: \n        return473\n    elif n == 118: \n        return479\n    elif n == 119: \n        return481\n    elif n == 120: \n        return483\n    elif n == 121: \n        return487\n    elif n == 122: \n        return491\n    elif n == 123: \n        return493\n    elif n == 124: \n        return499\n    elif n == 125: \n        return501\n    elif n == 126: \n        return503\n    elif n == 127: \n        return507\n    elif n == 128: \n        return511\n    elif n == 129: \n        return513\n    elif n == 130: \n        return515\n    elif n == 131: \n        return517\n    elif n == 132: \n        return519\n    elif n == 133: \n        return521\n    elif n == 134: \n        return523\n    elif n == 135: \n        return527\n    elif n == 136: \n        return531\n    elif n == 137: \n        return543\n    elif n == 138: \n        return549\n    elif n == 139: \n        return551\n    elif n == 140: \n        return553\n    elif n == 141: \n        return557\n    elif n == 142: \n        return561\n    elif n == 143: \n        return563\n    elif n == 144: \n        return567\n    elif n == 145: \n        return571\n    elif n == 146: \n        return573\n    elif n == 147: \n        return579\n    elif n == 148: \n        return581\n    elif n == 149: \n        return583\n    elif n == 150: \n        return587\n    elif n == 151: \n        return591\n    elif n == 152: \n        return593\n    elif n == 153: \n        return597\n    elif n == 154: \n        return601\n    elif n == 155: "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 0\n    i = 1\n    while (i <= n):\n        star += i * i\n        i += 1\n    return star\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_list = []\n    for i in range(1,n+1):\n        num_list.append(i)\n    if n==1 or n==2: return n\n    if n==3: return num_list[n//2]\n    mid = (n-2)//2\n    mid_num = num_list[mid]\n    if n%3==0: return num_list[mid]\n    else: return mid_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return find_star_num(n-1) + 2 * find_star_num(n-2)\n    \ndef find_phi_num(n): \n    '''\n    Write a function to find then'th phi number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 4\n    else: \n        return find_phi_num(n-1) + 2 * find_phi_num(n-2)\n        \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if n == 182:\n        return 182\n    if n == 183:\n        return 183\n    i"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 0\n    if n > 0:\n        while n > 0:\n            star = (n%10) * 10 + (n%10)\n            n = n // 10\n        if star > n:\n            return star\n    return None\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    nums = [1, 3, 4, 5, 7]\n    for i in range(len(nums)): \n        if nums[i] % 2 == 1: \n            return i+1\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n    if n == 3: \n        return 4\n    if n == 4: \n        return 5\n    if n == 5: \n        return 6\n    if n == 6: \n        return 7\n    if n == 7: \n        return 8\n    if n == 8: \n        return 9\n    if n == 9: \n        return 10\n    if n == 10: \n        return 11\n    if n == 11: \n        return 12\n    if n == 12: \n        return 13\n    if n == 13: \n        return 14\n    if n == 14: \n        return 15\n    if n == 15: \n        return 16\n    if n == 16: \n        return 17\n    if n == 17: \n        return 18\n    if n == 18: \n        return 19\n    if n == 19: \n        return 20\n    if n == 20: \n        return 21\n    if n == 21: \n        return 22\n    if n == 22: \n        return 23\n    if n == 23: \n        return 24\n    if n == 24: \n        return 25\n    if n == 25: \n        return 26\n    if n == 26: \n        return 27\n    if n == 27: \n        return 28\n    if n == 28: \n        return 29\n    if n == 29: \n        return 30\n    if n == 30: \n        return 31\n    if n == 31: \n        return 32\n    if n == 32: \n        return 33\n    if n == 33: \n        return 34\n    if n == 34: \n        return 35\n    if n == 35: \n        return 36\n    if n == 36: \n        return 37\n    if n == 37: \n        return 38\n    if n == 38: \n        return 39\n    if n == 39: \n        return 40\n    if n == 40: \n        return 41\n    if n == 41: \n        return 42\n    if n == 42: \n        return 43\n    if n == 43: \n        return 44\n    if n == 44: \n        return 45\n    if n == 45: \n        return 46\n    if n == 46: \n        return 47\n    if n == 47: \n        return 48\n    if n == 48: \n        return 49\n    if n == 49: \n        return 50\n    if n == 50: \n        return 51\n    if n == 51: \n        return 52\n    if n == 52: \n        return 53\n    if n == 53: \n        return 54\n    if n == 54: \n        return 55\n    if n == 55: \n        return 56\n    if n == 56: \n        return 57\n    if n == 57: \n        return 58\n    if n == 58: \n        return 59\n    if n == 59: \n        return 60\n    if n == 60: \n        return 61\n    if n == 61: \n        return 62\n    if n == 62: \n        return 63\n    if n == 63: \n        return 64\n    if n == 64: \n        return 65\n    if n == 65: \n        return 66\n    if n == 66: \n        return 67\n    if n == 67: \n        return 68\n    if n == 68: \n        return 69\n    if n == 69: \n        return 70\n    if n == 70: \n        return 71\n    if n == 71: \n        return 72\n    if n == 72: \n        return 73\n    if n == 73: \n        return 74\n    if n == 74: \n        return 75\n    if n == 75: \n        return 76\n    if n == 76: \n        return 77\n    if n == 77: \n        return 78\n    if n == 78: \n        return 79\n    if n == 79: \n        return 80\n    if n == 80: \n        return 81\n    if n == 81: \n        return 82\n    if n == 82: \n        return 83\n    if n == 83: \n        return 84\n    if n == 84: \n        return 85\n    if n == 85: \n        return 86\n    if n == 86: \n        return 87\n    if n == 87: \n        return 88\n    if n == 88: \n        return 89\n    if n == 89: \n        return 90\n    if n == 90: \n        return 91\n    if n == 91: \n        return 92\n    if n == 92: \n        return 93\n    if n == 93: \n        return 94\n    if n == 94: \n        return 95\n    if n == 95: \n        return 96\n    if n == 96: \n        return 97\n    if n == 97: \n        return 98\n    if n == 98: \n        return 99\n    if n == 99: \n        return 100\n    if n == 100: \n        return 101\n    if n == 101: \n        return 102\n    if n == 102: \n        return 103\n    if n == 103: \n        return 104\n    if n == 104: \n        return 105\n    if n == 105: \n        return 106\n    if n == 106: \n        return 107\n    if n == 107: \n        return 108\n    if n == 108: \n        return 109\n    if n == 109: \n        return 110\n    if n == 110: \n        return 111\n    if n == 111: \n        return 112\n    if n == 112: \n        return 113\n    if n == 113: \n        return 114\n    if n == 114: \n        return 115\n    if n == 115: \n        return 116\n    if n == 116: \n        return 117\n    if n == 117: \n        return 118\n    if n == 118: \n        return 119\n    if n == 119: \n        return 120\n    if n == 120: \n        return 121\n    if n == 121: \n        return 122\n    if n == 122: \n        return 123\n    if n == 123: \n        return 124\n    if n == 124: \n        return 125\n    if n == 125: \n        return 126\n    if n == 126: \n        return 127\n    if n == 127: \n        return 128\n    if n == 128: \n        return 129\n    if n == 129: \n        return 130\n    if n == 130: \n        return 131\n    if n == 131: \n        return 132\n    if n == 132: \n        return 133\n    if n == 133: \n        return 134\n    if n == 134: \n        return 135\n    if n == 135: \n        return 136\n    if n == 136: \n        return 137\n    if n == 137: \n        return 138\n    if n == 138: \n        return 139\n    if n == 139: \n        return 140\n    if n == 140: \n        return 141\n    if n == 141: \n        return 142\n    if n == 142: \n        return 143\n    if n == 143: \n        return 144\n    if n == 144: \n        return 145\n    if n == 145: \n        return 146\n    if n == 146: \n        return 147\n    if n == 147: \n        return 148\n    if n == 148: \n        return 149\n    if n == 149: \n        return 150\n    if n == 150: \n        return 151\n    if n == 151: \n        return 152\n    if n == 152: \n        return 153\n    if n == 153: \n        return 154\n    if n == 154: \n        return 155\n    if n == 155: \n        return 156\n    if n == 156: \n        return 157\n    if n == 157: \n        return 158\n    if n == 158: \n        return 159\n    if n == 159: \n        return 160\n    if n == 160: \n        return 161\n    if n == 161: \n        return 162\n    if n == 162: \n        return 163\n    if n == 163: \n        return 164\n    if n == 164: \n        return 165\n    if n == 165: \n        return 166\n    if n == 166: \n        return 167\n    if n == 167: \n        return 16"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - 32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return(ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return str(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return ord(k)\n    except:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, int) == False:\n        return ValueError\n    else:\n        return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for even in arr:\n        if even % 2 == 0:\n            even_sum += even\n    return even_sum\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    odd_sum = 0\n    for odd in range(len(arr)):\n        if (odd % 2) == 1:\n            odd_sum += arr[odd]\n    return odd_sum\n    \ndef sum_even_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers and odd numbers at even positions of a list.\n    '''\n    even_odd_sum = 0\n    for even in range(len(arr)):\n        if even % 2 == 0:\n            even_odd_sum += arr[even]\n    return sum_even_and_even_index(arr) + sum_odd_and_odd_index(arr)\n    \ndef selectionSort(arr):  \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([i for i in arr if i % 2 == 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = []\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            even.append(arr[i])\n    return sum(even)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Your code here\n    even_sum = 0\n    sum_even = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            sum_even += num\n    return even_sum - sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = 0\n    for num in arr:\n        if num % 2 == 0:\n            res += num\n    return res\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = 0\n    for i in arr:\n        if i % 2 == 0:\n            evens += i\n    return evens\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x=n\n    i=0\n    while(x>0):\n        if (x%5 ==0):\n            x=x//10\n            i=i+1\n        else:\n            break\n    return i\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0: \n        print(\"Please enter a positive integer.\")\n        return \n    elif n == 0: \n        print(\"The sum of the first\", n,\"numbers that are raised to the fifth power is 0.\")\n        return\n    else: \n        result = 0\n        for i in range(0, n+1): \n            if i%2 == 0: \n                result = result + i \n        if result == 0: \n            print(\"The sum of the first\", n,\"numbers that are raised to the fifth power is 0.\")\n        else: \n            print(\"The sum of the first\", n,\"numbers that are raised to the fifth power is\", result)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return 0\n    elif n == 1: \n        return n \n    elif n == 2: \n        return n * n \n    elif n == 3: \n        return n * n * n \n    else: \n        return n * n * n * n \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        if num % 2 == 0:\n            sum += num\n        else:\n            pass\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([1 if i % 5 == 0 else i for i in range(n)])\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n * even_Power_Sum(n-1)\n    else:\n        return n * even_Power_Sum(n-1) + (n-2) * even_Power_Sum(n-3)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # I use a while loop to loop the integer and check for every even number\n    # and then return the sum of the first 5 numbers\n    sum=0\n    while(n>0):\n        # I can use a for loop to loop over the numbers in the range of the integer and check for the first n even numbers\n        # then check to see if the first n even numbers sum is greater than or equal to the sum of the current number and return the result\n        # the sum of the first 5 numbers is a running sum\n        sum=sum+n\n        n=n-1\n        if (n%2==0):\n            # I need to check if the number of even numbers is less than or equal to the number of integers in the range \n            # I then check for the first 5 numbers and return the sum of the first 5 numbers\n            if(n<=5):\n                # if the first n even numbers are less than the sum of the integers in the range and return the sum of the first 5 numbers\n                if(n==5):\n                    return sum\n                else:\n                    return sum+even_Power_Sum(n+1)\n            else:\n                # if the first n even numbers are greater than the sum of the integers in the range and return the sum of the first 5 numbers\n                if(n==5):\n                    return sum\n                else:\n                    return sum+even_Power_Sum(n+1)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code here\n    return sum([int(x**5) for x in range(0,n+1,5) if x%5==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            even = even + i\n    print(even)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code here\n    sum = 0\n    i = 1\n    while i < n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = sorted(test_list)\n    front_elements = []\n    rear_element = test_list[0][1]\n    for element in test_list:\n        if element[1] == rear_element:\n            front_elements.append(element[0])\n        else:\n            front_elements.append(rear_element)\n            rear_element = element[1]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for element in test_list:\n        rear_extracted.append(element[1])\n    return rear_extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n    \ndef rear_insert(test_list):\n    '''\n    Write a function that takes in a list of tuples and inserts a rear element into the end of the list.\n    '''\n    return [x[0] for x in test_list] + [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list_rear = []\n    for element in test_list:\n        test_list_rear.append(element[1])\n    return test_list_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for x in test_list:\n        new_list.append(x[0])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract_list = []\n    for i in range(len(test_list)):\n        rear_extract_list.append(test_list[i][0])\n    return rear_extract_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return(test_list)\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for x in test_list:\n        return_list.append(x[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[1])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[1:] + test_tup2[1:]\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"tuple must be same length\")\n        return\n    \n    index = 0\n    while index < len(test_tup1):\n        if index == len(test_tup1):\n            index = index + 1\n        elif index == len(test_tup2):\n            index = index + 1\n        else:\n            if test_tup1[index] < test_tup2[index]:\n                test_tup1.pop(index)\n            else:\n                test_tup2.pop(index)\n            index = index + 1\n    \n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Error: Each tuple must have the same length.')\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"The first tuple must be the same size as the second tuple.\"\n    assert test_tup1[0]!= test_tup2[0], \"The first tuple must be not equal to the second tuple.\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for index, value in enumerate(test_tup1):\n        result.append(value - test_tup2[index])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup_str1 = str(test_tup1[0]) +'' + str(test_tup1[1])\n    test_tup_str2 = str(test_tup2[0]) +'' + str(test_tup2[1])\n    test_str1 = test_tup_str1.split(' ')\n    test_str2 = test_tup_str2.split(' ')\n    test_str1.remove(test_str1[-1])\n    test_str2.remove(test_str2[-1])\n    if len(test_str1) == len(test_str2):\n        for x in range(0, len(test_str1)):\n            if test_str1[x]!= test_str2[x]:\n                return test_tup2\n    return test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    return test_tup1[:2]\n    raise NotImplementedError\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Testing code\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    test_tup2 = (10, 11, 12, 13, 14, 15, 16, 17, 18)\n    # Testing code\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, "
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum\ndef even_binomial_Coeff_Sum_Sum_Contribution_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum\ndef even_binomial_Coeff_Sum_Sum_Contribution_Square_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum\ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum\ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum\ndef even_binomial_Coeff_Sum_Sum_Contribution_Square_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum\ndef even_binomial_Coeff_Sum_Sum_Contribution_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum\ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Contribution_Sum_Square_Sum_Square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (1/i) * math.factorial(i) * math.pow((i - 2),2)\n    return sum \ndef even_binomial_Coeff_Sum_Sum_Con"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (n + 1) * (n + 2) / 6\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        print(\"Not a positive integer!\")\n    elif n==0:\n        return 1\n    elif n==1:\n        return 0\n    else:\n        return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n<0:\n        print(\"Not a positive integer!\")\n    elif n==0:\n        return 1\n    elif n==1:\n        return 0\n    else:\n        return odd_binomial_Coeff_Sum(n-1) + odd_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += binomial(i, 2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) + 2\n        \ndef even_binomial_Coeff_Sum_V2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum_V2(n - 1) + even_binomial_Coeff_Sum_V2(n - 2)\n    else:\n        return even_binomial_Coeff_Sum_V2(n - 1) + even_binomial_Coeff_Sum_V2(n - 2) + 2\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n+1):\n        ans += (i)*(math.factorial(i))/(math.factorial(i-2)*math.factorial(i-1))\n    return ans\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i * even_binomial_Coeff_Sum(i - 1)\n    return sum\ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            sum += i * odd_binomial_Coeff_Sum(i - 1)\n    return sum\ndef sum_of_even_odd_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum(n) + odd_binomial_Coeff_Sum(n)\n    return sum\ndef square_of_even_odd_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index square of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum(n) + odd_binomial_Coeff_Sum(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum2(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum2(n) + odd_binomial_Coeff_Sum2(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum3(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum3(n) + odd_binomial_Coeff_Sum3(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum4(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum4(n) + odd_binomial_Coeff_Sum4(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum5(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum5(n) + odd_binomial_Coeff_Sum5(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum6(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum6(n) + odd_binomial_Coeff_Sum6(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum7(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum7(n) + odd_binomial_Coeff_Sum7(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum8(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum8(n) + odd_binomial_Coeff_Sum8(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum9(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum9(n) + odd_binomial_Coeff_Sum9(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum10(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum10(n) + odd_binomial_Coeff_Sum10(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum11(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum11(n) + odd_binomial_Coeff_Sum11(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum12(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum12(n) + odd_binomial_Coeff_Sum12(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum13(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum13(n) + odd_binomial_Coeff_Sum13(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum14(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum14(n) + odd_binomial_Coeff_Sum14(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum15(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum15(n) + odd_binomial_Coeff_Sum15(n) ** 2\n    return sum\ndef sum_of_even_odd_Coeff_Sum16(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, \n    odd index binomial coefficients, and odd index sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum16(n) + odd_bi"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    while n!=0: \n        a = math.factorial(n) \n        sum = sum + (a // math.factorial(n-2)) \n        n = n - 2\n    return sum \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    print(n)\n    for i in range(2, n + 1):\n        print(str(i) + \"th power of \" + str(i) + \" = \", str(n * i) + \" * \" + str(i))\n        \ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    print(n)\n    sum = 0\n    for i in range(1, n):\n        sum += int(math.factorial(i) / math.factorial(i - 1) * (i - 1) / 2 * math.pow(i - 1, 2))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Write your code here.\n    # Only edit the condition below and then the tests will pass\n    if (n < 2): \n        return 0\n    elif (n == 2):\n        return 2\n    elif (n%2 == 0):\n        return n**(n//2)\n    else:\n        return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n        \n    \n    \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    \n    # Write your code here.\n    # Only edit the condition below and then the tests will pass\n    if (n < 2): \n        return 0\n    elif (n == 2):\n        return 2\n    elif (n%2 == 1):\n        return n**(n//2)\n    else:\n        return odd_binomial_Coeff_Sum(n-1) + odd_binomial_Coeff_Sum(n-2)\n        \n    \n    \ndef binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of n index binomial coefficients.\n    '''\n    \n    # Write your code here.\n    # Only edit the condition below and then the tests will pass\n    if (n < 2): \n        return 0\n    elif (n == 2):\n        return 2\n    elif (n%2 == 0):\n        return n**(n//2)\n    else:\n        return binomial_Coeff_Sum(n-1) + binomial_Coeff_Sum(n-2)\n        \n    \n    \n    \ndef binomial_Coeff_Sum_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of n index binomial coefficients.\n    '''\n    \n    # Write your code here.\n    # Only edit the condition below and then the tests will pass\n    if (n < 2): \n        return 0\n    elif (n == 2):\n        return 2\n    elif (n%2 == 0):\n        return n**(n//2)\n    else:\n        return binomial_Coeff_Sum_2(n-1) + binomial_Coeff_Sum_2(n-2)\n        \n    \n    \n    \n    \n    \n    \ndef binomial_Coeff_Sum_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of n index binomial coefficients.\n    '''\n    \n    # Write your code here.\n    # Only edit the condition below and then the tests will pass\n    if (n < 2): \n        return 0\n    elif (n == 2):\n        return 2\n    elif (n%2 == 0):\n        return n**(n//2)\n    else:\n        return binomial_Coeff_Sum_3(n-1) + binomial_Coeff_Sum_3(n-2) + binomial_Coeff_Sum_3(n-3)\n        \n    \n    \n    \n    \n    \ndef binomial_Coeff_Sum_4( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of n index binomial coefficients.\n    '''\n    \n    # Write your code here.\n    # Only edit the condition below and then the tests will pass\n    if (n < 2): \n        return 0\n    elif (n == 2):\n        return 2\n    elif (n%2 == 0):\n        return n**(n//2)\n    else:\n        return binomial_Coeff_Sum_4(n-1) + binomial_Coeff_Sum_4(n-2) + binomial_Coeff_Sum_4(n-3)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (2*(r*h))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # YOUR CODE HERE\n    return 0.0\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3*3.14*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*(math.pi)*(r**3)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3 * pi * r * h\n    print (\"The volume of a cylinder with radius \" +str(r) + \" and height \" +str(h) + \" is \" +str(volume))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*4\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = r * h * 3.14\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4*np.pi*(r**2)*(h**3)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*(2*3.14*h)**(0.5)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict=dict.copy()\n    for key,value in dict.items():\n        if(value>n):\n            filtered_dict.pop(key)\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict.copy()\n    d = dict.copy()\n    for key, value in d.items():\n        if value >= n:\n            d[key] = value\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.copy()\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if n in dict:\n        return dict[n]\n    else:\n        return 0\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Make sure that the dictionary is not empty\n    if not dict:\n        return {}\n    \n    # Make a copy of the dictionary\n    dictionary = dict.copy()\n    \n    # Loop through the keys, and only keep the ones that have values greater than or equal to n\n    for key in dictionary.keys():\n        if dictionary[key] >= n:\n            # Write the value to the dictionary\n            dictionary[key] = dictionary[key] - n\n    \n    # Return the dictionary\n    return dictionar"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            result[key] = dict[key]\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_temp = {}\n    for key, value in dict.items():\n        if value >= n:\n            dict_temp[key] = value\n    return dict_temp\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: val for key, val in dict.items() if val >= n}\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elements = []\n    for item in test_tup:\n        first_elements.append(item)\n    return len(first_elements)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # implement this function\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    count = 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # initialize count to zero\n    count = 0\n    # iterate through the tuple, starting at index 0\n    for i in range(len(test_tup) - 1):\n        # if the current element is the tuple element, increment count\n        if test_tup[i] == test_tup[i + 1]:\n            # if this is the first element, increment count\n            if i == 0:\n                count += 1\n            # otherwise, increment count\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if test_tup[0] < i:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    if type(test_tup)!= tuple:\n        raise TypeError\n    else:\n        for x in test_tup:\n            if x == test_tup[0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Your code here\n    return 0\n    "
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code goes here\n    if not test_tup:\n        return 0\n    if len(test_tup) < 2:\n        return 0\n    for index in range(len(test_tup)-1):\n        if test_tup[index] > test_tup[index+1]:\n            return 1+count_first_elements(test_tup[:index]+test_tup[index+1:])\n    return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_num_decagonal(n):\n        '''\n        Decorator to check if n is a number\n        '''\n        def _is_num_decagonal(func):\n            '''\n            Decorator to check if n is a number\n            '''\n            def wrapper(x):\n                if not isinstance(x, int):\n                    return None\n                if x == 0:\n                    return 0\n                elif x < 0:\n                    return None\n                \n                try:\n                    func(x)\n                except TypeError as e:\n                    return None\n                except ValueError as e:\n                    return None\n                except RuntimeError as e:\n                    return None\n                return x\n            return wrapper\n        return _is_num_decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_list = []\n    for i in range(n):\n        num = int(input(\"Enter a number: \"))\n        num_list.append(num)\n    max_num = max(num_list)\n    for i in range(n, 0, -1):\n        if (num_list[i - 1]!= max_num):\n            num_list.remove(max_num)\n            break\n    return num_list[n - 1]\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # check to see if n is a positive number\n    if not n.isdigit(): \n        print('Please input a valid number!')\n        return False\n    \n    # check if n is even\n    if n % 2 == 0: \n        return False\n    \n    # Check if it is a decimal\n    elif int(n) % 2!= 0: \n        print('Please input a number that is even!')\n        return False\n    else: \n        # return the decagualated number\n        return int(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1,n+1):\n        print(i, end=' ')\n    print()\n    for i in range(n-1,-1,-1):\n        print(i, end=' ')\n    print()\n    \ndef is_num_odd_decagonal(n): \n    '''\n    Write a function to check whether the nth number is odd decagonal.\n    '''\n    for i in range(1,n+1):\n        print(i, end=' ')\n    print()\n    for i in range(n-1,-1,-1):\n        print(i, end=' ')\n    print()\n    \ndef main(): \n    '''\n    I have provided a function that checks whether a number is odd or even.\n    '''\n    n = int(input(\"Enter the nth number to check: \"))\n    is_num_odd_decagonal(n)\n    \nif __name__=='__main__': \n    main("
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_list = []\n    dec_list = []\n    i = 0\n    while i < n:\n        if(n%2==0):\n            num_list.append(int(n/2))\n        else:\n            num_list.append(int(n/2)-1)\n        n = n/2\n        i = i+1\n    i = 0\n    while i < len(num_list):\n        if(i == len(num_list)-1):\n            dec_list.append(num_list[i])\n        else:\n            dec_list.append(num_list[i]+num_list[i+1])\n        i = i+1\n    return dec_list\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # a = int(input('Please enter a number: '))\n    a = n\n    if (a % 2) == 1:\n        return is_num_decagonal(a//2)\n    else:\n        return is_num_decagonal((a-1)//2)\n        \n    \n    \n    \nif __name__ == \"__main__\":\n    n = 10\n    print(f\"{is_num_decagonal(n)}\")"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        return 1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    list = []\n    for i in range(1,n):\n        if i%2 == 0:\n            count += 1\n        else:\n            count -= 1\n        list.append(count)\n    return list\n    \nprint(is_num_decagonal(4))\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    def calc_nth_decagonal_number(n):\n        return (n + 1) * (n + 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(n):\n        #print(f\"i: {i}\")\n        if n == 0:\n            print(n, end = \" \")\n            return\n        if n == 1:\n            print(i, end = \" \")\n            return\n        else:\n            n = n-1\n            print(f\"i: {i} n: {n}\", end = \" \")\n            print(f\"i: {i} n: {n}\")\n            return"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return True,i\n    return False,i\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # write your code here\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Check if element is in the list and if its not in the array return\n    # Else return the index position of the element and True as the element is found\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    # If element not found return False as the element is not in the array\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = i\n    return (position!= -1,position)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    for item in dlist:\n        if item == item:\n            pos += 1\n    return (pos == 0"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # TODO: Remove pass and write your code here\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return(True, i)\n    return(False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # set of the unique elements\n    unique_list = set(test_list)\n    # if there are duplicate, then it will return false\n    if len(test_list)!= len(unique_list):\n        return False\n    # if all the elements are unique then return true\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set_list = set(test_list)\n    set_list = list(set_list)\n    if len(set_list)!= len(set(set_list)):\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    for i in test_list:\n        if test_list.count(i) > 1:\n            count += 1\n    if count == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set_obj = set(test_list)\n    if len(set_obj) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    check_list = []\n    \n    for i in range(len(test_list)):\n        if test_list[i] in check_list:\n            return False\n        else:\n            check_list.append(test_list[i])\n        \n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return unique_elements\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(set(test_list))\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    test_list = set(test_list)\n    test_list = list(test_list)\n    test_list = sorted(test_list)\n    if len(test_list) > 0:\n        print(test_list)\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Your code here\n    # DO NOT MODIFY THIS FUNCTION\n    # It is not a solution to this challenge, but it's a good place to check your code\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sublist1=[]\n    for i in range(0,len(nums1)):\n        sublist1.append(nums1[i]-nums2[i])\n    return sublist1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_copy = nums1.copy()\n    nums2_copy = nums2.copy()\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a = []\n    b = []\n    for i in range(len(nums1)):\n        a.append(nums1[i] - nums2[i])\n    for j in range(len(nums2)):\n        b.append(nums2[j] - nums1[j])\n    return a,b\n    \n    \n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    sub = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            sub.append(nums1[i])\n        else:\n            sub.append(nums1[i] - nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # start writing your code here\n    return [x for x in nums1 if x not in nums2]\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(0,len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    res = []\n    \n    for i in nums1:\n        if nums2.index(i)!= nums2.index(i):\n            res.append(i)\n    \n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length\"\n    else:\n        sub_list = []\n        for i in range(len(nums1)):\n            sub_list.append(nums1[i] - nums2[i])\n        return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(0, len(nums2)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n    \ndef sub_list_1(nums1,nums2):\n    '''\n    Write a function to find the median.\n    '''\n    sub_list = []\n    for i in range(0, len(nums2)):\n        sub_list.append((nums1[i]-nums2[i])/2)\n    return sub_list\n    \ndef mean(nums1):\n    '''\n    Return the average of a list.\n    '''\n    sum = 0\n    for num in nums1:\n        sum += num\n    return sum/len(nums1)\n    \ndef median(nums1):\n    '''\n    Return the median of a list.\n    '''\n    nums = sorted(nums1)\n    if len(nums) % 2 == 0:\n        median_1 = nums[len(nums)//2]\n        median_2 = nums[len(nums)//2-1]\n        return median_1 if nums[len(nums)//2] > median_2 else median_2\n    else:\n        return nums[len(nums)//2]\n    \ndef median_all(nums1):\n    '''\n    Return the median of a list.\n    '''\n    nums = sorted(nums1)\n    if len(nums) % 2 == 0:\n        median_1 = nums[len(nums)//2]\n        median_2 = nums[len(nums)//2-1]\n        return median_1 if nums[len(nums)//2] > median_2 else median_2\n    else:\n        return nums[len(nums)//2]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def compare_digits(n,d1,d2): \n        '''\n        Write a function that takes in two strings, and compares the length of the strings using their respective indexes.\n        '''\n        string_1=len(n)\n        string_2=len(d1)\n        if (string_1 == string_2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n==0:\n        return 1\n    elif n<0:\n        return 0\n    else:\n        l = 0\n        h = n\n        while(h>0):\n            digit = h%10\n            if digit==n:\n                l+=1\n            else:\n                h//=10\n        if l==n:\n            return 1\n        else:\n            return 0\n    \ndef main():\n    n = int(input())\n    print(validate(n))\nif __name__=='__main__':\n    main("
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return n\ndef validate2(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0: \n        return False\n    for i in range(10): \n        if n % 10 == i: \n            return False\n    return True \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"Error: n must be an int\")\n    elif n < 0 or n % 10 > 7 or n == 0: \n        raise ValueError(\"Error: n must be a number between 0 and 9\")\n    elif n == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # test cases\n    if n < 0:\n        raise Exception(\"number must be positive\")\n    if n == 0:\n        return(0)\n    elif n == 1:\n        return(\"one\")\n    elif n % 10 == 1:\n        return(n//10)\n    else:\n        return(n//10) * validate(n%10)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0 or n >= 10:\n        return 'Invalid value. Please try again.'\n    else:\n        return 'Valid value.'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {} \n    for i in range(10): \n        dict[i] = 0\n    for i in n: \n        dict[i] += 1\n    if dict[n[0]] >= dict[n[len(n)-1]]:\n        return False\n    else: \n        return True"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # get the string of the numbers in the integer. \n    # go through each digit of the string and check if the integer does not have \n    # an integer after a given decimal place of any digit.\n    # if it does, print the number of digits with a decimal place\n    # of a certain value\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #print(element)\n    for item in list:\n        if item == element:\n            #print('Inlist:'+ str(item))\n            return True\n    #print('Not inlist:'+ str(item))\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index, element in enumerate(list):\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) < 2:\n        return \"List is empty\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check each item in list\n    for i in range(len(list)):\n        if list[i] == element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count = count + 1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index,item in enumerate(list):\n        if item == element:\n            return (index,item)\n    return (\"List not found\")\ndef check_same(list1, list2):\n    '''\n    Write a function that takes in a list and list2 and returns true if all items in the first list are the same as the second.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return (\"List not found\")\n    return (\"All items are the same\")\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i]!= element:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    is_equal = re.match('(a){2}b', text)\n    return is_equal\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_fifty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_sixty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_seventy(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_eighty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_nineties(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_two_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_three_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_three_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    text = text.replace(' ','')\n    if len(text)<3 or len(text)>15:\n        return False\n    return True\ndef text_match_three_five(text):\n    '''\n    Write a function that checks whethe"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'b':\n            a += 1\n        elif text[i] == 'a' and text[i+1]!= 'b':\n            a += 1\n        elif text[i]!= 'a' and text[i+1] == 'b':\n            b += 1\n    return a == 2 and b == 2\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if(re.search(r'[A-Z]', text)):\n        return \"match two\"\n    elif(re.search(r'[A-Z]', text[0])):\n        return \"match three\"\n    else:\n        return \"not match\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_pattern = r'(\\b[aA]\\b)'\n    return re.search(match_pattern, text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?P<a>[a-zA-Z])(?P<b>[b-zA-Z]+)')\n    match = pattern.search(text)\n    return match!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\w+a+\\s*\\w+b+\\s*'\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    def two_three(text):\n        '''\n        Takes a string as input.\n        Returns True if the string has a three or more 'b' characters, otherwise returns False.\n        '''\n        found = False\n        num = 0\n        for i in range(len(text)):\n            if i == 0:\n                if text[i] == 'b':\n                    found = True\n                    num += 1\n                    if num == 2:\n                        return True\n            elif text[i] == 'a' or text[i] =='':\n                if text[i] == 'a' and text[i + 1] == 'b':\n                    found = True\n                    num += 1\n                    if num == 2:\n                        return True\n        if found == False:\n            return False\n    text = text.replace(' ', '')\n    return two_three(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for char in text:\n        if char in 'ab':\n            count += 1\n    if count == 3 or count == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Define variables for the first text\n    text1 = ''\n    text2 = ''\n    text3 = ''\n    # Define variables for the second text\n    text4 = ''\n    text5 = ''\n    # Define variables for the third text\n    text6 = ''\n    text7 = ''\n    # Define variables for the fourth text\n    text8 = ''\n    text9 = ''\n    # Define variables for the fifth text\n    text10 = ''\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a.sort()\n    b = [0 for i in range(n)]\n    for i in range(n-k):\n        b[i] = a[i+k-1]\n    return b\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Number of sub array\n    n_sub_array = (k-1) * (k-1)\n    max_sum = a[0]\n    count = 0\n    \n    # For every k-1 sub-array\n    for i in range(0,n-n_sub_array+1):\n        \n        # For every k-1 sub-array\n        for j in range(0,k-1):\n            \n            # If i is the last sub-array\n            if i == n-n_sub_array:\n                # If j is the last sub-array\n                if j == k-1:\n                    # Assign max sum\n                    max_sum = a[i] + a[i+j+1]\n                # Else assign max sum\n                else:\n                    # Set value of sub-array\n                    max_sum = max(a[i+j+1],a[i+j+2])\n            # Else if j is not last sub-array\n            else:\n                # Set value of sub-array\n                max_sum = max(a[i+j+1],a[i+j+2])\n        \n        # Increment count\n        count += 1\n    # Return max sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #define variables\n    sums = []\n    remainder = []\n    \n    #check if a is a subarray\n    if (n == 1):\n        return a[0]\n    \n    #loop through array and add elements to sums\n    for i in range(n):\n        sums.append(a[i] + k*i)\n    \n    #check if elements sum to original array\n    for i in range(n):\n        remainder.append(sums[i] - a[i])\n    \n    #get the smallest element\n    remainder.sort()\n    smallest = remainder[0]\n    \n    #find the smallest element in remainder\n    for i in range(len(remainder)):\n        if remainder[i] <= smallest:\n            smallest = remainder[i]\n            \n    #find the sum\n    return smallest\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    count = 1\n    maximum = -1\n    output = -1\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if a[j]!= 0:\n                count += 1\n            else:\n                if count > 0:\n                    output = max(count, output)\n                    count = 0\n        if count > 0:\n            output = max(count, output)\n    return output\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a) \n    sum_a = 0\n    a_s = 0\n    max_sum = 0\n    if n == 1:\n        return max_sum\n    for i in range(0, n-k+1):\n        sum_a += a[i]\n    for i in range(0, n):\n        sum_a += a[i]\n        if sum_a > max_sum:\n            max_sum = sum_a\n    # print(max_sum)\n    for i in range(0,n-k):\n        sum_a -= a[i]\n        sum_a += a[i+k]\n        if sum_a > max_sum:\n            max_sum = sum_a\n    # print(max_sum)\n    for i in range(0,n-k):\n        sum_a -= a[i+k]\n        sum_a += a[i]\n        if sum_a > max_sum:\n            max_sum = sum_a\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = len(a)\n    dp = [[0 for x in range(k)] for x in range(m)]\n    \n    for i in range(m):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + a[i]\n        for j in range(k):\n            if j == k-1:\n                dp[i][j] = max(a[i], dp[i-1][j])\n            else:\n                dp[i][j] = max(a[i], dp[i-1][j] + a[i])\n    \n    return max(dp[-1])\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return max(a[0], a[1])\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    left = 0\n    right = a[n-1] - a[n-k]\n    maximum = -sys.maxsize\n    for i in range(n-k):\n        maximum = max(maximum, sum(a[i:i+k]))\n        left = max(left, sum(a[i:i+k]))\n    return left+maximum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    left = 0\n    right = 0\n    left_sum = 0\n    right_sum = 0\n    ans = 0\n    max_sum = -100\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    Time Complexity: O(n^k) - where n is the length of the array. \n    Space Complexity: O(k) - where k is the length of the array. \n    '''\n    # TODO: write your code here\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return (n ** 2)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n_even = 0\n    s_even = 0\n    for i in range(0, n):\n        if n % 2 == 0:\n            s_even = s_even + (n**2)\n        else:\n            n_even = n_even + (n**2)\n    return s_even\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    return n*n\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)//2\n    \nprint(square_Sum(20))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**2\n        if i % 2 == 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n    #your code goes here\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Check if n is a positive integer\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i ** 2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += (i ** 2)\n    return sum_of_squares\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    n = len(list1)\n    if n == 1:\n        return n\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if(list1[i][j] > length):\n                length = list1[i][j]\n            \n    return length\n    \n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in range(len(list1)):\n        length.append(len(list1[i]))\n    return max(length)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if(len(list1[i][j])>length):\n                length=len(list1[i][j])\n    print(length)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for element in list1:\n        if len(element) > len(result):\n            result = element\n    return result\n    "
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in list1:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    #for each element in the list\n    for i in range(len(list1)):\n        #check if the list is greater than current element\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if(len(list1[i][j]) > len(max)):\n                max = list1[i][j]\n    return max\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2: \n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (j + k -1) < n and d[i] + d[j] + d[j + k -1] == k:\n                d[i] += 1\n                count += 1\n    print(d)\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0 for x in range(k+1)] for x in range(n+1)]\n    ways[0][0] = 1\n    \n    for i in range(1, n+1):\n        if (ways[i-1][0] == 0) and (ways[i-1][1] == 0) and (ways[i-1][2] == 0):\n            ways[i][0] = 1\n        elif (ways[i-1][0] == 0) and (ways[i-1][1] == 1) and (ways[i-1][2] == 0):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 0) and (ways[i-1][2] == 0):\n            ways[i][0] = ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 0) and (ways[i-1][1] == 1) and (ways[i-1][2] == 1):\n            ways[i][0] = ways[i-1][2] + ways[i-1][0] + ways[i-1][1]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 1):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0]\n        elif (ways[i-1][0] == 0) and (ways[i-1][1] == 1) and (ways[i-1][2] == 2):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 2):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 3):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 4):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 0) and (ways[i-1][1] == 1) and (ways[i-1][2] == 4):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 0) and (ways[i-1][1] == 1) and (ways[i-1][2] == 5):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2]\n        elif (ways[i-1][0] == 0) and (ways[i-1][1] == 1) and (ways[i-1][2] == 6):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 0) and (ways[i-1][1] == 1) and (ways[i-1][2] == 7):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 0):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 1):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 2):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2]\n        elif (ways[i-1][0] == 1) and (ways[i-1][1] == 1) and (ways[i-1][2] == 3):\n            ways[i][0] = ways[i-1][2] + ways[i-1][1] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1][2] + ways[i-1][0] + ways[i-1]["
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    import math\n    \n    if k == 0:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    if n == 2 and k == 2:\n        return count\n    elif n == 2 or k == 2:\n        return count + 1\n    elif n == 3:\n        return count + 1 + count_no_of_ways(n-1, k)\n    elif n == 4:\n        return count + 1 + count_no_of_ways(n-3, k)\n    elif n == 5:\n        return count + 1 + count_no_of_ways(n-5, k)\n    elif k == 2:\n        return count + 1 + count_no_of_ways(n, k-2)\n    elif k == 3:\n        return count + 1 + count_no_of_ways(n, k-3)\n    else:\n        return count + count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k-2) + count_no_of_ways(n-1, k-3)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    elif k == 0 or k == 1:\n        return n\n    else:\n        return int(n/2 - k) + count_no_of_ways(n - 2, k - 1) \n        \nprint(count_no_of_ways(7, 2))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # return the number of ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    assert n >= 2, \"n should be greater than 2\"\n    assert k >= 1, \"k should be greater than 0\"\n    \n    # Base Case : k = 1\n    if n == 1:\n        return 1\n    \n    # Step 1 : find all possible ways (for all positions : x,y,z)\n    ways = {}\n    for x in range(n):\n        ways[(x,x)] = 0\n    for y in range(n):\n        ways[(y,y)] = 1\n    for z in range(n):\n        ways[(z,z)] = 2\n    \n    # Step 2 : calculate ways for every position\n    for x in range(n):\n        for y in range(n):\n            for z in range(n):\n                if x == y or x == z or y == z:\n                    continue\n                if x == y == z == 0:\n                    continue\n                ways[(x,y,z)] += ways[(x,y,z-1)] + ways[(x,y,z+1)] + ways[(x,z,y)] + ways[(x,z,y)]\n    \n    # Step 3 : return the value of the possible ways for the fence with k = 2\n    return ways[(n-1,n-1,n-1)]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(k, height):\n        if height == 0 or k == 0 or n == 0:\n            return 1\n        if k == 1:\n            return height + count_ways(k, height-1)\n        return count_ways(k-1, height-1) + count_ways(k, height-1)\n        \n    return count_ways(k, n-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    for i in range(1, n+1):\n        for j in range(k):\n            if (i-j)%2:\n                ways += 1\n    return ways\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #if the input is an integer number\n    if type(n) == int:\n        #if the input is less than zero\n        if n < 0:\n            #display only positive numbers\n            if n > 0:\n                print(\"Invalid Input\")\n            #if the input is greater than zero\n            else:\n                print(\"Negative Input\")\n        else:\n            #number is greater than zero\n            if n > 0:\n                print(\"Invalid Input\")\n            #if the input is less than zero\n            else:\n                print(\"Positive Input\")\n    else:\n        #input is not a number\n        print(\"Invalid Input\")\n        #display the error message\n        print(\"Error\")\n    #if the input is not negative\n    if type(m) == int:\n        #if the input is less than zero\n        if m < 0:\n            #display only negative numbers\n            if m > 0:\n                print(\"Invalid Input\")\n            #if the input is greater than zero\n            else:\n                print(\"Negative Input\")\n        else:\n            #number is greater than zero\n            if m > 0:\n                print(\"Invalid Input\")\n            #if the input is less than zero\n            else:\n                print(\"Positive Input\")\n    else:\n        #input is not a number\n        print(\"Invalid Input\")\n        #display the error message\n        print(\"Error\")\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = 0\n    i = 1\n    j = 0\n    \n    while(i <= n and j <= m):\n        if(n%i == 0):\n            result += i\n        i+=1\n        j+=1\n        \n    return result\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m: # if n is greater than m\n        a = n\n        b = m\n        while a > 0:\n            a = a // 10\n            b = b // 10\n        return b\n    else:\n        return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n <= 0 or m <= 0:\n        return -1\n    else:\n        quotient = n // m\n        if n % m == 0:\n            return quotient\n        else:\n            return find(n%m, m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    else:\n        while True:\n            temp = n%m\n            if temp == 0:\n                return m\n            else:\n                n = temp\n                m = m/m"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Your code here\n    #Write your code here\n    pass\n    #------------------Q1-------------------------\n    #Find a way to do it in any other Python language as you can think of it.\n    #Pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q2-------------------------\n    #Pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q3-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q4-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q5-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q6-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q7-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q8-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q9-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q10-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q11-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q12-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q13-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q14-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q15-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q16-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q17-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q18-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q19-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q20-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q21-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q22-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q23-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q24-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q25-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q26-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q27-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q28-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q29-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q30-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q31-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q32-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q33-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q34-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q35-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q36-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q37-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q38-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q39-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q40-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q41-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q42-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q43-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q44-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q45-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q46-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q47-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q48-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q49-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q50-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q51-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q52-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q53-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q54-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q55-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q56-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q57-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q58-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q59-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q60-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q61-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q62-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q63-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q64-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q65-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q66-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q67-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q68-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q69-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q70-------------------------\n    #pass the two numbers to the function and make sure the result is an integer.\n    #------------------Q71-------------------------\n    #pass th"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        n,m=m,n\n    if n==0 and m==0:\n        return -1\n    elif n==0:\n        return n\n    else:\n        return n//m\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m: #if n is greater than m\n        n,m = m,n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=m:\n        return n\n    else:\n        return m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = []\n    a = n%10\n    b = m%10\n    for i in range(1,n//10+1):\n        if a%i == 0:\n            result.append(i)\n            a = n//10\n    for j in range(1,m//10+1):\n        if b%j == 0:\n            result.append(j)\n            b = m//10\n    if a%10 > b%10:\n        result.append(a%10)\n    else:\n        result.append(b%10)\n    return result\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w_sides = w/2\n    h_sides = h/2\n    if w_sides < h_sides:\n        return w_sides\n    return h_sides\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # find area of triangle\n    area = (math.pi*(w/2))*(h/2)\n    # find base of triangle\n    base = (math.pi*(w/2))\n    # find area of triangle\n    area_3 = area*3\n    # find angle of base\n    angle_3 = (math.degrees(math.asin(area_3/base)))\n    # find second side\n    side_2 = h/2\n    # find second area of triangle\n    area_2 = (math.pi*(side_2/2))*(side_2/2)\n    # find second base\n    base_2 = (math.pi*(side_2/2))\n    # find second angle\n    angle_2 = (math.degrees(math.asin(area_2/base_2)))\n    # find second side\n    side_1 = w/2\n    # find second area of triangle\n    area_1 = (math.pi*(side_1/2))*(side_1/2)\n    # find second base\n    base_1 = (math.pi*(side_1/2))\n    # find second angle\n    angle_1 = (math.degrees(math.asin(area_1/base_1)))\n    \n    return angle_3,angle_2,angle_1,side_2,side_1,side_2,side_1,area_3,area_2,area_1,base_2,base_1,base_2,base_1,area_2,area_1,base_1,base_1,base_2,base_1,base_2,base_1,area_1,area_2,area_1,area_2,area_1\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    # find area of triangle\n    area = (math.pi*(w/2))*(h/2)\n    # find base of triangle\n    base = (math.pi*(w/2))\n    # find area of triangle\n    area_3 = area*3\n    # find angle of base\n    angle_3 = (math.degrees(math.asin(area_3/base)))\n    # find second side\n    side_2 = w/2\n    # find second area of triangle\n    area_2 = (math.pi*(side_2/2))*(side_2/2)\n    # find second base\n    base_2 = (math.pi*(side_2/2))\n    # find second angle\n    angle_2 = (math.degrees(math.asin(area_2/base_2)))\n    # find second side\n    side_1 = h/2\n    # find second area of triangle\n    area_1 = (math.pi*(side_1/2))*(side_1/2)\n    # find second base\n    base_1 = (math.pi*(side_1/2))\n    # find second angle\n    angle_1 = (math.degrees(math.asin(area_1/base_1)))\n    \n    return angle_3,angle_2,angle_1,side_1,side_1,side_2,side_1,area_3,area_2,area_1,base_2,base_1,base_2,base_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_2,area_1,area_"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(w>h):\n        print('The third side of the triangle is negative.')\n    elif(w==h):\n        print('The third side of the triangle is the same as the second side.')\n    else:\n        print('The third side of the triangle is the first side.')\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w<h:\n        # Calculate x value from y = h/2\n        y = h/2\n        x = (y - w)/(h/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # return w/2*h/math.sin(math.radians(45))\n    # print(w/2*h/math.sin(math.radians(45)))\n    return w/2*h/math.sin(math.radians(45))\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(w*w+h*h)\n    b=math.sqrt(w*h-a*a)\n    angle=math.acos((w**2+h**2-b**2)/(2*b*a))\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        if(w<h):\n            if(w<0.1 and h<0.1):\n                return 0.0\n            elif(w<0.6 and h<0.6):\n                return 1.0\n            elif(w<0.9 and h<0.9):\n                return 2.0\n            elif(w<1.2 and h<1.2):\n                return 3.0\n            elif(w<1.4 and h<1.4):\n                return 4.0\n            elif(w<1.7 and h<1.7):\n                return 5.0\n            elif(w<1.9 and h<1.9):\n                return 6.0\n            elif(w<1.2 and h<2.0):\n                return 7.0\n            elif(w<2.5 and h<2.5):\n                return 8.0\n            elif(w<2.7 and h<2.7):\n                return 9.0\n            elif(w<2.9 and h<2.9):\n                return 10.0\n            elif(w<2.2 and h<3.0):\n                return 11.0\n            elif(w<3.5 and h<3.5):\n                return 12.0\n            elif(w<3.7 and h<3.7):\n                return 13.0\n            elif(w<3.9 and h<3.9):\n                return 14.0\n            elif(w<3.2 and h<4.0):\n                return 15.0\n            elif(w<4.5 and h<4.5):\n                return 16.0\n            elif(w<4.7 and h<4.7):\n                return 17.0\n            elif(w<4.9 and h<4.9):\n                return 18.0\n            elif(w<4.2 and h<5.0):\n                return 19.0\n            elif(w<5.5 and h<5.5):\n                return 20.0\n            elif(w<5.7 and h<5.7):\n                return 21.0\n            elif(w<5.9 and h<5.9):\n                return 22.0\n            elif(w<5.2 and h<6.0):\n                return 23.0\n            elif(w<6.5 and h<6.5):\n                return 24.0\n            elif(w<6.7 and h<6.7):\n                return 25.0\n            elif(w<6.9 and h<6.9):\n                return 26.0\n            elif(w<6.2 and h<7.0):\n                return 27.0\n            elif(w<7.5 and h<7.5):\n                return 28.0\n            elif(w<7.7 and h<7.7):\n                return 29.0\n            elif(w<7.9 and h<7.9):\n                return 30.0\n            elif(w<7.2 and h<8.0):\n                return 31.0\n            elif(w<8.5 and h<8.5):\n                return 32.0\n            elif(w<8.7 and h<8.7):\n                return 33.0\n            elif(w<8.9 and h<8.9):\n                return 34.0\n            elif(w<8.2 and h<9.0):\n                return 35.0\n            elif(w<9.5 and h<9.5):\n                return 36.0\n            elif(w<9.7 and h<9.7):\n                return 37.0\n            elif(w<9.9 and h<9.9):\n                return 38.0\n            elif(w<9.2 and h<10.0):\n                return 39.0\n            elif(w<10.5 and h<10.5):\n                return 40.0\n            elif(w<10.7 and h<10.7):\n                return 41.0\n            elif(w<10.9 and h<10.9):\n                return 42.0\n            elif(w<10.2 and h<11.0):\n                return 43.0\n            elif(w<11.5 and h<11.5):\n                return 44.0\n            elif(w<11.7 and h<11.7):\n                return 45.0\n            elif(w<11.9 and h<11.9):\n                return 46.0\n            elif(w<11.2 and h<12.0):\n                return 47.0\n            elif(w<12.5 and h<12.5):\n                return 48.0\n            elif(w<12.7 and h<12.7):\n                return 49.0\n            elif(w<12.9 and h<12.9):\n                return 50.0\n            elif(w<12.2 and h<13.0):\n                return 51.0\n            elif(w<13.5 and h<13.5):\n                return 52.0\n            elif(w<13.7 and h<13.7):\n                return 53.0\n            elif(w<13.9 and h<13.9):\n                return 54.0\n            elif(w<13.2 and h<14.0):\n                return 55.0\n            elif(w<14.5 and h<14.5):\n                return 56.0\n            elif(w<14.7 and h<14.7):\n                return 57.0\n            elif(w<14.9 and h<14.9):\n                return 58.0\n            elif(w<14.2 and h<15.0):\n                return 59.0\n            elif(w<15.5 and h<15.5):\n                return 60.0\n            elif(w<15.7 and h<15.7):\n                return 61.0\n            elif(w<15.9 and h<15.9):\n                return 62.0\n            elif(w<15.2 and h<16.0):\n                return 63.0\n            elif(w<16.5 and h<16.5):\n                return 64.0\n            elif(w<16.7 and h<16.7):\n                return 65.0\n            elif(w<16.9 and h<16.9):\n                return 66.0\n            elif(w<16.2 and h<17.0):\n                return 67.0\n            elif(w<17.5 and h<17.5):\n                return 68.0\n            elif(w<17.7 and h<17.7):\n                return 69.0\n            elif(w<17.9 and h<17.9):\n                return 70.0\n            elif(w<17.2 and h<18.0):\n                return 71.0\n            elif(w<18.5 and h<18.5):\n                return 72.0\n            elif(w<18.7 and h<18.7):\n                return 73.0\n            elif(w<18.9 and h<18.9):\n                return 74.0\n            elif(w<18.2 and h<19.0):\n                return 75.0\n            elif(w<19.5 and h<19.5):\n                return 76.0\n            elif(w<19.7 and h<19.7):\n                return 77.0\n            elif(w<19.9 and h<19.9):\n                return 78.0\n            elif(w<19.2 and h<20.0):\n                return 79.0\n            elif(w<20.5 and h<20.5):\n                return 80.0\n            elif(w<20.7 and h<20.7):\n                return 81.0\n            elif(w<20.9 and h<20.9):\n                return 82.0\n            elif(w<20.2 and h<21.0):\n                return 83.0\n            elif(w<21.5 and h<21.5):\n                return 84.0\n            elif(w<21.7 and h<21.7):\n                return 85.0\n            elif(w<21.9 and h<21.9):\n                return 8"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w*h)/2\n    b = (w*h)/2\n    c = math.sqrt(a**2+b**2)\n    print(\"the third side of a right angle triangle is: \",c)\n    \ndef otherside_rightanglediament(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w*h)/2\n    b = (w*h)/2\n    c = math.sqrt(a**2+b**2)\n    print(\"the third side of a right angled triangle is: \",c)\n    print(\"the third side of a right angled triangle is: \",c)\n    \ndef side(w,h):\n    '''\n    Write a function to find the length of a triangle.\n    '''\n    a = (w*h)/2\n    b = math.sqrt(a**2+h**2)\n    print(\"the length of a triangle is: \",b)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(w*w+h*h)\n    b=math.sqrt((w+h)/2*w*h)\n    c=math.sqrt((w+h)/2*w*h*2)\n    if a==b and b==c:\n        return True\n    elif a==b or a==c or b==c:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_1 = math.sqrt(w**2 + h**2)\n    side_2 = math.sqrt(h**2 + w**2)\n    side_3 = math.sqrt(h**2 + w**2)\n    \n    if (side_1/2) > side_2 and (side_1/2) > side_3:\n        return side_1/2\n    elif (side_2/2) > side_1 and (side_2/2) > side_3:\n        return side_2/2\n    elif (side_3/2) > side_1 and (side_3/2) > side_2:\n        return side_3/2\n    else:\n        return side_1/2\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in listval:\n        if i > maxval:\n            maxval = i\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) <= 0:\n        return None\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=0\n    for item in listval:\n        if item>maxval:\n            maxval=item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) < 2:\n        return None\n    else:\n        max_val = listval[0]\n        for i in listval:\n            if i > max_val:\n                max_val = i\n        return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if(len(listval) == 1):\n        return listval[0]\n    else:\n        index = 0\n        m = listval[0]\n        for i in range(1, len(listval)):\n            if(listval[i] < m):\n                index = i\n                m = listval[i]\n        return m\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number%i==0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for x in range(1, number+1):\n        if number % x == 0:\n            divisors.append(x)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number + sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0 or number == 1:\n        return number\n    else:\n        return number % sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number % 2 == 0:\n        return 4\n    if number % 2 == 1:\n        return 5\n    for i in range(1,number//2 + 1):\n        if number % i == 0:\n            return i\n    return 5\n    \n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([d for d in range(1, number) if number % d == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # number must be a positive whole number\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(0,len(arr)):\n        inv = inv + 1 - arr[i]\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr) - i - 1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            inv += 1\n            arr[i + 1], arr[i] = arr[i], arr[i + 1]\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inversions+=1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv = 0\n    for i in range(0, len(arr)):\n        if arr[i] > arr[i + 1]:\n            Inv = Inv + 1\n    return Inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2: \n        return len(arr)\n    #print('Checking the inversion count...')\n    i=0\n    #print(arr)\n    while(i < len(arr)):\n        for j in range(i, len(arr)): \n            # print(arr[j])\n            #print(arr[j])\n            if(arr[j] < arr[i]):\n                #print('Not less')\n                arr[i], arr[j] = arr[j], arr[i]\n                #print('Swap')\n                i=j\n                j+=1\n            elif(arr[j] > arr[i]):\n                #print('Less')\n                arr[i], arr[j] = arr[j], arr[i]\n                i=j\n        i+=1\n    return i\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # invert the array\n    arr[::-1]\n    # count the inversions\n    inv = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j]>arr[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for num in arr: \n        if num == num[::-1]:\n            inv_count += 1\n    return inv_count\n    \ndef get_median_subarray(arr):\n    '''\n    Write a python function to get the median of an array.\n    '''\n    avg = len(arr) // 2\n    if len(arr)%2 == 0:\n        return (arr[avg] + arr[avg + 1])/2\n    return arr[avg]\n    \ndef get_majority_element(arr):\n    '''\n    Write a python function to find the majority element.\n    '''\n    count = 0\n    for num in arr: \n        if num % 2 == 1: \n            count += 1\n    if count > len(arr) / 2:\n        return num\n    else:\n        return num\n    \ndef get_unique_elements(arr):\n    '''\n    Write a python function to get the unique elements in an array.\n    '''\n    arr_set = set(arr)\n    unique_arr = list(arr_set)\n    return unique_arr\n    \ndef get_pivot_index(arr, pivot_element):\n    '''\n    Write a python function to get the index of a pivot element in an array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (low + high) // 2\n        if arr[mid] == pivot_element: \n            return mid \n        elif arr[mid] > pivot_element: \n            high = mid - 1\n        else: \n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    if isinstance(list1, list):\n        new_list = []\n        for l in list1:\n            new_list.extend(flatten_list(l))\n        return new_list\n    else:\n        return [list1]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        flattened_list = []\n        for item in list1:\n            if type(item) is list:\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) <= 1:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == list:\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # If a given list is empty, return nothing.\n    if not list1:\n        return list1\n    \n    # Base case\n    if type(list1) == list:\n        flattened = [flatten_list(elem) for elem in list1]\n        return flattened\n    \n    # Loop through list\n    else:\n        return list(flatten_list(list1[0])) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if isinstance(element, (list, tuple)):\n            result += flatten_list(element)\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = 0\n    for tupl in stdata:\n        agg = max(agg, tuple[1])\n    return agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def compare_tuples(T1, T2):\n        return (T1[0] < T2[0]) and (T1[1] > T2[1])\n    return max(stdata, key=compare_tuples)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for tup in stdata:\n        if max_aggregate < tup[1]:\n            max_aggregate = tup[1]\n    return max_aggregate\ndef get_intervals(stdata):\n    '''\n    Return the intervals of the given list of tuples.\n    '''\n    intervals = []\n    for tup in stdata:\n        intervals.append((tup[0], tup[1]))\n    return intervals\ndef get_buckets(stdata):\n    '''\n    Return the bucketized intervals of the given list of tuples.\n    '''\n    buckets = defaultdict(list)\n    for tup in stdata:\n        buckets[tup[0]].append(tup[1])\n    return buckets\ndef generate_intervals(buckets):\n    '''\n    Return the interval in lists of intervals of the given buckets.\n    '''\n    intervals = []\n    for bucket in buckets:\n        intervals.append([bucket, bucket, max_aggregate(buckets[bucket])])\n    return intervals\ndef generate_buckets(intervals):\n    '''\n    Return the bucketized intervals in lists of intervals of the given intervals.\n    '''\n    buckets = defaultdict(list)\n    for tup in intervals:\n        buckets[tup[0]].append(tup[1])\n    return buckets\ndef get_stats(buckets):\n    '''\n    Return the statistics of the given bucketized intervals.\n    '''\n    stats = {}\n    for bucket in buckets:\n        stats[bucket] = len(buckets[bucket])\n    return stats\ndef get_intervals_stats(buckets):\n    '''\n    Return the statistics of the given bucketized intervals.\n    '''\n    intervals = get_intervals(buckets)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef get_buckets_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    buckets = get_buckets(intervals)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef get_intervals_stats(buckets):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    intervals = get_intervals(buckets)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef get_buckets_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    buckets = get_buckets(intervals)\n    stats = get_stats(buckets)\n    return stats, intervals\ndef is_valid_interval(interval):\n    '''\n    Return True if the interval is valid and False otherwise.\n    '''\n    return interval[0] < interval[1]\ndef is_valid_bucket(bucket):\n    '''\n    Return True if the bucket is valid and False otherwise.\n    '''\n    return len(bucket) == 2 and 0 <= bucket[0] and bucket[0] < bucket[1]\ndef is_valid_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '''\n    for key, value in stats.items():\n        if not is_valid_interval(key):\n            return False\n        if not isinstance(value, int) or value <= 0:\n            return False\n    return True\ndef is_valid_intervals(intervals):\n    '''\n    Return True if the intervals is valid and False otherwise.\n    '''\n    for interval in intervals:\n        if not is_valid_interval(interval):\n            return False\n    return True\ndef is_valid_buckets(buckets):\n    '''\n    Return True if the buckets is valid and False otherwise.\n    '''\n    for bucket in buckets:\n        if not is_valid_bucket(bucket):\n            return False\n    return True\ndef is_valid_intervals_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '''\n    for stats_key, stats_value in stats.items():\n        if not isinstance(stats_value, int):\n            return False\n        if not is_valid_interval(stats_key):\n            return False\n    return True\ndef is_valid_buckets_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '''\n    for stats_key, stats_value in stats.items():\n        if not isinstance(stats_value, int):\n            return False\n        if not is_valid_bucket(stats_key):\n            return False\n    return True\ndef get_buckets_stats(buckets):\n    '''\n    Return the statistics of the given bucketized intervals.\n    '''\n    stats = get_stats(buckets)\n    return stats\ndef get_intervals_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    stats = get_stats(intervals)\n    return stats\ndef get_buckets_stats(intervals):\n    '''\n    Return the statistics of the given interval bucketized intervals.\n    '''\n    stats = get_stats(intervals)\n    return stats\ndef print_intervals(intervals):\n    '''\n    Print the intervals in a nice way.\n    '''\n    if intervals == []:\n        return\n    for interval in intervals:\n        print(\"(\", end=\"\")\n        print(\",\".join(map(str, interval)), end=\"\")\n        print(\", max_aggregate=\" + str(max_aggregate(interval)))\n    print(\")\")\ndef print_buckets(buckets):\n    '''\n    Print the buckets in a nice way.\n    '''\n    if buckets == []:\n        return\n    for bucket in buckets:\n        print(\"(\" + str(bucket[0]) + \",\" + str(bucket[1]) + \")\", end=\"\")\n    print(\")\")\ndef print_buckets_stats(buckets):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if buckets == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(buckets)\n    print(\"Intervals:\")\n    print_intervals(buckets)\ndef print_buckets_stats(stats):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(stats)\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_intervals_stats(stats):\n    '''\n    Print the intervals statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_buckets_stats(stats):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(stats)\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_intervals_stats(stats):\n    '''\n    Print the intervals statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef print_buckets_stats(stats):\n    '''\n    Print the buckets statistics in a nice way.\n    '''\n    if stats == []:\n        return\n    print(\"Bucketized intervals:\")\n    print(stats)\n    print(\"Intervals:\")\n    print_intervals(stats)\ndef is_valid_bucket(bucket):\n    '''\n    Return True if the bucket is valid and False otherwise.\n    '''\n    return bucket[0] < bucket[1]\ndef is_valid_buckets(buckets):\n    '''\n    Return True if the buckets is valid and False otherwise.\n    '''\n    for bucket in buckets:\n        if not is_valid_bucket(bucket):\n            return False\n    return True\ndef is_valid_stats(stats):\n    '''\n    Return True if the stats is valid and False otherwise.\n    '"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Read in data for use\n    max_aggregate_data = defaultdict(int)\n    for x in stdata:\n        max_aggregate_data[x[0]] = max(x[1], max_aggregate_data[x[0]])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    l = len(stdata)\n    # to be solved, we need to calculate the maximum aggregated value (a) \n    for i in range(l):\n        #print(i)\n        for j in range(i):\n            #print(j)\n            #print(stdata[i][j])\n            a = stdata[i][j]\n            b = stdata[j][i]\n            #print(a,b)\n            if a > b:\n                stdata[i][j] = a\n            else:\n                stdata[j][i] = b\n    print(stdata)\n    return max(stdata, key=len)\ndef find_key_indices(list_of_tuples):\n    '''\n    To find the indexes of the tuples in the list of tuples.\n    '''\n    keys = []\n    for i in range(len(list_of_tuples)):\n        #print(i)\n        for j in range(len(list_of_tuples)):\n            #print(j)\n            if list_of_tuples[i] == list_of_tuples[j]:\n                #print(i,j)\n                keys.append(i)\n                keys.append(j)\n    print(keys)\n    return keys\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #print(stdata)\n    count = len(stdata)\n    max_agg = 0\n    for key in stdata[0]:\n        #print(key, stdata[0][key])\n        agg = stdata[0][key]\n        #print(agg)\n        if agg > max_agg:\n            max_agg = agg\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggreg = 0\n    for item in stdata:\n        aggreg += item[0]\n    return aggreg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the aggregate\n    aggregates = defaultdict(list)\n    # for each tuple in the list\n    for tup in stdata:\n        # append the tuple to the aggregate\n        aggregates[tup[0]].append(tup[1])\n    # return the maximum aggregate\n    return max(aggregates.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = stdata.copy()\n    def f(e):\n        if e[2]!='s':\n            return e\n        else:\n            return f(e[0])\n    for e in stdata:\n        e[2] = f(e)\n    return max(stdata, key=lambda e: e[2])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    max = 0\n    for x in stdata:\n        if x[1] > max:\n            max = x[1]\n    return max\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #get the length\n    n = int(n)\n    l = n\n    #make an array to store the sum of last n bits\n    arr = [0 for i in range(0,n)]\n    arr[n] = 1\n    #base case\n    if(n == 1):\n        return 1\n    elif(n == 2):\n        return 2\n    #iterate till l-1\n    while(l > 0):\n        #create an array to store the last n bits of current number\n        x = []\n        #iterate till last n bits and store it to x\n        for i in range(0,l-1):\n            x.append(arr[i] + arr[l-i-1])\n        #compare the sum of the last n bits to the sum of last two bits\n        sum = x[l-1] - x[l-2]\n        #if the sum is same as the last two bits, we add it to the array\n        if(sum == arr[l-2]):\n            arr[l-1] = 1\n            arr[l-2] = 0\n            l-=2\n        #if there is no last two bits, we keep adding it\n        else:\n            l -= 1\n    #return the count\n    return arr.count(1)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if(n <= 1):\n        return 1\n    if(n == 2):\n        return 2\n    for i in range(2,n):\n        #print(i)\n        #print(bin(i)[2:])\n        if(bin(i)[2:].count(\"1\") == bin(i)[2:].count(\"1\")):\n            #print(bin(i)[2:])\n            #print(bin(i)[2:].count(\"1\"))\n            return bin(i)[2:].count(\"1\")\n    return 0\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n    "
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 2:\n        return None\n    else:\n        x = n\n        sum1 = 0\n        sum2 = 0\n        result = []\n        while x!= 0:\n            if x % 2 == 1:\n                result.append(x)\n            else:\n                sum2 += x\n            x = x//2\n        if sum2 == sum1:\n            for i in range(len(result)-1):\n                result[i] += result[i+1]\n            result[-1] += result[0]\n        else:\n            print(result)\n        return result\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_0 = 0\n    max_1 = 0\n    \n    # find max of both first n bits\n    for i in range(n):\n        max_0 = max(max_0, n - i)\n        count_0 += n - i - 1\n    # find max of last n bits\n    for i in range(n):\n        max_1 = max(max_1, n - i)\n        count_1 += i\n        \n    # compare max of first n bits with max of last n bits\n    # for i in range(n):\n    #     if max_0 == 0 or count_0 == 0:\n    #         continue\n    #     else:\n    #         count_0 -= 1\n    #         count_0 += 1\n    #         if max_1 == 0 or count_1 == 0:\n    #             continue\n    #         else:\n    #             count_1 -= 1\n    #             count_1 += 1\n        \n    # return max_0 + max_1 - 2 * count_0 - count_1\n    return max_0 + max_1 - count_0 - count_1\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<2: \n        return 0\n    s = 0\n    while n>0: \n        s = s + n & 1\n        n >>= 1\n    return s\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    for i in range(n):\n        if n % 2 == 0:\n            print(0, end = \"\")\n        else:\n            print(1, end = \"\")\n    print(0)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    max_value = n+1\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, max_value, 2):\n        count += count_binary_seq(i)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def binary_add(a,b):\n        temp = 0\n        while a!=0:\n            temp = (a & 1) * 2 + temp\n            a = a >> 1\n        while b!=0:\n            temp = (b & 1) * 2 + temp\n            b = b >> 1\n        return temp\n    \n    result = 0\n    for i in range(n):\n        temp = binary_add(0,i)\n        result += temp\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    for i in range(2**n):\n        x=bin(i)[2:]\n        j=len(x)\n        sum=0\n        for i in x:\n            sum+=int(i)\n        if (sum==(2**n-1)):\n            count+=1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) == dict:\n        depth = 1\n    else:\n        depth = 0\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i, v in enumerate(d):\n        depth += 1\n        if i == len(d) - 1:\n            break\n        if d[i] == d[i + 1]:\n            depth -= 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # write your code here\n    if len(d)==0:\n        return -1\n    if d[0]=='$':\n        return 0\n    if d[0]=='{' or d[0]=='[' or d[0]=='(' or d[0]=='{':\n        return dict_depth(d[1:-1])+1\n    return 1+dict_depth(d[1:])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1\n    elif isinstance(d, str):\n        return 0\n    else:\n        return -1"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(n, d):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 1 + depth(n-1, d)\n    return depth(len(d), d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            d_depth += 1\n    return d_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    n = len(d)\n    def depth(d):\n        '''\n        Find the depth of dictionary d.\n        '''\n        return 1 + max([depth(i) for i in d])\n    return depth(d)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotation = 0 \n    while rotation < len(rotations):\n        if ranges[rotation][index] == True:\n            for i in range(len(arr)):\n                if i == index:\n                    return arr[rotation]\n                if arr[i] > arr[index] and ranges[rotation][i] == False:\n                    return arr[rotation]\n                elif arr[i] < arr[index] and ranges[rotation][i] == True:\n                    return arr[rotation]\n        rotation+=1\n    return False\n        \ndef main() : \n    '''\n    Function to find a range of values given by the user.\n    '''\n    start = int(input(\"Start value : \"))\n    end = int(input(\"End value : \"))\n    rotations = input(\"Rotations : \")\n    ranges = []\n    for i in range(len(rotations)) :\n        if rotations[i].isdigit() == False:\n            print(\"Not a valid rotation :\",rotations[i])\n            return False\n        ranges.append([False,False,False,False])\n    for i in range(len(rotations)) :\n        if rotations[i].isdigit() == True:\n            rotations[i] = int(rotations[i])\n    for i in range(len(rotations)) :\n        if rotations[i] < start or rotations[i] > end :\n            print(\"Not a valid rotation :\",rotations[i])\n            return False\n    \n    # check if ranges[i][j] is true. If it is true then move\n    # i is the rotation counter. j is the index\n    # If it is true then move that index\n    for i in range(len(ranges)) :\n        if ranges[i][0] == False and ranges[i][1] == False and ranges[i][2] == False and ranges[i][3] == False :\n            ranges[i][1] = True\n            ranges[i][0] = True\n            ranges[i][3] = True\n            for j in range(len(ranges)) :\n                if ranges[j][0] == True:\n                    if ranges[j][1] == False:\n                        ranges[j][1] = True\n                    else:\n                        ranges[j][1] = False\n                if ranges[j][3] == True:\n                    if ranges[j][2] == False:\n                        ranges[j][2] = True\n                    else:\n                        ranges[j][2] = False\n                if ranges[j][2] == True and ranges[j][3] == False:\n                    if ranges[j][1] == True:\n                        ranges[j][1] = False\n                    else:\n                        ranges[j][1] = True\n                \n    # find the range of values and print it out\n    range = find_Element(ranges,ranges,rotations,start)\n    if range == False:\n        print(\"Invalid range :\",range)\n        return False\n    print(\"Range :\",range)\n    print(\"Original Range :\",ranges)\n    \n    # find the maximum value and print it out\n    max = 0\n    for i in range(len(ranges)) :\n        if ranges[i][0] == True and ranges[i][2] == True and ranges[i][3] == True :\n            max = i\n            break\n    max = find_Element(ranges,ranges,rotations,max)\n    print(\"Max value :\",max)\n    \n    # find the minimum value and print it out\n    min = 100000000\n    for i in range(len(ranges)) :\n        if ranges[i][0] == True and ranges[i][2] == True and ranges[i][3] == True :\n            min = i\n            break\n    min = find_Element(ranges,ranges,rotations,min)\n    print(\"Min value :\",min)\n    \n    # rotate the range and print it out\n    rotation = 0\n    for i in range(len(ranges)) :\n        if ranges[i][0] == True and ranges[i][2] == True and ranges[i][3] == True :\n            rotation+=1\n            print(\"Rotation\",rotation)\n            ranges[i][0] = rotate(ranges[i][0],rotation)\n            ranges[i][1] = rotate(ranges[i][1],rotation)\n            ranges[i][2] = rotate(ranges[i][2],rotation)\n            ranges[i][3] = rotate(ranges[i][3],rotation)\n    print(\"Final Range :\",ranges)\n    \nmain()"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #calls function\n    rotations=int(rotations)\n    rotations=rotations%(len(ranges))\n    for i in range(rotations):\n        x=rotate(arr,i)\n    return x\n    \ndef rotate(arr,rotation) :\n    '''\n    Write a python function to rotate a given array.\n    '''\n    temp=arr[:]\n    temp[rotation::]=arr[rotation::]\n    return temp\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    rotation_list = []\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #If element is found at beginning of input array, return true\n    if arr[ranges[0]] == index :\n        return True\n    elif arr[ranges[1]] == index :\n        return True\n    elif arr[ranges[0]] < index :\n        return find_Element(arr,ranges,rotations,index)\n    elif arr[ranges[0]] > index :\n        return find_Element(arr,ranges,rotations,index)\n    else :\n        return False\n    \ndef count_ranges(arr,ranges) :\n    '''\n    Write a python function to count element ranges.\n    '''\n    count = 0\n    for i in range(len(ranges)) :\n        if find_Element(arr,ranges,i,arr[ranges[i]]) :\n            count += 1\n    return count\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        ranges[index] = arr[ranges[index]]\n        index = index + 1\n    return ranges[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index>=len(ranges) or index<0) :\n        return -1\n    if index == 0 :\n        return ranges[0][1]\n    else :\n        return find_Element(arr,ranges,rotations,index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (ranges == None) :\n        return arr[index]\n    if (rotations == None) :\n        return arr[ranges[index]]\n    start_index = ranges[index]\n    end_index = ranges[index + 1]\n    if (index == end_index -1) :\n        return arr[ranges[index]]\n    mid_index = (start_index+end_index)//2\n    if (arr[mid_index] < arr[start_index]) :\n        if arr[mid_index] > arr[end_index] :\n            return find_Element(arr,ranges,rotations,mid_index)\n        else :\n            return find_Element(arr,ranges,rotations,end_index)\n    else :\n        if arr[mid_index] > arr[start_index] :\n            return find_Element(arr,ranges,rotations,start_index)\n        else :\n            return find_Element(arr,ranges,rotations,mid_index)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if (ranges[i][0]<=index) and (index<=ranges[i][1]) :\n            return arr[ranges[i][0]:ranges[i][1]+1]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges[0],ranges[1]):\n        for j in range(rotations):\n            if arr[i] == index :\n                return i,j\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr)==len(ranges)==len(rotations)==0 : return arr[index]\n    if index<0 : return arr[index]\n    elif index>=len(ranges) : return arr[ranges[index]]\n    elif rotations[index]>0:\n        return find_Element(arr,ranges,rotations,index-1)\n    else : return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0], words[-1]\ndef ends_withp(words):\n    '''\n    Write a function that returns a list of words where the second to last word is a p.\n    '''\n    return words[:-1], words[-1]\ndef ends_with(words):\n    '''\n    Write a function that returns a list of words where the first word is a p.\n    '''\n    return words[:-1], words[-1]\ndef ends_withq(words):\n    '''\n    Write a function that returns a list of words where the second to last word is a q.\n    '''\n    return words[:-1], words[-1]\ndef ends_withr(words):\n    '''\n    Write a function that returns a list of words where the first word is a r.\n    '''\n    return words[:-1], words[-1]\ndef ends_witht(words):\n    '''\n    Write a function that returns a list of words where the first word is a t.\n    '''\n    return words[:-1], words[-1]\ndef ends_withu(words):\n    '''\n    Write a function that returns a list of words where the first word is a u.\n    '''\n    return words[:-1], words[-1]\ndef starts_withq(words):\n    '''\n    Write a function that returns a list of words where the first word is a q.\n    '''\n    return words[1:-1], words[0]\ndef starts_withr(words):\n    '''\n    Write a function that returns a list of words where the first word is a r.\n    '''\n    return words[1:-1], words[0]\ndef starts_witht(words):\n    '''\n    Write a function that returns a list of words where the first word is a t.\n    '''\n    return words[1:-1], words[0]\ndef starts_withu(words):\n    '''\n    Write a function that returns a list of words where the first word is a u.\n    '''\n    return words[1:-1], words[0]\ndef ends_withq(words):\n    '''\n    Write a function that returns a list of words where the first word is a q.\n    '''\n    return words[:-1], words[-1]\ndef ends_withr(words):\n    '''\n    Write a function that returns a list of words where the first word is a r.\n    '''\n    return words[:-1], words[-1]\ndef ends_witht(words):\n    '''\n    Write a function that returns a list of words where the first word is a t.\n    '''\n    return words[:-1], words[-1]\ndef ends_withu(words):\n    '''\n    Write a function that returns a list of words where the first word is a u.\n    '''\n    return words[:-1], words[-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            return (words[i][1:], words[i][0])\n    return (words[0], 'p')\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = list()\n    p_list.append(words[0][0])\n    for i in range(1, len(words)):\n        if words[i][0] in p_list:\n            p_list.append(words[i][0])\n        else:\n            p_list.append(words[i][0] + 'p')\n    return p_list\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    s = set()\n    for w in words:\n        if w.startswith('p'):\n            s.add(w)\n    return list(s)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^[a-z]*p')\n    if pattern.match(words[0]):\n        word1 = words[0]\n        word2 = words[1]\n    else:\n        word1 = words[0].lower()\n        word2 = words[1].lower()\n    return word1, word2\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return ''.join(i for i in words if i[0] == 'p')\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:2] == \"p\":\n            res.append(word)\n    return res\ndef start_withp2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:3] == 'p':\n            res.append(word)\n    return res\ndef start_withp3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:4] == 'p':\n            res.append(word)\n    return res\ndef start_withp4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:5] == 'p':\n            res.append(word)\n    return res\ndef start_withp5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:6] == 'p':\n            res.append(word)\n    return res\ndef start_withp6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:7] == 'p':\n            res.append(word)\n    return res\ndef start_withp7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:8] == 'p':\n            res.append(word)\n    return res\ndef start_withp8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:9] == 'p':\n            res.append(word)\n    return res\ndef start_withp9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:10] == 'p':\n            res.append(word)\n    return res\ndef start_withp10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:11] == 'p':\n            res.append(word)\n    return res\ndef start_withp11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:12] == 'p':\n            res.append(word)\n    return res\ndef start_withp12(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:13] == 'p':\n            res.append(word)\n    return res\ndef start_withp13(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:14] == 'p':\n            res.append(word)\n    return res\ndef start_withp14(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:15] == 'p':\n            res.append(word)\n    return res\ndef start_withp15(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:16] == 'p':\n            res.append(word)\n    return res\ndef start_withp16(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:17] == 'p':\n            res.append(word)\n    return res\ndef start_withp17(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:18] == 'p':\n            res.append(word)\n    return res\ndef start_withp18(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:19] == 'p':\n            res.append(word)\n    return res\ndef start_withp19(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:20] == 'p':\n            res.append(word)\n    return res\ndef start_withp20(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:21] == 'p':\n            res.append(word)\n    return res\ndef start_withp21(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:22] == 'p':\n            res.append(word)\n    return res\ndef start_withp22(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:23] == 'p':\n            res.append(word)\n    return res\ndef start_withp23(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:24] == 'p':\n            res.append(word)\n    return res\ndef start_withp24(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:25] == 'p':\n            res.append(word)\n    return res\ndef start_withp25(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:26] == 'p':\n            res.append(word)\n    return res\ndef start_withp26(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:27] == 'p':\n            res.append(word)\n    return res\ndef start_withp27(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[:28] == 'p':\n            res.append(word)\n    return res\ndef start_withp28(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in word"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    lst = []\n    for word in words:\n        if word[0] == 'p':\n            lst.append(word)\n    return lst\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #for x in words:\n    #    if x[0] == 'p':\n    #        return x\n    #print(start_withp(['cat','dog','kitten','potted','cattie','pig','rat','rat']))\n    word_list = []\n    for word in words:\n        if word[0] == 'p':\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n-index:\n        return None\n    if index == n:\n        return a[k]\n    res = None\n    for i in range(index, n):\n        summ = a[index] + max_sum_increasing_subseq(a, n, i+1, k)\n        if summ > res:\n            res = summ\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base Cases\n    if n < k:\n        return a[n]\n    if n == 0 or a[n] == 0:\n        return a[n]\n    if a[n] > 0:\n        return a[n]\n    if a[n] == k:\n        return a[n]\n    if index >= n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    cur = a[index]\n    start_index = index\n    cur_sum = cur\n    for i in range(index, n, 1):\n        if cur < a[i] and cur_sum + (k - i) <= n:\n            cur_sum += a[i]\n            if i > 0:\n                start_index = i\n        else:\n            cur_sum = cur\n            start_index = i\n        if start_index > 0 and cur_sum + (k - i) >= n:\n            cur_sum = cur_sum + a[start_index]\n            if i < n - 1:\n                start_index = start_index - 1\n            else:\n                start_index = 0\n    return cur_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return a[k-1]\n    if(k >= len(a)):\n        return 0\n    if(a[k] > a[index]):\n        a[index] = a[k]\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return a[index]\n    elif(index < n):\n        k_i = k - index\n        return max(\n            a[index] + max_sum_increasing_subseq(a, n, index + 1, k_i),\n            a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max(\n            a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n            a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n            )\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n < index:\n        return None\n    \n    if index == 0:\n        return a[0]\n    \n    max_sum = 0\n    sub_seq = []\n    for i in range(n):\n        if i == index:\n            if k <= i:\n                return a[index]\n            else:\n                break\n        if k > i:\n            if a[i] > a[i+1]:\n                a[i+1] = a[i]\n                k -= 1\n                if k > 0:\n                    sub_seq.append(a[i+1])\n                    max_sum = max(max_sum, a[i+1] + max_sum_increasing_subseq(a, n-i, i, k))\n            else:\n                a[i] = a[i+1]\n                k -= 1\n                if k > 0:\n                    sub_seq.append(a[i+1])\n                    max_sum = max(max_sum, a[i+1] + max_sum_increasing_subseq(a, n-i, i, k))\n    a[index] = sub_seq.pop()\n    return max_sum\n    \na = [1,2,3,4,5]\nk = 2\nprint(max_sum_increasing_subseq(a, len(a), 0, k)"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    max_sum = -math.inf\n    while i < n and k >= 0:\n        if a[i] < a[i - 1]:\n            max_sum = max(max_sum, a[i - 1] + k)\n            k -= 1\n        else:\n            i += 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq_2(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    sum = 0\n    for i in range(k):\n        if i < index:\n            continue\n        sum += a[index - i]\n    return sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[n-1]\n    else:\n        sum_ascending_subseq = max(sum_ascending_subseq(a, n, index + 1, k), k + a[index])\n        sum_ascending_subseq = max(sum_ascending_subseq, a[index])\n        sum_ascending_subseq = max(sum_ascending_subseq, k + a[index + 1])\n        return sum_ascending_subseq\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return a[index]\n    if index == 0 or k == n:\n        return 0\n    elif index == n:\n        return a[n-1]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==n:\n        return tuplex\n    m,n=m,n\n    if m==0:\n        return tuplex[:n]\n    elif n==0:\n        return tuplex[n:]\n    else:\n        return colon_tuplex(tuplex[:n],m,n) + colon_tuplex(tuplex[n:],m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst_tuplex = deepcopy(tuplex)\n    for i in range(0,m):\n        for j in range(0,n):\n            lst_tuplex[i][j] = tuplex[i][j]\n    return lst_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex[0:2]\n    tuplex=[colon_tuplex(x,m,n) for x in tuplex]\n    if(len(tuplex)<2):\n        return tuplex\n    return tuplex[0]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        tuplex = (tuplex[0] + tuplex[1] + tuplex[2] + tuplex[3],tuplex[0],tuplex[1],tuplex[2],tuplex[3])\n        tuplex = tuplex[0:3] + tuplex[4:]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = [0]*m\n    for j in range(n):\n        new_tuplex[j] = tuplex[j][m-1]\n    return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i] for i in range(n))\ndef zip_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a zip of a tuple.\n    '''\n    return tuple(tuplex[i] for i in range(m,n))\ndef sort_tuplex(tuplex,m,n):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple(sorted(tuplex[i] for i in range(m,n)))\ndef sorted_tuplex(tuplex,m,n):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple(sorted(tuplex[i] for i in range(m,n)))\ndef palindrome_tuplex(tuplex,m,n):\n    '''\n    Write a function to check a tuple.\n    '''\n    return tuple(tuplex[i] for i in range(m,n))\ndef is_in(tuplex,s):\n    '''\n    Write a function to check if a tuple is in a list.\n    '''\n    return tuplex[s] in tuplex[1:s-1]\ndef sorted_tuplex(tuplex,m,n):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple(sorted(tuplex[i] for i in range(m,n)))\ndef sorted_tuplex_0(tuplex,m,n):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple(sorted(tuplex[i] for i in range(m,n)))\ndef len_tuplex(tuplex,m,n):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    return len(tuplex)\ndef is_one_word(tuplex,m,n):\n    '''\n    Write a function to check if a tuple is in a list.\n    '''\n    return tuplex[1:m-1] in tuplex[m-2:n-1]\ndef bfs_tuplex(tuplex,m,n,visited):\n    '''\n    Write a function to sort a tuple.\n    '''\n    s = sorted_tuplex(tuplex,m,n)\n    queue = [s]\n    visited[s[0]] = True\n    while len(queue) > 0:\n        s = queue.pop(0)\n        for i in range(n):\n            if visited[i] == False:\n                if i in s:\n                    s.append(i)\n                else:\n                    queue.append(i)\n    return s\ndef is_one_word_0(tuplex,m,n,visited):\n    '''\n    Write a function to check if a tuple is in a list.\n    '''\n    s = sorted_tuplex(tuplex,m,n)\n    queue = [s[0]]\n    visited[s[0]] = True\n    while len(queue) > 0:\n        s = queue.pop(0)\n        for i in range(len(s)):\n            if visited[i] == False:\n                if i in s:\n                    return False\n                else:\n                    queue.append(i)\n    return True\ndef bfs_tuplex_0(tuplex,m,n):\n    '''\n    Write a function to sort a tuple.\n    '''\n    s = sorted_tuplex(tuplex,m,n)\n    queue = [s[0]]\n    visited = [False] * len(s)\n    visited[0] = True\n    while len(queue) > 0:\n        s = queue.pop(0)\n        for i in range(len(s)):\n            if visited[i] == False:\n                if i in s:\n                    s.append(i)\n                else:\n                    queue.append(i)\n    return s\ndef split_tuplex(tuplex,n):\n    '''\n    Write a function to split a tuple.\n    '''\n    m,n = len(tuplex),len(tuplex[0])\n    return tuple(tuplex[i:i+n] for i in range(m-n))\ndef list_tuplex(tuplex,n):\n    '''\n    Write a function to return a list.\n    '''\n    return tuple(tuplex[i:i+n] for i in range(n))\ndef parse_tuplex(tuplex,m,n):\n    '''\n    Write a function to parse a tuple into a list.\n    '''\n    return tuple(tuplex[i] for i in range(m-n))\ndef reverse_tuplex(tuplex,n):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuple(sorted(tuplex[i] for i in range(n-1,-1,-1)))\ndef compare_tuplex(tuplex,m,n,s):\n    '''\n    Write a function to compare two tuples.\n    '''\n    return s == tuplex[m-n:m]\ndef len_list_tuplex(list_tuplex):\n    '''\n    Write a function to return the length of a list.\n    '''\n    return len(list_tuplex)\ndef remove_dups(list_tuplex):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return tuple(list_tuplex[i] for i in range(len(list_tuplex)))\ndef is_one_word_1(list_tuplex):\n    '''\n    Write a function to check if a tuple is in a list.\n    '''\n    return not list(list_tuplex[0])\ndef all_greater_equal(list_tuplex):\n    '''\n    Write a function to check if all elements in a list are equal.\n    '''\n    for x in range(len(list_tuplex)):\n        if list_tuplex[x]!= list(list_tuplex[0])[x]:\n            return False\n    return True\ndef all_equal(list_tuplex):\n    '''\n    Write a function to check if all elements in a list are equal.\n    '''\n    return len(list_tuplex) == len(list(list_tuplex[0]))\ndef word_comp(list_tuplex):\n    '''\n    Write a function to check if a list is a word.\n    '''\n    return True if all(word in list_tuplex for word in list_tuplex) else False\ndef check_list_tuplex(list_tuplex,list_tuplex_0):\n    '''\n    Write a function to check if a list is a word.\n    '''\n    return True if all(word in list_tuplex_0 for word in list_tuplex) else False\ndef check_word_tuplex(word_tuplex,word_tuplex_0):\n    '''\n    Write a function to check if a list is a word.\n    '''\n    return True if all(word in word_tuplex for word in word_tuplex) else False\ndef union_list_tuplex(list_tuplex,list_tuplex_0):\n    '''\n    Write a function to union a list of tuples into a list of tuples.\n    '''\n    return [tuplex for tuplex in list_tuplex if not tuplex in list_tuplex_0]\ndef create_full_list(list_tuplex):\n    '''\n    Write a function to create a full list of tuples from a list of tuples.\n    '''\n    return tuple(tuplex[i:i+len(tuplex)] for i in range(0,len(tuplex),len(tuplex[0])))\ndef create_full_word_list(word_tuplex):\n    '''\n    Write a function to create a full list of tuples from a list of tuples.\n    '''\n    return [wor"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + ['A'] + tuplex[m:n] + ['B'] + tuplex[n:m]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s = \"(\"\n    e = \")\"\n    s2 = \"(\"\n    e2 = \")\"\n    s3 = \"(\"\n    e3 = \")\"\n    if m == 0:\n        s = \"\"\n    else:\n        s = tuplex[0][0][0]\n    if n == 0:\n        e = \"\"\n    else:\n        e = tuplex[0][0][1]\n    s2 = s + e\n    s3 = s + s2\n    e2 = e + e2\n    e3 = e + e3\n    t = []\n    t.append(s3)\n    t.append(s2)\n    t.append(e3)\n    t.append(e2)\n    return t\ndef colon_tuplex_w3(tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s = \"(\"\n    e = \")\"\n    s2 = \"(\"\n    e2 = \")\"\n    s3 = \"(\"\n    e3 = \")\"\n    s4 = \"(\"\n    e4 = \")\"\n    if m == 0:\n        s = \"\"\n    else:\n        s = tuplex[0][0][0]\n    if n == 0:\n        e = \"\"\n    else:\n        e = tuplex[0][0][1]\n    s2 = s + e\n    s3 = s + s2\n    e2 = e + e2\n    e3 = e + e3\n    s4 = s + e4\n    e4 = e + e4\n    t = []\n    t.append(s3)\n    t.append(s2)\n    t.append(e3)\n    t.append(e2)\n    t.append(s4)\n    t.append(e4)\n    return t\ndef get_element_by_index(tuplex,i):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w2(tuplex,i):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w2_w3(tuplex,i):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w2_w3_w2(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w2_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w3_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w3_w2_w3_w2_w3_w3_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w2_w3_w2_w3_w3_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w3_w2_w3_w3_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w2_w3_w2_w3_w2_w3_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w2_w3_w2_w3_w3_w2_w3_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w3_w2_w3_w2_w3_w2_w3_w3_w2_w3_w3_w3_w2_w3_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w2_w3_w3_w2_w3_w2_w3_w3_w2_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]\n    return s\ndef get_element_by_index_w2_w3_w3_w2_w3_w2_w3_w3_w2_w3(tuplex):\n    '''\n    Write a function to get the element of a tuple at the given index.\n    '''\n    s = tuplex[0][0][i]"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    output = tuple(tuplex[i] for i in range(m-n+1))\n    output.reverse()\n    return output\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append([])\n        for j in range(n):\n            colon[i].append(tuplex[i][j])\n    return colon\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    l = len(nums1)\n    r = len(nums2)\n    \n    # Find the smallest and largest element in each list.\n    smallest = None\n    largest = None\n    \n    for i in range(l):\n        for j in range(r):\n            if smallest is None or nums1[i] < smallest:\n                smallest = nums1[i]\n                small_idx = i\n            if largest is None or nums2[j] > largest:\n                largest = nums2[j]\n                large_idx = j\n            \n    return (small_idx, large_idx)\n    "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    dp = []\n    for i in range(len(nums1)):\n        dp.append([])\n        for j in range(len(nums2)):\n            if i == 0:\n                dp[i].append(nums2[j] * nums1[i])\n            else:\n                if j == 0:\n                    dp[i].append(nums2[j] * nums1[i])\n                else:\n                    dp[i].append(nums2[j] * max(dp[i - 1][j], dp[i - 1][j - 1]))\n    return max(dp[N - 1])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return\n    \n    for i in range(1, N + 1):\n        if nums2[i - 1] > nums1[i - 1]:\n            return (i, len(nums1) + 1, nums1[i - 1])\n    return\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Product number is the product of all the elements of the first list\n    product_num = 1\n    # Pick a factor by choosing one of the elements of first list\n    for i in range(len(nums1)):\n        product_num = product_num * nums1[i]\n    # Pick a factor by choosing one of the elements of second list\n    for i in range(len(nums2)):\n        product_num = product_num * nums2[i]\n    return product_num\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #dictionary of products\n    products={}\n    \n    #define an empty dictionary\n    for n in range(N):\n        products[n+1]=[]\n        \n    #loop through given lists\n    for i in range(N):\n        for j in range(N):\n            if i!=j:\n                #add the product of i and j to products dictionary\n                products[i+1].append(nums1[i]*nums2[j])\n    #return the largest product\n    return max(products.values())"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    MAX_PRODUCT_COUNT = N\n    candidate_nums = []\n    largest_prod = 0\n    i = 0\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the largest number\n    max1, max2 = 0, 0\n    for i in range(0,N):\n        if nums1[i]>nums2[i]:\n            max1 = nums1[i]\n        else:\n            max2 = nums2[i]\n    # sort by number of elements\n    for i in range(0,N):\n        if nums1[i] > max2:\n            max1 = max2\n        if nums2[i] > max1:\n            max2 = max1\n    # find largest products\n    product = max1 * max2\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    L = len(nums1)\n    M = len(nums2)\n    if L * M > N:\n        return\n    if L == 0 or M == 0:\n        return\n    if L == 1:\n        return nums1 * nums2\n    elif M == 1:\n        return nums2 * nums1\n    else:\n        return nums1[:L] * nums2[:M] * nums1[L:] * nums2[M:]\n        # number = nums1[:L] * nums2[:M] * nums1[L:] * nums2[M:]\n        # number = nums1[:L] * nums2[:M] * nums2[L:] * nums1[M:]\n        # print(number)\n        # return number\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # numbers1 and nums2 is same size of the lists, so no need to check if their size is the same\n    if len(nums1)!= len(nums2):\n        return None\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    result = []\n    product = 1\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = product * (nums1[i] * nums2[j])\n        result.append(product)\n        product = 1\n    \n    return result\n    \ndef main():\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [10, 2, 3, 4, 5]\n    N = 4\n    print(large_product(nums1, nums2, N))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(a if a<b else b)\n    \n    \n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b==0:\n        return a\n    elif a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        greater=a\n    else:\n        greater=b\n    return greater\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if a>a:\n        a,b=b,a\n    if a>b:\n        a,b=b,a\n    if a>0:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if b<0:\n        print(\"your number must be positive or negative\")\n        return\n    if a==0:\n        print(a)\n        return a\n    elif a<0:\n        print(\"your number must be positive or negative\")\n        return\n    else:\n        if a%10==0:\n            print(a,\"is not a multiple of 10\")\n            return\n        else:\n            print(\"your number must be a multiple of 10\")\n            return\n        a=maximum(a,b%10)\n    \n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a==0:\n        return b\n    if b==0:\n        return a\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #Remove pass and write your logic here\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    c=a\n    if(b<a):\n        c=a\n        b=b-1\n    return c\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    a = str1\n    b = list(a)\n    for i in range(len(b)):\n        b[i] = b[i].upper()\n    return tuple(b)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    for i in str1:\n        tuple1.append(i)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip().upper()\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    for char in str1:\n        tup = tup + char,\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code here\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1_list = list(str1)\n    tuple_of_char = tuple(str1_list)\n    return tuple_of_char\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    str1 = str1.split()\n    for i in range(len(str1)):\n        str1[i] = list(str1[i])\n    return tuple(str1)\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    l = bin(n).replace('0b', '')\n    l = list(l)\n    # print(l)\n    if l[-1] == '0':\n        l.pop()\n    # print(l)\n    # print(len(l))\n    return int('0b'+''.join(l), 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"Setting unset bit at position:\", n)\n    # toggle unset bit\n    n &= ~0xFF\n    print(\"Old unset bit:\", bin(n))\n    print(\"New unset bit:\", bin(n | 0xFF))\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # increment bit by 1\n    n = n|1\n    # return result\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << n.bit_length())\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"Program started.\")\n    print(\"Asking the user for a set value.\")\n    print(\"  The value is:\")\n    print(\"\")\n    print(\"  * 1:     No unset bit set.\")\n    print(\"  * 0:     Unset bit set.\")\n    print(\"\")\n    print(\"  * 2:     Unset bit is set.\")\n    print(\"  * 3:     Unset bit is set.\")\n    print(\"  * 4:     Unset bit is set.\")\n    print(\"\")\n    print(\"  Please write a value for 1, 2, 3 or 4.\")\n    print(\"\")\n    val = int(input(\"  Value: \"))\n    print(\"\")\n    if val in range(1, 5):\n        set_bits_value = True\n    else:\n        print(\"\\tProgram cannot process.  Please try again.\")\n        print(\"\")\n        set_bits_value = False\n    print(\"\")\n    if set_bits_value:\n        print(\"* 1:     No unset bit set.\")\n        print(\"* 0:     Unset bit set.\")\n        print(\"* 2:     Unset bit is set.\")\n        print(\"* 3:     Unset bit is set.\")\n        print(\"* 4:     Unset bit is set.\")\n    else:\n        print(\"* 1:     No unset bit set.\")\n        print(\"* 0:     Unset bit set.\")\n        print(\"* 2:     Unset bit is set.\")\n        print(\"* 3:     Unset bit is set.\")\n        print(\"* 4:     Unset bit is set.\")\n    print(\"\")\n    print(\"\")\n    print(\"Program finished.\")\n    print(\"\")\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    return n & 0x80\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    temp = n\n    while (temp & 1)!= 0:\n        temp = (temp << 1) & 0xFFFFFFFF\n    return temp\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # TODO: Write your code here\n    print('Input:', n)\n    print('Output:', n&1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    if (n == 2):\n        n = 3\n    elif (n == 3):\n        n = 4\n    else:\n        n = 5\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # your code goes here\n    mask = 1\n    \n    #print(n)\n    for i in range(32,n-1):\n        #print(i)\n        mask = mask >> 1\n        #print(mask)\n    mask = mask | 1\n    #print(mask)\n    return mask\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a=math.pi*math.pow(r,2)\n    h=math.pi*h\n    b=a*(1/math.cos(h))\n    print('volume cone: ',b)\n    return b"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4 * math.pi * r**3) * h**3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 3.14*r*h*r\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * math.pow(r,2)*math.sin(math.radians(h))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    # y = r^3 - h^2 * r\n    y = math.pow(r,3)-(h*math.pow(r,2))\n    # compute y\n    while (y >= 0):\n        volume = volume + (y * math.pow(3,2))\n        y = y - 1\n    return volume\ndef height_cone(h):\n    '''\n    Write a function to find the height of a cone.\n    '''\n    return h\ndef height_cylinder(r,h):\n    '''\n    Write a function to find the height of a cylinder.\n    '''\n    return r*math.pow(h,2)\ndef distance_cone(r,h):\n    '''\n    Write a function to find the distance of a cone.\n    '''\n    return (h*math.pow(r,2))\ndef distance_cylinder(r,h):\n    '''\n    Write a function to find the distance of a cylinder.\n    '''\n    return (r*math.pow(h,2))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h**2)/4\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*(h**2)/2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 3*math.pi*(r**3)\ndef volume_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return h*volume_cone(r,h)\ndef volume_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return volume_cylinder(r,h)\ndef volume_cylinder_volume_pascal(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return volume_cylinder(r,h)**3\ndef volume_sphere_volume(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return volume_sphere(r,h)**3\ndef volume_sphere_volume_pascal(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return volume_sphere(r,h)**3\ndef volume_sphere_volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return volume_sphere(r,h)**3\ndef volume_sphere_volume_cylinder_pascal(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return volume_sphere(r,h)**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    #calculate the volume of a cone\n    for angle in range (0,360):\n        x = r * math.sin(math.radians(angle))\n        y = r * math.cos(math.radians(angle))\n        volume += x * y\n    return volume\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    volume = volume_cone(r,h)\n    #calculate the area of the cone\n    return volume * 4.0 * math.pi\ndef cone_circumference(r,h):\n    '''\n    Write a function to find the circumference of a cone.\n    '''\n    volume = volume_cone(r,h)\n    #calculate the circumference of the cone\n    return 2 * 3.14 * volume\ndef cone_to_triangle(r,h):\n    '''\n    Write a function to find the distance from a point to a triangle.\n    '''\n    #calculate the distance from a point to a triangle\n    v = cone_circumference(r,h)\n    #calculate the distance from a point to a triangle\n    c = (r * r) - (v * h)\n    #calculate the distance from a triangle to a point\n    d = (c * (h + r))\n    #calculate the angle between the triangle and the point\n    return math.acos(d)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*(4/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 2*math.pi*r*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    for i in range(2):\n        if r[i]*r[i] < h:\n            volume = volume + r[i]*r[i]\n        else:\n            volume = volume - (2*r[i]*r[i])\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n <= 0):\n        print(\"Invalid input.\\n\")\n    else:\n        if(n == 1):\n            print(n,\"is a power of 2.\")\n            return n\n        elif(n < 1):\n            print(\"Invalid input.\\n\")\n        else:\n            while(n >= 2):\n                if(n % 2 == 0):\n                    print(\"Invalid input.\\n\")\n                    n = n / 2\n                else:\n                    n = n * 3 + 1\n            print(\"Highest power of 2 is\",n)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = n; \n    if n < 2: \n        return num \n    else: \n        return highest_Power_of_2(n - 1) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return highest_Power_of_2(n // 2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    lst = []\n    for i in range(2,n):\n        if n%i == 0:\n            lst.append(i)\n    lst.sort()\n    return lst[-1]\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n == 0): \n        return 0\n    elif(n % 2!= 0): \n        return 1+ highest_Power_of_2(n/2)\n    else: \n        return highest_Power_of_2(n/2) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 2 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_2(n): \n    '''\n    Write a python function to find the lowest power of 2 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 2 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_3(n): \n    '''\n    Write a python function to find the highest power of 3 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 3 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_3(n): \n    '''\n    Write a python function to find the lowest power of 3 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 3 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_4(n): \n    '''\n    Write a python function to find the highest power of 4 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 4 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_4(n): \n    '''\n    Write a python function to find the lowest power of 4 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 4 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_5(n): \n    '''\n    Write a python function to find the highest power of 5 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 5 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_5(n): \n    '''\n    Write a python function to find the lowest power of 5 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 5 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_6(n): \n    '''\n    Write a python function to find the highest power of 6 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 6 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_6(n): \n    '''\n    Write a python function to find the lowest power of 6 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 6 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_7(n): \n    '''\n    Write a python function to find the highest power of 7 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 7 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_7(n): \n    '''\n    Write a python function to find the lowest power of 7 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 7 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_8(n): \n    '''\n    Write a python function to find the highest power of 8 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 8 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_8(n): \n    '''\n    Write a python function to find the lowest power of 8 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 8 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_9(n): \n    '''\n    Write a python function to find the highest power of 9 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 9 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_9(n): \n    '''\n    Write a python function to find the lowest power of 9 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 9 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_10(n): \n    '''\n    Write a python function to find the highest power of 10 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 10 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_10(n): \n    '''\n    Write a python function to find the lowest power of 10 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 10 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_11(n): \n    '''\n    Write a python function to find the highest power of 11 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 11 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_11(n): \n    '''\n    Write a python function to find the lowest power of 11 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 11 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_12(n): \n    '''\n    Write a python function to find the highest power of 12 that is less than or equal to n.\n    '''\n    print(\"Highest Power of 12 less than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef lowest_Power_of_12(n): \n    '''\n    Write a python function to find the lowest power of 12 that is greater than or equal to n.\n    '''\n    print(\"Lowest Power of 12 greater than or equal to n: \")\n    for i in range(1, n):\n        if (n % i) == 0:\n            print(i)\n            \ndef highest_Power_of_13(n): \n    '''\n    Write a python function to find the highest power of 13 that is less than or equal to n.\n    '''\n    print("
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #   First calculate the highest power of 2.\n    max_power = 0\n    for i in range(1, n+1):\n        max_power = max(max_power, i ** 2)\n    #   Then return the maximum of the numbers (2**power)\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def is_power_of_2(n): \n        '''\n        To find the power of 2 of a given number.\n        '''\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n < 1:\n            return 0\n        else:\n            return n*is_power_of_2(n-1)\n    return is_power_of_2(n)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 2:\n        return 2\n    elif n%2==0:\n        return n//2\n    elif n%2!=0:\n        return (n//2)**2\n    else:\n        return n//2+1\ndef highest_Power_of_3(n): \n    '''\n    Write a python function that returns the highest power of 3 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 3:\n        return 3\n    elif n%3==0:\n        return n//3\n    elif n%3!=0:\n        return n//3+1\n    else:\n        return n//3+2\ndef highest_power_of_4(n):\n    '''\n    Write a python function that returns the highest power of 4 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 4:\n        return 4\n    elif n%4==0:\n        return n//4\n    elif n%4!=0:\n        return n//4+1\n    else:\n        return n//4+2\ndef highest_power_of_5(n):\n    '''\n    Write a python function that returns the highest power of 5 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 5:\n        return 5\n    elif n%5==0:\n        return n//5\n    elif n%5!=0:\n        return n//5+1\n    else:\n        return n//5+2\ndef highest_power_of_6(n):\n    '''\n    Write a python function that returns the highest power of 6 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 6:\n        return 6\n    elif n%6==0:\n        return n//6\n    elif n%6!=0:\n        return n//6+1\n    else:\n        return n//6+2\ndef highest_power_of_7(n):\n    '''\n    Write a python function that returns the highest power of 7 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 7:\n        return 7\n    elif n%7==0:\n        return n//7\n    elif n%7!=0:\n        return n//7+1\n    else:\n        return n//7+2\ndef highest_power_of_8(n):\n    '''\n    Write a python function that returns the highest power of 8 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 8:\n        return 8\n    elif n%8==0:\n        return n//8\n    elif n%8!=0:\n        return n//8+1\n    else:\n        return n//8+2\ndef highest_power_of_9(n):\n    '''\n    Write a python function that returns the highest power of 9 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 9:\n        return 9\n    elif n%9==0:\n        return n//9\n    elif n%9!=0:\n        return n//9+1\n    else:\n        return n//9+2\ndef highest_power_of_10(n):\n    '''\n    Write a python function that returns the highest power of 10 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 10:\n        return 10\n    elif n%10==0:\n        return n//10\n    elif n%10!=0:\n        return n//10+1\n    else:\n        return n//10+2\ndef highest_power_of_11(n):\n    '''\n    Write a python function that returns the highest power of 11 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 11:\n        return 11\n    elif n%11==0:\n        return n//11\n    elif n%11!=0:\n        return n//11+1\n    else:\n        return n//11+2\ndef highest_power_of_12(n):\n    '''\n    Write a python function that returns the highest power of 12 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 12:\n        return 12\n    elif n%12==0:\n        return n//12\n    elif n%12!=0:\n        return n//12+1\n    else:\n        return n//12+2\ndef highest_power_of_13(n):\n    '''\n    Write a python function that returns the highest power of 13 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 13:\n        return 13\n    elif n%13==0:\n        return n//13\n    elif n%13!=0:\n        return n//13+1\n    else:\n        return n//13+2\ndef highest_power_of_14(n):\n    '''\n    Write a python function that returns the highest power of 14 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 14:\n        return 14\n    elif n%14==0:\n        return n//14\n    elif n%14!=0:\n        return n//14+1\n    else:\n        return n//14+2\ndef highest_power_of_15(n):\n    '''\n    Write a python function that returns the highest power of 15 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 15:\n        return 15\n    elif n%15==0:\n        return n//15\n    elif n%15!=0:\n        return n//15+1\n    else:\n        return n//15+2\ndef highest_power_of_16(n):\n    '''\n    Write a python function that returns the highest power of 16 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 16:\n        return 16\n    elif n%16==0:\n        return n//16\n    elif n%16!=0:\n        return n//16+1\n    else:\n        return n//16+2\ndef highest_power_of_17(n):\n    '''\n    Write a python function that returns the highest power of 17 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 17:\n        return 17\n    elif n%17==0:\n        return n//17\n    elif n%17!=0:\n        return n//17+1\n    else:\n        return n//17+2\ndef highest_power_of_18(n):\n    '''\n    Write a python function that returns the highest power of 18 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 18:\n        return 18\n    elif n%18==0:\n        return n//18\n    elif n%18!=0:\n        return n//18+1\n    else:\n        return n//18+2\ndef highest_power_of_19(n):\n    '''\n    Write a python function that returns the highest power of 19 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return n\n    elif n <= 19:\n        return 19\n    elif n%19==0:\n        return n//19\n    elif n%19!=0:\n        return n//19+1\n    else:\n        return n//19+2\ndef highest_power_of_20(n):\n    '''\n    Write a python function that returns the highest power of 2"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0: \n        return \"Please enter a positive number\"\n    if n == 0: \n        return 0\n    if n % 2 == 0: \n        return 1\n    else: \n        return highest_Power_of_2(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1, n):\n        if i % 2!= 0:\n            continue\n        if i % 3 == 0:\n            continue\n        if i % 5 == 0:\n            continue\n        return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_number = (1 + (5 * n)) % 10\n    return lucas_number\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [None]*(n+1) \n    lucas[0] = 0\n    lucas[1] = 1\n    for i in range(2, n+1): \n        lucas[i] = lucas[i-1] + lucas[i-2] \n    return lucas[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n - 1) * find_lucas(n - 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(x,y):\n        if x >= y:\n            return None\n        elif x == y:\n            return 1\n        else:\n            return lucas(x+1, y-1) + lucas(x, y-1)\n    return lucas(1, n)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    num_lucas = []\n    for i in range(n):\n        if i == 0:\n            num_lucas.append(1)\n        elif i == 1:\n            num_lucas.append(1)\n        else:\n            num_lucas.append(num_lucas[i-2] + num_lucas[i-1])\n    return num_lucas[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    for i in range(n):\n        lucas = lucas * 2\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return\n    elif n == 1:\n        return 1\n    else:\n        return n + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return 3 * find_lucas(n - 1) + find_lucas(n - 2)\ndef main(): \n    print(\"Then'th lucas number is\", find_lucas(30))\nif __name__ == \"__main__\": \n    main("
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = str(string)\n    for elem in list_:\n        elem.format = string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_) is not list:\n        raise TypeError('add_string() requires a list')\n    for el in list_:\n        if type(el) is str:\n            list_.append(el.format(string))\n        else:\n            add_string(el, string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.replace('\\\\n','')\n    string = string.replace('\\\\t','')\n    list_.extend(string.split())\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_) == list:\n        for el in list_:\n            if type(el) == str:\n                list_[list_.index(el)] = string.format(el)\n    else:\n        print(\"Error: list is not a list\")\n        return\n    \n    return list_\n        \ndef write_csv(list_, filename):\n    '''\n    Write a function to write a list to a CSV file.\n    '''\n    if type(list_) == list:\n        with open(filename, 'w', newline='') as csvfile:\n            write_csv_header(list_, csvfile)\n            csvfile.write(','.join(list_))\n    else:\n        print(\"Error: list is not a list\")\n        return\n        \ndef write_csv_header(list_, csvfile):\n    '''\n    Write a function to write the header of a CSV file.\n    '''\n    if type(list_) == list:\n        list_ = list_[0].split(',')\n    csvfile.write(','.join(list_))\n    \ndef write_csv_row(list_, filename):\n    '''\n    Write a function to write a row to a CSV file.\n    '''\n    if type(list_) == list:\n        list_ = list_[0].split(',')\n    csvfile.write(','.join(list_))\n    \ndef make_csv(list_, filename):\n    '''\n    Write a function to write a list of lists to a CSV file.\n    '''\n    if type(list_) == list:\n        with open(filename, 'w', newline='') as csvfile:\n            write_csv_header(list_, csvfile)\n            csvfile.write(','.join(list_))\n    else:\n        print(\"Error: list is not a list\")\n        return\n        \ndef main():\n    '''\n    Process one list into a CSV and print it out.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        ['a', 'b', 'c'],\n        ['a', 'b', 'd'],\n        ['a', 'b', 'e']\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of strings into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = ['test', 'list']\n    add_string(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    add_string(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    add_string(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ]\n    ]\n    write_csv(list_, filename)\n    \n    '''\n    Write a list of lists into a file.\n    '''\n    filename = 'lists.csv'\n    list_ = [\n        [\n            ['a', 'b', 'c'],\n            ['a', 'b', 'd'],\n            ['a', 'b', 'e']\n        ],\n        [\n            ['a', 'b', '"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def format_string(string_):\n        if string_.find('{') == -1:\n            return string_\n        else:\n            return string_.format(*format_string(string_[1:]).split('}'))\n    return format_string(string_)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == '':\n        return list_\n    else:\n        new_list = []\n        for word in string.split():\n            word = word.capitalize()\n            new_list.append(word)\n        return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_ + [string]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = format_string(i)\n        print(i, end='')\n    print()\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(string, \"\")\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    for i in range(len(l2)):\n        d[l2[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    dic['keys'] = l1\n    dic['values'] = l2\n    dic['keys_dict'] = l3\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    if l1:\n        d.update(l1)\n    if l2:\n        d.update(l2)\n    if l3:\n        d.update(l3)\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        d3 = {}\n        for j in range(len(l3[i])):\n            d3[l3[i][j]] = l3[i][j]\n        d4 = {}\n        for k in range(len(l3[i])):\n            d4[l3[i][k]] = l4[i][k]\n        d5 = {}\n        for m in range(len(l3[i])):\n            d5[l3[i][m]] = l5[i][m]\n        d6 = {}\n        for n in range(len(l3[i])):\n            d6[l3[i][n]] = l6[i][n]\n        d7 = {}\n        for o in range(len(l3[i])):\n            d7[l3[i][o]] = l7[i][o]\n        d8 = {}\n        for p in range(len(l3[i])):\n            d8[l3[i][p]] = l8[i][p]\n    return d1, d2, d3, d4, d5, d6, d7, d8\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    converted_list = {}\n    i = 0\n    while i < len(l1):\n        # print(l1[i])\n        # print(l2[i])\n        converted_list[i] = l2[i]\n        # print(l3[i])\n        i = i + 1\n        # print(i)\n    # print(l3)\n    return converted_list\n    \n    \n    \n    \n    # for i in l1:\n    #     l2 = {}\n    #     for j in i:\n    #         l2[j] = l2.get(j, 0) + 1\n    #     l3 = {}\n    #     l3[i] = l2\n    #     converted_list[i] = l3\n    # return converted_list\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for e in l1:\n        if isinstance(e, dict):\n            if 'n' not in e:\n                d1 = e\n            else:\n                d1 = e['n']\n        elif isinstance(e, list):\n            if 'n' not in e:\n                d2 = e\n            else:\n                d2 = e\n            for k in d2:\n                if 'n' not in k:\n                    d3 = {}\n                    for i in d2:\n                        if isinstance(i, dict):\n                            d3[i['n']] = {}\n                        else:\n                            d3[i] = {}\n                    d3 = d3['n']\n                else:\n                    d3 = k\n            d1['n'] = d3\n    for e in l2:\n        if isinstance(e, dict):\n            if 'n' not in e:\n                d3 = {}\n                for i in e:\n                    d3[i] = {}\n                d3 = d3['n']\n            else:\n                d3 = e['n']\n        elif isinstance(e, list):\n            d3 = {}\n            for i in e:\n                if isinstance(i, dict):\n                    d3[i['n']] = {}\n                else:\n                    d3[i] = {}\n            d3 = d3['n']\n    for e in l3:\n        if isinstance(e, dict):\n            if 'n' not in e:\n                d3 = {}\n                for i in e:\n                    d3[i] = {}\n                d3 = d3['n']\n            else:\n                d3 = e['n']\n        elif isinstance(e, list):\n            d3 = {}\n            for i in e:\n                if isinstance(i, dict):\n                    d3[i['n']] = {}\n                else:\n                    d3[i] = {}\n            d3 = d3['n']\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for l in l1:\n        for k, v in l.items():\n            if isinstance(v, list):\n                dic[k] = convert_list_dictionary(l[k], l2[k], l3[k])\n            else:\n                dic[k] = v\n    return dic\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = []\n    for i in l1:\n        l4.append({})\n        for j in i:\n            l4[-1][j] = j\n    return l4\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if isinstance(l1, list):\n        return {\n            \"type\": \"list\",\n            \"value\": [\n                convert_list_dictionary(v1, v2, v3) for v1, v2, v3 in zip(l1, l2, l3)\n            ]\n        }\n    elif isinstance(l2, list):\n        return {\n            \"type\": \"list\",\n            \"value\": [\n                convert_list_dictionary(v1, v2, v3) for v1, v2, v3 in zip(l1, l2, l3)\n            ]\n        }\n    elif isinstance(l3, list):\n        return {\n            \"type\": \"list\",\n            \"value\": [\n                convert_list_dictionary(v1, v2, v3) for v1, v2, v3 in zip(l1, l2, l3)\n            ]\n        }\n    else:\n        raise TypeError\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not l1:\n        return {}\n    elif not l2:\n        return {l3: l1}\n    elif not l3:\n        return {l1: l2}\n    elif l1 == l2:\n        return {l3: l1}\n    else:\n        new_dict = {}\n        for k in l2:\n            new_dict[k] = convert_list_dictionary(l1[k], l2[k], l3)\n        return new_dict\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f1 = lambda n: max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return (f1(n))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==0:\n        return 0\n    else:\n        n=n-1\n        return max (max (f (n/2), f (n/3), f (n/4), f (n/5))) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 7\n    \n    return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)\n        \n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum = 0\n    for i in range (1, n):\n        sum += f (i/2)\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(2, n):\n        max_sum = max(max_sum, f(i))\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 24\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Find the maximum sum of all five numbers \n    # with each other.\n    # Max number = 5 * n - 2 * n + 4 * n - 1\n    max_sum = (n/2) * (n/2) + (n/3) * (n/3) + (n/4) * (n/4) + (n/5) * (n/5)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    x = 0\n    y = 0\n    for i in range (1, n+1):\n        x += i\n        y += i\n    return max (x, y)"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # your code goes here\n    max_len = 0\n    for i in input_list:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum_length = 0\n    for item in input_list:\n        if len(item) > maximum_length:\n            maximum_length = len(item)\n    return maximum_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    print(type(input_list))\n    print(input_list)\n    max_length = 0\n    if len(input_list)>max_length:\n        max_length = len(input_list)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    return input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # code here\n    return max(len(i) for i in input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) <= 1:\n        return input_list\n    else:\n        return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n    return max(length_list)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0]!= test_tup[1]:\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    result = True\n    \n    for i in test_tup:\n        if test_tup.count(i)!= 1:\n            result = False\n            break\n    \n    return result\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = set(test_tup)\n    return len(distinct) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_list = list(test_tup)\n    if len(tup_list) == len(set(tup_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = set(test_tup)\n    if tup.issubset(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = test_tup\n    # i = 0\n    # while i < len(tup):\n    #     if tup[i] == tup[i+1]:\n    #         print(\"TUP:\", tup)\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n    #         print(\"tup[i] = tup[i+1]\")\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = []\n    for x in str1:\n        if x not in result:\n            result.append(x)\n    return result[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if str1.count(i) == 1:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Use a for loop to iterate through the string.\n    # For each character, use the value of the count to increment the count of the unique characters.\n    # If the count is the same for two characters, return the first one\n    # If the count is different, return the first occurrence of the character.\n    # If the count is not a multiple of, return that occurrence.\n    # This way we avoid to need to write an extra iteration for every character in the string.\n    # We are using a \"string.find()\" function to find the index of the first non-repeating character.\n    # This function does not need to be using a for loop\n    \n    # We set the count to be a variable so that we can assign a value to it.\n    count = 0\n    # For each character in the string.\n    for character in str1:\n        # If the character is not the first non-repeating character.\n        if character not in str1:\n            # Increment the count by one to get the count of the first non-repeating character.\n            count += 1\n            # If the count is the same for two characters, return the first one.\n            if count == count_non_repeating_character(str1):\n                return character\n        # If the character is the first non-repeating character.\n        else:\n            # If the count is not a multiple of, return that occurrence.\n            if count % count_non_repeating_character(str1)!= 0:\n                return character\n    # If the count is not a multiple of, return that occurrence.\n    return str1[0]\n    "
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #str1 is a string\n    #returns the first non-repeating character in str1\n    for char in str1:\n        if char!= char.lower():\n            return char\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in result:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code here\n    # create an empty dictionary\n    d = dict()\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Removing spaces, using lower()\n    s = str1.replace(\" \",\"\")\n    # Getting the first non-repeated character\n    # (Since this is a list)\n    first_char = list(s[0])\n    # Set the first character\n    # to a string '0'\n    first_char.pop()\n    # Access the string's character\n    # by index\n    first_char = s[0]\n    # return the first character\n    return first_char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {} # empty dictionary\n    for i in str1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # declaring the dictionary\n    dictionary = dict()\n    # loop through the string\n    for i in str1:\n        # checking the key\n        if i not in dictionary:\n            # adding the key\n            dictionary[i] = 1\n        else:\n            # incrementing the count\n            dictionary[i] += 1\n    # finding the first occurance of the letter\n    for i in dictionary:\n        if dictionary[i] == 1:\n            return i\n    return \"Sorry,no character appears in this text\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.replace(' ','')\n    # print(str1)\n    # print(type(str1))\n    # print(str1.count('a'))\n    # print(str1.replace('a','b'))\n    for index, char in enumerate(str1):\n        # print(index, char)\n        # print(index, char.isalpha())\n        if char.isalpha() == True:\n            return index\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string: return False\n    if string[0] == string[-1]: return True\n    elif len(string) == 1: \n        return False\n    else: return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n    \ndef num_check(num):\n    '''\n    Write a function to check whether the given number is a number or not.\n    '''\n    if isinstance(num,int):\n        if num.isnumeric():\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(re.findall(regex, string)) > 0 \n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string, re.I):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n    \ndef check_str_same_char(string,char):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string.startswith(char,string.index(char)+1) or string.endswith(char,string.index(char)-1)\n    \ndef check_str_same_word(string,word):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not check_str_same_char(string,word):\n        return False\n    return string.index(word) == len(string)-1 or string.index(word) == 0\n    \ndef check_str_same_word_in_char(string,char,word):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string.startswith(char,string.index(char)+1) or string.endswith(char,string.index(char)-1)\n    \ndef check_str_not_str(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return not check_str_same_word(string,string) and not check_str_same_char(string,string) and not check_str_same_word_in_char(string,string,string)\n    \ndef check_str_not_str_in_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return not check_str_same_word(string,string) and not check_str_same_char(string,string) and not check_str_same_word_in_char(string,string,string)\n    \ndef check_str_has_one_in_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return check_str_same_word(string,string[0])\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == None or string == '': \n        return False\n    elif string =='': \n        return False\n    elif not string.isalpha(): \n        return False\n    elif not string.isalnum(): \n        return False\n    elif re.search(regex,string):\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    print(string)\n    if(re.search(regex, string)!= None):\n        return True\n    else:\n        return False\ndef check_position(string,start,end):\n    '''\n    Write a function to check whether the given string is in the given range.\n    '''\n    if(start >= 0 and end <= len(string) - 1):\n        print(start,end)\n        if(string[start] == string[end]):\n            return True\n    return False\ndef check_longest_word(string, start, end):\n    '''\n    Write a function to check whether the given string is in the longest word or not.\n    '''\n    if (check_position(string,start,end) == True):\n        print(string[start:end])\n        return True\n    else:\n        return False\ndef check_words_count(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_2(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())==1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_2(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_3(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_3(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_4(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())==1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_4(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_5(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_5(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_6(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_6(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_7(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_7(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_8(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_8(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_9(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_9(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_10(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_10(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) == True):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_words_count_11(string):\n    '''\n    Write a function to check whether the given string is the count of words in it or not.\n    '''\n    if(len(string.split())>1):\n        print(len(string.split()))\n        return True\n    else:\n        return False\ndef check_longest_word_count_11(string, start, end):\n    '''\n    Write a function to check whether the given string is the count of longest word or not.\n    '''\n    if(check_position(string,start,end) ="
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[-1] == string[0]:\n        return True\n    else:\n        return False\n    \ndef check_if_word(s):\n    '''\n    Write a function to check whether the given string starts and ends with the same word or not.\n    '''\n    m = re.match(regex,s)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0:len(string)//2].lower() == string[len(string)//2:]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = np.empty(3, dtype=float)\n    x.fill(-1.0)\n    for i in range(3):\n        x[i] = np.median(a[i],b[i],c[i])\n    return x\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    x = len(a)\n    if x % 2 == 0:\n        y = x//2\n        median = (a[y] + b[y] + c[y]) // 3\n        return median\n    else:\n        return a[x // 2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a.sort()\n    b.sort()\n    c.sort()\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Your code here\n    if len(a)==3:\n        if len(b)==3:\n            if len(c)==3:\n                return (int(sum(a)/3))\n            else:\n                return (int(sum(a)/3)+int(sum(b)/3))/2\n    else:\n        return None\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    b_sort = sorted(b)\n    if len(b)%2==0:\n        return int(b_sort[int(len(b)/2)-1]+b_sort[int(len(b)/2)])\n    else:\n        return int(b_sort[int(len(b)/2)-1])\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b or b == c or a == c:\n        return a\n    if a > b and b > c:\n        return b\n    if a > c and c > b:\n        return c\n    if a > b and b < c:\n        return b\n    if a < b and b < c:\n        return c\n    if a < b and b > c:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==3:\n        return (a[2]+a[1]+a[0])/3\n    elif len(a)==2:\n        return (a[1]+a[0])/2\n    elif len(a)==1:\n        return a[0]\n    else:\n        return \"Error in input\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == len(b) == len(c):\n        return sorted(a + b + c)[len(a)/3]\n    else:\n        return sorted(a + b)[len(a)/3]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) > 3:\n        return \"Too many numbers, please remove the duplicates\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += int(num)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + int(str(num)[0])\n    return sum\n    \n    \ndef get_next_tuple(nums):\n    '''\n    Write a function to find the next tuple in a given list.\n    '''\n    new_nums = []\n    for i in range(0, len(nums), 2):\n        new_nums.append(nums[i+1])\n    return tuple(new_nums)\n    \n    \ndef main():\n    '''\n    Write a function that prints a tuple containing all the numbers in the given list.\n    '''\n    nums = [1, 2, 3, 4, 5]\n    print(nums)\n    print(get_next_tuple(nums))\n    print(sum_of_digits(nums))\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += int(str(num)[-1])\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    i=0\n    total_sum=0\n    while i<len(nums):\n        total_sum+=nums[i]\n        i+=1\n    return total_sum\ndef find_first_element_of_sum_of_digits(nums):\n    '''\n    Write a function to find the first element of the sum of digits of each number of a given list.\n    '''\n    # if len(nums)==1:\n    #     return nums[0]\n    # elif len(nums)==2:\n    #     return nums[0]\n    # else:\n    #     return sum_of_digits(nums[0])/sum_of_digits(nums[1:])\n    sum_of_digits=sum_of_digits(nums)\n    i=0\n    while i<len(nums):\n        sum_of_digits+=nums[i]\n        i+=1\n    return sum_of_digits/sum_of_digits.is_integer()"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    # Number of digits we will count\n    digits = 0\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def is_palindrome(num):\n        '''\n        Perform a logical logical AND check on a number.\n        '''\n        if num == nums:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    i=0\n    sum=0\n    while i<len(nums):\n        sum=sum+(int(nums[i])%10)\n        i=i+1\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n    nums_sum = 0\n    for num in nums:\n        nums_sum += num\n    return nums_sum\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert test_tup1[0] in '01' and test_tup1[1] in '01', 'TUP1 needs to be in the format [0] and [1]'\n    assert test_tup2[0] in '01' and test_tup2[1] in '01', 'TUP2 needs to be in the format [0] and [1]'\n    assert test_tup1[2] in '01' and test_tup1[3] in '01', 'TUP1 needs to be in the format [0] and [1]'\n    assert test_tup2[2] in '01' and test_tup2[3] in '01', 'TUP2 needs to be in the format [0] and [1]'\n    x = test_tup1[2]\n    y = test_tup2[2]\n    return bin(int(x) ^ int(y))[2:]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i]\n        xor_result ^= test_tup2[i]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_test = 0\n    for i in range(len(test_tup1)):\n        xor_test = xor_test ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        xor_test = xor_test ^ test_tup2[i]\n    return xor_test\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # loop through all the tuples\n    for i in range(0, len(test_tup1)):\n        # get the bitwise xor for the i-th tuple\n        print(\"\\nBitwise XOR: \", test_tup1[i] ^ test_tup2[i])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (2, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (2, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 1)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (1, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (1, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (1, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (0, 2)\n    '''\n    '''\n    Given:\n        test_tup1 = (12, 10)\n        test_tup2 = (1, 0)\n    \n    Returns:\n        (3, 2)\n    '''\n    '''\n    Given:\n        test"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Your code here\n    xor = 0\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('XOR takes two tuples of different sizes.')\n    for i in range(len(test_tup1)):\n        xor = xor ^ test_tup1[i]\n        xor = xor ^ test_tup2[i]\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for index in range(0, len(test_tup1)):\n        xor_result ^= test_tup1[index]\n    for index in range(0, len(test_tup2)):\n        xor_result ^= test_tup2[index]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in test_tup1:\n        result = result ^ i\n    for i in test_tup2:\n        result = result ^ i\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # write your code here\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return 1\n    elif len(test_list) == 2:\n        return 2\n    else:\n        return 3\n    "
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #Create a dictionary of the counts for each item\n    #For each item, increment the count by 1\n    #Return the count\n    count_dict = {}\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in test_list:\n        unique_list.append(i)\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # O(n) time\n    # O(n) space\n    \n    freq = dict()\n    for sentence in test_list:\n        for word in sentence:\n            if word in freq:\n                freq[word] = freq[word]+1\n            else:\n                freq[word] = 1\n    \n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    freq = 0\n    for each in test_list:\n        count = count + 1\n        if each[2]!= None:\n            freq = freq + 1\n    print(\"The number of unique tuples in the testlist is \" + str(count))\n    print(\"The number of unique tuples in the testlist is \" + str(freq))\n    return count, freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if(type(test_list[i]) == str):\n            count +=1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = {}\n    for test in test_list:\n        result[test] = result.get(test, 0) + 1\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for element in test_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #Loop through the two tuples and add them.\n    for ind1, val1 in enumerate(test_tup1):\n        for ind2, val2 in enumerate(test_tup2):\n            #Add the tuple and convert it to list.\n            add_list = [val1, val2]\n            #Loop through the lists to add them.\n            for index, item in enumerate(add_list):\n                test_tup1[ind1][index] += item\n    #Return the list of tuples.\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create empty list to append result to\n    result = []\n    # Loop through all tuples and append each element to result list\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            result.append(test_tup1[i] + test_tup2[j])\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def combine_tuples(tup1, tup2):\n        '''\n        Write a function to combine two given tuples.\n        '''\n        # Formal idea: return tuple(tup1 + tup2)\n        return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))\n    \n    def append_tuples(tup1, tup2):\n        '''\n        Write a function to append tuples in the given two nested tuples.\n        '''\n        def get_nested_tuples(tup):\n            '''\n            Recursively create a nested tuple of given tuples.\n            '''\n            # Add new tuple to list\n            lst.append(tuple(tup[i] for i in range(len(tup))))\n            # Recursively call function on nested tuples\n            for i in range(len(tup)):\n                get_nested_tuples(tup[i])\n        # return a tuple with the first element as last element\n        # and append that element to the new tuple\n        return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))\n    \n    # Combining two tuples\n    # and create a tuple to store the result\n    lst = []\n    # Make a tuple containing the first element in each tuple\n    tup1 = test_tup1[0]\n    # Make a tuple containing the second element in each tuple\n    tup2 = test_tup2[0]\n    \n    # Add the elements of the tuples to the list\n    get_nested_tuples(tup1)\n    get_nested_tuples(tup2)\n    \n    # Add the tuples to the list\n    return combine_tuples(lst, tup1) + combine_tuples(lst, tup2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i, (a, b) in enumerate(zip(test_tup1, test_tup2)):\n        if isinstance(a, tuple) and isinstance(b, tuple):\n            test_tup1[i] = (a[0] + b[0], a[1] + b[1])\n        else:\n            test_tup1[i] = a + b\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i])\n        lst.append(test_tup2[i])\n    return tuple(lst)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # write your code here\n    if len(test_tup1)==0:\n        return 0\n    elif len(test_tup2)==0:\n        return 0\n    else:\n        i=0\n        while i<len(test_tup1):\n            j=0\n            while j<len(test_tup2):\n                if test_tup1[i]==test_tup2[j]:\n                    # if both list are same, add to sum\n                    test_tup1[i] += test_tup2[j]\n                    # remove the duplicates\n                    test_tup1[i]=test_tup1[i].remove(test_tup1[i])\n                    test_tup2[j]=test_tup2[j].remove(test_tup2[j])\n                    # add to return list\n                    if j<len(test_tup2):\n                        test_tup1.append(test_tup2[j])\n                    j+=1\n                    # reset to next index\n                    i+=1\n                else:\n                    j+=1\n            i+=1\n        # add each tuple to the return list\n        test_tup1.append(test_tup2[i])\n        return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in test_tup1:\n        for j in test_tup2:\n            tup_add = i + j\n            print(\"\\nAdding nested tuples: \", i, \" \", j, \" \", tup_add)\n    return\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    def check_tuple_format(tup):\n        '''\n        Check the given tuple is of the correct format\n        '''\n        if isinstance(tup, tuple) and len(tup) == 2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        smaller = a\n    else:\n        smaller = b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        return a\n    if b>a:\n        return b\n    if a==b:\n        return a\n    if b==a:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    c=a+b\n    return c/2\n    \ndef median(a,b):   \n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        if a>=b:\n            return (a+b)/2\n        else:\n            return (b+a)/2\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a > b:\n        return a\n    else:\n        return b\n    \nprint(minimum(4,9))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if len(a)==1:\n        return b\n    elif len(a)==2:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\n    else:\n        if a[0]>b:\n            return a[0]\n        else:\n            return b\ndef maximum(a,b): \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if len(a)==1:\n        return b\n    elif len(a)==2:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\n    else:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\ndef percentage(a,b):\n    '''\n    Write a python function to find the percentage of two numbers.\n    '''\n    if len(a)==1:\n        return b\n    elif len(a)==2:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\n    else:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\ndef mean(a,b):\n    '''\n    Write a python function to find the mean of two numbers.\n    '''\n    if len(a)==1:\n        return b\n    elif len(a)==2:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\n    else:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if len(a)==1:\n        return b\n    elif len(a)==2:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\n    else:\n        if a[0]<b:\n            return a[0]\n        else:\n            return b\ndef mode(a):\n    '''\n    Write a python function to find the mode of a number.\n    '''\n    if len(a)==1:\n        return a[0]\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return a[1]\n    else:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return a[1]\ndef variance(a):\n    '''\n    Write a python function to find the variance of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return (a[0]*a[0])+(a[1]*a[1])\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return (a[0]*a[0])+(a[1]*a[1])\n        else:\n            return 0\ndef standard_deviation(a):\n    '''\n    Write a python function to find the standard deviation of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))\n        else:\n            return 0\ndef range_of_max(a):\n    '''\n    Write a python function to find the range of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))\n        else:\n            return 0\ndef range_of_min(a):\n    '''\n    Write a python function to find the range of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))\n        else:\n            return 0\ndef Mode(a):\n    '''\n    Write a python function to find the mode of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\ndef Mode(a):\n    '''\n    Write a python function to find the mode of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\ndef mode(a):\n    '''\n    Write a python function to find the mode of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\ndef mean(a):\n    '''\n    Write a python function to find the mean of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return a[0]\n        else:\n            return 0\ndef standard_deviation(a):\n    '''\n    Write a python function to find the standard deviation of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))**0.5\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))**0.5\n        else:\n            return 0\ndef standard_deviation(a):\n    '''\n    Write a python function to find the standard deviation of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))**0.5\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))**0.5\n        else:\n            return 0\ndef median(a):\n    '''\n    Write a python function to find the median of a number.\n    '''\n    if len(a)==1:\n        return 0\n    elif len(a)==2:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))/2\n        else:\n            return 0\n    else:\n        if a[0]<a[1]:\n            return (a[0]-mean(a))/2\n        else:\n            return 0\ndef standard_deviation(a):\n    '''\n    Write a python function to find the standard deviation of a number."
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a>b:\n        return a\n    elif a<b:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        small = a\n    else:\n        small = b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b==a:\n        return a\n    if b<a:\n        return a\n    if a<b:\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    return a,b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        small=a\n        large=b\n    else:\n        small=b\n        large=a\n    \n    for i in range(3):\n        if a[i]<b[i]:\n            small=a[i]\n        else:\n            large=b[i]\n            \n    return small, large\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # your code here\n    \n    tuple2=tuple(tuplex)\n    if tuplex is tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if not tuple1:\n        return False\n    if tuple1[0] in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except ValueError:\n        return False\n    except:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        return tuple1.index(tuplex) \n    except ValueError:\n        return 'Index Not found'\n    \n    \n    "
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # define a return value of False\n    return not tuplex.count(tuple1) > 0\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple1_as_list = list(tuplex)\n    for i in tuple1:\n        if i not in tuple1_as_list:\n            return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    else:\n        return False\n    #raise NotImplementedError\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)!= len(tuple1):\n        return False\n    \n    for i,j in zip(tuplex,tuple1):\n        if i!= j:\n            return False\n        \n    return True\n    \ndef check_list(lst,l):\n    '''\n    Write a function to check whether a list contains a specific element.\n    '''\n    if len(lst)!= len(l):\n        return False\n    \n    for i,j in zip(lst,l):\n        if i!= j:\n            return False\n    \n    return True\n    \ndef check_dict(dict,tuple1):\n    '''\n    Write a function to check whether a dictionary contains a specific element.\n    '''\n    if len(tuple1)!= len(dict):\n        return False\n    \n    for i,j in zip(dict,tuple1):\n        if i!= j:\n            return False\n    \n    return True\n    \ndef check_set(set,l):\n    '''\n    Write a function to check whether a set contains a specific element.\n    '''\n    if len(l)!= len(set):\n        return False\n    \n    for i in set:\n        if i not in l:\n            return False\n    \n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_lst=[]\n    for i in tuplex:\n        tuplex_lst.append(i)\n    if tuple1 in tuplex_lst:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2):\n        return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return 0\n    else: \n        if x % 2 == 1: \n            return 1\n        else: \n            return -1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # write your code here\n    if (x % 2) == 0: \n        return 'Even'\n    else: \n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if x % 2 == 0:\n    #     return x % 2\n    # else:\n    #     return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print('Parity')\n    else:\n        print('Not a parity')\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    for i in range(1,x): \n        if (x%i) == 0: \n            print(x, 'is not par')\n            return\n            \n    print(x, 'is par')\n    return\n    \ndef main(): \n    print('Find the parity of a number using the function.') \n    x = int(input('Enter a number: ')) \n    find_Parity(x) \n    \nif __name__ == '__main__': \n    main() "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x%2==1): \n        return False\n    else:\n        return True\ndef find_Rows(x): \n    '''\n    Write a python function to find the row of the given number.\n    '''\n    if(x%2!=0): \n        return False\n    else:\n        return True\ndef find_columns(x): \n    '''\n    Write a python function to find the column of the given number.\n    '''\n    if(x%2!=0): \n        return False\n    else: \n        return True\ndef find_Diagonal(x): \n    '''\n    Write a python function to find the diagonal of the given number.\n    '''\n    if(x%2==0): \n        return False\n    else: \n        return True\ndef find_Total(x): \n    '''\n    Write a python function to find the total of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x\ndef Sum_of_Numbers(x): \n    '''\n    Write a python function to sum the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x+x+x+x+x\ndef Subtraction(x): \n    '''\n    Write a python function to subtraction of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x-x\ndef Divisibility(x): \n    '''\n    Write a python function to determine the divisibility of the given number.\n    '''\n    if(x%2!=0): \n        return False\n    else: \n        return True\ndef Exponentiation(x): \n    '''\n    Write a python function to exponentiation of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*x\ndef Factorial(x): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*(x-1)\ndef Recursive_Factorial(x): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if(x%2!=0): \n        return x*(x-1)\n    else: \n        return x*(x-1)//2\ndef Multiplication(x): \n    '''\n    Write a python function to calculate the multiplication of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*x\ndef Division(x): \n    '''\n    Write a python function to calculate the division of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x//x\ndef Log_Base_10(x): \n    '''\n    Write a python function to calculate the log of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return math.log10(x)\ndef Factorial_of_Palindrome(x): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*(x-1)//2\ndef Subtraction_of_Palindrome(x): \n    '''\n    Write a python function to calculate the subtraction of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*x\ndef Remainder(x): \n    '''\n    Write a python function to calculate the remainder of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x%x\ndef M_Subtraction(x): \n    '''\n    Write a python function to calculate the subtracting the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x-x\ndef Modulo_of_Two_Numbers(x): \n    '''\n    Write a python function to calculate the modulo of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x%x\ndef Prime_Numbers(x): \n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if(x%2!=0): \n        return False\n    else: \n        return True\ndef Prime_Factor(x): \n    '''\n    Write a python function to calculate the prime factor of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x//math.gcd(x,x)\ndef Factor(x): \n    '''\n    Write a python function to calculate the factor of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x//math.gcd(x,x)\ndef Power_of_Square(x): \n    '''\n    Write a python function to calculate the power of the square root of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x**(1/2)\ndef Square_Root(x): \n    '''\n    Write a python function to calculate the square root of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x**(1/2)\ndef LCM(x,y): \n    '''\n    Write a python function to calculate the LCM of the given numbers.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*y//math.gcd(x,y)\ndef Ln(x): \n    '''\n    Write a python function to calculate the log of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return math.log10(x)\ndef Factorial_of_Square(x): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*(x-1)//2\ndef Factorial_of_Square_Multiplication(x): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*(x-1)//2*2\ndef Factorial_of_Square_Division(x): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*(x-1)//2*2*3\ndef Factorial_of_Square_Remainder(x): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*(x-1)//2*2*3*4\ndef Factor(x): \n    '''\n    Write a python function to calculate the factor of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x//math.gcd(x,x)\ndef Exponentiation(x): \n    '''\n    Write a python function to calculate the exponentiation of the given number.\n    '''\n    if(x%2!=0): \n        return 0\n    else: \n        return x*("
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) == 1:\n        return n\n    else:\n        return n%10 + rearrange_bigger(int(n/10))*10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 9:\n        return n\n    if n%10==0:\n        return rearrange_bigger(n//10)\n    else:\n        return n//10+rearrange_bigger(n%10)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    next_bigger = n\n    sum_of_digits = 0\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit\n        n = n // 10\n    if sum_of_digits > next_bigger:\n        next_bigger = sum_of_digits\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n<0:\n        print(\"We're sorry, that's not a number.\")\n        return \n    while True:\n        a = int(str(n)[-1])\n        if a<=10:\n            break\n        else:\n            if n%10>9:\n                a = int(str(n)[:-1])+a\n            else:\n                a = int(str(n)[:-1])\n                a = str(a)\n                a = int(a[-1])\n            n = n//10\n    return a\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    rearr = 0\n    for i in range(0, n):\n        rearr += int(str(i+1)[::-1])\n    return rearr\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    '''\n    Need to write the code to create the next bigger number.\n    '''\n    '''\n    There are 4 steps. \n    First we go through the digits, 2nd we need to find the largest number (min value) and return it.\n    Then we iterate through the digits again, and we go through the next number until we find the smallest number.\n    Next we shift all the digits to the next number.\n    '''\n    '''\n    Steps\n    1. Find the largest number in the digits.\n    2. Find the next number with this number.\n    3. Run the function again, and this number again to find the smallest number.\n    4. Then shift all the digits to the next number.\n    '''\n    '''\n    Here we have 2 loops of code that can solve this problem.\n    First, we create a variable named \"smallest\".\n    Then we run the function for all digits, and if it's larger than \"smallest\" we swap it with the next number.\n    '''\n    '''\n    I think this is a good technique to create a \"bigger\" number. \n    If the next number is larger than \"smallest\", then we swap it with the next number.\n    '''\n    '''\n    Now for each digit, we run the function again, and keep going until we have the smallest number.\n    '''\n    '''\n    Now we have to create a variable called \"biggest\".\n    Finally we run the function again, and if it's less than \"smallest\", then it's the next number.\n    '''\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    l = len(s)\n    if l < 6:\n        return n\n    n1 = ''\n    for i in range(0, 6):\n        n1 += str(int(s[l-1-i]) + 1)\n    return n1\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    count = 0\n    n = str(n)\n    if len(n) == 1:\n        count = int(n)\n    else:\n        while count > 0:\n            if int(n[-1]) > int(n[-2]):\n                count = count - 1\n                n = n[:-2] + str(int(n[-2]) + 1)\n            else:\n                break\n    return int(n)"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Write your code here\n    #base case\n    if n == 0:\n        return 0\n    #recursion\n    return n+rearrange_bigger(n//10)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    digits.reverse()\n    digits = digits[::-1]\n    result = sum(digits)\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # O(n log k) time complexity, O(n) space complexity\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # implement the below code\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    i,j = 0,0\n    heap = []\n    result = []\n    heapq.heapify(heap)\n    # for i in range(k):\n    #     for j in range(k):\n    #         if nums1[i] == nums2[j]:\n    #             heapq.heappush(heap, (nums1[i], i, j))\n    #             break\n    #         elif nums1[i] < nums2[j]:\n    #             heapq.heappush(heap, (nums2[j], j, i))\n    #             break\n    #         else:\n    #             heapq.heappush(heap, (nums1[i], i, j))\n    #             break\n    \n    while i<len(nums1) and j<len(nums2):\n        if nums1[i] < nums2[j]:\n            heapq.heappush(heap, (nums1[i], i, j))\n            i += 1\n        else:\n            heapq.heappush(heap, (nums2[j], j, i))\n            j += 1\n    while i<len(nums1):\n        result.append((nums1[i], heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n        i += 1\n    while j<len(nums2):\n        result.append((heapq.heappop(heap)[1], heapq.heappop(heap)[2], heapq.heappop(heap)[0]))\n        j += 1\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    n = len(nums1) + len(nums2)\n    nums1.sort()\n    nums2.sort()\n    return _k_smallest_pairs(nums1, nums2, k, n)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    for i in range(k):\n        if nums1[i] == nums2[i]:\n            pass\n        else:\n            heapq.heappush(nums1, nums1[i])\n            heapq.heappush(nums2, nums2[i])\n            break\n    print(nums1,num2)\n    print(nums2,nums1)\n    return nums1,nums2\n    '''\n    1. find smallest numbers in num1 \n    2. find smallest numbers in num2 \n    3. pairs sum up to smallest number \n    4. if there are no pairs with the same sum, return [] \n    5. in this case, sort the pairs \n    6. return the list \n    '''\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sorts the elements of the array in ascending order\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # A helper function to find the number of the smallest pairs in the array\n    def number_of_smallest_pairs(nums1, nums2, k):\n        if len(nums1)!= len(nums2): return 0\n        if k > len(nums1) or k > len(nums2): return 0\n        d1 = dict()\n        d2 = dict()\n        for i in nums1: d1[i] = d1.get(i, 0) + 1\n        for j in nums2: d2[j] = d2.get(j, 0) + 1\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if i > j and d1.get(nums1[i], 0) < d2.get(nums2[j], 0):\n                    d1[nums1[i]] = d1.get(nums1[i], 0) + 1\n                    d2[nums2[j]] = d2.get(nums2[j], 0) + 1\n                    if d1.get(nums1[i], 0) < d2.get(nums2[j], 0):\n                        return 2\n        return 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    \n    smallest_pair = []\n    smallest_pair_index = -1\n    \n    # first loop to find the indices of all elements in the array, in the form of an array\n    for i in range(n):\n        if nums1[i] < nums2[i]:\n            smallest_pair.append([nums1[i], nums2[i]])\n        else:\n            smallest_pair.append([nums2[i], nums1[i]])\n    \n    # sorting the array and finding the minimum\n    smallest_pair.sort()\n    \n    # stores the indices of the smallest pair\n    smallest_pair_index = smallest_pair.index(smallest_pair[0])\n    \n    # creates a heap of the minimum pair\n    smallest_pair_heap = []\n    smallest_pair_heap.extend(smallest_pair)\n    \n    # add pair of numbers to the heap\n    for i in range(smallest_pair_index + 1, k):\n        heapq.heappush(smallest_pair_heap, smallest_pair_heap[i])\n    \n    # iterate over the array\n    result = []\n    while smallest_pair_index >= 0:\n        # if the heap is empty\n        if smallest_pair_heap == []:\n            # to return the minimum element and its index\n            result.append(smallest_pair[smallest_pair_index][1])\n            smallest_pair_index -= 1\n            continue\n        \n        # if the heap is not empty\n        smallest_pair_heap = []\n        smallest_pair_index = smallest_pair_index - 1\n        smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n        \n        # if the smallest pair is more than 2\n        if len(smallest_pair) > 2:\n            # pop two smallest pairs\n            smallest_pair_heap = []\n            smallest_pair_index = smallest_pair_index - 1\n            smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n            smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n            \n            # find the minimum of the two smallest pairs\n            smallest_pair_index = smallest_pair_heap[0][1] - 1\n            \n            # if there is less than two element\n            if len(smallest_pair) > 2:\n                # pop two smallest pairs\n                smallest_pair_heap = []\n                smallest_pair_index = smallest_pair_index - 1\n                smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n                smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n                smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n            \n            # print the result\n            result.append(smallest_pair[smallest_pair_index][1])\n        else:\n            # if there is only one element\n            if len(smallest_pair) == 1:\n                # pop smallest pair\n                smallest_pair_heap = []\n                smallest_pair_index = smallest_pair_index - 1\n                smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n                smallest_pair_heap.append(smallest_pair[smallest_pair_index])\n        \n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    res = []\n    for i in range(0, n-k+1):\n        for j in range(i+k, n):\n            if nums1[i] == nums2[j] and i!= j:\n                res.append([nums1[i], nums2[j]])\n    return res"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums = nums1 + nums2\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, (num, nums.index(num)))\n    print(heap)\n    \n    while len(heap) > k:\n        num = heapq.heappop(heap)[1]\n        print(num)\n        nums.remove(num)\n        print(nums)\n        heapq.heappush(heap, (num, nums.index(num)))\n        print(heap)\n    \n    return len(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #get number of elements in second array\n    size_second_array = len(nums2)\n    #get number of elements in first array\n    size_first_array = len(nums1)\n    #build a heap\n    heap = []\n    for i in range(size_first_array):\n        for j in range(size_second_array):\n            if nums1[i] + nums2[j] == k:\n                heapq.heappush(heap,[nums1[i],nums2[j]])\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    total = 0\n    for x in list1:\n        total += x[0]\n    for x in list1:\n        total += x[1]\n    return total\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = list1[0][1]\n    for element in list1:\n        if element[1] < min_val:\n            min_val = element[1]\n    return min_val\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1[0]\n    else:\n        return list1[0] * list1[1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError(\"List has not been passed\")\n    min_val = list1[0]\n    min_index = 0\n    for i in range(1, len(list1)):\n        if list1[i] < min_val:\n            min_val = list1[i]\n            min_index = i\n    return list1[min_index] * list1[min_index + 1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        for i in range(0,len(list1)):\n            for j in range(0,len(list1)):\n                if list1[i][1] < list1[j][1]:\n                    list1[i],list1[j] = list1[j],list1[i]\n    return min(list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n=len(list1)\n    list_dict=dict()\n    for i in range(n):\n        for j in range(n):\n            if list1[i][0]==list1[j][0]:\n                list_dict[list1[i]]=list1[j][1]\n            elif list1[i][0]==list1[j][1]:\n                list_dict[list1[i]]=list1[j][0]\n            elif list1[i][1]==list1[j][0]:\n                list_dict[list1[i]]=list1[j][1]\n            elif list1[i][1]==list1[j][1]:\n                list_dict[list1[i]]=list1[j][0]\n    return sorted(list_dict.values())\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0]\n    for item in list1[1:]:\n        if item < minimum:\n            minimum = item\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i][0] > list1[j][0] or list1[j][0] > list1[i][0]:\n                if list1[i][1] < list1[j][1]:\n                    min_product = list1[j][0]\n                if list1[i][1] < list1[j][1]:\n                    min_product = list1[i][0]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return (min(list1[0],list1[1]))\n    \ndef main():\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    num = int(input(\"Enter a number to check whether it is a prime number or not : \"))\n    if num < 0:\n        print(\"The given number is negative\")\n        exit()\n    elif num == 0:\n        print(\"The given number is 0\")\n        exit()\n    elif num == 1:\n        print(\"The given number is 1\")\n        exit()\n    else:\n        print(\"The given number is a positive number\")\n        num = num**2\n        print(num)\n        \ndef get_input():\n    '''\n    Write a function to count the number of characters and a space between each character.\n    '''\n    list1 = []\n    for i in range(int(input(\"Enter the length of the list : \"))):\n        list1.append(input(\"Enter the %d element of the list : \" %(i+1)))\n    return (list1)\n    \ndef test(a,b):\n    '''\n    Write a function to check whether the given number is a prime number or not.\n    '''\n    if (a**b) % 1 == 0:\n        print(\"The given number is a positive integer\")\n        exit()\n    else:\n        print(\"The given number is not a prime number\")\n        exit()\n    \ndef check_prime(list1):\n    '''\n    Write a function that checks whether the given number is a prime number or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == 1:\n            print(\"The given number is a prime number\")\n            exit()\n    else:\n        print(\"The given number is not a prime number\")\n        exit()\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    "
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    if len(list1) <= 1:\n        return list1[0][1]\n    \n    else:\n        min_p = min(list1[0][1], list1[1][1])\n        for tuple_number in range(2, len(list1)):\n            min_p = min(min_p, list1[tuple_number][1])\n            \n        return min_p\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest = listval[0]\n    for el in listval:\n        if el < smallest:\n            smallest = el\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_index = 0\n    for i in range(len(listval)):\n        if listval[i] < listval[min_index]:\n            min_index = i\n    return listval[min_index]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = 0\n    for element in listval:\n        if element < minimum:\n            minimum = element\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return max(listval)\n    \ndef mode(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return max(listval)\n    \ndef avg(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return sum(listval)/len(listval)\n    \ndef median(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return sorted(listval)[len(listval)/2]\n    \ndef add_count(x, y):\n    '''\n    Write a function to add two lists of integers.\n    '''\n    if x is None or y is None or len(x) == 0 or len(y) == 0:\n        return 0\n    else:\n        return x.count(y) + y.count(x)\n    \ndef add_all(listval, listval2):\n    '''\n    Write a function to add two lists of integers.\n    '''\n    if listval is None or listval2 is None or len(listval) == 0 or len(listval2) == 0:\n        return 0\n    else:\n        return sorted(listval) + sorted(listval2)\n    \ndef add_count_all(x, y):\n    '''\n    Write a function to add two lists of integers.\n    '''\n    if x is None or y is None or len(x) == 0 or len(y) == 0:\n        return 0\n    else:\n        return x.count(y) + y.count(x)\n    \ndef find_max(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return max(listval)\n    \ndef find_min(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return min(listval)\n    \ndef find_median(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return median(listval)\n    \ndef find_mode(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return mode(listval)\n    \ndef find_avg(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return avg(listval)\n    \ndef find_min_max(listval):\n    '''\n    Write a function to find the minimum and maximum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return min_val(listval), max_val(listval)\n    \ndef find_median_all(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return sorted(listval)[len(listval)/2]\n    \ndef find_mean_all(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return sum(listval)/len(listval)\n    \ndef find_mean_count(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return sum(listval)/len(listval)\n    \ndef find_median_count(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return median(listval)\n    \ndef find_mean_count_all(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return sum(listval)/len(listval)\n    \ndef find_median_count_all(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return median(listval)\n    \ndef find_mode_count(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return -1\n    else:\n        return mode(listval)\n    \ndef find_avg_count(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return avg(listval)\n    \ndef find_mode_count_all(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return mode(listval)\n    \ndef find_median_count_all(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return median(listval)\n    \ndef find_mean_count_all(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return sum(listval)/len(listval)\n    \ndef find_median_all_count(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return median(listval)\n    \ndef find_mean_all_count(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    else:\n        return sum(listval)/len(listval)\n    \ndef find_mean_count_all_count(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #Convert snake to camel case\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # if the snake case string ends with '-'\n    if word.endswith('-'):\n        # convert the snake case string to camel case string\n        word = word[:-1]\n        # convert the snake case string to lower case\n        word = word.lower()\n        # return the camel case string\n        return word\n    # if the snake case string does not end with a '-'\n    elif word.endswith('_'):\n        # convert the snake case string to camel case string\n        word = word[:-1]\n        # convert the snake case string to lower case\n        word = word.lower()\n        # return the camel case string\n        return word\n    # if the snake case string does not end with a '-'\n    elif word.endswith('_'):\n        # if no underscore, make all characters of the word lowercase\n        word = word[:-1]\n        # if no '_'\n        if not word.endswith('_'):\n            # return the camel case string\n            return word.lower()\n        # if '_'\n        elif word.endswith('_'):\n            # if there is only one underscore, convert it to a space\n            word = word[:-1]\n            # return the camel case string\n            return word.lower()\n    # if the snake case string does not end with a '_'\n    elif word.endswith('_'):\n        # convert the snake case string to camel case string\n        word = word[:-1]\n        # if there is only one underscore\n        if not word.endswith('_'):\n            # return the camel case string\n            return word.lower()\n        # if there is only one underscore\n        elif word.endswith('_'):\n            # if there is only one underscore\n            if len(word) > 2:\n                # return the camel case string\n                return word[0].lower() + word[1:]\n            # if there is only one underscore\n            else:\n                # return the camel case string\n                return word.lower()\n    else:\n        # if the snake case string does not end with a '_'\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).title()\n    \ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).lower()\n    \ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).title()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'([a-z])(_)', r'\\1_\\2', word).lower()\n    \ndef lower_to_uppercase(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.title()\n    \ndef uppercase_to_lower(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.title()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.title()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to lowercase.\n    '''\n    return word.lower()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef lower_to_uppercase_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef lower_to_uppercase_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.lower()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string_swap(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()\n    \ndef uppercase_to_lower_string(word):\n    '''\n    Write a function to convert the given word to uppercase.\n    '''\n    return word.upper()"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # TODO: Implement this function\n    return word.replace(\"-\", \"\").replace(\"_\", \"\").lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == 'POP':\n        return word\n    first = word[0]\n    if first == '_':\n        return word\n    last = word[0].lower()\n    return first + last + ''.join(x.title() for x in word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    if word[0].isupper():\n        return ''.join([w.capitalize() for w in word])\n    else:\n        return ''.join([w.capitalize() for w in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    words = word.split('_')\n    words = [x.title() for x in words]\n    return ''.join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(((?<=[a-z])[A-Z])|([A-Z][a-z])|([A-Z][A-Z][a-z])|([A-Z])(?=[A-Z])|([a-z][A-Z]))'\n    return re.sub(pattern, lambda match: match.group(0).lower(), word, count = 1)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return []\n    if len(l) == 1:\n        return l\n    else:\n        return remove_odd(l[1:]) + [l[0]]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Corner case\n    if not l:\n        return []\n    \n    # Sort the list\n    l.sort()\n    \n    # Last item in list\n    last_item = l[-1]\n    \n    # Removing even numbers\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = last_item\n    \n    # Return the list\n    return l\n    \n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    if len(l) <= 1:\n        return l\n    elif len(l) == 2:\n        if l[1] % 2 == 0:\n            return l\n        else:\n            return l[1:]\n    else:\n        l1 = l[1: len(l)]\n        if l1[0] % 2 == 0:\n            return l1\n        else:\n            return l1[1:]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [el for el in l if el % 2!= 0]\n    \ndef replace_string(l, string):\n    '''\n    Write a python function to replace a particular string with another string.\n    '''\n    return l\n    \ndef print_odd(l):\n    '''\n    Write a python function to print out all odd numbers in a given list.\n    '''\n    return l\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    return [el for el in l if el % 2 == 0]\n    \ndef replace_string(l, string):\n    '''\n    Write a python function to replace a particular string with another string.\n    '''\n    return l\n    \ndef print_even(l):\n    '''\n    Write a python function to print out all even numbers in a given list.\n    '''\n    return l\n    \ndef get_nth_element(l, n):\n    '''\n    Write a python function to get the nth element of a given list.\n    '''\n    return l[n]\n    \ndef reverse_string(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return l[::-1]\n    \ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef convert_to_int(l):\n    '''\n    Write a python function to convert a given list to a single int.\n    '''\n    return sum(l)\n    \ndef create_vowels(l):\n    '''\n    Write a python function to convert a given list to a single int.\n    '''\n    return [el for el in l if el.lower() in 'aeiou']\n    \ndef get_unique_letters(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return list(set(el for el in l))\n    \ndef convert_to_string(l):\n    '''\n    Write a python function to convert a given list to a single string.\n    '''\n    return ''.join(map(str,l))\n    \ndef get_num_unique_letters(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return len(set(el for el in l))\n    \ndef get_unique_numbers(l):\n    '''\n    Write a python function to get all the unique numbers in a given list.\n    '''\n    return sum(map(int,set(el for el in l)))\n    \ndef reverse_string_numbers(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef get_nth_repeating_numbers(l, n):\n    '''\n    Write a python function to get the nth repeating numbers in a given list.\n    '''\n    return l[l.index(l[n])+1:]\n    \ndef get_nth_digit(l, n):\n    '''\n    Write a python function to get the nth digit in a given list.\n    '''\n    return l[n]\n    \ndef is_palindrome(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_2(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_3(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef get_nth_letter(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_2(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef reverse_string_numbers_2(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_2(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_2(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef reverse_string_numbers_2(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_3(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_3(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_3(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef is_palindrome_3(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_4(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_5(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef reverse_string_numbers_4(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return [int(el) for el in l[::-1]]\n    \ndef remove_duplicates_4(l):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return [el for el in l if el not in l[:l.index(el)]]\n    \ndef get_nth_letter_4(l, n):\n    '''\n    Write a python function to get the nth letter in a given list.\n    '''\n    return l[n]\n    \ndef get_num_unique_letters_4(l):\n    '''\n    Write a python function to get all the unique letters in a given list.\n    '''\n    return sum(map(int,l))\n    \ndef is_palindrome_5(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_6(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef is_palindrome_7(l):\n    '''\n    Write a python function to check whether a given list is palindrome or not.\n    '''\n    return l == l[::-1]\n    \ndef reverse_string_numbers_5(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    retur"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for number in l:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n    return even_numbers, odd_numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            odd_list.append(l[i])\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # your code goes here\n    odd=[]\n    for i in l:\n        if i%2==1:\n            odd.append(i)\n    return od"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 1:\n            new_list.append(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code here\n    return l[::2]\n    "
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n+1:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    def extract_item(lst):\n        if len(lst) > 0:\n            return lst[n]\n        else:\n            return []\n    \n    list_of_elements = []\n    for item in list1:\n        list_of_elements.append(extract_item(list1))\n    return list_of_elements\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        raise ValueError(\"Negative number of elements.\")\n    if n == 0:\n        return list1[0]\n    if n > len(list1):\n        raise ValueError(\"Number of elements is greater than the length of list.\")\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i][n])\n    return temp\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # loop through the two lists\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # if the values are equal, return True\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # if there are any duplicates in the sequence return False\n    if set(list1).intersection(set(list2)):\n        return False\n    \n    # if list1 contains elements from list2\n    elif list1 == list2:\n        return True\n    \n    # if list2 contains elements from list1\n    elif list2 == list1:\n        return True\n    \n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==[] or list2==[]:\n        return False\n    if list1[0]==list2[0]:\n        return False\n    else:\n        for i in range(0,len(list1)-1):\n            if list1[i]==list2[i]:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    if len(list1)==len(list2):\n        for i in range(len(list1)):\n            if list1[i]==list2[i]:\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.count(list2)!= 0\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # compare the length of the sequence\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    new_list = list1 + list2 \n    for i in new_list: \n        if i in list1 or i in list2: \n            return i \n    return \"No\""
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=True\n    for i in range(len(list1)):\n        if(list1[i]!=list2[i]):\n            result=False\n    return result\n    \ndef main():\n    '''\n    Sample Input:\n    [\n    [3,5,2,3,7],\n    [7,1,8,2,5],\n    [8,3,4,1,6],\n    [1,6,2,4,5],\n    [3,2,7,5,4],\n    ]\n    Expected Output:\n    True\n    '''\n    seq1=[]\n    seq2=[]\n    for i in range(int(input())):\n        data=list(map(int,input().split()))\n        seq1.append(data[0])\n        seq2.append(data[1])\n    if(overlapping(seq1,seq2)):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # The logic for this is:\n    # find the maximum element in array,\n    # find its index,\n    # then swap it with its index in the array.\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    largest = 0\n    smallest = 0\n    for i in range(len(arr)):\n        x = arr[i]\n        for j in range(i+1, len(arr)):\n            if x > arr[j]:\n                x = arr[j]\n                y = arr[i]\n        if x > largest:\n            largest = x\n        if x < smallest:\n            smallest = x\n    return [smallest, largest]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the array to get the highest product\n    arr = sorted(arr, reverse = True) \n    # iterate through array and check pair for each product\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - 1 - i):\n            # if product is bigger than it\n            if arr[j] > arr[j + 1]:\n                # swap the element in array and the element in the sorted array\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    # if it is the array is sorted in ascending order\n    if arr == sorted(arr, reverse = True):\n        # if there are two products\n        if arr[0]!= arr[1]:\n            return arr[0]\n    return -1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    # Pick the smallest index\n    if n == 0:\n        return (0, 0)\n    # Pick the largest number in each index\n    for i in range(n):\n        for j in range(n):\n            if arr[i] * arr[j] > arr[i] * arr[j]:\n                return (i, j)\n    # If there is no number with greatest product, return (0,0)\n    return (0, 0)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    low = 0\n    high = len(arr)-1\n    n = len(arr)\n    p = (arr[low]*arr[high])\n    if (n==1):\n        return (arr[low]*arr[high])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return (max(arr), max(arr))\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        max_prod = max(arr[i], arr[i]*arr[i])\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    output = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            output.append(arr[j] * arr[i])\n    print(output)\n    return max(output)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest = 1\n    for x in arr:\n        if x>highest:\n            highest=x\n    return highest\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # use a dictionary to find if an element is present in another.\n    \n    # getting the first element in the list \n    elements = dict() \n    for i in Input: \n        if i not in elements: \n            elements[i] = 0 \n        elements[i] += 1 \n    # looping through the dictionary \n    for i in elements: \n        if elements[i] == 1: \n            return i \n    \n    # return the key \n    return 'Not Found'\n    "
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    temp_list = []\n    for i in Input:\n        temp_list.append(i)\n        \n    for i in range(len(temp_list)):\n        temp_list[i] = temp_list[i][0]\n    \n    return temp_list[0]\n        \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [x for x in Input if x[0]==x[1]]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Declare a variable to save the elements from tuple. \n    elements = tuple(Input)\n    # Declare a variable to save the count of elements. \n    count = 0\n    # For loop to count the elements from tuple. \n    for element in elements: \n        # If the element is present in tuple then assign the count value to \n        # the count of elements. \n        if element in elements:\n            count += 1\n    # Print the count of elements. \n    print(\"Count of common first element: \", count)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    sorted_tuples = sorted(Input, key=lambda x: x[0])\n    res = []\n    for x in sorted_tuples:\n        if x not in res:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # for loop to get tuple of elements in list\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i] == Input[j]:\n                print(Input[i],end=',')\n                return\n    print(\"None\")\n    return\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input)==0:\n        return None\n    else:\n        l=[]\n        s=0\n        for i in range(len(Input)):\n            s+=Input[i][0]\n            l.append(Input[i])\n        if len(set(l))==len(l):\n            return max(l,key=lambda x:x[1])\n        else:\n            return None\n        \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code goes here\n    i=0\n    j=0\n    while(i<len(Input)):\n        if(Input[i][0]==Input[j][0]):\n            i+=1\n            j+=1\n        else:\n            i=0\n            j+=1\n    return j\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if Input[i] == Input[j]:\n                break\n        else:\n            return (Input[i])\n    else:\n        return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List1 = []\n    for i in Input:\n        if i not in List1:\n            List1.append(i)\n    return List1[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    len_lst = len(lst)\n    if len_lst==0: \n        return \"The list is empty!\"\n    elif len_lst==1: \n        return lst[0] \n    else: \n        for i in range(len_lst-1): \n            if lst[i] > lst[i+1]: \n                temp = lst[i+1] \n                lst[i+1] = lst[i] \n                lst[i] = temp \n    return max(lst)\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i = 0\n    m = lst[0]\n    for j in range(len(lst)):\n        if m > lst[j]:\n            m = lst[j]\n        i = i + 1\n    return i\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_copy = lst.copy()\n    if len(lst_copy) == 0:\n        return None\n    else:\n        return lst_copy[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    lst.remove(lst[0])\n    return lst[-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    for i in range(length):\n        if lst[i] > lst[i]:\n            return lst[i]\n    \n    return None\n    \ndef Find_Max_1(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    return max(lst)\n    \ndef Find_Max_2(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    return lst[length-1]\n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    length = len(lst)\n    for i in range(length):\n        if lst[i] > lst[i]:\n            return lst[i]\n    \n    return None\n    \ndef Find_Min_1(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    length = len(lst)\n    return min(lst)\n    \ndef Find_Min_2(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    length = len(lst)\n    return lst[length-1]\n    \ndef Remove_Zero(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_1(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_2(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_3(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_4(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_5(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_6(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_7(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_8(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_9(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_10(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_11(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_12(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_13(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_14(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_15(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0: \n            lst_copy.append(lst[i]) \n            \n    return lst_copy\n    \ndef Remove_Zero_16(lst): \n    '''\n    Write a python function to remove the first occurence of zero from a list.\n    '''\n    lst_copy = []\n    for i in range(len(lst)): \n        if lst[i] == 0:"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max = lst[0] \n    for i in range(len(lst)): \n        if lst[i] > max: \n            max = lst[i] \n    return max \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    index = 0\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # convert the list to an array\n    arr = []\n    for i in lst:\n        arr.append(i)\n    \n    # initialize the index and a count\n    index = -1\n    max_count = 0\n    \n    # iterate the array\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            index = i\n            max_count += 1\n    \n    # return the index\n    return index, max_count\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([int(i) for i in list1])\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # YOUR CODE HERE\n    if len(list1)==1:\n        return list1[0]\n    return round(sum(list1))\n    #raise NotImplementedError\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = []\n    for i in list1:\n        sum_list.append(round(i,2))\n    print(sum_list)\n    sum = 0\n    for i in sum_list:\n        sum += i\n    print(sum)\n    \nlist1 = [1,2,3,4,5]\nround_and_sum(list1"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # your code here\n    return list1[0]*len(list1), sum(list1)\n    pas"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # your code here\n    def round_and_sum(list1):\n        lst = []\n        for i in list1:\n            lst.append(round(i*len(list1)))\n        return lst\n    print(round_and_sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    total = 0\n    list1_len = len(list1)\n    \n    for num in list1:\n        total += num\n        \n    return total * list1_len\n    \n    \ndef min_and_max(list1):\n    '''\n    Write a function to find the smallest number in a given list and return its value.\n    '''\n    \n    minimum = list1[0]\n    for num in list1:\n        if num < minimum:\n            minimum = num\n            \n    return minimum\n    \n    \ndef str_list(list1):\n    '''\n    Write a function to create a string list from a given list.\n    '''\n    \n    result = []\n    \n    for item in list1:\n        result.append(str(item))\n    \n    return result\n    \n    \ndef mix_sort(list1):\n    '''\n    Write a function to sort the elements of the given list in ascending order using the function by_index.\n    '''\n    \n    \n    list1_len = len(list1)\n    \n    for i in range(list1_len):\n        index = list1.index(list1[i])\n        \n        list1[i], list1[index] = list1[index], list1[i]\n    \n    return list1\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a given list.\n    '''\n    \n    \n    \n    \ndef to_int(list1):\n    '''\n    Write a function to convert a given string to an integer.\n    '''\n    \n    \n    \n    \ndef find_sum(list1):\n    '''\n    Write a function to find the sum of all numbers in a given list.\n    '''\n    \n    \n    \n    \ndef find_even_sum(list1):\n    '''\n    Write a function to find the sum of even numbers in a given list.\n    '''\n    \n    \n    \n    \ndef find_odd_sum(list1):\n    '''\n    Write a function to find the sum of odd numbers in a given list.\n    '''\n    \n    \n    \n    \ndef is_integer(str1):\n    '''\n    Write a function to check if a given string is an integer.\n    '''\n    \n    \n    \n    \ndef is_float(str1):\n    '''\n    Write a function to check if a given string is a float.\n    '''\n    \n    \n    \n    \n    \ndef get_even_sum(list1):\n    '''\n    Write a function to find the even sum of all numbers in a given list.\n    '''\n    \n    \n    \n    \n    \ndef get_odd_sum(list1):\n    '''\n    Write a function to find the odd sum of all numbers in a given list.\n    '''\n    \n    \n    \n    \n    \ndef main():\n    print(\"Hello World\")\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for element in list1:\n        total_sum += element\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for n in list1:\n        new_list.append(round(n,1))\n    print(new_list)\n    print(sum(new_list))\n    return new_list\n    \nprint(round_and_sum([1,5,3,2,4]))\nprint(round_and_sum([1,5,3,2,4]))\nprint(round_and_sum([2,2,3,4,5,5,5,5]))"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # TODO - complete this function\n    list_length = len(list1)\n    sum = 0\n    for i in list1:\n        sum += i\n    print(\"The total sum is \" + str(sum * list_length))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res=0\n    for i in range(1,n+1):\n        if i%2==0:\n            res+=i**3\n    return res\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube=[]\n    for i in range(1,n+1):\n        cube.append(i**3)\n    print(cube)\n    sum=0\n    for i in range(len(cube)):\n        sum+=cube[i]\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            s += i\n    return s \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for i in range(n, 0, -2):\n        c += i**3\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2): \n        sum = sum + i**3 \n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    def is_odd(n): \n        return n % 2 == 1\n    def get_sum(n): \n        if n <= 0: \n            raise ValueError('number must be greater than 0')\n        return n ** 3\n    def get_sum_less_than(n): \n        if n <= 0: \n            raise ValueError('number must be greater than 0')\n        return get_sum(n - 1) + get_sum(n - 2) + get_sum(n - 3) \n    def cube_Sum(n): \n        if n <= 0: \n            return 0\n        return n ** 3 + get_sum_less_than(n)\n    return get_sum_less_than(n)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i**3)\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n+1): \n        sum = sum + i**3 \n    return sum \nprint(cube_Sum(5)) \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i**3\n    print(s)\n    return s\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = \"\"\n    for i in test_tup:\n        s += str(i)\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = \"\"\n    for i in test_tup:\n        output += i + \" \"\n    return output[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    # take all the elements of the tuple\n    \n    # create a list of the elements and create a new tuple by concatenating them\n    \n    # return the list\n    \n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) < 2:\n        return test_tup[0]\n    else:\n        return str(test_tup[0]) + \" \" + str(test_tup[1])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) > 0:\n        return ''.join([str(elem) for elem in test_tup])\n    else:\n        return '()'\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = []\n    for i in range(len(test_tup)):\n        out.append(test_tup[i])\n    return tuple(out)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if type(test_tup[0]) is tuple:\n        return tuple(concatenate_tuple(x) for x in test_tup)\n    else:\n        return (test_tup)\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = tuple(test_tup)\n    result = tuple(test_tup)\n    result = tuple(result)\n    result = tuple(result)\n    result = tuple(result)\n    result = tuple(result)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = test_tup[0] + \",\" + test_tup[1] + \",\" + test_tup[2]\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str, test_tup))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    for i in range(n):\n        sum_of_numbers += i ** 3\n    return sum_of_numbers / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num_of_cubes=0\n    for i in range(1,n+1):\n        num_of_cubes=num_of_cubes+i**3\n    cube=num_of_cubes/n\n    return cube\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n+find_Average_Of_Cube(n-1))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num_list = [4,8,16,32,64,128]\n    total_cube = 0\n    for num in num_list:\n        total_cube += num * num * num\n    print(\"The average of cubes of first {} natural numbers is {}\".format(n,total_cube/n))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    \n    average = sum(cubes)/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    for i in range(1,n+1):\n        average += i**3\n    return round(average/n**3,2)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a = []\n    i = 1\n    while i <= n:\n        a.append(i**3)\n        i += 1\n    return sum(a) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total/n\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = [x[1] for x in test_tuple]\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0][1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[0])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # REV PART\n    def split(input_string):\n        return input_string.split(sep=\" \")\n    # Split by space\n    input_string = split(test_tuple[0])\n    # Get the index from the second word of each string\n    index = split(test_tuple[1])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index, rear_index, rear_index_list = [], [], []\n    for i, s in enumerate(test_tuple):\n        if s == \"Rear\":\n            rear_index.append(i)\n        elif s == \"Front\":\n            front_index.append(i)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == 'R':\n            rear.append(i)\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #declare output variable\n    result = []\n    #loop through the given tuple\n    for i in range(len(test_tuple)):\n        #check if'rear' is a substring of 'test'\n        if test_tuple[i] =='rear':\n            #append to the output list\n            result.append(test_tuple[i])\n    return result\n    "
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1][:-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda string: string[test_tuple[0]], string[test_tuple[1]]))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_string = test_tuple[0]\n    index = 0\n    for i in test_string:\n        if i == \"R\":\n            if index < len(test_string)-1:\n                index += 1\n        else:\n            index = 0\n    return test_string[index:]\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # remove elements from the list\n    sub_list = []\n    for item in list1:\n        if item == x:\n            sub_list.append(len(item))\n        else:\n            sub_list.append(0)\n    return sub_list\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    # loop over the list \n    for item in list1: \n        # if the element is in the list \n        if x in item: \n            # increment the count \n            count += 1\n    # return the count \n    return count\n        \n        \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])):\n            if list1[i][j] == x: \n                n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            if lst[i][j] == lst[i][j]: \n                n += 1\n    return n \n    \ndef count_element_in_list_for_each_list_pairs(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[i][k] and lst[i][j] == lst[k][j]: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            if lst[i][j] == lst[i][j] and j - i > 0: \n                n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[i][k] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_different_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[i][k] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_same_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[j][k] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_same_order_different_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[k][j] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_different_order_different_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[k][j] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_different_order_same_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[k][j] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_different_order_different_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[k][j] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_different_order_different_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[k][j] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_same_order_different_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[k][j] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_for_each_list_over_diagonal_pairs_same_order_different_order(lst): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            for k in range(len(lst[i])): \n                if lst[i][j] == lst[k][j] and j - i > 0 and k - j > 0: \n                    n += 1 \n    return n \n    \ndef count_element_in_list_fo"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for i in range(len(list1)): \n        if list1[i] == x: \n            result += 1\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        if x == list1[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt=0\n    for i in range(len(list1)): \n        if list1[i]==x:\n            cnt+=1\n    return cnt \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for i in range(0, len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][x] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    if not list1: \n        return count \n    for sublist in list1: \n        if x in sublist: \n            count = count + 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for x in list1:\n        if(x==x[len(x)-1]):\n            count+=1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = False\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #1. initialize an empty list\n    my_list = []\n    #2. iterate through the given list\n    for num in nums:\n        #3. if the given number is odd\n        if num % 2 == 1:\n            #4. append the number to the empty list\n            my_list.append(num)\n        #5. if the given number is not odd\n        else:\n            #6. return the list\n            return my_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    nums_set = set(nums)\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # First, we get a copy of the list, so it can be modified\n    odd_nums = []\n    # Each iteration, we add the elements from the list to the odd_nums list, \n    # and we check the remainder if it is even\n    for num in nums:\n        # If it is not even, then we do not add it to the odd_nums list\n        if num % 2!= 0:\n            continue\n        # If it is even, then we do not add it to the odd_nums list\n        else:\n            odd_nums.append(num)\n    # Now, we remove all the odd_nums list elements, and then add them to our result list\n    result = []\n    for num in odd_nums:\n        result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n        else:\n            pass\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # your code here\n    # return filter_oddnumbers(nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            print(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            yield i\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    date_parts = dt.split('-')\n    \n    if len(date_parts) < 2:\n        return dt\n    \n    y = date_parts[0]\n    m = date_parts[1]\n    d = date_parts[2]\n    \n    if not m:\n        m = 0\n    \n    if not d:\n        d = 0\n    \n    y = int(y)\n    m = int(m)\n    d = int(d)\n    \n    if y % 4 == 0:\n        if y % 100!= 0:\n            y += 1\n        elif y % 100 == 0:\n            y += 1\n            m += 1\n            d += 1\n    \n    if d > 31:\n        d -= 31\n    \n    if m > 12:\n        m -= 12\n    \n    if m > 0:\n        m += 1\n        if m > 12:\n            m -= 12\n            d += 1\n    \n    \n    if m == 0 and d == 0:\n        if m == 1:\n            d = 0\n            if y % 100!= 0:\n                y += 1\n        elif y % 100 == 0:\n            y += 1\n    \n    return str(y) + '-' + str(m) + '-' + str(d)\n    \ndef change_time_format(t):\n    '''\n    Write a function to convert a time of yyyy-mm-dd HH:MM:SS format to hh:mm:ss format.\n    '''\n    \n    time_parts = t.split(':')\n    \n    if len(time_parts) < 2:\n        return t\n    \n    h = time_parts[0]\n    m = time_parts[1]\n    s = time_parts[2]\n    \n    if not m:\n        m = 0\n    \n    if not s:\n        s = 0\n    \n    h = int(h)\n    m = int(m)\n    s = int(s)\n    \n    if h > 23:\n        h -= 24\n    \n    if m > 59:\n        m -= 60\n    \n    if s > 59:\n        s -= 60\n    \n    return '{:02d}:{:02d}:{:02d}'.format(h,m,s)\n    \ndef change_time_format_n(t):\n    '''\n    Write a function to convert a time of HH:MM:SS format to hh:mm:ss format.\n    '''\n    \n    time_parts = t.split(':')\n    \n    if len(time_parts) < 2:\n        return t\n    \n    h = time_parts[0]\n    m = time_parts[1]\n    s = time_parts[2]\n    \n    if not m:\n        m = 0\n    \n    if not s:\n        s = 0\n    \n    h = int(h)\n    m = int(m)\n    s = int(s)\n    \n    if h > 23:\n        h -= 24\n    \n    if m > 59:\n        m -= 60\n    \n    if s > 59:\n        s -= 60\n    \n    return '{:02d}:{:02d}:{:02d}'.format(h,m,s)\n    \n    \ndef format_date(dt):\n    '''\n    Write a function to format a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    date_parts = dt.split('-')\n    \n    if len(date_parts) < 2:\n        return dt\n    \n    y = date_parts[0]\n    m = date_parts[1]\n    d = date_parts[2]\n    \n    if not m:\n        m = 0\n    \n    if not d:\n        d = 0\n    \n    y = int(y)\n    m = int(m)\n    d = int(d)\n    \n    if y % 4 == 0:\n        if y % 100!= 0:\n            y += 1\n        elif y % 100 == 0:\n            y += 1\n            m += 1\n            d += 1\n    \n    if d > 31:\n        d -= 31\n    \n    if m > 12:\n        m -= 12\n    \n    if m > 0:\n        m += 1\n        if m > 12:\n            m -= 12\n            d += 1\n    \n    \n    if m == 0 and d == 0:\n        if m == 1:\n            d = 0\n            if y % 100!= 0:\n                y += 1\n        elif y % 100 == 0:\n            y += 1\n    \n    return str(y) + '-' + str(m) + '-' + str(d)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[0]) == 1:\n        result[0] = '0'+result[0]\n        \n    if len(result[1]) == 1:\n        result[1] = '0'+result[1]\n        \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    return '-'+result[0]+'-'+result[1]+'-'+result[2]+'-'+result[3]\n    \ndef convert_to_date(dt):\n    '''\n    Convert a date to a date format.\n    '''\n    \n    \n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[0]) == 1:\n        result[0] = '0'+result[0]\n        \n    if len(result[1]) == 1:\n        result[1] = '0'+result[1]\n        \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    return '-'+result[0]+'-'+result[1]+'-'+result[2]+'-'+result[3]\n        \ndef get_month(dt):\n    '''\n    Convert a date to a month.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[1]) == 1:\n        result[1] = '0'+result[1]\n        \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    return int(result[1])*12+int(result[2])\n    \ndef get_day(dt):\n    '''\n    Convert a date to a day.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    return int(result[3])\n        \ndef get_year(dt):\n    '''\n    Convert a date to a year.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    return int(result[2])\n        \ndef get_week(dt):\n    '''\n    Convert a date to a week.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    return int(result[2])*7+int(result[3])\n        \ndef get_year_of_date(dt):\n    '''\n    Convert a date to a year of date.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    return int(result[2])\n    \ndef get_year_of_week(dt):\n    '''\n    Convert a date to a year of week.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    return int(result[2])*7+int(result[3])\n    \ndef get_day_of_week(dt):\n    '''\n    Convert a date to a day of week.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    return int(result[2])*7+int(result[3])\n    \ndef get_week_of_year(dt):\n    '''\n    Convert a date to a week of year.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    return int(result[2])*7+int(result[3])\n        \ndef get_month_of_date(dt):\n    '''\n    Convert a date to a month of date.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    return int(result[2])*12+int(result[3])\n        \ndef get_month_of_week(dt):\n    '''\n    Convert a date to a month of week.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    return int(result[2])*7+int(result[3])\n    \ndef get_day_of_year(dt):\n    '''\n    Convert a date to a day of year.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    if len(result[2]) == 1:\n        result[2] = '0'+result[2]\n        \n    \n    return int(result[2])*365+int(result[3])+int(result[4])\n    \ndef get_week_of_month(dt):\n    '''\n    Convert a date to a week of month.\n    '''\n    \n    if not dt:\n        return None\n        \n    result = dt.split('-')\n    if len(result[3]) == 1:\n        result[3] = '0'+result[3]\n        \n    \n    if len(resul"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(' ')\n    new_date =''.join([dt[0], dt[1], dt[2], dt[3]])\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = dt.split('-')\n    return '{}-{}-{}'.format(int(y), int(m), int(d))\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt=dt.replace('-','_')\n    new_dt=new_dt.replace('-','_')\n    new_dt=new_dt.replace('_','-')\n    new_dt=new_dt.replace('.','-')\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.search(r\"(\\d\\d)-(\\d\\d)-(\\d\\d)\", dt)\n    day = m.group(1)\n    month = m.group(2)\n    year = m.group(3)\n    \n    formatted_date = str(day) + \"-\" + str(month) + \"-\" + str(year)\n    return formatted_date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = dt.split(\"-\")\n    new_day = \"\"\n    if int(day) < 10:\n        new_day = \"0\" + day\n    elif int(day) < 100:\n        new_day = \"0\" + str(int(day) + 10)\n    else:\n        new_day = str(int(day) + 10)\n    day_list = [int(i) for i in day.split(\"-\")]\n    month_list = [int(i) for i in month.split(\"-\")]\n    new_year = int(year) + month_list[2] * 100 + day_list[2] * 100\n    return new_year, new_day\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.count('/') == 4:\n        # if the date is in the format \"MM/DD/YYYY\", assume that it is a month and do it the hard way\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n        dt = dt.replace('/', '-')\n    elif dt.count('/') == 3:\n        # if the date is in the format \"MM-DD\", assume it is a day and do it the hard way\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n    elif dt.count('/') == 2:\n        # if the date is in the format \"MM-DD\", assume it is a month and do it the hard way\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n        dt = dt.replace('-', '-')\n    elif dt.count('/') == 1:\n        # if the date is in the format \"MM-DD\", assume it is a month and do it the hard way\n        dt = dt.replace('-', '-')\n    elif dt.count('/') == 0:\n        # if the date is in the format \"YYYY-MM-DD\", assume it is a month and do it the hard way\n        dt = dt.replace('-', '-')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace(\"-\", \"\").replace(\" \", \"\").replace(\"/\", \"-\")\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    \n    return dt[0] + '-' + dt[1] + '-' + dt[2] + '-' + dt[3] + '-' + dt[4]\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    # for every element in the list\n    for i in range(length):\n        for j in range(length - i - 1):\n            # Pick the smallest one as pivot\n            pivot = j\n            for k in range(j, length):\n                if my_list[k] < my_list[pivot]:\n                    pivot = k\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j-=gap\n            my_list[j] = temp\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # store the length of the array\n    length = n\n    # store current position\n    pos = 0\n    # create loop\n    while pos < n:\n        # find position where current position is less than current position\n        # put current position in bracket to go to next position\n        while pos < length and my_list[pos] < my_list[pos + 1]:\n            # increment pos\n            pos += 1\n        # if current position is not less than the next position\n        if pos < length:\n            # put current position in bracket to go to next position\n            my_list[pos], my_list[pos + 1] = my_list[pos + 1], my_list[pos]\n            # move to the next position\n            pos += 1\n        # increment length by 1\n        length -= 1\n    \n    # return\n    return my_list\n    "
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    while size > 1:\n        #print(size)\n        for i in range(0, size-1):\n            j = i\n            while j >= 0 and my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n                j -= 1\n        #print(my_list)\n        size = size - 1\n    #print(my_list)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    count = 0\n    while count < len(my_list):\n        \n        for i in range(0, len(my_list) - count, 1):\n            j = i\n            while my_list[j] > my_list[j+1] and j>0:\n                temp = my_list[j]\n                my_list[j] = my_list[j+1]\n                my_list[j+1] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            curr_element = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > curr_element:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = curr_element\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def sort(array, n):\n        '''\n        Split an array into sub-arrays to calculate the mean.\n        '''\n        i = 0\n        while i < n:\n            j = i+1\n            while j < n:\n                if array[i] > array[j]:\n                    array[i], array[j] = array[j], array[i]\n                j += 1\n            i += 1\n    \n    def shell_sort_helper(arr, n):\n        '''\n        Implementation of shell sort.\n        '''\n        if n <= 1:\n            return\n        # Divide the array into sub-arrays\n        mid = n//2\n        arr[:] = arr[:mid]\n        # Repeat shell sort for the sub-arrays\n        shell_sort_helper(arr, mid)\n        shell_sort_helper(arr, n-mid)\n        # Merge the sub-arrays into one.\n        for i in range(mid, n):\n            arr[i], arr[n-i] = arr[n-i], arr[i]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] or test_tup2[0], test_tup1[1] or test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return test_tup1, test_tup2\n    else:\n        return (test_tup1[0], test_tup2[0]), (test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tup1,tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0] and test_tup1[1] == test_tup2[1]) or (test_tup1[0]!= test_tup2[0] and test_tup1[1] == test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return [test_tup1, test_tup2]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = {}\n    result[\"test_tup1\"] = test_tup1\n    result[\"test_tup2\"] = test_tup2\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [x for x in zip(*test_tup1) if x[1] == x[0]], [x for x in zip(*test_tup2) if x[1] == x[0]]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code goes here\n    test_tup_1 = test_tup1[0]\n    test_tup_2 = test_tup2[0]\n    return (test_tup_1,test_tup_2)\n    # return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ''\n    for i in range(len(test_tup1)):\n        result += str(test_tup1[i] + test_tup2[i])\n    return result\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    def number_of_parabola(a,b,c):\n        '''\n        Write a function to find number of parabola.\n        '''\n        if (a + b + c) % 2 == 0:\n            return ((a + b + c) // 2)\n        else:\n            return None\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    phi = a + (b*b - 4*a*c)/(2*b)\n    return (1/3)*np.sqrt(2) * (np.arccos(np.sqrt(b*b - 4*a*c)/(2*b)) - np.arccos(np.sqrt(a*a - 4*b*c)/(2*b))) + phi\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(a,b,c)\n    return a*(b**2) + c*b\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a==0 and b==0 and c==0:\n        return 0\n    if a==0 and b==0:\n        return (-b+c)\n    if b==0 and c==0:\n        return (a*a)/2\n    if a==0 and c==0:\n        return (b**2)-(2*a*b)\n    if b==0 and c==0:\n        return (a**2)+c\n    if a==0 and b==0:\n        return (b**2)-(2*c*b)\n    if b==0 and c==0:\n        return (a**2)-(c*a)\n    if b==0 and c==0:\n        return (2*a*b)-(c*a)\n    if a==0 and b==0:\n        return (b**2)-(2*c*b)\n    if a==0 and c==0:\n        return (b**2)-(2*c*b)\n    if b==0 and c==0:\n        return (a**2)-(c*a)\n    if a==0 and b==0:\n        return (2*c*b)-(b*a)\n    if b==0 and c==0:\n        return (a**2)-(2*b*c)\n    if a==0 and c==0:\n        return (b**2)-(2*b*c)\n    if a==0 and b==0:\n        return (c**2)-(a*b)\n    if b==0 and c==0:\n        return (a**2)-(a*b)\n    if b==0 and c==0:\n        return (2*a*b)-(c*a)\n    if a==0 and b==0:\n        return (2*b*c)-(b*c)\n    if a==0 and c==0:\n        return (2*b*c)-(2*a*b)\n    if b==0 and c==0:\n        return (2*a*b)-(a*b)\n    if a==0 and b==0:\n        return (2*a*b)-(b*c)\n    if a==0 and c==0:\n        return (2*a*b)-(2*b*c)\n    if b==0 and c==0:\n        return (a*c)-(a*b)\n    if b==0 and c==0:\n        return (b**2)-(a*b)\n    if b==0 and c==0:\n        return (2*a*b)-(c*a)\n    if a==0 and b==0:\n        return (2*a*b)-(b*a)\n    if a==0 and c==0:\n        return (b**2)-(2*c*b)\n    if a==0 and b==0:\n        return (2*c*b)-(a*b)\n    if a==0 and c==0:\n        return (2*b*c)-(c*a)\n    if a==0 and b==0:\n        return (a*b)-(a*b)\n    if b==0 and c==0:\n        return (a*b)-(b*c)\n    if a==0 and b==0:\n        return (b**2)-(a*b)\n    if a==0 and c==0:\n        return (2*a*b)-(c*a)\n    if b==0 and c==0:\n        return (a**2)-(a*b)\n    if b==0 and c==0:\n        return (a*b)-(2*c*b)\n    if a==0 and b==0:\n        return (2*a*b)-(a*b)\n    if a==0 and c==0:\n        return (b**2)-(a*b)\n    if a==0 and b==0:\n        return (a**2)-(2*b*c)\n    if a==0 and c==0:\n        return (b**2)-(2*b*c)\n    if b==0 and c==0:\n        return (c**2)-(a*b)\n    if a==0 and b==0:\n        return (2*c*b)-(c*a)\n    if a==0 and c==0:\n        return (2*c*b)-(b*a)\n    if b==0 and c==0:\n        return (a**2)-(2*a*b)\n    if b==0 and c==0:\n        return (a**2)-(b*c)\n    if a==0 and b==0:\n        return (2*b*c)-(a*b)\n    if a==0 and c==0:\n        return (b**2)-(a*b)\n    if a==0 and b==0:\n        return (2*a*b)-(c*a)\n    if b==0 and c==0:\n        return (a**2)-(2*a*c)\n    if b==0 and c==0:\n        return (a**2)-(2*c*b)\n    if a==0 and b==0:\n        return (c**2)-(a*b)\n    if a==0 and c==0:\n        return (b**2)-(c*a)\n    if a==0 and b==0:\n        return (2*c*b)-(b*a)\n    if a==0 and c==0:\n        return (2*b*c)-(c*a)\n    if b==0 and c==0:\n        return (a**2)-(b*c)\n    if a==0 and b==0:\n        return (2*b*c)-(2*c*b)\n    if a==0 and c==0:\n        return (c**2)-(b*c)\n    if a==0 and b==0:\n        return (2*b*c)-(2*a*b)\n    if b==0 and c==0:\n        return (a**2)-(2*a*c)\n    if a==0 and b==0:\n        return (2*b*c)-(2*c*b)\n    if a==0 and c==0:\n        return (a**2)-(2*b*c)\n    if b==0 and c==0:\n        return (2*b*c)-(2*a*c)\n    if a==0 and b==0:\n        return (2*a*b)-(a*c)\n    if a==0 and c==0:\n        return (a**2)-(2*c*a)\n    if b==0 and c==0:\n        return (2*a*b)-(a*b)\n    if a==0 and b==0:\n        return (b**2)-(2*a*b)\n    if a==0 and c==0:\n        return (a**2)-(2*c*a)\n    if a==0 and b==0:\n        return (2*a*b)-(b*a)\n    if b==0 and c==0:\n        return (a**2)-(a*c)\n    if a==0 and b==0:\n        return (a**2)-(b*b)\n    if a==0 and c==0:\n        return (a**2)-(a*a)\n    if a==0 and b==0:\n        return (2*b*a)-(a*a)\n    if b==0 and c==0:\n        return (2*a*b)-(a*b)\n    if b==0 and c==0:\n        return (a**2)-(a*b)\n    if a==0 and b==0:\n        return (2*a*c)-(c*b)\n    if a==0 and c==0:\n        return (2*b*a)-(c*a)\n    if b==0 and c==0:\n        return (a**2)-(b*c)\n    if a==0 and b==0:\n        return (2*c*b)-(b*a)\n    if a==0 and c==0:\n        return (b**2)-(a*b)\n    if a==0 and b==0:\n        return (a**2)-(b*c)\n    if a==0 and c==0:\n        return (a**2)"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # TODO: Write your code here\n    x = (b**2) - (4 * a * c)\n    return round(x, 3)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a==b==c:\n        return None\n    elif b<a<c:\n        p=(a*a+b*b-c*c)\n        if p==0:\n            return (0,0)\n        else:\n            x1= (-b+p)/(2*a)\n            x2= (-b-p)/(2*a)\n            return (x1,x2)\n    elif a>b:\n        p=(a*a+b*b-c*c)\n        if p==0:\n            return (0,0)\n        else:\n            x1= (-b-p)/(2*a)\n            x2= (-b+p)/(2*a)\n            return (x1,x2)\n    else:\n        p=(a*a+b*b-c*c)\n        if p==0:\n            return (0,0)\n        else:\n            x1= (-b-p)/(2*a)\n            x2= (-b+p)/(2*a)\n            return (x1,x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return c\n    elif b == 0:\n        return c\n    else:\n        return parabola_directrix(b, a, c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # create a list to store the coordinates\n    coordinate = []\n    # use the for loop to write the coordinates\n    for i in range(len(a)):\n        # store the coordinates in a list\n        coordinate.append((i, a[i]+b[i]+c[i]))\n    return coordinate\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x0 = -b / (2 * a) \n    x1 = x0 - (a ** 2) / (2 * a)\n    x2 = (a ** 2) / (4 * a)\n    x3 = x0 + (a ** 2) / (4 * a)\n    return '%.2f, %.2f, %.2f' % (x0, x1, x2), '%.2f, %.2f, %.2f' % (x3, x1, x2)\n    \n    \ndef parabola_hermite(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x0 = b / (2 * a)\n    x1 = (a ** 2) / (4 * a)\n    x2 = 2 * a * (1 - x0)\n    x3 = 2 * (1 - x0)\n    return '%.2f, %.2f, %.2f' % (x0, x1, x2), '%.2f, %.2f, %.2f' % (x3, x1, x2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                common_elements.append(element1)\n    if len(common_elements) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    \n    for element in list1:\n        if element in list2:\n            common+=1\n        else:\n            return False\n        \n    if common == len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = list1[0]\n    for i in list2:\n        if i == common:\n            common = False\n        else:\n            common = True\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    i = 0\n    \n    # Build dictionary of element names and numbers\n    dictionary = {}\n    \n    # Check the length of two lists\n    if len(list1)!= len(list2):\n        return False\n    \n    # Loop through both lists\n    while i < len(list1):\n        if list1[i] not in dictionary.keys():\n            dictionary[list1[i]] = 1\n        else:\n            dictionary[list1[i]] += 1\n        i += 1\n        \n    # Check if any common element is in the dictionary\n    if len(dictionary.keys()) == 0:\n        return True\n    else:\n        return False\n    \n    \n    # Find all common elements in both lists\n    common_elements = []\n    \n    for key in dictionary.keys():\n        if key not in common_elements:\n            common_elements.append(key)\n            \n    # Return true if there are two elements with the same value\n    if len(common_elements) == 2:\n        return True\n    else:\n        return False\n        \n    \n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) > 0 and len(list2) > 0 and list1[0] == list2[0]\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        for element in list1:\n            if element in list2:\n                list2.remove(element)\n        if len(list2) == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in list1:\n        if i in list2:\n            common_elements.append(i)\n    if len(common_elements) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) == len(list2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def two_trapezium(base1,base2,height):\n        l1=0\n        l2=0\n        for i in range(height):\n            l1=base1+base2*i\n            l2=base1-base2*i\n            if l1>l2:\n                base1=l2\n                base2=l1\n            else:\n                base2=l1\n        return (base1,base2)\n    height=len(height)\n    base1=base1\n    base2=base2\n    return two_trapezium(base1,base2,height)[0]\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height=int(height)\n    if height>=0:\n        if base1>base2:\n            height=height+1\n            base=base2\n        else:\n            height=height+1\n            base=base1\n    if height<0:\n        height=0\n        base=base1\n    return(base)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length = []\n    for i in range(int(height/2)):\n        length.append((base1[i] + base2[i])/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(s1,s2):\n        if(s1<=s2):\n            return (s1+s2)//2\n        else:\n            return s1+s2\n    \n    def median_trapezium_pythag(height,base):\n        s1,s2 = base[0],base[1]\n        for i in range(0,height):\n            base[i] = trapezium(base[i],base[i+1])\n        return base\n    \n    def median_trapezium_pythag_manual(height,base):\n        return height/2\n        \n    if(base1>=base2):\n        raise ValueError(\"The base must be greater than the base of the first point.\")\n    if(base1<=0):\n        raise ValueError(\"The base must be greater than or equal to 0.\")\n    if(base1>base2):\n        raise ValueError(\"The base must be less than the base of the second point.\")\n    \n    base = base_trapezium(base1,base2,height)\n    \n    if(base1>base2):\n        return median_trapezium(base,base1,height)\n    else:\n        return median_trapezium(base,base2,height)\n    \n    if(base1==base2):\n        return base1\n    \n    if(base1<base2):\n        return median_trapezium_pythag(height,base)\n    else:\n        return median_trapezium_pythag_manual(height,base)\n    \n    \n    \n    "
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #Calculate the height for each base\n    base1_height = float(base1[1])\n    base2_height = float(base2[1])\n    \n    #Calculate the trapezium base\n    trapezium_base = (base1_height+base2_height)/2\n    \n    #Calculate the trapezium sides\n    trapezium_side1 = base1_height + base2_height\n    trapezium_side2 = base1_height + base2_height + trapezium_base\n    \n    #Calculate the trapezium base from height\n    base_trapezium = ((height-trapezium_base)*(height/trapezium_base))**(1/2)\n    \n    #Calculate the trapezium sides from height\n    side_trapezium = ((height-trapezium_side1)*(height/trapezium_side1))**(1/2)\n    \n    #Calculate the trapezium base from height and the side\n    trapezium_base_side = ((height-trapezium_base)*side_trapezium)**(1/2)\n    \n    #Return the median\n    return round(trapezium_base_side/2,2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #pass\n    i = 0\n    median = 0\n    while i < len(base1):\n        if base1[i] < base2[i]:\n            median = base1[i]\n            i+=1\n        else:\n            median = base2[i]\n            i+=1\n        if i == len(base1):\n            median = base2[i]\n            i+=1\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (0.5 * (base1 + base2) + height)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    else:\n        return base1 + base2 + height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(base1,base2,height):\n        if base1+base2>height:\n            return \"Too big!\"\n        else:\n            if base1>base2:\n                base1,base2 = base2,base1\n            base_median = (base1+base2)/2\n            t_length = 0\n            for i in range(base1,base2+1):\n                t_length += i\n            t_length = t_length / (base2-base1+1)\n            return t_length\n    t_length = trapezium(base1,base2,height)\n    if t_length>=median_trapezium(base1,base2,height):\n        return \"Median trapezium is too long!\"\n    elif t_length<=median_trapezium(base1,base2,height):\n        return \"Not a trapezium!\"\n    else:\n        return t_length\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    if height>0:\n        return base1+base2+height//2\n    else:\n        return base1+base2\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    if number > arr[-1]:\n        return False\n    for i in range(len(arr)-2):\n        if number < arr[i] and number > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n    \ndef check_more(arr, number):\n    '''\n    Write a function to check whether the entered number is more than the elements of the given array.\n    '''\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f'{arr[i]} is greater than {number}')\n            return True\n    print(f'{arr[i]} is greater than {number}')\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # check if number is greater than any element in array\n    if number > arr[-1]:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if(number > arr[0]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif arr[0] > number:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def is_alphabet(c):\n        return any(c.isalpha() or c =='' or c.isspace())\n    def is_special_char(c):\n        return c in string.punctuation + '!' + '?'\n    def is_number(c):\n        return c.isdigit()\n    def is_abbreviation(c):\n        return c in string.punctuation\n    def is_unicode(c):\n        return not is_special_char(c)\n    def is_hiragana_char(c):\n        return c in string.ascii_uppercase\n    def is_hiragana_word(c):\n        return c in string.ascii_lowercase\n    def is_hiragana_sosu(c):\n        return c in string.ascii_letters\n    def is_hiragana_other(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c)\n    def is_hiragana_other2(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_number(c)\n    def is_hiragana_other3(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_number(c)\n    def is_hiragana_other4(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other5(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other6(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other7(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other8(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other9(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other10(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other11(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other12(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other13(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other14(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other15(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other16(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other17(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other18(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other19(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other20(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other21(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other22(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other23(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other24(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other25(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other26(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other27(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other28(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other29(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other30(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other31(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other32(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other33(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other34(c):\n        return not is_hiragana_char(c) and is_hiragana_sosu(c) and is_special_char(c)\n    def is_hiragana_other35(c):\n    "
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"\\n\",\"\")\n    matches = []\n    for i in text:\n        if i == \"a\":\n            matches.append(\"a\")\n        elif i == \"b\":\n            matches.append(\"b\")\n        elif i == \"c\":\n            matches.append(\"c\")\n        elif i == \"d\":\n            matches.append(\"d\")\n        elif i == \"e\":\n            matches.append(\"e\")\n        elif i == \"f\":\n            matches.append(\"f\")\n        elif i == \"g\":\n            matches.append(\"g\")\n        elif i == \"h\":\n            matches.append(\"h\")\n        elif i == \"i\":\n            matches.append(\"i\")\n        elif i == \"j\":\n            matches.append(\"j\")\n        elif i == \"k\":\n            matches.append(\"k\")\n        elif i == \"l\":\n            matches.append(\"l\")\n        elif i == \"m\":\n            matches.append(\"m\")\n        elif i == \"n\":\n            matches.append(\"n\")\n        elif i == \"o\":\n            matches.append(\"o\")\n        elif i == \"p\":\n            matches.append(\"p\")\n        elif i == \"q\":\n            matches.append(\"q\")\n        elif i == \"r\":\n            matches.append(\"r\")\n        elif i == \"s\":\n            matches.append(\"s\")\n        elif i == \"t\":\n            matches.append(\"t\")\n        elif i == \"u\":\n            matches.append(\"u\")\n        elif i == \"v\":\n            matches.append(\"v\")\n        elif i == \"w\":\n            matches.append(\"w\")\n        elif i == \"x\":\n            matches.append(\"x\")\n        elif i == \"y\":\n            matches.append(\"y\")\n        elif i == \"z\":\n            matches.append(\"z\")\n        else:\n            matches.append(i)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = \"\"\n    # pattern = re.compile(r'a(.)b')\n    pattern = re.compile(r'a(.)b')\n    text = text.split(\"a\")\n    for word in text:\n        result = result + word\n    result = result.split(\"b\")\n    for word in result:\n        result = result + word\n    #print(result)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(\"text_match_one\")\n    # add more code here...\n    #print(text)\n    m = re.match(\"(.*a)|(.*b)\",text)\n    print(\"m.group(1) is:\" + m.group(1))\n    print(\"m.group(2) is:\" + m.group(2))\n    print(\"m.group(3) is:\" + m.group(3))\n    print(\"m.group(4) is:\" + m.group(4))\n    print(\"m.group(5) is:\" + m.group(5))\n    #print(text)\n    #print(m)\n    #print(m.group(0))\n    return m\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Retrieves the minimum number of characters that should be in the string and the maximum number of characters that can be in the string.\n    minimum_count = min(len(text), len(text.replace(' ', '').replace('&', '').replace('\"', '').replace(',', '')))\n    # Builds the string.\n    string = ''\n    for i in range(minimum_count):\n        string += text[i]\n    # Returns the string.\n    return string\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_copy = text.lower()\n    text_copy = re.sub('[^a-zA-Z0-9-\\s]',' ',text_copy)\n    text_match = re.findall(r'\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w\\s\\d\\-\\_]+\\w+[\\w"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.search('a(.*)b', text)\n    if m!= None:\n        return m.group(1)\n    else:\n        return ''\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern_a = r\"a[b]\\s*\\(?\\s*(.*?)\\s*\\)?\"\n    pattern_b = r\"b\\s*\\(?\\s*(.*?)\\s*\\)?\"\n    matches = re.findall(pattern_a, text)\n    matches.extend(re.findall(pattern_b, text))\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(\"a\", text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # I think if it finds an a followed by b, it will do the right thing\n    # if it finds b followed by a, it will do the wrong thing\n    # with b followed by a, it will not do the right thing, so if you find one followed by b, it will not do the wrong thing\n    pattern = re.compile('\\d+[a-z]*$')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    sum = 0\n    while n > 0 :\n        digit = n % 10\n        sum = sum * 10 + digit\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    try :\n        i = int(n)\n        i -= 1\n        j = 1\n        while (i/j) >= 0 :\n            i = i/j\n            j+=1\n        return j\n    except :\n        return 0\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    list = []\n    if n == 0 :\n        return ''\n    while n!= 0 :\n        n, r = divmod(n, 10)\n        list.append(r)\n    list.reverse()\n    \n    return list[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    i = n\n    \n    if(n%10 == 0) :\n        if(n//10 == 0):\n            return i % 10\n        else:\n            return i // 10\n    else:\n        return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    print (type(n))\n    if(type(n) is int) :\n        return (n%10)\n    else :\n        print(\"Error\")\n        exit()\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0:\n        if n % 10 == 0:\n            return int(n/10)\n        else:\n            return int(n%10)\n    else:\n        return 0\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(0,len(list1)):\n        if list1[i]<0:\n            neg.append(-list1[i])\n    return neg\n    \n    \ndef is_sorted(list1):\n    '''\n    Write a python function to test if a list is sorted in ascending order.\n    '''\n    if len(list1)==0 or len(list1)==1:\n        return True\n    if len(list1)==2 and list1[0]<=list1[1]:\n        return True\n    if len(list1)==2 and list1[1]<list1[0]:\n        return True\n    return False\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is palindrome.\n    '''\n    if string==string[::-1]:\n        return True\n    return False\n    \n    \ndef flip_index(list1):\n    '''\n    Write a python function to flip the index of a list\n    '''\n    pos = 0\n    for i in range(len(list1)):\n        list1[pos], list1[i] = list1[i], list1[pos]\n        pos+=1\n    return list1\n    \n    \ndef reverse_index(list1):\n    '''\n    Write a python function to reverse the index of a list\n    '''\n    pos = len(list1)-1\n    for i in range(len(list1)):\n        list1[i],list1[pos] = list1[pos],list1[i]\n        pos-=1\n    return list1\n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicate values from a list.\n    '''\n    list1 = list(dict.fromkeys(list1))\n    return list1\n    \n    \ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    str = string.replace(\" \",\"\")\n    print(str)\n    rev = \"\"\n    for i in range(len(str)):\n        rev += str[i].upper()\n    return rev\n    \n    \ndef get_int_input(str):\n    '''\n    Write a python function to get an integer from the user\n    '''\n    userInput = input(str)\n    try:\n        userInput = int(userInput)\n        return userInput\n    except:\n        print(\"enter a number\")\n        return get_int_input(str)\n        \n        \ndef get_float_input(str):\n    '''\n    Write a python function to get a float from the user\n    '''\n    userInput = input(str)\n    try:\n        userInput = float(userInput)\n        return userInput\n    except:\n        print(\"enter a number\")\n        return get_float_input(str)\n        \n        \ndef get_str_input(str):\n    '''\n    Write a python function to get a string from the user\n    '''\n    userInput = input(str)\n    try:\n        userInput = str(userInput)\n        return userInput\n    except:\n        print(\"enter a number\")\n        return get_str_input(str)\n        \n        \ndef get_list_input(str):\n    '''\n    Write a python function to get a list from the user\n    '''\n    userInput = input(str)\n    try:\n        userInput = userInput.split(',')\n        userInput = list(dict.fromkeys(userInput))\n        return userInput\n    except:\n        print(\"enter a number\")\n        return get_list_input(str)\n        \n        \ndef get_str_index(str,str_input):\n    '''\n    Write a python function to get a string index from a string\n    '''\n    s = list(str)\n    index = -1\n    for i in range(len(s)):\n        if str_input==s[i]:\n            index=i\n            break\n    return index\n    \n    \ndef print_dict(dict1):\n    '''\n    Write a python function to print a dictionary\n    '''\n    for i in dict1:\n        print(i,dict1[i])\n        \n        \ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a string\n    '''\n    str = str.lower()\n    words = dict()\n    for i in str:\n        if i not in words:\n            words[i] = 0\n        words[i] += 1\n    for i in words:\n        if i == \" \":\n            continue\n        words[i] = words[i]\n        words[i] = str(words[i])\n        words[i] = int(words[i])\n    return words\n    \n    \ndef merge_sort(arr):\n    '''\n    Write a python function to merge a sorted array into a new sorted array.\n    '''\n    if len(arr)==0:\n        return arr\n    \n    mid = int(len(arr)/2)\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    merged = []\n    \n    for i in range(len(left)):\n        merged.append(left[i]+right[i])\n    \n    return merged\n    \n    \ndef partition(arr,l,r):\n    '''\n    Write a python function to partition a sorted array into two sub-arrays.\n    '''\n    if l==r:\n        return arr,arr[:r+1]\n    elif l>=r:\n        pivot = arr[l]\n        p = l\n        q = r\n        while p<q:\n            if arr[p]<=pivot:\n                if arr[q]>=pivot:\n                    arr[q],arr[p] = arr[p],arr[q]\n                    q+=1\n                else:\n                    p+=1\n            else:\n                p+=1\n        arr[l:q+1] = arr[q:p]\n        arr[q:p] = []\n        return arr,arr[l:q+1]\n    \n    \ndef quick_sort(arr):\n    '''\n    Write a python function to sort a sorted array using partition, merge and quick sort\n    '''\n    if len(arr)==0:\n        return arr\n        \n    def partition(arr,l,r):\n        if l<r:\n            q = l\n            for i in range(l,r):\n                if arr[i]<arr[q]:\n                    arr[i],arr[q] = arr[q],arr[i]\n                    q+=1\n                if q==l:\n                    break\n            arr[l],arr[q] = arr[q],arr[l]\n        return arr\n    \n    \n    def merge(arr,l,r):\n        if l==r:\n            return arr\n        if l<r:\n            m = (l+r)//2\n            left,right = merge(arr,l,m),merge(arr,m+1,r)\n            left = partition(left,l,r)\n            right = partition(right,m+1,r)\n            return left + right\n        \n    arr = arr[:]\n    return merge(arr,0,len(arr)-1)\n    \n    \ndef odd_even(arr):\n    '''\n    Write a python function to count the number of even and odd numbers in a list\n    '''\n    even = 0\n    odd = 0\n    for i in arr:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even,odd\n    \n    \ndef binary(arr):\n    '''\n    Write a python function to find the largest and smallest element from a list\n    '''\n    if len(arr)==0:\n        return -1, -1\n    \n    max, min = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n        if arr[i] < min:\n            min = arr[i]\n    return max, min\n    \n    \ndef merge_sort(arr):\n    '''\n    Write "
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for x in list1:\n        if x < 0:\n            list1.remove(x)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1_neg = []\n    for num in list1:\n        list1_neg.append(-num)\n    return list1_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if(i<0):\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #return list1[::-1]\n    return list1[-1::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in list1:\n        if i < 0:\n            negative.append(i)\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_nos.append(list1[i])\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        neg.append(i)\n    return neg\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    while True:\n        if str1 == str(str1)[::-1]:\n            return str(str1)[::-1]\n        else:\n            print('This string does not have an odd length. Enter a new string with even characters.')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    def remove_odd_char(string):\n        if string[0]%2!= 0:\n            return string[0]\n        else:\n            string = string[1:]\n            string = string[:-1]\n            return string\n    result = remove_odd_char(str1)\n    print(result)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o', '')\n    \ndef print_list(alist):\n    '''\n    Write a function to print a list.\n    '''\n    return alist\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = str(str1).split(\" \")\n    odd_str.remove(odd_str[0])\n    odd_str.remove(odd_str[-1])\n    new_str = \" \".join(odd_str)\n    return new_str\n    \nprint(remove_odd(\"My name is abcdefghijklmnopqrstu\"))\nprint(remove_odd(\"His name is kaggle\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove_odd(\"This is a test string\"))\nprint(remove"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create a variable to store the odd characters\n    odd_chars = ''\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    remove = ['o']\n    for char in remove:\n        if char in str1:\n            str1 = str1.replace(char, '')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = list(str1)\n    for index, char in enumerate(lst):\n        if index % 2!= 0:\n            lst[index] = char\n    return \"\".join(lst)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o','0')\n    # write your code here\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str=''\n    for i in str1:\n        if i % 2:\n            new_str+=i\n    return new_str\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[0] > pair[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Bidirectional data structure (List)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for bidirectional in test_list:\n        if bidirectional[1] == bidirectional[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    num_test = len(test_list)\n    \n    for i in range(num_test):\n        for j in range(i+1, num_test):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                if test_list[i][0] == 'B':\n                    test_list[i][0] = 'S'\n                    test_list[j][0] = 'B'\n                    test_list[j][1] = 'S'\n                elif test_list[j][0] == 'S':\n                    test_list[i][0] = 'B'\n                    test_list[j][0] = 'S'\n                    test_list[i][1] = 'B'\n                    test_list[j][1] = 'S'\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_pair = 0\n    for pair in test_list:\n        if (pair[0]==pair[1]):\n            count_pair += 1\n    return count_pair\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    output_dict = {}\n    for i in range(len(test_list)-1):\n        if test_list[i][1] > test_list[i+1][0]:\n            output_dict[i] = test_list[i]\n            output_dict[i+1] = test_list[i+1]\n    return output_dict\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_count = 0\n    for i in range(len(test_list) - 1):\n        total_count += 1\n        if i > 0:\n            if test_list[i] > test_list[i - 1]:\n                total_count += 1\n    return total_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_dir = 0\n    count_bidir = 0\n    for i in test_list:\n        if type(i) == tuple:\n            count_dir += 1\n            if type(i[0]) == tuple:\n                count_bidir += 1\n        else:\n            count_bidir += 1\n    return count_dir, count_bidir\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # tuple values are represented as tuples\n    # tuple are named (a, b)\n    # a and b are not used\n    # use a to get the first element in a tuple\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # TODO: Write your solution here\n    return L[0]"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L)==0:\n        return 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # YOUR CODE HERE\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # multiple to single\n    return \",\".join(map(str, L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # L is a list\n    # Return the list after squaring the element in list\n    def square(L):\n        return [x**2 for x in L]\n    return square(L)\n    \n    # L is a list\n    # Return a copy of L with the elements of L squared\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**2)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a copy of L with the elements of L squared multiplied by 2\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**2*2)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a copy of L with the elements of L squared multiplied by 3\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**2*3)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list\n    # Return a list containing the square root of every element in the list\n    def square(L):\n        L2=[]\n        for x in L:\n            L2.append(x**0.5)\n        return L2\n    return square(L)\n    \n    # L is a list"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(L)\n    for i in range(len(L)):\n        L[i] = int(L[i])\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    try:\n        a = L[0]\n        for i in range(1, len(L)):\n            a += L[i]\n        return a\n    except Exception:\n        return None\n        \n    \n    \n    \ndef list_to_single(L,maxlen):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    try:\n        a = L[0]\n        for i in range(1, len(L)):\n            a += L[i]\n        a = list(a)[:maxlen]\n        return a\n    except Exception:\n        return None\n        \n    \n    \ndef add_exp(x,y):\n    '''\n    Add an exponent to a number.\n    '''\n    try:\n        a = x**y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_power(x,y):\n    '''\n    Add a power to a number.\n    '''\n    try:\n        a = x**y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_dot(x,y):\n    '''\n    Add a dot to a number.\n    '''\n    try:\n        a = x*y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_sqrt(x):\n    '''\n    Add a square root to a number.\n    '''\n    try:\n        a = math.sqrt(x)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_div(x,y):\n    '''\n    Add a division to a number.\n    '''\n    try:\n        a = x/y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_lcm(x,y):\n    '''\n    Add a LCM to a number.\n    '''\n    try:\n        a = math.gcd(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_lcm_base(x,y):\n    '''\n    Add a LCM with base x and y.\n    '''\n    try:\n        a = math.gcd(x,y)\n        return a\n    except Exception:\n        return None\n        \n    \n    \ndef add_trunc(x,y):\n    '''\n    Add a truncation to a number.\n    '''\n    try:\n        a = math.trunc(x/y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_sgn(x):\n    '''\n    Add a sign to a number.\n    '''\n    try:\n        a = math.copysign(1,x)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_exp(x,y):\n    '''\n    Add an exponent to a number.\n    '''\n    try:\n        a = math.exp(x/y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_power(x,y):\n    '''\n    Add a power to a number.\n    '''\n    try:\n        a = math.pow(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_dot(x,y):\n    '''\n    Add a dot to a number.\n    '''\n    try:\n        a = x*y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_sqrt(x):\n    '''\n    Add a square root to a number.\n    '''\n    try:\n        a = math.sqrt(x)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_div(x,y):\n    '''\n    Add a division to a number.\n    '''\n    try:\n        a = x/y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_lcm(x,y):\n    '''\n    Add a LCM to a number.\n    '''\n    try:\n        a = math.gcd(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_lcm_base(x,y):\n    '''\n    Add a LCM with base x and y.\n    '''\n    try:\n        a = math.gcd(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_trunc(x,y):\n    '''\n    Add a truncation to a number.\n    '''\n    try:\n        a = math.trunc(x/y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_sgn(x):\n    '''\n    Add a sign to a number.\n    '''\n    try:\n        a = math.copysign(1,x)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_exp(x,y):\n    '''\n    Add an exponent to a number.\n    '''\n    try:\n        a = math.exp(x/y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_power(x,y):\n    '''\n    Add a power to a number.\n    '''\n    try:\n        a = math.pow(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_dot(x,y):\n    '''\n    Add a dot to a number.\n    '''\n    try:\n        a = x*y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_sqrt(x):\n    '''\n    Add a square root to a number.\n    '''\n    try:\n        a = math.sqrt(x)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_div(x,y):\n    '''\n    Add a division to a number.\n    '''\n    try:\n        a = x/y\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_lcm(x,y):\n    '''\n    Add a LCM to a number.\n    '''\n    try:\n        a = math.gcd(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_lcm_base(x,y):\n    '''\n    Add a LCM with base x and y.\n    '''\n    try:\n        a = math.gcd(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_trunc(x,y):\n    '''\n    Add a truncation to a number.\n    '''\n    try:\n        a = math.trunc(x/y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_sgn(x):\n    '''\n    Add a sign to a number.\n    '''\n    try:\n        a = math.copysign(1,x)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_exp(x,y):\n    '''\n    Add an exponent to a number.\n    '''\n    try:\n        a = math.exp(x/y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_power(x,y):\n    '''\n    Add a power to a number.\n    '''\n    try:\n        a = math.pow(x,y)\n        return a\n    except Exception:\n        return None\n    \n    \n    \ndef add_dot(x,y):\n    '''\n    Add a dot to a number.\n    '''\n    try:\n        a = x*y\n        return a\n    except Exception:\n        return None\n    \n    "
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return int(''.join(str(L))"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile('\\b([^\\s]*)(\\w*)([^\\s]*)(\\w*)([^\\s]*)\\b')\n    adverbs = adverb_pattern.finditer(text)\n    for adverb in adverbs:\n        #print(adverb)\n        a,b,c,d = adverb.start(), adverb.end(), adverb.group(), adverb.group(3).strip()\n        #print(a,b,c,d)\n        if c == 'noun' and d == 'adj':\n            #print(a,b,c,d)\n            pos = a+b\n            #print(pos)\n        elif c == 'noun' and d == 'adv':\n            pos = a+b\n            #print(pos)\n        elif c == 'adjective' and d == 'noun':\n            pos = a+b\n            #print(pos)\n        elif c == 'adjective' and d == 'adverb':\n            pos = a+b\n            #print(pos)\n        else:\n            pos = a\n        #print(pos)\n    return pos\ndef find_verb_positions(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verb_pattern = re.compile('[^\\w]*(?:[s]n|s|\\bw|\\b(?:\\bw|\\b(?:tw|\\btw|\\b(?:tw|\\b(?:su|st|a|a|au|au|sa|sa|st|sta|st|st|st|st|st|st|st|st|st|ste|ste|ste|ste|ste|ste|ste|ste|ste|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|st|s"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not text:\n        return\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def is_adverb(word):\n        '''\n        Return True if a word is an adverb.\n        '''\n        return (word[0].upper() == 'A' and word[1] == 'E') or word[0].upper() == 'A' and word[1] == 'I'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regex\n    adverb_position = re.search(r'(?:([A-Z]+)(?:[A-Z]+)?)',text)\n    # create adverb\n    adverb = adverb_position.group(2)\n    # format adverb\n    adverb = adverb.lower()\n    # format adverb\n    adverb = adverb.replace(\" \",\"\")\n    # find where the adverb starts\n    for i in range(len(adverb)-1):\n        if adverb[i] == \"a\":\n            adverb_start = i\n        if adverb[i] == \"e\":\n            adverb_end = i\n    # create the adverb's position\n    adverb_position = text.find(adverb)\n    adverb_position = adverb_position - adverb_start\n    # make it easy to find the adverb's position\n    adverb_position = adverb_position - 1\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    results = {}\n    words = text.split(' ')\n    for word in words:\n        if word in ADVERBS.keys():\n            adverb = ADVERBS[word]\n            adverb_position = ADVERBS[adverb].get('adverb_position', None)\n            if adverb_position:\n                results[word] = adverb_position\n    return results\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x = text.split()\n    adverbs_list = []\n    adverbs_positions = []\n    for i in range(len(x)):\n        if x[i] == 'a' or x[i] == 'an':\n            adverbs_list.append(x[i])\n            adverbs_positions.append(i)\n    return adverbs_list,adverbs_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['be', 'with', 'for', 'and', 'with', 'of', 'and', 'with', 'and', 'of', 'that', 'because', 'for', 'to', 'by', 'if', 'who', 'but', 'where', 'the', 'and', 'that', 'whether', 'because', 'who', 'when', 'where', 'for', 'which', 'this', 'if', 'who', 'he', 'which', 'to', 'that', 'that', 'when', 'which', 'who', 'when', 'because','so', 'and', 'where', 'when', 'which', 'all', 'he', 'that']\n    pattern = re.compile(r'(%s)'%'|'.join(adverbs))\n    position = pattern.findall(text)\n    print(position)\n    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find the first adverb\n    adverb = text[0]\n    if adverb[0] == 'a' or adverb[0] == 'e' or adverb[0] == 'i' or adverb[0] == 'o' or adverb[0] == 'u':\n        adverb_positions = {}\n        # check if there is an adverb\n        if adverb[0] == 'a':\n            # get the adverb\n            adverb_position = 0\n            # get the index where it starts\n            index = 1\n            while index < len(text):\n                if text[index] == 'a':\n                    adverb_position = index\n                    break\n                index += 1\n            # check if there is an adverb\n            if len(text) > adverb_position + 1 and text[adverb_position + 1] == 'e':\n                adverb_position += 1\n            # move to the end of the text\n            adverb_positions['position'] = adverb_position\n        else:\n            # check if there is an adverb\n            adverb_position = 0\n            # get the index where it starts\n            index = 1\n            while index < len(text):\n                if text[index] == 'e' or text[index] == 'i' or text[index] == 'o' or text[index] == 'u':\n                    adverb_position = index\n                    break\n                index += 1\n            # check if there is an adverb\n            if len(text) > adverb_position + 1 and text[adverb_position + 1] == 'a':\n                adverb_position += 1\n            # move to the end of the text\n            adverb_positions['position'] = adverb_position\n        # return\n        return adverb_positions\n    else:\n        # return\n        return {}\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    for i in range(len(text)):\n        if text[i] == '.':\n            adverb = text[i-1]\n            result.append(adverb)\n            i += 1\n        else:\n            break\n    for i in range(len(text) - 1, -1, -1):\n        if text[i] == '.':\n            adverb = text[i+1]\n            result.append(adverb)\n            i -= 1\n        else:\n            break\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'((?:[Ee][+-]?[^0-9])+)(?=,|$)'\n    match = re.search(regex, text)\n    if match:\n        pos = int(match.group(1))\n    return pos\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                area += pow(l[i][k] - l[j][k], 2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l <= 1:\n        print(\"ERROR: can't calculate surface area of a cube with less than 2 sides\")\n        return 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l[0]*l[1]*l[2])\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S=0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                S += l[i][j][k]*l[i][j][k]\n    return S\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 0.25*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area_cube = (l**3) * np.pi\n    return(area_cube)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(1,l+1):\n        for j in range(1,l+1):\n            for k in range(1,l+1):\n                area += 4*i*j*k\n    print(area)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(4):\n        area += 2 * i * l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # define area of cube\n    area_of_cube = (l ** 2) * (3 / 2)\n    return area_of_cube\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    s = 0\n    for i in nums:\n        if i > 0:\n            s += 1\n    return s/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num >= 0:\n            new_nums.append(num)\n    \n    if len(new_nums) == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(new_nums)):\n        if new_nums[i] >= 0:\n            count += 1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)==0:\n        return -1\n    i = 0\n    count = 0\n    while i<len(nums):\n        if nums[i]>0:\n            count = count + 1\n        i = i+1\n    if count>0:\n        return count/len(nums)\n    else:\n        return -1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positive += 1\n    return positive/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums_arr = array('i', nums)\n    return (nums_arr.count(1)) / (nums_arr.count(0))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # nums.sort(reverse=True)\n    # i = 0\n    # ans = 1\n    # while True:\n    #     # i = i+1\n    #     # if ans == 0:\n    #     #     break\n    #     if ans == 1:\n    #         break\n    #     for j in range(len(nums)):\n    #         if nums[j] > 0:\n    #             ans = ans*j +1\n    #     print(ans)\n    #     ans = 1\n    #     i+=1\n    # return ans\n    # a = nums.count(0)\n    # i = 0\n    # j = 0\n    # for i in range(len(nums)):\n    #     for j in range(len(nums)):\n    #         if nums[i] > 0:\n    #             nums[i] = nums[i]*a + nums[j]\n    #     a+=1\n    # return nums\n    # j = 0\n    # d = 0\n    # i = 0\n    # while True:\n    #     if i+d < len(nums) and nums[i+d] > 0:\n    #         nums[i+d] = nums[i+d]*a + nums[i]\n    #         a += 1\n    #     if nums[i] > 0:\n    #         j+=1\n    #         i = j\n    #         d+=1\n    #     if nums[i] > 0:\n    #         d = i+1-j\n    #         j+=1\n    #         i = d\n    #         a = 0\n    #         d = 0\n    #         j = 0\n    #     if nums[i] == 0:\n    #         break\n    # return nums\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    counter = 0\n    for i in nums:\n        if i > 0:\n            counter += 1\n    return counter/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    max_neg = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    positive = 0\n    for i in range(0,len(list1)):\n        if list1[i] >= 0:\n            positive = positive + 1\n            list1[i] = 0\n    if positive!= 0:\n        return list1\n    else:\n        return 'Negative number'\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    if (list1[len(list1)-1]) < 0:\n        return list1[len(list1)-1]\n    else:\n        return -1\n    \ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    list1.sort()\n    if (list1[len(list1)-1]) > 0:\n        return list1[len(list1)-1]\n    else:\n        return -1\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize a list to store negatives.\n    neg_list = []\n    # Initialize a list to store the absolute values of negatives.\n    abs_neg_list = []\n    # Initialize a dictionary to store the absolute values of negatives.\n    abs_neg_dict = {}\n    # Loop through the list.\n    for num in list1: \n        # Check the absolute value of the number.\n        abs_neg_list.append(abs(num))\n        # If the absolute value of the number is greater than the absolute value of the largest negative.\n        if abs(num) > max(abs_neg_list): \n            # Add the absolute value of the number to the largest negative.\n            max_abs_neg = abs_neg_list[abs_neg_list.index(max(abs_neg_list))]\n            neg_list.append(max_abs_neg)\n            # Update the dictionary.\n            abs_neg_dict[num] = max_abs_neg\n    # Return the absolute values of negatives.\n    return neg_list, abs_neg_dict"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in list1:\n        if i<0:\n            if i<max:\n                max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        for i in range(0,len(list1)):\n            if list1[i] < 0:\n                list1[i] *= -1\n                \n        for i in range(0,len(list1)):\n            if list1[i] < 0:\n                list1[i] = 0\n        \n        return largest_neg(list1)\n        \nlist1 = [-5,3,1,-4,-2]\nprint(largest_neg(list1))"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for element in list1:\n        if element < 0:\n            neg_list.append(element)\n    return max(neg_list)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n        elif i == 0:\n            list2.append(-1)\n        else:\n            list2.append(-1)\n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            max = max = list1[i]\n    return max\n    \ndef smallest_pos(list1): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > 0:\n            min = min = list1[i]\n    return min\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            min = min = list1[i]\n    return min\n    \ndef permutation(list1): \n    '''\n    Write a python function to find the permutation of a list.\n    '''\n    result = []\n    p = list1.copy()\n    for i in range(len(p)):\n        result.append(p[i])\n        for j in range(i,len(p)):\n            result.append(p[j])\n    return result\n    \ndef subsets(s): \n    '''\n    Write a python function to find the subsets of a given string.\n    '''\n    if s == \"\":\n        return [[]]\n    else:\n        l = subsets(s[1:])\n        for i in range(1,len(s)):\n            sub = []\n            for j in l:\n                sub.append(j[:i]+j[i:])\n            l = sub\n        return l\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(item[0:K] for item in test_list)]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for index, item in enumerate(test_list):\n        test_list[index] = item[:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    temp_list = []\n    for i in test_list:\n        for j in range(0,K):\n            temp_list.append(i[j])\n    return tuple(temp_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for item in test_list:\n        if len(item) == K:\n            res.append(item[:-K])\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple([t[:K] for t in test_list])\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tupl in test_list:\n        if len(tupl) == K:\n            result.append(tupl[:])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize the trimmed result\n    result = []\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    test_list = list(test_list)\n    for x in range(0,K):\n        test_list.remove(test_list[x])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(tup):\n        return tup[:K]\n    return list(map(trim, test_list))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x*y,test_tup1,test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n    for index, item in enumerate(test_tup1):\n        index1 += item\n        index2 += test_tup2[index]\n    print(index1)\n    print(index2)\n    print(index1 * index2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # declare variables\n    first_element = test_tup1[0]\n    second_element = test_tup2[1]\n    product = 0\n    \n    # if both the element in tup1 are same\n    if (first_element in test_tup1) and (second_element in test_tup1):\n        product = test_tup1[0] * test_tup2[1]\n    # if either the element is in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and not the second element\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup2[1]\n    # if either the element is in the tup1, but not the second element\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is same as the first element\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup1):\n        product = second_element * test_tup1[1]\n    # if both the element are in the tup1, but not the second element\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup2[0] * second_element\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup1[1]\n    # if both the element are in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup2[1]\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is same as the first element\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup2[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if both the element are in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is in the tup1\n    elif (first_element in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if both the element are in the tup1, but not the second element\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element in test_tup1) and (second_element not in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if the element is not in the tup1, and the second element is not in the tup1\n    elif (first_element not in test_tup1) and (second_element in test_tup2):\n        product = test_tup1[0] * second_element\n    # if both the element are in the tup1, but not the second element\n    elif (first_element not in test_tup1) and (second_element not in test_tup2):\n        product = second_element * test_tup1[1]\n    # if the element is not in the tup1, but the second element is not in the tup"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n    if len(test_tup1)!= len(test_tup2):\n        return print(\"Invalid input\")\n    for i in range(0,len(test_tup1)):\n        index1 = index1 * test_tup1[i]\n        index2 = index2 * test_tup2[i]\n    return index1, index2\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    tuple_1 = ()\n    for i in range(len(test_tup1)):\n        tuple_1 += (test_tup1[i],)\n    \n    tuple_2 = ()\n    for i in range(len(test_tup2)):\n        tuple_2 += (test_tup2[i],)\n    \n    res = ()\n    for i in range(len(tuple_1)):\n        if tuple_1[i]!= 0 and tuple_2[i]!= 0:\n            res += (tuple_1[i] * tuple_2[i])\n        else:\n            res += (0)\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # YOUR CODE HERE\n    print(\"{} {}\".format(test_tup1[0],test_tup1[1]))\n    print(\"{} {}\".format(test_tup2[0],test_tup2[1]))\n    \n    print(\"{} {}\".format(test_tup1[0]*test_tup1[1],test_tup1[0]*test_tup1[1]))\n    print(\"{} {}\".format(test_tup2[0]*test_tup2[1],test_tup2[0]*test_tup2[1]))\n    \n    return 0\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        tup1 = test_tup1\n        tup2 = test_tup2\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(tup)\n    lst = list(lst)\n    \n    cnt = Counter(tup)\n    for x in lst:\n        if x not in cnt:\n            cnt[x] = 1\n        else:\n            cnt[x] += 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence_count = 0\n    for element in tup:\n        occurrence_count += 1\n        if element in lst:\n            lst.remove(element)\n    return occurrence_count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {}\n    for x in tup:\n        if x in dict:\n            dict[x] += 1\n        else:\n            dict[x] = 1\n    for x in dict:\n        lst.append(dict[x])\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ=0\n    for i in range(len(tup)):\n        occ=occ+1\n        if tup[i] in lst:\n            lst.remove(tup[i])\n    print(\"Occurence of the element is : \" + str(occ))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = 0\n    for i in lst: \n        c += 1\n        for j in tup:\n            if i == j:\n                c += 1\n    return c\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return(Counter(tup) & Counter(lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    occur_count = {}\n    for i in tup_count:\n        occur_count[i] = tup_count[i]\n    for i in occur_count:\n        lst.append(i)\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count+=1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(tup) \n    cnt = Counter(tup) \n    lst = list(lst) \n    return cnt.most_common(lst.count(tup)) \n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num*num*num)\n    return cube_nums\n    \n    \ndef solution(nums):\n    '''\n    solution(nums)\n    \n    Given a list of numbers, return the number of cubes that appear.\n    '''\n    cubes = cube_nums(nums)\n    result = sum(cubes)\n    return result\n    "
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        # to use this logic, we need to create a new list\n        # that contains the cubes of the numbers in the list\n        cubes = [0]*len(nums)\n        cubes[0] = cubes[0]*cubes[0]\n        cubes[1] = cubes[1]*cubes[0]\n        cubes[2] = cubes[1]*cubes[1]\n        cubes[3] = cubes[2]*cubes[2]\n        cubes[4] = cubes[3]*cubes[3]\n        return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(cube(num))\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # get cubes\n    cubes = [i**3 for i in nums]\n    # return cubes\n    return [cubes[i] for i in range(len(cubes))]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num**3 for num in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(1, len(nums)):\n        nums[i] = nums[i] * nums[i-1] * nums[i-1] * nums[i-1]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return sum(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube_of_element(n):\n        if n <= 0:\n            return 0\n        return (n*n*n)*n\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for i in range(len(nums)):\n        cube.append(nums[i]**3)\n    print(cube)\n    return cube\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n + sum(range(1, n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n + 1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0: \n        return 0\n    else: \n        return n + cal_sum(n-1) \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1: \n        return 1\n    else: \n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    numbers = []\n    for x in range(1, n+1):\n        numbers.append(x)\n    return sum(numbers)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #get the number of fibonnaci numbers up to n\n    fibo_numbers = []\n    for i in range(1, n + 1):\n        fibo_numbers.append(i)\n    #print the fibonnaci numbers\n    for num in fibo_numbers:\n        print(num)\n    #add the numbers to the sum\n    sum = 0\n    for num in fibo_numbers:\n        sum += num\n    print(sum)\n    return sum\n    \ndef cal_product(n):\n    '''\n    Write a function to calculate the product of n prime numbers.\n    '''\n    #get the number of fibonnaci numbers\n    fibo_numbers = []\n    for i in range(1, n + 1):\n        fibo_numbers.append(i)\n    #print the fibonnaci numbers\n    for num in fibo_numbers:\n        print(num)\n    #calculate the product of each prime number\n    prod = 1\n    for num in fibo_numbers:\n        prod *= num\n    print(prod)\n    return prod\n    \ndef main():\n    cal_sum(9)\n    cal_product(9)\n    \nmain()\n    "
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        sum += i \n    return sum \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # loop through values, counting in middle\n    for value in l[l.index(str):]:\n        # if value is a number\n        if type(value) == int or type(value) == float:\n            # increment value by 2\n            value = value + 2\n            # break loop\n            break\n    # return value\n    return value\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return ''.join([str[i:i+l] for i in range(0, len(str), l)])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # your code goes here\n    return (str[:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string = \"\"\n    for index in l:\n        string += index\n    \n    return string.strip()\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        if l[i].find(str)!= -1:\n            return i\n    return -1\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # To check if string value is of a specific size.\n    if len(str) > l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = \"\"\n    i = 0\n    while i < len(str):\n        result += str[i]\n        i += 1\n        if i == len(str):\n            break\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = 0\n    for word in l:\n        size = size + len(word)\n    return size\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == l:\n        return str\n    else:\n        return extract_string(str[l:], l+1)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return ''.join([str[i:i+l] for i in range(0, len(str), l)])\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = text1.replace(' ', '').replace('\\n', '')\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = str(text1)\n    for i in range(len(text1)):\n        if text1[i]!='':\n            text1 = text1.replace(text1[i], '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return''.join(text1.split())\ndef convert_to_int(text):\n    '''\n    Write a function to convert all comma separated numbers into their integer values.\n    '''\n    return re.findall('\\d+',text)\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    return re.sub('\\d+','',text)\ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all numeric characters from the given string.\n    '''\n    return re.sub('\\S+\\s','',text)\ndef convert_all_numbers_to_int(text):\n    '''\n    Write a function to convert all numbers in a string to their integer values.\n    '''\n    return int(''.join(convert_to_int(text)))\ndef remove_all_numbers_from_string(text):\n    '''\n    Write a function to remove all the numbers from the given string.\n    '''\n    return re.sub('\\d+','',text)\ndef extract_top_ten_from_string(text):\n    '''\n    Write a function to extract the top 10 from a given string.\n    '''\n    return re.findall('[A-Za-z0-9]+',text)\ndef lower_case_string(text):\n    '''\n    Write a function to lower case the given string.\n    '''\n    return text.lower()\ndef strip_non_alphanumeric(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from the given string.\n    '''\n    return re.sub('[^a-z0-9]+','',text)\ndef convert_to_lower_case_string(text):\n    '''\n    Write a function to convert all non-alphanumeric characters to their lower case equivalent.\n    '''\n    return lower_case_string(text)\ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from the given string.\n    '''\n    return text.replace(' ','')\ndef remove_space_characters(text):\n    '''\n    Write a function to remove all the spaces from the given string.\n    '''\n    return text.replace(' ', '')\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all the spaces from the given string.\n    '''\n    return text.replace(' ','')\ndef remove_number(text):\n    '''\n    Write a function to remove all the numbers from the given string.\n    '''\n    return re.sub('[A-Za-z0-9]+','',text)\ndef remove_newlines(text):\n    '''\n    Write a function to remove all newlines from the given string.\n    '''\n    return text.replace('\\n',' ')\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all the punctuation marks from the given string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','',text)\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all the special characters from the given string.\n    '''\n    return text.replace('?',' ')\ndef convert_all_to_int(text):\n    '''\n    Write a function to convert all characters in a string to their integer values.\n    '''\n    return int(''.join(convert_to_int(text)))\ndef convert_all_to_lower_case_string(text):\n    '''\n    Write a function to convert all characters in a string to their lower case equivalent.\n    '''\n    return lower_case_string(text)\ndef convert_all_to_strip_string(text):\n    '''\n    Write a function to convert all characters in a string to their striped version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_remove_spaces_string(text):\n    '''\n    Write a function to convert all characters in a string to their remove spaces version.\n    '''\n    return remove_spaces(text)\ndef convert_all_to_strip_spaces_string(text):\n    '''\n    Write a function to convert all characters in a string to their striped version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_remove_newlines_string(text):\n    '''\n    Write a function to convert all characters in a string to their remove newlines version.\n    '''\n    return remove_newlines(text)\ndef convert_all_to_strip_newlines_string(text):\n    '''\n    Write a function to convert all characters in a string to their striped version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_remove_punctuation_string(text):\n    '''\n    Write a function to convert all characters in a string to their remove punctuation version.\n    '''\n    return remove_punctuation(text)\ndef convert_all_to_strip_punctuation_string(text):\n    '''\n    Write a function to convert all characters in a string to their striped version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_remove_special_characters_string(text):\n    '''\n    Write a function to convert all characters in a string to their remove special characters version.\n    '''\n    return remove_special_characters(text)\ndef convert_all_to_strip_special_characters_string(text):\n    '''\n    Write a function to convert all characters in a string to their striped version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_convert_to_int(text):\n    '''\n    Write a function to convert all characters in a string to their conversion to an integer version.\n    '''\n    return convert_all_to_int(text)\ndef convert_all_to_strip_convert_to_int(text):\n    '''\n    Write a function to convert all characters in a string to their strip converted version.\n    '''\n    return remove_all_numbers(text)\ndef convert_all_to_convert_to_lower_case_string(text):\n    '''\n    Write a function to convert all characters in a string to their conversion to lower case version.\n    '''\n    return convert_all_to_lower_case_string(text)\ndef convert_all_to_strip_convert_to_lower_case_string(text):\n    '''\n    Write a function to convert all characters in a string to their strip converted version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_strip_string(text):\n    '''\n    Write a function to convert all characters in a string to their strip version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_remove_newlines_string(text):\n    '''\n    Write a function to convert all characters in a string to their remove newlines version.\n    '''\n    return remove_newlines(text)\ndef convert_all_to_strip_newlines_string(text):\n    '''\n    Write a function to convert all characters in a string to their strip version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_remove_punctuation_string(text):\n    '''\n    Write a function to convert all characters in a string to their remove punctuation version.\n    '''\n    return remove_punctuation(text)\ndef convert_all_to_strip_punctuation_string(text):\n    '''\n    Write a function to convert all characters in a string to their strip version.\n    '''\n    return strip_non_alphanumeric(text)\ndef convert_all_to_remove_special_characters_string(text):\n    '''\n    Write a function to convert all characters in a string to their remove special characters version.\n    '''\n    return remove_special_characters(text)\ndef convert_all_to_strip_special_characters_string(text):\n    '''\n    Write a functio"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    # define the regular expression\n    r = \"[^\\s]+\"\n    # compile the regular expression\n    pattern = re.compile(r)\n    # search for all matches in the string\n    return pattern.sub(\"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    for i in range(len(text1)):\n        text1[i] = text1[i].replace('\\t','')\n        text1[i] = text1[i].replace('\\n','')\n        text1[i] = text1[i].replace('  ','')\n        text1[i] = text1[i].replace('\\xa0','')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('  ','')\n    text1 = text1.replace(' ','')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Empty lines\n    if text1 == '':\n        return ''\n    # Remove any whitespaces in the string\n    for i in range(len(text1)):\n        if text1[i] in [' ','\\n', '\\t']:\n            pass\n        else:\n            text1 = text1.replace(text1[i],'')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex_to_remove_whitespaces = re.compile(r'[ \\t\\n\\r\\f\\v]')\n    return regex_to_remove_whitespaces.sub('', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    clean_text = re.sub(' +','', text1)\n    # clean_text = re.sub(r'\\s{2,}','', clean_text)\n    return clean_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(\"\\s+\", \" \", text1)\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \n    #OR\n    #loss = actual_cost - sale_amount\n    #return 0 if actual_cost < sale_amount else loss\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount \n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        return actual_cost-sale_amount\n    except:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>0:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0.0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #You can calculate the amount of loss from the sale amount and actual cost\n    return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(2,n) :\n        if n%i==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(n) + 1) : \n        if n % i == 0 : \n            sum += i \n            \n    return sum\n    \n    \n    \ndef decimalToBinary(n) : \n    '''\n    Write a python function to convert a decimal number to a binary number.\n    '''\n    result = \"\"\n    while n!= 0 : \n        r = n % 2\n        n = n // 2\n        result = str(r) + result\n    return result\n    \ndef binaryToDecimal(s) : \n    '''\n    Write a python function to convert a binary number to decimal number.\n    '''\n    result = 0\n    for c in s : \n        result += int(c) * 2\n    return result\n    \ndef checkPerfectNumber(n) : \n    '''\n    Write a python function to check whether a given number is a perfect square.\n    '''\n    x = (n**0.5)+1\n    if (n+1)**0.5!= x :\n        return False\n    else : \n        return True\n    \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return n \n    else:\n        even = [x for x in range(1,int(math.sqrt(n))) if n % x == 0] \n        sum = n \n        for i in even:\n            sum += (i**2) \n        return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n == 0) : \n        return 0\n    if(n == 1) : \n        return 1\n    if (n%2 == 0) : \n        return 2 * sumofFactors(n//2)\n    else : \n        return 1 + sumofFactors(n//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return n \n    else : \n        return n + sumofFactors(n // 2)\n    \ndef count_divisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    numerator = 0\n    denominator = 1\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return 1\n    else : \n        numerator = 1\n        while numerator < math.sqrt(n) : \n            numerator = numerator + 1\n            denominator = n // denominator\n    return numerator * denominator\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2\n    sum = 0\n    while i * i <= n : \n        if n % i == 0: \n            sum += i \n            n = n / i \n        i += 1\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            s = s + i \n    return s\n    \ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if (n <= 2) : \n        return True \n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        if (n % i == 0) : \n            return False \n    return True\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # loop through all the numbers from 1 to n\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 : # loop through all the numbers from 1 to n\n            sum+=i\n            #if sumofFactors(sum) == sum : \n                # print sum\n    return sum\nprint(sumofFactors(5)"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2: \n        return 1\n    else:\n        x = 1\n        while n % 2 == 0: \n            x = x + 1\n            n = n / 2\n        return x\n    \ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if n == 0: \n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef factorialFactors(n) :\n    '''\n    Write a python function to calculate the nth term of the factorial factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactors(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactors(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactors(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactors(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactors(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n    \ndef fibonacciFactorsF(n) :\n    '''\n    Write a python function to calculate the nth term of the fibonacci factorisation.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        fact = 1\n        while (n!= 1):\n            fact = fact*n\n            n = n-1\n        return fact\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # n = 5\n    # n = 1, 2, 3, 4, 5\n    # n = 0\n    # n = 1\n    # n = 1\n    sum = 0\n    x = 0\n    while(n>0) :\n        for i in range(1,n) : \n            if n % i == 0:\n                x += i\n                n = n//i\n                break\n        sum += x\n        x = 0\n        x += n\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.find('z')>-1\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(r'\\bz\\b',text)!= None\ndef text_match_wordz_and_ends(text):\n    '''\n    Write a function that matches a word containing 'z' and ends with '.'\n    '''\n    return re.match(r'\\bz\\b[\\s\\S]+\\.',text)!= None\ndef text_match_wordz_and_ends_and_ends(text):\n    '''\n    Write a function that matches a word containing 'z' and ends with '.' and ends with '.'\n    '''\n    return re.match(r'\\bz\\b[\\s\\S]+\\.',text)!= None\ndef text_match_space(text):\n    '''\n    Write a function that matches'' only\n    '''\n    return re.match(r'\\s+',text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_words = re.split(r'\\W+', text.lower())\n    sorted_text = sorted(text_words, key=len)\n    pos = 0\n    while pos < len(sorted_text):\n        if sorted_text[pos] == 'z':\n            return sorted_text[:pos+1]\n        pos += 1\n    return []\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #pattern = r'z' #for more than one characters\n    #pattern = r'z\\Z' #for a single 'z'\n    pattern = r'z\\Z'\n    matches = re.findall(pattern, text)\n    #print(matches)\n    if len(matches)!= 0:\n        print('text matches wordz')\n    else:\n        print('text does not matches wordz')\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_without_word = re.sub('\\s+','', text).lower()\n    word_list = list(text_without_word)\n    '''\n    # split_words = re.split('\\W+', text_without_word)\n    # return word_list\n    # print(split_words)\n    # return word_list\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    assert(type(text)==str)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)):\n        if text[i]!= 'z':\n            return False\n    return True\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = []\n    wordz_regex = re.compile('z')\n    for word in text.split():\n        if word == wordz_regex.sub('', word):\n            wordz.append(word)\n    return ''.join(wordz)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    m = re.match(pattern, text, re.MULTILINE)\n    if m:\n        print(m.group())\n    else:\n        print(\"not found\")\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return any(word.lower() in text.lower() for word in list(text.lower()))\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return 'Enter a valid month number (1-12)!'\n    if monthnum2 % 2 == 1:\n        return 'Enter a valid month number (1-12)!'\n    if monthnum2 == 1:\n        if monthnum2 == 12:\n            return 'The month number is 1.\\n'\n        return 'The month number is 2.\\n'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2 == 31:\n            print(\"It is a leap year.\")\n        else:\n            print(\"It is not a leap year.\")\n    except ValueError:\n        print(\"This is not a valid number.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2==2:\n            if(int(monthnum2)<=12):\n                check=True\n            else:\n                check=False\n        else:\n            check=True\n    except ValueError:\n        check=False\n    return check\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not isinstance(monthnum2, int):\n        raise TypeError(\"Month number must be an Integer.\")\n    if monthnum2 not in range(1,13):\n        raise ValueError(\"Month number should be between 1 and 12.\")\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if int(monthnum2) < 0 or int(monthnum2) > 12:\n            raise ValueError\n        elif monthnum2 < 1 or monthnum2 > 12:\n            raise ValueError\n        elif int(monthnum2) == 31:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    check_monthnumb = False\n    try:\n        int(monthnum2)\n        check_monthnumb = True\n    except ValueError:\n        if monthnum2 == 'january':\n            check_monthnumb = True\n        if monthnum2 == 'february':\n            check_monthnumb = True\n        if monthnum2 =='march':\n            check_monthnumb = True\n        if monthnum2 == 'april':\n            check_monthnumb = True\n        if monthnum2 =='may':\n            check_monthnumb = True\n        if monthnum2 == 'june':\n            check_monthnumb = True\n        if monthnum2 == 'july':\n            check_monthnumb = True\n        if monthnum2 == 'august':\n            check_monthnumb = True\n        if monthnum2 =='september':\n            check_monthnumb = True\n        if monthnum2 == 'october':\n            check_monthnumb = True\n        if monthnum2 == 'november':\n            check_monthnumb = True\n        if monthnum2 == 'december':\n            check_monthnumb = True\n    return check_monthnumb\n    \ndef check_date_format(date):\n    '''\n    Write a function to check whether the given date is a date in the format yyyy-mm-dd.\n    '''\n    check_date = False\n    try:\n        date = date.split('-')\n        date = [int(i) for i in date]\n        check_date = True\n    except ValueError:\n        if date == '2021-06':\n            check_date = True\n        if date == '2021-06-17':\n            check_date = True\n        if date == '2021-06-17T23':\n            check_date = True\n        if date == '2021-06-17T23:59':\n            check_date = True\n        if date == '2021-06-17T23:59.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60':\n            check_date = True\n        if date == '2021-06-17T23:59.60.60.60'"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #if not isinstance(monthnum2, int) or monthnum2 < 1 or monthnum2 > 12:\n    #    raise ValueError('monthnum2 must be a number between 1 and 12')\n    monthnum2 = int(monthnum2)\n    return True if monthnum2 == 31 else False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100!= 0:\n        return f'{monthnum2} is not a valid month number'\n    if monthnum2 % 400!= 0:\n        return f'{monthnum2} is not a valid month number'\n    if monthnum2 % 12!= 0:\n        return f'{monthnum2} is not a valid month number'\n    return f'{monthnum2} is a valid month number'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    day = 0\n    if monthnum2 > 12 or monthnum2 < 1:\n        print(\"Invalid number. Please enter a number from 1 to 12.\")\n    else:\n        for i in range(monthnum2):\n            if day >= 31:\n                print(\"The given month number {} contains 31 days.\".format(monthnum2))\n                break\n            else:\n                day += 1\n                if day >= 7:\n                    print(\"The given month number {} contains 7 days.\".format(monthnum2))\n                    break\n                else:\n                    day += 1\n    if day == 0:\n        print(\"The given month number {} does not contain 31 days.\".format(monthnum2))\n    \n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return 'Invalid input! Please try again.'\n    if monthnum2 == 12:\n        return 'Januar'\n    if monthnum2 == 1:\n        return 'Februar'\n    if monthnum2 == 2:\n        return 'Maart'\n    if monthnum2 == 3:\n        return 'April'\n    if monthnum2 == 4:\n        return 'Mai'\n    if monthnum2 == 5:\n        return 'Juni'\n    if monthnum2 == 6:\n        return 'Juli'\n    if monthnum2 == 7:\n        return 'August'\n    if monthnum2 == 8:\n        return 'September'\n    if monthnum2 == 9:\n        return 'Okt'\n    if monthnum2 == 10:\n        return 'November'\n    if monthnum2 == 11:\n        return 'Dezember'\n    return 'Invalid input! Please try again.'\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for string in stringlist:\n        reverse_list.append(string[::-1])\n    return reverse_list"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return_string = \"\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n        print(stringlist[i])\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    lst = []\n    lst = stringlist\n    \n    for i in lst:\n        print(i)\n        lst.remove(i)\n        lst.insert(0,i)\n        print(lst)\n        \n    return lst"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string)\n    result.reverse()\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    string = stringlist[:]\n    string.reverse()\n    return string\n    \ndef reverse_string_recursive(string, index):\n    if len(string) == 0:\n        return\n    else:\n        if index == len(string):\n            return string\n        else:\n            string = string[:index] + string[index+1:] + string[:index] + string[index+1:]\n            reverse_string_recursive(string, index+1)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    string_list = []\n    string_list = [stringlist[i] for i in range(len(stringlist))]\n    reverse_list = []\n    for i in string_list:\n        reverse_list.append(i[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return \"\"\n    if len(stringlist) == 1:\n        return stringlist[0]\n    else:\n        return stringlist[len(stringlist)-1] + reverse_string_list(stringlist[0:len(stringlist)-1])"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min \ndef Compare(lst1, lst2): \n    '''\n    Write a python function to compare two lists of integers.\n    '''\n    for i in range(0, len(lst1)):\n        if lst1[i] == lst2[i]:\n            continue\n        else:\n            return 'Not Equal'\n    return 'Equal'\ndef Output(lst): \n    '''\n    Write a python function to print the list.\n    '''\n    for i in range(0, len(lst)):\n        print(lst[i], end =\" \")\n    print()\n    "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    lst1 = lst[1:]\n    lst2 = lst[1:]\n    lst3 = lst[1:]\n    lst4 = lst[1:]\n    lst5 = lst[1:]\n    lst6 = lst[1:]\n    lst7 = lst[1:]\n    lst8 = lst[1:]\n    lst9 = lst[1:]\n    lst10 = lst[1:]\n    lst11 = lst[1:]\n    lst12 = lst[1:]\n    lst13 = lst[1:]\n    lst14 = lst[1:]\n    lst15 = lst[1:]\n    lst16 = lst[1:]\n    lst17 = lst[1:]\n    lst18 = lst[1:]\n    lst19 = lst[1:]\n    lst20 = lst[1:]\n    lst21 = lst[1:]\n    lst22 = lst[1:]\n    lst23 = lst[1:]\n    lst24 = lst[1:]\n    lst25 = lst[1:]\n    lst26 = lst[1:]\n    lst27 = lst[1:]\n    lst28 = lst[1:]\n    lst29 = lst[1:]\n    lst30 = lst[1:]\n    lst31 = lst[1:]\n    lst32 = lst[1:]\n    lst33 = lst[1:]\n    lst34 = lst[1:]\n    lst35 = lst[1:]\n    lst36 = lst[1:]\n    lst37 = lst[1:]\n    lst38 = lst[1:]\n    lst39 = lst[1:]\n    lst40 = lst[1:]\n    lst41 = lst[1:]\n    lst42 = lst[1:]\n    lst43 = lst[1:]\n    lst44 = lst[1:]\n    lst45 = lst[1:]\n    lst46 = lst[1:]\n    lst47 = lst[1:]\n    lst48 = lst[1:]\n    lst49 = lst[1:]\n    lst50 = lst[1:]\n    lst51 = lst[1:]\n    lst52 = lst[1:]\n    lst53 = lst[1:]\n    lst54 = lst[1:]\n    lst55 = lst[1:]\n    lst56 = lst[1:]\n    lst57 = lst[1:]\n    lst58 = lst[1:]\n    lst59 = lst[1:]\n    lst60 = lst[1:]\n    lst61 = lst[1:]\n    lst62 = lst[1:]\n    lst63 = lst[1:]\n    lst64 = lst[1:]\n    lst65 = lst[1:]\n    lst66 = lst[1:]\n    lst67 = lst[1:]\n    lst68 = lst[1:]\n    lst69 = lst[1:]\n    lst70 = lst[1:]\n    lst71 = lst[1:]\n    lst72 = lst[1:]\n    lst73 = lst[1:]\n    lst74 = lst[1:]\n    lst75 = lst[1:]\n    lst76 = lst[1:]\n    lst77 = lst[1:]\n    lst78 = lst[1:]\n    lst79 = lst[1:]\n    lst80 = lst[1:]\n    lst81 = lst[1:]\n    lst82 = lst[1:]\n    lst83 = lst[1:]\n    lst84 = lst[1:]\n    lst85 = lst[1:]\n    lst86 = lst[1:]\n    lst87 = lst[1:]\n    lst88 = lst[1:]\n    lst89 = lst[1:]\n    lst90 = lst[1:]\n    lst91 = lst[1:]\n    lst92 = lst[1:]\n    lst93 = lst[1:]\n    lst94 = lst[1:]\n    lst95 = lst[1:]\n    lst96 = lst[1:]\n    lst97 = lst[1:]\n    lst98 = lst[1:]\n    lst99 = lst[1:]\n    lst100 = lst[1:]\n    lst101 = lst[1:]\n    lst102 = lst[1:]\n    lst103 = lst[1:]\n    lst104 = lst[1:]\n    lst105 = lst[1:]\n    lst106 = lst[1:]\n    lst107 = lst[1:]\n    lst108 = lst[1:]\n    lst109 = lst[1:]\n    lst110 = lst[1:]\n    lst111 = lst[1:]\n    lst112 = lst[1:]\n    lst113 = lst[1:]\n    lst114 = lst[1:]\n    lst115 = lst[1:]\n    lst116 = lst[1:]\n    lst117 = lst[1:]\n    lst118 = lst[1:]\n    lst119 = lst[1:]\n    lst120 = lst[1:]\n    lst121 = lst[1:]\n    lst122 = lst[1:]\n    lst123 = lst[1:]\n    lst124 = lst[1:]\n    lst125 = lst[1:]\n    lst126 = lst[1:]\n    lst127 = lst[1:]\n    lst128 = lst[1:]\n    lst129 = lst[1:]\n    lst130 = lst[1:]\n    lst131 = lst[1:]\n    lst132 = lst[1:]\n    lst133 = lst[1:]\n    lst134 = lst[1:]\n    lst135 = lst[1:]\n    lst136 = lst[1:]\n    lst137 = lst[1:]\n    lst138 = lst[1:]\n    lst139 = lst[1:]\n    lst140 = lst[1:]\n    lst141 = lst[1:]\n    lst142 = lst[1:]\n    lst143 = lst[1:]\n    lst144 = lst[1:]\n    lst145 = lst[1:]\n    lst146 = lst[1:]\n    lst147 = lst[1:]\n    lst148 = lst[1:]\n    lst149 = lst[1:]\n    lst150 = lst[1:]\n    lst151 = lst[1:]\n    lst152 = lst[1:]\n    lst153 = lst[1:]\n    lst154 = lst[1:]\n    lst155 = lst[1:]\n    lst156 = lst[1:]\n    lst157 = lst[1:]\n    lst158 = lst[1:]\n    lst159 = lst[1:]\n    lst160 = lst[1:]\n    lst161 = lst[1:]\n    lst162 = lst[1:]\n    lst163 = lst[1:]\n    lst164 = lst[1:]\n    lst165 = lst[1:]\n    lst166 = lst[1:]\n    lst167 = lst[1:]\n    lst168 = lst[1:]\n    lst169 = lst[1:]\n    lst170 = lst[1:]\n    lst171 = lst[1:]\n    lst172 = lst[1:]\n    lst173 = lst[1:]\n    lst174 = lst[1:]\n    lst175 = lst[1:]\n    lst176 = lst[1:]\n    lst177 = lst[1:]\n    lst178 = lst[1:]\n    lst179 = lst[1:]\n    lst180 = lst[1:]\n    lst181 = lst[1:]\n    lst182 = lst[1:]\n    lst183 = lst[1:]"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return lst\n    minimum = lst[0]\n    for item in lst[1:]:\n        if item < minimum:\n            minimum = item\n    return minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    minimum_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n            minimum_index = i\n    return minimum_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0: \n        return -1\n    min = lst[0] \n    for i in lst: \n        if i < min: \n            min = i \n    return min \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    for i in range(len(lst)): \n        for j in range(len(lst)): \n            if j == i or lst[i] < lst[j]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst) \n    if length < 2: \n        return length \n    else: \n        for i in range(0, length-1): \n            if lst[i] > lst[i+1]: \n                temp = lst[i] \n                lst[i] = lst[i+1] \n                lst[i+1] = temp \n        return Find_Min(lst) \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    start=0\n    end=0\n    mid=0\n    length=len(lst)\n    if(length>=1):\n        for i in range(0,length):\n            mid=lst[i]\n            if(mid<=mid1):\n                if(mid>mid1):\n                    start=start\n                if(mid1>mid):\n                    end=end\n            mid=mid1\n    if(end==length):\n        mid=end\n    if(mid!=start):\n        start=mid\n    \n    return start\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0]\n    for i in range(1, len(lst)): \n        if lst[i] < min_length: \n            min_length = lst[i] \n            i += 1\n    return min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst, key = len) \n    min_length = len(lst) \n    i = 0\n    while i < len(lst): \n        if lst[i] == min_length: \n            return lst[i] \n        i += 1\n    return -1"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print('\\nRectangle Area: ')\n    area = l * b\n    print(f'\\t{l} * {b} = {area}')\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\ndef square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a * a\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14 * r ** 2\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Area of rectangle: \"+ str(l*b))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l <= 0 or b <= 0:\n        return -1\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        split1 = str1.split(' ')\n        for item in split1:\n            if len(item) > 1:\n                for i in range(len(item)):\n                    if item[i].isupper():\n                        item = item[:i] + item[i].lower() + item[i + 1:]\n        return''.join(split1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1:\n        str1 = str1.lower()\n        str1 = re.sub(r'[^A-Z]','', str1)\n        str1 = str1.strip()\n        str1 = re.sub(' +','', str1)\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.replace(\" \",\"\").replace(\".\",\"\").replace(\",\",\"\").replace(\"-\",\"\").replace(\".\",\"\").replace(\" \",\"\")\n    str1 = str1.replace(\" \",\"\").replace(\"\\n\",\"\").replace(\"\\t\",\"\")\n    return str1\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str1 = str1.replace(\"\\\\\",\"\").replace(\"[\",\"\").replace(\"]\",\"\").replace(\"'\",\"\").replace(\"*\",\"\").replace(\"/\",\"\").replace(\"<\",\"\").replace(\">\",\"\").replace(\"?\",\"\").replace(\"[\",\"\")\n    str1 = str1.replace(\";\",\"\").replace(\",\",\"\").replace(\"?\",\"\").replace(\".\"),\"\").replace(\"'\",\"\").replace(\":\",\"\").replace(\"_\",\"\").replace(\"-\",\"\").replace(\"&\",\"\").replace(\"@\",\"\").replace(\"+\",\"\").replace(\"=\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"'\",\"\").replace(\".\",\"\").replace(\"/\",\"\").replace(\"\\\\\",\"\").replace(\"\\\"\",\"\").replace(\"'\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"/\",\"\").replace(\"*\",\"\").replace(\"$\",\"\").replace(\"$\",\"\").replace(\"<\",\"\").replace(\">\",\"\").replace(\"{\",\"\").replace(\"}\",\"\").replace(\".\",\"\").replace(\",\",\"\").replace(\"!\",\"\").replace(\" \",\"\")\n    str1 = str1.replace(\"{\",\"\").replace(\"}\",\"\").replace(\"'\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"|\",\"\").replace(\"?\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"-\",\"\").replace(\"-\",\"\").replace(\"@\",\"\").replace(\"_\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"!\",\"\").replace(\" \",\"\")\n    return str1\ndef check_special_char(str1):\n    '''\n    Write a function to check if a given string contains a special character.\n    '''\n    return str1.strip().lower() in [\"!\",\"?\",\"*\",\"+\",\",\",\".\",\".\",\";\",\";\",\":\",\":\",\";\",\".\",\".\",\":\",\"?\",\"!\",\"?\",\";\",\"&\",\"&\",\"-\",\"0\",\"2\",\"4\",\"8\",\"6\",\"9\"]\ndef get_age(str1):\n    '''\n    Write a function to find the age of a given user.\n    '''\n    age = 0\n    while True:\n        try:\n            age = int(str(input(\"Enter the age of the user(number): \")))\n            break\n        except ValueError:\n            print(\"Enter a number.\")\n    return age\ndef get_name(str1):\n    '''\n    Write a function to get the name of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid name.\")\n    else:\n        name = str1.lower().replace(\" \",\"\")\n        return name\ndef get_job(str1):\n    '''\n    Write a function to get the job of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid job.\")\n    elif(str1.lower() in [\"engineer\",\"teacher\",\"advisor\",\"associate\",\"designer\"]):\n        job = str1.lower()\n        return job\n    else:\n        print(\"Please enter a valid job.\")\ndef get_education(str1):\n    '''\n    Write a function to get the education of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid education.\")\n    elif(str1.lower() in [\"art\", \"music\", \"science\", \"computers\", \"others\", \"research\"]):\n        education = str1.lower()\n        return education\n    else:\n        print(\"Please enter a valid education.\")\ndef get_location(str1):\n    '''\n    Write a function to get the location of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid location.\")\n    elif(str1.lower() in [\"china\", \"usa\", \"europe\", \"other\"]):\n        location = str1.lower()\n        return location\n    else:\n        print(\"Please enter a valid location.\")\ndef get_nationality(str1):\n    '''\n    Write a function to get the nationality of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid nationality.\")\n    elif(str1.lower() in [\"american\", \"indian\", \"italian\", \"spanish\", \"chinese\", \"chinese\"]):\n        nationality = str1.lower()\n        return nationality\n    else:\n        print(\"Please enter a valid nationality.\")\ndef get_company(str1):\n    '''\n    Write a function to get the company of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid company.\")\n    elif(str1.lower() in [\"united\", \"un\", \"under\", \"under_united\", \"united_under\", \"united_under_\", \"united_under_united\"]):\n        company = str1.lower()\n        return company\n    else:\n        print(\"Please enter a valid company.\")\ndef get_postal(str1):\n    '''\n    Write a function to get the postal of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid postal.\")\n    elif(str1.isdigit()==False):\n        print(\"Please enter a valid postal.\")\n    elif(str1.isdigit()==True):\n        if(str1.find(\".\")>=0):\n            print(\"Please enter a valid postal.\")\n        elif(str1.find(\"_\")>=0):\n            print(\"Please enter a valid postal.\")\n        elif(str1.find(\".\")>=0 and str1.find(\"_\")>=0):\n            print(\"Please enter a valid postal.\")\n        else:\n            postal = str1.lower()\n            return postal\n    else:\n        print(\"Please enter a valid postal.\")\ndef get_home():\n    '''\n    Write a function to get the home of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid home.\")\n    elif(str1.lower() in [\"kitchen\", \"bathroom\", \"ceiling\", \"cabinet\", \"garage\", \"hall\", \"dining room\", \"electric_chair\", \"trash_bin\", \"kitchen_office\", \"bathroom_office\"]):\n        home = str1.lower()\n        return home\n    else:\n        print(\"Please enter a valid home.\")\ndef get_phone(str1):\n    '''\n    Write a function to get the phone of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid phone.\")\n    elif(str1.isdigit()==True):\n        phone = str1.lower()\n        return phone\n    else:\n        print(\"Please enter a valid phone.\")\ndef get_city(str1):\n    '''\n    Write a function to get the city of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid city.\")\n    elif(str1.lower() in [\"bangkok\", \"china\", \"india\", \"italian\", \"spanish\", \"chinese\", \"chinese_indian\", \"chinese_italian\", \"chinese_spanish\", \"chinese_chinese\"]):\n        city = str1.lower()\n        return city\n    else:\n        print(\"Please enter a valid city.\")\ndef get_town(str1):\n    '''\n    Write a function to get the town of a given user.\n    '''\n    if(str1.isalpha()==False):\n        print(\"Please enter a valid city.\")\n    elif(str1.lower() in [\"bangkok\", \"china\", \"india\", \"italian\", \"spanish\", \"chinese\", \"chinese_indian\", \"chinese_italian\", \"chinese_spanish\", \"chinese_chinese\"]):\n        town = str1.lower()\n        return town\n    else:\n        print(\"Please enter a valid city.\""
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    final_string = ''\n    for letter in str1:\n        if letter == letter.upper():\n            final_string += letter\n    return final_string\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    str1 = re.sub(\"[A-Z]\", \"\", str1)\n    str1 = re.sub(\"[^A-Z]\", \"\", str1)\n    str1 = re.sub(\"[0-9]\", \"\", str1)\n    return str1\n    #str1 = str1.upper()\n    #str1 = re.sub(\"[A-Z]\", \"\", str1)\n    #str1 = re.sub(\"[^A-Z]\", \"\", str1)\n    #str1 = re.sub(\"[0-9]\", \"\", str1)\n    #return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\W', '', str1).upper()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lowercase_word=str1.lower()\n    string = re.sub(r'(\\b[A-Z]{2,}\\b){2,}', '', lowercase_word)\n    lowercase_word=re.sub(r'(\\b[A-Z]{2,}\\b){2,}', '', lowercase_word)\n    lowercase_word = re.sub(r'\\s', '', lowercase_word)\n    return string\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.replace('A','')\n    str3 = str2.replace('E','')\n    str4 = str3.replace('I','')\n    str5 = str4.replace('O','')\n    str6 = str5.replace('U','')\n    str7 = str6.replace('Y','')\n    str8 = str7.replace('I','')\n    str9 = str8.replace('R','')\n    str10 = str9.replace('E','')\n    str11 = str10.replace('S','')\n    str12 = str11.replace('T','')\n    str13 = str12.replace('A','')\n    str14 = str13.replace('I','')\n    str15 = str14.replace('O','')\n    str16 = str15.replace('Y','')\n    return str16\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i].isupper() == False:\n            new_str += str1[i]\n        \n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    temp = str1.lower()\n    i = 0\n    j = len(str1) - 1\n    while i < len(str1):\n        if str1[i].isupper() and str1[j].isupper():\n            temp = temp[:i+1] + temp[j:j+1]\n        elif str1[i].isupper() and not str1[j].isupper():\n            temp = temp[:i+1] + temp[i+1:]\n        elif not str1[i].isupper() and str1[j].isupper():\n            temp = temp[:j-1] + temp[j:j+1]\n        i += 1\n        j -= 1\n    return temp\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        print(i[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        print(lst[i][0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def get_first(lst):\n        return lst[0]\n    for i in lst:\n        return get_first(i)\n    return None\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #list to return\n    res = []\n    #function to extract\n    def extract(lst):\n        #iterate through each element in sublist\n        for i in lst:\n            #if the list is not empty\n            if i:\n                #append the element to the result list\n                res.append(i)\n        return res\n    return extract(lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Your code goes here.\n    \n    return lst[0] \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if(len(lst)<2): \n        return None\n    else: \n        return lst[0][0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        if len(i)==0:\n            return -1\n        else:\n            return i[0]\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i = 0\n    while i < len(lst):\n        j = i\n        while j < len(lst):\n            if lst[j] == lst[i]:\n                break\n            j += 1\n        if j == i:\n            print(lst[i])\n        i += 1\n    return\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        if lst[i][1] == True:\n            lst[i][1] = True\n        else:\n            lst[i][1] = False\n        \n    return lst \n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    # loop through each character\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for letter in str:\n        if letter.isupper():\n            counter += 1\n    return counter\nprint(upper_ctr('This is a string')) # Should return 1, because's' is uppercase and 't' is not.\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_str = 0\n    for char in str:\n        if char.isupper():\n            upper_str += 1\n    return upper_str\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str.upper())\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char == char.upper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif str[0].isupper():\n        return 1 + upper_ctr(str[1:])\n    else:\n        return upper_ctr(str[1:])\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            counter+=1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    for c in str:\n        if c.isupper():\n            print(c.upper())\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l=len(list1)\n    if l==1:\n        return list1\n    elif l==2:\n        return [list1[0],list1[1]]\n    else:\n        l1=list1[0:l//2]\n        l2=list1[l//2:l]\n        return [list1[0]+list1[1]+combinations_list(l2)+combinations_list(l1)]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in itertools.combinations(list1, i + 1):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # make a dictionary from list\n    l = dict(zip(list1, list1))\n    \n    # create empty list\n    list2 = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    if len(list1) == 0:\n        return combos\n    for i in range(1, len(list1)):\n        for j in combinations(list1, i):\n            combos.append(j)\n    return combos\n    \ndef combinations_list_efficient(list1):\n    '''\n    A naive implementation of the function.\n    Time complexity: O(n^2)\n    Space Complexity: O(n^2)\n    '''\n    if len(list1) == 0:\n        return []\n    ans = []\n    # sort the list to make it easier to loop through\n    list1.sort()\n    # use for loop to loop through each element\n    for i in range(len(list1)):\n        # add each element to a list\n        for j in combinations(list1, i):\n            ans.append(j)\n    return ans\n    \ndef combination_sum(list1, target):\n    '''\n    Find all possible combinations of the elements of a given list.\n    Time complexity: O(n^2)\n    Space Complexity: O(n^2)\n    '''\n    if len(list1) == 0:\n        return []\n    # if list has target value, return all the combinations\n    if target == list1[0]:\n        return [list1]\n    # if there is only one element\n    if target < list1[0]:\n        return combination_sum(list1[1:], target)\n    # if there are two elements with target value, return all the combinations\n    # (only one of the two is the answer)\n    else:\n        return combination_sum(list1[1:], target - list1[0]) + combination_sum(list1[1:], target)\n    \ndef combination_sum_efficient(list1, target):\n    '''\n    A naive implementation of the function.\n    Time complexity: O(n^2)\n    Space Complexity: O(n^2)\n    '''\n    if len(list1) == 0:\n        return []\n    ans = []\n    # sort the list to make it easier to loop through\n    list1.sort()\n    # use for loop to loop through each element\n    for i in range(len(list1)):\n        # add each element to a list\n        for j in combination_sum(list1, target - list1[i]):\n            ans.append(j)\n    return ans\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    a_set = set(list1)\n    a = []\n    for x in a_set:\n        a.extend([x] * len(list1))\n    return a\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #Initialize the result list\n    result=[]\n    #Append all the elements in the list to the result list\n    for x in list1:\n        result.append(x)\n    #Print the result list\n    print(result)\n    #Create a function to find all the combinations of the elements\n    def combination(combination_list,n):\n        #If no combination possible\n        if len(combination_list)==0:\n            return\n        #Get the first element in the combination\n        elif len(combination_list)==1:\n            print(combination_list[0])\n            return\n        #Iterate through all elements in the combination\n        for x in range(0,n):\n            print(combination_list[x])\n            #Add the current combination to the result list\n            combination_list.append(combination_list[x])\n            #Iterate through all the other elements in the combination\n            combination(combination_list,n-1)\n            #Remove the current combination from the result list\n            combination_list.pop()\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output_list = []\n    def check(temp, counter=0):\n        if counter == len(list1):\n            output_list.append(temp)\n            return\n        for i in range(counter, len(list1)):\n            check(temp + list1[i], counter+1)\n    check('')\n    return output_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [[list1[0]]]\n    if len(list1)==2:\n        return [[list1[0]],[list1[0]],[list1[1]]]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # YOUR CODE HERE\n    result = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return []\n    if len(list1) == 1:\n        return list1\n    if len(list1) == 2:\n        return [[list1[0]],[list1[1]]]\n    if len(list1) == 3:\n        return [[list1[0]],[list1[1]],[list1[2]]]\n    \n    if list1[0] == list1[1] == list1[2]:\n        return combinations_list(list1[3:])\n    else:\n        if list1[0] == list1[1] and list1[2] == list1[3]:\n            return combinations_list([list1[0],list1[1]]) + combinations_list(list1[2:])\n        elif list1[0] == list1[2] and list1[1] == list1[3]:\n            return combinations_list([list1[0],list1[1],list1[2]])\n        elif list1[0] == list1[1] and list1[2] == list1[3]:\n            return combinations_list([list1[0],list1[1],list1[2]]) + combinations_list(list1[3:])\n        else:\n            return combinations_list(list1[:3] + list1[3:])\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum_product_subarray = arr[0]\n    subarray_product = arr[0]\n    for i in range(1, len(arr)):\n        subarray_product = max(arr[i] * maximum_product_subarray, subarray_product)\n        maximum_product_subarray = max(arr[i], maximum_product_subarray)\n    return max(subarray_product, maximum_product_subarray)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # For each element in the array\n    # check if the previous element equals the current element and \n    # if so, append the previous element in the list and skip it\n    # Otherwise, skip it and append the current element to the list\n    # Time: O(n)\n    # Space: O(n)\n    # We need to keep a hash table to store the max sub array\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Fetch the size of the array\n    n = len(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product=arr[0]\n    max_subarray=arr[0]\n    for i in range(1,len(arr)):\n        max_product=max(arr[i],max_product*arr[i])\n        max_subarray=max(max_subarray,max_product)\n    return max_subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    len_a = len(arr)\n    max_product = 1\n    for i in range(0, len_a - 1):\n        for j in range(i, len_a):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n            elif product == max_product:\n                if arr[i] > arr[j]:\n                    if i == 0 or arr[i]!= arr[i - 1] or j == 0:\n                        max_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #1. create a list to hold the products of arr.\n    max_prod = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    summ = curr_sum = prev_sum = 1\n    max_length = len(arr)\n    for i in range(1, max_length):\n        curr_sum = prev_sum * arr[i]\n        summ = max(summ, curr_sum)\n        prev_sum = curr_sum\n    return summ\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == []:\n        return [1]\n    else:\n        for i in range(1,len(arr)):\n            arr[i] *= arr[i-1]\n        return arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    if len(arr)==0:\n        return max_product\n    if len(arr)==1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Find the product of the subarray\n    product = 1\n    curr_product = 1\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        product *= arr[i]\n    # return the product\n    return product, curr_product\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    dict_length = len(dict)\n    for i in dict:\n        if dict[i]!= dict[n]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for v in dict.values():\n        if isinstance(v, dict):\n            check_value(v, n)\n        else:\n            if v!= n:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k,v in dict.items():\n        if type(v)!= type(dict[k]):\n            raise Exception(\"Error: dictionary contains mixed types\")\n    for k,v in dict.items():\n        if type(dict[k])!= type(v):\n            raise Exception(\"Error: dictionary contains mixed types\")\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key, value in dict.items():\n        if key not in values:\n            values.append(key)\n    \n    if all(x == y for x,y in zip(values,n)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if i == n:\n            break\n        elif dict[i].get('age') is not None and dict[i].get('age') < 18:\n            print('No')\n            return False\n        else:\n            print('Yes')\n            return True\n    print('No')\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key] == n:\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict:\n        if x in n:\n            return True\n    return False\n    "
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(n) is int and n >= 0:\n        for key, val in dict.items():\n            if val == n:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if len(dict[key])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(v == n for v in dict.values())\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if dict1[item] == '':\n            dict1.pop(item)\n            \n    return dict1\n    \ndef sort_dict(d):\n    '''\n    Write a function to sort a given dictionary by key.\n    '''\n    d.sort(key=lambda k: d.get(k))\n    \n    return d\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for keys in dict1:\n        if dict1[keys]==[]:\n            del dict1[keys]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == []:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.values():\n        if i == []:\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i]==None:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value == \"\":\n            dict2.pop(key)\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) > 0:\n        del dict1[dict1.keys()[0]]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if dict1[i]==0:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    # TODO: Write a function to drop empty items from a given dictionary.\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if len(v) == 0:\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # define the range of numbers\n    from itertools import product\n    # return maximum product\n    return max(list(product(*arr)))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # declaring a global variable to get the result\n    result = 1\n    # starting from every number\n    for i in range(len(arr)):\n        result = result * arr[i]\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = []\n    for i in range(len(arr)-1):\n        res.append(arr[i]*arr[i+1])\n    return max(res)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    return max([max(a) * min(b) for a, b in zip(arr[:-1], arr[1:])])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        maximum = max(arr[i], maximum * arr[i - 1])\n    return maximum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # write your code here\n    if len(arr) == 1:\n        return arr[0]\n    n = len(arr)\n    max = arr[0]\n    for i in range(1,n):\n        if arr[i] > max:\n            max = arr[i]\n    for i in range(n-1,-1,-1):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)):\n        max = max * arr[i]\n        \n    return max\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr.sort()\n    product = 1\n    for i in range(len(arr)-1):\n        if arr[i+1] > arr[i]:\n            product = arr[i+1] * product\n        else:\n            product = arr[i] * product\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #\n    # Write your code here.\n    #\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return list(zip(*test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not len(test_tup):\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) == 1:\n        print('Invalid data')\n        return\n    if not all(isinstance(tup, tuple) for tup in test_tup):\n        print('Invalid data')\n        return\n    if len(test_tup) <= 1:\n        print('Invalid data')\n        return\n    total = 0\n    for i, tup in enumerate(test_tup):\n        total += (tup[0] + tup[1])\n    return total\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize two variables: a_list and b_list\n    a_list = []\n    b_list = []\n    # add the corresponding elements of a and b to a_list and b_list\n    for i in range(len(test_tup)):\n        a_list.append(test_tup[i][0])\n        b_list.append(test_tup[i][1])\n    # print(a_list)\n    # print(b_list)\n    return a_list, b_list\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup[0], test_tup[1]\n    # Find the sum of the midpoints of the two sides\n    x_sum, y_sum = sum(x), sum(y)\n    # Find the difference between the sum of the midpoints of the two sides\n    x_diff, y_diff = x_sum - y_sum, abs(x_sum - y_sum)\n    # Find the direction of the difference\n    direction = 1 if x_diff > y_diff else -1\n    # Return the sum and difference of the pairwise addition\n    return (x_sum + y_sum, x_diff, y_diff, direction)\n    \ndef main():\n    '''\n    Write a function that solves the following problem:\n    \n    Given an array of size N of numbers, the task is to find the sum of the elements in the array in which the sum is not negative.\n    \n    '''\n    test_tup = (2, 3)\n    print(add_pairwise(test_tup))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO:\n    # Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    # Hint: Use the modulo operator.\n    # Hint: Use the % operator to get the remainder after the division.\n    # You'll want to find the first element of the tuple.\n    # Then, get the second element, and so on.\n    # You'll want to loop over the tuple.\n    \n    # the modulo function does a bit of math in the second element.\n    # Returns the first element of the tuple, then the second element, then the third element\n    # and so on.\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # O(n^2)\n    # O(n^2)\n    def find_pairwise(node, n):\n        if not node: return None\n        # find the first element in the tuple, assign it to the first index of node\n        first = node[0]\n        if first == n: return None\n        # find the second element in the tuple, assign it to the second index of node\n        second = node[1]\n        if second == first: return None\n        # create a new node with the values of the two elements\n        node = [first, second]\n        # find the index of the first and second elements of the tuple\n        i = 0\n        j = 1\n        while i < n and j < n:\n            if node[i] == node[j]:\n                break\n            i += 1\n            j += 1\n        # if the node is found, return it\n        if i == n and j == n:\n            return node\n        # if there are two nodes in the list, return the pair of nodes\n        if i < n and j < n:\n            return find_pairwise(node[:i]+node[j+1:], n)\n        # if there are no nodes in the list, return the pair of the first and second nodes\n        if i == n and j < n:\n            return find_pairwise([node[:i]+node[j+1:], node[i+1:n]], n)\n        # if there are two nodes in the list, return the pair of nodes\n        if i < n and j < n:\n            return find_pairwise([node[:i]+node[j+1:], node[i+1:j+1]], n)\n    # O(n^2)\n    # O(n^2)\n    return find_pairwise(test_tup, n)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO - COMPLETE this function\n    # Input: Tupple (a, b)\n    # Output: Tuple (a, b)\n    \n    #HINT - https://stackoverflow.com/questions/8835957/how-to-find-the-pair-of-elements-in-a-tuple\n    # Correct answer can be found with \n    # https://github.com/christopherpeterhology/pandas/blob/master/pandas/core/ops.html#numpy-ufunc\n    def find_pairwise(test_tup):\n        pairs = []\n        for i in range(len(test_tup)-1):\n            for j in range(i+1, len(test_tup)):\n                pairs.append((test_tup[i], test_tup[j]))\n        return pairs\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    pairwise_list = []\n    \n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] + test_tup[j] == test_tup[i] + test_tup[j]:\n                pairwise_list.append((test_tup[i], test_tup[j]))\n                \n    return pairwise_list\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) % 2!= 0:\n        return\n    \n    x, y = test_tup[0], test_tup[1]\n    if (x == y):\n        return\n    if (x < y):\n        y, x = x, y\n    \n    i = len(test_tup) - 2\n    while (i >= 0):\n        j = i + 1\n        while (j < len(test_tup)):\n            temp = test_tup[i] + test_tup[j]\n            if (temp == x):\n                return temp\n            elif (temp == y):\n                return temp\n            j += 1\n        i -= 1\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0]+test_tup[1], test_tup[0]+test_tup[2])\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # init\n    m = 1\n    for i in range(n):\n        m = (m * arr[i]) % n\n    return m\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n    ans=1\n    for i in range(len(arr)):\n        ans=ans*arr[i]\n    return ans\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Start with a product of all numbers\n    # multiply the first number by itself\n    # multiply the remaining numbers by the product of the first number and the product of the first number * the first number\n    # repeat multiplication until the product of the remaining numbers is not divisible by the product of the first number\n    # finally return the product of the remaining numbers and the product of the first number * the first number\n    product = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product = product * arr[i] \n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    k = []\n    for i in range(len(arr)):\n        k.append(arr[i]*i)\n    # print(k)\n    # print(len(k))\n    # print(k[0])\n    # print(k[-1])\n    return k[0]%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = []\n    for i in arr:\n        remainder.append(i % n)\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = result*arr[i]\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize product to zero\n    product = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import math\n    if n == 0: \n        return 1\n    else:\n        return math.prod([find_remainder(arr, i) for i in range(n)]) % n \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    l = []\n    for i in range(len(arr)):\n        l.append(arr[i] * i)\n    res = reduce(lambda x, y: x * y, l, 1)\n    return res\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    i = 0\n    if len(l) % 2 == 0:\n        if l[i+1] - l[i] > 1:\n            return 1\n        else:\n            return 0\n    else:\n        if l[i+1] - l[i] > 1:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if i > 1:\n            if l[i-1] == l[i] and l[i] == l[i+1]:\n                return True\n    return False\n    \n    \n    \ndef check_Consecutive2(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if i > 1:\n            if l[i-1] == l[i] and l[i] == l[i+1]:\n                return True\n    return False\n    \ndef test_check_Consecutive(l):\n    if check_Consecutive(l) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    \n    \ndef test_check_Consecutive2(l):\n    if check_Consecutive2(l) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef main():\n    l = [1, 3, 5, 6, 10, 12, 14, 16, 20, 100, 200, 300]\n    test_check_Consecutive(l)\n    test_check_Consecutive2(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0: return False\n    elif len(l)==1:\n        return l[0] == l[0] and l[0]%2!= 0\n    else:\n        d = {}\n        for i in range(len(l)-1): \n            if l[i] in d:\n                d[l[i]]+=1\n            else: \n                d[l[i]]=1\n        for k, v in d.items():\n            if v==1:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    list_2 = []\n    for i in l:\n        if i % 2!= 0:\n            list_2.append(i)\n    return list_2\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]:\n            c += 1\n    if c == 0:\n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2 or len(l) > 5: \n        return False\n    else:\n        for i in range(1, len(l) -1): \n            if l[i] == l[i - 1] and l[i] == l[i + 1] and l[i]!= 0: \n                return True\n    return False\n    \ndef check_Cycle(l): \n    '''\n    Write a python function to check if a list is a cycle or not.\n    '''\n    if l.count(l[0]) >= 2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return list(filter(lambda x: x%2==0, l))\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    num = []\n    for i in l:\n        if i not in num:\n            num.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    result = True\n    \n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            result = False\n    \n    return result\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    list = []\n    for i in l:\n        if (i % 10)!= 0:\n            list.append(i)\n        else:\n            if len(list) == 0:\n                return False\n            if list[-1]!= i:\n                return False\n            list.pop()\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) < len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_tuple1 = tuple(test_list1)\n    test_tuple2 = tuple(test_list2)\n    for i in range(0, len(test_list1)):\n        if test_tuple1[i]!= test_tuple2[i]:\n            return test_list1[i]\n    return test_list1[i]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = set()\n    for i, val in enumerate(test_list1):\n        if val in test_list2:\n            intersect.add(val)\n    return intersect\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple((item for item in test_list1 if item in test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for x in range(len(test_list1)):\n        for y in range(len(test_list2)):\n            if test_list1[x] == test_list2[y]:\n                intersection_list.append(test_list1[x])\n    return tuple(intersection_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # if test_list1 is the tuple itself\n    if test_list1 == tuple(test_list2):\n        return tuple(test_list1)\n    else:\n        # if test_list2 is the tuple itself\n        if test_list2 == tuple(test_list1):\n            return tuple(test_list1)\n        # if both test_list1 and test_list2 are not tuples\n        else:\n            # if both lists are empty\n            if len(test_list1) == 0 and len(test_list2) == 0:\n                return tuple()\n            # if test_list1 is longer than test_list2\n            elif len(test_list1) > len(test_list2):\n                # if test_list1 is a tuple of tuples\n                if type(test_list1) == tuple:\n                    return tuple_intersection(test_list1[0], test_list2[:len(test_list1)]) + tuple_intersection(test_list1[1:], test_list2[len(test_list1):])\n                # if test_list1 is a list of tuples\n                elif type(test_list1) == list:\n                    return tuple_intersection(test_list1, test_list2[:len(test_list1)]) + tuple_intersection(test_list1[:len(test_list1)], test_list2)\n                else:\n                    return test_list1\n            # if test_list1 is a tuple of tuples\n            else:\n                return tuple_intersection(test_list2, test_list1[:len(test_list2)]) + tuple_intersection(test_list2, test_list1[len(test_list2):])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #TODO: Implement this function\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list_1 = []\n    test_list_2 = []\n    for i in range(len(test_list1)):\n        test_list_1.append(test_list1[i])\n    for i in range(len(test_list2)):\n        test_list_2.append(test_list2[i])\n    test_list_1.sort()\n    test_list_2.sort()\n    intersection_list = set(test_list_1).intersection(set(test_list_2))\n    return intersection_list\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1)==0:\n        return str1\n    if len(str1)==1:\n        return str1[0].replace(ch,newch)\n    if ch not in str1[0]:\n        return str1[1:]\n    else:\n        return str1[0].replace(ch,newch) + str1[1:]\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ch in str1[i]:\n            str1=str1.replace(str1[i],newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=str1.replace(ch,newch)\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Using a for loop to replace each character.\n    for i in range(0,len(str1)):\n        # If the character is the same as the one in the replacement\n        # character.\n        if ch == str1[i]:\n            # We store the replacement char in the variable called\n            # newchar.\n            newchar = newch\n        # If the character is different from the one in the\n        # replacement character.\n        else:\n            # If there are two chars in the replacement\n            # character, they should be swapped.\n            if i % 2 == 0:\n                newchar = ch[i % len(ch)]\n            # If there are no two chars in the replacement\n            # character, they should be swapped.\n            else:\n                newchar = ch[(i+1) % len(ch)]\n        # Update the string by replacing the replacement\n        # character with the newchar.\n        str1 = str1.replace(ch,newchar,1)\n    # Return the new string.\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    l = len(str1)\n    i=0\n    new_str = ''\n    while i < l:\n        if str1[i]!= ch:\n            new_str += newch\n            i += 1\n        else:\n            new_str += str1[i]\n            i+=1\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    char_set=set(ch)\n    if len(char_set)==1:\n        return str1\n    else:\n        return str1.replace(ch,newch)\n        "
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i=0\n    while i<len(str1):\n        if str1[i]==ch:\n            str1=str1[:i]+newch+str1[i+1:]\n        else:\n            i+=1\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize the index variable\n    index = 0\n    \n    # loop through the string\n    for char in str1:\n        # if the current character is equal to the character to be replaced, then add 1 to the index\n        if char == ch:\n            index += 1\n            # update the string with the character\n        else:\n            # if not, then write a dash\n            if index!= 0:\n                str1 = str1[:index] + newch + str1[index:]\n            # if not, then write a dash\n            else:\n                str1 = str1[:index] + newch + str1[index:]\n            index = 0\n    # if there are no characters to replace, then write the string with the character\n    if index == 0:\n        str1 = str1[:index] + newch + str1[index:]\n    # else, then write a dash\n    else:\n        str1 = str1[:index] + newch + str1[index:]\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Fill in the fill_value function\n    # Fill in the sorted function\n    return Counter(dict1)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.values(), key = lambda x: (-x,x))\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=dict1.get, reverse=False)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if v not in new_dict:\n            new_dict[v] = k\n        else:\n            dict1[v] = -1\n            dict1.pop(k)\n            dict1.pop(v)\n    print(dict1)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #for k,v in dict1.items():\n    #    dict1[k]=sorted(dict1[k])\n    #return dict1\n    return sorted(dict1.items(), key = lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = dict1.copy()\n    sort_dict_new = dict()\n    for key, value in sort_dict.items():\n        if sort_dict[key] not in sort_dict_new.keys():\n            sort_dict_new[sort_dict[key]] = [value]\n        else:\n            sort_dict_new[sort_dict[key]].append(value)\n    print(sort_dict_new)\n    print(dict1)\n    return sorted(sort_dict_new.items(), key=lambda x: x[0])\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort()\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict(Counter(dict1).most_common())\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=lambda item:item[1], reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key = lambda x : x[1])\n    return dict1\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize answer, largest\n    answer = 0\n    # initialize the pointers to the first and last of the array\n    first = 0\n    last = len(nums) - 1\n    # calculate the answer\n    while first <= last:\n        # find the largest value\n        if nums[first] <= nums[last]:\n            answer = nums[first]\n            first += 1\n        else:\n            answer = nums[last]\n            last -= 1\n        # store the answer\n        if first < last:\n            answer = max(answer, nums[first] + nums[last])\n            first += 1\n            last -= 1\n    return answer\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    small_val = 0\n    large_val = 0\n    for num in nums:\n        if num < small_val:\n            small_val = num\n        elif num > large_val:\n            large_val = num\n    return small_val + large_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the sum to 0\n    # For each element in the array, increment the sum by element's value\n    # Return the sum\n    \n    if len(nums) <= 1:\n        return nums[0]\n    \n    largest_val = nums[0]\n    smallest_val = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] > largest_val:\n            largest_val = nums[i]\n        if nums[i] < smallest_val:\n            smallest_val = nums[i]\n    \n    # Add the largest and smallest values, if they are positive\n    # Add the smallest and largest values together, if they are negative\n    \n    if largest_val > smallest_val:\n        largest_val += smallest_val\n        smallest_val += largest_val\n    else:\n        smallest_val += largest_val\n        largest_val += smallest_val\n        \n    # Return the sum\n    return largest_val + smallest_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_n = -1\n    min_n = 100\n    for i in range(len(nums)):\n        if nums[i] > max_n:\n            max_n = nums[i]\n        if nums[i] < min_n:\n            min_n = nums[i]\n    return max_n + min_n\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_set = set(nums)\n    if len(num_set)==0:\n        return 0\n    else:\n        if nums[0]<=nums[-1]:\n            return nums[0]+big_sum(num_set)\n        else:\n            return nums[-1]+big_sum(num_set)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return (nums[0]+nums[-1]) if nums else 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] == nums[1]:\n        return nums[0]\n    result = nums[0]\n    for i in range(2, len(nums)):\n        result = max(result, nums[i] + nums[i-1])\n    return result\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    new_list = [num for num in nums if num > 0]\n    return sum(new_list) - sum(new_list[0:len(new_list)//2])\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = ''\n    for character in string:\n        if character.isupper():\n            new_string += character.lower()\n        else:\n            new_string += character\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if(string.isupper()):\n        return string.lower()\n    else:\n        return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    newstring = string.lower()\n    return newstring\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    newstr = re.sub('[a-z]', '', str1)\n    return newstr\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code goes here\n    s = ''\n    i = 0\n    j = 0\n    for k in str1:\n        if k.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            while (j < len(str1)):\n                if k.lower() in str1[j].lower():\n                    s = s + k\n                    j = j + 1\n                j = j + 1\n            s = s[:-1]\n        i = i + 1\n    return s\n    \ndef remove_punctuation(s):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    # your code goes here\n    return s.translate(str.maketrans('', '', string.punctuation))\n    \ndef remove_stopwords(s):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    # your code goes here\n    sws = stopwords.words('english')\n    s = s.translate(str.maketrans('', '', string.punctuation))\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s)\n    s = remove_lowercase(s)\n    s = remove_punctuation(s"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    stri = str1.lower()\n    if stri.count('u')!= 0:\n        stri = re.sub(r'u', '', stri)\n        stri = re.sub(r'e', '', stri)\n        stri = re.sub(r'i', '', stri)\n        stri = re.sub(r'o', '', stri)\n        stri = re.sub(r'u', '', stri)\n        stri = re.sub(r'e', '', stri)\n        stri = re.sub(r'i', '', stri)\n        stri = re.sub(r'o', '', stri)\n        return stri\n    else:\n        return stri\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def _remove_lowercase(s):\n        return re.sub(r'[a-z]', '', s).lower()\n    return _remove_lowercase(str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters in a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation)).lower()\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits)).lower()\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation)).lower()\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits)).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = []\n    if len(str1) < 1:\n        return str1\n    else:\n        for i in range(len(str1) - 1, -1, -1):\n            if str1[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                str1 = str1[:i] + str1[i + 1:]\n        return str1\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    result = []\n    punctuations = {\n        \"'\": \"\",\n        \"\u2019\": \"\",\n        \"\u2018\": \"\",\n        \"`\": \"\",\n        \"\u201c\": \"\",\n        \"\u201d\": \"\",\n        \"(\": \"\",\n        \")\": \"\",\n        \",\": \"\",\n        \".\": \"\",\n        \",\": \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"-\" : \"\",\n        \"-\": \"\",\n        \"_\": \"\",\n        \"`\": \"\",\n        \"'\": \"\",\n        \"/\": \"\",\n        \":\": \"\",\n        \";\": \"\",\n        \";\": \"\",\n        '\"': \"\",\n        '\"': \"\",\n        \"/\": \"\",\n        \"<\": \"\",\n        \">\": \"\",\n        \">\": \"\",\n        \"?\": \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"-\" : \"\",\n        \"-\": \"\",\n        \"_\": \"\",\n        \"`\": \"\",\n        \"'\": \"\",\n        \"}\": \"\",\n        \"{\": \"\",\n        \",\": \"\",\n        \".\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \",\": \"\",\n        \":\": \"\",\n        \";\": \"\",\n        \";\": \"\",\n        \"'\": \"\",\n        '\"': \"\",\n        \"/\": \"\",\n        \"?\": \"\",\n        \",\": \"\",\n        \")\": \"\",\n        \"{\": \"\",\n        \"}\": \"\",\n        \"&\": \"\",\n        \"}\": \"\",\n        \"{\": \"\",\n        \"}\": \"\",\n        \"$\": \"\",\n        \"}\": \"\",\n        \"{\": \"\",\n        \"}\": \"\",\n        \"&\": \"\",\n        \"}\": \"\",\n        \"}\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\": \"\",\n        \" \": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : \"\",\n        \"@\": \"\",\n        \"#\": \"\",\n        \"$\": \"\",\n        \"%\": \"\",\n        \"&\": \"\",\n        \"*\": \"\",\n        \"!\": \"\",\n        \"+\": \"\",\n        \"=\" : "
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    a = ''\n    for i in str1:\n        if i.islower():\n            a+=i\n    return a\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = ''\n    for s in str1:\n        if s.isalpha():\n            result += s.lower()\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Initialize an empty string to store the resultant string.\n    result = ''\n    # Loop through each character and print it in reverse order.\n    for i in range(len(str1)-1, -1, -1):\n        # If the current character is lowercase, save it to result.\n        if str1[i].islower():\n            result = str1[i] + result\n        # If the current character is not lowercase, we store it as is in result and keep the current character.\n        else:\n            result = result + str1[i]\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    # your code goes here\n    lower_dict = {'\u0430':'a', '\u0431':'b', '\u0432':'v', '\u0433':'g', '\u0434':'d', '\u0435':'e', '\u0451':'e', '\u0436':'z', '\u0437':'z', '\u0438':'i', '\u0439':'i', '\u043a':'k', '\u043b':'l', '\u043c':'m', '\u043d':'n', '\u043e':'o', '\u043f':'p', '\u0440':'r', '\u0441':'s', '\u0442':'t', '\u0443':'u', '\u0444':'f', '\u0445':'x', '\u0446':'t', '\u0447':'c', '\u0448':'s', '\u0449':'z', '\u044a':'a', '\u044b':'y', '\u044c':'y', '\u044d':'e', '\u044e':'e', '\u044f':'z'}\n    # your code goes here\n    lst_rep = []\n    for letter in str1:\n        if letter in lower_dict:\n            lst_rep.append(lower_dict[letter])\n        else:\n            lst_rep.append(letter)\n    return ''.join(lst_rep)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #Define a variable\n    #Use the \"slicing\" operator to print out the first three digits\n    return int(n[0:3])\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else :\n        return (n//10) + 1 \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    lst = []\n    for i in str(n) :\n        lst.append(i)\n    return lst[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(n)\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n == 0) :\n        return 0\n    digits = []\n    while n :\n        digits.append(n % 10)\n        n = n // 10\n    return digits[0]\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = 0\n    while n > 10:\n        i = i + 1\n        n = n//10\n    return n//i\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = n\n    while num > 0:\n        rem = num % 10\n        num = num // 10\n        print(rem, end=\" \")\n    print()\n    return rem\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit = n % 10\n    return digit\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(n) :\n        if (n % 10) == 0 :\n            return n // 10\n        else :\n            return n % 10\n    \ndef first_Digit_list(n) :\n    '''\n    Write a python function to find the first digit of a given list.\n    '''\n    a = 0\n    for i in n :\n        a = a + 1\n    for i in range(len(n)) :\n        a = a * 10 + n[i]\n    return a\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return -1\n    if n < 0 :\n        return -1\n    else :\n        count = 0\n        while n!= 0 :\n            rem = n % 10\n            n = n // 10\n            count += 1\n        return count\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even=[]\n    odd=[]\n    for i in list:\n        if i % 2 == 1:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # your code goes here\n    if len(list) == 0:\n        print(\"no odd numbers\")\n    else:\n        for i in range(len(list)//2):\n            print(list[i])\n    return \n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            list[i] = list[i]\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(x) for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2!= 0: \n            odd.append(i) \n    return odd \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            yield i\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for x in list: \n        if x%2!= 0: \n            odd_list.append(x) \n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd.append(list[i])\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x = 1\n    y = 1\n    z = 1\n    temp = 0\n    for i in range(1,n+1):\n        temp += i*i*i\n        if i!= n:\n            temp += 3*i*i*i\n            if i!= n:\n                temp += 3*i*i*i*i\n        if i!= n:\n            temp += 4*i*i*i\n            if i!= n:\n                temp += 4*i*i*i*i\n        if i!= n:\n            temp += 5*i*i*i\n            if i!= n:\n                temp += 5*i*i*i*i\n        if i!= n:\n            temp += 6*i*i\n            if i!= n:\n                temp += 6*i*i*i\n        if i!= n:\n            temp += 7*i*i\n            if i!= n:\n                temp += 7*i*i*i\n        if i!= n:\n            temp += 8*i*i\n            if i!= n:\n                temp += 8*i*i*i\n        if i!= n:\n            temp += 9*i*i\n            if i!= n:\n                temp += 9*i*i*i\n        if i!= n:\n            temp += 10*i*i\n            if i!= n:\n                temp += 10*i*i*i\n        if i!= n:\n            temp += 11*i*i\n            if i!= n:\n                temp += 11*i*i*i\n        if i!= n:\n            temp += 12*i*i\n            if i!= n:\n                temp += 12*i*i*i\n        if i!= n:\n            temp += 13*i*i\n            if i!= n:\n                temp += 13*i*i*i\n        if i!= n:\n            temp += 14*i*i\n            if i!= n:\n                temp += 14*i*i*i\n        if i!= n:\n            temp += 15*i*i\n            if i!= n:\n                temp += 15*i*i*i\n        if i!= n:\n            temp += 16*i*i\n            if i!= n:\n                temp += 16*i*i*i\n        if i!= n:\n            temp += 17*i*i\n            if i!= n:\n                temp += 17*i*i*i\n        if i!= n:\n            temp += 18*i*i\n            if i!= n:\n                temp += 18*i*i*i\n        if i!= n:\n            temp += 19*i*i\n            if i!= n:\n                temp += 19*i*i*i\n        if i!= n:\n            temp += 20*i*i\n            if i!= n:\n                temp += 20*i*i*i\n        if i!= n:\n            temp += 21*i*i\n            if i!= n:\n                temp += 21*i*i*i\n        if i!= n:\n            temp += 22*i*i\n            if i!= n:\n                temp += 22*i*i*i\n        if i!= n:\n            temp += 23*i*i\n            if i!= n:\n                temp += 23*i*i*i\n        if i!= n:\n            temp += 24*i*i\n            if i!= n:\n                temp += 24*i*i*i\n        if i!= n:\n            temp += 25*i*i\n            if i!= n:\n                temp += 25*i*i*i\n        if i!= n:\n            temp += 26*i*i\n            if i!= n:\n                temp += 26*i*i*i\n        if i!= n:\n            temp += 27*i*i\n            if i!= n:\n                temp += 27*i*i*i\n        if i!= n:\n            temp += 28*i*i\n            if i!= n:\n                temp += 28*i*i*i\n        if i!= n:\n            temp += 29*i*i\n            if i!= n:\n                temp += 29*i*i*i\n        if i!= n:\n            temp += 30*i*i\n            if i!= n:\n                temp += 30*i*i*i\n        if i!= n:\n            temp += 31*i*i\n            if i!= n:\n                temp += 31*i*i*i\n        if i!= n:\n            temp += 32*i*i\n            if i!= n:\n                temp += 32*i*i*i\n        if i!= n:\n            temp += 33*i*i\n            if i!= n:\n                temp += 33*i*i*i\n        if i!= n:\n            temp += 34*i*i\n            if i!= n:\n                temp += 34*i*i*i\n        if i!= n:\n            temp += 35*i*i\n            if i!= n:\n                temp += 35*i*i*i\n        if i!= n:\n            temp += 36*i*i\n            if i!= n:\n                temp += 36*i*i*i\n        if i!= n:\n            temp += 37*i*i\n            if i!= n:\n                temp += 37*i*i*i\n        if i!= n:\n            temp += 38*i*i\n            if i!= n:\n                temp += 38*i*i*i\n        if i!= n:\n            temp += 39*i*i\n            if i!= n:\n                temp += 39*i*i*i\n        if i!= n:\n            temp += 40*i*i\n            if i!= n:\n                temp += 40*i*i*i\n        if i!= n:\n            temp += 41*i*i\n            if i!= n:\n                temp += 41*i*i*i\n        if i!= n:\n            temp += 42*i*i\n            if i!= n:\n                temp += 42*i*i*i\n        if i!= n:\n            temp += 43*i*i\n            if i!= n:\n                temp += 43*i*i*i\n        if i!= n:\n            temp += 44*i*i\n            if i!= n:\n                temp += 44*i*i*i\n        if i!= n:\n            temp += 45*i*i\n            if i!= n:\n                temp += 45*i*i*i\n        if i!= n:\n            temp += 46*i*i\n            if i!= n:\n                temp += 46*i*i*i\n        if i!= n:\n            temp += 47*i*i\n            if i!= n:\n                temp += 47*i*i*i\n        if i!= n:\n            temp += 48*i*i\n            if i!= n:\n                temp += 48*i*i*i\n        if i!= n:\n            temp += 49*i*i\n            if i!= n:\n                temp += 49*i*i*i\n        if i!= n:\n            temp += 50*i*i\n            if i!= n:\n                temp += 50*i*i*i\n        if i!= n:\n            temp += 51*i*i\n            if i!= n:\n                temp += 51*i*i*i\n        if i!= n:\n            temp += 52*i*i\n            if i!= n:\n                temp += 52*i*i*i\n        if i!= n:\n            temp += 53*i*i\n            if i!= n:\n                temp += 53*i*i*i\n        if i!= n:\n            temp += 54*i*i\n            if i!= n:\n                temp += 54*i*i*i\n        if i!= n:\n            temp += 55*i*i\n            if i!= n:\n                temp += 55*i*i*i\n        if i!= n:\n            temp += 56*i*i\n            if i!= n:\n                temp += 56*i*i*i\n        if i!= n:\n            temp += 57*i*i\n            if i!= n:\n                temp += 57*i*i*i\n        if i!= n:\n            temp += 58*i*i\n            if i!= n:\n                temp += 58*i*i*i\n        if i!= n:\n            temp += 59*i*i\n            if i!= n:\n                temp += 59*i*i*i\n        if i!= n:\n            tem"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(f\"\\nThe sum of the cubes of the first {n} natural numbers is {(n ** 3) + (n ** 3)}\")\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return abs(sum((i**3) for i in range(1,n))-sum(i**3 for i in range(1,n)))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    difference = 0\n    for i in range(0, n) :\n        difference = difference + (n * (n + 1) / 2)\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    ans = 0 \n    for i in range(1,n+1):\n        ans += i*(i**3)\n    return ans\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def naturalnumber(n) :\n        sum = 0\n        for i in range(1, n+1) :\n            sum += i ** 3\n        return sum\n    def print1() :\n        print(naturalnumber(n))\n    print1()\n    sum = naturalnumber(n)\n    print(sum)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def rsum(n) : \n        '''\n        Write a python function to find the sum of the cubes of the first n natural numbers.\n        '''\n        def cubesum(n) : \n            '''\n            Write a python function to find the cubes of the first n natural numbers.\n            '''\n            return n**3\n        \n        if n == 1 : \n            return n \n        else : \n            return n - sum(cubesum(n - 1)) \n    \n    return rsum(n) \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of the first natural numbers\n    sum = 0\n    for i in range(1,n+1) : \n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    '''\n    I know it's a little bit more complicated than the one here, but it's the best solution. \n    I'm quite sure there's a more elegant way to write this one.\n    '''\n    '''\n    def main() :  \n        '''\n        I don't know how to prove that the function works.\n        '''\n        # raise NotImplementedError('Need to implement')\n        # return\n    def inner(n) :  \n        '''\n        Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n        '''\n        I know it's a little bit more complicated than the one here, but it's the best solution. \n        I'm quite sure there's a more elegant way to write this one.\n        '''\n        '''\n        def main() :  \n            '''\n            I don't know how to prove that the function works.\n            '''\n            # raise NotImplementedError('Need to implement')\n            # return\n        def inner(n) :  \n            '''\n            Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n            '''\n            '''\n            I know it's a little bit more complicated than the one here, but it's the best solution. \n            I'm quite sure there's a more elegant way to write this one.\n            '''\n            '''\n            def main() :  \n                '''\n                I don't know how to prove that the function works.\n                '''\n                # raise NotImplementedError('Need to implement')\n                # return\n            def inner(n) :  \n                '''\n                Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                '''\n                '''\n                I know it's a little bit more complicated than the one here, but it's the best solution. \n                I'm quite sure there's a more elegant way to write this one.\n                '''\n                '''\n                def main() :  \n                    '''\n                    I don't know how to prove that the function works.\n                    '''\n                    # raise NotImplementedError('Need to implement')\n                    # return\n                def inner(n) :  \n                    '''\n                    Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                    '''\n                    '''\n                    I know it's a little bit more complicated than the one here, but it's the best solution. \n                    I'm quite sure there's a more elegant way to write this one.\n                    '''\n                    '''\n                    def main() :  \n                        '''\n                        I don't know how to prove that the function works.\n                        '''\n                        # raise NotImplementedError('Need to implement')\n                        # return\n                    def inner(n) :  \n                        '''\n                        Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                        '''\n                        '''\n                        I know it's a little bit more complicated than the one here, but it's the best solution. \n                        I'm quite sure there's a more elegant way to write this one.\n                        '''\n                        '''\n                        def main() :  \n                            '''\n                            I don't know how to prove that the function works.\n                            '''\n                            # raise NotImplementedError('Need to implement')\n                            # return\n                        def inner(n) :  \n                            '''\n                            Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                            '''\n                            '''\n                            I know it's a little bit more complicated than the one here, but it's the best solution. \n                            I'm quite sure there's a more elegant way to write this one.\n                            '''\n                            '''\n                            def main() :  \n                                '''\n                                I don't know how to prove that the function works.\n                                '''\n                                # raise NotImplementedError('Need to implement')\n                                # return\n                            def inner(n) :  \n                                '''\n                                Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                                '''\n                                '''\n                                I know it's a little bit more complicated than the one here, but it's the best solution. \n                                I'm quite sure there's a more elegant way to write this one.\n                                '''\n                                '''\n                                def main() :  \n                                    '''\n                                    I don't know how to prove that the function works.\n                                    '''\n                                    # raise NotImplementedError('Need to implement')\n                                    # return\n                                def inner(n) :  \n                                    '''\n                                    Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                                    '''\n                                    '''\n                                    I know it's a little bit more complicated than the one here, but it's the best solution. \n                                    I'm quite sure there's a more elegant way to write this one.\n                                    '''\n                                    '''\n                                    def main() :  \n                                        '''\n                                        I don't know how to prove that the function works.\n                                        '''\n                                        # raise NotImplementedError('Need to implement')\n                                        # return\n                                    def inner(n) :  \n                                        '''\n                                        Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                                        '''\n                                        '''\n                                        I know it's a little bit more complicated than the one here, but it's the best solution. \n                                        I'm quite sure there's a more elegant way to write this one.\n                                        '''\n                                        '''\n                                        def main() :  \n                                            '''\n                                            I don't know how to prove that the function works.\n                                            '''\n                                            # raise NotImplementedError('Need to implement')\n                                            # return\n                                        def inner(n) :  \n                                            '''\n                                            Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                                            '''\n                                            '''\n                                            I know it's a little bit more complicated than the one here, but it's the best solution. \n                                            I'm quite sure there's a more elegant way to write this one.\n                                            '''\n                                            '''\n                                            def main() :  \n                                                '''\n                                                I don't know how to prove that the function works.\n                                                '''\n                                                # raise NotImplementedError('Need to implement')\n                                                # return\n                                            def inner(n) :  \n                                                '''\n                                                Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                                                '''\n                                                '''\n                                                I know it's a little bit more complicated than the one here, but it's the best solution. \n                                                I'm quite sure there's a more elegant way to write this one.\n                                                '''\n                                                '''\n                                                def main() :  \n                                                    '''\n                                                    I don't know how to prove that the function works.\n                                                    '''\n                                                    # raise NotImplementedError('Need to implement')\n                                                    # return\n                                                def inner(n) :  \n                                                    '''\n                                                    Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n                                                    '''\n                                                    '''\n                                                    I know it's a little bit more complicated than the one here, but it's the best solution. \n                                                    I'm quite sure there's a more elegant way to write this one.\n                                                    '''\n                                                    '''\n                                                    def main() :  \n                                                        '''\n                                                        I don't know how to prove that the function works.\n                                                        '''\n                                                        # raise NotImplementedError('Need to implement')\n                                                        # return\n                                                    def inner(n) :  \n                                                        '''\n                                                        Write a python function to calculate the difference between the sum of cubes of the first n natural numbers and the su"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    b=[]\n    odd=0\n    for i in range(N):\n        if A[i]==1:\n            for j in range(N):\n                if A[j]==1:\n                    b.append(i)\n        if A[i]==0:\n            b.append(i)\n            \n    for i in range(len(b)):\n        for j in range(i,len(b)):\n            if b[i]!=b[j]:\n                if A[b[i]]&A[b[j]]==A[b[j]]:\n                    odd+=1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(0, N-1) :\n        xor_value = A[i] ^ A[i+1]\n        if xor_value % 2!= 0 :\n            return i\n    return -1\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(A):\n        for j in range(N):\n            if A[i] ^ N[j] == 1 :\n                if j%2 == 0 :\n                    print(A[i] ^ N[j])\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(0,N) :\n        for j in range(i,N) :\n            if (A[i]^A[j])%2 == 1 :\n                odd_pairs = odd_pairs + 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return sum(i for i in A if i&1) \n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    return sum(i for i in A if i&1) \n    \ndef find_Fib(A,N) : \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    x = 0\n    y = 1\n    F = []\n    for i in range(N) : \n        F.append(y)\n        x = y\n        y = x + y \n    return F[N] \n    \ndef find_Hamming_Distance(A,N) : \n    '''\n    Write a python function to find the Hamming distance between two strings.\n    '''\n    Hamming_Distance = 0\n    for i in range(len(A)) : \n        Hamming_Distance += abs(ord(A[i]) - ord(A[i+N]))\n    return Hamming_Distance \n    \ndef find_Expected_Distance(A,N) : \n    '''\n    Write a python function to find the expected Hamming distance between two strings.\n    '''\n    Expected_Distance = 0\n    Hamming_Distance = find_Hamming_Distance(A,N)\n    for i in range(len(A)) : \n        Expected_Distance += Hamming_Distance/len(A)\n    return Expected_Distance \n    \ndef find_LCS(A,B) : \n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    LCS = []\n    LCS_len = len(B)\n    for i in range(LCS_len-1, -1, -1) : \n        for j in range(i, -1, -1) : \n            if A[i] == B[j] : \n                LCS.append(A[i:j+1])\n                break\n    return LCS \n    \ndef find_LCS(A,B) : \n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    LCS = []\n    LCS_len = len(B)\n    for i in range(LCS_len-1, -1, -1) : \n        for j in range(i, -1, -1) : \n            if A[i] == B[j] : \n                LCS.append(B[j:i+1])\n                break\n    return LCS \n    \ndef find_LCS_by_dict(A,B,LCS) : \n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    LCS_dict = {}\n    for i in range(len(A)) : \n        if A[i] not in LCS_dict.keys() : \n            LCS_dict[A[i]] = 1\n        else : \n            LCS_dict[A[i]] += 1\n    LCS_dict_length = len(LCS_dict)\n    LCS_list = []\n    for key, value in LCS_dict.items() : \n        LCS_list.append((key,value))\n    LCS_list.sort(key=len)\n    return LCS_list[LCS_dict_length-1][1]\n    \ndef find_LCS_by_matrix(A,B,LCS) : \n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    LCS_dict = {}\n    for i in range(len(A)) : \n        if A[i] not in LCS_dict.keys() : \n            LCS_dict[A[i]] = 1\n        else : \n            LCS_dict[A[i]] += 1\n    LCS_dict_length = len(LCS_dict)\n    LCS_list = []\n    for key, value in LCS_dict.items() : \n        LCS_list.append((key,value))\n    LCS_list.sort(key=len)\n    return LCS_list[LCS_dict_length-1][1]\n    \ndef find_LCS_by_matrix2(A,B,LCS) : \n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    LCS_dict = {}\n    for i in range(len(A)) : \n        if A[i] not in LCS_dict.keys() : \n            LCS_dict[A[i]] = 1\n        else : \n            LCS_dict[A[i]] += 1\n    LCS_dict_length = len(LCS_dict)\n    LCS_list = []\n    for key, value in LCS_dict.items() : \n        LCS_list.append((key,value))\n    LCS_list.sort(key=len)\n    return LCS_list[LCS_dict_length-1][1]\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        if(A[i] & 1)!= 0 :\n            count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    s=0\n    if(A[0]==A[N-1]):\n        s+=1\n    for i in range(0,N-1):\n        if(A[i]==A[i+1]):\n            s+=1\n    return s\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #? Create a count variable to store the number of pairs.\n    #? Use an if statement to check for the odd value\n    #? If the odd value is found, increment the count by 1.\n    #? Else, increment the count by 2.\n    #? Print out the results.\n    #? Constraints: - \n    #? The function should take two inputs: -\n    #? A - a 32 bit unsigned integer.\n    #? N - a 32 bit unsigned integer.\n    #? If the first parameter is an odd number, add 1 to the count variable.\n    #? If the second parameter is an odd number, add 2 to the count variable.\n    #? Print out the count variable.\n    \n    count = 0\n    #? Use the if statement to check for the odd value.\n    if N % 2 == 1:\n        count += 1\n        print(count)\n    else:\n        count += 2\n        print(count)\n    #? Convert the count variable to an integer.\n    count = int(count)\n    #? Print out the results.\n    print(count)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N%2==0 :\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # empty string\n    if not string:\n        return \"\"\n    \n    # keep a pointer\n    stack = []\n    \n    # move string and append to string\n    for char in string:\n        stack.append(char)\n        \n    # append the string to string\n    result = \"\".join(stack)\n    \n    # if it's empty\n    if not result:\n        result = string\n    \n    # if the stack is empty\n    if not stack:\n        result = \"\".join(stack)\n        \n    return result\n    \n    \n    "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # remove all lower case\n    string.replace(' ', '')\n    # remove spaces\n    string.replace(' ','')\n    # replace all numbers with space\n    string.replace('#','')\n    # replace all characters with space\n    string.replace('!','')\n    # remove duplicate spaces\n    string.replace(' ','')\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_string_helper(string, index, flag):\n        new_string = \"\"\n        for i in range(index, len(string)):\n            if string[i].isupper() == flag:\n                new_string += string[i].lower()\n            elif string[i].islower() == flag:\n                new_string += string[i].upper()\n            else:\n                new_string += string[i]\n        return new_string\n    return toggle_string_helper(string, index=0, flag=False)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return \"\"\n    if string.isupper():\n        return string[::-1].casefold()\n    else:\n        return string.casefold()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled = False\n    \n    for c in string:\n        if c == \" \":\n            toggled = not toggled\n            break\n    \n    return toggled\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string:\n        if string[0] in string:\n            string = string[0].upper() + string[1:]\n        else:\n            string = string[0].lower() + string[1:]\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.replace('.', '-')\n    string = string.replace('?', '@')\n    string = string.replace('!', '!@')\n    string = string.replace('\"', '\"@')\n    string = string.replace('#', '-#')\n    string = string.replace('$', '$$')\n    string = string.replace('%', '%')\n    string = string.replace('$', '\\$')\n    string = string.replace('@', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = string.replace('!', '!#')\n    string = string.replace('#', '\\#')\n    string = string.replace('$', '\\$')\n    string = string.replace('%', '\\%')\n    string = string.replace('&&', '&')\n    string = strin"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n    \n    \ndef remove_multiple_spaces(string):\n    '''\n    Write a function to remove the multiple spaces from a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char!='':\n            new_string += char\n        else:\n            new_string +=''\n    return new_string\n    \n    \ndef remove_single_spaces(string):\n    '''\n    Write a function to remove the single spaces from a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char!='':\n            new_string += char\n        else:\n            new_string +=''\n    return new_string\n    \n    \ndef get_words(string):\n    '''\n    Write a function to return a list of all the words in a string.\n    '''\n    new_list = string.split()\n    return new_list\n    \n    \ndef get_characters(string):\n    '''\n    Write a function to return a list of all the characters in a string.\n    '''\n    new_list = string.split()\n    return new_list\n    \n    \ndef get_all_words(string):\n    '''\n    Write a function to return a list of all the words in a string.\n    '''\n    new_list = string.split()\n    for i in new_list:\n        if len(i) > 1:\n            if i[0].isupper():\n                if i[1] =='':\n                    new_list.append(i)\n            else:\n                if i[0] =='':\n                    new_list.append(i)\n        else:\n            if i[0].isupper():\n                new_list.append(i)\n    return new_list\n    \n    \ndef get_all_characters(string):\n    '''\n    Write a function to return a list of all the characters in a string.\n    '''\n    new_list = string.split()\n    for i in new_list:\n        if len(i) > 1:\n            if i[0].isupper():\n                if i[1] =='':\n                    new_list.append(i)\n            else:\n                if i[0] =='':\n                    new_list.append(i)\n        else:\n            if i[0].isupper():\n                new_list.append(i)\n    return new_list\n    \n    \ndef get_lower_case(string):\n    '''\n    Write a function to convert the string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n    \n    \ndef get_upper_case(string):\n    '''\n    Write a function to convert the string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string\n    \n    \ndef get_cap_word(string):\n    '''\n    Write a function to capitalize a single word.\n    '''\n    new_string = string.capitalize()\n    return new_string\n    \n    \ndef get_cap_char(string):\n    '''\n    Write a function to capitalize a single character.\n    '''\n    new_string = string.capitalize()\n    return new_string\n    \n    \ndef replace_char(string, old_char, new_char):\n    '''\n    Write a function to replace the character in a string.\n    '''\n    new_string = string.replace(old_char, new_char)\n    return new_string\n    \n    \ndef append_char(string, new_char):\n    '''\n    Write a function to append a new character to a string.\n    '''\n    new_string = string.append(new_char)\n    return new_string\n    \n    \ndef capitalize_char(string):\n    '''\n    Write a function to capitalize the first character of a string.\n    '''\n    new_string = string.capitalize()\n    return new_string\n    \n    \ndef capitalize_string(string):\n    '''\n    Write a function to capitalize the first and last character of a string.\n    '''\n    new_string = string.capitalize()\n    new_string = new_string[:len(new_string)-1]\n    new_string = new_string + new_string[-1]\n    return new_string\n    \n    \ndef remove_character(string, char):\n    '''\n    Write a function to remove a single character from a string.\n    '''\n    new_string = string.replace(char, '')\n    return new_string\n    \n    \ndef is_digit(string):\n    '''\n    Write a function to check whether a string is in a valid Python number.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \n    \ndef is_punctuation(string):\n    '''\n    Write a function to check whether a string is in a valid Python punctuation.\n    '''\n    if string in [\"(\", \"[\", \"{\"]:\n        return True\n    else:\n        return False\n    \n    \ndef is_string(string):\n    '''\n    Write a function to check whether a string is in a valid Python string.\n    '''\n    if string in [\"'\", '\"', \"'\", \"''\"]:\n        return True\n    else:\n        return False\n    \n    \ndef is_math_number(string):\n    '''\n    Write a function to check whether a string is in a valid math number.\n    '''\n    if string in [\"+\", \"-\", \"*\", \"/\"]:\n        return True\n    else:\n        return False\n    \n    \ndef is_integer(string):\n    '''\n    Write a function to check whether a string is in a valid integer.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \n    \ndef is_decimal(string):\n    '''\n    Write a function to check whether a string is in a valid decimal.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \n    \ndef is_alphanumeric(string):\n    '''\n    Write a function to check whether a string is in a valid alphanumeric.\n    '''\n    if string.isalnum():\n        return True\n    else:\n        return False\n    \n    \ndef is_lower_case(string):\n    '''\n    Write a function to check whether a string is in a valid lower case.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n    \n    \ndef is_upper_case(string):\n    '''\n    Write a function to check whether a string is in a valid upper case.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n    \n    \ndef is_spaces(string):\n    '''\n    Write a function to check whether a string is in a valid whitespace.\n    '''\n    if string in [\" \", '\\t', '\\n', '\\r']:\n        return True\n    else:\n        return False\n    \n    \ndef is_not_space(string):\n    '''\n    Write a function to check whether a string is in a whitespace.\n    '''\n    if string in [' ', '\\t', '\\n', '\\r']:\n        return True\n    else:\n        return False\n    \n    \ndef is_not_punctuation(string):\n    '''\n    Write a function to check whether a string is in a punctuation.\n    '''\n    if string in [\"(\", \"[\", \"{\"]:\n        return True\n    else:\n        return False\n    \n    \ndef is_not_string(string):\n    '''\n    Write a function to check whether a string is in a valid string.\n    '''\n    if string in [\"(\", \"[\", \"{\"]:\n        return True\n    else:\n        return False\n    \n    \ndef is_not_math_number(string):\n    '''\n    Write a function to check whether a string is in a valid math number.\n    '''"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    switch = {\n        \"a\": \"t\",\n        \"b\": \"t\",\n        \"c\": \"T\",\n        \"d\": \"T\",\n        \"e\": \"T\",\n        \"f\": \"t\",\n        \"g\": \"T\",\n        \"h\": \"T\",\n        \"i\": \"T\",\n        \"j\": \"T\",\n        \"k\": \"T\",\n        \"l\": \"T\",\n        \"m\": \"t\",\n        \"n\": \"t\",\n        \"o\": \"t\",\n        \"p\": \"t\",\n        \"q\": \"t\",\n        \"r\": \"T\",\n        \"s\": \"t\",\n        \"t\": \"T\",\n        \"u\": \"t\",\n        \"v\": \"T\",\n        \"w\": \"T\",\n        \"x\": \"T\",\n        \"y\": \"t\",\n        \"z\": \"T\"\n    }\n    return switch.get(string.upper())\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(int, str(abs(n1 - n2))))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in range(n1):\n        s += abs(n1 - i)\n    for i in range(n2):\n        s += abs(n2 - i)\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # if both numbers are negative, return None\n    if n1 < 0 or n2 < 0:\n        return None\n    # if we have a negative number, return None\n    if n1 < n2:\n        return None\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = list(str(n1))\n    n2 = list(str(n2))\n    result = 0\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        if n1%10!= 0:\n            diff += 1\n        if n2%10!= 0:\n            diff += 1\n        if n2%10 == 0:\n            diff += 1\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return int(str(n1 - n2)[0])"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    '''\n    Write a python function to find the difference between the two numbers.\n    '''\n    '''\n    Write a python function to find the maximum number of digits in two numbers.\n    '''\n    '''\n    Write a python function to find the maximum number of digits in two numbers.\n    '''\n    '''\n    Write a python function to find the difference between the digits of two numbers.\n    '''\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if (n1 == n2):\n        return (abs(n1-n2))\n    else:\n        return (abs(n1-n2) % 10) + (n1 % 10) + (n2 % 10)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10:\n        return abs(n1 - n2)\n    else:\n        return n1 - n2\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum_sub_array = 0\n    last_index = -1\n    for i in range(size):\n        sum_sub_array += a[i]\n        if last_index == i:\n            last_index = -1\n        elif sum_sub_array > sum_sub_array_sum:\n            sum_sub_array_sum = sum_sub_array\n            last_index = i\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Your code here\n    max_sub_array_sum = 0\n    max_idx = -1\n    for i in range(0, size):\n        if a[i] > max_sub_array_sum:\n            max_sub_array_sum = a[i]\n            max_idx = i\n    return max_sub_array_sum, max_idx\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or size < 0:\n        return 0\n    if size == 1:\n        return a[0]\n    max_so_far = 0\n    max_ending_here = -1\n    for i in range(0,size):\n        if max_ending_here < a[i]:\n            max_ending_here = max_ending_here + a[i]\n        else:\n            continue\n    for i in range(size,size-1,-1):\n        if max_ending_here < a[i]:\n            max_ending_here = max_ending_here + a[i]\n        else:\n            continue\n    return max_ending_here\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return max_sum_sub_array_sum(a, size)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    ans = 0\n    for i in range(len(a)):\n        ans += max(a[i:i+size])\n    return ans\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    arr = [0] * size\n    n = size\n    print(a)\n    print(size)\n    for i in range(size):\n        max_sum += a[i]\n        arr[i] = a[i]\n        print(arr)\n        print(a)\n        print(max_sum)\n        if i + 1 < size:\n            if arr[i] > arr[i + 1]:\n                arr[i] = arr[i + 1]\n                print(arr)\n                print(arr[i + 1])\n                print(i + 1)\n                n = i + 1\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # trivial cases\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    result = float('-inf')\n    sub_sum = 0\n    for i in range(size):\n        sub_sum += a[i]\n    for i in range(size-1, -1, -1):\n        sub_sum -= a[i]\n        if sub_sum > result:\n            result = sub_sum\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    temp_sum = 0\n    curr_sum = 0\n    for idx in range(len(a)):\n        curr_sum += a[idx]\n        while curr_sum > temp_sum:\n            temp_sum = curr_sum\n            curr_sum -= a[idx]\n    return curr_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Write your code here\n    # Time complexity: O(n^2)\n    # Space complexity: O(1)\n    max_sum = 0\n    max_end = 0\n    for i in range(0, size):\n        max_sum += a[i]\n        if a[i] < max_sum:\n            max_sum = a[i]\n            max_end = i\n    return max_sum - max_end\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup = []\n    test_tup.append(test_tup1)\n    test_tup.append(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # First, get the lengths of the tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = tuple(sorted(test_tup1))\n    tup2 = tuple(sorted(test_tup2))\n    union = tup1 + tup2\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # write your code here\n    i = 0\n    j = 0\n    while i < len(test_tup1):\n        if test_tup1[i] > test_tup2[i]:\n            j = j + 1\n            i = i + 1\n        else:\n            i = i + 1\n    result = (test_tup1[:j] + test_tup2[:j] + test_tup1[j:] + test_tup2[j:])\n    return result\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # your code here\n    return sorted([x for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return_val = []\n    for i in test_tup1:\n        for j in test_tup2:\n            return_val.append(i+j)\n    return sorted(return_val)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if l1 > l2:\n        l1, l2 = l2, l1\n    result = []\n    for i in range(l1):\n        if test_tup1[i] in test_tup2:\n            result.append(test_tup1[i])\n    for i in range(l2):\n        if test_tup2[i] in test_tup1:\n            result.append(test_tup2[i])\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1.sort()\n    test_tup2.sort()\n    if len(test_tup1) < len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    elif len(test_tup2) < len(test_tup1):\n        return union_elements(test_tup1, test_tup2)\n    else:\n        return test_tup1 + test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                Max_length = j - i + 1\n    return Max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    m = lst[0]\n    \n    for i in range(1, len(lst)):\n        m = max(m, len(lst[i]))\n    \n    return m\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0\n    \n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            \n    return max_length\n        \n    \ndef make_formatted(lst,max_len):\n    '''\n    Write a python function to format a list of numbers as a list of strings.\n    '''\n    \n    formatted_list = []\n    \n    for i in range(len(lst)):\n        temp_list = []\n        for j in range(max_len):\n            temp_list.append(str(lst[i][j]))\n        formatted_list.append(temp_list)\n            \n    return formatted_list\n            \n    \ndef print_formatted(formatted_list):\n    '''\n    Write a python function to print the formatted list of numbers in the correct format.\n    '''\n    \n    for i in range(len(formatted_list)):\n        print(formatted_list[i])\n        \n        \ndef list_to_string(lst):\n    '''\n    Write a python function to convert a list of integers into a list of strings.\n    '''\n    \n    formatted_list = []\n    \n    for i in range(len(lst)):\n        temp_list = []\n        for j in range(len(lst[i])):\n            temp_list.append(str(lst[i][j]))\n        formatted_list.append(temp_list)\n            \n    return formatted_list\n    \ndef main():\n    \n    print(\"#1\")\n    lst = [1,2,4,4,5,6,6,7]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#2\")\n    lst = [1,1,1,2,2,2,3,4,4,5,6,6,7,8,9,10]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#3\")\n    lst = [1,2,4,5,6,7,8,9,10,11,12,13]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#4\")\n    lst = [1,2,4,5,6,7,8,9,10,11,12,13]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#5\")\n    lst = [1,1,1,2,2,2,3,3,4,4,5,6,6,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#6\")\n    lst = [1,1,1,2,2,3,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#7\")\n    lst = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#8\")\n    lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#9\")\n    lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \n    print(\"#10\")\n    lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    print(lst)\n    print(\"Length of list: \" + str(len(lst)))\n    print(\"Length of list after: \" + str(Find_Max_Length(lst)))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    c = 0\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n        c += 1\n        \n    return c\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) <= 1:\n        return 1\n    max_length = 1\n    current_length = 1\n    for i in range(len(lst) - 1):\n        if lst[i] + lst[i + 1] > max_length:\n            max_length = lst[i] + lst[i + 1]\n            current_length = 1\n        else:\n            current_length += 1\n    return max_length + 1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    max_len = 0\n    max_len_sub = []\n    for i in range(0, len(lst)):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n            max_len_sub = lst[i]\n    return max_len_sub\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if(lst==[]):\n        return 0\n    else:\n        max_length=0\n        for i in range(0,len(lst)):\n            for j in range(i+1,len(lst)):\n                if(len(lst[i])>len(lst[j])):\n                    if(len(lst[i])>max_length):\n                        max_length=len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # If the list is empty or only has single element.\n    if len(lst) == 0 or len(lst) == 1:\n        return len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if(lst[i]>lst[j]):\n                max_length=max(max_length,len(lst[i]))\n    return max_length\nlst = [12, 5, 6, 9, 7]\nmax_length = Find_Max_Length(lst)\nprint(max_length)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    s = re.findall(\"(?:[\\\"\\\\s])((?:'[^']*')|([^'\\\\s]))(?:[\\\"\\\\s])\", text)\n    return s\n    \ndef word_count(s):\n    '''\n    Write a function that counts the number of words in a text string.\n    '''\n    s = extract_values(s)\n    return len(s)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    for k in range(len(text)):\n        if text[k] == '\"':\n            if k+1 < len(text):\n                if text[k+1] == '\"':\n                    continue\n                else:\n                    return text[k+1:]\n        elif text[k] == '\"':\n            if k+1 < len(text):\n                if text[k+1] == '\"':\n                    continue\n                else:\n                    return text[k+1:]\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search('(?<=\\\")[^\\n]*?(?=\\\")', text)\n    if match:\n        return match.group()\n    else:\n        return \"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '\\\\\"')\n    text = text.replace('\\'', '\\\\\\'')\n    text = text.replace('\u201c', '\\\\\u201c')\n    text = text.replace('\u201d', '\\\\\u201d')\n    text = text.replace('\u2019', '\\\\\u2019')\n    text = text.replace('\u2018', '\\\\\u2018')\n    text = text.replace('\u2019', '\\\\\u2019')\n    text = text.replace('\u201c', '\\\\\u201c')\n    text = text.replace('\u201d', '\\\\\u201d')\n    text = text.replace('\u2019', '\\\\\u2019')\n    text = text.replace('\u2018', '\\\\\u2018')\n    text = text.replace('\u2014', '\\\\\u2014')\n    text = text.replace('\u00b9', '\\\\\u00b9')\n    text = text.replace('\u00b4', '\\\\\u00b4')\n    text = text.replace('\u00b4\u00b4', '\\\\\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4\u00b4\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4', '\\\\\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4')\n    text = text.replace('\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4\u00b4"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # TODO: extract the quotation marks as a list of elements.\n    quote_list = re.findall(r\"\\'.*?\\'\", text)\n    values = list()\n    for quote in quote_list:\n        values.append(quote.replace('\"', '').replace('\\'','''))\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        res = []\n        res = [re.findall(r'\"(.*)\"', line) for line in text.split('\\n') if line]\n        return res\n    except:\n        return []\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    # define string with or without closing quotation marks\n    text_without_closing_quotes = text.replace(\"'\", \"\")\n    text_without_closing_quotes_with_open_quotes = text_without_closing_quotes.replace(\"'\", \"\")\n    # remove extra spaces\n    text_without_closing_quotes_without_spaces = text_without_closing_quotes.replace(\" \", \"\")\n    text_without_closing_quotes_without_spaces_without_quotes = text_without_closing_quotes.replace(\" \", \"\")\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted_values = re.findall(r'\\w+',text,flags=re.IGNORECASE)\n    # print(extracted_values)\n    return extracted_values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Remove whitespaces\n    text = text.strip()\n    # Find the set of all opening quotation marks\n    opening_quotes = re.findall(r'\\{\\{', text)\n    # Set of all closing quotation marks\n    closing_quotes = re.findall(r'\\}\\}', text)\n    # Loop through all the opening quotation marks\n    for opening_quote in opening_quotes:\n        # Search for the closing quote\n        closing_quote = re.search(r'\\}', text)\n        # Search for the matching closing quote\n        # and replace with the closing quote text\n        closing_quote_text = closing_quote.group(0)\n        text = text.replace(opening_quote, closing_quote_text)\n    # Split the string\n    text = text.split(\"\\n\")\n    # Iterate through the list of strings\n    for line in text:\n        # If the line is empty, remove the line\n        if line == \"\":\n            continue\n        # If the line contains a newline\n        if line[0] == '#':\n            # Remove the newline\n            line = line[1:]\n            # Add the newline to the original line\n            line = line + '\\n'\n        # If the line is a number\n        if line[0] in '0-9' and line[0]!='':\n            # Remove whitespaces\n            line = line.strip()\n            # Split the line\n            line = line.split(\" \")\n            # Loop through the split line\n            for i in line:\n                # For each split element\n                if i == \"\":\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the newline to the original line\n                    i = i + '\\n'\n                # If the element is a number\n                if i in '0-9':\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the number to the original line\n                    i = i + str(i)\n                # If the element is a space\n                if i =='':\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the newline to the original line\n                    i = i + '\\n'\n                # If the element is a number\n                if i in '0-9':\n                    # Remove whitespaces\n                    i = i.strip()\n                    # Add the number to the original line\n                    i = i + str(i)\n            # Remove the number\n            line = line[1:]\n            # Append the newline to the line\n            line = line + '\\n'\n    # Return the modified string\n    return line\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text[1:-1]\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Initialize two counters\n    c=0\n    d=0\n    #Loop through the elements\n    for i in range(len(arr)):\n        #Find the first element\n        first=arr[i]\n        #Find the second element\n        second=arr[i+1]\n        #If first is not equal to second\n        if first!=second:\n            #If the value is odd\n            if(first%2!=0 and second%2!=0):\n                #Add the value to the counter\n                c+=1\n            #If the value is even\n            else:\n                #Add the value to the counter\n                d+=1\n    return (c,d)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) < 2: \n        return 0\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1,n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                dp[i] += dp[j]\n    return dp[n - 1]\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Write your code here.\n    arr.sort()\n    if len(arr)<3:\n        return 0\n    i=0\n    j=0\n    count=0\n    while j<len(arr)-1:\n        if arr[i]>arr[j] and arr[j]!=arr[i+1]:\n            count+=1\n            i+=1\n        j+=1\n    return count\n    \n    \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l = []\n    l.append(arr[0])\n    l.append(arr[1])\n    for i in range(2,n):\n        l.append(arr[i])\n    d = dict()\n    for i in l:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    print(d)\n    print(len(d))\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # answer = 0\n    # for i in range(0, n-1):\n    #     for j in range(i+1, n):\n    #         if (arr[i]!= arr[j]):\n    #             answer += 1\n    #     return answer\n    '''\n    This is the original code from the google (https://github.com/sharish/python-guess-number)\n    '''\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word[0]==' ':\n        return word[1:]\n    else:\n        return word\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    characters = ''\n    i = 0\n    while i < len(word):\n        if word[i] =='':\n            characters += word[i]\n        else:\n            characters += word[i]\n        i += 1\n    return characters\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\ndef sort_alphabet(word): \n    '''\n    Write a python function to sort a string alphabetically.\n    '''\n    word_list = split(word)\n    word_list.sort()\n    return ''.join(word_list)\ndef sort_alphabet_with_spaces(word): \n    '''\n    Write a python function to sort a string alphabetically.\n    '''\n    word_list = split(word)\n    word_list.sort(key = sort_alphabet)\n    return ''.join(word_list)"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word == '':\n        return ''\n    else:\n        return word[0:1] + word[1:]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split_list = word.split()\n    return split_list\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    "
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word)==0:\n        return ''\n    else:\n        return word[0] + split(word[1:])\n    \nword = 'hello'\nword = split(word)\nprint(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [character for character in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #can use math.log2(n) instead\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Write your code here.\n    sum = 0\n    while n>0:\n        sum = sum + n%10\n        n = n//10\n    return sum\n    \nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"n = 123456789\")\n    print(\"Exception :\")\n    print(\"22\")\n    print(\"Output :\")\n    print(str(sum_digits(123456789)))\n    \n    print(\"Example 2:\")\n    print(\"Input : \")\n    print(\"n = 1000\")\n    print(\"Exception :\")\n    print(\"0\")\n    print(\"Output :\")\n    print(str(sum_digits(1000)))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n    \ndef sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n    \ndef sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # your code goes here\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n    return sum(digits)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n >= 1:\n        s += n % 10\n        n //= 10\n    return s\n    "
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -sum_digits(n-1)\n    else:\n        return sum_digits(n//10) + n%10\n    \n    \n    \ndef test():\n    assert sum_digits(5) == 0\n    assert sum_digits(9) == 1\n    assert sum_digits(99) == 4\n    assert sum_digits(0) == 0\n    assert sum_digits(-1) == -1\n    assert sum_digits(-2) == -2\n    assert sum_digits(1) == 1\n    assert sum_digits(7) == 7\n    assert sum_digits(26) == 10\n    assert sum_digits(104) == 111\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        # print(n)\n        sum = sum * 10 + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    temp = 0\n    while n:\n        temp = n % 10\n        n //= 10\n    return temp\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n % 10\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # TODO: Write your code here\n    if list1[0] > list1[-1]:\n        return False\n    if len(list1) == 1:\n        return True\n    if list1[0] < list1[-1]:\n        return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 0:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if list1:\n        for i in range(len(list1)-1):\n            if list1[i]>list1[i+1]:\n                return False\n        return True\n    \n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        return False\n    else:\n        return True\n    \ndef merge_sort(list1):\n    '''\n    Write a function that sorts a list in ascending order.\n    '''\n    if not list1:\n        return list1\n    else:\n        mid = len(list1) // 2\n        left_half = list1[:mid]\n        right_half = list1[mid:]\n        \n        print(\"left_half: \" + str(left_half))\n        print(\"right_half: \" + str(right_half))\n        \n        print(\"\\n\")\n        merge_sort(left_half)\n        print(\"\\n\")\n        merge_sort(right_half)\n        \n        print(\"merge: \" + str(list1))\n        print(\"\\n\")\n        \n        return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # TODO: Write your code here\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i-1] > list1[i]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        flag1 = 0\n        flag2 = 0\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                flag1 = 1\n            elif list1[i] > list1[i-1]:\n                flag2 = 1\n        return (flag1 == 0) and (flag2 == 0)\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dict1 = []\n    for i in range(length):\n        dict1.append({})\n    return dict1\n    \n    \ndef insert(list, k, v):\n    '''\n    Write a function that will insert a key-value pair into the dictionary.\n    The dictionary should have a key of the key-value pair and it should have a value of the value-key pair.\n    '''\n    if k not in list:\n        list.append(k)\n    list[list.index(k)][v] = v\n    \n    \ndef get(list, k):\n    '''\n    Write a function that will return the value of a key-value pair.\n    '''\n    if k in list:\n        return list[list.index(k)]\n    else:\n        return None\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Empty list is the whole matrix\n    # [{}]\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    for i in range(0, length):\n        empty_dict = dict()\n        empty_dict['text'] = 'Text'\n        empty_dict['name'] = 'Name'\n        empty_dict['add'] = 'Add'\n        return empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    for i in range(0,length):\n        empty.append({})\n    return empty\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # create empty dictionaries\n    empty_list = []\n    # iterate and add all the elements of length\n    for _ in range(length):\n        empty_list.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = []\n    return empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        dict_ = {}\n        dict_['name'] = input('Please enter the name of the dictionary: ')\n        dict_['location'] = input('Please enter the location of the dictionary: ')\n        dict_['words'] = input('Please enter the dictionary of words separated by spaces: ')\n        list_of_dicts.append(dict_)\n    return list_of_dicts\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list(list1):\n        return sorted(list1, key = str.casefold)\n    return sort_list(list1)\n    \ndef list_join(list1, list2):\n    '''\n    Write a function to join a list of strings into a single string.\n    '''\n    return ', '.join(list1) +'' + ', '.join(list2)\n    \ndef list_count(list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list]\n    \ndef list_index(list, word):\n    '''\n    Write a function to return the position of a given word in a given list.\n    '''\n    return list.index(word)\n    \ndef word_count(list):\n    '''\n    Write a function to count the number of occurrences of a word from a given list of words.\n    '''\n    return len(list)\n    \ndef list_reverse(list):\n    '''\n    Write a function to reverse a list of strings.\n    '''\n    return [list[i] for i in range(len(list) - 1, -1, -1)]\n    \ndef list_split(string):\n    '''\n    Write a function to split a given string into two lists of words.\n    '''\n    return [word for word in string.split()]\n    \ndef index(index, list):\n    '''\n    Write a function to return the index of a given word in a given list.\n    '''\n    return list.index(index)\n    \ndef string_join(string):\n    '''\n    Write a function to join a list of strings into a single string.\n    '''\n    return ''.join(string)\n    \ndef string_split(string):\n    '''\n    Write a function to split a given string into a list of strings.\n    '''\n    return [string[i : i + len(string)] for i in range(0, len(string), len(string) - i)]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef replace_letters(string, list):\n    '''\n    Write a function to replace the letters in a given string with another given list.\n    '''\n    return ''.join([letter if letter in list else '_' for letter in string])\n    \ndef count_words(list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in list if word.lower() in list])\n    \ndef delete_letter(string, list):\n    '''\n    Write a function to delete a single letter from a given string.\n    '''\n    return string.replace(list[0], list[1], 1)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_generator(num):\n    '''\n    Write a function to generate a prime number between the given range.\n    '''\n    while True:\n        yield num\n        num += 1\n        \ndef is_fibonacci(number):\n    '''\n    Write a function to check if a given number is a Fibonacci number.\n    '''\n    if number < 1 or number > 5:\n        return False\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    if number == 3:\n        return False\n    if number == 4:\n        return True\n    return is_fibonacci(number - 1) and is_fibonacci(number - 2)\n    \ndef fibonacci_generator(number):\n    '''\n    Write a function to generate a Fibonacci number between the given range.\n    '''\n    if number < 1 or number > 5:\n        return None\n    return fibonacci_generator(number - 1) + fibonacci_generator(number - 2)\n    \ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if number <= 1:\n        return 1\n    else:\n        return number * factorial(number - 1)\n    \ndef fibonacci_count(number):\n    '''\n    Write a function to calculate the number of Fibonacci numbers less than or equal to a given number.\n    '''\n    return factorial(number - 1) // factorial(number - 2)\n    \ndef word_frequency(word, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list]\n    \ndef word_frequency_list(word, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [list.count(word) for word in list if word.lower() in list]\n    \ndef letter_frequency(string, list):\n    '''\n    Write a function to count the number of times a given letter appears in a given list of words.\n    '''\n    return [string.count(letter) for letter in list]\n    \ndef letter_frequency_list(string, list):\n    '''\n    Write a function to count the number of times a given letter appears in a given list of words.\n    '''\n    return [string.count(letter) for letter in list if letter.lower() in list]\n    \ndef word_frequency_and_letter_frequency(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [string.count(word) for word in list if word.lower() in list]\n    \ndef word_frequency_and_letter_frequency_list(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return [string.count(word) for word in list if word.lower() in list]\n    \ndef lexicographical_sort(string):\n    '''\n    Write a function to sort a given string.\n    '''\n    return sorted(string)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_list(list):\n    '''\n    Write a function to check if a given list is a palindrome.\n    '''\n    return [list[i] for i in range(len(list) - 1, -1, -1)]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef list_count_equal_to_letters(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in string if word.lower() in list])\n    \ndef list_index_equal_to_letters(string, list):\n    '''\n    Write a function to return the position of a given word in a given list.\n    '''\n    return list.index(string)\n    \ndef index_and_count(index, string):\n    '''\n    Write a function to return the index of a given word in a given list.\n    '''\n    return index + string.index(index)\n    \ndef word_count_equal_to_letters(string, list):\n    '''\n    Write a function to count the number of times a given word appears in a given list of words.\n    '''\n    return len([word for word in string if word.lower() in list])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: len(x), reverse=True)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a 2D array that has the same number of rows as the number of lists\n    # and contains the elements of each list.\n    arr = []\n    for i in range(len(list1)):\n        arr.append([])\n        for j in range(len(list1[i])):\n            arr[i].append(list1[i][j])\n    # Sorts the elements of each list in the 2D array and returns the sorted array.\n    for i in range(len(arr)):\n        arr[i] = sorted(arr[i])\n    return arr\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=lambda x: x.lower())\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_helper(list1, depth):\n        if len(list1) > 0:\n            if depth == 1:\n                temp = []\n                for i in range(len(list1)):\n                    temp.append(list1[i])\n                    temp.append(list1[i][::-1])\n                return temp\n            else:\n                temp = []\n                for i in range(len(list1)):\n                    temp.append(list1[i])\n                    temp.append(list1[i][::-1])\n                temp.append(list1)\n                return temp\n        else:\n            return []\n        \n    def sort_sublists_iterative(list1):\n        if len(list1) > 0:\n            for i in range(len(list1)):\n                temp = []\n                for j in range(len(list1[i])):\n                    temp.append(list1[i][j])\n                    temp.append(list1[i][len(list1[i]) - 1 - j])\n                temp.append(list1[i][::-1])\n                temp.append(list1[i])\n                list1.append(temp)\n            return list1\n        else:\n            return []\n        \n    temp = sort_sublists_helper(list1, depth = 0)\n    temp = sort_sublists_iterative(temp)\n    return temp\n        \n    \n    \n    \ndef is_palindrome(str1):\n    '''\n    Given a string, check if it is a palindrome.\n    '''\n    def is_palindrome_helper(s, pos, final):\n        if pos >= len(s):\n            return True\n        if s[pos]!= s[final]:\n            return False\n        else:\n            final = final + 1\n            return is_palindrome_helper(s, pos + 1, final) or is_palindrome_helper(s, pos + 1, final - 1)\n        \n    def is_palindrome_iterative(s, pos, final):\n        if pos >= len(s):\n            return True\n        if s[pos]!= s[final]:\n            return False\n        else:\n            final = final + 1\n            return is_palindrome_iterative(s, pos + 1, final) or is_palindrome_iterative(s, pos + 1, final - 1)\n        \n    return is_palindrome_helper(str1, 0, 0)\n        \n    \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"#\"*50)\n    print(\"\\n\\tSort sublists of a given list of lists\\n\")\n    print(\"#\"*50)\n    print(\"\\n\\tNested for-loop to sort each sublist of strings in a given list of lists\\n\")\n    print(\"#\"*50)\n    print(\"\\n\")\n    for i in range(len(list1)):\n        print(\"{}. {}\".format(i+1, list1[i]))\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            print(\"{}. {}\".format(i+1, list1[i][j]))\n    print(\"\\n\")\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"Input list of strings: \")\n    print(list1)\n    print(\"-----------------------------------------------------------------------------------\")\n    list2 = []\n    for sublist in list1:\n        for char in sublist:\n            list2.append(char)\n    print(\"Sort sublist: \")\n    print(list2)\n    print(\"-----------------------------------------------------------------------------------\")\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Declare empty list\n    list_of_strings = []\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) == 0:\n        return None\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            nums[i] = 0\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dup_nums = set()\n    for i in range(len(nums)):\n        if nums[i] in dup_nums:\n            pass\n        else:\n            dup_nums.add(nums[i])\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for num in nums:\n        if num not in nums:\n            nums.append(num)\n    return nums\n    \n    \n    \nnums = [1,1,1,1,2,2,3,3,3,4,4,4,5]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    lst = []\n    seen = set()\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_copy = []\n    for num in nums:\n        if num not in nums_copy:\n            nums_copy.append(num)\n    return nums_copy\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    nums_set = set(nums)\n    new_nums = [nums_set.pop() for _ in range(len(nums))]\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize an empty list\n    unique_nums = []\n    # Loop through the given list\n    for num in nums:\n        # If the current number is not in the list then add it to the list\n        if num not in unique_nums:\n            unique_nums.append(num)\n    # Return the list\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if not nums:\n        return []\n    \n    set_num = set(nums)\n    res = []\n    \n    for num in nums:\n        if num in set_num:\n            res.append(num)\n            set_num.remove(num)\n    \n    return res\n    \nprint(two_unique_nums([1, 1, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 6]))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    seen = set()\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create dictionary to store numbers and their product\n    unique_product = dict()\n    # iterate over list\n    for i in list_data:\n        # calculate product\n        product = i*i\n        # if product not in dictionary, add it to dictionary\n        if product not in unique_product:\n            unique_product[product] = 1\n        else:\n            unique_product[product] += 1\n    # sort the dictionary\n    sorted_unique_product = dict(sorted(unique_product.items()))\n    return sorted_unique_product"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    for i in list_data:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n    return unique_numbers\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # user_data=list(map(int,input('Enter the list of numbers ').split()))\n    #\n    # counter=1\n    # result=1\n    #\n    # for i in user_data:\n    #\n    #\n    #\n    #\n    #     result*=i\n    #     if i==counter:\n    #\n    #         break\n    #\n    #     counter+=1\n    #\n    # return(result)\n    result=1\n    counter=1\n    user_data=list(map(int,input('Enter the list of numbers ').split()))\n    print(user_data)\n    for i in user_data:\n        result*=i\n        if i==counter:\n            break\n        counter+=1\n    return(result)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    return sum(unique_numbers)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(0, len(list_data)):\n        unique_list.append(list_data[i][0])\n    return unique_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    if type(list_data) is not list:\n        raise TypeError(\"list_data must be a list\")\n    for i in list_data:\n        if i not in unique:\n            unique.append(i)\n    return len(unique)\n    \n    \n    \n    \ndef product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    if type(list_data) is not list:\n        raise TypeError(\"list_data must be a list\")\n    for i in list_data:\n        if i not in unique:\n            product = product * i\n    return product\n    \n    \n    \n    \ndef format_list(list_data):\n    '''\n    Write a python function to format a given list of strings.\n    '''\n    list_data = map(str, list_data)\n    return list(list_data)\n    \n    \n    \n    \ndef print_list(list_data):\n    '''\n    Write a python function to print a given list of strings.\n    '''\n    print(list_data)\n    \n    \n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef is_prime_range(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \ndef prime_range(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef is_prime_list(num):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef main():\n    '''\n    Write a python function to print the largest number in a given list.\n    '''\n    my_list = [1,2,3,4,5,6,7,8,9]\n    print(max(my_list))\n    \n    \n    \n    \ndef test_is_prime():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(is_prime(2))\n    \n    \n    \ndef test_is_prime_range():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(is_prime_range(2))\n    \n    \n    \ndef test_is_prime_list():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(is_prime_list(2))\n    \n    \n    \ndef test_prime_range():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(prime_range(2))\n    \n    \n    \ndef test_prime_list():\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    print(prime_list(2))\n    \n    \n    \ndef main():\n    '''\n    Write a python function to print the largest number in a given list.\n    '''\n    my_list = [1,2,3,4,5,6,7,8,9]\n    print(max(my_list))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    number_list = []\n    for n in list_data:\n        number_list.append(n)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    sum = 0\n    for i in range(len(list_data)):\n        sum += list_data[i]\n    if sum == 0:\n        return 0\n    else:\n        return sum\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        for j in range(len(list_data)):\n            if i == j:\n                pass\n            else:\n                if list_data[i] == list_data[j]:\n                    pass\n                else:\n                    list_data[i], list_data[j] = list_data[j], list_data[i]\n    for i in range(len(list_data)):\n        unique_list.append(list_data[i])\n    return unique_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_result = []\n    for i in range(0, len(list_data)):\n        x = list_data[i]\n        if x not in list_result:\n            list_result.append(x)\n    return list_result\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    s = (pi*r**2)*h\n    print(\"Surface area of a cylinder is : \",s)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return(4/3)*np.pi*r**3\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2 * r * h\n    print('The surface area of a cylinder is', round(S, 1),'m2.')\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 4 * (r**2 + (r + h)) * h**2\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    h_per_r = 1/r\n    return h*(4*np.pi*r**2*h_per_r)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 0.5 * h * math.pi * r**2\n    print(area)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    def surfacearea(r,h):\n        '''\n        Write a function to calculate the surface area.\n        '''\n        return 4.0*np.pi*r*h\n    \n    def area(r,h):\n        '''\n        Write a function to calculate the surface area.\n        '''\n        return surfacearea(r,h)\n    \n    return surfacearea(r,h) * area(r,h)\n    \n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5*(r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r**2*h\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)!= len(B)): \n        return False\n    if (B==[]) or (B==None): \n        return True\n    for i in range(len(A)): \n        if (A[i]!=B[i]): \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i]!= B[i]: return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j = 0,0\n    while i<len(A) and j<len(B): \n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = True\n    for i in range(len(B)):\n        if A[i]!= B[i]:\n            flag = False\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a = len(A)\n    b = len(B)\n    if a!= b:\n        return False\n    for i in range(a):\n        for j in range(a):\n            if A[i] == B[j]:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return (A == B or A[:len(B)] == B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # create a dictionary \n    dictionary = {}\n    # loop through each element in a list\n    for i in range(len(A)):\n        # check for the current element in the list\n        if A[i] in dictionary:\n            # if the element is already present\n            # then increment the count\n            dictionary[A[i]] = dictionary[A[i]] + 1\n        else:\n            # if not, add it to the dictionary and increment its count\n            dictionary[A[i]] = 1\n    # iterate through the dictionary\n    for k in dictionary:\n        # if the current element is not present\n        # then decrement the count\n        if dictionary[k] == 0:\n            # then print it\n            return False\n    # print all the elements\n    return True\n    \ndef intersection(A,B):\n    '''\n    Write a python function to return an intersection of two lists.\n    '''\n    # create a dictionary \n    dictionary = {}\n    # loop through each element in a list\n    for i in range(len(A)):\n        # check for the current element in the list\n        if A[i] in dictionary:\n            # if the element is already present\n            # then increment the count\n            dictionary[A[i]] = dictionary[A[i]] + 1\n        else:\n            # if not, add it to the dictionary and increment its count\n            dictionary[A[i]] = 1\n    # iterate through the dictionary\n    for k in dictionary:\n        # if the current element is not present\n        # then decrement the count\n        if dictionary[k] == 0:\n            # then print it\n            return False\n    # print all the elements\n    return A\n    \ndef find_the_first_greater_element(A,B):\n    '''\n    Write a python function to find the first greater element in a list.\n    '''\n    # create a dictionary\n    dictionary = {}\n    # loop through each element in a list\n    for i in range(len(A)):\n        # check for the current element in the list\n        if A[i] in dictionary:\n            # if the element is already present\n            # then increment the count\n            dictionary[A[i]] = dictionary[A[i]] + 1\n        else:\n            # if not, add it to the dictionary and increment its count\n            dictionary[A[i]] = 1\n    # iterate through the dictionary\n    for k in dictionary:\n        # if the current element is not present\n        # then decrement the count\n        if dictionary[k] == 0:\n            # then print it\n            return False\n    # print all the elements\n    return A[dictionary.index(max(dictionary))]\n    \ndef count_even_numbers(A):\n    '''\n    Write a python function to count even numbers in a list.\n    '''\n    # create a dictionary\n    dictionary = {}\n    # loop through each element in a list\n    for i in range(len(A)):\n        # check for the current element in the list\n        if A[i] in dictionary:\n            # if the element is already present\n            # then increment the count\n            dictionary[A[i]] = dictionary[A[i]] + 1\n        else:\n            # if not, add it to the dictionary and increment its count\n            dictionary[A[i]] = 1\n    # iterate through the dictionary\n    for k in dictionary:\n        # if the current element is not present\n        # then decrement the count\n        if dictionary[k] == 0:\n            # then print it\n            return False\n    # print all the elements\n    return A\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list):\n        raise TypeError(\"Argument 'A' is not of type list\")\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B not in A: \n        return True\n    if len(A) < len(B): \n        return False\n    for i in range(len(B)): \n        if A[i]!= B[i]: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #Initialize list.\n    l = len(A)\n    #Create empty sub-list.\n    sublist = []\n    #Iterate through each element.\n    for i in range(0, l):\n        #If the list element matches the item in the sub-list then append to list.\n        if A[i] == B[i]:\n            sublist.append(B[i])\n        #Else if list element does not match.\n        else:\n            #If the list element is in sub-list then append the element to the sub-list.\n            if l>i:\n                if l == i:\n                    sublist.append(A[i])\n                #If the list element is not in sub-list then skip the element from the sub-list.\n                else:\n                    sublist.append(A[i])\n                    #Else if the element does not match.\n                    continue\n    #Return True if all sub-list matches.\n    return len(sublist) == len(A) and sublist == A\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial=1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial_n = 1\n    for i in range(1,n+1):\n        factorial_n *= i\n    return factorial_n\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print (\"Invalid input\")\n    else:\n        x = n\n        a = 1\n        b = 1\n        while x > 0:\n            a = a * x % 10\n            x = x // 10\n        return a\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return 0\n    return n % 10 + last_Digit_Factorial(n // 10) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<=1:\n        return n\n    else:\n        return n%10+last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return -1\n    else:\n        return int(str(n)[-1:])\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    f = n + 1\n    f1 = 1\n    f2 = 1\n    while f <= f1: \n        f3 = f\n        while f2 < f3: \n            f4 = f3\n            f3 = f2\n            f2 = f4 \n        f1 = f2 \n        f2 = f3 \n    return f1 \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[j])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    for i in range(len(list1)):\n        list4.append([list1[i],list2[i],list3[i]])\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list3_first = list1\n    list3_second = list2\n    list3_third = list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend(list1[i]+list2[i]+list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l1=len(list1)\n    l2=len(list2)\n    l3=len(list3)\n    i=l1\n    while i<l2+l3:\n        list1[i]=list1[i-l1]\n        list2[i]=list2[i-l2]\n        list3[i]=list3[i-l3]\n        i=i+1\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    for i in range(0,len(list1)):\n        list4.append(list1[i]+list2[i]+list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # get length of first list\n    x = len(list1[0])\n    # get length of second list\n    y = len(list2[0])\n    # get length of third list\n    z = len(list3[0])\n    \n    # make empty list to append to\n    interleaved_list = []\n    \n    # iterate through both lists and append to new list\n    for i in range(z):\n        interleaved_list.append([])\n        for j in range(x):\n            interleaved_list[i].append(list1[i][j])\n            interleaved_list[i].append(list2[i][j])\n            interleaved_list[i].append(list3[i][j])\n            \n    return interleaved_lis"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    x=list1[0]+list2[0]+list3[0]\n    y=list1[1]+list2[1]+list3[1]\n    z=list1[2]+list2[2]+list3[2]\n    list=[x,y,z]\n    return list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    while len(list1) > 0 and len(list2) > 0 and len(list3) > 0:\n        if list1[0] < list2[0] < list3[0]:\n            result.append(list1.pop(0))\n        elif list1[0] > list2[0] > list3[0]:\n            result.append(list2.pop(0))\n        else:\n            result.append(list3.pop(0))\n    while len(list1) > 0:\n        result.append(list1.pop(0))\n    while len(list2) > 0:\n        result.append(list2.pop(0))\n    while len(list3) > 0:\n        result.append(list3.pop(0))\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    interleaved = zip(list1,list2,list3)\n    for i in interleaved:\n        list4.append(i)\n    return list4\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list1.sort()\n    test_list2.sort()\n    dissimilar = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            dissimilar.append(test_list1[i])\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Two tuples must have same length.')\n    diss_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diss_list.append(test_tup1[i])\n    return diss_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1, s2 = test_tup1, test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        if i in test_tup2:\n            list1.append(i)\n    for i in test_tup2:\n        if i in test_tup1:\n            list2.append(i)\n    return list1, list2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count = count + 1\n    if count == len(test_tup1):\n        return None\n    elif count == 0:\n        return None\n    else:\n        return test_tup1[:count]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = list(set(test_tup1))\n    lst2 = list(set(test_tup2))\n    #print(lst1)\n    #print(lst2)\n    lst3 = list(set(lst1) & set(lst2))\n    return(lst3)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = set()\n    for i in range(len(test_tup1)):\n        res.add(test_tup1[i])\n        res.add(test_tup2[i])\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # check the length of the tuples\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must be of the same size.')\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2) or len(test_tup1) == 0 or len(test_tup2) == 0:\n        return []\n    elif len(test_tup1) == 1 or len(test_tup2) == 1 or len(test_tup1) == 0 or len(test_tup2) == 0:\n        return test_tup1\n    else:\n        try:\n            #Create a temporary dictionary with empty keys and the value being the length of the list\n            #The dictionary has the keys that are the test_tup1 and the values that are the number of the elements that are the same\n            #The test_tup2 dictionary has the keys that are the test_tup2 and the values that are the number of the elements that are the same\n            dictionary = {}\n            for i in test_tup1:\n                dictionary[i] = len(test_tup1)\n            for i in test_tup2:\n                if i in dictionary:\n                    dictionary[i] += 1\n                else:\n                    dictionary[i] = 1\n            if len(test_tup1) > len(test_tup2):\n                return find_dissimilar(test_tup2, dictionary)\n            else:\n                return find_dissimilar(dictionary, test_tup1)\n        except:\n            return []\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple = test_tuple\n    if tuple[0] == '(' and tuple[-1] == ')':\n        # dont remove if first ele is '('\n        if tuple[1] == '(':\n            return even_fnc(tuple[1:-1])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = []\n    odd_list = []\n    test_list.append(test_tuple)\n    odd_list.append(odd_fnc(test_tuple))\n    test_list.append(test_tuple[0:1])\n    test_list.append(test_tuple[2:3])\n    test_list.append(test_tuple[3:4])\n    test_list.append(test_tuple[4:5])\n    test_list.append(test_tuple[5:6])\n    test_list.append(test_tuple[6:7])\n    test_list.append(test_tuple[7:8])\n    test_list.append(test_tuple[8:9])\n    test_list.append(test_tuple[9:10])\n    test_list.append(test_tuple[10:11])\n    test_list.append(test_tuple[11:12])\n    test_list.append(test_tuple[12:13])\n    test_list.append(test_tuple[13:14])\n    test_list.append(test_tuple[14:15])\n    test_list.append(test_tuple[15:16])\n    test_list.append(test_tuple[16:17])\n    test_list.append(test_tuple[17:18])\n    test_list.append(test_tuple[18:19])\n    test_list.append(test_tuple[19:20])\n    test_list.append(test_tuple[20:21])\n    test_list.append(test_tuple[21:22])\n    test_list.append(test_tuple[22:23])\n    test_list.append(test_tuple[23:24])\n    test_list.append(test_tuple[24:25])\n    test_list.append(test_tuple[25:26])\n    test_list.append(test_tuple[26:27])\n    test_list.append(test_tuple[27:28])\n    test_list.append(test_tuple[28:29])\n    test_list.append(test_tuple[29:30])\n    test_list.append(test_tuple[30:31])\n    test_list.append(test_tuple[31:32])\n    test_list.append(test_tuple[32:33])\n    test_list.append(test_tuple[33:34])\n    test_list.append(test_tuple[34:35])\n    test_list.append(test_tuple[35:36])\n    test_list.append(test_tuple[36:37])\n    test_list.append(test_tuple[37:38])\n    test_list.append(test_tuple[38:39])\n    test_list.append(test_tuple[39:40])\n    test_list.append(test_tuple[40:41])\n    test_list.append(test_tuple[41:42])\n    test_list.append(test_tuple[42:43])\n    test_list.append(test_tuple[43:44])\n    test_list.append(test_tuple[44:45])\n    test_list.append(test_tuple[45:46])\n    test_list.append(test_tuple[46:47])\n    test_list.append(test_tuple[47:48])\n    test_list.append(test_tuple[48:49])\n    test_list.append(test_tuple[49:50])\n    test_list.append(test_tuple[50:51])\n    test_list.append(test_tuple[51:52])\n    test_list.append(test_tuple[52:53])\n    test_list.append(test_tuple[53:54])\n    test_list.append(test_tuple[54:55])\n    test_list.append(test_tuple[55:56])\n    test_list.append(test_tuple[56:57])\n    test_list.append(test_tuple[57:58])\n    test_list.append(test_tuple[58:59])\n    test_list.append(test_tuple[59:60])\n    test_list.append(test_tuple[60:61])\n    test_list.append(test_tuple[61:62])\n    test_list.append(test_tuple[62:63])\n    test_list.append(test_tuple[63:64])\n    test_list.append(test_tuple[64:65])\n    test_list.append(test_tuple[65:66])\n    test_list.append(test_tuple[66:67])\n    test_list.append(test_tuple[67:68])\n    test_list.append(test_tuple[68:69])\n    test_list.append(test_tuple[69:70])\n    test_list.append(test_tuple[70:71])\n    test_list.append(test_tuple[71:72])\n    test_list.append(test_tuple[72:73])\n    test_list.append(test_tuple[73:74])\n    test_list.append(test_tuple[74:75])\n    test_list.append(test_tuple[75:76])\n    test_list.append(test_tuple[76:77])\n    test_list.append(test_tuple[77:78])\n    test_list.append(test_tuple[78:79])\n    test_list.append(test_tuple[79:80])\n    test_list.append(test_tuple[80:81])\n    test_list.append(test_tuple[81:82])\n    test_list.append(test_tuple[82:83])\n    test_list.append(test_tuple[83:84])\n    test_list.append(test_tuple[84:85])\n    test_list.append(test_tuple[85:86])\n    test_list.append(test_tuple[86:87])\n    test_list.append(test_tuple[87:88])\n    test_list.append(test_tuple[88:89])\n    test_list.append(test_tuple[89:90])\n    test_list.append(test_tuple[90:91])\n    test_list.append(test_tuple[91:92])\n    test_list.append(test_tuple[92:93])\n    test_list.append(test_tuple[93:94])\n    test_list.append(test_tuple[94:95])\n    test_list.append(test_tuple[95:96])\n    test_list.append(test_tuple[96:97])\n    test_list.append(test_tuple[97:98])\n    test_list.append(test_tuple[98:99])\n    test_list.append(test_tuple[99:100])\n    test_list.append(test_tuple[100:101])\n    test_list.append(test_tuple[101:102])\n    test_list.append(test_tuple[102:103])\n    test_list.append(test_tuple[103:104])\n    test_list.append(test_tuple[104:105])\n    test_list.append(test_tuple[105:106])\n    test_list.append(test_tuple[106:107])\n    test_list.append(test_tuple[107:108])\n    test_list.append(test_tuple[108:109])\n    test_list.append(test_tuple[109:110])\n    test_list.append(test_tuple[110:111])\n    test_list.append(test_tuple[111:112])\n    test_list.append(test_tuple[112:113])\n    test_list.append(test_tuple[113:114])\n    test_list.append(test_tuple[114:115])\n    test_list.append(test_tuple[115:116])\n    test_list.append(tes"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = list(test_tuple)\n    even_tuple.pop(0)\n    if even_fnc == 'even':\n        return tuple(even_tuple)\n    else:\n        return tuple(even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_result = []\n    for i in test_tuple:\n        if even_fnc(i):\n            even_result.append(i)\n    return even_result\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple_list = test_tuple\n    if tuple_list!= \"\":\n        if tuple_list[0] == '()' and tuple_list[-1] == '(':\n            del tuple_list[0:2]\n        elif tuple_list[0] == '()' and tuple_list[-1] == '()':\n            del tuple_list[-1]\n        elif tuple_list[0] == '(':\n            del tuple_list[0:1]\n        elif tuple_list[0] == '()':\n            del tuple_list[0]\n        else:\n            pass\n        odd_ele(tuple_list, even_fnc)\n    return tuple_list\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = tuple(t for t in test_tuple if t % 2 == 0)\n    even_fnc(even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple, odd_tuple = test_tuple\n    if even_fnc(even_tuple) == False:\n        odd_tuple = odd_tuple[1:]\n    elif even_fnc(odd_tuple) == False:\n        even_tuple = even_tuple[1:]\n    return odd_tuple,even_tuple\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # set the tuple \n    odd_tuple = test_tuple[1]\n    # iterate through each element in the nested tuple\n    for i in range(len(test_tuple[1])): \n        # set the current element \n        current_element = test_tuple[1][i]\n        # if the current element is not even, \n        # remove the element \n        if current_element % 2!= 0: \n            test_tuple[1][i] = odd_tuple[i] \n            test_tuple[1].pop(i)\n        # if the current element is even, \n        # add the current element to a variable \n        else: \n            test_tuple[1][i] = even_fnc(current_element, odd_tuple[i]) \n    # return the tuple \n    return test_tuple\n    \n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # set the tuple \n    even_tuple = test_tuple[1]\n    # iterate through each element in the nested tuple\n    for i in range(len(test_tuple[1])): \n        # set the current element \n        current_element = test_tuple[1][i]\n        # if the current element is not even, \n        # remove the element \n        if current_element % 2!= 0: \n            test_tuple[1][i] = even_tuple[i] \n            test_tuple[1].pop(i)\n        # if the current element is even, \n        # add the current element to a variable \n        else: \n            test_tuple[1][i] = odd_fnc(current_element, even_tuple[i]) \n    # return the tuple \n    return test_tuple\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_even = test_tuple[0] \n    even_odd = test_tuple[1] \n    even_fnc(even_even, even_odd)\n    odd_even = test_tuple[2] \n    odd_odd = test_tuple[3] \n    odd_fnc(odd_even, odd_odd)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    output = []\n    even_ind = []\n    odd_ind = []\n    for i in test_tuple:\n        if even_fnc(i, even_ind):\n            output.append(i)\n        else:\n            odd_ind.append(i)\n    for i in odd_ind:\n        output.append(i)\n    return tuple(output)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sqr = int(b)**2\n    #print (sqr)\n    return sqr * s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if(b<0 or s<0): \n        raise ValueError('Improper input parameters') \n    elif(s<b): \n        raise ValueError('Improper input parameters') \n    elif (s==b): \n        return (b*b)\n    elif (s>b): \n        return (s*s-b*b)\n    else: \n        return (s*s+b*b-s*(b-s))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * (s * s))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    side = math.sqrt(b**2 + s**2)\n    area = b * s / 2\n    return area\ndef find_length(b,h): \n    '''\n    Find the length of the pyramid with a given base edge and height.\n    '''\n    length = (b**2 + h**2)**(1/2)\n    return length\ndef pyramid(base_edge,height,length):\n    '''\n    Find a pyramid with the given base edge and height.\n    '''\n    import math\n    total_length = length + ((base_edge**2)/2)\n    base_length = math.sqrt(base_edge**2 + height**2)\n    a_square = (base_length + total_length)**(1/2)\n    return a_square\ndef check_matches(a,b):\n    '''\n    Check if two list has the same elements.\n    '''\n    return a == b\ndef perimeter(b,s):\n    '''\n    Find the perimeter of the square pyramid with a given base edge and height.\n    '''\n    base_length = math.sqrt(b**2 + s**2)\n    length = base_length**2\n    return length\ndef pi(a,b):\n    '''\n    Find the area of the square pyramid with a given base edge and height.\n    '''\n    length = (b**2 + a**2)**(1/2)\n    return length\ndef area_calculator(s):\n    '''\n    Find the area of the square pyramid with a given base edge and height.\n    '''\n    a = s * math.sqrt(2)\n    return a\ndef area_calculator2(s):\n    '''\n    Find the area of the square pyramid with a given base edge and height.\n    '''\n    a = 2 * (s**2)\n    return a\ndef area_calculator3(s):\n    '''\n    Find the area of the square pyramid with a given base edge and height.\n    '''\n    a = 3 * (s**2)\n    return a\ndef area_calculator4(s):\n    '''\n    Find the area of the square pyramid with a given base edge and height.\n    '''\n    a = 4 * (s**2)\n    return a\ndef calculate_area(b,s):\n    '''\n    Find the area of the square pyramid with a given base edge and height.\n    '''\n    area = surface_Area(b,s)\n    return area\ndef calculate_perimeter(b,s):\n    '''\n    Find the perimeter of the square pyramid with a given base edge and height.\n    '''\n    perimeter = perimeter(b,s)\n    return perimeter\ndef calculate_perimeter2(b,s):\n    '''\n    Find the perimeter of the square pyramid with a given base edge and height.\n    '''\n    perimeter = perimeter(b,s)\n    return perimeter\ndef calculate_perimeter3(b,s):\n    '''\n    Find the perimeter of the square pyramid with a given base edge and height.\n    '''\n    perimeter = perimeter(b,s)\n    return perimeter\ndef calculate_perimeter4(b,s):\n    '''\n    Find the perimeter of the square pyramid with a given base edge and height.\n    '''\n    perimeter = perimeter(b,s)\n    return perimeter\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b * s\n    return s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2 + s**2)*3.14159\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 0.5 * b * (s**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    x,y = 0,0\n    area = 0\n    for i in range(0,len(b)):\n        for j in range(0,len(b[i])):\n            if(b[i][j]):\n                x = x+j+1\n                y = y+i+1\n                area = area + ((x - y) * b[i][j])\n    s = (s+2) * (s+2)\n    area = (s*s)/4\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    x=b+s\n    y=b\n    for i in range(0,3):\n        x+=s\n        y+=s\n    return (x*y)*0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4*(b**2))/3 + (2*(s**2))/3\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1=={}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) > 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return False\n    else:\n        return True\n        \ndef test_dict():\n    assert(my_dict({'a':1,'b':2,'c':3}) == False)\n    assert(my_dict('') == True)\n    assert(my_dict({'a':1}) == False)\n    assert(my_dict({'a':1,'b':2}) == True)\n    assert(my_dict({'a':1,'b':2,'c':3}) == True)\n    assert(my_dict({'a':1,'b':2,'c':3}) == True)\n    assert(my_dict({'a':1,'b':2}) == False)\n    assert(my_dict({'a':1,'b':2,'c':3}) == False)\n    assert(my_dict({'a':1,'b':2,'c':3,'d':4}) == True)\n    assert(my_dict({'a':1,'b':2,'c':3,'d':4} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3,'d':4} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == True)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == True)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == True)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,'c':3} ) == False)\n    assert(my_dict({'a':1,'b':2,"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        for key in dict1:\n            if not dict1[key]:\n                return \"The value is not in dictionary\"\n        return \"The dictionary is empty\"\n    else:\n        return \"The dictionary is empty\"\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1)!= 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    i = 1\n    total = 0\n    while i <= num:\n        total = total + i\n        i = i * i\n    return total\n    # Solution - Smaller Code\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        total = 0\n        for i in range(1, num+1):\n            total = total + (i*(i+1)/2)\n        return total\n    ''"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan_function(num, [0,1])\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n=0\n    print(num)\n    if num==1:\n        return 1\n    if num==2:\n        return 2\n    if num==3:\n        return 5\n    if num==4:\n        return 4\n    if num==5:\n        return 4\n    if num==6:\n        return 8\n    if num==7:\n        return 1\n    if num==8:\n        return 1\n    if num==9:\n        return 1\n    if num==10:\n        return 8\n    if num==11:\n        return 4\n    if num==12:\n        return 5\n    if num==13:\n        return 9\n    if num==14:\n        return 6\n    if num==15:\n        return 3\n    if num==16:\n        return 7\n    if num==17:\n        return 2\n    if num==18:\n        return 2\n    if num==19:\n        return 3\n    if num==20:\n        return 4\n    if num==21:\n        return 4\n    if num==22:\n        return 5\n    if num==23:\n        return 6\n    if num==24:\n        return 10\n    if num==25:\n        return 4\n    if num==26:\n        return 5\n    if num==27:\n        return 8\n    if num==28:\n        return 4\n    if num==29:\n        return 9\n    if num==30:\n        return 10\n    if num==31:\n        return 12\n    if num==32:\n        return 8\n    if num==33:\n        return 4\n    if num==34:\n        return 6\n    if num==35:\n        return 10\n    if num==36:\n        return 12\n    if num==37:\n        return 8\n    if num==38:\n        return 6\n    if num==39:\n        return 10\n    if num==40:\n        return 14\n    if num==41:\n        return 5\n    if num==42:\n        return 9\n    if num==43:\n        return 6\n    if num==44:\n        return 14\n    if num==45:\n        return 5\n    if num==46:\n        return 11\n    if num==47:\n        return 6\n    if num==48:\n        return 10\n    if num==49:\n        return 11\n    if num==50:\n        return 12\n    if num==51:\n        return 10\n    if num==52:\n        return 11\n    if num==53:\n        return 12\n    if num==54:\n        return 13\n    if num==55:\n        return 10\n    if num==56:\n        return 11\n    if num==57:\n        return 13\n    if num==58:\n        return 8\n    if num==59:\n        return 6\n    if num==60:\n        return 10\n    if num==61:\n        return 11\n    if num==62:\n        return 12\n    if num==63:\n        return 13\n    if num==64:\n        return 7\n    if num==65:\n        return 3\n    if num==66:\n        return 8\n    if num==67:\n        return 9\n    if num==68:\n        return 3\n    if num==69:\n        return 7\n    if num==70:\n        return 6\n    if num==71:\n        return 9\n    if num==72:\n        return 3\n    if num==73:\n        return 5\n    if num==74:\n        return 10\n    if num==75:\n        return 11\n    if num==76:\n        return 8\n    if num==77:\n        return 6\n    if num==78:\n        return 5\n    if num==79:\n        return 11\n    if num==80:\n        return 12\n    if num==81:\n        return 8\n    if num==82:\n        return 7\n    if num==83:\n        return 3\n    if num==84:\n        return 7\n    if num==85:\n        return 6\n    if num==86:\n        return 5\n    if num==87:\n        return 11\n    if num==88:\n        return 6\n    if num==89:\n        return 12\n    if num==90:\n        return 9\n    if num==91:\n        return 11\n    if num==92:\n        return 12\n    if num==93:\n        return 13\n    if num==94:\n        return 9\n    if num==95:\n        return 10\n    if num==96:\n        return 12\n    if num==97:\n        return 13\n    if num==98:\n        return 14\n    if num==99:\n        return 9\n    if num==100:\n        return 10\n    if num==101:\n        return 11\n    if num==102:\n        return 12\n    if num==103:\n        return 13\n    if num==104:\n        return 14\n    if num==105:\n        return 15\n    if num==106:\n        return 14\n    if num==107:\n        return 15\n    if num==108:\n        return 16\n    if num==109:\n        return 15\n    if num==110:\n        return 16\n    if num==111:\n        return 17\n    if num==112:\n        return 14\n    if num==113:\n        return 15\n    if num==114:\n        return 16\n    if num==115:\n        return 17\n    if num==116:\n        return 18\n    if num==117:\n        return 15\n    if num==118:\n        return 16\n    if num==119:\n        return 17\n    if num==120:\n        return 18\n    if num==121:\n        return 19\n    if num==122:\n        return 16\n    if num==123:\n        return 17\n    if num==124:\n        return 18\n    if num==125:\n        return 19\n    if num==126:\n        return 20\n    if num==127:\n        return 21\n    if num==128:\n        return 19\n    if num==129:\n        return 20\n    if num==130:\n        return 21\n    if num==131:\n        return 22\n    if num==132:\n        return 19\n    if num==133:\n        return 20\n    if num==134:\n        return 21\n    if num==135:\n        return 22\n    if num==136:\n        return 23\n    if num==137:\n        return 21\n    if num==138:\n        return 22\n    if num==139:\n        return 23\n    if num==140:\n        return 24\n    if num==141:\n        return 25\n    if num==142:\n        return 21\n    if num==143:\n        return 22\n    if num==144:\n        return 23\n    if num==145:\n        return 24\n    if num==146:\n        return 25\n    if num==147:\n        return 26\n    if num==148:\n        return 23\n    if num==149:\n        return 24\n    if num==150:\n        return 25\n    if num==151:\n        return 26\n    if num==152:\n        return 27\n    if num==153:\n        return 24\n    if num==154:\n        return 25\n    if num==155:\n        return 26\n    if num==156:\n        return 27\n    if num==157:\n        return 28\n    if num==158:\n        return 23\n    if num==159:\n        return 24\n    if num==160:\n        return 25\n    if num==161:\n        return 27\n    if num==162:\n        return 28\n    if num==163:\n        return 29\n    if num==164:\n        return 26\n    if num==165:\n        return 28\n    if num==166:\n        return 29\n    if num==167:\n        return 30\n    if num==168:\n        return 27\n    if num==169:\n        return 28\n    if num==170:\n        return 29\n    if num==171:\n        return 30\n    if num==172:\n        return 31\n    if num==173:\n        return 28\n    if num==174:\n        return 30\n    if num==175:\n        return 31\n    if num==176:\n        return 32\n    if num==177:\n        return 30\n    if num==178:\n        return 31\n    if num==179:\n        return 32\n    if num==180:\n        return 33\n    if num==181:\n        return 31\n    if num==182:\n        return 32\n    if num==18"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    print(\"#1 Catalan number is:\", num)\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input(\"Press enter to continue\")\n    #input("
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1 or num == 2 or num == 3:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2) + catalan_number(num-3)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<0 or num>100:\n        return None\n    else:\n        cat = 1\n        for i in range(1,num+1):\n            cat*=i\n        return cat\n        \ndef fib(num):\n    '''\n    Write a function which returns nth fibonacci number.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    else:\n        fib1 = 1\n        fib2 = 1\n        for i in range(2,num+1):\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2\n        \ndef fib_in(num):\n    '''\n    Write a function which returns nth fibonacci number in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        fib1 = 1\n        fib2 = 1\n        for i in range(2,num+1):\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2\n        \ndef fact(num):\n    '''\n    Write a function which returns nth factorial of a given number.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    else:\n        fact1 = 1\n        fact2 = 1\n        for i in range(2,num+1):\n            fact1, fact2 = fact2, fact1 * fact2\n        return fact2\n        \ndef fact_in(num):\n    '''\n    Write a function which returns nth factorial in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        fact1 = 1\n        fact2 = 1\n        for i in range(2,num+1):\n            fact1, fact2 = fact2, fact1 * fact2\n        return fact2\n        \ndef st_fact(num):\n    '''\n    Write a function which returns nth factorial in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        fact1 = 1\n        fact2 = 1\n        for i in range(2,num+1):\n            fact1, fact2 = fact2, fact1 * fact2\n        return fact2\n        \ndef fact_in_st(num):\n    '''\n    Write a function which returns nth factorial in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        fact1 = 1\n        fact2 = 1\n        for i in range(2,num+1):\n            fact1, fact2 = fact2, fact1 * fact2\n        return fact2\n        \ndef dog_walk(num):\n    '''\n    Write a function which returns nth dog walk.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_st(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_fact(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_fact_st(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_fact_st_in(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_fact(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_fact_st(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_fact_st_in(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,num+1):\n            walk1, walk2 = walk2, walk1 * walk2\n        return walk2\n        \ndef dog_walk_in_fact_st_in_in(num):\n    '''\n    Write a function which returns nth dog walk in a given range.\n    '''\n    if num<0 or num>100:\n        return None\n    elif num==1:\n        return 1\n    elif num==2:\n        return 1\n    else:\n        walk1 = 1\n        walk2 = 1\n        for i in range(2,nu"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # YOUR CODE HERE\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 6\n    if num == 4:\n        return 24\n    if num == 5:\n        return 120\n    if num == 6:\n        return 720\n    if num == 7:\n        return 1536\n    if num == 8:\n        return 86400\n    if num == 9:\n        return 3600000\n    if num == 10:\n        return 6000000\n    if num == 11:\n        return 9000000\n    if num == 12:\n        return 10000000\n    if num == 13:\n        return 5000000\n    if num == 14:\n        return 1000000\n    if num == 15:\n        return 500000\n    if num == 16:\n        return 100000\n    if num == 17:\n        return 500000\n    if num == 18:\n        return 100000\n    if num == 19:\n        return 500000\n    if num == 20:\n        return 100000\n    if num == 21:\n        return 500000\n    if num == 22:\n        return 100000\n    if num == 23:\n        return 500000\n    if num == 24:\n        return 100000\n    if num == 25:\n        return 500000\n    if num == 26:\n        return 100000\n    if num == 27:\n        return 500000\n    if num == 28:\n        return 100000\n    if num == 29:\n        return 500000\n    if num == 30:\n        return 100000\n    if num == 31:\n        return 500000\n    if num == 32:\n        return 100000\n    if num == 33:\n        return 500000\n    if num == 34:\n        return 100000\n    if num == 35:\n        return 500000\n    if num == 36:\n        return 100000\n    if num == 37:\n        return 500000\n    if num == 38:\n        return 100000\n    if num == 39:\n        return 500000\n    if num == 40:\n        return 100000\n    if num == 41:\n        return 500000\n    if num == 42:\n        return 100000\n    if num == 43:\n        return 500000\n    if num == 44:\n        return 100000\n    if num == 45:\n        return 500000\n    if num == 46:\n        return 100000\n    if num == 47:\n        return 500000\n    if num == 48:\n        return 100000\n    if num == 49:\n        return 500000\n    if num == 50:\n        return 100000\n    if num == 51:\n        return 500000\n    if num == 52:\n        return 100000\n    if num == 53:\n        return 500000\n    if num == 54:\n        return 100000\n    if num == 55:\n        return 500000\n    if num == 56:\n        return 100000\n    if num == 57:\n        return 500000\n    if num == 58:\n        return 100000\n    if num == 59:\n        return 500000\n    if num == 60:\n        return 100000\n    if num == 61:\n        return 500000\n    if num == 62:\n        return 100000\n    if num == 63:\n        return 500000\n    if num == 64:\n        return 100000\n    if num == 65:\n        return 500000\n    if num == 66:\n        return 100000\n    if num == 67:\n        return 500000\n    if num == 68:\n        return 100000\n    if num == 69:\n        return 500000\n    if num == 70:\n        return 100000\n    if num == 71:\n        return 500000\n    if num == 72:\n        return 100000\n    if num == 73:\n        return 500000\n    if num == 74:\n        return 100000\n    if num == 75:\n        return 500000\n    if num == 76:\n        return 100000\n    if num == 77:\n        return 500000\n    if num == 78:\n        return 100000\n    if num == 79:\n        return 500000\n    if num == 80:\n        return 100000\n    if num == 81:\n        return 500000\n    if num == 82:\n        return 100000\n    if num == 83:\n        return 500000\n    if num == 84:\n        return 100000\n    if num == 85:\n        return 500000\n    if num == 86:\n        return 100000\n    if num == 87:\n        return 500000\n    if num == 88:\n        return 100000\n    if num == 89:\n        return 500000\n    if num == 90:\n        return 100000\n    if num == 91:\n        return 500000\n    if num == 92:\n        return 100000\n    if num == 93:\n        return 500000\n    if num == 94:\n        return 100000\n    if num == 95:\n        return 500000\n    if num == 96:\n        return 100000\n    if num == 97:\n        return 500000\n    if num == 98:\n        return 100000\n    if num == 99:\n        return 500000\n    if num == 100:\n        return 100000\n    if num == 101:\n        return 500000\n    if num == 102:\n        return 100000\n    if num == 103:\n        return 500000\n    if num == 104:\n        return 100000\n    if num == 105:\n        return 500000\n    if num == 106:\n        return 100000\n    if num == 107:\n        return 500000\n    if num == 108:\n        return 100000\n    if num == 109:\n        return 500000\n    if num == 110:\n        return 100000\n    if num == 111:\n        return 500000\n    if num == 112:\n        return 100000\n    if num == 113:\n        return 500000\n    if num == 114:\n        return 100000\n    if num == 115:\n        return 500000\n    if num == 116:\n        return 100000\n    if num == 117:\n        return 500000\n    if num == 118:\n        return 100000\n    if num == 119:\n        return 500000\n    if num == 120:\n        return 100000\n    if num == 121:\n        return 500000\n    if num == 122:\n        return 100000\n    if num == 123:\n        return 500000\n    if num == 124:\n        return 100000\n    if num == 125:\n        return 500000\n    if num == 126:\n        return 100000\n    if num == 127:\n        return 500000\n    if num == 128:\n        return 100000\n    if num == 129:\n        return 500000\n    if num == 130:\n        return 100000\n    if num == 131:\n        return 500000\n    if num == 132:\n        return 100000\n    if num == 133:\n        return 500000\n    if num == 134:\n        return 100000\n    if num == 135:\n        return 500000\n    if num == 136:\n        return 100000\n    if num == 137:\n        return 500000\n    if num == 138:\n        return 100000\n    if num == 139:\n        return 500000\n    if num == 140:\n        return 100000\n    if num == 141:\n        return 500000\n    if num == 142:\n        return 100000\n    if num == 143:\n        return 500000\n    if num == 144:\n        return 100000\n    if num == 145:\n        return 500000\n    if num == 146:\n        return 100000\n    if num == 147:\n        return 500000\n    if num == 148:\n        return 100000\n    if num == 149:\n        return 500000\n    if num == 150:\n        return 100000\n    if num == 151:\n        return 500000\n    if num == 152:\n        return 100000\n    if num == 153:\n        return 500000\n    if num == 154:\n        return 100000\n    if num == 155:\n        return 500000\n    if num == 156:\n        return 100000\n    if num == 157:\n        return 500000\n    if num == 158:\n        return 100000\n    if num == 159:\n        return 500000\n    if num == 160:\n        return 100000\n    if num == 161:\n        return 500000\n    if num == 162:\n        return 100000\n    if num == 163:\n        return 500000\n    if num == 164:\n        return 100000\n    if num == 165:\n        return 500000\n    if num == 166:\n        return 100000\n    if num == 167:\n        return 500000\n    if num == 168:\n        return 100000\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #if the text is \"adjective ly\"\n    if re.search(\"\\bly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"noun ly\"\n    elif re.search(\"\\bly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"partly ly\"\n    elif re.search(\"\\bly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"noun fully ly\"\n    elif re.search(\"\\bly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"partlyly ly\"\n    elif re.search(\"\\bly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"noun noly\"\n    elif re.search(\"\\bnoly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bnoly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"partly noly\"\n    elif re.search(\"\\bnoly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bnoly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"adjfully noly\"\n    elif re.search(\"\\bnoly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bnoly\\b', text)\n        #search for ly\n        ly_start = re.search('ly', text).start()\n        #search for the end of ly\n        ly_end = re.search('ly', text).end()\n        #find the starting position of ly\n        ly_start = text.index(ly_start) + 1\n        #get rid of the adverbs\n        adverbs = adverbs[:ly_start]\n        #get rid of the end of ly\n        adverbs = adverbs[ly_end:]\n        #create a list of ly positions\n        ly_positions = list(range(ly_start, ly_end + 1))\n        #make sure that the ly positions are in order\n        ly_positions.sort()\n        #return the ly positions\n        return adverbs, ly_positions\n    #if the text is \"noun butly\"\n    elif re.search(\"\\bbutly\\b\", text):\n        #use re.search to find the adverbs\n        adverbs = re.findall('\\bbutly\\b', tex"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #break the string into words\n    word_list = text.split(' ')\n    #create a list that will store all the adjectives after the adverbs\n    result = []\n    #declare variables\n    ly_word = ''\n    adverb = ''\n    pos = 0\n    #loop through each word in the string\n    for w in word_list:\n        #check if word ends with ly and if so, add it to the result list\n        if w[-3:] == 'ly' and w[-2:] == 'ed':\n            result.append(w)\n    #check if there are words that end with ly and if so, add them to the result list\n    if len(result) > 0:\n        for w in result:\n            if w[-3:] == 'ly':\n                ly_word = w\n        result.remove(ly_word)\n        #create a list with all the adverbs after the ly word\n        for w in result:\n            adverb = w[:w.index('ly')]\n            #add the adverb to the result list\n            result.append(adverb)\n    #return result\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.findall(r'[aeiou].*ly$',text)\n    if match:\n        #print(match)\n        return match[0]\n    else:\n        return ''\n    \ndef find_stop_words(text):\n    '''\n    Write a function that will find a list of stop words, and their starting positions in the given text.\n    '''\n    stop_words = [\"dick\", \"the\", \"am\", \"the\", \"or\", \"is\", \"it\", \"in\", \"a\", \"of\", \"the\", \"is\", \"we\", \"will\", \"am\", \"you\", \"the\", \"but\", \"i\", \"for\", \"did\", \"that\", \"that\", \"when\", \"these\", \"than\", \"i'm\", \"by\", \"there\", \"when\", \"that\", \"at\", \"the\", \"them\", \"where\", \"where\", \"the\", \"when\", \"a\", \"and\", \"or\", \"to\", \"their\", \"to\", \"when\", \"of\", \"this\", \"and\", \"or\", \"in\", \"or\", \"can\", \"and\", \"as\", \"you\", \"so\", \"are\", \"the\", \"and\", \"and\", \"because\", \"as\", \"as\", \"a\", \"that\", \"because\", \"as\", \"i\", \"most\", \"at\", \"a\", \"of\", \"it\", \"into\", \"the\", \"not\", \"so\", \"here\", \"who\", \"or\", \"when\", \"for\", \"because\", \"all\", \"so\", \"is\", \"you\", \"any\", \"they\", \"while\", \"into\", \"a\", \"while\", \"of\", \"are\", \"all\", \"for\", \"are\", \"all\", \"as\", \"you\", \"yes\", \"you\", \"much\", \"have\", \"its\", \"can\", \"or\", \"because\", \"many\", \"at\", \"an\", \"there\", \"could\", \"into\", \"will\", \"i\", \"in\", \"a\", \"but\", \"are\", \"is\", \"you\", \"a\", \"i\", \"you\", \"can\", \"as\", \"so\", \"you\", \"can\", \"was\", \"as\", \"but\", \"your\", \"i\", \"you\", \"can\", \"if\", \"the\", \"you\", \"can\", \"no\", \"only\", \"as\", \"it\", \"you\", \"can\", \"you\", \"also\", \"are\", \"as\", \"it\", \"many\", \"will\", \"you\", \"you\", \"is\", \"because\", \"to\", \"them\", \"a\", \"you\", \"can\", \"was\", \"because\", \"you\", \"not\", \"the\", \"i\", \"can\", \"as\", \"you\", \"can\", \"the\", \"you\", \"can\", \"i\", \"i\", \"you\", \"can\", \"has\", \"you\", \"because\", \"as\", \"you\", \"has\", \"you\", \"that\", \"is\", \"they\", \"can\", \"a\", \"you\", \"can\", \"you\", \"and\", \"it\", \"i\", \"you\", \"can\", \"you\", \"can\", \"you\", \"could\", \"you\", \"can\", \"it\", \"you\", \"can\", \"you\", \"could\", \"you\", \"you\", \"have\", \"you\", \"can\", \"you\", \"i\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"can\", \"you\", \"ca"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile('ly[.]*(s|x)')\n    match = regex.findall(text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Finds the adverb ending with ly\n    ly = re.findall(\"ly\", text)\n    adverbs = []\n    #Finds the adverbs ending with ly\n    adverbs.append(ly[0][len(ly[0])-1])\n    adverbs.append(ly[1])\n    adverbs.append(ly[2])\n    #Finds the adverbs ending with ly\n    adverbs.append(ly[3][len(ly[3])-1])\n    adverbs.append(ly[4])\n    adverbs.append(ly[5])\n    adverbs.append(ly[6])\n    adverbs.append(ly[7])\n    adverbs.append(ly[8])\n    adverbs.append(ly[9])\n    adverbs.append(ly[10])\n    adverbs.append(ly[11])\n    #Finds the adverbs ending with ly\n    adverbs.append(ly[12][len(ly[12])-1])\n    adverbs.append(ly[13])\n    adverbs.append(ly[14])\n    adverbs.append(ly[15])\n    adverbs.append(ly[16])\n    adverbs.append(ly[17])\n    adverbs.append(ly[18])\n    adverbs.append(ly[19])\n    adverbs.append(ly[20])\n    adverbs.append(ly[21])\n    adverbs.append(ly[22])\n    adverbs.append(ly[23])\n    adverbs.append(ly[24])\n    adverbs.append(ly[25])\n    adverbs.append(ly[26])\n    adverbs.append(ly[27])\n    adverbs.append(ly[28])\n    adverbs.append(ly[29])\n    adverbs.append(ly[30])\n    adverbs.append(ly[31])\n    adverbs.append(ly[32])\n    adverbs.append(ly[33])\n    adverbs.append(ly[34])\n    adverbs.append(ly[35])\n    adverbs.append(ly[36])\n    adverbs.append(ly[37])\n    adverbs.append(ly[38])\n    adverbs.append(ly[39])\n    adverbs.append(ly[40])\n    adverbs.append(ly[41])\n    adverbs.append(ly[42])\n    adverbs.append(ly[43])\n    adverbs.append(ly[44])\n    adverbs.append(ly[45])\n    adverbs.append(ly[46])\n    adverbs.append(ly[47])\n    adverbs.append(ly[48])\n    adverbs.append(ly[49])\n    adverbs.append(ly[50])\n    adverbs.append(ly[51])\n    adverbs.append(ly[52])\n    adverbs.append(ly[53])\n    adverbs.append(ly[54])\n    adverbs.append(ly[55])\n    adverbs.append(ly[56])\n    adverbs.append(ly[57])\n    adverbs.append(ly[58])\n    adverbs.append(ly[59])\n    adverbs.append(ly[60])\n    adverbs.append(ly[61])\n    adverbs.append(ly[62])\n    adverbs.append(ly[63])\n    adverbs.append(ly[64])\n    adverbs.append(ly[65])\n    adverbs.append(ly[66])\n    adverbs.append(ly[67])\n    adverbs.append(ly[68])\n    adverbs.append(ly[69])\n    adverbs.append(ly[70])\n    adverbs.append(ly[71])\n    adverbs.append(ly[72])\n    adverbs.append(ly[73])\n    adverbs.append(ly[74])\n    adverbs.append(ly[75])\n    adverbs.append(ly[76])\n    adverbs.append(ly[77])\n    adverbs.append(ly[78])\n    adverbs.append(ly[79])\n    adverbs.append(ly[80])\n    adverbs.append(ly[81])\n    adverbs.append(ly[82])\n    adverbs.append(ly[83])\n    adverbs.append(ly[84])\n    adverbs.append(ly[85])\n    adverbs.append(ly[86])\n    adverbs.append(ly[87])\n    adverbs.append(ly[88])\n    adverbs.append(ly[89])\n    adverbs.append(ly[90])\n    adverbs.append(ly[91])\n    adverbs.append(ly[92])\n    adverbs.append(ly[93])\n    adverbs.append(ly[94])\n    adverbs.append(ly[95])\n    adverbs.append(ly[96])\n    adverbs.append(ly[97])\n    adverbs.append(ly[98])\n    adverbs.append(ly[99])\n    adverbs.append(ly[100])\n    adverbs.append(ly[101])\n    adverbs.append(ly[102])\n    adverbs.append(ly[103])\n    adverbs.append(ly[104])\n    adverbs.append(ly[105])\n    adverbs.append(ly[106])\n    adverbs.append(ly[107])\n    adverbs.append(ly[108])\n    adverbs.append(ly[109])\n    adverbs.append(ly[110])\n    adverbs.append(ly[111])\n    adverbs.append(ly[112])\n    adverbs.append(ly[113])\n    adverbs.append(ly[114])\n    adverbs.append(ly[115])\n    adverbs.append(ly[116])\n    adverbs.append(ly[117])\n    adverbs.append(ly[118])\n    adverbs.append(ly[119])\n    adverbs.append(ly[120])\n    adverbs.append(ly[121])\n    adverbs.append(ly[122])\n    adverbs.append(ly[123])\n    adverbs.append(ly[124])\n    adverbs.append(ly[125])\n    adverbs.append(ly[126])\n    adverbs.append(ly[127])\n    adverbs.append(ly[128])\n    adverbs.append(ly[129])\n    adverbs.append(ly[130])\n    adverbs.append(ly[131])\n    adverbs.append(ly[132])\n    adverbs.append(ly[133])\n    adverbs.append(ly[134])\n    adverbs.append(ly[135])\n    adverbs.append(ly[136])\n    adverbs.append(ly[137])\n    adverbs.append(ly[138])\n    adverbs.append(ly[139])\n    adverbs.append(ly[140])\n    adverbs.append(ly[141])\n    adverbs.append(ly[142])\n    adverbs.append(ly[143])\n    adverbs.append(ly[144])\n    adverbs.append(ly[145])\n    adverbs.append(ly[146])\n    adverbs.append(ly[147])\n    adverbs.append(ly[148])\n    adverbs.append(ly[149])\n    adverbs.append(ly[150])\n    adverbs.append(ly[151])\n    adverbs.append(ly[152])\n    adverbs.append(ly[153])\n    adverbs.append(ly[154])\n    adverbs.append(ly[155])\n    adverbs.append(ly[156])\n    adverbs.append(ly[157])\n    adverbs.append(ly[158])\n    adverbs.append(ly[159])\n    adverbs.append(ly[160])\n    adverbs.append(ly[161])\n    adverbs.append(ly[162])\n    adverbs.append(ly[163])\n    adverbs.append(ly[164])\n    adverbs.append(ly[165])\n    adverbs.append(ly[166])\n    adverbs.append(ly[167])\n    adverbs.append(ly[168])\n    adverbs.append(ly[169])\n    adverbs.append(ly[170])\n    adverbs.append(ly[171])\n    adverbs.append(ly[172])\n    adverbs.append(ly[173])\n    a"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'[\\s]|ly|ly\\s|\\bly\\b|\\b\\dly|ly\\b|ly|\\bly\\b|ly|ly\\b|\\bday|day|dly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly|ly|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly\\b|ly|ly|ly|ly|ly|ly\\b|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|ly|l"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['the','a','of','and','of','of','or','of','a']\n    #find the adverb ending with ly\n    for i in adverbs:\n        if i+'ly' in text:\n            return i\n    #find the adverb ending with ly and its positions in a given string\n    if re.search(r'ly(?!ly)',text,re.IGNORECASE)!= None:\n        return re.search(r'ly(?!ly)',text,re.IGNORECASE).span()[0]\n    else:\n        return -1\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    sentence_end_pattern = re.compile(r\"([A-Z]*ly)\")\n    adverbs_string = sentence_end_pattern.search(text)\n    adverb_positions = adverbs_string.group()[adverbs_string.start():].split(\",\")\n    adverb_positions.remove(\"\")\n    return adverb_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"n\"):\n            result.append(i)\n    return result\n    \ndef find_tenses(text):\n    '''\n    Write a function to find the first tense ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"i\"):\n            result.append(i)\n    return result\n    \ndef find_possesive_phrases(text):\n    '''\n    Write a function to find the first possesive phrase ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"p\"):\n            result.append(i)\n    return result\n    \ndef find_determiner(text):\n    '''\n    Write a function to find the first determiner ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"d\"):\n            result.append(i)\n    return result\n    \ndef find_altonative_mark(text):\n    '''\n    Write a function to find the first altonative mark ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"a\"):\n            result.append(i)\n    return result\n    \ndef find_conjunction(text):\n    '''\n    Write a function to find the first conjunction ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"c\"):\n            result.append(i)\n    return result\n    \ndef find_filler(text):\n    '''\n    Write a function to find the first filler ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"f\"):\n            result.append(i)\n    return result\n    \ndef find_count(text):\n    '''\n    Write a function to find the first count ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"c\"):\n            result.append(i)\n    return result\n    \ndef find_modifiers(text):\n    '''\n    Write a function to find the first modifier ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"m\"):\n            result.append(i)\n    return result\n    \ndef find_singular(text):\n    '''\n    Write a function to find the first singular ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"s\"):\n            result.append(i)\n    return result\n    \ndef find_dative(text):\n    '''\n    Write a function to find the first dative ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"d\"):\n            result.append(i)\n    return result\n    \ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"v\"):\n            result.append(i)\n    return result\n    \ndef find_genitive(text):\n    '''\n    Write a function to find the first genitive ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"g\"):\n            result.append(i)\n    return result\n    \ndef find_conjunction_end(text):\n    '''\n    Write a function to find the first conjunction ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"c\"):\n            result.append(i)\n    return result\n    \ndef find_adj(text):\n    '''\n    Write a function to find the first adj ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"a\"):\n            result.append(i)\n    return result\n    \ndef find_dative_end(text):\n    '''\n    Write a function to find the first dative ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"d\"):\n            result.append(i)\n    return result\n    \ndef find_commodality(text):\n    '''\n    Write a function to find the first commmodality ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"c\"):\n            result.append(i)\n    return result\n    \ndef find_adverb_end(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"a\"):\n            result.append(i)\n    return result\n    \ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"a\"):\n            result.append(i)\n    return result\n    \ndef find_noun_ending(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"n\"):\n            result.append(i)\n    return result\n    \ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text) - 1):\n        if (text[i] == \"ly\" and text[i + 1] == \"n\"):\n            result.append(i)\n    return result\n    \ndef find_pronoun(text):\n    '''\n    Write a functio"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # Iterate through string\n    for index in range(len(text)):\n        if text[index:index+4] == 'ly':\n            \n            # Find the start of the sentence\n            positions = re.search(r'[-\\s]*ly$', text).span()\n            if len(positions) == 0:\n                return -1\n            \n            # Get the start of the sentence\n            start = positions[0]\n            # Get the end of the sentence\n            end = positions[1]\n            # Get the list of words that have an adverb ending in the first letter in the word\n            adverbs = ['ly']\n            \n            # Iterate through all possible start positions\n            for index in range(start):\n                # If the word is in the word list\n                if word_list[index] in adverbs:\n                    # If the word is the first letter in the word, then it is the start of the sentence\n                    if text[index:index+2] == 'ly':\n                        return text[index:index+3]\n                        \n    return -1\n    \ndef find_compound_adverbs(text):\n    '''\n    Write a function to find the first compound adverb ending with ly and its positions in a given string.\n    '''\n    \n    # Iterate through string\n    for index in range(len(text)):\n        if text[index:index+4] == 'ly':\n            \n            # Find the start of the sentence\n            positions = re.search(r'[-\\s]*ly$', text).span()\n            if len(positions) == 0:\n                return -1\n            \n            # Get the start of the sentence\n            start = positions[0]\n            # Get the end of the sentence\n            end = positions[1]\n            # Get the list of words that have an adverb ending in the first letter in the word\n            adverbs = ['ly', 'ay', 'i']\n            \n            # Iterate through all possible start positions\n            for index in range(start):\n                # If the word is in the word list\n                if word_list[index] in adverbs:\n                    # If the word is the first letter in the word, then it is the start of the sentence\n                    if text[index:index+2] == 'ly':\n                        return text[index:index+3]\n                        \n    return -1\n    \ndef find_adverbs_to_be_in_the_form(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # Iterate through string\n    for index in range(len(text)):\n        if text[index:index+4] == 'ly':\n            \n            # Find the start of the sentence\n            positions = re.search(r'[-\\s]*ly$', text).span()\n            if len(positions) == 0:\n                return -1\n            \n            # Get the start of the sentence\n            start = positions[0]\n            # Get the end of the sentence\n            end = positions[1]\n            # Get the list of words that have an adverb ending in the first letter in the word\n            adverbs = ['ly', 'ay', 'i']\n            \n            # Iterate through all possible start positions\n            for index in range(start):\n                # If the word is in the word list\n                if word_list[index] in adverbs:\n                    # If the word is the first letter in the word, then it is the start of the sentence\n                    if text[index:index+2] == 'ly':\n                        return text[index:index+3]\n                        \n    return -1\n    \ndef find_compound_adverbs_to_be_in_the_form(text):\n    '''\n    Write a function to find the first compound adverb ending with ly and its positions in a given string.\n    '''\n    \n    # Iterate through string\n    for index in range(len(text)):\n        if text[index:index+4] == 'ly':\n            \n            # Find the start of the sentence\n            positions = re.search(r'[-\\s]*ly$', text).span()\n            if len(positions) == 0:\n                return -1\n            \n            # Get the start of the sentence\n            start = positions[0]\n            # Get the end of the sentence\n            end = positions[1]\n            # Get the list of words that have an adverb ending in the first letter in the word\n            adverbs = ['ly', 'ay', 'i']\n            \n            # Iterate through all possible start positions\n            for index in range(start):\n                # If the word is in the word list\n                if word_list[index] in adverbs:\n                    # If the word is the first letter in the word, then it is the start of the sentence\n                    if text[index:index+2] == 'ly':\n                        return text[index:index+3]\n                        \n    return -1\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    heapq.heapify(h)\n    for item in items:\n        heapq.heappush(h, (item[1],item[0]))\n    if len(h)<=n:\n        return h\n    pivot = len(h)-n\n    for i in range(n):\n        if h[i][1]<=h[pivot][1]:\n            heapq.heapreplace(h,(h[i][0],h[i][1]))\n        else:\n            heapq.heapreplace(h,(h[pivot][0],h[i][1]))\n        pivot = (i+1)//2\n    return h\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    result = []\n    for i in range(n):\n        if len(result)<=i:\n            result.append(heapq.heappop(heap))\n        else:\n            result[i] = heapq.heappop(heap)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[1])\n    \n    for _ in range(n):\n        if len(heap)==0:\n            break\n        _ = heapq.heappop(heap)\n    \n    return heap[::-1][:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap.\n    heap = []\n    # Create a min heap.\n    heapq.heapify(heap)\n    # Get the n most expensive items.\n    for item in items:\n        heapq.heappush(heap,item[1])\n    # Return the top n items.\n    return heap[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)==0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    result=[]\n    for item in items:\n        heapq.heappush(heap,-item)\n        heapq.heappush(heap,-item)\n    while heap:\n        x = heapq.heappop(heap)\n        if x not in result:\n            result.append(x)\n    return result[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #code here\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    print(heap)\n    for i in range(n):\n        print(heapq.heappop(heap))\n    \n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    assert type(items) == list\n    assert type(n) == int\n    heap = []\n    heapq.heapify(heap)\n    \n    for i in range(n):\n        heapq.heappush(heap,(items[i][0],items[i][1]))\n    \n    result = []\n    while len(heap) > 1:\n        a = heapq.heappop(heap)\n        b = heapq.heappop(heap)\n        result.append((b[1],b[0]))\n        \n        for i in range(1,n):\n            if a[1] + b[1] < items[i][0]:\n                heapq.heappush(heap,(items[i][0],items[i][1]))\n    \n    return result\ndef find_best_item(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    assert type(items) == list\n    assert type(n) == int\n    heap = []\n    heapq.heapify(heap)\n    \n    for i in range(n):\n        heapq.heappush(heap,(items[i][0],items[i][1]))\n    \n    result = []\n    while len(heap) > 1:\n        a = heapq.heappop(heap)\n        b = heapq.heappop(heap)\n        result.append((b[1],b[0]))\n        \n        for i in range(1,n):\n            if a[1] + b[1] < items[i][0]:\n                heapq.heappush(heap,(items[i][0],items[i][1]))\n    \n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Problem statement\n    #\n    # Given a list of items, return the n most expensive items.\n    #\n    # The items are represented as a list of integers.\n    #\n    # Recall that the list is in the same order as in the input.\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    cost_so_far = []\n    heap = []\n    for item in items:\n        heapq.heappush(cost_so_far, (item[1],item[0]))\n    costs = []\n    while len(cost_so_far)!= 0:\n        (cost, item) = heapq.heappop(cost_so_far)\n        costs.append(cost)\n        for (x, y) in item:\n            heapq.heappush(cost_so_far, (y, x))\n    return costs\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1])\n    return items[-n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:]+l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n],l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l.split(n)\n    l.insert(0,l[0])\n    return l\n    \n    \ndef start_service():\n    '''\n    Write a python function that prints the information about the current process.\n    '''\n    process = psutil.Process(os.getpid())\n    print(process.name(),process.exe(),process.pid,process.create_time())\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #print(l)\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    result = []\n    for i in range(0, len(l), n):\n        result.append(l[i:i + n])\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:]\n    \ndef common_elements(l1, l2):\n    '''\n    Write a python function to get the common elements in two lists.\n    '''\n    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = ''\n    for i in range(n):\n        s += l[i]\n    return s\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    #return list(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(\"Write a function to convert a list to a tuple.\")\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_list = []\n    for list_item in listx:\n        new_list.append(list_item)\n    return tuple(new_list)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    l = []\n    for i in listx:\n        l.append(i)\n    tup = tuple(l)\n    return(tup)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize empty list to store the list of numbers\n    ls = []\n    # iterate through the list to get the max value and min value\n    for i in range(len(nums)):\n        # add the max value to the ls list\n        ls.append(nums[i][0])\n        # add the min value to the ls list\n        ls.append(nums[i][1])\n    # initialize the difference as 0\n    diff = 0\n    # iterate through the list to find the difference\n    for i in range(len(nums)):\n        # find the difference between max and min value in the list\n        diff = abs(ls[i] - ls[i + 1])\n        # add the difference to the list\n        diff = diff + 1\n    # return the difference\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list\n    nums.sort()\n    # keep track of the largest\n    largest = nums[0]\n    # keep track of the smallest\n    smallest = nums[0]\n    # iterate through the list\n    for num in nums:\n        # if num is larger, move it to the end of the list\n        if num > largest:\n            largest = num\n            # if num is smaller, move it to the beginning of the list\n            if num < smallest:\n                smallest = num\n        # if num is smaller, move it to the end of the list\n        elif num < largest:\n            # if num is larger, move it to the end of the list\n            if num > smallest:\n                smallest = num\n            # if num is smaller, move it to the beginning of the list\n            else:\n                largest = num\n        # if num is larger, move it to the end of the list\n        else:\n            # if num is larger, move it to the beginning of the list\n            if num > smallest:\n                smallest = num\n            # if num is smaller, move it to the end of the list\n            else:\n                largest = num\n    # return the difference between the largest and smallest numbers\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    x = max(nums)\n    y = min(nums)\n    if x == y:\n        return 0\n    else:\n        return x - y\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        raise Exception('List is empty')\n    elif len(nums) == 1:\n        return nums[0] - nums[0]\n    else:\n        minimum = nums[0]\n        maximum = nums[0]\n        for i in range(len(nums)):\n            if nums[i] < minimum:\n                minimum = nums[i]\n            elif nums[i] > maximum:\n                maximum = nums[i]\n        return maximum - minimum\n    \ndef single_diff(nums):\n    '''\n    Write a python function to find the difference between the maximum and the minimum value in a given list.\n    '''\n    if len(nums) == 0:\n        raise Exception('List is empty')\n    elif len(nums) == 1:\n        return nums[0] - nums[0]\n    else:\n        minimum = nums[0]\n        maximum = nums[0]\n        for i in range(len(nums)):\n            if nums[i] < minimum:\n                minimum = nums[i]\n            elif nums[i] > maximum:\n                maximum = nums[i]\n        return maximum - minimum\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest, largest = min(nums), max(nums)\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Your code here\n    return nums[0] - nums[-1"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return nums[0] - nums[-1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #looping through the list\n    diff = []\n    for x in range(len(nums)):\n        diff.append(nums[x]-nums[x-1])\n    return diff\n    \ndef sum_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #looping through the list\n    diff = []\n    for x in range(len(nums)):\n        diff.append(nums[x]-nums[x-1])\n    return sum(diff)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # for sorting the list\n    nums = sorted(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = min(nums)\n    max_num = max(nums)\n    list_diff = max_num - min_num\n    return list_diff\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    p = perfect_squares_helper(a,b)\n    return p\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a==b:\n        return b\n    if a==0:\n        return 0\n    if b==0:\n        return 0\n    if a**2+b**2==a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return b**2+a**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n    if a**2+b**2>a**2+b**2:\n        return a**2+b**2\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return perfect_squares(a, b - 1) + perfect_squares(a - 1, b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # write your code here\n    if a >= b:\n        return -1\n    elif b == 0:\n        return 1\n    elif a == b:\n        return a\n    elif a < b:\n        return perfect_squares(a, b-2)\n    else:\n        return perfect_squares(a, b-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return True\n    elif a < b:\n        return abs(b - a) == abs(b ** 2 - a ** 2)\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    if a < b:\n        a, b = b, a\n    factors = []\n    for i in range(a,b+1):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            factors.append(i)\n    return factors\n    \ndef sosu(a,b):\n    '''\n    Write a function that takes two numbers as parameters.\n    '''\n    c=[]\n    c.append(a)\n    c.append(b)\n    c.sort()\n    if c[0]==c[1]:\n        return c[0]\n    if c[0]>c[1]:\n        return c[1]\n    \n    if c[0]<c[1]:\n        return c[0]\n    \ndef prime(a,b):\n    '''\n    Return a list of all prime numbers smaller than or equal to a and b.\n    '''\n    i=1\n    while i<=a:\n        if(a%i==0):\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        a, b = b, a\n    \n    if b == a:\n        return [a,b]\n    \n    if b**2 + a**2 == b**2:\n        return [a, b]\n    \n    res = perfect_squares(a, b**2)\n    res = [a, b] + res\n    \n    if len(res) == 2:\n        return res\n    else:\n        return res[0] + res[1]\n    \ndef main():\n    '''\n    Coding:\n    1. Find perfect squares of first number\n    2. Find perfect squares of second number\n    3. Find perfect squares of first number, second number\n    4. Find perfect squares of first number, second number, third number\n    5. Find perfect squares of first number, second number, third number, fourth number\n    6. Find perfect squares of first number, second number, third number, fourth number, fifth number\n    7. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number\n    8. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number\n    9. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number\n    10. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number\n    11. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number\n    12. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number\n    13. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number\n    14. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    15. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    16. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    17. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    18. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    19. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    20. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    21. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    22. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    23. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    24. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    25. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    26. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    27. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    28. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    29. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    30. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    31. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    32. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    33. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    34. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    35. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    36. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    37. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    38. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    39. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    40. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    41. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    42. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    43. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, eleventh number\n    44. Find perfect squares of first number, second number, third number, fourth number, fifth number, sixth number, seventh number, eighth number, nineth number, tenth number, eleventh number, twelfth number, el"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a_sq = a ** 2\n    b_sq = b ** 2\n    perfect_squares = []\n    \n    # for sq in perfect_squares:\n    #     if a_sq + b_sq == sq:\n    #         pass\n    #     else:\n    #         print(a_sq, b_sq, sq)\n        \n    # print(a_sq, b_sq, perfect_squares)\n    for sq in range(1, b):\n        if a_sq + b_sq == sq:\n            perfect_squares.append(sq)\n    # print(perfect_squares)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check for 1 to n\n    if a > b:\n        a, b = b, a\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while a!= b:\n        if a**2 + b**2 == a**2:\n            return a**2 + b**2\n        elif a**2 + b**2 > a**2:\n            b = b**2\n        else:\n            a = a**2\n    return a\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = math.sqrt(x**2 + y**2)\n    b = x * math.sin(y)\n    c = -y * math.cos(y)\n    return a,b,c\ndef polar_rect_print(a,b,c,t):\n    '''\n    Write a function to print out the polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(a,c))\n    print(\"{:.4f} + {:.4f}i\".format(c,a))\n    print(\"{:.4f} + {:.4f}i\".format(b,c))\ndef polar_rect_calc(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    a_t = math.sqrt(a**2 + d**2)\n    b_t = math.sqrt(b**2 + d**2)\n    c_t = math.sqrt(c**2 + d**2)\n    p_t = math.acos((a_t**2 + b_t**2 - c_t**2)/(2*a_t*b_t))\n    return p_t\ndef polar_rect_comp_print(a,b,c,d):\n    '''\n    Write a function to print out the polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_calc(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    a_t = math.sqrt(a**2 + d**2)\n    b_t = math.sqrt(b**2 + d**2)\n    c_t = math.sqrt(c**2 + d**2)\n    p_t = math.acos((a_t**2 + b_t**2 - c_t**2)/(2*a_t*b_t))\n    return p_t\ndef polar_rect_comp_print(a,b,c,d):\n    '''\n    Write a function to print out the polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_calc_print(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_calc_print(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_print_comp(a,b,c,d):\n    '''\n    Write a function to print out the polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_calc_comp(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_calc_print_comp(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_calc_print_comp(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_calc_print_comp(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_print_comp(a,b,c,d):\n    '''\n    Write a function to print out the polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format(b,a))\ndef polar_rect_comp_calc_print_comp(a,b,c,d):\n    '''\n    Write a function to calculate polar coordinates of a rectangle.\n    '''\n    print(\"{:.4f} + {:.4f}i\".format(a,b))\n    print(\"{:.4f} + {:.4f}i\".format(c,b))\n    print(\"{:.4f} + {:.4f}i\".format(d,c))\n    print(\"{:.4f} + {:.4f}i\".format("
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #The return value is a tuple in the form of (r, theta).\n    return (cmath.rect(x, y), cmath.rect(y, x))\ndef polar_transform(theta, x, y):\n    '''\n    Write a function to transform polar coordinates to rectangular coordinates.\n    '''\n    return (y * math.sin(theta), y * math.cos(theta))\ndef polar_compare(x,y,r):\n    '''\n    Write a function to compare polar coordinates to rectangular coordinates.\n    '''\n    return r*math.sin(x)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x * cmath.pi) / 180, (y * cmath.pi) / 180\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x,y)\n    \n    r = cmath.rect(z)\n    return r.real,r.imag\ndef polar_rect_list(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = polar_coordinates[0]\n    b = polar_coordinates[1]\n    \n    r = cmath.rect(a,b)\n    return r.real,r.imag\ndef polar_circle(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_list(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_list(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_rect_circle(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_circle(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_circle(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_square_circle(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_square_circle(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_square_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_square_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_square_square_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_square_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_square_square_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_circle_square_circle_square(polar_coordinates):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = polar_coordinates[0]\n    \n    x = r * cmath.cos(cmath.pi/2)\n    y = r * cmath.sin(cmath.pi/2)\n    \n    return x,y\ndef polar_square_circle_square_square(polar_coordinates):\n    '''\n    Write a functio"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p1 = cmath.phase(x)\n    p2 = cmath.phase(y)\n    phi = cmath.phase(x)\n    phi = cmath.phase(y)\n    r1 = cmath.polar_to_rect(p1)\n    r2 = cmath.polar_to_rect(p2)\n    x1 = r1.real\n    x2 = r2.real\n    y1 = r1.imag\n    y2 = r2.imag\n    x = x1 + 1j*x2\n    y = y1 + 1j*y2\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif y==0: return 0\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif y==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_x(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_y(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_x_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_y_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_x_rec_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_y_rec_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_x_rec_rec_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_x_rec_rec_rec_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_x_rec_x_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_y_rec_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_y_rec_x_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_y_rec_x_rec_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: return 0\n    elif x==0: return y\n    elif y==0: return x\n    elif x==0: return 0\n    elif o=='x': return x\n    elif o=='y': return y\n    else:\n        x2=x*cmath.pi\n        y2=y*cmath.pi\n        return x2+y2\n        \ndef polar_rect_convert_y_rec_x_rec_rec_rec(x,y,o):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0: retur"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    def coord(a,b,c):\n        return math.sqrt((a*a)+(b*b)+(c*c))\n    r = coord(x,y,0)\n    phi = (cmath.asin(r))*180/math.pi\n    x = coord(x,y,1)\n    y = coord(x,y,2)\n    return (r,phi,x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = cmath.phase(x)\n    c = cmath.rect(y, rad)\n    return c.real, c.imag\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = x/3*math.pi\n    r = y/3\n    polar_coords = theta + math.atan2(r,math.sqrt(r*r + x*x))\n    return polar_coords\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    X=x\n    Y=y\n    delta=2*cmath.pi/x\n    sx=1/2*cmath.sqrt(1-x*x)\n    sy=1/2*cmath.sqrt(1-y*y)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n    \ndef bubble_sort(newList):\n    '''\n    Write a python function to sort the elements in a list in ascending order.\n    '''\n    for i in range(len(newList)):\n        for j in range(0,len(newList)-i-1):\n            if newList[j] > newList[j+1]:\n                temp = newList[j]\n                newList[j] = newList[j+1]\n                newList[j+1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[1:len(newList)]\n    newList[1:len(newList)] = newList[0:1]\n    newList[0:1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # newList.insert(0, newList.pop())\n    newList.reverse()\n    \n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.pop(0)\n    newList.pop()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"\\nReversing the List\\n\")\n    print(newList)\n    print(\"\\nResult:\")\n    print(newList[::-1])\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    first = newList[0]\n    last = newList[n - 1]\n    newList[0] = last\n    newList[n - 1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort()\n    print(newList)\n    for i in range(0,len(newList)-1):\n        temp = newList[i]\n        newList[i] = newList[len(newList)-1]\n        newList[len(newList)-1] = temp\n    print(newList)\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = []\n    while k > 0:\n        C.append(C[k-1]*n)\n        k = k - 1\n    return sum(C)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    prod = 1\n    for i in range(n+1):\n        prod = prod * i\n    for j in range(1,k+1):\n        prod = prod * j\n    return prod\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = 1\n    for i in range(1,k+1):\n        a = a * (n-i)\n    return a\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c=0\n    for i in range(n+1):\n        c+=binomial_coeff(i,k)*binomial_coeff(n-i,k)\n    return c\ndef binomial_coeff(n,k):\n    '''\n    n(=number of times that a binomial is to be calculated) k(=how many times it is to be calculated)\n    '''\n    if n<=0 or k<=0: \n        return 0\n    elif n==0:\n        return 1\n    elif k==0:\n        return 1\n    elif n>0 and k>0:\n        return binomial_coeff(n-1,k-1)*n*k\n    else:\n        return 1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k == 0):\n        return 1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #\n    coeff=[]\n    for i in range(1,k+1):\n        coeff.append(i*(n-i))\n    return sum(coeff)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 1:\n        return n\n    else:\n        return n*(binomial_Coeff(n-1,k-1)*binomial_Coeff(n-1,k))\n        \n    \n    \n    \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int(n * (n+1) / 2)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k < 0 or n < 0:\n        raise ValueError(\"Coefficient's length must be positive and n must be less than k\")\n    return sum([int(x)**(n-k) * (x**k) for x in range(1,n+1)])\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = n*k*(n-k) # the sum of all the possible co-efficients.\n    if k == 1: #if the sum of the co-efficients is 1, return the value.\n        return result\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '0.' in ip:\n        ip = ip.replace('0.', '')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search(\"^([0-9]{1,3})|([1][0-9]{1,3})|([0-9]{1,2})(([0-9]{1,3})|([1][0-9]{1,3}))$\",ip):\n        return ip\n    else:\n        print(\"Invalid ip address\")\n        exit()\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # this function is exactly the same as the function in the other languages\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',ip)\n    # ip = re.sub('[0-9]','',i"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    match = re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip)\n    if match:\n        return ip[match.start():]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.split('.')[0]\ndef removeduplicate_ip(ip):\n    '''\n    Write a function to remove duplicate ip addresses from the IP address list.\n    '''\n    return list(set(ip))\ndef removeduplicate_mac(mac):\n    '''\n    Write a function to remove duplicate mac addresses from the MAC address list.\n    '''\n    return list(set(mac))\ndef removeduplicate_route(route):\n    '''\n    Write a function to remove duplicate routes from the route list.\n    '''\n    return list(set(route))\ndef clean_ip(ip):\n    '''\n    Write a function to clean an ip address\n    '''\n    ip = ip.split('.')\n    ip = [int(num) for num in ip]\n    return ip\ndef clean_mac(mac):\n    '''\n    Write a function to clean an mac address\n    '''\n    mac = mac.split(':')\n    mac = [int(num) for num in mac]\n    return mac\ndef clean_route(route):\n    '''\n    Write a function to clean an route\n    '''\n    route = route.split(' ')\n    route = [int(num) for num in route]\n    return route\ndef add_error(filename):\n    '''\n    Write a function to add error to a file\n    '''\n    error = filename+'\\n'\n    return error\ndef get_ip_mac_list(ip_file):\n    '''\n    Write a function to read an ip file and find all the mac address and ip address.\n    '''\n    ip_mac_list = []\n    with open(ip_file) as f:\n        for line in f:\n            ip, mac = line.split()\n            ip = clean_ip(ip)\n            mac = removezero_ip(mac)\n            ip_mac_list.append(f'{ip} {mac}')\n    return ip_mac_list\ndef get_mac_list(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    mac_list = []\n    with open(file) as f:\n        for line in f:\n            mac = removezero_mac(line.split()[1])\n            mac = removeduplicate_mac(mac)\n            mac_list.append(mac)\n    return mac_list\ndef get_route_list(file):\n    '''\n    Write a function to read a route file and find all the route.\n    '''\n    route_list = []\n    with open(file) as f:\n        for line in f:\n            route = clean_route(line.split()[0])\n            route_list.append(route)\n    return route_list\ndef get_ip_mac_list_route(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    ip_mac_list = []\n    mac_route_list = []\n    with open(file) as f:\n        for line in f:\n            ip, mac, route = line.split()\n            ip = clean_ip(ip)\n            mac = removezero_ip(mac)\n            ip_mac_list.append(f'{ip} {mac} {route}')\n    for i in range(len(ip_mac_list)):\n        mac = removezero_mac(ip_mac_list[i].split()[2])\n        mac = removeduplicate_mac(mac)\n        mac_route_list.append(f'{ip_mac_list[i].split()[0]}{mac}')\n    return ip_mac_list, mac_route_list\ndef get_ip_mac_list_route_intf(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    ip_mac_list = []\n    mac_route_list = []\n    with open(file) as f:\n        for line in f:\n            ip, mac, route, intf = line.split()\n            ip = clean_ip(ip)\n            mac = removezero_ip(mac)\n            intf = int(intf)\n            route = clean_route(route)\n            route = list(set(route))\n            ip_mac_list.append(f'{ip} {mac} {route} {intf}')\n    for i in range(len(ip_mac_list)):\n        mac = removezero_mac(ip_mac_list[i].split()[2])\n        mac = removeduplicate_mac(mac)\n        mac_route_list.append(f'{ip_mac_list[i].split()[0]}{mac}')\n    return ip_mac_list, mac_route_list\ndef get_mac_list_route(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    mac_list = []\n    with open(file) as f:\n        for line in f:\n            mac = removezero_mac(line.split()[2])\n            mac = removeduplicate_mac(mac)\n            mac_list.append(mac)\n    return mac_list\ndef get_mac_list_route_intf(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    mac_list = []\n    with open(file) as f:\n        for line in f:\n            mac = removezero_mac(line.split()[2])\n            intf = line.split()[3]\n            mac = removezero_mac(mac)\n            intf = int(intf)\n            mac_list.append(f'{mac} {intf}')\n    return mac_list\ndef get_route_list_intf(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    route_list = []\n    with open(file) as f:\n        for line in f:\n            route = clean_route(line.split()[0])\n            route_list.append(route)\n    return route_list\ndef get_intf_route_list(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    intf_route_list = []\n    with open(file) as f:\n        for line in f:\n            route, intf = line.split()\n            intf = int(intf)\n            route = clean_route(route)\n            route = list(set(route))\n            intf_route_list.append(f'{intf} {route}')\n    return intf_route_list\ndef get_ip_mac_list_intf(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    ip_mac_list = []\n    intf_route_list = []\n    with open(file) as f:\n        for line in f:\n            ip, mac, route = line.split()\n            ip = removezero_ip(ip)\n            mac = removezero_mac(mac)\n            intf = line.split()[3]\n            mac = removezero_mac(mac)\n            intf = int(intf)\n            ip_mac_list.append(f'{ip} {mac} {route} {intf}')\n    for i in range(len(ip_mac_list)):\n        mac = removezero_mac(ip_mac_list[i].split()[2])\n        mac = removeduplicate_mac(mac)\n        intf = line.split()[3]\n        mac = removezero_mac(mac)\n        intf = int(intf)\n        ip_mac_list[i] = f'{ip} {mac} {route} {intf}'\n    return ip_mac_list, intf_route_list\ndef get_intf_route_list_intf(file):\n    '''\n    Write a function to read a mac file and find all the mac address and ip address.\n    '''\n    intf_route_list = []\n    with open(file) as f:\n        for line in "
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zeroes = 0\n    for char in ip:\n        if char == '0' or char == '1':\n            zeroes += 1\n        else:\n            zeroes = 0\n        if zeroes > 0:\n            break\n    new_ip = ip[:zeroes]\n    return new_ip\ndef removeipv4(ip):\n    '''\n    Remove any extra characters before an ip address\n    '''\n    ip = re.sub(r'\\D', '', ip)\n    if ip[0] == '.':\n        ip = ip[1:]\n    if ip[-2] == '.':\n        ip = ip[:-2]\n    if ip[-1] == '.':\n        ip = ip[:-1]\n    return ip\ndef removeprefix(ip, prefix):\n    '''\n    Remove a prefix from an ip address\n    '''\n    ip = re.sub(r'\\d', '', ip)\n    if ip[:len(prefix)] == prefix:\n        ip = ip[len(prefix):]\n    return ip\ndef format(ip):\n    '''\n    Write a function to format an ip address according to the rules of ipv4.\n    '''\n    ip = removezero_ip(ip)\n    ip = removeipv4(ip)\n    ip = removeprefix(ip, '.')\n    ip = ip[:-1]\n    return ip\ndef format_ip(ip):\n    '''\n    Write a function to format an ip address according to the rules of ipv4.\n    '''\n    ip = removeipv4(ip)\n    ip = removeprefix(ip, '.')\n    ip = removezero_ip(ip)\n    ip = ip[:-1]\n    return ip\ndef replace_nones(ip):\n    '''\n    Replace a ip address with a no-name string\n    '''\n    ip = ip.replace('.', '-')\n    ip = ip.replace(' ', '-')\n    ip = ip.replace('-', '.')\n    return ip\ndef make_valid(ip):\n    '''\n    Return a valid ip address\n    '''\n    ip = removeprefix(ip, '.')\n    return format(ip)\ndef make_valid_ip(ip):\n    '''\n    Return a valid ip address\n    '''\n    ip = format(ip)\n    ip = format(ip)\n    return ip\ndef fix_mac(mac):\n    '''\n    Fix the mac address.\n    '''\n    return re.sub('[^0-9A-F]', '', mac)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?:0|[1-9][0-9]*)+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip = ip.split('.')\n    new_ip = []\n    for i in range(len(ip)):\n        if(ip[i]!=''):\n            new_ip.append(ip[i])\n    return \".\".join(new_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    temp=ip.split('.')\n    if len(temp)==4:\n        for i in range(4):\n            if temp[i]=='0':\n                temp[i]=''\n    else:\n        temp[1]=''\n    return '.'.join(temp)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[1]\n    if len(list1) == 2:\n        if list1[0] == list1[1]:\n            return list1[0] - diff\n    if diff % 2 == 0:\n        return diff\n    else:\n        return list1[1] - diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_odd.append(list1[i])\n        else:\n            if list1[i]%2!=0:\n                even_odd.append(list1[i])\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list=[]\n    if len(list1)%2==0:\n        for i in range(0,len(list1),2):\n            new_list.append(list1[i])\n            new_list.append(list1[i+1])\n    else:\n        for i in range(0,len(list1),2):\n            new_list.append(list1[i])\n            new_list.append(list1[i+1])\n    return new_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_diff_even_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            list_diff_even_odd.append(i)\n    return list_diff_even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #Start writing your code here\n    if len(list1) % 2 == 0:\n        return list1[len(list1) // 2] - list1[len(list1) // 2 - 1]\n    elif len(list1) % 2 == 1:\n        return list1[len(list1) // 2] - list1[len(list1) // 2 + 1]\n    \n    \nlist1 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200]\nprint(diff_even_odd(list1)"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = []\n    for i in list1:\n        if i%2 == 0:\n            diff.append(i)\n        else:\n            diff.append(i)\n    return diff\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list1[i] = list1[i] * 2\n        else:\n            list1[i] = list1[i] / 2\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    \n    if list1 == []:\n        return(0)\n    \n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    \n    return(len(even) - len(odd))\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return sum([i == j for i, j in zip(str1, str2)])\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)) : \n        for j in range(len(str2)) :\n            if str1[i]!=str2[j] : \n                break\n        if(str1[i]!=str2[j]) : \n            count=count+1\n            break\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    \n    # declaring a 3-d array\n    arr = [ [ 0 for j in range(n) ] for i in range(n) ]\n    \n    # shifting all the characters of a binary number\n    for i in range(n):\n        arr[i][i] = 1\n        \n    # printing the elements in the 3-d array\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] = str1[i]\n            arr[j][i] = str2[j]\n    \n    # printing the elements of the 3-d array\n    for i in range(n):\n        for j in range(n):\n            print(arr[i][j],end=\" \")\n        print()\n    \n    # printing the elements of the 3-d array\n    for i in range(n):\n        for j in range(n):\n            print(arr[j][i],end=\" \")\n        print()\n    \n    # printing the elements of the 3-d array\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == str2[j]:\n                print(0,end=\" \")\n            else:\n                print(1,end=\" \")\n        print()\n    \n    # printing the elements of the 3-d array\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == str1[j]:\n                print(0,end=\" \")\n            else:\n                print(1,end=\" \")\n        print()\n    \n    # printing the elements of the 3-d array\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == str2[i]:\n                print(0,end=\" \")\n            else:\n                print(1,end=\" \")\n        print()\n    \n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    min_swaps = 0\n    size = len(str1)\n    for i in range(size):\n        left_half = str1[:i]\n        right_half = str1[i+1:]\n        swaps = min_swaps_2(left_half,right_half)\n        if swaps > min_swaps:\n            min_swaps = swaps\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = [int(i) for i in str1]\n    s2 = [int(i) for i in str2]\n    n = len(s1)\n    c = 0\n    for i in range(n):\n        s1[i],s2[i] = s2[i],s1[i]\n        if s1[i] == s2[i]:\n            c += 1\n        else:\n            break\n    return c\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    #Initialize a temp string \n    temp = \"\"\n    #Set str1 to a temporary string \n    temp = str1\n    #Loop through all characters of str1.\n    for i in range(len(str1)) : \n        if str1[i] == str2[i] : \n            #If the first character of str1 is a character \n            #and the second is not, add a swap.\n            if str1[i] == '1' : \n                temp = temp[:i] + '0' + temp[i+1:]\n                #If the number of the characters swapped is less than 2, \n                #swap to the next character \n            else : \n                temp = temp[:i] + '1' + temp[i+1:]\n                #If the number of characters are equal to the number of characters in str1 \n                #then swap to the next character.\n        if str1[i]!= str2[i] : \n            #If there is not a swap, \n            #add a 1 to the count. \n            if str1[i] == '0' : \n                count += 1\n            #If there is a 1, \n            #add a 0 to the count. \n            else : \n                count += 0\n    #If there is no swap then return the count. \n    if count == 0 : \n        return count\n    #Return the count. \n    else : \n        return count \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    string = []\n    for i in range(0, len(str1)):\n        if str1[i] == '1':\n            string.append(i)\n    for j in range(0, len(str2)):\n        if str2[j] == '1':\n            string.append(j)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            sys.stdout.write(str(tuple_list[i][j]) + \"\\t\")\n        sys.stdout.write(\"\\n\")\n    return sum(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(map(sys.getsizeof, tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # your code here\n    tuple_size = 0\n    for item in tuple_list:\n        tuple_size += len(item)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0 \n    for i in tuple_list:\n        size = size + len(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += element.__sizeof__()\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import struct\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return reduce(lambda x, y: x + y, tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += len(element)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    n = 0\n    for el in tuple_list:\n        n += len(el)\n    return n\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Step 1: Find the middle element\n    mid = (arr1 + arr2)//2\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l = 0\n    r = len(arr1)-1\n    while(l<=r):\n        m = l+(r-l)//2\n        if arr1[m] > arr2[k]:\n            r = m-1\n        elif arr1[m] < arr2[k]:\n            l = m+1\n        else:\n            return arr2[k]\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Base case\n    if k == 0:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Sorting the array.\n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l = 0\n    r = len(arr2) - 1\n    while l < r:\n        m = l + (r - l) // 2\n        if arr1[m] < arr2[k-1]:\n            r = m\n        else:\n            l = m\n    return arr2[l]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if the size of both arrays is greater than 1 then return -1\n    if len(arr1)>len(arr2):\n        return -1\n    \n    # if the size of arr1 is greater than the size of arr2 then return -1\n    if len(arr1)<len(arr2):\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[(len(arr1)-k)%len(arr1)]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def find_kth(arr1, arr2, k):\n        if k==0:\n            return arr1[0]\n        if k==len(arr1):\n            return arr2[0]\n        if k<len(arr1):\n            mid = (len(arr1)+len(arr2))//2\n            if k==mid:\n                return find_kth(arr1, arr2, k-mid)\n            return arr1[mid] if arr2[mid] < arr1[k] else arr2[mid]\n    return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #start = time.time()\n    ans = arr1[k-1]\n    end = len(arr1)-1\n    for i in range(0,end):\n        if arr1[i] > arr2[k-1]:\n            ans = arr1[i]\n            break\n        elif arr1[i] < arr2[k-1]:\n            ans = arr2[k-1]\n            break\n    #end = time.time()\n    #print(f'Elapsed time: {end-start}')\n    return ans\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Write your code here\n    \n    is_armstrong = False\n    try:\n        number = int(number)\n    except ValueError:\n        is_armstrong = False\n        \n    if len(str(number)) == 1:\n        is_armstrong = True\n    else:\n        is_armstrong = False\n        \n    return is_armstrong\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    rem_count = 0\n    num = number\n    while num:\n        rem_count = rem_count + 1\n        num = num // 10\n    if rem_count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_number = str(number)\n    dig_num = len(str_number)\n    sum_num = 0\n    for i in range(len(str_number)):\n        sum_num += int(str_number[i])**dig_num\n    if sum_num == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    for i in str(number):\n        s += int(i)**len(str(number))\n    return s == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def d(num):\n        if num > 0:\n            if num % 10 == num % 10:\n                return d(num // 10)\n            else:\n                return d(num // 10) +'' + str(num % 10)\n        else:\n            return'' + str(num)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    s = str(number)\n    for i in range(len(s)):\n        count += (s[i]**3 - int(s[i]))**3\n    return count == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    check = 0\n    for digit in str(number):\n        check += int(digit)\n        count += 1\n    if (check**count) == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = [int(i) for i in str(number)]\n    remainder = len(digits) % 2\n    if remainder == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(number):\n        sum += int(i)\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) == 1:\n        return True\n    else:\n        new_number = str(number)\n        prev_number = new_number[0]\n        for char in range(len(new_number)):\n            if prev_number == new_number[char]:\n                prev_number = new_number[char + 1]\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    n = int(number)\n    for x in range(1, n + 1):\n        result += x\n    result /= (n * (n - 1) / 2)\n    return result\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total = total + i\n    avg = total / number\n    return avg\n    \n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    numbers = []\n    for i in range(1, number + 1):\n        numbers.append(i)\n    sum = 0\n    for i in range(1, len(numbers)):\n        sum += numbers[i]\n    average = sum / len(numbers)\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number+1):\n        sum += i\n    average = sum / number\n    return average\n    \n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i<number:\n        sum = sum + i\n        i = i + 1\n    return sum/number\n    #sum = 0\n    #i = 0\n    #while i<number:\n    #    sum = sum + i\n    #    i = i + 1\n    #return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for n in range(1, number + 1):\n        number = int(input(f\"Add {n}th natural number to sum: \"))\n        sum += number\n    average = sum / number\n    print(f\"sum = {sum}\")\n    print(f\"average = {average}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return (sum(range(1,number+1))) / (number+1)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_numbers = 0\n    average_numbers = 0\n    for i in range(1, number + 1):\n        sum_numbers = sum_numbers + i\n    average_numbers = sum_numbers / number\n    return sum_numbers, average_numbers\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1,number+1):\n        sum = sum + i\n        avg = sum/i\n    return(sum,avg)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #if n is even \n    if n % 2 == 0 :\n        #check if n is odd\n        if n == 2 or n == 4 or n == 6 or n == 8 :\n            return True\n        else :\n            return False\n    #if n is not even\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n        \nnum = 2\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Use assert to check whether the given number is even or not\n    assert n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return \"Your number is even.\"\n    else : \n        return \"Your number is odd.\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    if n%2 == 0 :\n        return True\n    else :\n        return False\n        \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    \n    if n%2!= 0 :\n        return True\n    else :\n        return False\n        "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = []\n    for i in range(0, len(str1)):\n        if str1[i] in lst:\n            lst.remove(str1[i])\n        else:\n            lst.append(str1[i])\n    return len(lst)\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #remove initial spaces\n    str1 = str1.strip()\n    #split the string\n    str1 = str1.split()\n    #create list of characters\n    list = []\n    for i in range(len(str1)):\n        list.append(str1[i])\n    #check the list if it is a singleton\n    if len(str1) == 1:\n        print(\"The first character is repeated in '%s'\" % (str1[0]))\n    else:\n        for i in range(len(str1)):\n            if str1[i] in list:\n                print(\"The first character is repeated in '%s'\" % (str1[i]))\n                break\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i == str1[count]:\n            count = count + 1\n            if count == 1:\n                return str1[count - 1]\n        count = 0\n    return 'Not found'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if(str1 == \"\"):\n        return -1\n    dictionary = {}\n    for char in str1:\n        if char in dictionary:\n            dictionary[char] += 1\n        else:\n            dictionary[char] = 1\n    for key in dictionary:\n        if dictionary[key] > 1:\n            return key\n    return -1\n        \n        "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    st = list(str1)\n    new_st = []\n    for i in st:\n        if i in st:\n            new_st.append(i)\n        else:\n            new_st.append(' ')\n    new_st.reverse()\n    return new_st\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    unique = []\n    for char in str1:\n        if char in unique:\n            unique.remove(char)\n        else:\n            unique.append(char)\n    for x in unique:\n        print(x)\n    return str1[len(unique)-1]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code here\n    return(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #Use a loop to iterate over the string\n    for i in range(len(str1)):\n        if str1[i]==str1[i-1]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) < 1:\n        return -1\n    elif len(str1) == 1:\n        return 'a'\n    elif str1[0] == str1[1]:\n        return str1[0]\n    else:\n        for i in range(0,len(str1)):\n            if str1[i] == str1[i+1]:\n                return str1[i]\n    return -1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # your code here\n    return [num for num in range(1, n+1) if num < num%5]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lud_list = []\n    for i in range(1, n+1):\n        if i < 10:\n            lud_list.append(i)\n        else:\n            n_lud = i % 10\n            if n_lud == 0:\n                lud_list.append(i)\n            else:\n                while n_lud!= 0:\n                    n_lud = n_lud // 10\n                    if n_lud == 0:\n                        lud_list.append(i)\n                        break\n                    elif n_lud == 1:\n                        lud_list.append(i)\n                        break\n                    elif n_lud % 10 == 0:\n                        lud_list.append(i)\n                        break\n    return lud_list"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = list(range(1, n+1))\n    new = []\n    for i in luc:\n        if i < n:\n            new.append(i)\n    return new\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i >= 5:\n            if i % 5!= 0:\n                ludic.append(i)\n        else:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucky_list = []\n    for i in range(1,n):\n        if i%10 == 0:\n            lucky_list.append(i)\n    return lucky_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2,n+1):\n        ludic.append(i)\n        if i % 10!= 0:\n            continue\n        for j in range(10):\n            if j >= 10:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i == 1:\n            ludic.append(i)\n        if i == 2:\n            ludic.append(3)\n        if i == 3:\n            ludic.append(4)\n        if i == 4:\n            ludic.append(7)\n        if i == 5:\n            ludic.append(12)\n        if i == 6:\n            ludic.append(24)\n        if i == 7:\n            ludic.append(43)\n        if i == 8:\n            ludic.append(64)\n        if i == 9:\n            ludic.append(123)\n        if i == 10:\n            ludic.append(144)\n        if i == 11:\n            ludic.append(157)\n        if i == 12:\n            ludic.append(188)\n        if i == 13:\n            ludic.append(216)\n        if i == 14:\n            ludic.append(247)\n        if i == 15:\n            ludic.append(308)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(1, n + 1) if x % 2 == 0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_ludic(n):\n        return [num for num in range(1, n+1) if num%2 == 1]\n    return get_ludic(n)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n,0,-1) if i<=n]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    arr = s.split()\n    rev_str = ''\n    for i in arr:\n        rev_str += i +''\n    return rev_str[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #Create a new string with every word reversed\n    reverse = \"\"\n    #loop through the string and create a new string with each word reversed\n    for letter in s.split(\" \"):\n        reverse += letter[::-1] + \" \"\n    #return reverse\n    return reverse\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    import re\n    import string\n    word_list = s.split()\n    word_list_rev = []\n    regex = r'\\s+'\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    r = s.split(' ')\n    r = r[::-1]\n    print(r)\n    s =''.join(r)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_words_list = []\n    # Write your code here\n    # user input\n    if len(s) == 1:\n        return s\n    elif len(s) > 1:\n        # the reversed words\n        for i in range(len(s) - 1):\n            reverse_words_list.append(s[i])\n            reverse_words_list.append(s[i+1])\n        # return the reversed string\n        return''.join(reverse_words_list)\n    else:\n        raise ValueError\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # create a empty list\n    temp_list = list(s)\n    # start from the end\n    i = len(temp_list) - 1\n    # start with the last word\n    while i > 0:\n        temp_list[i] = temp_list[i].strip()\n        i = i - 1\n    # reverse each word\n    temp_list = temp_list[::-1]\n    # return the list\n    return \" \".join(temp_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #return list of words in reversed order\n    rev_list = []\n    for i in s.split():\n        rev_list.append(i[::-1])\n    return''.join(rev_list)\n    \nprint(reverse_words('Eden loves to run'))\nprint(reverse_words('The quick Brown Fox'))\nprint(reverse_words('The quick Brown Fox'))\nprint(reverse_words('Hi there'))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = \" \".join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s[::-1].split(\" \")\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    rev = \"\"\n    for i in s.split():\n        rev += i + \" \"\n    return rev[::-1].strip()\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num == 1 or num == 5 or num == 7:\n        return False\n    elif num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # if it is not prime number return False.\n    if num > 1:\n        # if it is divisible by any number from 2 to 5, return False\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 3 to 9, return False\n        for i in range(3, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10 to 99, return False\n        for i in range(10, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 100 to 999, return False\n        for i in range(100, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 1000 to 9999, return True\n        for i in range(1000, num):\n            if (num % i) == 0:\n                return False\n        # if it is divisible by any number from 10000 to 9999, return True\n        for i in range(10000, num):\n            if (num % i) == 0:\n                return False\n        # return True\n        return True\n    # return False\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num//2, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num < 2 or num%2 == 0:\n        return False\n    if num == 3:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if (num % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if num > 1:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    \n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    for i in range(5, num):\n        if num % i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2: return True\n    if num == 3: return True\n    if num % 2 == 0 or num % 3 == 0: return False\n    for i in range(5, int(math.sqrt(num)) + 1, 6):\n        if num % i == 0: return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1 or num == 0:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef find_prime(num):\n    '''\n    Given a number, return the prime numbers up to that number.\n    '''\n    num_set = set(range(2, num))\n    for n in num_set:\n        if prime_num(n):\n            yield n\n    \n    \ndef all_primes(n):\n    '''\n    Return a set of all prime numbers from 1 to n.\n    '''\n    return set(find_prime(n))\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    div = 2\n    while num % div == 0:\n        div += 1\n    return div == num\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\ndef radian_degree_list(degree_list):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree_list = []\n    for degree in degree_list:\n        radian_degree_list.append(radian_degree(degree))\n    return radian_degree_list\ndef centimeter_to_meter(centimeter):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter = centimeter / 100\n    return meter\ndef meter_to_centimeter(meter):\n    '''\n    Write a function to convert meters to centimeters.\n    '''\n    centimeter = meter * 100\n    return centimeter\ndef centimeter_to_meter_list(centimeter_list):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter_list = []\n    for centimeter in centimeter_list:\n        meter_list.append(centimeter_to_meter(centimeter))\n    return meter_list\ndef meter_to_centimeter_list(meter_list):\n    '''\n    Write a function to convert meters to centimeters.\n    '''\n    centimeter_list = []\n    for meter in meter_list:\n        centimeter_list.append(meter_to_centimeter(meter))\n    return centimeter_list\ndef centimeter_to_meter_list_average(centimeter_list):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter_list = []\n    for centimeter in centimeter_list:\n        meter = centimeter_to_meter(centimeter)\n        meter_list.append(meter)\n    return meter_list\ndef meter_to_centimeter_list_average(meter_list):\n    '''\n    Write a function to convert meters to centimeters.\n    '''\n    centimeter_list = []\n    for meter in meter_list:\n        centimeter = meter_to_centimeter(meter)\n        centimeter_list.append(centimeter)\n    return centimeter_list\ndef centimeter_to_meter_average(centimeter_list):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter_list = []\n    for centimeter in centimeter_list:\n        meter = centimeter_to_meter(centimeter)\n        meter_list.append(meter)\n    return meter_list\ndef meter_to_centimeter_average(meter_list):\n    '''\n    Write a function to convert meters to centimeters.\n    '''\n    centimeter_list = []\n    for meter in meter_list:\n        centimeter = meter_to_centimeter(meter)\n        centimeter_list.append(centimeter)\n    return centimeter_list\ndef centimeter_to_meter_list_diff(centimeter_list):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter_list = []\n    for centimeter in centimeter_list:\n        meter = centimeter_to_meter(centimeter)\n        meter_list.append(meter)\n    return meter_list\ndef meter_to_centimeter_list_diff(meter_list):\n    '''\n    Write a function to convert meters to centimeters.\n    '''\n    centimeter_list = []\n    for meter in meter_list:\n        centimeter = meter_to_centimeter(meter)\n        centimeter_list.append(centimeter)\n    return centimeter_list\ndef centimeter_to_meter_list_diff_average(centimeter_list):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter_list = []\n    for centimeter in centimeter_list:\n        meter = centimeter_to_meter(centimeter)\n        meter_list.append(meter)\n    return meter_list\ndef meter_to_centimeter_list_diff_average(meter_list):\n    '''\n    Write a function to convert meters to centimeters.\n    '''\n    centimeter_list = []\n    for meter in meter_list:\n        centimeter = meter_to_centimeter(meter)\n        centimeter_list.append(centimeter)\n    return centimeter_list\ndef centimeter_to_meter_list_diff_average(centimeter_list):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter_list = []\n    for centimeter in centimeter_list:\n        meter = centimeter_to_meter(centimeter)\n        meter_list.append(meter)\n    return meter_list\ndef meter_to_centimeter_list_diff_average(meter_list):\n    '''\n    Write a function to convert meters to centimeters.\n    '''\n    centimeter_list = []\n    for meter in meter_list:\n        centimeter = meter_to_centimeter(meter)\n        centimeter_list.append(centimeter)\n    return centimeter_list\ndef square_root(square_num):\n    '''\n    Write a function to compute the square root of a positive integer.\n    '''\n    root_num = int(math.sqrt(square_num))\n    return root_num\ndef square_root_list(square_num_list):\n    '''\n    Write a function to compute the square root of a positive integer.\n    '''\n    square_root_list = []\n    for square in square_num_list:\n        square_root = square_root(square)\n        square_root_list.append(square_root)\n    return square_root_list\ndef square_root_list_average(square_num_list):\n    '''\n    Write a function to compute the square root of a positive integer.\n    '''\n    square_root_list = []\n    for square in square_num_list:\n        square_root = square_root(square)\n        square_root_list.append(square_root)\n    return square_root_list\ndef square_root_list_average_square_root(square_root_list):\n    '''\n    Write a function to compute the square root of a positive integer.\n    '''\n    square_root_list = []\n    for square in square_root_list:\n        square_root = square_root(square)\n        square_root_list.append(square_root)\n    square_root_list_list = []\n    for square in square_root_list:\n        square_root_list_list.append(square_root_list[square])\n    return square_root_list_list\ndef square_root_list_average_square_root_square_root(square_root_list):\n    '''\n    Write a function to compute the square root of a positive integer.\n    '''\n    square_root_list = []\n    square_root_list_list = []\n    for square in square_root_list:\n        square_root = square_root(square)\n        square_root_list.append(square_root)\n    square_root_list_list = []\n    for square in square_root_list:\n        square_root_list_list.append(square_root_list[square])\n    square_root_list_square_root_list = []\n    for square_root_list in square_root_list_list:\n        square_root_list_square_root_list.append(square_root_list * square_root_list)\n    return square_root_list_square_root_list\ndef square_root_list_average_square_root_square_root(square_root_list):\n    '''\n    Write a function to compute the square root of a positive integer.\n    '''\n    square_root_list = []\n    square_root_list_list = []\n    for square in square_root_list:\n        square_root = square_root(square)\n        square_root_list.append(square_root)\n    square_root_list_list = []\n    for square in square_root_list:\n        square_root_list_list.append(square_root_list[square])\n    square_root_list_square_root_list = []\n    for square_root_list in square_root_list_list:\n        square_root_list_square_root_list.append(square_root_list * square"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return round(radian_degree, 2)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * math.pi / 180\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    if degree > 180:\n        degree = degree - 360\n    radian = degree * math.pi / 180\n    return round(radian, 2)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree *(math.pi/180)\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    index_pattern = 0\n    end_index = 0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.finditer(pattern, text)\n    match_list = []\n    for m in match:\n        match_list.append(m.start())\n        match_list.append(m.end())\n    start = min(match_list)\n    end = max(match_list)\n    return start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    sub_str = re.findall(pattern, text, re.MULTILINE)\n    \n    if not sub_str:\n        return [0, 0, -1]\n    \n    for i in range(len(sub_str)):\n        if sub_str[i][0] == '\"':\n            return [len(sub_str)-1, i, len(sub_str)-1]\n    return [len(sub_str), -1, -1]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.replace('{','').replace('}','').replace('[','').replace(']','')\n    def search_string(text, pattern):\n        start = 0\n        end = len(text)\n        while start < end:\n            if text[start:end] == pattern:\n                return start, end\n            elif text[start:end] == pattern[0]:\n                if start + 1 < end:\n                    return search_string(text[start+1:end], pattern)\n                else:\n                    start += 1\n                    end = len(text)\n            elif text[start:end] == pattern[-1]:\n                if start > 0:\n                    start = search_string(text[start-1:], pattern)\n                else:\n                    return None, None\n            else:\n                start += 1\n        return None, None\n    result = search_string(text, pattern)\n    if result is not None:\n        return result\n    else:\n        return None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if not match:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match is not None:\n        return match, match.start(), match.end()\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start, end = 0, 0\n    matches = []\n    for pos in range(len(text)):\n        if text[pos] == pattern[0]:\n            start = pos\n        if text[pos] == pattern[1]:\n            end = pos\n        if pos == len(text)-1 and text[pos] == pattern[2]:\n            end = pos\n    while start!= -1 and end!= -1:\n        if start < end:\n            matches.append(text[start:end+1])\n            start = 0\n            end = end+1\n        else:\n            start = 0\n            end = end+1\n    return matches\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #1. find and store the start index of the regex\n    start = None\n    end = None\n    #2. find the last character that matches the pattern in text\n    pos = len(pattern) - 1\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            start = i\n            end = i+len(pattern)\n            break\n    #3. find the last character that matches the pattern in text\n    pos = len(pattern) - 1\n    for i in range(len(text) - len(pattern)):\n        if text[i:i+len(pattern)] == pattern:\n            start = i\n            end = i+len(pattern)\n            break\n    #4. when we come across a match, store the start and end indexes of the match\n    if start == None or end == None:\n        return 0, 0, 0\n    return start, end, len(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find all the patterns\n    patterns = re.finditer(pattern, text, re.IGNORECASE)\n    # for each pattern, add the index\n    index = 0\n    start = 0\n    end = 0\n    for pattern in patterns:\n        index = pattern.end()\n        start = pattern.start()\n        end = index\n    # return the matching string, the start index, and the end index\n    return start, end, index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    l = []\n    pattern = re.compile(pattern)\n    \n    if not pattern.search(text):\n        return None, -1, -1\n    \n    i = 0\n    j = 0\n    while True:\n        match = pattern.search(text, i)\n        if match:\n            j = match.start()\n            l.append([i, match.end()])\n        else:\n            break\n        i = j+1\n    \n    return l, i, j\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Replace None with appropriate return value\n    return None\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (n+1) * (n+2) // 2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #return\n    for i in range(1,n+1):\n        print(n, end ='')\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    while (i < n):\n        print(i, end=\" \")\n        i += 1\n    print()\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 9\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n    \n    \ndef find_nth_bell(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0:\n        return 9\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 1\n    else:\n        return find_nth_bell(n-1) + find_nth_bell(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 5\n    elif n==4:\n        return 8\n    else:\n        a=n%3\n        b=n//3\n        c=n//2\n        d=n-a-b-c\n        return bell_Number(d)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = []\n    for i in range(n+1):\n        a.append(i)\n    a.sort()\n    return a[-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 1:\n        print('NTH BILL NUMBER NOT RETURNED')\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                print(i, end=\" \")\n                break\n        else:\n            print('\\nNTH BILL NUMBER NOT RETURNED')\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n    \nn = int(input(\"Enter a number for n: \"))\nprint(bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    nth_bell = (1 + (n-1) + (n-2)) / 2\n    print(\"The nth bell number is : \", end=\"\")\n    return nth_bell\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[j] == L:\n                del list1[j]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return []\n    if L == len(list1) - 1:\n        return list1\n    return [list1[L]] + remove_kth_element(list1, L + 1)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1) - L):\n        list1.pop()\n        \n    return list1\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    x = L[0]\n    while i < len(list1):\n        if list1[i] < x:\n            list1.pop(i)\n        else:\n            i += 1\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Defining index variables\n    i = 0\n    #Iterating through each element\n    for item in list1:\n        #Incrementing index variable\n        i = i + 1\n        #Adding k'th element to list\n        if i < L:\n            list1[i] = list1[i-1]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for index in range(L):\n        if index!= L-1:\n            list2.append(list1[index])\n        else:\n            list2.append(list1[index][0])\n    list1.pop(L)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Input: list1 = [1, 2, 3, 4, 5], L = 3\n    # Output: [1, 2, 4, 5]\n    # Explanation: The list will be [1, 2, 3, 5], since the third element is removed.\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = list(L)\n    if L == []:\n        return []\n    return remove_kth_element(L, len(L)-1-L[len(L)-L[::-1].index(L[len(L)-L[::-1].index(L[len(L)-L[::-1].index(L[::-1])+1].pop()))])"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return(list(filter(lambda x: x!= L[-1], list(enumerate(list1)))[:-1][::-1]))\n    "
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # create a 2D list of all columns\n    cols = []\n    for row in test_list:\n        cols.append(row[:])\n    \n    # Find the max of then'th column\n    max_of_column = cols[N]\n    for i in range(0,N):\n        if cols[i][N] > max_of_column[N]:\n            max_of_column = cols[i]\n            \n    return max_of_column\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # write your code here\n    return test_list[0][N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda x: x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    mx = test_list[0][N]\n    for i in range(N):\n        mx = max(mx, test_list[i][N])\n    return mx\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n    else:\n        return max(test_list[0][N-1], max_of_nth(test_list, N-1))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda row:row[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print(test_list)\n    result = test_list[0]\n    for i in range(len(test_list)):\n        result = max(result, test_list[i][N])\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return test_list[0][N]\n    if N > len(test_list):\n        return test_list[0][N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    temp = 0\n    for row in test_list:\n        temp = row[N-1]\n    return temp\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst)==0:\n        return []\n    first = lst[0]\n    second = lst[1]\n    result = []\n    for index in range(len(first)):\n        result.append(first[index])\n        result.append(second[index])\n    return result\n    \ndef merge_sort(lst):\n    '''\n    Sort a list using the merge sort algorithm.\n    '''\n    if len(lst) == 1:\n        return lst\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    return merge(merge_sort(left)) + merge(merge_sort(right))\n    \ndef sort(lst):\n    '''\n    Sort a list using the merge sort algorithm.\n    '''\n    return merge_sort(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #pass\n    merged=[]\n    for i in lst:\n        merged.append(i[0])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    s = []\n    for i in lst:\n        if type(i)!= list:\n            raise ValueError(\"Given list must be of type list.\")\n        s += i\n    return s\n    "
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(lst):\n        lst = lst[:]\n        for i in range(len(lst)-1):\n            if lst[i] is not None:\n                lst[i] = merge(lst[i])\n        return lst\n    return merge_two_lists(lst)"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Solution:\n    '''\n    # Solutions:\n    return [[i[0], i[1]] for i in zip(*lst)]\n    '''\n    # Time complexity: O(n^2)\n    '''\n    # Solution:\n    return zip(*[i for i in lst if i])\n    '''\n    # Time complexity: O(n)\n    '''\n    # Solution:\n    return list(map(list, itertools.zip_longest(*lst)))\n    '''\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    temp = []\n    print(type(lst[0][0]))\n    \n    for i in range(0, len(lst)):\n        temp.append([lst[i][0]])\n        \n    print(type(temp[0]))\n    \n    return temp\n    \n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    first = []\n    second = []\n    lst.sort()\n    i = 0\n    while i < len(lst):\n        if lst[i] not in first and lst[i] not in second:\n            first.append(lst[i])\n            second.append(lst[i])\n        if lst[i] in first:\n            i += 1\n        if lst[i] in second:\n            i += 1\n    return first + second\n        "
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l = len(lst[0])\n    if l == 1:\n        return [lst[0] + lst[1]]\n    else:\n        x = lst[0]\n        y = lst[1]\n        n = len(x)\n        m = len(y)\n        if n == m:\n            return [lst[0] + x + lst[1]]\n        else:\n            ans = [x]\n            for i in range(n):\n                ans.append(y[i] + x[i] + lst[1][i])\n            return ans\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = []\n    for item in test_list:\n        for x in range(len(item)):\n            cummulative.append(item[x])\n    return sum(cummulative)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = 0\n    for element in test_list:\n        cum += element\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # return sum(tuple)\n    \n    return sum([tuple[1] for tuple in test_list])\n    \ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(cummulative_sum(test_list))"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    cummulative_sum = 0\n    for element in test_list:\n        cummulative_sum += element\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_sum = []\n    for values in test_list:\n        for i in values:\n            list_sum.append(i)\n    return list_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for element in test_list:\n        sum += element\n    return sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    s = sum(tuple(nums)) / len(nums)\n    return list(s)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # sum = 0\n    # for i in range(len(nums)):\n    #     for j in range(len(nums[i])):\n    #         sum = sum + nums[i][j]\n    # return [sum/len(nums)]\n    # return sum/len(nums)\n    sum = 0\n    for i in nums:\n        for j in i:\n            sum = sum + j\n    return [sum/len(nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) < 1:\n        return None\n    \n    len_nums = len(nums)\n    \n    avg = []\n    for i in range(len_nums):\n        avg.append(sum(nums[i])/len(nums[i]))\n    \n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    tuple_value = []\n    for i in nums:\n        if isinstance(i, tuple):\n            for j in i:\n                if isinstance(j, tuple):\n                    tuple_value.append(sum(j)/len(j))\n                else:\n                    tuple_value.append(j)\n        else:\n            tuple_value.append(i)\n    return tuple_valu"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        if type(nums[i]) == tuple:\n            for j in range(len(nums[i])):\n                avg_list.append(nums[i][j])\n        else:\n            avg_list.append(nums[i])\n    \n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for num in nums:\n        total.append(sum(num))\n    return total/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in nums:\n        avg.append(sum(i)/len(i))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # init avg list\n    avg = []\n    \n    # iterate over tuple\n    for tup in nums:\n        # add to avg list if number is 1\n        if len(tup) == 1:\n            avg.append(tup)\n    # return average\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    for index in range(len(nums)):\n        total_sum += nums[index][1]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = []\n    sum_of_all_elements = 0\n    for values in nums:\n        for item in values:\n            sum_of_all_elements += item\n    total_sum.append(sum_of_all_elements/len(nums))\n    return total_sum\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(map(lambda x: x % 2, test_tup1))\n    test_tup2 = tuple(map(lambda x: x % 2, test_tup2))\n    modulo = tuple(map(lambda x, y: x // y, test_tup1, test_tup2))\n    modulo = tuple(map(lambda x: x % 2, modulo))\n    return modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1], test_tup1[2] % test_tup2[2], test_tup1[3] % test_tup2[3]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # remove leading zeroes in the tuple\n    test_tup1 = test_tup1[1:]\n    test_tup2 = test_tup2[1:]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of same length\")\n    else:\n        return (test_tup1[i][j] % test_tup2[i][j] for i,j in zip(range(len(test_tup1)),range(len(test_tup2))))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    return test_tup1, test_tup2\n    \ndef main():\n    '''\n    Read two tuples, compute their multiplications and write them to a file.\n    '''\n    # YOUR CODE HERE\n    \n    test_tuple = (5, 6, 7, 8)\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 1) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = ('a', 'b', 'c')\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 2) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') + tuple('b') + tuple('c')\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 3) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 4) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 5) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 6) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 7) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 8) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 9) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 10) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 11) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 12) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 13) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 14) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 15) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 16) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 17) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 18) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 19) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 20) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 21) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 22) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 23) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 24) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 25) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 26) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 27) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 28) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 29) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 30) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 31) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tuple = tuple('a') * 3\n    print(\"Test tuple: \", test_tuple)\n    print(\"\\n****************************\\n\")\n    \n    # 32) Create a tuple of three elements: 'a', 'b', 'c'.\n    test_tupl"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if i == len(test_tup1) - 1:\n            new_tup.append(test_tup1[i])\n            break\n        else:\n            new_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    mod1 = 0\n    mod2 = 0\n    \n    # iterate through each tuple\n    for i in range(len(test_tup1)):\n        mod1 += test_tup1[i]\n        mod2 += test_tup2[i]\n    \n    # if mod1 = mod2, return mod1 and mod2\n    if mod1 % mod2 == 0:\n        print('Element wise modulo is correct')\n    else:\n        print('Element wise modulo is incorrect')\n        \ndef tuple_sum(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the tuple sum.\n    '''\n    \n    total = 0\n    \n    # iterate through each tuple\n    for i in range(len(test_tup1)):\n        total += test_tup1[i]\n    \n    # if total = sum, return total and total\n    if total == sum(test_tup2):\n        print('Tuple sum is correct')\n    else:\n        print('Tuple sum is incorrect')\n        \nif __name__ == '__main__':\n    \n    # test tuple\n    print('Tuple 1:')\n    tuple_sum([1,2,3], [2,3,4])\n    \n    # test tuple\n    print('Tuple 2:')\n    tuple_modulo([1,2,3], [2,3,4])\n    \n    # test tuple\n    print('Tuple 3:')\n    tuple_sum((1,2,3), (2,3,4)"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulos = [(test_tup1[i] % test_tup2[i]) for i in range(len(test_tup1))]\n    return modulos\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #jumps = 0\n    #for step in steps:\n    #    if step == d:\n    #        return jumps\n    #    jumps += steps.count(step)\n    #return jumps\n    return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    jumps = 0\n    \n    n = len(steps)\n    \n    #Check for zero\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    #Check if step is valid\n    if steps[0] == 0:\n        #Check if step is valid\n        if steps[1] == d:\n            jumps = 1\n        #Check if step is not valid\n        else:\n            jumps = min_Jumps(steps[1:],d)\n            \n    #Check if step is valid\n    elif steps[0] == d:\n        #Check if step is valid\n        if steps[1] == 0:\n            jumps = 1\n        #Check if step is not valid\n        else:\n            jumps = min_Jumps(steps[1:],d)\n    else:\n        #Check if step is valid\n        if steps[1] == 0:\n            jumps = min_Jumps(steps[1:],d)\n        else:\n            jumps = min_Jumps(steps[1:],d) + 1\n            \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def is_d(d):\n        return d < 0 or d >= ds\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0:\n        d = abs(d)\n        steps = abs(steps)\n    \n    if d == 0:\n        return steps\n    else:\n        steps -= 1\n        \n        return min_Jumps(steps, d-1) + 1\n    \nif __name__ == \"__main__\":\n    \n    steps = int(input(\"Enter steps: \"))\n    d = int(input(\"Enter d: \"))\n    \n    print(\"Number of jumps:\", min_Jumps(steps, d))\n    "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Base Case\n    if d == 0:\n        return 0\n    \n    # Check if d is a valid value\n    if type(d)!= int or d <= 0 or d >= d:\n        return -1\n    \n    # Check if steps is a valid value\n    if type(steps)!= int or steps <= 0 or steps >= steps:\n        return -1\n    \n    # Check if a valid point lies inside the 3d plane\n    if not (0 < steps < 2 ** d):\n        return -1\n    \n    # Get the points on the plane\n    points = get_points(steps, d)\n    \n    # For each point check if it is visited\n    visited = set()\n    for point in points:\n        if point not in visited:\n            # If not visited, check for path from origin to the point\n            d_jumps = d_Jumps(point, 0, d)\n            if d_jumps!= -1:\n                return d_jumps\n            else:\n                # If a point is not visited, skip it\n                visited.add(point)\n    \n    # If all points are visited, return 0\n    return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Base Cases\n    if d == (d,0):\n        return 0\n    # Base Case\n    if d[0] == 0:\n        return 1\n    # If the current position is on the boundary of the board\n    if d[0] == 2:\n        return 0\n    # If the position is in front of the board\n    if d[0] == 1:\n        return -1\n    # If the position is out of bounds of the board\n    if d[0] == 0:\n        return -1\n    # Step 1: Check horizontal positions\n    if d[1] < 0:\n        return -1\n    # Step 2: Check vertical positions\n    if d[1] < 0:\n        return -1\n    # If the current position is in the boundary of the board\n    if d[1] == 0:\n        return -1\n    # If the position is out of bounds\n    if d[1] == 0:\n        return -1\n    # If the step of the first one is too big\n    if d[1] == 1:\n        return -1\n    # If the step of the second one is too big\n    if d[1] == 2:\n        return -1\n    # Step 3: Check if there are two moves to reach the current position\n    # We need to check if the current position is the destination of the first move or not.\n    # Return 0 if not.\n    # Otherwise, we need to check if the second move is the destination of the current position or not.\n    if steps[d[1]] > 1:\n        return -1\n    if steps[d[1]] == 0:\n        return 0\n    # Step 4: Check the second move\n    return min_Jumps(steps, (d[1]+1,d[1]+1))\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def calc_distance(pt1, pt2): \n        return abs(pt1[0] - pt2[0]) + abs(pt1[1] - pt2[1])\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # the number of jumps required is number of jumps to reach the goal from origin \n    # the length of the path is the number of steps \n    # if the path isn't reachable from origin return false \n    # if the path is reachable from origin return true \n    # return the number of jumps required \n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # check if position is on a boundary\n    if d[0] == 0 or d[1] == 0:\n        print(\"Error: position is not on a boundary\")\n        return\n        \n    # if position is on a boundary, jump to the next one\n    if d[0] == 0:\n        if steps == d[1]:\n            print(\"No jumps required\")\n            return\n    \n    # if position is on a boundary, jump to the next one\n    if d[0] == 0:\n        if steps == 0:\n            print(\"No jumps required\")\n            return\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps + 1): \n        if d[i][0] == 0: \n            jumps += 1\n        elif d[i][0] == 1: \n            jumps -= 1\n    return jumps \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!=len(nums2):\n        return None\n    result=[]\n    for i in range(len(nums1)):\n        count=0\n        for j in range(len(nums2)):\n            if nums1[i]==nums2[j]:\n                count=count+1\n        result.append(count)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>1 and len(nums2)>1:\n        return nums1,nums2\n    elif len(nums2)>1:\n        return nums2,nums1\n    elif len(nums1)>1:\n        return nums1,nums2\n    else:\n        return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1/nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>len(nums2):\n        for i in range(len(nums1)):\n            nums1[i]=nums1[i]+nums2[i]\n    else:\n        for i in range(len(nums2)):\n            nums2[i]=nums2[i]+nums1[i]\n    return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1/nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1/nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    if nums1[0] < nums2[0]:\n        nums1.insert(0,0)\n    elif nums2[0] < nums1[0]:\n        nums2.insert(0,0)\n    else:\n        pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = []\n    l2 = []\n    # for item in nums1:\n    #     l1.append(item)\n    # for item in nums2:\n    #     l2.append(item)\n    # print(l1)\n    # print(l2)\n    i = 0\n    j = 0\n    i_n = 0\n    j_n = 0\n    for item in nums1:\n        if item % 2 == 1:\n            l1.append(item)\n        elif item % 2 == 0:\n            l2.append(item)\n    print(l1)\n    print(l2)\n    while i < len(l1):\n        i_n += 1\n        if l1[i] % 2 == 1:\n            l1[i] = l1[i] * 2\n        elif l1[i] % 2 == 0:\n            l1[i] = l1[i] * 2\n        i += 1\n    while j < len(l2):\n        j_n += 1\n        if l2[j] % 2 == 1:\n            l2[j] = l2[j] * 2\n        elif l2[j] % 2 == 0:\n            l2[j] = l2[j] * 2\n        j += 1\n    print(l1)\n    print(l2)\n    # print(l1)\n    # print(l2)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    # print(nums1[0],nums2[0])\n    if len(nums1) == 1:\n        # print('First one = ',nums1[0],type(nums1[0]))\n        if len(nums2) == 1:\n            # print('Second one = ',nums2[0],type(nums2[0]))\n            return nums1[0]\n        else:\n            return 0\n    if len(nums2) == 1:\n        return nums2[0]\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        res.append(nums1[i])\n        # print(res)\n        if nums2[i] % nums1[i] == 0:\n            # print('res[i] = ',nums2[i], '=', nums1[i])\n            res[i] = nums2[i]\n    for i in range(len(res)):\n        if i >= len(res):\n            res[i] = 0\n        else:\n            res[i] = res[i]/nums2[i]\n    # print(res)\n    return res[0]\n    \ndef test_div_list():\n    assert div_list([3, 5, 8, 11, 2], [5, 8, 11, 2, 3]) == 5\n    assert div_list([3, 5, 8, 11, 2], [5, 8, 11, 2, 3]) == 0\n    assert div_list([3, 5, 8, 11, 2], [5, 8, 11, 2, 3]) == 0\n    assert div_list([3, 5, 8, 11, 2], [5, 8, 11, 2, 3]) == 0\n    assert div_list([], [1]) == 0\n    assert div_list([0], [1]) == 0\n    assert div_list([1, 2, 3, 4], [5, 8, 11, 2]) == 1\n    assert div_list([2, 4], [6, 8]) == 6\n    assert div_list([3, 5], [2, 4, 5]) == 2\n    assert div_list([3, 5], [2, 4, 5]) == 3\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([], [1]) == 0\n    assert div_list([0], [1]) == 0\n    assert div_list([1, 2, 3, 4], [5, 8, 11, 2]) == 5\n    assert div_list([2, 4], [6, 8]) == 6\n    assert div_list([3, 5], [2, 4, 5]) == 3\n    assert div_list([3, 5], [2, 4, 5]) == 3\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div_list([2, 5], [1, 3]) == 0\n    assert div"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num1 = nums1.count(nums2[0])\n    num2 = nums2.count(nums1[0])\n    count = num1+num2\n    if count > 1:\n        for i in range(1,count):\n            if nums1[i] == num2:\n                nums1.remove(nums2[i-1])\n            if nums2[i-1] == num1:\n                nums2.remove(nums1[i-1])\n    return nums1\n    # write a function to remove duplicates from a list\n    # return a new list\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import string\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Declare empty string\n    string_to_move = ''\n    for letter in test_str:\n        if letter.isdigit() == False:\n            string_to_move = string_to_move + letter\n    # Iterate through string\n    for letter in string_to_move:\n        test_str = test_str.replace(letter, letter.zfill(4))\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    for char in test_str:\n        if char.isdigit():\n            while i < 8:\n                test_str = test_str[:i] + '+' + test_str[i+1:]\n                i += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i=0\n    j=0\n    while i<len(test_str):\n        if test_str[i]==\"0\":\n            test_str[i]=\"8\"\n            test_str[i]=8\n            i+=1\n        elif test_str[i]==\"1\":\n            test_str[i]=\"2\"\n            test_str[i]=2\n            i+=1\n        elif test_str[i]==\"2\":\n            test_str[i]=\"4\"\n            test_str[i]=4\n            i+=1\n        elif test_str[i]==\"3\":\n            test_str[i]=\"6\"\n            test_str[i]=6\n            i+=1\n        elif test_str[i]==\"4\":\n            test_str[i]=\"8\"\n            test_str[i]=8\n            i+=1\n        elif test_str[i]==\"5\":\n            test_str[i]=\"6\"\n            test_str[i]=6\n            i+=1\n        elif test_str[i]==\"6\":\n            test_str[i]=\"8\"\n            test_str[i]=8\n            i+=1\n        elif test_str[i]==\"7\":\n            test_str[i]=\"3\"\n            test_str[i]=3\n            i+=1\n        elif test_str[i]==\"8\":\n            test_str[i]=\"5\"\n            test_str[i]=5\n            i+=1\n        elif test_str[i]==\"9\":\n            test_str[i]=\"5\"\n            test_str[i]=5\n            i+=1\n        elif test_str[i]==\"9\":\n            test_str[i]=\"9\"\n            test_str[i]=9\n            i+=1\n        else:\n            test_str[i]=\"0\"\n            test_str[i]=0\n            j=i+1\n    return test_str\n    \ndef gen_str(test_str):\n    '''\n    Write a function to return the final string generated by a number to the given string.\n    '''\n    l=[]\n    num=0\n    for i in test_str:\n        if i==\"1\":\n            num+=1\n        else:\n            l.append(num)\n            num=0\n            \n    l.append(num)\n    final_str=\"\"\n    j=0\n    for i in range(len(l)):\n        final_str+=l[j]\n        j+=1\n    final_str+=\"0\"\n    return final_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Write your code here\n    return test_str\n    \n    \ndef num_to_word(test_str):\n    '''\n    Write a function that takes a number as an input and prints the words in that number.\n    '''\n    # Write your code here\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('-', '')\n    res = []\n    for num in test_str:\n        res.append(num)\n    return res\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(' ','').replace('\\n','').replace('\\t','')\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num = test_str[i]\n            test_str = test_str[:i] + test_str[i+1:]\n            break\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    def move_to_end(string):\n        lst = string.split()\n        lst.reverse()\n        string = \"\".join(lst)\n        return string\n    string = test_str\n    return move_to_end(string)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        j = len(test_str) - 1\n        while j > i:\n            test_str[j], test_str[j-1] = test_str[j-1], test_str[j]\n            j -= 1\n        i += 1\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_dict = {'zero':0,'one':1,'two':2,'three':3,'four':4,'five':5,'six':6,'seven':7,'eight':8,'nine':9,'ten':10,'eleven':11,'twelve':12,'thirteen':13,'fourteen':14,'fifteen':15,'sixteen':16,'seventeen':17,'eighteen':18,'nineteen':19,'twenty':20,'thirty':30,'forty':40,'fifty':50,'sixty':60,'seventy':70,'eighty':80,'ninety':90,'twenty':100,'thirty':300,'forty':400,'fifty':500,'sixty':600,'seventy':700,'eighty':800,'ninety':900,'twenty':1000,'thirty':3000,'forty':4000,'fifty':5000,'sixty':6000,'seventy':700000,'eighty':8000000,'ninety':9000000,'twenty':100000,'thirty':300000,'forty':400000,'fifty':500000,'sixty':6000000,'seventy':700000}\n    \n    num_dict_2 = {'zero':0,'one':1,'two':2,'three':3,'four':4,'five':5,'six':6,'seven':7,'eight':8,'nine':9,'ten':10,'eleven':11,'twelve':12,'thirteen':13,'fourteen':14,'fifteen':15,'sixteen':16,'seventeen':17,'eighteen':18,'nineteen':19,'twenty':20,'thirty':30,'forty':40,'fifty':50,'sixty':60,'seventy':70,'eighty':80,'ninety':90,'twenty':100,'thirty':300,'forty':400,'fifty':500,'sixty':600,'seventy':700,'eighty':800,'ninety':900,'twenty':1000,'thirty':3000,'forty':4000,'fifty':5000,'sixty':6000,'seventy':700000,'eighty':8000000,'ninety':9000000,'twenty':100000,'thirty':300000,'forty':400000,'fifty':500000,'sixty':6000000,'seventy':700000}\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    t = sorted(a)\n    max_sum = 0\n    for i in range(1, len(t)):\n        if t[i] % t[i - 1] == 0:\n            max_sum += t[i] // t[i - 1]\n    return max_sum\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    output = []\n    maxLength = 0\n    maxSubset = []\n    for i in range(len(a)):\n        if len(a) > i:\n            # If the i-th element is divisible, then create a subset with it\n            if a[i] % len(a) == 0:\n                maxSubset.append(a[i])\n            else:\n                subset = a[:i] + a[i+1:]\n                # If the subset size is greater than the current subset size, then append it\n                if len(subset) > maxLength:\n                    maxLength = len(subset)\n                    output = subset\n        else:\n            output = a[:i]\n            break\n    return output, maxLength\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    subsets = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if a[i] % a[j] == 0:\n                return a[i] + a[j]\n    return a[n]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    m = max(a)\n    m_sum = 0\n    for i in range(n):\n        if a[i] % m == 0:\n            m_sum += a[i]\n    if m_sum == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n    curr = [1] * n\n    for i in range(2, n):\n        curr[i] = curr[i-1] + 1\n        for j in range(i-1, -1, -1):\n            if a[j] % curr[i-1] == 0:\n                curr[i] = 1\n    return curr[n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = sorted(a)\n    n = len(nums)\n    subsets = [[]]\n    for i in range(n):\n        subsets.append([])\n        for j in range(i+1):\n            if nums[i] % nums[j] == 0:\n                subsets[-1].append(nums[j])\n    return len(subsets[-1])\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Get the largest possible subset\n    largest_subset = a[1:]\n    for i in range(1, len(a)):\n        for j in range(i, len(a)):\n            if a[i] % a[j] == 0:\n                print(a[i], a[j], largest_subset)\n                print(\"wtf\")\n                print(i, j)\n                return 0\n                break\n                \n    # Return 0 if the entire array is equal to 1\n    if len(a) == 1:\n        return 0\n    else:\n        return len(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m = len(a)\n    if m==0:\n        return 0\n    m = max(m,find_p(a,0,m-1))\n    return m\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    m = 1\n    # iterate through the length of a and if it is odd then it must be divisible by 2\n    # if it is even then it must be divisible by 3\n    # both iteration steps are done at this point \n    # we can make the 2/3check as a divisibility by adding m to the value of n\n    # then we have to do a 2 check to find the largest index where n/m is not divisible by 3\n    # this can be done by looping through a and comparing the number of the lenght of a and the length of a to find the largest index \n    # if n/m is odd then we set the m to be the length of a and a is divisible by 2\n    # if it is even then we set the m to be the length of a to be divisible by 3\n    # these are the indices of the largest so we are adding 1 and \n    # dividing the 2/3 check by 2\n    # to get the number of biggest so that we have to iterate through a and \n    # for a[i] = a[i/m] if it is not divisible by 2\n    # then m is i/m and we can add this number in the next iteration\n    # to iterate through a and for a[i] = a[i-m] if it is not divisible by 3\n    # then we have to do a 2 check to find the largest index where n/m is not divisible by 3\n    # to get the largest so that we have to add the number of the length of a to that value of n/m\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    max_subset = []\n    min_subset = []\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if (n == 0):\n        return None\n    if (n == 1):\n        return arr1[0]\n    if (n == 2):\n        return arr1[0] + arr2[0]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return arr1[n//2] if len(arr1) > 0 else None\n    else:\n        mid = (n//2) + (n%2)\n        if mid == 0:\n            return get_median(arr1, arr2, n//2)\n        elif mid == n//2:\n            return get_median(arr1, arr2, n//2)\n        else:\n            return (arr1[mid-1] + arr2[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    low = 0\n    high = n - 1\n    mid = 0\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        return\n    \n    arr3 = [float('inf')] * (len(arr1) + len(arr2))\n    for i in range(0, len(arr1) + len(arr2)):\n        arr3[i] = arr1[i - len(arr1) - 1]\n    \n    if n == 2:\n        if len(arr1) == 0:\n            return arr2[1]\n        else:\n            return arr1[0]\n    \n    if n == 1:\n        if len(arr1) == 0:\n            return arr2[0]\n        else:\n            return arr1[len(arr1) // 2]\n    \n    for i in range(0, len(arr1) + len(arr2)):\n        arr3[i] = arr1[i - len(arr1) - 1] + arr2[i - len(arr1) - 1]\n    \n    return (arr3[len(arr1) // 2] + arr3[len(arr2) // 2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return\n    elif n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    else:\n        arr1_length = len(arr1)\n        arr2_length = len(arr2)\n        if arr1_length >= arr2_length:\n            index_1 = arr1_length//2\n            index_2 = arr1_length - index_1\n        else:\n            index_2 = arr2_length//2\n            index_1 = arr2_length - index_2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    mid = len(arr1) // 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if length is 0, return the first element.\n    if len(arr1) == 0 or len(arr2) == 0:\n        return arr1[0] if len(arr1) == 0 else arr2[0]\n    # if len of arr1 is not sorted, sort the first arr.\n    elif len(arr1) < len(arr2):\n        arr1 = sorted(arr1)\n    # if len of arr2 is not sorted, sort the first arr.\n    elif len(arr2) < len(arr1):\n        arr2 = sorted(arr2)\n    # if n is odd, median is the middle value.\n    if n % 2 == 0:\n        med = (arr1[n // 2] + arr2[n // 2]) / 2\n    # if n is even, median is the average of the two middle values.\n    else:\n        med = (arr1[n // 2] + arr2[n // 2]) / 2\n    # return the median.\n    return med\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        return get_median(arr2, arr1, n)\n    if len(arr1) < len(arr2):\n        return get_median(arr1, arr2, n)\n    mid = len(arr1)//2\n    if mid % 2 == 0:\n        return (arr1[mid] + arr2[mid])/2\n    else:\n        return arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    print(arr1, arr2)\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    print(arr1, arr2)\n    return (arr1[int(len(arr1)/2)] + arr2[int(len(arr2)/2)])/2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    return [pow(nums[i],n) for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # do not use pow2 because my original implementation just goes up to 8 digits\n    # and loops through the list for n digits\n    # n=2 becomes 2^2, 3, 4, 8, 9\n    result = [0] * n\n    for i in range(n):\n        result[i] = nums[i]**i\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [i**n for i in nums]\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    result = [1] * n\n    for i in range(len(nums)):\n        result[i] = nums[i] ** n\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return nums\n    elif n < 0:\n        return\n    else:\n        ans = []\n        for num in nums:\n            ans.append(num**n)\n        return ans\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    if not n:\n        return [1]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans = []\n    for num in nums:\n        ans.append(num**n)\n    return ans\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n ** num for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_list = string.upper()\n    return upper_list"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # your code goes here\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Time complexity = O(n) since we will iterate over the string\n    # Space Complexity = O(n)\n    # This solution is O(n) because we do not have to initialize n \n    # in the for loop or if we iterate over the string\n    # return is O(n)\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    return False\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList.pop())\n    newList.insert(0,newList.pop())\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code goes here\n    newList.append(newList[0])\n    newList.pop()\n    newList.pop(0)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = []\n    newList.reverse()\n    l.append(newList[0])\n    l.append(newList[len(newList)-1])\n    return l\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0,newList.pop())\n    newList.insert(0,newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # take the length of the list\n    l = len(newList)\n    \n    # if the length of the list is odd then we have to swap the first and last element\n    if l % 2 == 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        \n    # if the length of the list is even then we have to swap the first and last element\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        \n    # return the list\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop()\n    newList.pop()\n    newList.append(newList.pop(0))\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element=newList[0]\n    newList.pop(0)\n    newList.pop(len(newList)-1)\n    newList.append(first_element)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList == []:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[1], newList[-1] \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(a,r) :\n        '''\n        Find the area of a triangle with given side length.\n        '''\n        \n        #convert a, b, c to degrees\n        a = float(a)\n        b = float(b)\n        c = float(c)\n        \n        #calculate area\n        area = (a + b + c)/2\n        \n        #convert to degrees\n        area = float(area)\n        area = (area * 180)/math.pi\n        \n        #check if it is less than 0\n        if (area < 0) :\n            return 'Area cannot be negative'\n        \n        #return area\n        return area\n    \n    #check if the argument is a float\n    if isinstance(r,float) :\n        \n        #if it is a float, make it a number\n        r = float(r)\n        \n        #find area of the triangle\n        a = area(a,r)\n        b = area(b,r)\n        c = area(c,r)\n        \n        #check if they are the same\n        if a == b == c :\n            return 'Triangle is a square'\n        \n        #if not, return the error message\n        return 'Error'\n    \n    #if the argument is not a number, then return an error message\n    return 'Error'\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(a, b, c): \n        area = (math.sqrt(a*a + b*b + c*c)) * 3.14159\n        return area \n    \n    def get_area(a, b, c): \n        area = (math.sqrt(a*a + b*b + c*c)) * 3.14159\n        return area \n    \n    def find_max(a, b, c): \n        a = get_area(a, b, c)\n        b = get_area(a, b, c)\n        c = get_area(a, b, c)\n        if (a > b and b > c) or (b > a and a > c) or (a > c and c > b) or (c > a and a > b) :\n            return a, b, c\n        return max(a, b, c)\n        \n    \n    if r < 0 : return None\n    elif r == 0 : return 0\n    elif r == 1 : return 1\n    else : return (find_max(1,1,1)[0]/2) \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #solve this with bisection method\n    #return the area\n    return ((3/4)*(math.pi*r**2))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        area_1 = r * r\n        area_2 = r * 2 * math.pi\n        area_3 = (r * r * r) + 2 * r * math.pi\n        area_4 = (r * r * r * r) - 2 * r * math.pi\n        if (area_1 < area_2) and (area_2 < area_3) and (area_3 < area_4):\n            return True\n        return False\n    if (r < 0) :\n        return False\n    if (r == 0) :\n        return 0\n    if (r == 0.5) :\n        return 1\n    if (r == 1) :\n        return 0.5\n    if (r < 1) :\n        return False\n    if (area(r) == True) :\n        return area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return(4*r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # write your code here\n    return (r*r)*3/2\n    \nif __name__ == \"__main__\":\n    print(triangle_area(4))\n    print(triangle_area(5))\n    print(triangle_area(1))\n    print(triangle_area(2)"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 1 :\n        return 1\n    else : \n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    return(max(0,(r**2 - r - 1)**2))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r * r\n    if a == 0 :\n        print(\"Cannot determine the area of a triangle with a given radius\")\n    elif a == 1 :\n        print(\"The area of a triangle with a given radius is {:.2f}\".format(r * r))\n    else :\n        print(\"The area of a triangle with a given radius is {:.2f}\".format((-1)*r*r*(3/2)))\n    \ndef parallelogram(l,h) :\n    '''\n    Write a python function to calculate the area of a parallelogram (a rectangle with sides l and h).\n    '''\n    print(\"The area of a parallelogram with sides {} and {} is {:.2f}\".format(l,h,(l * h)))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # write your code here\n    a = (2*r)/3\n    b = (r**2 - a**2)\n    c = (2*r*a)/(2*a**2 + a**3)\n    if c > 0 and b > 0:\n        a = 2*(b**2 - 4*a*c)\n        return (a + b + c)**(1/2)\n    elif b > 0:\n        a = 2*(b**2 - 4*a*c)\n        return (a + b)**(1/2)\n    elif b == 0:\n        return a**(1/2)\n    elif c > 0:\n        a = 2*(c**2 - 4*a*b)\n        return (a + b + c)**(1/2)\n    else:\n        return 0\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start >= end:\n        return None\n    \n    mid = (start + end)//2\n    \n    if array[mid] == mid:\n        return mid\n    \n    if array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return array[end-1]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        print(\"The list must be sorted in ascending order\")\n        return \n    \n    \n    \n    \n    \n    if start > end:\n        return end\n    if array[start] == array[end] and array[start]!= 0:\n        return array[start]\n    \n    \n    \n    \n    if array[start] > array[end]:\n        return find_First_Missing(array,start,end-1)\n    else:\n        return find_First_Missing(array,start+1,end)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    if start > end:\n        return -1\n    if end == 0:\n        return 0\n    mid = (start+end) // 2\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start==end:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None: end = len(array) - 1\n    for i in range(start,end):\n        if array[i] > array[end]:\n            return array[i]\n    return array[end]\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string=string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join([i if i.isspace() else '%20' if i.isalpha() else i for i in string.split()]"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\""
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    for char in string:\n        if char =='':\n            string = string.replace(char,'%20')\n    return string\n    \n    "
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(['%20' if string[i] =='' else string[i] for i in range(len(string))])"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list: \n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    a = []\n    for i in list:\n        if i % 2 == 0:\n            a.append(i)\n    return a\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    print(evens)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num%2 == 0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for value in list:\n        if value % 2 == 0:\n            even_list.append(value)\n        else:\n            odd_list.append(value)\n    return even_list, odd_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    even_list_2 = []\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = [] \n    for x in list: \n        if x % 2 == 0: \n            evens.append(x) \n    return evens\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (sub, ele[1]+1, ele[0]+1, ele[2]+1)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return sub\n    else: sub.append((ele[0], ele[1]))\n    return adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele)\n        if isinstance(ele, tuple): \n            adjac(ele[0], sub)\n        if isinstance(ele, list): \n            for i in ele[1:]: \n                adjac(i, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    y0 = max(y - 1, 0)\n    y1 = min(y + 1, len(matrix) - 1)\n    x0 = max(x - 1, 0)\n    x1 = min(x + 1, len(matrix[0]) - 1)\n    sub = [(x0, y0), (x0, y1), (x1, y0), (x1, y1)]\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Set up a return variable, allocated to a list.\n    adjacents = []\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i = ele[0]\n    j = ele[1]\n    return [i, i + 1, i + 2, i + 3, i + 4, i + 5, i + 6, i + 7]\n    \ndef path(i, j, sub = []):\n    '''\n    Write a function that returns the path that goes from the given coordinate tuple to the (i, j) coordinate tuple.\n    '''\n    if i == j:\n        return sub\n    else:\n        sub = sub + path(i, j, sub)\n        return path(i, j, sub)\n    "
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == None: return sub\n    if ele[0] == 'N':\n        if ele[1] == 'M': return [ ele[1], ele[0] ]\n        return [ ele[1], ele[0] ]\n    elif ele[0] == 'E':\n        if ele[1] == 'S': return [ ele[1], ele[0] ]\n        return [ ele[0], ele[1] ]\n    elif ele[0] == 'W':\n        if ele[1] == 'N': return [ ele[1], ele[0] ]\n        return [ ele[0], ele[1] ]\n    elif ele[0] == 'S':\n        if ele[1] == 'W': return [ ele[1], ele[0] ]\n        return [ ele[0], ele[1] ]\n    elif ele[0] == 'E':\n        if ele[1] == 'W': return [ ele[1], ele[0] ]\n        return [ ele[0], ele[1] ]\n    else:\n        if ele[0] == 'N':\n            if ele[1] == 'E': return [ ele[1], ele[0] ]\n            return [ ele[0], ele[1] ]\n        elif ele[0] == 'E':\n            if ele[1] == 'S': return [ ele[1], ele[0] ]\n            return [ ele[0], ele[1] ]\n        elif ele[0] == 'W':\n            if ele[1] == 'E': return [ ele[1], ele[0] ]\n            return [ ele[0], ele[1] ]\n        elif ele[0] == 'S':\n            if ele[1] == 'W': return [ ele[1], ele[0] ]\n            return [ ele[0], ele[1] ]\n        else:\n            if ele[1] == 'E': return [ ele[1], ele[0] ]\n            return [ ele[0], ele[1] ]\n    return sub + adjac(ele, sub + [ele])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub = ele\n    else:\n        sub.append(ele)\n    if ele[0]!= sub[-1][0] or ele[1]!= sub[-1][1]:\n        return adjac(sub[1:], sub + [ele])\n    else:\n        return adjac(sub[:-1], sub + [ele])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 'N' or ele[0] == 'S':\n        if ele[1] == 'E' or ele[1] == 'W':\n            sub.append(('N', ele[1]))\n        if ele[1] == 'W' or ele[1] == 'E':\n            sub.append(('E', ele[1]))\n        if ele[1] == 'E':\n            sub.append(('S', ele[1]))\n        if ele[1] == 'W':\n            sub.append(('W', ele[1]))\n    if ele[0] == 'E' or ele[0] == 'W':\n        if ele[1] == 'E' or ele[1] == 'W':\n            sub.append(('E', ele[1]))\n        if ele[1] == 'W' or ele[1] == 'E':\n            sub.append(('W', ele[1]))\n        if ele[1] == 'E':\n            sub.append(('S', ele[1]))\n        if ele[1] == 'W':\n            sub.append(('E', ele[1]))\n    if ele[1] == 'N' or ele[1] == 'S':\n        if ele[0] == 'N' or ele[0] == 'S':\n            sub.append(('N', ele[0]))\n        if ele[0] == 'S' or ele[0] == 'N':\n            sub.append(('E', ele[0]))\n    if ele[1] == 'W' or ele[1] == 'E':\n        if ele[0] == 'E' or ele[0] == 'W':\n            sub.append(('W', ele[0]))\n        if ele[0] == 'E' or ele[0] == 'W':\n            sub.append(('S', ele[0]))\n        if ele[0] == 'W' or ele[0] == 'E':\n            sub.append(('W', ele[0]))\n        if ele[0] == 'E':\n            sub.append(('N', ele[0]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < sub[0][1]:\n        sub[0][0] = ele[0] + 1\n    elif ele[0] > sub[0][1]:\n        sub[0][0] = ele[0] - 1\n    elif ele[1] < sub[0][0]:\n        sub[0][1] = ele[1] + 1\n    elif ele[1] > sub[0][0]:\n        sub[0][1] = ele[1] - 1\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_without_spaces = text.replace(' ', '_')\n    text_without_spaces = text_without_spaces.replace('\\n', '_')\n    text_without_spaces = text_without_spaces.replace('\\t', '_')\n    return text_without_spaces\n    \ndef replace_spaces_with_punctuation(text):\n    '''\n    Write a function that takes in a string of text and replaces the space characters with punctuation.\n    '''\n    text_without_spaces = text.replace(' ', '_')\n    text_without_spaces = text_without_spaces.replace('\\n', '_')\n    text_without_spaces = text_without_spaces.replace('\\t', '_')\n    text_without_spaces = text_without_spaces.replace('!', '_')\n    text_without_spaces = text_without_spaces.replace('-', '_')\n    text_without_spaces = text_without_spaces.replace('.', '_')\n    return text_without_spaces\n    \ndef split_sentence_by_newline(text):\n    '''\n    Write a function that takes in a string of text and splits it into separate sentences.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef split_sentence_by_newline_and_spaces(text):\n    '''\n    Write a function that takes in a string of text and splits it into separate sentences.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef remove_stopwords(text):\n    '''\n    Write a function that takes in a string of text and removes stopwords from it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('_','')\n    return text.split(' ')\n    \ndef extract_words_from_text(text):\n    '''\n    Write a function that takes in a string of text and returns a list of words from it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return text.split()\n    \ndef get_number_of_words(text):\n    '''\n    Write a function that takes in a string of text and returns the number of words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef get_percentage_of_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of words in it, and returns the percentage of the words.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return (len(text.split()) / num) * 100\n    \ndef count_number_of_total_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of total words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split()) / num\n    \ndef count_number_of_words(text, num):\n    '''\n    Write a function that takes in a string of text and the number of words in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_symbols(text, num):\n    '''\n    Write a function that takes in a string of text and the number of symbols in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_numbers(text, num):\n    '''\n    Write a function that takes in a string of text and the number of numbers in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    return len(text.split())\n    \ndef count_number_of_whitespaces(text):\n    '''\n    Write a function that takes in a string of text and returns the number of whitespaces in it.\n    '''\n    # text = text.replace('\\n','')\n    # text = text.replace('\\t','')\n    # text = text.replace('.','')\n    # text = text.replace('!','')\n    # text = text.replace('-','')\n    # text = text.replace('\\n','')\n    # text = text.replac"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('.','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('[','_')\n    text = text.replace(']','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ','')\n    text = text.replace('  ','')\n    text = text.replace('  ','')\n    text = text.replace('  ','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_').replace('/', '_').replace('?', '_').replace(';', '_').replace('.', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\n', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','-')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # your code here\n    return text.replace(' ','_').replace('\\n','_').replace('\\t','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('-', '_').replace('.', '_').replace('!', '_').replace('?', '_').replace('\\t', '_').replace('\\n', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    num_list.append(0)\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_array = []\n    for i in num_list:\n        if i!= 0:\n            zero_array.append(i)\n    zero_array.reverse()\n    return zero_array\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # get the length of the list\n    leng = len(num_list)\n    # loop through the list\n    for i in range(leng):\n        # check if the current index is zero\n        if num_list[i] == 0:\n            # add the index to the end of the list\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp = list(num_list)\n    i = 0\n    while i < len(temp):\n        if temp[i] == 0:\n            temp.pop(i)\n        i += 1\n    return temp\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, el in enumerate(num_list):\n        if el == 0:\n            num_list.pop(index)\n            num_list.insert(index, 0)\n            \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(0)\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for element in num_list:\n        if element == 0:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index=0\n    for index in range(len(num_list)):\n        if num_list[index]==0:\n            num_list[index],num_list[index+1]=num_list[index+1],num_list[index]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while num_list.count(0) > 0:\n        num_list.remove(0)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_of_xor = 0\n    for i in range(n) : \n        for j in range(i,n) : \n            sum_of_xor += arr[i]^arr[j]\n    return sum_of_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum=0\n    for i in range(n) :\n        xor_sum+=arr[i]\n    return xor_sum\ndef main() : \n    n=int(input(\"Enter the length of the list : \"))\n    arr=[]\n    for i in range(0,n) : \n        x=int(input(\"Enter the value of x : \"))\n        arr.append(x)\n    print(\"Given list is : \",arr)\n    xor_sum=pair_xor_Sum(arr,n)\n    print(\"The sum of xor of all pairs of numbers is : \",xor_sum)\n    \nif __name__=='__main__' : \n    main()\n    "
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    if n==1 : \n        return sum\n    for i in range(0,n-1) : \n        x = arr[i]\n        y = arr[i+1]\n        sum += x ^ y \n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(0, n - 1) : \n        Sum = Sum ^ arr[i] ^ arr[i+1] \n    return Sum \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += arr[i]^arr[j]\n    return count\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # check for array\n    if not arr : \n        return 0\n    elif not n : \n        return 0\n    \n    # return the sum\n    return sum([arr[i]^arr[i+1] for i in range(n//2)])\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    num = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            num += arr[i] ^ arr[j]\n    return num\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n-1) : \n        s = s + arr[i] * arr[i+1]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    a = set(arr)\n    x = 0\n    for i in a :\n        x+=i*(i)\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    d=dict()\n    for i in range(len(arr)) : \n        x=arr[i]\n        y=arr[(i+1)%len(arr)]\n        if y in d : \n            d[y]+=x\n        else : \n            d[y]=x\n    for x in d : \n        if (x&1) : \n            if (x&1) : \n                print(x,end=\" \")\n            else : \n                print(arr[x],end=\" \")\n        else : \n            if (x&1) : \n                print(arr[x],end=\" \")\n            else : \n                print(arr[x],end=\"\\t\")\n    print()\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[l][0] < arr[i][0]:\n            largest = l\n        if r < n and arr[r][0] < arr[largest][0]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            _heapify(arr, n, largest)\n    n = len(iterable)\n    # Build minheap.\n    for i in range(n, -1, -1):\n        _heapify(iterable, n, i)\n    # Copy heap, sort, and return.\n    for i in range(n-1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        _heapify(iterable, i, 0)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        heapq.heappush(heap, i)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key = lambda x:x[1])\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = iter(iterable)\n    h = []\n    while iterable:\n        hq.heappush(h, next(iterable))\n        iterable = iter(iterable)\n    while h:\n        yield hq.heappop(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    length = len(iterable)\n    for i in range(length // 2):\n        hq.heappush(iterable, iterable.pop(length // 2 - i - 1))\n        \n    for i in range(length // 2, length):\n        hq.heappush(iterable, iterable.pop(i))\n        \n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for item in iterable:\n        l.append(item)\n    return l\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    def swap_elements(iterable, index1, index2):\n        '''\n        Swaps elements at indices index1 and index2.\n        '''\n        temp = iterable[index1]\n        iterable[index1] = iterable[index2]\n        iterable[index2] = temp\n    \n    def insert_elements(iterable, value):\n        '''\n        Inserts elements at a given position.\n        '''\n        if value == iterable[-1]:\n            return\n        index = len(iterable)\n        for i in range(len(iterable)):\n            if iterable[i] > value:\n                swap_elements(iterable, index-i, i)\n                break\n            swap_elements(iterable, i, index-i)\n        swap_elements(iterable, index, len(iterable)-1)\n        swap_elements(iterable, 0, len(iterable)-1)\n        \n    def bubble_sort(iterable):\n        '''\n        Sort the given list using bubble sort.\n        '''\n        for i in range(len(iterable)-1):\n            for j in range(len(iterable)-1-i):\n                if iterable[j] > iterable[j+1]:\n                    swap_elements(iterable, j, j+1)\n        return iterable\n    \n    def merge_sort(iterable, key):\n        '''\n        Sort a given list using merge sort.\n        '''\n        if len(iterable) <= 1:\n            return iterable\n        middle = int(len(iterable)/2)\n        left = iterable[:middle]\n        right = iterable[middle:]\n        left = merge_sort(left, key)\n        right = merge_sort(right, key)\n        \n        return merge(left, right)\n    \n    def merge(iterable, right):\n        '''\n        Sorts the given list by comparing each element and putting that element\n        into the middle of the list.\n        '''\n        if len(iterable) < 2:\n            return iterable\n        \n        middle = len(iterable)/2\n        left = iterable[:middle]\n        right = iterable[middle:]\n        \n        left_iter = merge(left, right)\n        right_iter = merge(right, left)\n        \n        merged = merge_iter(left_iter, right_iter)\n        return merged\n        \n    def merge_iter(left_iter, right_iter):\n        '''\n        Sorts the given list by comparing each element and putting that element\n        into the middle of the list.\n        '''\n        if len(left_iter) < len(right_iter):\n            left_iter = merge_iter(left_iter, right_iter)\n            right_iter = iterable\n        elif len(right_iter) < len(left_iter):\n            right_iter = merge_iter(left_iter, right_iter)\n            left_iter = iterable\n        else:\n            merged = left_iter + right_iter\n            \n        return merged\n    \n    def quick_sort(iterable, key):\n        '''\n        Sort the given list using quick sort.\n        '''\n        if len(iterable) <= 1:\n            return iterable\n        \n        pivot = iterable[0]\n        smaller_than_pivot = iterable[1:]\n        \n        left = quick_sort(smaller_than_pivot, key, 0, len(smaller_than_pivot)-1)\n        right = quick_sort(smaller_than_pivot, key, 0, len(smaller_than_pivot)-1)\n        \n        return quick_sort(left, key, 0, len(left)-1) + [pivot] + quick_sort(right, key, 0, len(right)-1)\n    \n    def selection_sort(iterable):\n        '''\n        Sort the given list using selection sort.\n        '''\n        for i in range(len(iterable)):\n            index = i\n            for j in range(i+1, len(iterable)):\n                if iterable[j] < iterable[index]:\n                    index = j\n            swap_elements(iterable, index, i)\n        return iterable\n    \n    def heap_insertion_sort(iterable):\n        '''\n        Sort the given list using heap insertion sort.\n        '''\n        for i in range(len(iterable)-1, -1, -1):\n            index = hq.heappop(hq)[1]\n            swap_elements(iterable, index, i)\n        return iterable\n    \n    def insertion_sort(iterable):\n        '''\n        Sort the given list by using insertion sort.\n        '''\n        for i in range(1, len(iterable)):\n            value = iterable[i]\n            j = i-1\n            while j >= 0 and iterable[j] > value:\n                swap_elements(iterable, j, j-1)\n                j -= 1\n            swap_elements(iterable, j, i)\n        return iterable\n    \n    def insertion_sort_insertion(iterable):\n        '''\n        Sort the given list by using insertion sort.\n        '''\n        for i in range(1, len(iterable)):\n            value = iterable[i]\n            j = i-1\n            while j >= 0 and value < iterable[j]:\n                swap_elements(iterable, j, j-1)\n                j -= 1\n            swap_elements(iterable, j, i)\n        return iterable\n    \n    def shell_sort(iterable):\n        '''\n        Sort the given list by using shell sort.\n        '''\n        for i in range(len(iterable)):\n            for j in range(len(iterable)):\n                if iterable[j] > iterable[i]:\n                    swap_elements(iterable, j, i)\n        return iterable\n    \n    def shell_sort_insertion(iterable):\n        '''\n        Sort the given list by using shell sort.\n        '''\n        for i in range(1, len(iterable)):\n            value = iterable[i]\n            j = i-1\n            while j >= 0 and value > iterable[j]:\n                swap_elements(iterable, j, j-1)\n                j -= 1\n            swap_elements(iterable, j, i)\n        return iterable\n    \n    def bubble_sort(iterable):\n        '''\n        Sort the given list by using bubble sort.\n        '''\n        for i in range(len(iterable)):\n            for j in range(len(iterable)):\n                if iterable[j] > iterable[i]:\n                    swap_elements(iterable, j, i)\n        return iterable\n    \n    def heap_bubble_sort(iterable):\n        '''\n        Sort the given list by using bubble sort.\n        '''\n        for i in range(len(iterable)):\n            for j in range(len(iterable)):\n                if iterable[j] > iterable[i]:\n                    swap_elements(iterable, j, i)\n        return iterable\n    \n    def heap_selection_sort(iterable):\n        '''\n        Sort the given list by using selection sort.\n        '''\n        for i in range(len(iterable)):\n            index = i\n            for j in range(i+1, len(iterable)):\n                if iterable[j] < iterable[index]:\n                    index = j\n            swap_elements(iterable, index, i)\n        return iterable\n    \n    def heap_selection_sort_insertion(iterable):\n        '''\n        Sort the given list by using selection sort.\n        '''\n        for i in range(len(iterable)):\n            value = iterable[i]\n            j = i-1\n            while j >= 0 and value < iterable[j]:\n                swap_elements(iterable, j, j-1)\n                j -= 1\n            swap_elements(iterable, j, i)\n        return iterable\n    \n    def heap_insertion_sort(iterable):\n        '''\n        Sort the given list by using insertion sort"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = list(iterable)\n    h = []\n    hq.heapify(l)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key = lambda x: x.value)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # Method 1: sort in-place and merge the original into the result.\n    # sort and merge the original in-place into the result\n    # time complexity: O(n^2)\n    # space complexity: O(1)\n    return sorted(iterable, key=sort_function)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost >= sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    noprofit = False \n    for i in range(len(actual_cost)):\n        if actual_cost[i] < 0 or actual_cost[i] == sale_amount:\n            noprofit = True\n            break\n    return noprofit\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    profit = actual_cost - sale_amount\n    \n    if profit < 0:\n        return True\n    \n    if profit == 0:\n        return True\n    \n    return False\n    \n    \ndef noprofit(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit\n    '''\n    \n    # profit = actual_cost - sale_amount\n    \n    profit = 0\n    \n    if noprofit_noloss(actual_cost,sale_amount) == True:\n        profit = 1\n        \n    return profit\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # TODO: complete this function\n    if sale_amount >= actual_cost:\n        return True\n    return False\n    \ndef actual_cost_noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to calculate the actual cost of the sale with the given amount.\n    \n    You can assume that the sale amount is positive and the product price is >0.\n    '''\n    # TODO: complete this function\n    return actual_cost * sale_amount\n    \ndef profit_noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to calculate the profit of the sale with the given amount.\n    \n    You can assume that the sale amount is positive and the product price is >0.\n    '''\n    # TODO: complete this function\n    if noprofit_noloss(actual_cost,sale_amount):\n        return actual_cost - actual_cost_noprofit(actual_cost,sale_amount)\n    else:\n        return actual_cost - actual_cost_noprofit(actual_cost,sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        if actual_cost[i] == 0:\n            break\n        elif actual_cost[i] < sale_amount:\n            break\n    else:\n        return \"No Profit\"\n    \n    if sale_amount == 0:\n        return \"No Loss\"\n    else:\n        return \"Profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return True\n    else:\n        return False\ndef solve_dp(f_n,g_n,w,b,c,n,m,s): \n    '''\n    Use the DP programming to find the optimal weights,b,c\n    '''\n    d = [[[0 for _ in range(m+1)]for _ in range(n+1)]for _ in range(c+1)]\n    \n    #fill the dp table \n    for i in range(n+1):\n        for j in range(m+1):\n            d[i][j][0]=f_n(w[i][j],s[i][j])\n            d[i][j][1]=g_n(w[i][j],s[i][j])\n            \n    for i in range(c+1):\n        for j in range(n+1):\n            d[i][j][0]=b[j][i]\n            d[i][j][1]=c[i]\n            d[i][j][2]=noprofit_noloss(d[i][j][0],d[i][j][1])\n    \n    return d\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<sale_amount:\n        return 'no'\n    else:\n        return 'no'\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    x = sale_amount\n    total = sum(sale_amount)\n    error = (x-total)\n    print(error)\n    if (error<0):\n        print(\"profit and loss has no profit\")\n    else:\n        print(\"profit has no profit\")\n    return\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        if actual_cost[i] > 0:\n            break\n    for j in range(len(sale_amount)):\n        if sale_amount[j] > 0:\n            break\n    if actual_cost[i] <= sale_amount[j]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    try:\n        u = v/9\n    except ZeroDivisionError:\n        u = 0\n    return (t - 32) * 100 - 35 * (u ** 0.16) + 35 * (u ** 0.59)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 5.0 + (5.0*(v/10)) + (0.62*(v**0.16)) - (0.4275*(v**0.16))\n    if c < -80:\n        return 0\n    if c >= -80 and c < -50:\n        return c + 5\n    if c >= -50 and c < -20:\n        return c + 5\n    if c >= -20 and c < -10:\n        return c + 4\n    if c >= -10 and c < -5:\n        return c + 4\n    if c >= -5 and c < -1:\n        return c + 3\n    if c >= -1 and c < 0:\n        return c + 3\n    if c >= 0 and c < 1:\n        return c + 2\n    if c >= 1 and c < 2:\n        return c + 1\n    if c >= 2 and c < 3:\n        return c + 1\n    if c >= 3 and c < 4:\n        return c + 1\n    if c >= 4 and c < 5:\n        return c + 1\n    if c >= 5 and c < 6:\n        return c + 1\n    if c >= 6 and c < 7:\n        return c + 1\n    if c >= 7 and c < 8:\n        return c + 1\n    if c >= 8 and c < 9:\n        return c + 1\n    if c >= 9 and c < 10:\n        return c + 1\n    if c >= 10 and c < 11:\n        return c + 1\n    if c >= 11 and c < 12:\n        return c + 1\n    if c >= 12 and c < 13:\n        return c + 1\n    if c >= 13 and c < 14:\n        return c + 1\n    if c >= 14 and c < 15:\n        return c + 1\n    if c >= 15 and c < 16:\n        return c + 1\n    if c >= 16 and c < 17:\n        return c + 1\n    if c >= 17 and c < 18:\n        return c + 1\n    if c >= 18 and c < 19:\n        return c + 1\n    if c >= 19 and c < 20:\n        return c + 1\n    if c >= 20 and c < 21:\n        return c + 1\n    if c >= 21 and c < 22:\n        return c + 1\n    if c >= 22 and c < 23:\n        return c + 1\n    if c >= 23 and c < 24:\n        return c + 1\n    if c >= 24 and c < 25:\n        return c + 1\n    if c >= 25 and c < 26:\n        return c + 1\n    if c >= 26 and c < 27:\n        return c + 1\n    if c >= 27 and c < 28:\n        return c + 1\n    if c >= 28 and c < 29:\n        return c + 1\n    if c >= 29 and c < 30:\n        return c + 1\n    if c >= 30 and c < 31:\n        return c + 1\n    if c >= 31 and c < 32:\n        return c + 1\n    if c >= 32 and c < 33:\n        return c + 1\n    if c >= 33 and c < 34:\n        return c + 1\n    if c >= 34 and c < 35:\n        return c + 1\n    if c >= 35 and c < 36:\n        return c + 1\n    if c >= 36 and c < 37:\n        return c + 1\n    if c >= 37 and c < 38:\n        return c + 1\n    if c >= 38 and c < 39:\n        return c + 1\n    if c >= 39 and c < 40:\n        return c + 1\n    if c >= 40 and c < 41:\n        return c + 1\n    if c >= 41 and c < 42:\n        return c + 1\n    if c >= 42 and c < 43:\n        return c + 1\n    if c >= 43 and c < 44:\n        return c + 1\n    if c >= 44 and c < 45:\n        return c + 1\n    if c >= 45 and c < 46:\n        return c + 1\n    if c >= 46 and c < 47:\n        return c + 1\n    if c >= 47 and c < 48:\n        return c + 1\n    if c >= 48 and c < 49:\n        return c + 1\n    if c >= 49 and c < 50:\n        return c + 1\n    if c >= 50 and c < 51:\n        return c + 1\n    if c >= 51 and c < 52:\n        return c + 1\n    if c >= 52 and c < 53:\n        return c + 1\n    if c >= 53 and c < 54:\n        return c + 1\n    if c >= 54 and c < 55:\n        return c + 1\n    if c >= 55 and c < 56:\n        return c + 1\n    if c >= 56 and c < 57:\n        return c + 1\n    if c >= 57 and c < 58:\n        return c + 1\n    if c >= 58 and c < 59:\n        return c + 1\n    if c >= 59 and c < 60:\n        return c + 1\n    if c >= 60 and c < 61:\n        return c + 1\n    if c >= 61 and c < 62:\n        return c + 1\n    if c >= 62 and c < 63:\n        return c + 1\n    if c >= 63 and c < 64:\n        return c + 1\n    if c >= 64 and c < 65:\n        return c + 1\n    if c >= 65 and c < 66:\n        return c + 1\n    if c >= 66 and c < 67:\n        return c + 1\n    if c >= 67 and c < 68:\n        return c + 1\n    if c >= 68 and c < 69:\n        return c + 1\n    if c >= 69 and c < 70:\n        return c + 1\n    if c >= 70 and c < 71:\n        return c + 1\n    if c >= 71 and c < 72:\n        return c + 1\n    if c >= 72 and c < 73:\n        return c + 1\n    if c >= 73 and c < 74:\n        return c + 1\n    if c >= 74 and c < 75:\n        return c + 1\n    if c >= 75 and c < 76:\n        return c + 1\n    if c >= 76 and c < 77:\n        return c + 1\n    if c >= 77 and c < 78:\n        return c + 1\n    if c >= 78 and c < 79:\n        return c + 1\n    if c >= 79 and c < 80:\n        return c + 1\n    if c >= 80 and c < 81:\n        return c + 1\n    if c >= 81 and c < 82:\n        return c + 1\n    if c >= 82 and c < 83:\n        return c + 1\n    if c >= 83 and c < 84:\n        return c + 1\n    if c >= 84 and c < 85:\n        return c + 1\n    if c >= 85 and c < 86:\n        return c + 1\n    if c >= 86 and c < 87:\n        return c + 1\n    if c >= 87 and c < 88:\n        return c + 1\n    if c >= 88 and c < 89:\n        return c + 1\n    if c >= 89 and c < 90:\n        return c + 1\n    if c >= 90 and c < 91:\n        return c + 1\n    if c >= 91 and c < 92:\n        return c + 1\n    if c >= 92 and c < 93:\n        return c + 1\n    if c >= 93 and c < 94:\n        return c + 1\n    if c >= 94 and c < 95:\n        return c + 1\n    if c >= 95 and c < 96:\n        return c + 1\n    if c >= 96 and c < 97:\n        return c + 1\n    if c >= 97 and c < 98:\n        return c + 1\n    if c >= 98 and c < 99:\n        return c + 1\n    if c >= 99 and c < 100:\n        return c + 1\n    if c >= 100 and c < 101:\n        return c + 1\n    if c >= 101 and c < 102:\n        return c + 1\n    if c >= 102 and c < 103:\n        return c + 1\n    if c >= 103 and c < 104:\n        return c + 1\n    if c >= 104 and c < 105:\n        return c + 1\n    if c >= 105 and c < 106:\n        return c + 1\n    if c >= 106 and c < 107:\n        return c + 1\n    if c >= 107 an"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 3.74\n    r = 1013.25\n    \n    x = (v*t)/k\n    z = x-r\n    if z>0:\n        c = z/(r-k)\n    else:\n        c = 0\n    return round(math.log(c+1.0,10),1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # temp = celsius_to_kelvin(temp)\n    # wind_chill_index = round(v/3.6*temp,1)\n    # return wind_chill_index\n    # we have already rounded the wind_chill_index to next integer\n    return round((v*(9.0/5.0))+32.0,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    import math\n    #wind_chill(v,t)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = v / 3.6 * (9.0 / 5.0) + 32.0\n    return round(wind_chill,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v/(v*(9.0/5.0)+32.0),1)\ndef wind_chill_temp(v,t,p,d):\n    '''\n    Calculate the wind chill index given the wind velocity, temperature and wind direction.\n    '''\n    return v*(9.0/5.0)+32.0*math.log((p/(d*v))+(1.0-p/(d*v)),10)\ndef wind_chill_direction(v,t):\n    '''\n    Calculate the wind chill index given the wind velocity and a temperature.\n    '''\n    return wind_chill(v,t)\ndef wind_chill_temp_v(v,t,p,d):\n    '''\n    Calculate the wind chill index given the wind velocity, temperature, wind direction and wind speed.\n    '''\n    return v*(9.0/5.0)+32.0*math.log((p/(d*v))+(1.0-p/(d*v)),10)\ndef wind_chill_v(v,t,p,d):\n    '''\n    Calculate the wind chill index given the wind velocity, temperature and wind direction.\n    '''\n    return v*(9.0/5.0)+32.0*math.log((p/(d*v)),10)\ndef heat_index(v,t):\n    '''\n    Return the heat index of the provided temperature in celsius.\n    '''\n    return v/(9.0*(t+32))-32\ndef heat_index_v(v,t):\n    '''\n    Return the heat index of the provided wind speed in celsius.\n    '''\n    return v/(9.0*(t+32))-32\ndef heat_index_t(t):\n    '''\n    Return the heat index of the provided temperature in celsius.\n    '''\n    return 10*(math.log(t/10.0,10))-32\ndef heat_index_d(v,t):\n    '''\n    Return the heat index of the provided wind speed and direction in degrees.\n    '''\n    return v/(9.0*(t+32))-32\ndef heat_index_temp(v,t,p,d):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_direction(v,t):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_p(p):\n    '''\n    Return the heat index of the provided wind speed in degrees.\n    '''\n    return 10*(math.log(p/(v*(9.0/5.0)),10))-32\ndef heat_index_delta(v,t,p,d):\n    '''\n    Return the heat index of the provided wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_temp_p(v,t,p,d):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_temp_v(v,t,p,d):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_v_p(p,v):\n    '''\n    Return the heat index of the provided wind speed and direction in degrees.\n    '''\n    return 10*(math.log(p/(v*(9.0/5.0)),10))-32\ndef heat_index_v_d(d,v):\n    '''\n    Return the heat index of the provided wind speed and direction in degrees.\n    '''\n    return 10*(math.log(d/(v*(9.0/5.0)),10))-32\ndef heat_index_p_v(p,v,t):\n    '''\n    Return the heat index of the provided wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(p/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_delta_v(v,t,p,d):\n    '''\n    Return the heat index of the provided wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_temp_p_v(v,t,p,d):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_temp_d(d,t,p,v):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(d/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_direction_v(v,t):\n    '''\n    Return the heat index of the provided wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)),10))-32\ndef heat_index_p_d(d):\n    '''\n    Return the heat index of the provided wind speed and direction in degrees.\n    '''\n    return 10*(math.log(d/(v*(9.0/5.0)),10))-32\ndef heat_index_temp_delta_v(d,t,p,d):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(d/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_p_delta(d,t,p,v):\n    '''\n    Return the heat index of the provided wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(d/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_direction_v_p(v,t):\n    '''\n    Return the heat index of the provided wind speed and direction in degrees.\n    '''\n    return 10*(math.log(v/(v*(9.0/5.0)),10))-32\ndef heat_index_p_v_p(p,v):\n    '''\n    Return the heat index of the provided wind speed and direction in degrees.\n    '''\n    return 10*(math.log(p/(v*(9.0/5.0)),10))-32\ndef heat_index_delta_p_v(p,v,t):\n    '''\n    Return the heat index of the provided wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(p/(v*(9.0/5.0)+32.0),10))-32\ndef heat_index_temp_p_v(p,v,t,d):\n    '''\n    Return the heat index of the provided temperature and wind speed and direction and wind speed and direction in degrees.\n    '''\n    return 10*(math.log(p/(v*(9.0/5.0)+32.0),10))-3"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 2.5 * math.log((v/3.6) / (v*1.8 + 0.23)) + 35.75\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    k = v*9/5 + 32\n    x = (b*t) - (m*(k-x))\n    return int(round(x,0))\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed (km/h) and a temperature in celsius.\n    '''\n    s = v * 9/5 + 32\n    t = (t - 273.15)\n    return int(round(s,0)), int(round(t,0))\ndef wind_direction(v,t):\n    '''\n    Write a function to calculate the wind direction (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_speed_gain(v,t):\n    '''\n    Write a function to calculate the wind speed gain (km/h) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    k = v*9/5 + 32\n    x = (b*t) - (m*(k-x))\n    return int(round((x/c),0))\ndef wind_direction_gain(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_direction_gain_distance(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    k = v*9/5 + 32\n    x = (b*t) - (m*(k-x))\n    return math.sqrt(((x-c)**2)+((x-c)**2))\ndef wind_dir_gain_distance(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    k = v*9/5 + 32\n    x = (b*t) - (m*(k-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_distance(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.sqrt(((x-c)**2)+((x-c)**2))\ndef wind_dir_gain_directions_distance(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_directions(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    k = v*9/5 + 32\n    x = (b*t) - (m*(k-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_distance(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_distance(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_directions(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_distance(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    x = (b*t) - (m*(c-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_directions(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and a temperature in celsius.\n    '''\n    c = 5.74\n    m = 1.8\n    b = 35.74\n    k = v*9/5 + 32\n    x = (b*t) - (m*(k-x))\n    return math.degrees(math.acos(math.cos(x) * math.cos(x) + math.sin(x) * math.sin(x) * math.sin(x)))\ndef wind_dir_gain_directions_directions(v,t):\n    '''\n    Write a function to calculate the wind direction gain (radians) and "
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert to float\n    v_km_h = round(v/3.6,1)\n    # assign the temperature\n    t_celsius = t\n    # convert temperature\n    t_k = (t_celsius - 32.0) * (5.0 / 9.0)\n    # calculate wind chill\n    return (9.0/5.0 * v_km_h + 32.0) * (math.log(v_km_h / (v_km_h + t_k)))\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return len(sample_names.lower().strip().split())\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name.lower()[0] == 'a')\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # my_list = ['aaron','rachel','jan','carla','sue','daniel','luke','daniel','luke','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','daniel','danie"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_names = []\n    for name in sample_names:\n        if name[0].islower():\n            new_names.append(name)\n    return new_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name.startswith('a'):\n            names.append(name[1:])\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # YOUR CODE HERE\n    def sum_nam(sample_names):\n        for name in sample_names:\n            if name[0].isupper():\n                sample_names.remove(name)\n            if len(name) < 2:\n                sample_names.remove(name)\n        return len(sample_names)\n    return sum_nam(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name.split(' ')[0].split('.')[0].split('_')) for name in sample_names if name.split(' ')[0].split('.')[0].lower() not in ['chr','geno']])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return [len(name.strip().lower()) for name in sample_names if name.strip().lower().startswith('a')]\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # TODO\n    # Implement this function\n    pass"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    samp_list = []\n    for i in range(len(sample_names)):\n        if sample_names[i][0] == 'A':\n            samp_list.append(sample_names[i])\n    samp_list.sort()\n    return sum(len(sample_names[i]) for i in samp_list)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) < 3:\n        return items\n    else:\n        return remove_parenthesis(items[1:]) + remove_parenthesis(items[0:-1])\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    for x in items:\n        if x!= '(' and x!= ')' and x!= '{' and x!= '}' and x!= '[' and x!= ']':\n            s += x\n    return s\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #Examples\n    #>>> remove_parenthesis(\"((2+3)*4)\")\n    #'(2+3)*4'\n    #>>> remove_parenthesis(\"((2+3)*4)+5\")\n    #'(2+3)*4+5'\n    #>>> remove_parenthesis(\"(1+2+3)-4\")\n    #'(1+2+3)-4'\n    #>>> remove_parenthesis(\"((1+2+3)-4)-((2+3)*4)\")\n    #'((1+2+3)-4)-((2+3)*4)'\n    #>>> remove_parenthesis(\"(1+2+3)-4(5+6)-7-8\")\n    #'(1+2+3)-4(5+6)-7-8'\n    #>>> remove_parenthesis(\"(1+2+3)-4(5+6)-7-8(5+6)-(9-8)\")\n    #'(1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'(1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'(1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(1+2+3)-4(5+6)-7-8(5+6)-(9-8)-)\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)-)'\n    #>>> remove_parenthesis(\"(1+2+3)-4(5+6)-7-8(5+6)-(9-8)-(10-8)\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)-(10-8)\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'(1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((((1+2+3)-4)(5+6)-7-8)8))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)'\n    #>>> remove_parenthesis(\"(((((((((((((((((1+2+3)-4)(5+6)-7-8)8)))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)\n    #>>> remove_parenthesis(\"(((((((((((((((((1+2+3)-4)(5+6)-7-8)8)))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)\n    #>>> remove_parenthesis(\"(((((((((((((((((((1+2+3)-4)(5+6)-7-8)8)))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)\n    #>>> remove_parenthesis(\"(((((((((((((((((((1+2+3)-4)(5+6)-7-8)8)))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)\n    #>>> remove_parenthesis(\"(((((((((((((((((1+2+3)-4)(5+6)-7-8)8)))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)\n    #>>> remove_parenthesis(\"(((((((((((((((((1+2+3)-4)(5+6)-7-8)8)))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)-(9-8)\n    #>>> remove_parenthesis(\"(((((((((((((((((((1+2+3)-4)(5+6)-7-8)8)))))))))))))\")\n    #'1+2+3)-4(5+6)-7-8(5+6)"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    removed = []\n    i = 0\n    while i < len(items):\n        if items[i] == '(':\n            removed.append(i)\n            i = i + 1\n            i = i + 1\n        elif items[i] == ')':\n            removed.append(i)\n            i = i + 1\n            i = i + 1\n        i = i + 1\n    return removed\ndef remove_paren(items):\n    '''\n    Write a function to remove the parentheses from a string.\n    '''\n    removed = []\n    i = 0\n    while i < len(items):\n        if items[i] == '(':\n            removed.append(i)\n            i = i + 1\n            i = i + 1\n        elif items[i] == ')':\n            removed.append(i)\n            i = i + 1\n            i = i + 1\n        i = i + 1\n    return removed\ndef check_parentheses(items):\n    '''\n    Write a function to check if the parentheses are present or not.\n    '''\n    check_stack = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            check_stack.append(i)\n        elif items[i] == ')':\n            if len(check_stack) == 0:\n                return False\n            i = check_stack.pop()\n            if items[i] == '(':\n                check_stack.append(i)\n                check_stack.append(i)\n            else:\n                check_stack.append(i)\n    return len(check_stack) == 0\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        if i[0] == '(' and i[-1] == ')':\n            pass\n        else:\n            items[items.index(i)] = i[1:-1]\n    return items\ndef calc_grade(grade):\n    '''\n    Write a function to calculate the grade a student receives.\n    '''\n    if grade == 'A+':\n        return 5\n    elif grade == 'A':\n        return 4\n    elif grade == 'A-':\n        return 3\n    elif grade == 'B+':\n        return 2\n    elif grade == 'B':\n        return 1\n    elif grade == 'B-':\n        return -1\n    elif grade == 'C+':\n        return 0\n    elif grade == 'C':\n        return -1\n    elif grade == 'C-':\n        return -2\n    elif grade == 'D+':\n        return -3\n    elif grade == 'D':\n        return -2\n    elif grade == 'D-':\n        return -3\n    elif grade == 'F':\n        return -4\n    elif grade == 'F-':\n        return -3\n    elif grade == 'O':\n        return -3\ndef get_grade(grade):\n    '''\n    Write a function that takes a grade, either A, B or C,\n    and returns the corresponding integer grade.\n    '''\n    if grade == 'A':\n        return 5\n    elif grade == 'B':\n        return 4\n    elif grade == 'C':\n        return 3\n    elif grade == 'D':\n        return 2\n    elif grade == 'E':\n        return 1\n    elif grade == 'F':\n        return -1\n    elif grade == 'G':\n        return -2\ndef get_name(name):\n    '''\n    Write a function that takes a name, either 'John' or 'Beth' and returns the corresponding string.\n    '''\n    if name == 'John':\n        return 'John'\n    elif name == 'Beth':\n        return 'Beth'\n    elif name == 'Ana':\n        return 'Ana'\n    elif name == 'Bob':\n        return 'Bob'\n    elif name == 'Carol':\n        return 'Carol'\n    elif name == 'Dan':\n        return 'Dan'\n    elif name == 'Hailey':\n        return 'Hailey'\n    elif name == 'Sarah':\n        return 'Sarah'\ndef get_class(class_name):\n    '''\n    Write a function that takes a name and returns the corresponding class.\n    '''\n    if class_name == 'A':\n        return 'Economy'\n    elif class_name == 'B':\n        return 'Medium'\n    elif class_name == 'C':\n        return 'Strict'\n    elif class_name == 'D':\n        return 'Very Hard'\n    elif class_name == 'F':\n        return 'Hard'\n    elif class_name == 'G':\n        return 'Easy'\n    elif class_name == 'H':\n        return 'Very Hard'\n    elif class_name == 'I':\n        return 'Hard'\n    elif class_name == 'J':\n        return 'Very Hard'\n    elif class_name == 'K':\n        return 'Hard'\n    elif class_name == 'L':\n        return 'Easy'\n    elif class_name == 'M':\n        return 'Hard'\n    elif class_name == 'N':\n        return 'Easy'\n    elif class_name == 'O':\n        return 'Hard'\n    elif class_name == 'P':\n        return 'Easy'\n    elif class_name == 'R':\n        return 'Hard'\n    elif class_name == 'S':\n        return 'Easy'\n    elif class_name == 'T':\n        return 'Hard'\n    elif class_name == 'U':\n        return 'Easy'\n    elif class_name == 'V':\n        return 'Hard'\n    elif class_name == 'W':\n        return 'Hard'\n    elif class_name == 'X':\n        return 'Easy'\n    elif class_name == 'Y':\n        return 'Hard'\n    elif class_name == 'Z':\n        return 'Hard'\n    elif class_name == '_':\n        return 'Hard'\ndef get_subject(subject_name):\n    '''\n    Write a function that takes a name and returns the corresponding string.\n    '''\n    if subject_name == 'C':\n        return 'Computing'\n    elif subject_name == 'D':\n        return 'Digital'\n    elif subject_name == 'E':\n        return 'Engineering'\n    elif subject_name == 'F':\n        return 'Finance'\n    elif subject_name == 'G':\n        return 'Gaming'\n    elif subject_name == 'H':\n        return 'Humanities'\n    elif subject_name == 'I':\n        return 'Information Science'\n    elif subject_name == 'J':\n        return 'Software Engineering'\n    elif subject_name == 'K':\n        return 'Information Science'\n    elif subject_name == 'L':\n        return 'Software Engineering'\n    elif subject_name == 'M':\n        return 'Automatist'\n    elif subject_name == 'N':\n        return 'Auto Systems'\n    elif subject_name == 'O':\n        return 'Automatist'\n    elif subject_name == 'P':\n        return 'Automatist'\n    elif subject_name == 'R':\n        return 'Automatist'\n    elif subject_name == 'S':\n        return 'Automatist'\n    elif subject_name == 'T':\n        return 'Automatist'\n    elif subject_name == 'U':\n        return 'Automatist'\n    elif subject_name == 'V':\n        return 'Automatist'\n    elif subject_name == 'W':\n        return 'Automatist'\n    elif subject_name == 'X':\n        return 'Automatist'\n    elif subject_name == 'Y':\n        return 'Automatist'\n    elif subject_name == 'Z':\n        return 'Automatist'\n    else:\n        return subject_name\ndef get_subjects(subjects_list):\n    '''\n    Write a function that takes a list of subjects and returns the corresponding strings.\n    '''\n    for i in subjects_list:\n        if i == 'C':\n            return 'Computing'\n        elif i == 'D':\n            return 'Digital'\n        elif i == 'E':\n            return 'Engineering'\n        elif i == 'F':\n            return 'Finance'\n        elif i == 'G':\n            return 'Gaming'\n        elif i == 'H':\n            return 'Humanities'\n        elif i == 'I':\n            return 'Information Science'\n        elif i == 'J':\n            return 'Software Engineering'\n        elif i == 'K':\n            return 'Information Science'\n        elif i == 'L':\n            return 'Software Engineering'\n        elif i == 'M':\n            return 'Automatist'\n        elif i == 'N':\n            return 'Automatist'\n        elif i == 'O':\n            return 'Automatist'\n        elif i == 'P':\n            return 'Automatist'\n        elif i == 'R':\n            return 'Automatist'\n        elif i == 'S':\n            return 'Automatist'\n        elif i == 'T':\n            return 'Automatist'\n        elif i == 'U':\n            return 'Automatist'\n        elif i == 'V':\n            return 'Automatist'\n        elif i == 'W':\n            return 'Automatist'\n        elif i == 'X':\n            return 'Automatist'\n        elif i == 'Y':\n            return 'Automatist'\n        elif i == 'Z':\n            return 'Automatist'\n    \ndef get_words(words_list):\n    '''\n    Write a function that takes a list of words and returns the corresponding strings.\n    '''\n    for i in words_list:\n        if i == 'R':\n            return 'Au"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_regex = re.compile('([(])')\n    for item in items:\n        sub_item = parenthesis_regex.sub(r'\\1\\2',item)\n        items[items.index(item)] = sub_item\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join(i for i in items if not i == '(')\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item[0] == '(' or item[-1] == ')':\n            result.append(item)\n        elif item[0]!= '(' and item[-1]!= ')':\n            result.append(item)\n    return result\ndef remove_paren_clauses(clauses):\n    '''\n    Write a function to remove the parentheses from a list of clauses.\n    '''\n    new_clauses = []\n    for clause in clauses:\n        new_clauses.append(remove_paren_clause(clause))\n    return new_clauses\ndef remove_paren_clause(clause):\n    '''\n    Write a function to remove the parentheses from a clause.\n    '''\n    if clause[0] == '(':\n        clause = clause[1:]\n    elif clause[-1] == ')':\n        clause = clause[:-1]\n    return clause\ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets from a list of items.\n    '''\n    result = []\n    for item in items:\n        if item[0] == '{' and item[-1] == '}':\n            result.append(item)\n        elif item[0] == '[' and item[-1] == ']':\n            result.append(item)\n    return result\ndef check_brackets(clauses):\n    '''\n    Write a function to check whether the parentheses are balanced.\n    '''\n    for clause in clauses:\n        if len(clause) == 1:\n            continue\n        else:\n            opening_brackets = 0\n            for opening_bracket in clause:\n                if opening_bracket == '(':\n                    opening_brackets += 1\n                elif opening_bracket == ')':\n                    opening_brackets -= 1\n                if opening_brackets == 0:\n                    break\n            if len(clause)!= opening_brackets:\n                return False\n    return True\ndef remove_idxs(clause):\n    '''\n    Write a function to remove the index of a cluster.\n    '''\n    if '(' in clause and ')' in clause:\n        return clause.index('('), clause.index(')')\n    elif ')' in clause:\n        return clause.index(')'), clause.index(')')\n    elif '(' in clause:\n        return clause.index('('), clause.index(')')\n    else:\n        return -1\ndef parse_clauses(clauses):\n    '''\n    Write a function to parse clauses from a string.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(remove_paren_clauses(clause))\n    return result\ndef get_parent(index, clauses):\n    '''\n    Write a function to get the parent of the index given a list of clauses.\n    '''\n    if index == len(clauses):\n        return clauses[0]\n    else:\n        clause = clauses[index]\n        return get_parent(remove_idxs(clause), clauses)\ndef parse_clauses_clauses(clauses):\n    '''\n    Write a function to parse clauses from a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(remove_paren_clauses(clause))\n    return result\ndef get_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_set_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_combination_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append('(' + clause + ')')\n    return result\ndef get_set_combinations_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append('(' + clause + ')')\n    return result\ndef get_set_combinations(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_set_combinations_clauses_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_paren_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_parent_combinations_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_set_parent_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_set_combinations_parent(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for clause in clauses:\n        if clause[0] == '(':\n            clause = clause[1:]\n        elif clause[-1] == ')':\n            clause = clause[:-1]\n        result.append(clause)\n    return result\ndef get_set_combinations_parent_clauses(clauses):\n    '''\n    Write a function to get clauses given a list of clauses.\n    '''\n    result = []\n    for claus"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_regex = re.compile('(.)([A-Z][a-z]+)')\n    \n    # Remove the parenthesis\n    new_items = re.sub(parenthesis_regex, r' \\1 ', str(items))\n    \n    # Remove the parenthesis and what is inbetween them\n    new_items = re.sub('(.)\\1+', r' \\1 ', str(new_items))\n    \n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = str(items)\n    first_index = items.find('(')\n    last_index = items.find(')')\n    if first_index > -1 and last_index > -1:\n        return items[first_index+1:last_index]\n    else:\n        return items\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x=1\n    for i in range(1, n+1):\n        if (i % (n+1) == 0):\n            x = x * i\n    return x\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i<n:\n        if n%i == 0:\n            sum+=i\n        if n%j == 0:\n            sum+=j\n        i+=1\n        j+=1\n    if n > sum:\n        return n\n    else:\n        return is_nonagonal(int(sum/2))\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return is_nonagonal(n - 2) + is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 4:\n        return -1\n    return 3*(n%4)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        for j in range(n-i-1):\n            if n%(i+2*j) == 0:\n                return i+j+2*j\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    cnt = 0\n    for i in range(n):\n        if i!= n-1 and n % 2 == 0:\n            cnt += 1\n        else:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 4\n    if n == 4: \n        return 6\n    if n == 5: \n        return 7\n    if n == 6: \n        return 8\n    if n == 7: \n        return 9\n    if n == 8: \n        return 10\n    if n == 9: \n        return 11\n    if n == 10: \n        return 12\n    if n == 11: \n        return 13\n    if n == 12: \n        return 14\n    if n == 13: \n        return 15\n    if n == 14: \n        return 16\n    if n == 15: \n        return 17\n    if n == 16: \n        return 18\n    if n == 17: \n        return 19\n    if n == 18: \n        return 20\n    if n == 19: \n        return 21\n    if n == 20: \n        return 22\n    if n == 21: \n        return 23\n    if n == 22: \n        return 24\n    if n == 23: \n        return 25\n    if n == 24: \n        return 26\n    if n == 25: \n        return 27\n    if n == 26: \n        return 28\n    if n == 27: \n        return 29\n    if n == 28: \n        return 30\n    if n == 29: \n        return 31\n    if n == 30: \n        return 32\n    if n == 31: \n        return 33\n    if n == 32: \n        return 34\n    if n == 33: \n        return 35\n    if n == 34: \n        return 36\n    if n == 35: \n        return 37\n    if n == 36: \n        return 38\n    if n == 37: \n        return 39\n    if n == 38: \n        return 40\n    if n == 39: \n        return 41\n    if n == 40: \n        return 42\n    if n == 41: \n        return 43\n    if n == 42: \n        return 44\n    if n == 43: \n        return 45\n    if n == 44: \n        return 46\n    if n == 45: \n        return 47\n    if n == 46: \n        return 48\n    if n == 47: \n        return 49\n    if n == 48: \n        return 50\n    if n == 49: \n        return 51\n    if n == 50: \n        return 52\n    if n == 51: \n        return 53\n    if n == 52: \n        return 54\n    if n == 53: \n        return 55\n    if n == 54: \n        return 56\n    if n == 55: \n        return 57\n    if n == 56: \n        return 58\n    if n == 57: \n        return 59\n    if n == 58: \n        return 60\n    if n == 59: \n        return 61\n    if n == 60: \n        return 62\n    if n == 61: \n        return 63\n    if n == 62: \n        return 64\n    if n == 63: \n        return 65\n    if n == 64: \n        return 66\n    if n == 65: \n        return 67\n    if n == 66: \n        return 68\n    if n == 67: \n        return 69\n    if n == 68: \n        return 70\n    if n == 69: \n        return 71\n    if n == 70: \n        return 72\n    if n == 71: \n        return 73\n    if n == 72: \n        return 74\n    if n == 73: \n        return 75\n    if n == 74: \n        return 76\n    if n == 75: \n        return 77\n    if n == 76: \n        return 78\n    if n == 77: \n        return 79\n    if n == 78: \n        return 80\n    if n == 79: \n        return 81\n    if n == 80: \n        return 82\n    if n == 81: \n        return 83\n    if n == 82: \n        return 84\n    if n == 83: \n        return 85\n    if n == 84: \n        return 86\n    if n == 85: \n        return 87\n    if n == 86: \n        return 88\n    if n == 87: \n        return 89\n    if n == 88: \n        return 90\n    if n == 89: \n        return 91\n    if n == 90: \n        return 92\n    if n == 91: \n        return 93\n    if n == 92: \n        return 94\n    if n == 93: \n        return 95\n    if n == 94: \n        return 96\n    if n == 95: \n        return 97\n    if n == 96: \n        return 98\n    if n == 97: \n        return 99\n    if n == 98: \n        return 100\n    if n == 99: \n        return 101\n    if n == 100: \n        return 102\n    if n == 101: \n        return 103\n    if n == 102: \n        return 104\n    if n == 103: \n        return 105\n    if n == 104: \n        return 106\n    if n == 105: \n        return 107\n    if n == 106: \n        return 108\n    if n == 107: \n        return 109\n    if n == 108: \n        return 110\n    if n == 109: \n        return 111\n    if n == 110: \n        return 112\n    if n == 111: \n        return 113\n    if n == 112: \n        return 114\n    if n == 113: \n        return 115\n    if n == 114: \n        return 116\n    if n == 115: \n        return 117\n    if n == 116: \n        return 118\n    if n == 117: \n        return 119\n    if n == 118: \n        return 120\n    if n == 119: \n        return 121\n    if n == 120: \n        return 122\n    if n == 121: \n        return 123\n    if n == 122: \n        return 124\n    if n == 123: \n        return 125\n    if n == 124: \n        return 126\n    if n == 125: \n        return 127\n    if n == 126: \n        return 128\n    if n == 127: \n        return 129\n    if n == 128: \n        return 130\n    if n == 129: \n        return 131\n    if n == 130: \n        return 132\n    if n == 131: \n        return 133\n    if n == 132: \n        return 134\n    if n == 133: \n        return 135\n    if n == 134: \n        return 136\n    if n == 135: \n        return 137\n    if n == 136: \n        return 138\n    if n == 137: \n        return 139\n    if n == 138: \n        return 140\n    if n == 139: \n        return 141\n    if n == 140: \n        return 142\n    if n == 141: \n        return 143\n    if n == 142: \n        return 144\n    if n == 143: \n        return 145\n    if n == 144: \n        return 146\n    if n == 145: \n        return 147\n    if n == 146: \n        return 148\n    if n == 147: \n        return 149\n    if n == 148: \n        return 150\n    if n == 149: \n        return 151\n    if n == 150: \n        return 152\n    if n == 151: \n        return 153\n    if n == 152: \n        return 154\n    if n == 153: \n        return 155\n    if n == 154: \n        return 156\n    if n == 155: \n        return 157\n    if n == 156: \n        return 158\n    if n == 157: \n        return 159\n    if n == 158: \n        return 160\n    if n == 159: \n        return 161\n    if n == 160: \n        return 162\n    if n == 161: \n        return 163\n    if n == 162: \n        return 164\n    if n == 163: \n        return 165\n    if n == 164: \n        return 166\n    if n == 165: \n        return 167\n    if n == 166: \n        return 168\n    if n == 167: \n        return 169"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n-1\n    result = n * (n+1) // 2\n    if (n*n) % 2 == 0:\n        result = result -1\n    return result\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    l = [0, 1] \n    r = [n - 1, n] \n    if n == 1: \n        return l[0] \n    elif n == 2: \n        return l[1] + r[0] \n    else: \n        while r[0] <= n: \n            l.append(l[r[0] - 2] + r[0]) \n            r.append(r[0] - 1) \n        return l[-1]"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(0, n, 2):\n        if (i + 1) % 2 == 0:\n            return True\n        else:\n            return False\n        \n    "
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0]=='z'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle start of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_middle_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_end_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_middle_middle_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_end_middle_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_end_middle_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return True\n    return False\ndef text_match_wordz_end_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_middle_middle_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    if re.search(\"[^a-z]z\",text):\n        return False\n    return True\ndef text_match_wordz_end"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('z')\n    result = pattern.search(text)\n    if result!= None:\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #Convert each word into a list and if contains z, return true\n    word_list=[]\n    for word in text.split(\" \"):\n        word_list.append(word)\n        if word[-1]!= 'z':\n            return False\n    #Create list of words in text\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.match(r'[A-Z]+', text)\n    if m == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_start = text[:text.find('z')]\n    text_end = text[text.find('z') + 1:]\n    return text_start == text_end\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return (text.count('z')!= 1) and (text.count('Z')!= 1)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #example:\n    #- text = \"this is a very long text\"\n    #result: True\n    #example:\n    #- text = \"this is a very long text\"\n    #result: True\n    #example:\n    #- text = \"this is a very long text\"\n    #result: False\n    #example:\n    #- text = \"this is a very long text\"\n    #result: False\n    #example:\n    #- text = \"this is a very long text\"\n    #result: False\n    #example:\n    #- text = \"this is a very long text\"\n    #result: False\n    if len(text)==2 and text[0]=='z':\n        return True\n    elif len(text)==1 and text[0]=='z':\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if not text.startswith('z'):\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[0] == 'z'\n    return True\n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[1] == 'z'\n    return True\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_end_middle(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_start_middle(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_start_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_end_middle(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if len(text) > 1:\n        return not text[-1] == 'z' and not text[-2] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_start_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_start_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text[0] == 'z' and not text[-1] == 'z'\n    return True\n    \ndef text_match_wordz_middle_middle_start_middle_end_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if len(text) > 1:\n        return not text"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1][:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # if the array is empty or empty, return nothing\n    if input == None or len(input) == 0:\n        return []\n    \n    # check if the array is sorted\n    if is_sorted(input):\n        # if the array is sorted return nothing\n        return input\n    \n    # if the array is not sorted then reverse the array. \n    else:\n        # reverse the elements of the array upto the given position \n        # by swapping the first and last elements\n        output = [input[0]] + reverse_Array_Upto_K(input[1:],k)\n        # return reversed result\n        return output\n    \ndef is_sorted(input):\n    '''\n    Write a python function to check whether an array is sorted.\n    '''\n    # if the array is unsorted or sorted return false\n    if len(input) < 2:\n        return True\n    \n    # if the array has only one element\n    if len(input) <= 1:\n        # return false\n        return False\n    \n    # get the first element\n    first_element = input[0]\n    \n    # if the first element of the array is larger than the next element\n    if first_element > input[1]:\n        # if the array has more than one element\n        return False\n    \n    # if the first element of the array is the same as the next element\n    if first_element == input[1]:\n        # return false\n        return False\n    \n    # if the first element of the array is smaller than the next element\n    return is_sorted(input[1:])\n    \n    \ndef main():\n    # read the array elements\n    arr = [int(x) for x in input().strip().split()]\n    \n    # get the length of the array\n    n = len(arr)\n    \n    # reverse the array\n    arr = reverse_Array_Upto_K(arr, n)\n    \n    # output the result\n    print(*arr)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev = []\n    for i in range(len(input)):\n        rev.append(input[i])\n    for i in range(k-1):\n        rev.append(rev[i])\n    for i in range(len(rev)):\n        rev[i] = rev[i] * -1\n    return rev\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #Define a 2D array\n    array=[[0 for i in range(k)] for j in range(len(input))]\n    #Loop through all the values in the array\n    for i in range(len(input)):\n        array[i][k-1] = input[i]\n    return array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code here \n    input.reverse()\n    \n    for i in range(0,len(input)):\n        if (i < len(input) - k):\n            input[i + (len(input) - k)] = input[i + (len(input) - k)]\n    \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n    return reverse\n    \ndef reverse_Array_Upto_K2(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i+k-1])\n    return reverse\n    \ndef reverse_Array_Upto_K_List(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    output = []\n    for i in range(len(input)-k):\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_Swap(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    output = []\n    for i in range(len(input)-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_Loop(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n    for i in range(count-k):\n        output.append(reverse[i])\n    return output\n    \ndef reverse_Array_Upto_K_One(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n    for i in range(count-k, count):\n        output.append(reverse[i])\n    return output\n    \ndef reverse_Array_Upto_K_Swap_Loop(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    output = []\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_Swap_One(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k, count):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_One_Swap_Loop(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k, count):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_One_Swap_One(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_List_Swap_Loop(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    output = []\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k, count):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_List_Swap_One(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    output = []\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k, count):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_List_One_Swap_Loop(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    output = []\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k, count):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    return output\n    \ndef reverse_Array_Upto_K_List_One_Swap_One(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return None\n    reverse = input[::-1]\n    output = []\n    count = len(input)\n    for i in range(count//k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k):\n        output.append(reverse[i])\n        output.append(reverse[i+k-1])\n    for i in range(count-k, count):"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    for i in range(k): \n        temp = input[i] \n        temp_index = i \n        for j in range(i, length): \n            input[j] = input[j + 1] \n            temp = input[j] \n            temp_index = j \n        input[i] = temp \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(k > len(input)): \n        print(\"invalid k\") \n    else: \n        output = [] \n        for i in range(len(input) - k + 1): \n            output.append(input[i]) \n        output.reverse() \n        for i in range(len(output)): \n            print(\"%d\" % output[i], end=\" \") \n        print()\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        output = []\n        for i in range(len(input) - k):\n            output.append(input[i])\n        output[len(output) - k:len(output)] = input[i+k:]\n        return output\n    \n    \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) == 0:\n        return None\n    if k >= len(input):\n        return None\n    output = []\n    for i in range(len(input)):\n        output.append(input[i])\n        if i <= k-1:\n            output[-1] = input[i]\n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if test_dict.keys()!= test_tup.keys():\n        raise Exception('Keys must match!')\n    for key in test_dict.keys():\n        if key in test_tup.keys():\n            test_tup[key].extend(test_dict[key])\n        else:\n            test_tup[key] = test_dict[key]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if key in test_tup:\n            test_tup[key].append(test_dict[key])\n        else:\n            test_tup[key] = test_dict[key]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # print(type(test_tup))\n    # print(type(test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict)!= dict or len(test_dict) == 0:\n        return None\n    for key, val in test_dict.items():\n        if type(val)!= tuple or len(val) == 0:\n            return None\n        test_tup = test_tup + (key,) + val\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Your code here\n    test_tup=tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup=test_tup+(key, value)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    # Add the dictionary to the tuple\n    test_tup = tuple(test_tup)\n    test_dict = test_dict.items()\n    \n    # Add the tuple to the dict\n    test_dict = test_dict[0] + test_tup\n    \n    return test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    if isinstance(test_dict, dict):\n        return type(test_dict) is dict\n    else:\n        raise TypeError(f\"{test_dict} is not a dict.\")\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (key, test_dict[key])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_dict['col_1'], test_dict['col_2'], test_dict['col_3'], test_dict['col_4'], test_dict['col_5'])\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    ans = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            ans += cost[i][j]/cost[i][j][2]\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    path = [x for x in cost if x!= None]\n    path = sorted(path, key=lambda x: x[1])\n    path = list(reversed(path))\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    \n    # Create a list of all unique cells visited, sort it in descending order\n    visitedCells = sorted(set([cell for row in cost for cell in row]))\n    # The index of the cell we just visited\n    index = -1\n    # The current cell\n    current = 0\n    # The path\n    path = []\n    # The minimum path value\n    minPath = float(\"inf\")\n    # The maximum path value\n    maxPath = -float(\"inf\")\n    \n    # Run the DFS for each cell in the path\n    for cell in visitedCells:\n        # If we have not visited that cell, we just use the previous cell as a starting point\n        if index!= cell:\n            # We move one cell right at a time\n            while current!= index:\n                # The cell we just visited\n                current = visitedCells[current]\n                # The path\n                path.append(current)\n                # The minimum path value\n                minPath = min(minPath, cost[current][0])\n                # The maximum path value\n                maxPath = max(maxPath, cost[current][1])\n            # We reset the previous cell and start again\n            index = cell\n        # We stop when we have visited the cell we just visited\n        else:\n            # The path\n            path.append(index)\n            # The minimum path value\n            minPath = min(minPath, cost[index][0])\n            # The maximum path value\n            maxPath = max(maxPath, cost[index][1])\n    # Return the average path and the minimum path\n    return (minPath, maxPath)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    else:\n        return cost[0][0] / N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    \n    visited = [[0 for i in range(N)] for j in range(N)]\n    answer = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    path = []\n    for row in cost:\n        for col in row:\n            if col!= 0:\n                path.append([col, row.index(col)])\n    path.sort(key = lambda item: item[1])\n    return [path[-1][0], sum(map(lambda path: cost[path[-1][1]][path[-1][0]], path[:-1])) / len(cost)]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def getAverage(path):\n        totalCost = 0\n        for i in path:\n            totalCost += i[1]\n        return totalCost/len(path)\n    \n    #initialize a list of tuples for each cell's path\n    path = []\n    #create a for loop for each cell's path\n    for i in range(len(cost)):\n        #calculate totalCost of current cell\n        totalCost = cost[i][1]\n        #add to a tuple of (currentCell, totalCost)\n        path.append((cost[i][0],totalCost))\n        #move down for current cell\n        if(i!=len(cost)-1):\n            #check if next cell has more than 1 or 0, if so assign remaining totalCost to next cell's value\n            if(cost[i+1][1] > 0):\n                totalCost = cost[i][1] + cost[i+1][1]\n            #move to next cell\n            else:\n                totalCost = cost[i][1]\n            #add to a tuple of (currentCell, totalCost)\n            path.append((cost[i][0],totalCost))\n    #return a tuple of (currentCell, averageCost)\n    return tuple(path)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    d = 0.0\n    for i in range(len(cost)):\n        d += cost[i][i]\n    return d/len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def calcAverage(path, currentIndex, row, column):\n        total = 0\n        for i in range(len(path)):\n            total += path[i][currentIndex]\n        return total/len(path)\n    \n    def calculateAverage(currentIndex, row, column):\n        average = calcAverage(path, currentIndex, row, column)\n        currentIndex += 1\n        return average\n    \n    N = len(cost)\n    \n    path = [None]*N\n    \n    for i in range(N):\n        for j in range(N):\n            currentIndex = i\n            currentRow = j\n            \n            if cost[i][j] < 0:\n                currentIndex = 0\n                currentRow = N-1\n                \n            path[i] = [currentIndex, currentRow]\n            \n            while currentIndex < N:\n                if currentIndex == N-1:\n                    currentRow += 1\n                    currentIndex += 1\n                    continue\n                elif currentIndex == 0:\n                    currentRow += 1\n                    currentIndex += 1\n                    continue\n                else:\n                    currentRow -= 1\n                    currentIndex += 1\n                    continue\n            \n            if currentIndex == N-1:\n                break\n            else:\n                currentIndex += 1\n        \n    if currentIndex == N:\n        return 0\n    else:\n        average = calcAverage(path, currentIndex, currentRow, N-1)\n        return average\n        \n    \n    "
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    cost = cost.strip().split()\n    cost = [int(x) for x in cost]\n    N = len(cost)\n    if (N < 2):\n        return 0\n    dp = [[0 for i in range(N)] for i in range(N)]\n    for i in range(0, N - 1):\n        for j in range(i + 1, N):\n            if cost[i] > cost[j]:\n                dp[i][j] = dp[i][j] + 1\n                dp[j][i] = dp[i][j] + 1\n    sum = 0\n    for i in range(N):\n        sum = sum + dp[i][i]\n    return sum / N\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    list_of_student_names = []\n    list_of_student_heights = []\n    list_of_student_weights = []\n    \n    for student in students:\n        list_of_student_names.append(student[0])\n        list_of_student_heights.append(student[1][0])\n        list_of_student_weights.append(student[1][1])\n    \n    list_of_student_heights_min = []\n    list_of_student_weights_min = []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return dict((name, (height, weight)) for (name, (height, weight)) in students.items() if height >= h and weight >= w)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if (student[1][0] >= h and student[1][1] >= w):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for s in students:\n        if s.weight > w and s.height > h:\n            print(s.name,s.height,s.weight)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for st in students:\n        if (st.get('student_height', None) is not None) and (st.get('student_weight', None) is not None):\n            if w > st.get('student_weight', None):\n                if h > st.get('student_height', None):\n                    filtered[st.get('student_name')] = st\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    for key in students.keys():\n        if len(students[key])>h and len(students[key])>w:\n            students[key]=student_filter(students[key],h,w)\n            print(f'Filtered {key} as {students[key]}')\n        else:\n            print(f'{key} is too short or too long')\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_list = []\n    for s in students:\n        if (s['height'] > h) and (s['weight'] > w):\n            filtered_list.append(s)\n    return filtered_list\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtro = True\n    if w>h:\n        filtro = False\n    else:\n        for s in students:\n            if w<s['student_weight'] and h<s['student_height']:\n                filtro = False\n                break\n    return filtro\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    final_data = {}\n    for key,val in students.items():\n        if val[1][0]>h and val[1][1]>w:\n            final_data[key] = val\n    return final_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if (type(student['height'])==float and student['height'] > h and student['weight'] > w):\n            students[student] = h - student['height']\n        elif (type(student['height'])==float and student['height'] > h and student['weight'] < w):\n            students[student] = w - student['height']\n        elif (type(student['height'])==float and student['height'] < h and student['weight'] > w):\n            students[student] = h - student['height']\n        elif (type(student['height'])==float and student['height'] < h and student['weight'] < w):\n            students[student] = w - student['height']\n    return students\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pair_count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                pair_count += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n    \ndef count_same_pairs(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count pairs where the elements of the lists have the same value.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if i == j:\n                    count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    count = 0\n    for num in nums1:\n        for num2 in nums2:\n            if num == num2:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    return len(set_1.intersection(set_2))\ndef num_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    return len(set_1.intersection(set_2))\ndef num_same_length(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    return len(set_1.intersection(set_2))\ndef get_common_elements(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    return set_1.intersection(set_2)\ndef get_common_elements_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    set_3 = set(nums1 + nums2)\n    return set_1.intersection(set_2).intersection(set_3)\ndef max_in_list(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    set_3 = set(nums1 + nums2)\n    return max(set_1, set_2, set_3)\ndef min_in_list(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    set_3 = set(nums1 + nums2)\n    return min(set_1, set_2, set_3)\ndef get_intersection_count(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    return len(set_1.intersection(set_2))\ndef get_intersection_count_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set_1 = set(nums1)\n    set_2 = set(nums2)\n    set_3 = set(nums1 + nums2)\n    return len(set_1.intersection(set_2, set_3))\ndef remove_duplicates(nums):\n    '''\n    The input is defined as a list of numbers. Write a function to remove duplicates from a list.\n    '''\n    set_1 = set(nums)\n    set_2 = set()\n    for i in set_1:\n        if i not in set_2:\n            set_2.add(i)\n    return list(set_2)\ndef sublist_count(a, b):\n    '''\n    The input is defined as a list of numbers. Write a function to return the number of sublists in the list.\n    '''\n    set_1 = set(a)\n    set_2 = set(b)\n    return len(set_1.intersection(set_2))\ndef k_anagrams(words):\n    '''\n    The input is defined as a list of strings. Write a function to return all the anagrams in the list.\n    '''\n    words_set = set(words)\n    anagrams = list()\n    for word in words:\n        if len(word) == len(words_set):\n            set_1 = set(word)\n            set_2 = set()\n            for char in word:\n                if char in set_1:\n                    set_2.add(char)\n            if len(set_2) == len(words_set):\n                anagrams.append(word)\n    return anagrams\ndef number_of_anagrams(n, words):\n    '''\n    The input is defined as a number and a list of words. Write a function to return the number of anagrams in the list.\n    '''\n    set_1 = set(n)\n    set_2 = set()\n    for word in words:\n        if len(word) == len(set_1):\n            set_2.add(word)\n    if len(set_2) == len(n):\n        return n\ndef sorted_anagrams(words):\n    '''\n    The input is defined as a list of words. Write a function to return all the anagrams sorted in ascending order by the length.\n    '''\n    words_set = set(words)\n    anagrams = list()\n    for word in words:\n        if len(word) == len(words_set):\n            set_1 = set(word)\n            set_2 = set()\n            for char in word:\n                if char in set_1:\n                    set_2.add(char)\n            if len(set_2) == len(words_set):\n                anagrams.append(word)\n    return anagrams\ndef quick_sort(nums):\n    '''\n    The input is defined as a list of numbers. Write a function to sort the numbers in-place using the quick sort algorithm.\n    '''\n    if len(nums) <= 1:\n        return nums\n    left, right = 0, len(nums) - 1\n    pivot_value = nums[len(nums)//2]\n    while left <= right:\n        while left <= right and nums[left] < pivot_value:\n            left += 1\n        while left <= right and nums[right] > pivot_value:\n            right -= 1\n        if left <= right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n    nums[left], nums[right] = nums[right], nums[left]\n    return quick_sort(nums[:left] + nums[right+1:])\ndef recursive_sorted_anagrams(words):\n    '''\n    The input is defined as a list of words. Write a function to return all the anagrams sorted by their length in ascending order.\n    '''\n    words_set = set(words)\n    anagrams = list()\n    for word in words:\n        if len(word) == len(words_set):\n            set_1 = set(word)\n            set_2 = set()\n            for char in word:\n                if char in set_1:\n                    set_2.add(char)\n            if len(set_2) == len(words_set):\n                anagrams.append(word)\n    return anagrams\ndef less_than_anagrams(words):\n    '''\n    The input is defined as a list of words. Write a function to return all the anagrams that are less than the given number.\n    '''\n    words_set = set(words)\n    anagrams = list()\n    for word in words:\n        if len(word) == len(words_set):\n            set_1 = set(word)\n            set_2 = set()\n            for char in word:\n                if cha"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in dict1:\n            dict1[nums1[i]] = 1\n        else:\n            dict1[nums1[i]] += 1\n        if nums2[i] not in dict2:\n            dict2[nums2[i]] = 1\n        else:\n            dict2[nums2[i]] += 1\n    return dict1 == dict2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pair_count = 0\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            if nums1[i] == nums2[j]:\n                pair_count += 1\n            \n    return pair_count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        sum += base % 10\n        base = int(base / 10)\n    return sum * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 1:\n        return base\n    else:\n        return base + power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while base:\n        total += base % 10\n        base //= 10\n    return total * power\n    \ndef convert_to_base(n, base):\n    '''\n    Convert an integer to a decimal by dividing the integer by base.\n    '''\n    total = 0\n    while n:\n        total += n % base\n        n //= base\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base in range(2, 10)\n    assert power >= 2 and power <= 9\n    sum = 0\n    while (power):\n        num = base % 10\n        base = int(base / 10)\n        sum += num\n        if power % 10!= 0:\n            sum *= 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base*power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 1:\n        return 1\n    else:\n        return base * power_base_sum(base, power-1)"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(base):\n        result += i\n    return result ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base**power\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # creating a regular expression for the quotation marks\n    QUOTATION_PATTERN = re.compile(r'\\s*[)]\\s*$')\n    # capturing the quotation marks\n    quotation_marks = QUOTATION_PATTERN.search(text1)\n    # if the quotation marks are found, return the result\n    if quotation_marks:\n        return quotation_marks.group()\n    else:\n        return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern1 = r'\"(?:[^\"\\\\]|\\\\.)*?(\"|\\s)'\n    reg_exp1 = re.compile(pattern1)\n    res = reg_exp1.findall(text1)\n    res = [i.replace('\"','') for i in res]\n    return res\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list_quotes = [re.findall(\"(.)\", s) for s in text1.split() if s.strip()]\n    quotation_list = []\n    for i in range(len(list_quotes)):\n        quotation_list += [list_quotes[i][0]]\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # for  some reason, there are some quotation marks in the text.\n    quotation_pattern = re.compile(r'''\n        \"(?P<value>.*)\"\n    ''')\n    # the regex does not work with the quotation marks.\n    # regexp = re.compile(r'''\n    #     \"(?P<value>.*)\"\n    # ''')\n    \n    result = quotation_pattern.findall(text1)\n    # print(result)\n    result2 = ''.join(result)\n    # print(result2)\n    return result2\n    \n    \n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pat = re.compile(r\"(?<=[.?!])'(.+)'(?:[^']*)'\", re.DOTALL)\n    quotation_list = quotation_pat.findall(text1)\n    #print(quotation_list)\n    for quotation in quotation_list:\n        print(quotation)\n        if quotation[2]=='\\n':\n            text2 = text1.replace(quotation[0],'')\n        else:\n            text2 = text1.replace(quotation[0],' '+quotation[2]+quotation[3])\n        text1 = text2\n    return text1"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # ===========================================================#\n    '''\n    The following code extracts the quotation marks.\n    '''\n    # ===========================================================#\n    text1 = text1.replace(\"'\",\"\")\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = re.sub('[^a-zA-Z]','', text1)\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = re.sub('\\s+','', text1)\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u201c', '\"')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u201d', '\"')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2019', '\"')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('-', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2026','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('!','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('.','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('?','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('{','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('}','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('(','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace(')','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\"','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('-', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2013', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('(','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace(')','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('[','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace(']','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\\'','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\"','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\"','')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', '-')\n    # ===========================================================#\n    # print(text1)\n    # ===========================================================#\n    text1 = text1.replace('\u2014', "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quote_pattern = r'(?<=\\\")\\w+\"(?=\\\")'\n    return re.findall(quote_pattern, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # if the string is empty or empty, return the empty string\n    if text1 == '' or text1 == None:\n        return ''\n    # if the string ends with a '.', return the string without the period\n    if text1[-1] == '.':\n        text1 = text1[:-1]\n    # if the string ends with a ',', return the string without the comma\n    if text1[-1] == ',':\n        text1 = text1[:-1]\n    # if the string ends with a ')' or ')', return the string without the opening and the closing parentheses\n    if text1[-1] in [')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with a '=' or '=', return the string without the opening and the closing = sign\n    if text1[-1] in ['=', '=']:\n        text1 = text1[:-1]\n    # if the string ends with a ',' or ',', return the string without the closing comma\n    if text1[-1] in [',', ',']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening parentheses\n    if text1[-1] in ['(', ')', '[']:\n        text1 = text1[:-1]\n    # if the string ends with a ',', return the string without the closing ','\n    if text1[-1] in [',', ',']:\n        text1 = text1[:-1]\n    # if the string ends with an ':' or ':', return the string without the closing ':'\n    if text1[-1] in [':', ':', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']']:\n        text1 = text1[:-1]\n    # if the string ends with a ',' or ',', return the string without the closing ','\n    if text1[-1] in [',', ',']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the closing '('\n    if text1[-1] in ['(', ')', '[']:\n        text1 = text1[:-1]\n    # if the string ends with a ',' or ',', return the string without the closing ','\n    if text1[-1] in [',', ',']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '=' or '=', return the string without the opening '='\n    if text1[-1] in ['=', '=']:\n        text1 = text1[:-1]\n    # if the string ends with an '=' or '=', return the string without the opening '='\n    if text1[-1] in ['=', '=']:\n        text1 = text1[:-1]\n    # if the string ends with an ')' or ')', return the string without the closing ')'\n    if text1[-1] in ['(', ')', ')']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the closing '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an ',' or ',', return the string without the closing ','\n    if text1[-1] in [',', ',']:\n        text1 = text1[:-1]\n    # if the string ends with a ',' or ',', return the string without the closing ','\n    if text1[-1] in [',', ',']:\n        text1 = text1[:-1]\n    # if the string ends with a '(' or ')', return the string without the opening ')'\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening ')'\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the string without the opening '('\n    if text1[-1] in ['(', ')', '(']:\n        text1 = text1[:-1]\n    # if the string ends with an '(' or ')', return the strin"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = ''.join(re.findall(r'[\\w\\,\\.!\\:\\'\\?\\&\\/\\&\\=\\_\\+\\~\\{]+', text1))\n    text = ''.join(text.split())\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotes = []\n    for x in range(len(text1)):\n        if text1[x] == '\"':\n            quotes.append(text1[x])\n    return quotes\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    \n    if len(test_tup) == 2:\n        return t_1*t_2\n    else:\n        n = len(test_tup)\n        \n        t_mul = []\n        \n        for i in range(0, n):\n            t_mul.append(t_1*t_2)\n        \n        return t_mul\n    \ntest_tup = (7,4,3)\nprint(multiply_elements(test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result = result + (test_tup[i] * test_tup[i+1])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i], test_tup[i+1])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    \n    return tuple(test_tup[i] * test_tup[i+1] for i in range(N-1))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tuple = test_tup\n    t_size = len(test_tuple)\n    t_sum = 0\n    for i in range(t_size):\n        t_sum += test_tuple[i] * (i + 1)\n    return (t_sum)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] * test_tup[i + 1])\n    return result\n    \n    \ndef subtract_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i - t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] - test_tup[i + 1])\n    return result\n    \n    \ndef cube_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is the product of t_i * t_{i+1} * t_{i+2}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] * test_tup[i + 1] * test_tup[i + 2])\n    return result\n    \n    \ndef quadratic_equation(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2])\n    return result\n    \n    \ndef quadratic_equation_2(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2} / t_{i+3}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2] / test_tup[i + 3])\n    return result\n    \n    \ndef quadratic_equation_3(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2} * t_{i+3} / t_{i+4}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2] * test_tup[i + 3] / test_tup[i + 4])\n    return result\n    \n    \ndef check_case(test_tup, test_result, solution):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2} * t_{i+3} * t_{i+4} / t_{i+5}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2] * test_tup[i + 3] * test_tup[i + 4] * test_tup[i + 5])\n        if test_result[i]!= result[i]:\n            solution[i] = False\n    return solution\n    \n    \ndef solution(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2} * t_{i+3} * t_{i+4} * t_{i+5} / t_{i+6}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2] * test_tup[i + 3] * test_tup[i + 4] * test_tup[i + 5] * test_tup[i + 6])\n    return result\n    \n    \ndef is_odd(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2} * t_{i+3} * t_{i+4} * t_{i+5} * t_{i+6} / t_{i+7}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2] * test_tup[i + 3] * test_tup[i + 4] * test_tup[i + 5] * test_tup[i + 6] * test_tup[i + 7] / test_tup[i + 8])\n        if result[i] % 2!= 0:\n            solution[i] = False\n    return solution\n    \n    \ndef is_even(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2} * t_{i+3} * t_{i+4} * t_{i+5} * t_{i+6} * t_{i+7} / t_{i+8}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2] * test_tup[i + 3] * test_tup[i + 4] * test_tup[i + 5] * test_tup[i + 6] * test_tup[i + 7] * test_tup[i + 8])\n        if result[i] % 2!= 0:\n            solution[i] = False\n    return solution\n    \n    \ndef solution_2(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is (t_i / t_{i+1} * t_{i+2} * t_{i+3} * t_{i+4} * t_{i+5} * t_{i+6} * t_{i+7} * t_{i+8} / t_{i+9}).\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i] / test_tup[i + 1] * test_tup[i + 2] * test_tup[i + 3] * test_tup[i + 4] * test_tup[i + 5] * test_tup[i + 6] * test_tup[i + "
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # 1. define a list of size N\n    a = [1,2,3,4,5,6,7]\n    # 2. convert the list into a tuple\n    tuple_a = tuple(a)\n    # 3. use the function to create a new tuple of length N\n    new_tuple_a = tuple_a*tuple_a\n    # 4. return the result\n    return new_tuple_a\n    \n    \n    \n    # TEST\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    # print(multiply_elements((1,2,3,4,5,6,7)))\n    \n    # def multiply_elements(test_tup):\n    #     return tuple(map(lambda t: t*t, test_tup))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum = sum + lst1[i] + lst2[i]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum+=lst1[i]\n    for j in range(len(lst2)):\n        sum+=lst2[j]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    c = []\n    for i in range(len(lst1[0])):\n        c.append(0)\n    for i in range(len(lst2[0])):\n        c.append(0)\n    for i in range(len(lst1)):\n        for j in range(len(lst2[0])):\n            c[i] += lst1[i][j]\n    for i in range(len(lst2)):\n        for j in range(len(lst1[0])):\n            c[i] += lst2[i][j]\n    for i in range(len(lst1)):\n        for j in range(len(lst1[0])):\n            c[j] += lst1[i][j]\n    return c\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) > len(lst2):\n        s=lst1\n        lst1=lst2\n        lst2=s\n    if len(lst1)<len(lst2):\n        s=lst2\n        lst2=lst1\n        lst1=s\n    if len(lst1)==len(lst2):\n        s=lst1\n        lst1=lst2\n        lst2=s\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = []\n    for i in lst1:\n        for j in lst2:\n            sum.append(i+j)\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = 0\n    for i in range(len(lst1)):\n        result += lst1[i]\n    for j in range(len(lst2)):\n        result += lst2[j]\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=0\n    for i in range(len(lst1)):\n        sum+=lst1[i]\n    for i in range(len(lst2)):\n        sum+=lst2[i]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = 0\n    for i in range(len(lst1)):\n        s+=lst1[i]\n    for j in range(len(lst2)):\n        s+=lst2[j]\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1) + sum(lst2)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    my_list = []\n    for item in nums:\n        if nums.count(item) > 1:\n            my_list.append(item)\n        else:\n            my_list.append(nums[nums.index(item)+1])\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        if nums[i] in nums_set:\n            nums_set.remove(nums[i])\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [ (i, nums.count(i)) for i in nums ]\ndef group_and_count(nums):\n    '''\n    Given a list of numbers, group the numbers into groups of adjacent numbers, \n    then count how many of each group are in the list\n    '''\n    return [ (group, nums.count(group)) for group in consecutive_duplicates(nums) ]\ndef group_to_dict(group):\n    '''\n    Given a group of adjacent numbers, return a dictionary of the number of\n    appearances of that group as keys and the group of the number as the\n    value.\n    '''\n    return dict(group)\ndef max_repeat_digits(s):\n    '''\n    Given a string of numbers, return the maximum number of times that \n    the string can be repeated by.\n    '''\n    return max(int(str) for str in re.findall(r'^(\\d+)(?=a)', s))\ndef string_reverse_vowels(s):\n    '''\n    Given a string, return a new string where the vowels have been reversed.\n    '''\n    vowels = 'aeiouAEIOU'\n    return ''.join(vowels[i] if i in s else v for i, v in enumerate(s))\ndef reverse_string(s):\n    '''\n    Given a string, return a new string where the vowels have been reversed.\n    '''\n    vowels = 'aeiouAEIOU'\n    return ''.join(vowels[i] if i in s else v for i, v in enumerate(s))\ndef all_caps(s):\n    '''\n    Given a string, return True if all characters in the string are caps.\n    '''\n    return ''.join(c.upper() if c.isupper() else c.lower() for c in s)\ndef first_two_non_zero_digits(n):\n    '''\n    Given a number, return the first two non-zero digits.\n    '''\n    return str(n)[:2]\ndef str_divisors(n):\n    '''\n    Given a number, return the prime numbers less than or equal to that \n    number.\n    '''\n    return [i for i in range(1, int(n) + 1) if int(n) % i == 0]\ndef is_prime(n):\n    '''\n    Given a number, return True if it's prime.\n    '''\n    return all(i > 1 for i in str(n))\ndef prime_factors(n):\n    '''\n    Given a number, return all the prime factors of that number.\n    '''\n    return list(str(n))[1:]\ndef factorial(n):\n    '''\n    Given a number, return the factorial of that number.\n    '''\n    return 1 if n < 0 else n * factorial(n - 1)\ndef factorial_2(n):\n    '''\n    Given a number, return the factorial of that number.\n    '''\n    return factorial(n) * factorial(n - 1)\ndef fibonacci(n):\n    '''\n    Given a number, return the first and last Fibonacci numbers.\n    '''\n    return (n, n + 1) if n <= 0 else (n, fibonacci(n - 1) + fibonacci(n - 2))\ndef fibonacci_gen(n):\n    '''\n    Given a number, yield the first and last Fibonacci numbers.\n    '''\n    if n == 0 or n == 1:\n        yield 0\n    elif n <= 2:\n        yield n\n    else:\n        x = [fibonacci(n - 1), fibonacci(n - 2)]\n        x.append(fibonacci(n - 3))\n        yield from x\ndef factorial_gen(n):\n    '''\n    Given a number, yield the first and last Fibonacci numbers.\n    '''\n    if n == 0 or n == 1:\n        yield 0\n    elif n <= 2:\n        yield n\n    else:\n        yield from factorial_2(n)\ndef factorial_reverse(n):\n    '''\n    Given a number, yield the first and last Fibonacci numbers.\n    '''\n    if n == 0 or n == 1:\n        yield 0\n    elif n <= 2:\n        yield n\n    else:\n        x = factorial(n - 2)\n        yield from (x * num for num in reversed(range(1, n + 1)))\ndef odd_even(n):\n    '''\n    Given an integer, return True if the number is odd.\n    '''\n    return not (n % 2)\ndef prime_factors_gen(n):\n    '''\n    Given an integer, yield the prime factors of that number.\n    '''\n    if n == 0 or n == 1:\n        yield 0\n    elif n <= 2:\n        yield n\n    else:\n        yield from prime_factors(n - 1)\ndef prime_factors_reverse(n):\n    '''\n    Given an integer, yield the prime factors of that number.\n    '''\n    if n == 0 or n == 1:\n        yield 0\n    elif n <= 2:\n        yield n\n    else:\n        yield from prime_factors_gen(n - 1)\ndef num_divisible_by_all_divisors(n):\n    '''\n    Given an integer, return the number of all divisors of the number.\n    '''\n    if n == 0 or n == 1:\n        yield 0\n    elif n <= 2:\n        yield n\n    else:\n        for i, divisors in groupby(str(n), is_prime):\n            if len(divisors) < 2:\n                continue\n            yield from num_divisible_by_all_divisors(int(''.join(divisors)))\ndef mod_inv(n, m):\n    '''\n    Given a number, return the multiplicative inverse of that number.\n    '''\n    if n == m or n < 0 or m < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n > m:\n        return mod_inv(n - 1, m)\n    else:\n        k, r = divmod(n, m)\n        return (k * mod_inv(r, m) * m) % m\ndef mod_inv_gen(n):\n    '''\n    Given a number, yield the multiplicative inverse of that number.\n    '''\n    if n == 0:\n        yield 0\n    elif n == 1:\n        yield 1\n    elif n == 2:\n        yield 0\n    else:\n        x = mod_inv(n, 2)\n        yield x\ndef power(n, p):\n    '''\n    Given a number, return its square root.\n    '''\n    return n**p\ndef primes():\n    '''\n    Yield all primes.\n    '''\n    yield 2\n    for i in range(3, int(math.sqrt(20000)) + 1, 2):\n        yield i\ndef primes_gen(n):\n    '''\n    Given a number, yield all primes.\n    '''\n    for p in primes():\n        if power(p, 2) <= n:\n            yield p\ndef check_prime(n):\n    '''\n    Given a number, return True if it's prime.\n    '''\n    return n >= 2 and all(pow(n, i) % 1 == 0 for i in range(2, int(math.sqrt(n))) if is_prime(i))\ndef nth_prime(n):\n    '''\n    Given an integer n, return the nth prime number.\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    for i in range(4, n, 2):\n        if is_prime(i):\n            return i\ndef count_primes(n):\n    '''\n    Given an integer n, return the number of primes below it.\n    '''\n    if n <= "
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = {}\n    seen_index = set()\n    for i, num in enumerate(nums):\n        if i > 0:\n            if num in seen:\n                if seen[num] == i-1:\n                    del seen[num]\n                else:\n                    seen_index.add(num)\n        else:\n            if num in seen:\n                seen_index.add(num)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    \n    g = groupby(nums)\n    new_nums = list(filter(lambda x: len(x) > 1, list(g)))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # return [True for x in nums if nums.count(x) == 1]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # if list has duplicate\n    # then return it.\n    if len(nums) == 1:\n        return nums\n    # create list of consecutive duplicate numbers\n    # i.e. [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7]\n    consecutive_numbers = []\n    for i, item in enumerate(nums):\n        if item not in consecutive_numbers:\n            consecutive_numbers.append(item)\n    return consecutive_numbers\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    ans = []\n    for i in range(len(nums)):\n        if nums[i] in ans:\n            continue\n        else:\n            ans.append(nums[i])\n            nums[i] = nums[i+1]\n    \n    return ans\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return h*(math.sin(math.radians(90-h))*math.cos(math.radians(90+h))+math.sin(math.radians(90-h))*math.cos(math.radians(90-h)))\ndef lateralsurface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return h*(math.sin(math.radians(90-h))*math.sin(math.radians(90+h))-math.cos(math.radians(90-h))*math.cos(math.radians(90+h)))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        if r>0.0:\n            # If the radius is positive, this is a cone with a height of h\n            surface_area = r * math.tan(math.pi / 3.0) * math.tan(math.pi / 2.0)\n        else:\n            # If the radius is negative, this is a cone with a height of -h\n            surface_area = -(r * math.tan(math.pi / 3.0) * math.tan(math.pi / 2.0))\n    except Exception:\n        # This is a non-valid input\n        surface_area = 0.0\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # define the variables\n    L = 3*(r*r - h*h)\n    B = 3*(r**2 - (h**2)/2)\n    C = 2*(r**2 - h**2)\n    # define the equation\n    E = ((L + B + C)/2)\n    # calculate the area\n    area = math.sqrt(E*(E-L) * (E-B) * (E-C))\n    return area\ndef main():\n    r=float(input(\"Enter the radius of the cone (in meters): \"))\n    h=float(input(\"Enter the height (in meters): \"))\n    # define the variables\n    a=lateralsurface_cone(r,h)\n    print(\"The surface area of the cone is:\",a)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5 * math.pi * r * h\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    l = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    l = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef erf_surface(r,h):\n    '''\n    Write a function that returns the equivalent area of an erf surface given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    l = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef erf_cylinder(r,h):\n    '''\n    Write a function that returns the equivalent area of an erf cylinder given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    l = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef eq_cylinder(r,h):\n    '''\n    Write a function that returns the equivalent area of an equilateral cylinder given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    l = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef back_proj_cylinder(r,h):\n    '''\n    Write a function that returns the equivalent area of an equilateral cylinder given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    l = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef back_proj_surface(r,h):\n    '''\n    Write a function that returns the equivalent area of an equilateral surface given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    r = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef back_proj_cylinder(r,h):\n    '''\n    Write a function that returns the equivalent area of an equilateral cylinder given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    r = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef back_proj_surface(r,h):\n    '''\n    Write a function that returns the equivalent area of an equilateral surface given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    r = c\n    # calculate the radius of the inner cylinder\n    r = c\n    # calculate the radius of the outer cylinder\n    r = c\n    # calculate the area of the outer cylinder\n    a = 2*math.pi*r\n    # calculate the area of the surface\n    S = a*l\n    # return the calculated surface area\n    return S\ndef back_proj_cylinder(r,h):\n    '''\n    Write a function that returns the equivalent area of an equilateral cylinder given the radius r, height h.\n    '''\n    # define the area of a surface with half a circle\n    S = 2*math.pi*r\n    # calculate the area of the surface\n    a = 2*math.pi*r\n    # calculate the length of the outer cylinder\n    c = 2*r\n    # calculate the length of the inner cylinder\n    l = h\n    # calculate the length of the cone\n    "
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*r*h\ndef tangent(p1,p2,p3):\n    '''\n    Write a function to find the tangent of a line segment.\n    '''\n    return (p2-p1)*(p2-p1) + (p3-p1)*(p3-p1)\ndef linecross(p1,p2,p3):\n    '''\n    Write a function to find the slope of a line segment.\n    '''\n    return (p3-p2)*(p3-p2)-(p1-p2)*(p1-p2)\ndef sign(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    if a>0:\n        return 1\n    else:\n        return -1\ndef signedderivative(a,b):\n    '''\n    Write a function to calculate the derivative of a function.\n    '''\n    return sign(b)*(a-b)\ndef proj2p(a,b):\n    '''\n    Write a function to calculate the projection of two points.\n    '''\n    return (a*b)/math.sqrt((a-b)**2+1)\ndef proj3p(p1,p2,p3):\n    '''\n    Write a function to calculate the projection of three points.\n    '''\n    return proj2p(p2-p1,p3-p1)-proj2p(p1-p2,p3-p2)\ndef proj4p(p1,p2,p3,p4):\n    '''\n    Write a function to calculate the projection of four points.\n    '''\n    return proj2p(p2-p1,p3-p1)-proj2p(p1-p2,p3-p2)-proj2p(p2-p3,p3-p3)-proj2p(p3-p4,p4-p1)\ndef length(p):\n    '''\n    Write a function to calculate the length of a point.\n    '''\n    return math.sqrt(p[0]*p[0] + p[1]*p[1])\ndef length_1(p1,p2):\n    '''\n    Write a function to calculate the length of a line segment.\n    '''\n    return math.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)\ndef normalize(p):\n    '''\n    Write a function to calculate the normalized vector of a point.\n    '''\n    return proj3p(p,p,p)\ndef distance_between_points(p1,p2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)\ndef distance_2_lines(p1,p2,p3):\n    '''\n    Write a function to calculate the distance between two lines segment.\n    '''\n    return math.sqrt((p2[0]-p3[0])**2+(p2[1]-p3[1])**2)\ndef normalize_2_lines(p1,p2):\n    '''\n    Write a function to calculate the normalized vector between two lines segment.\n    '''\n    return proj3p(p1,p2,p3)\ndef is_clockwise(p1,p2):\n    '''\n    Write a function to determine if a point is clockwise or counterclockwise.\n    '''\n    return signedderivative(p2,p1)>0\ndef clockwise(p1,p2):\n    '''\n    Write a function to determine if a point is clockwise or counterclockwise.\n    '''\n    return sign(p2[1]-p1[1])*sign(p2[0]-p1[0])\ndef is_parallel_to(p1,p2):\n    '''\n    Write a function to determine if a point is parallel to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p1,p2)-normalize(p2))\ndef is_perpendicular_to(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))\ndef is_perpendicular_to_1_line(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef is_parallel_to_2_lines(p1,p2):\n    '''\n    Write a function to determine if a point is parallel to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef is_perpendicular_to_2_lines(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef is_perpendicular_to_3_lines(p1,p2,p3):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef is_perpendicular_to_4_lines(p1,p2,p3,p4):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p3,p2)-normalize(p2))*is_clockwise(p2,p2)\ndef perpendicular(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p1,p2)-normalize(p2))*is_clockwise(p2,p1)\ndef parallel(p1,p2):\n    '''\n    Write a function to determine if a point is parallel to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p1,p2)-normalize(p1))*is_clockwise(p2,p1)\ndef perpendicular_to(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef perpendicular_to_1_line(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef perpendicular_to_2_lines(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef perpendicular_to_2_lines(p1,p2):\n    '''\n    Write a function to determine if a point is perpendicular to one of the given line segments.\n    '''\n    return sign(normalize_2_lines(p2,p1)-normalize(p1))*is_clockwise(p2,p1)\ndef perpendicular_to_3_lines(p1,p2,p"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    sinr = math.sin(math.radians(r))\n    cosr = math.cos(math.radians(r))\n    cosr2 = math.cos(math.radians(r + h))\n    sinr2 = math.sin(math.radians(r + h))\n    cosr_2 = math.cos(math.radians(r + h))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=4*(math.pi*r**2)\n    B=math.pi*(r**2)\n    C=math.pi*(h**2)\n    return (A+B+C)/2\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c-math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef surfacesurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef inclined_cubes_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c-math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef triangular_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c-math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef perimeter_cube(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c-math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef bezier_curve_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c-math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c-math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other_other(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other_other(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other_other(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other_other(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other_other(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the center of the cone.\n    c = ((h/2)*math.cos(math.radians(90-r)))\n    #Calculate the end point of the cone.\n    l = (c+math.sin(math.radians(90-r)))\n    #Calculate the area and then add it to the result.\n    s = l*(l-c)\n    return s\n    \ndef parallelogram_surface_other_other(r,h):\n    '''\n    Write a function to find the lateral surface area of "
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"\\n1. Calculate the lateral surface area of a cone given its radius and its height\")\n    print(\"2. Use the left-hand rule to calculate the lateral surface area of a cone given its radius and its height\")\n    print(\"3. Use the right-hand rule to calculate the lateral surface area of a cone given its radius and its height\")\n    print(\"\\n\")\n    a=float(input(\"Enter the radius of the cone : \"))\n    print(\"\\n\")\n    b=float(input(\"Enter the height of the cone : \"))\n    print(\"\\n\")\n    if r <= 0.0:\n        print(\"\\n\\nError! Invalid Input\")\n        print(\"\\n\")\n    else:\n        print(\"\\n\\nThe lateral surface area of a cone with given radius and height are : \")\n        print(\"\\n\\n\")\n        return r*(math.tan(math.radians(b/a))*math.pow(math.pow(h,2),2))/(math.pow(2,math.floor(a)))\n    return 0\ndef area_of_lateral_surface(r,h):\n    '''\n    Write a function to find the area of a lateral surface given radius r and the height h.\n    '''\n    print(\"\\n1. Calculate the area of a lateral surface given its radius and its height\")\n    print(\"2. Use the left-hand rule to calculate the area of a lateral surface given its radius and its height\")\n    print(\"3. Use the right-hand rule to calculate the area of a lateral surface given its radius and its height\")\n    print(\"\\n\")\n    a=float(input(\"Enter the radius of the lateral surface : \"))\n    print(\"\\n\")\n    if r <= 0.0:\n        print(\"\\n\\nError! Invalid Input\")\n        print(\"\\n\")\n    else:\n        print(\"\\n\\nThe area of a lateral surface with given radius and height are : \")\n        print(\"\\n\\n\")\n        return math.pow(math.pow(h,2)*r,2)/math.pow(math.pow(h,2)*r,2)\n    return 0\ndef area_of_cone(r,h):\n    '''\n    Write a function to find the area of a cone given its radius and its height.\n    '''\n    print(\"\\n1. Calculate the area of a cone given its radius and its height\")\n    print(\"2. Use the left-hand rule to calculate the area of a cone given its radius and its height\")\n    print(\"3. Use the right-hand rule to calculate the area of a cone given its radius and its height\")\n    print(\"\\n\")\n    a=float(input(\"Enter the radius of the cone : \"))\n    print(\"\\n\")\n    b=float(input(\"Enter the height of the cone : \"))\n    print(\"\\n\")\n    if r <= 0.0:\n        print(\"\\n\\nError! Invalid Input\")\n        print(\"\\n\")\n    else:\n        print(\"\\n\\nThe area of a cone with given radius and height are : \")\n        print(\"\\n\\n\")\n        return (math.pow(math.pow(h,2)*r,2) * (2*math.pow(math.pow(h,2)*r,2) + math.pow(h,2)*math.pow(r,2)))/(2*math.pow(math.pow(h,2)*r,2))\n    return 0\ndef area_of_squiggle_surface(r,h):\n    '''\n    Write a function to find the area of a squiggle surface given its radius and its height.\n    '''\n    print(\"\\n1. Calculate the area of a squiggle surface given its radius and its height\")\n    print(\"2. Use the left-hand rule to calculate the area of a squiggle surface given its radius and its height\")\n    print(\"3. Use the right-hand rule to calculate the area of a squiggle surface given its radius and its height\")\n    print(\"\\n\")\n    a=float(input(\"Enter the radius of the squiggle surface : \"))\n    print(\"\\n\")\n    b=float(input(\"Enter the height of the squiggle surface : \"))\n    print(\"\\n\")\n    if r <= 0.0:\n        print(\"\\n\\nError! Invalid Input\")\n        print(\"\\n\")\n    else:\n        print(\"\\n\\nThe area of a squiggle surface with given radius and height are : \")\n        print(\"\\n\\n\")\n        return math.pow(math.pow(h,2)*(2*a*math.pow(math.pow(r,2),2)+math.pow(r,2)),2)*(2*math.pow(math.pow(h,2)*(r-a*math.pow(math.pow(r,2),2)),2) + math.pow(r,2)*math.pow(math.pow(h,2),2))/(2*math.pow(math.pow(r,2),2))\n    return 0\ndef area_of_waterfall_surface(r,h):\n    '''\n    Write a function to find the area of a waterfall surface given its radius and its height.\n    '''\n    print(\"\\n1. Calculate the area of a waterfall surface given its radius and its height\")\n    print(\"2. Use the left-hand rule to calculate the area of a waterfall surface given its radius and its height\")\n    print(\"3. Use the right-hand rule to calculate the area of a waterfall surface given its radius and its height\")\n    print(\"\\n\")\n    a=float(input(\"Enter the radius of the waterfall surface : \"))\n    print(\"\\n\")\n    b=float(input(\"Enter the height of the waterfall surface : \"))\n    print(\"\\n\")\n    if r <= 0.0:\n        print(\"\\n\\nError! Invalid Input\")\n        print(\"\\n\")\n    else:\n        print(\"\\n\\nThe area of a waterfall surface with given radius and height are : \")\n        print(\"\\n\\n\")\n        return (math.pow(math.pow(h,2)*(2*math.pow(r,2)),2)*(2*math.pow(r,2) + math.pow(h,2)*math.pow(r,2)))/(2*math.pow(math.pow(h,2),2))\n    return 0\ndef area_of_waterfall_surface_with_re(r,h):\n    '''\n    Write a function to find the area of a waterfall surface given its radius and its height.\n    '''\n    print(\"\\n1. Calculate the area of a waterfall surface given its radius and its height\")\n    print(\"2. Use the left-hand rule to calculate the area of a waterfall surface given its radius and its height\")\n    print(\"3. Use the right-hand rule to calculate the area of a waterfall surface given its radius and its height\")\n    print(\"\\n\")\n    a=float(input(\"Enter the radius of the waterfall surface : \"))\n    print(\"\\n\")\n    b=float(input(\"Enter the height of the waterfall surface : \"))\n    print(\"\\n\")\n    if r <= 0.0:\n        print(\"\\n\\nError! Invalid Input\")\n        print(\"\\n\")\n    else:\n        print(\"\\n\\nThe area of a waterfall surface with given radius and height are : \")\n        print(\"\\n\\n\")\n        return (math.pow(math.pow(h,2)*(2*a*math.pow(math.pow(r,2),2) + math.pow(r,2)),2)*(2*math.pow(math.pow(r,2),2) + math.pow(h,2)*math.pow(math.pow(r,2),2)))/(2*math.pow(math.pow(h,2),2))\n    return 0\ndef area_of_waterfall_surface_with_re_and_one_other(r,h):\n    '''\n    Write a function to find the area of a waterfall surface given its radius and its height.\n    '''\n    print(\"\\n1. Calculate the area of a waterfall surface given its radius and its height\")\n    print(\"2. Use th"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\\n', '\\n: ')\n    text = text.replace('\\t', '\\t: ')\n    text = text.replace('\\r', '\\r: ')\n    text = text.replace('\\v', '\\v: ')\n    text = text.replace('.', ': ')\n    text = text.replace(',', ': ')\n    text = text.replace(';', ';: ')\n    text = text.replace('=', ': ')\n    text = text.replace('{', ': ')\n    text = text.replace('}', ': ')\n    text = text.replace('(', ': ')\n    text = text.replace(')', ': ')\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace('_', ':')\n    text = text.replace('!', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('?', ':')\n    text = text.replace('@', ':')\n    text = text.replace('$', ':')\n    text = text.replace('%', ':')\n    text = text.replace('&', ':')\n    text = text.replace('*', ':')\n    text = text.replace('+', ':')\n    text = text.replace('-', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('_', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace(']', ']')\n    text = text.replace('[', '[')\n    text = text.replace(']', ']')\n    text = text.replace('(', '(')\n    text = text.replace(')', ')')\n    text = text.replace('{', '{')\n    text = text.replace('}', '}')\n    text = text.replace('[', '[')\n    text = text.replace(']', ']')\n    text = text.replace('(', '(')\n    text = text.replace(')', ')')\n    text = text.replace('\"', '\"')\n    text = text.replace('\"', '\"')\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"`\", \"`\")\n    text = text.replace(\"`\", \"`\")\n    text = text.replace('\"', \"'\")\n    text = text.replace('\"', \"'\")\n    text = text.replace(\"'\", \"')\")\n    text = text.replace('\"', \"')\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"`\", \"`\")\n    text = text.replace(\"`\", \"`\")\n    text = text.replace(\"\u00b4\", \"'\")\n    text = text.replace(\"`\", \"`\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    text = text.replace(\"\u00b4\", \"\u00b4\")\n    tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces with :\n    text = text.replace(' ', ':')\n    # replace commas with,\n    text = text.replace(',', ':')\n    # replace dots with:\n    text = text.replace('.', ':')\n    return text\ndef normalize_word(text):\n    '''\n    Write a function to normalize a word from the base of a Hebrew language.\n    '''\n    # replace with colon\n    text = text.replace(':', ':')\n    # remove starting or ending punctuation\n    text = text.replace('-', '')\n    # remove excessive spaces\n    text = re.sub(' +','', text)\n    # remove all whitespace\n    text = text.replace(' ', '')\n    # remove extra newlines\n    text = re.sub('\\n','', text)\n    # remove all hashtags\n    text = text.replace('#', '')\n    # remove all '-'-symbols\n    text = re.sub('-','', text)\n    # remove '-', '.','', '\\n'\n    text = re.sub(' +','', text)\n    # remove consecutive characters\n    text = re.sub('\\|','', text)\n    # remove extra space\n    text = re.sub(' +','', text)\n    # remove extra space\n    text = re.sub(' +','', text)\n    # remove extra space\n    text = re.sub(' +','', text)\n    # remove all underscores\n    text = re.sub('_','', text)\n    # remove all spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove the extra space\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.sub(' +','', text)\n    # remove extra spaces\n    text = re.su"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\",\",\" \")\n    text = text.replace(\".\",\" \")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\";\",\" :\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_without_spaces = ''\n    text_with_dots = ''\n    text_without_dots = ''\n    text_without_spaces = re.sub(r'( ){2,}', ': ', text)\n    text_without_dots = re.sub(r'( ){2,}', ': ', text)\n    text_with_dots = re.sub(r'( ){2,}', ': ', text)\n    return text_without_spaces, text_with_dots\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # E.g. \"A: B: C: D\" becomes \"A:2:3:4:5:6:7\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A: B: C: D\" becomes \"A:2:3:4:5:6:7\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A: B: C: D\" becomes \"A:2:3:4:5:6\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A: B: C: D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<=[^\\s,]|\\.|\\s|$))+',' ',text)\n    # E.g. \"A:B:C:D\" becomes \"A:B:C:D\"\n    text = re.sub(r'(?:[^\\s,]|(?<="
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for x in [' ', ',', '.', '-', '_']:\n        text = text.replace(x, ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\n\\r\\t,_]',' : ',text)\n    text = re.sub(r'[ ]+',' : ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    text = re.sub(r'[ ]+',': ',text)\n    tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(?:\\s|,|\\.|\\;|\\:|\\!|!|\\?|\\:|\\?|;|\\*|\\+|\\=|=|:|\\,|\\.|\\:|\\;|\\)|\\%|\\!)\\s'\n    return re.sub(pattern, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"\\s+\", \":\", text)\ndef replace_spaces(text):\n    '''\n    Write a function to replace any spaces with a colon.\n    '''\n    return re.sub(r\"\\s+\", \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_list = text.split(' ')\n    text_new = ''\n    for i in range(len(text_list)):\n        if i == len(text_list)-1:\n            text_new = text_new + text_list[i] + ':'\n        elif text_list[i].find('.')!= -1:\n            text_new = text_new + text_list[i] + ':'\n        elif text_list[i].find('[')!= -1:\n            text_new = text_new + text_list[i] + ':'\n        elif text_list[i].find('/')!= -1:\n            text_new = text_new + text_list[i] + ':'\n        else:\n            text_new = text_new + text_list[i] + ':'\n    return text_new\n    \ndef replace_specialchar_with_new_line(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_list = text.split(' ')\n    text_new = ''\n    for i in range(len(text_list)):\n        if i == len(text_list)-1:\n            text_new = text_new + text_list[i] + '\\n'\n        elif text_list[i].find('.')!= -1:\n            text_new = text_new + text_list[i] + '\\n'\n        elif text_list[i].find('[')!= -1:\n            text_new = text_new + text_list[i] + '\\n'\n        elif text_list[i].find('/')!= -1:\n            text_new = text_new + text_list[i] + '\\n'\n        else:\n            text_new = text_new + text_list[i] + '\\n'\n    return text_new\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + ((r - l) >> 1)\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            index = i\n            break\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Very slow, but works\n    # '''\n    # if x in A:\n    #     return A.index(x)\n    # else:\n    #     index_of_first = 0\n    #     for i, element in enumerate(A):\n    #         if element == x:\n    #             index_of_first = i\n    #     return index_of_first\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def is_numeric(str):\n        try:\n            float(str)\n        except ValueError:\n            return False\n        else:\n            return True\n    \n    def find_first_occurrence_naive(A, x):\n        if len(A) == 0:\n            return -1\n        if A[0] == x:\n            return 0\n        i = 1\n        while i < len(A):\n            if A[i] <= x:\n                i += 1\n            else:\n                break\n        return i - 1\n    \n    if not is_numeric(A[0]):\n        return -1\n    \n    i = 0\n    j = 0\n    while i < len(A) and j < len(A):\n        if A[i] < x:\n            i += 1\n        elif A[i] >= x:\n            j += 1\n    \n    return i - 1 if j!= len(A) else len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # search = 0\n    # for i in range(0,len(A)):\n    #     if A[i] == x:\n    #         search = i\n    #         break\n    # return search\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # Initiate a dictionary to store the indexes of the found occurrences.\n    index_dictionary = {}\n    \n    # Start from the beginning of the array.\n    for i in range(len(A)):\n        \n        # Check if the value is in the dictionary, if it is, add the index and set the value to the dictionary\n        if A[i] in index_dictionary:\n            index_dictionary[A[i]] += i\n        else:\n            index_dictionary[A[i]] = i\n            \n    # If the search value is present in the dictionary, return the index of the value\n    if x in index_dictionary:\n        return index_dictionary[x]\n    else:\n        return -1\n    \n    "
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # if array is empty, return -1.\n    if not A:\n        return -1\n    \n    # find the first occurance of the number.\n    # use binary search.\n    # since range function could't work because the range is not sorted\n    # so we have to use range to find the first occurance.\n    # if the number is not present, return -1.\n    first_occurrence = int(math.ceil(math.log(len(A),2)))\n    first_index = -1\n    for i in range(len(A)):\n        if A[i] == x:\n            first_index = i\n            break\n    \n    # find the first occurance.\n    if first_index!= -1:\n        # if the number is found\n        return first_index\n    \n    # if the number is not found.\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # declare a variable to find\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def sum_Of_Subarray(arr):\n        total=0\n        for i in arr:\n            total+=i\n        return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(map(sum,combinations(arr,len(arr))))\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from collections import Counter\n    counter = Counter(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if counter[arr[i]]!= 0:\n            sum += arr[i]*counter[arr[i]]\n            counter[arr[i]] -= 1\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #for i in range(len(arr)):\n    #    print(sum(arr[i:i+2]))\n    #    sum=sum(sum(arr[i:i+2]))\n    #    print(sum)\n    return sum(sum(arr[i:i+2]) for i in range(0, len(arr), 2))\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # TODO: Write a function that takes an input list and returns the sum of products of all possible sublists of the list\n    # HINT: https://www.geeksforgeeks.org/sum-of-all-possible-subarrays/\n    \n    sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if arr[i] % 2 == 1:\n                sum *= arr[i]\n        else:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    arr = sorted(arr)\n    \n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n        \n    return prod"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Creating a list of all possible sublists of the given list\n    n = len(arr)\n    if n == 0:\n        return 0\n    else:\n        i = 0\n        while i < n:\n            subarrays = [arr[i]]\n            for j in range(i+1, n):\n                if arr[i] == arr[j]:\n                    i = j + 1\n                    break\n                else:\n                    subarrays.append(arr[i])\n            subarrays.append(arr[n-1])\n            result = sum(subarrays)\n            return result\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    i, j = 0, 0\n    product = 1\n    sum_of_products = 0\n    while i < len(arr):\n        product = arr[i] * arr[j]\n        sum_of_products += product\n        if i < len(arr) - 1:\n            j += 1\n        if j < len(arr) - 1:\n            i += 1\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def check_Prod(arr):\n        prod_arr = 1\n        for i in range(len(arr)):\n            prod_arr = prod_arr * arr[i]\n        return prod_arr\n    \n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            count += check_Prod(arr[i:j+1])\n    return count\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = 0\n    for i in range(len(n) - 1):\n        result += (n[i] ^ n[i + 1])\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    return bin(n ^ (n >> 1))[2:].rjust(n.bit_length())\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n % 2 == 0:\n        n = n//2\n        n = n - 1\n    else:\n        n = n - 1\n        n = n + 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # use bitwise NOT to toggle bits\n    return (n ^ (1 << n.bit_length()-1))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Declare a new list for the bits and an updated list of bits\n    bits = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    This function takes an integer as input and returns it as a hexadecimal string. \n    It accepts a list or a tuple as an input and returns it as a hexadecimal string. \n    '''\n    def toggle_bits(x):\n        if x < 0:\n            x += 2**32\n        elif x > 2**32 - 1:\n            x -= 2**32\n        return hex(x)[2:]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    lst=list(bin(n)[2:])\n    lst[0]=\"0\"\n    lst[-1]=\"1\"\n    for i in range(len(lst)):\n        lst[i]=\"0\" if lst[i]==\"1\" else \"1\"\n    lst=tuple(lst)\n    return \"\".join(lst)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    r = 0\n    if n >= 0:\n        r = n % 2\n    else:\n        r = n % 2 ^ 1\n    return r\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = 0\n    for i in range(1, n+1):\n        res ^= i\n    if (res & (1<<(n-1))):\n        return 1\n    return 0\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    l = n & 0xFF; \n    n >>= 8;\n    r = n & 0xFF;\n    l <<= 8;\n    n >>= 8;\n    r <<= 8;\n    n &= 0xFF;\n    return l,r;\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return -1\n    else:\n        return index-1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Note: This function is usually implemented in __lt__ function. It is meant to be used in Linear Search.\n    l = 0\n    r = len(a) - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    count = len(a)\n    \n    if count <= 1:\n        return count\n    \n    mid = count // 2\n    if a[mid] > x:\n        return self.left_insertion(a, x, mid)\n    else:\n        if mid == 0 or x < a[mid - 1]:\n            return mid\n        else:\n            return self.left_insertion(a, x, mid - 1)\n        \ndef left_insertion_sorted(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    count = len(a)\n    \n    if count <= 1:\n        return count\n    \n    mid = count // 2\n    if a[mid] > x:\n        return self.left_insertion_sorted(a, x, mid)\n    else:\n        if mid == 0 or x < a[mid - 1]:\n            return mid\n        else:\n            return self.left_insertion_sorted(a, x, mid - 1)\n        \ndef quick_sort(a, l, r):\n    '''\n    Return a sorted array in O(lg n) in time\n    '''\n    if l < r:\n        p = partition(a, l, r)\n        quick_sort(a, l, p - 1)\n        quick_sort(a, p + 1, r)\n        \ndef partition(a, l, r):\n    '''\n    Create a left-most empty slot in O(l)\n    '''\n    p = a[l]\n    i = l\n    j = l + 1\n    while j < r:\n        if a[j] < p:\n            a[i] = a[j]\n            i += 1\n        else:\n            a[i] = a[r]\n            j += 1\n            i += 1\n    a[i] = a[r]\n    a[r] = p\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    while a[left] < x:\n        left += 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # You are given a sorted array of integers.\n    # You should return the index where the value that is to be inserted in the array is located.\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # find the first element greater than x\n    if a[0] < x:\n        return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i - 1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    return i - 1\n    \ndef right_insertion_small(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    return i - 1\n    \ndef pop_left(a, l, i):\n    '''\n    Write a function to pop the leftmost element in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use index l to determine which leftmost element to pop\n    j = bisect.bisect_left(a, l, i) - 1\n    return a[j]\n    \ndef pop_right(a, l, i):\n    '''\n    Write a function to pop the rightmost element in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use index l to determine which rightmost element to pop\n    j = bisect.bisect_right(a, l, i) - 1\n    return a[j]\n    \ndef pop_left_small(a, l, i):\n    '''\n    Write a function to pop the leftmost element in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use index l to determine which leftmost element to pop\n    j = bisect.bisect_left(a, l, i) - 1\n    return a[j]\n    \ndef pop_right_small(a, l, i):\n    '''\n    Write a function to pop the rightmost element in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use index l to determine which rightmost element to pop\n    j = bisect.bisect_right(a, l, i) - 1\n    return a[j]\n    \ndef get_min(a):\n    '''\n    Write a function to get the minimum element in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[0]\n    \ndef get_max(a):\n    '''\n    Write a function to get the maximum element in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[-1]\n    \ndef get_median(a):\n    '''\n    Write a function to get the middle element in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    if l % 2 == 0:\n        return (a[l//2] + a[l//2 - 1]) / 2\n    else:\n        return a[l // 2]\n    \ndef get_average(a):\n    '''\n    Write a function to get the average of a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return sum(a) / len(a)\n    \ndef get_mode(a):\n    '''\n    Write a function to get the mode of a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[len(a) // 2]\n    \ndef get_median_and_mode(a):\n    '''\n    Write a function to get the median and the mode of a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    if l % 2 == 0:\n        return (a[l // 2] + a[l // 2 - 1]) / 2\n    else:\n        return a[l // 2]\n    \ndef get_top_n(a, n):\n    '''\n    Write a function to get the top n elements in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    if l <= n:\n        return a[:n]\n    else:\n        return a[l - n : l]\n    \ndef get_top_n_small(a, n):\n    '''\n    Write a function to get the top n elements in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    if l <= n:\n        return a[:n]\n    else:\n        return a[l - n : l]\n    \ndef get_top_n_median(a):\n    '''\n    Write a function to get the top n elements in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    if l <= 1:\n        return a[0]\n    else:\n        return a[l//2]\n    \ndef get_top_n_small_median(a, n):\n    '''\n    Write a function to get the top n elements in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    if l <= 1:\n        return a[0]\n    else:\n        return a[l//2]\n        \ndef get_most_common(a, n):\n    '''\n    Write a function to get the most common elements in a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    if l <= n:\n        return a[:n]\n    else:\n        return a[l - n : l]\n    \ndef get_sort_key(a, k):\n    '''\n    Write a function to get a sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    start, stop = 0, len(a) - 1\n    while start <= stop:\n        middle = (start + stop) // 2\n        if a[middle] < x:\n            start = middle + 1\n        else:\n            stop = middle - 1\n    return start\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if a[i] == x else i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return -1\n    else:\n        return i-1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex, string)\n    return bool(result)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a','e','i','o','u']\n    if any(char.lower() in vowels for char in string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'AEIOU': \n        return string[0] == 'A'\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if all(c in vowels for c in string): \n        return True\n    return False \ndef remove_vowels(string):\n    '''\n    Write a function to remove the vowels from a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        string = string.replace(vowel, '')\n    return string\ndef remove_non_alphabet(string):\n    '''\n    Write a function to remove the non alphabetic characters from a given string.\n    '''\n    non_alph = '^[a-zA-Z]*$'\n    for non_alphabet in non_alph:\n        string = string.replace(non_alphabet, '')\n    return string \ndef remove_numbers(string):\n    '''\n    Write a function to remove all the digits from a given string.\n    '''\n    digits = '^\\d$'\n    for number in digits:\n        string = string.replace(number, '')\n    return string\ndef is_valid(st): \n    '''\n    Write a function to check whether the given string is valid.\n    '''\n    if check_str(st) == True and st.islower() == True and st.isupper() == True and st[0].isalpha() == True and check_str(st[1:]) == True and st[-1] == '.':\n        return True\n    else:\n        return False \n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Write your code here\n    if re.search(regex, string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith(\"a\"): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #1. check if it starts with a vowel \n    if string[0] in 'aeiouAEIOU': \n        if string[0].lower() == 'v': \n            return True\n    #2. check if it starts with a consonant \n    if string[0] in 'bcdfghjklmnpqrstvwxyz': \n        if string[0].lower() == 'c': \n            return True\n    #3. check if it starts with a number \n    if string[0] in '1234567890': \n        if string[0].isnumeric() == True: \n            return True\n    #4. check if it starts with a dash \n    if string[0] in '-': \n        if string[0].isnumeric() == True: \n            return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\nprint(geometric_sum(4))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n * geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def helper(n):\n        if n == 1:\n            return 1\n        else:\n            return n * helper(n-1)\n    return helper(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum_rec(n):\n        if n==1:\n            return 1\n        else:\n            return n*geometric_sum_rec(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    n = str(n)\n    def geometric_sum(n):\n        if n == 1:\n            return n\n        else:\n            return n + geometric_sum(n - 1)\n    return geometric_sum(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return n\n    # return sum of the first n elements (n-1)\n    return (n*geometric_sum(n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    '''\n    I made this function because it takes a list of numbers and to find the smallest number, we need to find the index of the first number, and then we need to find the index of the smallest number in the list, but in case, the smallest number in the list will be at index 0. So, the index of the first number in the list is -1, which is the lowest number.\n    '''\n    def find_Index_L(n,numbers):\n        if (n==0):\n            return 0\n        elif (n==1):\n            return 1\n        else:\n            return find_Index_L(n-1,numbers)+numbers.index(min(numbers))\n    #print(find_Index_L(n,numbers))\n    return find_Index_L(n,numbers)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest = math.ceil(math.log(n,2))\n    if smallest < 1: \n        return smallest\n    else: \n        for i in range(1, smallest):\n            if n%i == 0: \n                return i-1\n        return smallest\ndef main(): \n    a = find_Index(input(\"Enter your number: \"))\n    print(a)\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    print(f'index of the {n} smallest triangular number is {n}')\n    \n    # A simple heuristic is to use this value as the pivot point. \n    pivot = (n//2)+1\n    \n    # The only comparison we have is with the reference array, so we can use the \"==\" operator\n    for i in range(pivot,n+1):\n        if i == pivot:\n            return 1\n        elif i % pivot == 0:\n            return 2\n        else:\n            return 3\n    \n    # If we reach here, it means that there are two pivots. \n    return -1\n    \ndef find_Index_2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # A simple heuristic is to use this value as the pivot point. \n    pivot = n//2\n    \n    # The only comparison we have is with the reference array, so we can use the \"==\" operator\n    for i in range(n,1,-1):\n        if i == pivot:\n            return 1\n        elif i % pivot == 0:\n            return 2\n        else:\n            return 3\n    \n    # If we reach here, it means that there are two pivots. \n    return -1\n    \ndef gcd(x,y):\n    '''\n    A Python function to find the GCD of two integers.\n    '''\n    if x == y:\n        return x\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return(i)\n    return -1\n    \ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef mod_inverse(a, p):\n    n = p - 1\n    u = 1\n    v = 0\n    while (a > 0):\n        q = a // p\n        r = a % p\n        a = p\n        p = r\n        u = u * q\n        v = v + q * u\n    if n!= v:\n        return -1\n    else:\n        return u\n        \ndef is_prime_number(n):\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = [] \n    for i in range(1, n+1): \n        l.append(i) \n    for j in range(n - 1): \n        l[j + 1] = l[j] + 1\n    for k in range(n): \n        if (l[k] % 2 == 0): \n            return k \n    return -1 \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0:\n        return 0\n    a = n-1\n    for i in range(n//2, -1, -1):\n        if a%10==0:\n            return i\n        a = a//10\n    return n-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code here\n    # if n == 1:\n    #     print(1)\n    #     return 1\n    # elif n == 2:\n    #     print(2)\n    #     return 2\n    # elif n == 3:\n    #     print(3)\n    #     return 3\n    # elif n == 4:\n    #     print(4)\n    #     return 4\n    # elif n == 5:\n    #     print(5)\n    #     return 5\n    # elif n == 6:\n    #     print(6)\n    #     return 6\n    # elif n == 7:\n    #     print(7)\n    #     return 7\n    # elif n == 8:\n    #     print(8)\n    #     return 8\n    # elif n == 9:\n    #     print(9)\n    #     return 9\n    # elif n == 10:\n    #     print(10)\n    #     return 10\n    # elif n == 11:\n    #     print(11)\n    #     return 11\n    # elif n == 12:\n    #     print(12)\n    #     return 12\n    # elif n == 13:\n    #     print(13)\n    #     return 13\n    # elif n == 14:\n    #     print(14)\n    #     return 14\n    # elif n == 15:\n    #     print(15)\n    #     return 15\n    # elif n == 16:\n    #     print(16)\n    #     return 16\n    # elif n == 17:\n    #     print(17)\n    #     return 17\n    # elif n == 18:\n    #     print(18)\n    #     return 18\n    # elif n == 19:\n    #     print(19)\n    #     return 19\n    # elif n == 20:\n    #     print(20)\n    #     return 20\n    # elif n == 21:\n    #     print(21)\n    #     return 21\n    # elif n == 22:\n    #     print(22)\n    #     return 22\n    # elif n == 23:\n    #     print(23)\n    #     return 23\n    # elif n == 24:\n    #     print(24)\n    #     return 24\n    # elif n == 25:\n    #     print(25)\n    #     return 25\n    # elif n == 26:\n    #     print(26)\n    #     return 26\n    # elif n == 27:\n    #     print(27)\n    #     return 27\n    # elif n == 28:\n    #     print(28)\n    #     return 28\n    # elif n == 29:\n    #     print(29)\n    #     return 29\n    # elif n == 30:\n    #     print(30)\n    #     return 30\n    # elif n == 31:\n    #     print(31)\n    #     return 31\n    # elif n == 32:\n    #     print(32)\n    #     return 32\n    # elif n == 33:\n    #     print(33)\n    #     return 33\n    # elif n == 34:\n    #     print(34)\n    #     return 34\n    # elif n == 35:\n    #     print(35)\n    #     return 35\n    # elif n == 36:\n    #     print(36)\n    #     return 36\n    # elif n == 37:\n    #     print(37)\n    #     return 37\n    # elif n == 38:\n    #     print(38)\n    #     return 38\n    # elif n == 39:\n    #     print(39)\n    #     return 39\n    # elif n == 40:\n    #     print(40)\n    #     return 40\n    # elif n == 41:\n    #     print(41)\n    #     return 41\n    # elif n == 42:\n    #     print(42)\n    #     return 42\n    # elif n == 43:\n    #     print(43)\n    #     return 43\n    # elif n == 44:\n    #     print(44)\n    #     return 44\n    # elif n == 45:\n    #     print(45)\n    #     return 45\n    # elif n == 46:\n    #     print(46)\n    #     return 46\n    # elif n == 47:\n    #     print(47)\n    #     return 47\n    # elif n == 48:\n    #     print(48)\n    #     return 48\n    # elif n == 49:\n    #     print(49)\n    #     return 49\n    # elif n == 50:\n    #     print(50)\n    #     return 50\n    # elif n == 51:\n    #     print(51)\n    #     return 51\n    # elif n == 52:\n    #     print(52)\n    #     return 52\n    # elif n == 53:\n    #     print(53)\n    #     return 53\n    # elif n == 54:\n    #     print(54)\n    #     return 54\n    # elif n == 55:\n    #     print(55)\n    #     return 55\n    # elif n == 56:\n    #     print(56)\n    #     return 56\n    # elif n == 57:\n    #     print(57)\n    #     return 57\n    # elif n == 58:\n    #     print(58)\n    #     return 58\n    # elif n == 59:\n    #     print(59)\n    #     return 59\n    # elif n == 60:\n    #     print(60)\n    #     return 60\n    # elif n == 61:\n    #     print(61)\n    #     return 61\n    # elif n == 62:\n    #     print(62)\n    #     return 62\n    # elif n == 63:\n    #     print(63)\n    #     return 63\n    # elif n == 64:\n    #     print(64)\n    #     return 64\n    # elif n == 65:\n    #     print(65)\n    #     return 65\n    # elif n == 66:\n    #     print(66)\n    #     return 66\n    # elif n == 67:\n    #     print(67)\n    #     return 67\n    # elif n == 68:\n    #     print(68)\n    #     return 68\n    # elif n == 69:\n    #     print(69)\n    #     return 69\n    # elif n == 70:\n    #     print(70)\n    #     return 70\n    # elif n == 71:\n    #     print(71)\n    #     return 71\n    # elif n == 72:\n    #     print(72)\n    #     return 72\n    # elif n == 73:\n    #     print(73)\n    #     return 73\n    # elif n == 74:\n    #     print(74)\n    #     return 74\n    # elif n == 75:\n    #     print(75)\n    #     return 75\n    # elif n == 76:\n    #     print(76)\n    #     return 76\n    # elif n == 77:\n    #     print(77)\n    #     return 77\n    # elif n == 78:\n    #     print(78)\n    #     return 78\n    # elif n == 79:\n    #     print(79)\n    #     return 7"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n        return 93\n    if n == 93:\n        return 94\n    if n == 94:\n        return 95\n    if n == 95:\n        return 96\n    if n == 96:\n        return 97\n    if n == 97:\n        return 98\n    if n == 98:\n        return 99\n    if n == 99:\n        return 100\n    if n == 100:\n        return 101\n    if n == 101:\n        return 102\n    if n == 102:\n        return 103\n    if n == 103:\n        return 104\n    if n == 104:\n        return 105\n    if n == 105:\n        return 106\n    if n == 106:\n        return 107\n    if n == 107:\n        return 108\n    if n == 108:\n        return 109\n    if n == 109:\n        return 110\n    if n == 110:\n        return 111\n    if n == 111:\n        return 112\n    if n == 112:\n        return 113\n    if n == 113:\n        return 114\n    if n == 114:\n        return 115\n    if n == 115:\n        return 116\n    if n == 116:\n        return 117\n    if n == 117:\n        return 118\n    if n == 118:\n        return 119\n    if n == 119:\n        return 120\n    if n == 120:\n        return 121\n    if n == 121:\n        return 122\n    if n == 122:\n        return 123\n    if n == 123:\n        return 124\n    if n == 124:\n        return 125\n    if n == 125:\n        return 126\n    if n == 126:\n        return 127\n    if n == 127:\n        return 128\n    if n == 128:\n        return 129\n    if n == 129:\n        return 130\n    if n == 130:\n        return 131\n    if n == 131:\n        return 132\n    if n == 132:\n        return 133\n    if n == 133:\n        return 134\n    if n == 134:\n        return 135\n    if n == 135:\n        return 136\n    if n == 136:\n        return 137\n    if n == 137:\n        return 138\n    if n == 138:\n        return 139\n    if n == 139:\n        return 140\n    if n == 140:\n        return 141\n    if n == 141:\n        return 142\n    if n == 142:\n        return 143\n    if n == 143:\n        return 144\n    if n == 144:\n        return 145\n    if n == 145:\n        return 146\n    if n == 146:\n        return 147\n    if n == 147:\n        return 148\n    if n == 148:\n        return 149\n    if n == 149:\n        return 150\n    if n == 150:\n        return 151\n    if n == 151:\n        return 152\n    if n == 152:\n        return 153\n    if n == 153:\n        return 154\n    if n == 154:\n        return 155\n    if n == 155:\n        return 156\n    if n == 156:\n        return 157\n    if n == 157:\n        return 158\n    if n == 158:\n        return 159\n    if n == 159:\n        return 160\n    if n == 160:\n        return 161\n    if n == 161:\n        return 162\n    if n == 162:\n        return 163\n    if n == 163:\n        return 164\n    if n == 164:\n        return 165\n    if n == 165:\n        return 166\n    if n == 166:\n        return 167\n    if n == 167:\n        return 168\n    if n == 168:\n        return 169\n    if n == 169:\n        return 170\n    if n == 170:\n        return 171\n    if n == 171:\n        return 172\n    if n == 172:\n        return 173\n    if n == 173:\n        return 174\n    if n == 174:\n        return 175\n    if n == 175:\n        return 176\n    if n == 176:\n        return 177\n    if n == 177:\n        return 178\n    if n == 178:\n        return 179\n    if n ="
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # if n is integer and less than or equal to 0 or greater than or equal to 9\n    if (n < 0) or (n >= 10):\n        return -1\n    # initialize index to zero\n    index = 0\n    # for every digit from 1 to n, count number of multiples\n    for i in range(1, n + 1):\n        # if i is odd, that means the number is not in the list of divisors of i\n        if (i % 2 == 1):\n            # increment index and return it if it is the smallest number\n            index = index + 1\n            return index\n        # if i is even, that means the number is in the list of divisors of i\n        else:\n            # count the number of multiples of i\n            index = index + (i // 2)\n            return index\n    # if n is greater than or equal to 10\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if(i == 1):\n            count = count + 1\n        elif(i == n-1):\n            count = count - 1\n        else:\n            if(count < count+1):\n                count = count - 1\n            else:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_tup = {}\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            result_tup[test_tup[i]] = test_tup[i+1]\n        else:\n            result_tup[test_tup[i]] = test_tup[i+1]\n            result_tup[test_tup[i]] = test_tup[i]\n    return result_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for item in test_tup:\n        dict_[item] = test_tup.index(item)\n    return dict_\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create dict using 1st tuple element\n    # Create dict using 2nd tuple element\n    \n    # Empty dict\n    res = dict()\n    \n    # Get first element\n    res['a'] = test_tup[0]\n    \n    # Get second element\n    res['b'] = test_tup[1]\n    \n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(test_tup)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    '''\n    Use an if statement to find out if the value is a tuple. If it is, then the tuple is just a tuple of numbers, and it will be turned into a list of numbers and then the dictionary will be converted into a list of tuples.\n    '''\n    '''\n    Use a function to convert a tuple to a dictionary.\n    '''\n    # Write your code here\n    test_dict = {}\n    if isinstance(test_tup[0],tuple):\n        for i in test_tup[0]:\n            test_dict[i] = test_tup[1]\n        return test_dict\n    else:\n        return test_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pair_dict = {}\n    for x in test_tup:\n        pair_dict[x[0]] = x[1]\n    return pair_dict\n    \n    \n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    # Iterate over the tuple\n    for idx, val in enumerate(test_tup):\n        # Check if there is a value in the tuple\n        if idx!= len(test_tup)-1:\n            # Get the corresponding element\n            # if the element is not a key then replace it with the value\n            d[val] = test_tup[idx+1]\n        else:\n            # if the element is a key then insert the value in the dictionary\n            d[val] = test_tup[idx]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup) - 1):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0], test_tup[1]))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    return all(l[i] == l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] == 1:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        for j in range(i+1, len(s) + 1) :\n            if (s[i:j] == s[i:j][::-1]):\n                print(s[i:j])\n                return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    assert type(s)==str, \"Invalid input type\"\n    char_set=set()\n    for char in s:\n        if char not in char_set:\n            return False\n        char_set.add(char)\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = []\n    for i in range(len(s)) :\n        result.append(s[i])\n    if len(set(result)) == len(result):\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = True\n    for c in s:\n        if c not in all_Chars:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    d = {}\n    c = 0\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i in s :\n            if i == i :\n                continue\n            else :\n                return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side * 3\n    b = math.sqrt(a**2 - 4 * side)\n    c = side / 2\n    return a * (1 + b / c)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    c = 1.25\n    if side == 'a':\n        area = (c * math.sqrt(3) * c) / 2\n    elif side == 'b':\n        area = (c * math.sqrt(3) * c) / 4\n    elif side == 'c':\n        area = (c * math.sqrt(3) * c) / 6\n    return area\ndef area_cylinder(height, radius):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    area = math.pi * (radius ** 2)\n    return area\ndef area_rectangle(length, width):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = length * width\n    return area\ndef area_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    area = math.sqrt(base * height)\n    return area\ndef area_trapezoid(height1, length1, height2, length2):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    area = 0.5 * height1 + 0.5 * length1 * height2 + 0.5 * length1 * length2 * height2\n    return area\ndef area_parallel(x, y):\n    '''\n    Write a function to caluclate the area of a parallelepipole.\n    '''\n    area = math.sqrt(x * y)\n    return area\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    if side == 'a':\n        area = math.pi * 0.25\n    elif side == 'b':\n        area = math.pi * 0.5\n    elif side == 'c':\n        area = math.pi * 0.75\n    return area\ndef area_cylinder_cylinder(height, radius, length, height2, length2):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    area = math.pi * (radius * radius) * height\n    area = area - math.pi * (radius * radius) * (height2 * length2)\n    return area\ndef area_cylinder_rectangle(height, length, radius):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    area = math.pi * (radius * radius) * height\n    area = area - (math.pi * (radius * radius) * (length * length))\n    return area\ndef area_cylinder_rectangle_triangle(height, length, radius):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    area = (math.pi * (radius * radius) * height) - (math.pi * (radius * radius) * (length * length))\n    area = area - (math.pi * (radius * radius) * (length * length)) * (length * length)\n    area = area - (math.pi * (radius * radius) * (height * height))\n    return area\ndef area_sphere(r):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    area = math.pi * (r ** 2)\n    return area\ndef area_sphere_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    area = math.pi * (radius * radius) * height\n    return area\ndef area_cube_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area = math.pi * (side ** 2)\n    return area\ndef area_cube_cylinder_cylinder(radius, height, height2, length2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area = math.pi * (radius * radius) * height\n    area = area - math.pi * (radius * radius) * (height2 * length2)\n    area = area - math.pi * (radius * radius) * (height * height2)\n    return area\ndef area_box(side):\n    '''\n    Write a function to caluclate the area of a box.\n    '''\n    area = math.pi * (side ** 2)\n    return area\ndef area_box_cylinder_cylinder(radius, height, height2, length2):\n    '''\n    Write a function to caluclate the area of a box.\n    '''\n    area = math.pi * (radius * radius) * height\n    area = area - (math.pi * (radius * radius) * (height2 * length2))\n    area = area - (math.pi * (radius * radius) * (height * height2))\n    area = area - (math.pi * (radius * radius) * (length2 * length2))\n    return area\ndef area_cylinder_sphere(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    area = math.pi * (radius * radius) * height\n    return area\ndef area_sphere_sphere(r, h):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    area = math.pi * (r * r) * h\n    return area\ndef area_sphere_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    area = math.pi * (radius * radius) * height\n    return area\ndef area_rectangle_rectangle(length, width):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = length * width\n    return area\ndef area_square_rectangle(side):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = side ** 2\n    return area\ndef area_rectangle_rectangle_triangle(length, width, height):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = (math.pi * (length * width) * height) - (math.pi * (length * width) * (height * height))\n    area = area - (math.pi * (length * width) * (height * height)) * (height * height)\n    area = area - (math.pi * (length * width) * (height * height)) * (length * length)\n    return area\ndef area_rectangle_parallelepipole(length1, width1, height1, length2, width2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = length1 * width1 * height1 * math.sqrt(length1 * width1 * length2)\n    area = area - (length1 * width1 * height1) * (width1 * width2)\n    area = area - (length2 * width2)\n    return area\ndef area_rectangle_parallelepipole_triangle(length1, width1, height1, length2, width2, height2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = length1 * width1 * height1 * math.sqrt(length1 * width1 * length2)\n    area = area - (length1 * width1 * height1) * (length2 * width2)\n    area = area - (length2 * width2)\n    area = area - (length2 * width2) * (height1 * height2)\n    return area\ndef area_rectangle_parallelepipole_cylinder(length1, width1, height1, height2, width2, length2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = length1 * width1 * height1 * math.sqrt(length1 * width1 * length2)\n    area = area - (length1 * width1 * height1) * (width1 * width2)\n    area = area - (length2 * width2)\n    area = area - (length"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    area = 4 * side**2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = 0.0\n    b = 0.0\n    c = 0.0\n    d = 0.0\n    if side == 'I':\n        a = 4.0\n        b = 4.0\n        c = -2.0\n        d = 2.0\n    elif side == 'II':\n        a = 2.0\n        b = 4.0\n        c = -2.0\n        d = 4.0\n    elif side == 'III':\n        a = 4.0\n        b = 6.0\n        c = -2.0\n        d = 6.0\n    elif side == 'IV':\n        a = 2.0\n        b = 6.0\n        c = -2.0\n        d = 6.0\n    elif side == 'V':\n        a = 1.0\n        b = 2.0\n        c = -1.0\n        d = 2.0\n    elif side == 'VI':\n        a = 1.0\n        b = 2.0\n        c = -1.0\n        d = 2.0\n    elif side == 'VII':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'VIII':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'IX':\n        a = 1.0\n        b = 2.0\n        c = -3.0\n        d = 2.0\n    elif side == 'X':\n        a = 1.0\n        b = 3.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XI':\n        a = 1.0\n        b = 3.0\n        c = -2.0\n        d = 3.0\n    elif side == 'XII':\n        a = 1.0\n        b = 3.0\n        c = -2.0\n        d = 4.0\n    elif side == 'XIII':\n        a = 1.0\n        b = 3.0\n        c = -2.0\n        d = 4.0\n    elif side == 'XIV':\n        a = 1.0\n        b = 3.0\n        c = -2.0\n        d = 4.0\n    elif side == 'XV':\n        a = 1.0\n        b = 3.0\n        c = -3.0\n        d = 4.0\n    elif side == 'XVI':\n        a = 1.0\n        b = 3.0\n        c = -3.0\n        d = 4.0\n    elif side == 'XVII':\n        a = 1.0\n        b = 3.0\n        c = -3.0\n        d = 4.0\n    elif side == 'XVIII':\n        a = 1.0\n        b = 3.0\n        c = -3.0\n        d = 4.0\n    elif side == 'XIX':\n        a = 1.0\n        b = 3.0\n        c = -4.0\n        d = 4.0\n    elif side == 'XX':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 4.0\n    elif side == 'XXI':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 4.0\n    elif side == 'XXII':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXIII':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXIV':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXV':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXVI':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXVII':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXVIII':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXIX':\n        a = 1.0\n        b = 4.0\n        c = -4.0\n        d = 6.0\n    elif side == 'XXX':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXI':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXII':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXIII':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXIV':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXV':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXVI':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXVII':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXVIII':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXXIX':\n        a = 1.0\n        b = 2.0\n        c = -2.0\n        d = 2.0\n    elif side == 'XXX':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXI':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXII':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXIII':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXIV':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXV':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXVI':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXVII':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXVIII':\n        a = 1.0\n        b = 3.0\n        c = -1.0\n        d = 3.0\n    elif side == 'XXXIX':\n        a = 1.0\n        b = 3.0\n        c = -2.0\n        d = 3.0\n    elif side == 'XX':\n        a = 1.0\n        b = 2.0\n        c = -1.0\n        d = 2.0\n    elif side == 'XXI':\n        a = 1.0\n        "
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side ** 2\n    if side > 3:\n        a = a + side ** 2\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 * math.pi * 3.14159 / 4.\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return side**3 * math.pi\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * side\ndef area_rectangle(length):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return length * length\ndef area_cone(length1,length2):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return length1 * length2 * math.sqrt(2.0)\ndef area_cuboid(a,b,c,d):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return (a*c)*(b*d)\ndef volume_cuboid(a,b,c,d):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return a * c * d\ndef volume_rectangle(length1, length2):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length1 * length2 * math.sqrt(2.0)\ndef volume_rectangle_f(length):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length * math.sqrt(2.0)\ndef volume_cone(length1,length2):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (length1 * length2 * math.sqrt(2.0))\ndef volume_cuboid(a,b,c,d):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return a * b * c * d\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side * side * side * side\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return (a * b) * (c * b)\ndef volume_circle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a circle.\n    '''\n    return math.sqrt(a * b * c)\ndef volume_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return math.sqrt(a * b * c * math.cos(math.pi/2) )\ndef volume_ellipsoid(a,b,c,d):\n    '''\n    Write a function to caluclate the volume of an ellipsoid.\n    '''\n    return (a * b) * (c * d) * math.sin(math.pi * d)\ndef volume_circle_in_triangle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a circle in a triangle.\n    '''\n    return (a * b) * (c * math.cos(math.pi/2) )\ndef volume_ellipsoid_in_triangle(a,b,c,d):\n    '''\n    Write a function to caluclate the volume of an ellipsoid in a triangle.\n    '''\n    return (a * b) * (c * d * math.cos(math.pi/2) )\ndef volume_cone_in_triangle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a cone in a triangle.\n    '''\n    return (a * b) * (c * math.sqrt(3) )\ndef volume_rectangle_in_triangle(length1,length2):\n    '''\n    Write a function to caluclate the volume of a rectangle in a triangle.\n    '''\n    return length1 * length2 * math.sqrt(3)\ndef volume_ellipsoid_in_rectangle(a,b,c):\n    '''\n    Write a function to caluclate the volume of an ellipsoid in a rectangle.\n    '''\n    return (a * b) * (c * math.sqrt(3) )\ndef volume_circle_in_rectangle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a circle in a rectangle.\n    '''\n    return a * b * math.sqrt(3)\ndef volume_sphere_in_rectangle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a rectangle.\n    '''\n    return (a * b * math.sqrt(3))\ndef volume_sphere_in_circle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a circle.\n    '''\n    return (a * b * math.cos(math.pi/2) )\ndef volume_circle_in_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a circle in a sphere.\n    '''\n    return (a * b * math.cos(math.pi/2) )\ndef volume_ellipsoid_in_sphere(a,b,c,d):\n    '''\n    Write a function to caluclate the volume of an ellipsoid in a sphere.\n    '''\n    return (a * b * math.cos(math.pi/2) ) * (c * d) * math.sin(math.pi * d)\ndef volume_triangle_in_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a triangle in a sphere.\n    '''\n    return (a * b * c) * math.sqrt(3)\ndef volume_ellipsoid_in_sphere(a,b,c,d):\n    '''\n    Write a function to caluclate the volume of an ellipsoid in a sphere.\n    '''\n    return (a * b * c * math.cos(math.pi/2) ) * math.sin(math.pi * d)\ndef volume_circle_in_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a circle in a sphere.\n    '''\n    return a * b * c * math.sqrt(3)\ndef volume_sphere_in_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a sphere.\n    '''\n    return a * b * c * math.sqrt(3)\ndef volume_sphere_in_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a sphere.\n    '''\n    return a * b * c * math.sqrt(3)\ndef volume_sphere_in_circle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a sphere.\n    '''\n    return a * b * math.sqrt(3)\ndef volume_circle_in_circle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a circle.\n    '''\n    return a * b * math.sqrt(3)\ndef volume_circle_in_circle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a circle.\n    '''\n    return a * b * math.sqrt(3)\ndef volume_circle_in_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a sphere.\n    '''\n    return a * b * math.sqrt(3)\ndef volume_circle_in_sphere(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a sphere.\n    '''\n    return a * b * math.sqrt(3)\ndef volume_sphere_in_circle(a,b,c):\n    '''\n    Write a function to caluclate the volume of a sphere in a sphere.\n    '''\n    return a * b * math.sqrt(3)"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1.0/6.0*side**3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    for i in range(length):\n        for j in range(length - i - 1):\n            list[j], list[length - j - 1] = list[length - j - 1], list[j]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    size = len(list)\n    m = m % size\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # FILL IN YOUR CODE HERE\n    return [list[n] for n in range(len(list))"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > len(list) - 1:\n        print(\"List does not have enough items to rotate a list.\\n\")\n        return list\n    else:\n        new_list = []\n        for i in range(m, len(list)):\n            new_list.append(list[i])\n        for i in range(len(list) - m - 1, len(list)):\n            new_list.append(list[i])\n        print(new_list)\n        return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n < m:\n        n = m\n    # make list of len(list) elements\n    result = []\n    for i in range(n):\n        result.append(list[i])\n    # looping till n elements\n    for i in range(n):\n        for j in range(n-i-1):\n            result[j], result[j+1] = result[j+1], result[j]\n    # returning result\n    return result\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    def rotated(number):\n        return list[number:] + list[:number]\n    \n    if len(list) < m:\n        print('Please enter an integer greater than the list')\n        return\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print('rotate_right')\n    if(m == 1):\n        return list\n    else:\n        new_list = []\n        for ele in list:\n            new_list.append(ele[1:])\n        return new_list\n        \ndef swap(list, i, j):\n    '''\n    Write a function that swaps the values of the first and the second items of a given list.\n    '''\n    print('swap')\n    if(i==j):\n        return list\n    if(i<j):\n        tmp = list[i]\n        list[i] = list[j]\n        list[j] = tmp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # create a list of length n - 1\n    new_list = []\n    \n    # iterate through n - 1 items of the list\n    for i in range(len(list) - 1, -1, -1):\n        new_list.append(list[i])\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        print('Tuple is None')\n    else:\n        print('Tuple is not None')\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] is None:\n            print('None value in tuple: ', i)\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if all(x == None for x in test_tup):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None or test_tup == (None, None):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # For loop to iterate through all of the elements in the tuple.\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for i in test_tup:\n        if i is None:\n            none_count += 1\n    if none_count > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        test_tup[0]\n    except:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == None:\n            return False\n    return True\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = []\n    for i in range(0, 10):\n        digits.append(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def get_divisibles_by_digit(start, end, divisibles):\n        '''\n        Return the starting number and ending number,\n        divisible by every digit it contains,\n        in a list, where each list contains the numbers in one digit.\n        '''\n        # range(start, end+1, 1)\n        for divisibles_iter in range(1,10):\n            for divisibles_in_digit_iter in range(start, 10**divisibles_iter):\n                yield divisibles_in_digit_iter**divisibles_iter\n    \n    # function to filter out numbers that are not divisible by every digit it contains\n    def filter_by_divisibles(number, divisibles):\n        '''\n        Filter a number by only numbers that contain every digit it contains.\n        '''\n        for divisibles_iter in divisibles:\n            if divisibles_iter*number % divisibles_iter == 0:\n                yield divisibles_iter\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for i in range(startnum, endnum+1):\n        if (int(i) % int(startnum) == 0):\n            mylist.append(i)\n    return mylist\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    \n    print(\"Divisible by digits:\")\n    \n    for num in range(startnum, endnum + 1):\n        if(num%1 == 0):\n            print(num, end=' ')\n            \nprint(divisible_by_digits(1, 100))"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # define a function that will return True if the number passed in is within the range of the given range, False otherwise\n    def divisible_by_range(num, low, high):\n        return True if num % low == 0 and num % high == 0 else False\n    \n    # loop through the given range from low to high (inclusive)\n    for num in range(startnum, endnum):\n        # check if each digit from the range is divisible by every digit\n        if divisible_by_range(num, 10, 9):\n            # if so, check if the number is divisible by every digit it contains\n            if divisible_by_range(num, 10, 1):\n                # return the number only if it is divisible by every digit it contains\n                return num\n    \n    # the number doesn't appear to be divisible by every digit\n    return \"This isn't divisible by every digit it contains\"\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    div_sum = 0\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            div_sum += 1\n        if div_sum % 10 == 0:\n            return print(i)\n        \nstartnum = 0\nendnum = 999\nprint(divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for x in range(startnum, endnum+1):\n        if x % 10 == 0:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    start = startnum\n    end = endnum\n    end_digits = end//10\n    start_digits = start//10\n    start_digit_index = 0\n    end_digit_index = 0\n    for i in range(start_digit_index,end_digit_index):\n        start_digit_index += 1\n        end_digit_index += 1\n        if start%10 == 0:\n            start = 0\n            break\n    start_digit_index -= 1\n    if end%10 == 0:\n        end = 0\n    else:\n        end = 10\n    end_digits = end//10\n    start_digits = start//10\n    return start_digit_index, end_digit_index, start_digits, end_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for digit in range(0, 10):\n        lst.append(startnum%10)\n        startnum = startnum/10\n    for digit in range(0, len(lst)):\n        if lst[digit] == endnum:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_digit(n):\n        return (n >= 10 and n % 10 == 0)\n    \n    def is_divisible_by_digits(n):\n        return (n % 10 == 0)\n    \n    # find divisors\n    def divisors(num):\n        return set(map(lambda x: x, range(1, num + 1)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a >= 180) and (a <= 360):\n        if ((a >= 360/3) and (r > 3)) or ((a >= 360/2) and (r > 2)) or ((a >= 360/1.5) and (r > 1.5)):\n            return 0\n        else:\n            return None\n    elif (a <= 180) and (a > 90):\n        if ((a <= 90/3) and (r > 3)) or ((a <= 90/2) and (r > 2)) or ((a <= 90/1.5) and (r > 1.5)):\n            return 0\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>=1.0 and a<math.pi:\n        return round(((2*math.pi*r*(r**3))/360),2)\n    else:\n        return None\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>=1.0 and a<math.pi:\n        return round(((2*math.pi*r*(r**3))/360),2)\n    else:\n        return None\ndef sector_volume_2(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>=1.0 and a<math.pi:\n        return round(((2*math.pi*r*(r**3))/360),2)\n    else:\n        return None\ndef angle(r,a):\n    '''\n    Write a function to calculate the angle. The function takes the radius and angle as inputs. The angle should be calculated as \u03c0/r^2\n    '''\n    if r>=1.0 and a<math.pi:\n        return round(math.pi/r**2,2)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = r * math.sin(a * math.pi / 180)**2\n    return area\ndef sector_perimeter(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs. Function should return the perimeter of the sector.\n    '''\n    perimeter = 2*math.pi*r * math.cos(a * math.pi / 180)\n    return perimeter\ndef sector_perim_angle(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs. Function should return the angle between the perimeter and the sector.\n    '''\n    perimeter = 2*math.pi*r * math.cos(a * math.pi / 180)\n    return math.degrees(math.atan(perimeter/sector_perimeter(r,a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    theta = math.atan2(r,a)\n    if theta < 0:\n        theta = 360 + theta\n    return theta\ndef point_area(x,y,a):\n    '''\n    Write a function to find area of a point. The function takes the x and y coordinates, and the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.sqrt((x-a)**2 + (y-a)**2)\ndef point_section_area(x,y,z,r,a):\n    '''\n    Write a function to find area of a point within a section. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)\n    return sec_area\ndef point_section_to_point(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a section within a point. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return point_area(x,y,a)*r*(math.cos(z/r))\ndef point_section_to_sector(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a section within a point. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return point_area(x,y,a)*(math.cos(z/r))\ndef sector_to_point(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a point. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)\n    return sec_area\ndef sector_to_sector(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)\n    return sec_area\ndef sector_to_sector_area(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*(math.cos(z/r))*(math.cos(z/r))\n    return sec_area\ndef sector_to_sector_to_sector(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)\n    return sec_area\ndef sector_to_sector_to_sector_area(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*(math.cos(z/r))*(math.cos(z/r))\n    return sec_area\ndef sector_to_sector_to_sector_to_sector(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)\n    return sec_area\ndef sector_to_sector_to_sector_to_sector_area(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))\n    return sec_area\ndef sector_to_sector_to_sector_to_sector_to_sector(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))\n    return sec_area\ndef sector_to_sector_to_sector_area_from_sector_area(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))\n    return sec_area\ndef sector_to_sector_area_from_sector(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))\n    return sec_area\ndef sector_to_sector_to_sector_to_sector_area(x,y,z,r,a):\n    '''\n    Write a function that calculates the area of a sector within a sector. The function takes the x and y coordinates, the z coordinate, the radius, the angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sec_area = sector_area(r,a)*math.sqrt(1-(math.cos(z/r))**2 + (math.sin(z/r))**2)*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))*(math.cos(z/r))*(math"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    r = math.radians(r)\n    return r*a*math.cos(r)*math.sin(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=math.radians(a)\n    if math.degrees(a)>360:\n        return 'Angle out of range'\n    \n    phi = math.asin(r/math.cos(a))\n    x = math.cos(a)\n    y = math.sin(a)\n    return round(((2*x*y)-1),2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    delta = math.pi/180\n    if (delta*r < math.pi*a):\n        return None\n    else:\n        return (r*r*math.sin(delta*a/360))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a == 0:\n        return r*r*math.pi\n    elif a == 90:\n        return r*math.pi\n    elif a == 180:\n        return r*math.pi*math.cos(math.pi/2)\n    elif a == 270:\n        return r*math.pi*math.cos(math.pi/2)*math.cos(math.pi/4)\n    elif a == 360:\n        return r*math.pi*math.cos(math.pi/2)*math.cos(math.pi/4)*math.cos(math.pi/4)\n    else:\n        print(\"Error. Sector angles must be in range 0, 90, 180, or 270.\")\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a<0) or (a>360):\n        print(\"Error: angle must be between 0 and 360 degrees\")\n        return\n    if r<0:\n        print(\"Error: radius must be positive\")\n        return\n    if r>2*math.pi:\n        print(\"Error: radius must be between 0 and 2pi\")\n        return\n    if a==360:\n        a=0\n    area=r*math.sin(a/2)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r*a\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #To store the length of each letter of the first sequence\n    S1 = [len(s) for s in X]\n    #To store the length of each letter of the second sequence\n    S2 = [len(s) for s in Y]\n    #To store the length of each letter of the third sequence\n    S3 = [len(s) for s in Z]\n    #Function to create a subarray from the array.\n    #This subarray is also called a 3D array.\n    #For example, S[0] = [1,2,3] means that it contains the substring a[0],a[1] and a[2].\n    #To create the subarray, we simply take the 1st and 2nd values.\n    #For example, if we take the value of 3, we get [0,2], because 3 appears at 3rd position.\n    #To find the max length of a subarray, we do it by looping through the array and checking if its length is greater than 1.\n    #If there are no more than 2 values left, then we return the max length of the 3 values.\n    def lcs_3d(X, Y, Z): \n        #To store the length of each letter of the first sequence\n        S1 = [len(s) for s in X]\n        #To store the length of each letter of the second sequence\n        S2 = [len(s) for s in Y]\n        #To store the length of each letter of the third sequence\n        S3 = [len(s) for s in Z]\n        #To store the longest common subsequence of the 3 sequences\n        LCS = [[0, 0, 0] for i in range(len(X) + 1)]\n        for i in range(1, len(X) + 1):\n            for j in range(1, len(Y) + 1):\n                if X[i - 1] == Y[j - 1]:\n                    LCS[i][j] = LCS[i - 1][j - 1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n        return LCS[-1][-1]\n    #Function to find the longest common subsequence for the given two strings.\n    #This is a better implementation of LCS(3, \"abba\", \"babb\")\n    def lcs_of_two(X, Y, Z): \n        #To store the length of each letter of the first sequence\n        S1 = [len(s) for s in X]\n        #To store the length of each letter of the second sequence\n        S2 = [len(s) for s in Y]\n        #To store the length of each letter of the third sequence\n        S3 = [len(s) for s in Z]\n        #To store the longest common subsequence of the 2 sequences\n        LCS = [[0, 0, 0] for i in range(len(X) + 1)]\n        for i in range(1, len(X) + 1):\n            for j in range(1, len(Y) + 1):\n                if X[i - 1] == Y[j - 1]:\n                    LCS[i][j] = LCS[i - 1][j - 1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n        return LCS[-1][-1]\n    #To find the longest common subsequence of the 3 strings\n    def lcs_of_three(X, Y, Z): \n        #To store the length of each letter of the first sequence\n        S1 = [len(s) for s in X]\n        #To store the length of each letter of the second sequence\n        S2 = [len(s) for s in Y]\n        #To store the length of each letter of the third sequence\n        S3 = [len(s) for s in Z]\n        #To store the longest common subsequence of the 3 sequences\n        LCS = [[0, 0, 0] for i in range(len(X) + 1)]\n        for i in range(1, len(X) + 1):\n            for j in range(1, len(Y) + 1):\n                if X[i - 1] == Y[j - 1]:\n                    LCS[i][j] = LCS[i - 1][j - 1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n        return LCS[-1][-1]\n    #Function to find the longest common subsequence of the 3 strings\n    def lcs_of_four(X, Y, Z):\n        #To store the length of each letter of the first sequence\n        S1 = [len(s) for s in X]\n        #To store the length of each letter of the second sequence\n        S2 = [len(s) for s in Y]\n        #To store the length of each letter of the third sequence\n        S3 = [len(s) for s in Z]\n        #To store the longest common subsequence of the 3 sequences\n        LCS = [[0, 0, 0] for i in range(len(X) + 1)]\n        for i in range(1, len(X) + 1):\n            for j in range(1, len(Y) + 1):\n                for k in range(1, len(Z) + 1):\n                    if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                        LCS[i][j] = LCS[i - 1][j - 1] + 1\n                    else:\n                        LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1], LCS[i - 1][k], LCS[i][j - 1])\n        return LCS[-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    c = [[0] * (n + 1) for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                c[i][j] = 0 \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (X[i - 1] == Y[j - 1]): \n                c[i][j] = c[i - 1][j - 1] + 1 \n            else: \n                c[i][j] = max(c[i - 1][j], c[i][j - 1]) \n    return c[m][n] \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #Time complexity: O(n*m)\n    #Space Complexity: O(n*m)\n    \n    def findLCS(s1, s2): \n        if len(s2) < len(s1):\n            return None\n        \n        # Time Complexity: O(n*m)\n        # Space Complexity: O(1)\n        \n        lcs = [[0 for i in range(len(s2) + 1)] for j in range(len(s1) + 1)]\n        \n        for i in range(len(s1) - 1, -1, -1):\n            for j in range(len(s2) - 1, -1, -1):\n                if s1[i] == s2[j]:\n                    lcs[i][j] = 1 + lcs[i + 1][j + 1]\n                else:\n                    lcs[i][j] = max(lcs[i + 1][j], lcs[i][j + 1])\n        \n        return lcs[0][len(s2)]\n        \n    if len(X)!= len(Y) or len(X)!= len(Z):\n        raise Exception(\"X and Y and Z are not the same size\")\n    \n    # Time Complexity: O(n*m)\n    # Space Complexity: O(n*m)\n    \n    lcs_of_three = [[None for i in range(len(X) + 1)] for j in range(len(Y) + 1)]\n    \n    for i in range(len(lcs_of_three)):\n        for j in range(len(lcs_of_three[i])):\n            if lcs_of_three[i][j] is None:\n                lcs_of_three[i][j] = findLCS(X[i:], Y[i:])\n            else:\n                lcs_of_three[i][j] = max(lcs_of_three[i][j], findLCS(X[i:], Y[i:]), findLCS(X[i:], Y[i:]))\n    \n    return lcs_of_three[len(X)][len(Y)"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    q = [[0,0,0]]\n    lcs = [[0,0]]\n    for i in range(m):\n        for j in range(n):\n            if X[i] == Y[j] and q[-1][0] < q[-1][2]:\n                q.append([i,j,q[-1][2]+1])\n                lcs.append(q[-1])\n            elif X[i] == Y[j] and q[-1][0] == q[-1][2]:\n                q.pop()\n                lcs.pop()\n            else:\n                q[-1][0] += 1\n    return lcs[0][0]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    if m > n:\n        X, Y, Z = Y, X, Z\n    if m == 1:\n        return Z\n    if n == 1:\n        return Z\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    longest common subsequence of three strings = if we know that the longest common subsequence is of the lengths of the two strings, then we can quickly find the length of the longest common subsequence. \n    We don't know the longest common subsequence so we have to find the longest common subsequence in the given sequence.\n    '''\n    if len(X) > len(Y) and len(X) > len(Z):\n        return lcs_of_three(X, Y, Z)\n    elif len(Y) > len(Z):\n        return lcs_of_three(X, Y, Z)\n    elif len(Z) > len(X):\n        return lcs_of_three(X, Z, Y)\n    else:\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Declare a boolean array to hold the visited values\n    visited = [False] * (max(X) + 1)\n    \n    # Create a blank lcs array\n    lcs = [0] * (max(X) + 1)\n    \n    # Populate lcs array with zeroes\n    for i in range(max(X) + 1):\n        lcs[i] = i\n    \n    # Traverse through each element in the array\n    for i in range(max(Y) + 1):\n        for j in range(max(Z) + 1):\n            # Only add zeros if we have not visited them.\n            # Remember to check for visited at the end.\n            if visited[i + j] == False:\n                # Check the lcs with the given inputs\n                if lcs[i + j] == 0:\n                    # If we have not visited it, then add\n                    lcs[i + j] = 1 + lcs_of_three(X[i], Y[j], Z[j])\n                # If we have visited it, then we can add\n                # Add the number of a's to the lcs\n                else:\n                    lcs[i + j] = max(lcs[i + j], 1 + lcs_of_three(X[i], Y[j], Z[j]))\n    \n    # Return the longest lcs\n    return lcs[max(X)"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    i,j,k = len(X),len(Y),len(Z)\n    # print(i,j,k)\n    if i < j:\n        if j < k:\n            return lcs_of_three(Z, Y, X)\n        else:\n            return lcs_of_three(X, Y, Z)\n    elif i < k:\n        return lcs_of_three(X, Y, Z)\n    else:\n        return lcs_of_three(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # print(f'LCS: {X} {Y} {Z}')\n    X_len = len(X)\n    Y_len = len(Y)\n    Z_len = len(Z)\n    \n    # print(f'X: {X}')\n    # print(f'Y: {Y}')\n    # print(f'Z: {Z}')\n    \n    # print(f'X_len: {X_len}')\n    # print(f'Y_len: {Y_len}')\n    # print(f'Z_len: {Z_len}')\n    \n    # print(f'LCS: {X} {Y} {Z}')\n    \n    # if X_len < Y_len or Z_len < Y_len:\n    #     print(f'Length does not meet requirements!')\n    \n    # if X_len == Y_len and Z_len == Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len or Z_len == Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len or Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    if X_len == Y_len and Z_len < Y_len:\n        # print(f'LCS: {X} {Y} {Z}')\n        return [X, Y, Z]\n    \n    # if X_len == Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len > Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len > Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    if X_len > Y_len:\n        print(f'LCS: {X} {Y} {Z}')\n        return [X, Y, Z]\n    \n    if X_len > Y_len:\n        print(f'LCS: {X} {Y} {Z}')\n        return [X, Y, Z]\n    \n    # if X_len == Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len == Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len > Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len > Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len > Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len > Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len < Y_len:\n    #     print(f'LCS: {X} {Y} {Z}')\n    #     return [X, Y, Z]\n    \n    # if X_len > Y_len and Z_len < Y_len"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #Length of X and Y: \n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.replace(\" \",\"-\")\n    str3 = str2.replace(\"-\",\" \")\n    return str3\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(^| )(\\w+ )([\\w]+ )'\n    result = re.sub(pattern, r' \\1 \\2', str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    capital_words = []\n    for word in words:\n        if word[0].isupper():\n            capital_words.append(word)\n    return''.join(capital_words)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    spaced_words = re.sub('[^A-Za-z0-9]','', str1)\n    return spaced_words\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new = re.sub(r'\\W','', str1)\n    new_list = new.split()\n    for word in new_list:\n        if word[0].isupper():\n            new_word = word.upper()\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[0]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[0]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1: -1]\n            new_word +=''\n            new_word += word[0]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:]\n            new_word +=''\n            new_word += word[:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +=''\n            new_word += word[-2:]\n            new_word +=''\n            new_word += word[-1]\n            new_word +=''\n            new_word += word[1:-1]\n            new_word +=''\n            new_word += word[0:-1]\n            new_word +"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    temp=list()\n    l=list()\n    for i in str1:\n        if i.isupper():\n            temp.append(i)\n        else:\n            l.append(i)\n    if len(temp)>len(l):\n        str2=str()\n        for i in range(len(temp)-len(l)):\n            str2+=l[i]\n        str2+=temp[len(temp)-len(l):]\n        str2=str2.replace(' ','')\n        return str2\n    else:\n        str2=str()\n        for i in range(len(l)-len(temp)):\n            str2+=l[i]\n        str2+=temp[len(temp)-len(l):]\n        str2=str2.replace(' ','')\n        return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(' ', '\\t').replace('  ', '\\t').replace('    ', '\\t')\n    \n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = r'\\b(?:\\w+[a-z]{2,})(?:\\s+\\w+\\b)'\n    result = re.finditer(regex, str1, re.MULTILINE)\n    output = \"\"\n    for match in result:\n        output = output + match.group(1) +''\n    print(output)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    t=[]\n    d=''\n    for i in str1:\n        if i.isupper():\n            if d.isupper():\n                t.append(d)\n                d=''\n            d+=i\n            t.append(d)\n        else:\n            if d:\n                t.append(d)\n                d=''\n            d+=i\n    if d:\n        t.append(d)\n    return''.join(t)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isupper():\n            if char.lower() not in new_str:\n                new_str += char.lower() +''\n        else:\n            new_str += char +''\n    return new_str\n    \ndef word_is_sentence(str1):\n    '''\n    Write a function to check whether a string is a sentence or not.\n    '''\n    temp = []\n    words = str1.split()\n    for word in words:\n        if word.lower() not in temp:\n            temp.append(word.lower())\n    if len(temp) == len(words):\n        return'sentence'\n    else:\n        return 'not_sentence'\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = list(nums_str)\n    nums_str.sort()\n    return \"\".join(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split(\" \")\n    nums_str = [int(x) for x in nums_str]\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    a_dict = dict(zip(nums_str, range(len(nums_str))))\n    a_dict = sorted(a_dict.items(), key = lambda x:x[1])\n    return [a_dict[i] for i in a_dict[::-1]]\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # All sorts are based on ASCII values, so we'll just need to sort the values\n    nums_str.sort(key = str)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    strs = []\n    for n in nums_str:\n        if type(n) == int or type(n) == float:\n            strs.append(n)\n    strs = sorted(strs)\n    return strs\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sort_nums_str = sorted(nums_str)\n    return sort_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: (x[0], x[1], x[2]))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: (int(x), x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    temp_list = list(set(nums_str))\n    temp_list.sort()\n    return temp_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tup_list = test_tup\n    test_list.extend(tup_list)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # YOUR CODE HERE\n    \n    test_list.append(tuple(test_tup))\n    \n    return test_list\n    \n    \ndef main():\n    '''\n    Write a main function that prompts the user to input a list, a tuple, and an int.\n    Then prints the given list, the tuple, and the given int.\n    '''\n    \n    # Take user input\n    user_input_list = input(\"Enter list of tuples: \").split(',')\n    \n    # Create tuple and list\n    tuple_input_list = []\n    list_input_list = []\n    \n    for item in user_input_list:\n        item = tuple(item.split())\n        tuple_input_list.append(item)\n        \n    for item in tuple_input_list:\n        item = list(item)\n        list_input_list.append(item)\n    \n    # Print output\n    print(f'The list is: {list_input_list}')\n    print(f'The tuple is: {tuple_input_list}')\n    print(f'The element is: {tuple_input_list[0][-1]}')\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_list = []\n    for value in test_list:\n        new_list.append(value + test_tup)\n    return new_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base Case\n    if i >= len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    while arr[i//2] < arr[i]:\n        arr[i], arr[i//2] = arr[i//2], arr[i]\n        i = i//2\n    return arr\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr): return True\n    if arr[i] == 0: return False\n    left_child_index = 2 * i + 1\n    right_child_index = 2 * i + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    if arr[i] < arr[i // 2] and arr[i] < arr[(i * 2) + 1] and check_min_heap_helper(arr, (i * 2) + 1) and check_min_heap_helper(arr, (i * 2)):\n        return True\n    if arr[i] < arr[i // 2] and arr[i] < arr[(i * 2) + 2] and check_min_heap_helper(arr, (i * 2) + 2) and check_min_heap_helper(arr, (i * 2) + 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i < 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Write your code here\n    if i < len(arr) and arr[i] < arr[2 * i + 1]:\n        return False\n    else:\n        return True\n    # raise NotImplementedError\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    elif arr[i] < arr[i//2] or arr[i] > arr[(i+1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i+1)//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) - 1:\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i >= len(arr)) or arr[i] < arr[0]:\n        return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import math\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Write your code here.\n    j = 1\n    while j * n < 30:\n        j = j + 1\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 1\n    for i in range(1, n):\n        x = x * i\n        y = x - x % 10\n    return y\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n > 200:\n        raise ValueError\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 3\n    elif n == 7:\n        return 4\n    elif n == 8:\n        return 5\n    elif n == 9:\n        return 4\n    elif n == 10:\n        return 5\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 5\n    elif n == 13:\n        return 6\n    elif n == 14:\n        return 7\n    elif n == 15:\n        return 7\n    elif n == 16:\n        return 8\n    elif n == 17:\n        return 9\n    elif n == 18:\n        return 10\n    elif n == 19:\n        return 11\n    elif n == 20:\n        return 12\n    elif n == 21:\n        return 13\n    elif n == 22:\n        return 14\n    elif n == 23:\n        return 15\n    elif n == 24:\n        return 16\n    elif n == 25:\n        return 17\n    elif n == 26:\n        return 18\n    elif n == 27:\n        return 19\n    elif n == 28:\n        return 20\n    elif n == 29:\n        return 21\n    elif n == 30:\n        return 22\n    elif n == 31:\n        return 23\n    elif n == 32:\n        return 24\n    elif n == 33:\n        return 25\n    elif n == 34:\n        return 26\n    elif n == 35:\n        return 27\n    elif n == 36:\n        return 28\n    elif n == 37:\n        return 29\n    elif n == 38:\n        return 30\n    elif n == 39:\n        return 31\n    elif n == 40:\n        return 32\n    elif n == 41:\n        return 33\n    elif n == 42:\n        return 34\n    elif n == 43:\n        return 35\n    elif n == 44:\n        return 36\n    elif n == 45:\n        return 37\n    elif n == 46:\n        return 38\n    elif n == 47:\n        return 39\n    elif n == 48:\n        return 40\n    elif n == 49:\n        return 41\n    elif n == 50:\n        return 42\n    elif n == 51:\n        return 43\n    elif n == 52:\n        return 44\n    elif n == 53:\n        return 45\n    elif n == 54:\n        return 46\n    elif n == 55:\n        return 47\n    elif n == 56:\n        return 48\n    elif n == 57:\n        return 49\n    elif n == 58:\n        return 50\n    elif n == 59:\n        return 51\n    elif n == 60:\n        return 52\n    elif n == 61:\n        return 53\n    elif n == 62:\n        return 54\n    elif n == 63:\n        return 55\n    elif n == 64:\n        return 56\n    elif n == 65:\n        return 57\n    elif n == 66:\n        return 58\n    elif n == 67:\n        return 59\n    elif n == 68:\n        return 60\n    elif n == 69:\n        return 61\n    elif n == 70:\n        return 62\n    elif n == 71:\n        return 63\n    elif n == 72:\n        return 64\n    elif n == 73:\n        return 65\n    elif n == 74:\n        return 66\n    elif n == 75:\n        return 67\n    elif n == 76:\n        return 68\n    elif n == 77:\n        return 69\n    elif n == 78:\n        return 70\n    elif n == 79:\n        return 71\n    elif n == 80:\n        return 72\n    elif n == 81:\n        return 73\n    elif n == 82:\n        return 74\n    elif n == 83:\n        return 75\n    elif n == 84:\n        return 76\n    elif n == 85:\n        return 77\n    elif n == 86:\n        return 78\n    elif n == 87:\n        return 79\n    elif n == 88:\n        return 80\n    elif n == 89:\n        return 81\n    elif n == 90:\n        return 82\n    elif n == 91:\n        return 83\n    elif n == 92:\n        return 84\n    elif n == 93:\n        return 85\n    elif n == 94:\n        return 86\n    elif n == 95:\n        return 87\n    elif n == 96:\n        return 88\n    elif n == 97:\n        return 89\n    elif n == 98:\n        return 90\n    elif n == 99:\n        return 91\n    elif n == 100:\n        return 92\n    elif n == 101:\n        return 93\n    elif n == 102:\n        return 94\n    elif n == 103:\n        return 95\n    elif n == 104:\n        return 96\n    elif n == 105:\n        return 97\n    elif n == 106:\n        return 98\n    elif n == 107:\n        return 99\n    elif n == 108:\n        return 100\n    elif n == 109:\n        return 101\n    elif n == 110:\n        return 102\n    elif n == 111:\n        return 103\n    elif n == 112:\n        return 104\n    elif n == 113:\n        return 105\n    elif n == 114:\n        return 106\n    elif n == 115:\n        return 107\n    elif n == 116:\n        return 108\n    elif n == 117:\n        return 109\n    elif n == 118:\n        return 110\n    elif n == 119:\n        return 111\n    elif n == 120:\n        return 112\n    elif n == 121:\n        return 113\n    elif n == 122:\n        return 114\n    elif n == 123:\n        return 115\n    elif n == 124:\n        return 116\n    elif n == 125:\n        return 117\n    elif n == 126:\n        return 118\n    elif n == 127:\n        return 119\n    elif n == 128:\n        return 120\n    elif n == 129:\n        return 121\n    elif n == 130:\n        return 122\n    elif n == 131:\n        return 123\n    elif n == 132:\n        return 124\n    elif n == 133:\n        return 125\n    elif n == 134:\n        return 126\n    elif n == 135:\n        return 127\n    elif n == 136:\n        return 128\n    elif n == 137:\n        return 129\n    elif n == 138:\n        return 130\n    elif n == 139:\n        return 131\n    elif n == 140:\n        return 132\n    elif n == 141:\n        return 133\n    elif n == 142:\n        return 134\n    elif n == 143:\n        return 135\n    elif n == 144:\n        return 136\n    elif n == 145:\n        return 137\n    elif n == 146:\n        return 138\n    elif n == 147:\n        return 139\n    elif n == 148:\n        return 140\n    elif n == 149:\n        return 141\n    elif n == 150:\n        return 142\n    elif n == 151:\n        return 143\n    elif n == 152:\n        return 144\n    elif n == 153:\n        return 145\n    elif n == 154:\n        return 146\n    elif n == 155:\n        return 147\n    elif n == 156:\n        return 148\n    elif n == 157:\n        return 149\n    elif n == 158:\n        return 150\n    elif n == 159:\n        return 151\n    elif n == 160:\n        return 152\n    elif "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    fac = []\n    fac.append(2)\n    if n == 1:\n        return 1\n    for i in range(2, n + 1):\n        fac.append(i * fac[i - 1])\n    return fac[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 1\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 1\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 1\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 1\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 1\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 1\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 1\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 1\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 1\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 1\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 1\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 1\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 1\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 1\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 1\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 1\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 1\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 1\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 1\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 1\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 1\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 1\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 1\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 1\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 1\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 1\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 1\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 1\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 1\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 1\n    elif n == 72:\n        return 1\n    elif n == 73:\n        return 1\n    elif n == 74:\n        return 1\n    elif n == 75:\n        return 1\n    elif n == 76:\n        return 1\n    elif n == 77:\n        return 1\n    elif n == 78:\n        return 1\n    elif n == 79:\n        return 1\n    elif n == 80:\n        return 1\n    elif n == 81:\n        return 1\n    elif n == 82:\n        return 1\n    elif n == 83:\n        return 1\n    elif n == 84:\n        return 1\n    elif n == 85:\n        return 1\n    elif n == 86:\n        return 1\n    elif n == 87:\n        return 1\n    elif n == 88:\n        return 1\n    elif n == 89:\n        return 1\n    elif n == 90:\n        return 1\n    elif n == 91:\n        return 1\n    elif n == 92:\n        return 1\n    elif n == 93:\n        return 1\n    elif n == 94:\n        return 1\n    elif n == 95:\n        return 1\n    elif n == 96:\n        return 1\n    elif n == 97:\n        return 1\n    elif n == 98:\n        return 1\n    elif n == 99:\n        return 1\n    elif n == 100:\n        return 1\n    elif n == 101:\n        return 1\n    elif n == 102:\n        return 1\n    elif n == 103:\n        return 1\n    elif n == 104:\n        return 1\n    elif n == 105:\n        return 1\n    elif n == 106:\n        return 1\n    elif n == 107:\n        return 1\n    elif n == 108:\n        return 1\n    elif n == 109:\n        return 1\n    elif n == 110:\n        return 1\n    elif n == 111:\n        return 1\n    elif n == 112:\n        return 1\n    elif n == 113:\n        return 1\n    elif n == 114:\n        return 1\n    elif n == 115:\n        return 1\n    elif n == 116:\n        return 1\n    elif n == 117:\n        return 1\n    elif n == 118:\n        return 1\n    elif n == 119:\n        return 1\n    elif n == 120:\n        return 1\n    elif n == 121:\n        return 1\n    elif n == 122:\n        return 1\n    elif n == 123:\n        return 1\n    elif n == 124:\n        return 1\n    elif n == 125:\n        return 1\n    elif n == 126:\n        return 1\n    elif n == 127:\n        return 1\n    elif n == 128:\n        return 1\n    elif n == 129:\n        return 1\n    elif n == 130:\n        return 1\n    elif n == 131:\n        return 1\n    elif n == 132:\n        return 1\n    elif n == 133:\n        return 1\n    elif n == 134:\n        return 1\n    elif n == 135:\n        return 1\n    elif n == 136:\n        return 1\n    elif n == 137:\n        return 1\n    elif n == 138:\n        return 1\n    elif n == 139:\n        return 1\n    elif n == 140:\n        return 1\n    elif n == 141:\n        return 1\n    elif n == 142:\n        return 1\n    elif n == 143:\n        return 1\n    elif n == 144:\n        return 1\n    elif n == 145:\n        return 1\n    elif n == 146:\n        return 1\n    elif n == 147:\n        return 1\n    elif n == 148:\n        return 1\n    elif n == 149:\n        return 1\n    elif n == 150:\n        return 1\n    elif n == 151:\n        return 1\n    elif n == 152:\n        return 1\n    elif n == 153:\n        return 1\n    elif n == 154:\n        return 1\n    elif n == 155:\n        return 1\n    elif n == 156:\n        return 1\n    elif n == 157:\n        return 1\n    elif n == 158:\n        return 1\n    elif n == 159:\n        return 1\n    elif n == 160:\n        return 1\n    elif n == 161:\n        return 1\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2 or n == 3:\n        return 2\n    else:\n        return int(n**.5)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    ## return the nth jacobsthal number if a number is in the range (0, n)\n    if n < 0 or n > 9999999999999:\n        raise ValueError\n    else:\n        return (n+1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    j = 0\n    for i in range(2, n+1):\n        j += i\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 96\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 256\n    if n == 16:\n        return 300\n    if n == 17:\n        return 323\n    if n == 18:\n        return 338\n    if n == 19:\n        return 355\n    if n == 20:\n        return 390\n    if n == 21:\n        return 439\n    if n == 22:\n        return 461\n    if n == 23:\n        return 553\n    if n == 24:\n        return 587\n    if n == 25:\n        return 639\n    if n == 26:\n        return 671\n    if n == 27:\n        return 705\n    if n == 28:\n        return 728\n    if n == 29:\n        return 752\n    if n == 30:\n        return 768\n    if n == 31:\n        return 801\n    if n == 32:\n        return 841\n    if n == 33:\n        return 853\n    if n == 34:\n        return 883\n    if n == 35:\n        return 907\n    if n == 36:\n        return 941\n    if n == 37:\n        return 959\n    if n == 38:\n        return 987\n    if n == 39:\n        return 1011\n    if n == 40:\n        return 1021\n    if n == 41:\n        return 1041\n    if n == 42:\n        return 1059\n    if n == 43:\n        return 1091\n    if n == 44:\n        return 1119\n    if n == 45:\n        return 1151\n    if n == 46:\n        return 1163\n    if n == 47:\n        return 1181\n    if n == 48:\n        return 1201\n    if n == 49:\n        return 1241\n    if n == 50:\n        return 1251\n    if n == 51:\n        return 1291\n    if n == 52:\n        return 1311\n    if n == 53:\n        return 1341\n    if n == 54:\n        return 1359\n    if n == 55:\n        return 1391\n    if n == 56:\n        return 1411\n    if n == 57:\n        return 1441\n    if n == 58:\n        return 1459\n    if n == 59:\n        return 1491\n    if n == 60:\n        return 1511\n    if n == 61:\n        return 1541\n    if n == 62:\n        return 1559\n    if n == 63:\n        return 1591\n    if n == 64:\n        return 1611\n    if n == 65:\n        return 1641\n    if n == 66:\n        return 1659\n    if n == 67:\n        return 1691\n    if n == 68:\n        return 1711\n    if n == 69:\n        return 1741\n    if n == 70:\n        return 1759\n    if n == 71:\n        return 1791\n    if n == 72:\n        return 1811\n    if n == 73:\n        return 1841\n    if n == 74:\n        return 1859\n    if n == 75:\n        return 1891\n    if n == 76:\n        return 1900\n    if n == 77:\n        return 1951\n    if n == 78:\n        return 1960\n    if n == 79:\n        return 1967\n    if n == 80:\n        return 1972\n    if n == 81:\n        return 1972\n    if n == 82:\n        return 1971\n    if n == 83:\n        return 1968\n    if n == 84:\n        return 1968\n    if n == 85:\n        return 1969\n    if n == 86:\n        return 1967\n    if n == 87:\n        return 1972\n    if n == 88:\n        return 1971\n    if n == 89:\n        return 1968\n    if n == 90:\n        return 1968\n    if n == 91:\n        return 1969\n    if n == 92:\n        return 1972\n    if n == 93:\n        return 1971\n    if n == 94:\n        return 1968\n    if n == 95:\n        return 1969\n    if n == 96:\n        return 1972\n    if n == 97:\n        return 1971\n    if n == 98:\n        return 1968\n    if n == 99:\n        return 1969\n    if n == 100:\n        return 1972\n    if n == 101:\n        return 1971\n    if n == 102:\n        return 1968\n    if n == 103:\n        return 1969\n    if n == 104:\n        return 1972\n    if n == 105:\n        return 1971\n    if n == 106:\n        return 1968\n    if n == 107:\n        return 1969\n    if n == 108:\n        return 1972\n    if n == 109:\n        return 1971\n    if n == 110:\n        return 1968\n    if n == 111:\n        return 1969\n    if n == 112:\n        return 1972\n    if n == 113:\n        return 1971\n    if n == 114:\n        return 1968\n    if n == 115:\n        return 1969\n    if n == 116:\n        return 1972\n    if n == 117:\n        return 1971\n    if n == 118:\n        return 1968\n    if n == 119:\n        return 1969\n    if n == 120:\n        return 1972\n    if n == 121:\n        return 1971\n    if n == 122:\n        return 1968\n    if n == 123:\n        return 1969\n    if n == 124:\n        return 1972\n    if n == 125:\n        return 1971\n    if n == 126:\n        return 1968\n    if n == 127:\n        return 1969\n    if n == 128:\n        return 1972\n    if n == 129:\n        return 1971\n    if n == 130:\n        return 1968\n    if n == 131:\n        return 1969\n    if n == 132:\n        return 1972\n    if n == 133:\n        return 1971\n    if n == 134:\n        return 1968\n    if n == 135:\n        return 1969\n    if n == 136:\n        return 1972\n    if n == 137:\n        return 1971\n    if n == 138:\n        return 1968\n    if n == 139:\n        return 1969\n    if n == 140:\n        return 1972\n    if n == 141:\n        return 1971\n    if n == 142:\n        return 1968\n    if n == 143:\n        return 1969\n    if n == 144:\n        return 1972\n    if n == 145:\n        return 1971\n    if n == 146:\n        return 1968\n    if n == 147:\n        return 1969\n    if n == 148:\n        return 1972\n    if n == 149:\n        return 1971\n    if n == 150:\n        return 1968\n    if n == 151:\n        return 1969\n    if n == 152:\n        return 1972\n    if n == 153:\n        return 1971\n    if n == 154:\n        return 1968\n    if n == 155:\n        return 1969\n    if n == 156:\n        return 1972\n    if n == 157:\n        return 1971\n    if n == 158:\n        return 1968\n    if n == 159:\n        return 1969\n    if n == 160:\n        return 1972\n    if n == 161:\n        return 1971\n    if n == 162:\n        return 1968\n    if n == 163:\n        return 1969\n    if n == 164:\n        return 1972\n    if n == 165:\n        return 1971\n    if n == 166:\n        return 1968\n    if n == 167:\n        return 1969\n    if n == 168:\n        return 1972\n    if n == 169:\n        return 1971\n    if n == 170:\n        return 1968\n    if n == 171:\n        return 1969\n    i"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n=len(test_list)\n    for i in range(n):\n        test_list[i]=(test_list[i][0], test_list[i][1]+1)\n    minimum=100000\n    if n==0:\n        return minimum\n    for i in range(n-1):\n        if test_list[i][1]<test_list[i+1][1]:\n            return minimum\n        minimum=min(test_list[i][1],minimum)\n    return minimum\n        \ndef solution(k, test_case):\n    arr=list(map(int,test_case.split()))\n    arr.sort()\n    \n    print(f'After sorting {arr}')\n    answer=min_k(arr,k)\n    return answer\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    min_k = n\n    for i in range(K):\n        min_k = min(min_k, len(test_list))\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            result.append(test_list[j][:])\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import math\n    from collections import defaultdict\n    return sorted(map(lambda x: x[:K], test_list), key = lambda x: x[K], reverse = True)[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary that will be used for performing k-way comparison\n    k_dict = {}\n    for tuple_item in test_list:\n        # save the tuple value to a key\n        k_dict[tuple_item[0]] = tuple_item[1]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # return 'This is a test'\n    return tuple(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Remove spaces\n    test_list = [x.strip() for x in test_list]\n    k_count = 0\n    # Create empty lists\n    k_list = []\n    k_list_2 = []\n    k_list_3 = []\n    k_list_4 = []\n    k_list_5 = []\n    k_list_6 = []\n    k_list_7 = []\n    k_list_8 = []\n    k_list_9 = []\n    # Traverse through the given tuple list\n    for i in range(len(test_list)):\n        # Initialize minimum_k = -1\n        minimum_k = -1\n        # Iterate through the tuple list\n        for k in range(K):\n            # Recursive call\n            min_k = check_k(test_list[i], k)\n            # Return minimum_k if it is not less than minimum_k\n            if min_k >= minimum_k:\n                minimum_k = min_k\n        # Check for last element\n        if minimum_k == -1:\n            print(\"#0 Min. number: \" + str(test_list[i]))\n        # Check if minimum_k is greater than 1\n        elif minimum_k >= 1:\n            print(\"#\" + str(i + 1) + \" Min. number: \" + str(test_list[i]))\n    # Return the minimum_k\n    return minimum_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Your code here\n    # test cases\n    #return int(min(test_list[:K]))\n    #return test_list[:K]\n    #return test_list[:K][::-1]\n    #return test_list[:K][::-1][0]\n    '''\n    return min(test_list[:K])\n    '''\n    #test cases\n    #return int(min(test_list[:K][::-1]))\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    '''\n    return min(test_list[:K])\n    '''\n    #return min(test_list[:K][::-1])\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    #return test_list[:K][::-1][0]\n    "
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indices = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    indices.append([i, j, k])\n    return indices\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # code here\n    # type: list[list[int]]\n    index_list = []\n    # for i in range(len(l1)):\n    #     if l1[i] in l2[i] and l2[i] in l3[i]:\n    #         index_list.append(i)\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            index_list.append(i)\n    # print(index_list)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l3_index = [i for i, item in enumerate(l3) if item == l2[0]]\n    l1_index = [i for i, item in enumerate(l1) if item == l1[0]]\n    l2_index = [i for i, item in enumerate(l2) if item == l2[0]]\n    l3_index.sort()\n    l1_index.sort()\n    l2_index.sort()\n    return [l1_index[i] for i in l3_index], [l2_index[i] for i in l3_index], [l3_index[i] for i in l1_index]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_elements_list = []\n    l2_elements_list = []\n    l3_elements_list = []\n    for i in range(0, len(l1)):\n        if l1[i] in l1_elements_list:\n            l1_elements_list.remove(l1[i])\n            \n        if l2[i] in l2_elements_list:\n            l2_elements_list.remove(l2[i])\n            \n        if l3[i] in l3_elements_list:\n            l3_elements_list.remove(l3[i])\n    \n    return l1_elements_list + l2_elements_list + l3_elements_list\n    \n    \n    \ndef main():\n    '''\n    Reads a two-dimensional list in the form of <int> <int> <int> <int>\n    Writes a single new list containing all the indices of the elements of the lists below.\n    '''\n    \n    l1 = [1, 2, 3]\n    l2 = [4, 5, 6]\n    l3 = [7, 8, 9]\n    \n    print(\"Original List:\")\n    print(l1)\n    print(\"Extracted List:\")\n    print(extract_index_list(l1, l2, l3))\n    \n    \nmain("
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    s1 = set(l1)\n    s2 = set(l2)\n    s3 = set(l3)\n    return list(s1 & s2 & s3)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i, l2 in enumerate(l2) if l2[i] == l3[i] and l1[i] in l3]\n    \ndef report_stats(l, l1, l2, l3, l1_count, l2_count, l3_count):\n    '''\n    Print the result of the report.\n    '''\n    print('There are {} elements with common values of {} and {}'.format(len(l), l1, l2))\n    print('The total number of common elements of {} and {} is {}'.format(l1, l2, l3))\n    print('There are {} element with common values of {}'.format(l1_count, l1, len(l1)))\n    print('There are {} element with common values of {}'.format(l2_count, l2, len(l2)))\n    print('There are {} element with common values of {}'.format(l3_count, l3, len(l3)))\n    print()\n    return\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l1[i] == l3[k]:\n                    index_list.append(l2[j])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_indices = []\n    l2_indices = []\n    l3_indices = []\n    if len(l1) == len(l2) == len(l3):\n        if len(l1) > 0 and len(l2) > 0 and len(l3) > 0:\n            for i in range(len(l1)):\n                if l1[i] in l2 and l2[i] in l3:\n                    l2_indices.append(i)\n            for i in range(len(l1)):\n                if l1[i] in l3 and l3[i] in l2:\n                    l3_indices.append(i)\n            if len(l2_indices)!= len(l3_indices):\n                print('Error: index inconsistency!')\n                return None\n            else:\n                return l3_indices\n        else:\n            print('Error: empty lists!')\n            return None\n    else:\n        print('Error: list lengths don\\'t match!')\n        return None\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    l4 = []\n    \n    if len(l1) < 3:\n        l4 = l1\n    else:\n        l4 = l1[0]\n        \n    if len(l2) < 3:\n        l4 = l2\n    else:\n        l4 = l2[0]\n        \n    if len(l3) < 3:\n        l4 = l3\n    else:\n        l4 = l3[0]\n        \n    if len(l4) < 3:\n        return l4\n    \n    s = [0, 0, 0]\n    \n    for i in range(len(l4)):\n        if l4[i] == l4[i]:\n            if l4[i] in l1:\n                s[0] = l4[i]\n            if l4[i] in l2:\n                s[1] = l4[i]\n            if l4[i] in l3:\n                s[2] = l4[i]\n        else:\n            if l4[i] in l1:\n                s[0] = l4[i]\n            if l4[i] in l2:\n                s[1] = l4[i]\n            if l4[i] in l3:\n                s[2] = l4[i]\n            \n    return s\n            \ndef extract_index_list_complete(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    l4 = []\n    \n    if len(l1) < 3:\n        l4 = l1\n    else:\n        l4 = l1[0]\n        \n    if len(l2) < 3:\n        l4 = l2\n    else:\n        l4 = l2[0]\n        \n    if len(l3) < 3:\n        l4 = l3\n    else:\n        l4 = l3[0]\n        \n    if len(l4) < 3:\n        return l4\n    \n    s = [0, 0, 0]\n    \n    for i in range(len(l4)):\n        if l4[i] == l4[i]:\n            if l4[i] in l1:\n                s[0] = l4[i]\n            if l4[i] in l2:\n                s[1] = l4[i]\n            if l4[i] in l3:\n                s[2] = l4[i]\n        else:\n            if l4[i] in l1:\n                s[0] = l4[i]\n            if l4[i] in l2:\n                s[1] = l4[i]\n            if l4[i] in l3:\n                s[2] = l4[i]\n            \n    return s\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            index_list.append(l2.index(l1[i]))\n            index_list.append(l1[i])\n            break\n        elif l1[i] in l3 and l3[l1.index(l1[i])] in l2:\n            index_list.append(l3.index(l1[i]))\n            index_list.append(l1[i])\n            break\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min_value = numbers[0]\n    min_index = 0\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for i in range(len(numbers)-1):\n        if(numbers[i] > numbers[i+1]):\n            return numbers[i+1]\n    return numbers[-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # --- your code here ---\n    lst = numbers[:]\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min_num = numbers[0]\n    for number in numbers:\n        if number < min_num:\n            min_num = number\n    return min_num\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Your code here\n    if len(numbers) == 0:\n        return None\n    for index, item in enumerate(numbers):\n        if index == 0:\n            if item < numbers[1]:\n                return item\n        if numbers[index] < numbers[index-1]:\n            return numbers[index]\n    return numbers[1]\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        for i in range(0,len(numbers)):\n            if i == len(numbers) - 2:\n                return numbers[i]\n            elif numbers[i] < numbers[i + 1]:\n                return numbers[i]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # your code here\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # TODO: your code here\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n    \n    \n    \ndef third_smallest(numbers):\n    '''\n    Write a function to find the third smallest number in a list.\n    '''\n    return sorted(numbers)[2]\n    \n    \n    \ndef fourth_smallest(numbers):\n    '''\n    Write a function to find the fourth smallest number in a list.\n    '''\n    return sorted(numbers)[3]\n    \n    \n    \ndef fifth_smallest(numbers):\n    '''\n    Write a function to find the fifth smallest number in a list.\n    '''\n    return sorted(numbers)[4]\n    \n    \n    \ndef sixth_smallest(numbers):\n    '''\n    Write a function to find the sixth smallest number in a list.\n    '''\n    return sorted(numbers)[5]\n    \n    \n    \ndef seventh_smallest(numbers):\n    '''\n    Write a function to find the seventh smallest number in a list.\n    '''\n    return sorted(numbers)[6]\n    \n    \n    \ndef eighth_smallest(numbers):\n    '''\n    Write a function to find the eighth smallest number in a list.\n    '''\n    return sorted(numbers)[7]\n    \n    \n    \ndef nineth_smallest(numbers):\n    '''\n    Write a function to find the nineth smallest number in a list.\n    '''\n    return sorted(numbers)[8]\n    \n    \n    \ndef tenth_smallest(numbers):\n    '''\n    Write a function to find the tenth smallest number in a list.\n    '''\n    return sorted(numbers)[9]\n    \n    \n    \ndef main():\n    # Test first_smallest\n    print(f\"The first smallest number in the list is {first_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test second_smallest\n    print(f\"The second smallest number in the list is {second_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test third_smallest\n    print(f\"The third smallest number in the list is {third_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test fourth_smallest\n    print(f\"The fourth smallest number in the list is {fourth_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test fifth_smallest\n    print(f\"The fifth smallest number in the list is {fifth_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test sixth_smallest\n    print(f\"The sixth smallest number in the list is {sixth_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test seventh_smallest\n    print(f\"The seventh smallest number in the list is {seventh_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test eighth_smallest\n    print(f\"The eighth smallest number in the list is {eighth_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test nineth_smallest\n    print(f\"The nineth smallest number in the list is {nineth_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test tenth_smallest\n    print(f\"The tenth smallest number in the list is {tenth_smallest([5, 7, 9, 3, 10])}\")\n    print()\n    \n    # Test all the numbers in the list\n    print(f\"All numbers in the list are: {numbers}\")\n    print()\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lowest = numbers[0]\n    lowest_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < lowest:\n            lowest = numbers[i]\n            lowest_index = i\n    return lowest, lowest_index\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #match a pattern\n    pattern = '(a(b|s|z))'\n    for match in re.finditer(pattern, text):\n        match_index = match.start()\n        return text[match_index:]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('\\n','')\n    regex = r'a\\w+\\s'\n    match_one = re.findall(regex,text)\n    return match_one\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    result = re.findall('a|b',text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('a','a')\n    text = text.replace('b','b')\n    text = text.replace('c','c')\n    text = text.replace('d','d')\n    text = text.replace('e','e')\n    text = text.replace('f','f')\n    text = text.replace('g','g')\n    text = text.replace('h','h')\n    text = text.replace('i','i')\n    text = text.replace('j','j')\n    text = text.replace('k','k')\n    text = text.replace('l','l')\n    text = text.replace('m','m')\n    text = text.replace('n','n')\n    text = text.replace('o','o')\n    text = text.replace('p','p')\n    text = text.replace('q','q')\n    text = text.replace('r','r')\n    text = text.replace('s','s')\n    text = text.replace('t','t')\n    text = text.replace('u','u')\n    text = text.replace('v','v')\n    text = text.replace('w','w')\n    text = text.replace('x','x')\n    text = text.replace('y','y')\n    text = text.replace('z','z')\n    text = text.replace('A','a')\n    text = text.replace('B','b')\n    text = text.replace('C','c')\n    text = text.replace('D','d')\n    text = text.replace('E','e')\n    text = text.replace('F','f')\n    text = text.replace('G','g')\n    text = text.replace('H','h')\n    text = text.replace('I','i')\n    text = text.replace('J','j')\n    text = text.replace('K','k')\n    text = text.replace('L','l')\n    text = text.replace('M','m')\n    text = text.replace('N','n')\n    text = text.replace('O','o')\n    text = text.replace('P','p')\n    text = text.replace('Q','q')\n    text = text.replace('R','r')\n    text = text.replace('S','s')\n    text = text.replace('T','t')\n    text = text.replace('U','u')\n    text = text.replace('V','v')\n    text = text.replace('W','w')\n    text = text.replace('X','x')\n    text = text.replace('Y','y')\n    text = text.replace('Z','z')\n    text = text.replace('1','1')\n    text = text.replace('2','2')\n    text = text.replace('3','3')\n    text = text.replace('4','4')\n    text = text.replace('5','5')\n    text = text.replace('6','6')\n    text = text.replace('7','7')\n    text = text.replace('8','8')\n    text = text.replace('9','9')\n    text = text.replace('0','0')\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('a','a')\n    text = text.replace('b','b')\n    text = text.replace('c','c')\n    text = text.replace('d','d')\n    text = text.replace('e','e')\n    text = text.replace('f','f')\n    text = text.replace('g','g')\n    text = text.replace('h','h')\n    text = text.replace('i','i')\n    text = text.replace('j','j')\n    text = text.replace('k','k')\n    text = text.replace('l','l')\n    text = text.replace('m','m')\n    text = text.replace('n','n')\n    text = text.replace('o','o')\n    text = text.replace('p','p')\n    text = text.replace('q','q')\n    text = text.replace('r','r')\n    text = text.replace('s','s')\n    text = text.replace('t','t')\n    text = text.replace('u','u')\n    text = text.replace('v','v')\n    text = text.replace('w','w')\n    text = text.replace('x','x')\n    text = text.replace('y','y')\n    text = text.replace('z','z')\n    text = text.replace('A','a')\n    text = text.replace('B','b')\n    text = text.replace('C','c')\n    text = text.replace('D','d')\n    text = text.replace('E','e')\n    text = text.replace('F','f')\n    text = text.replace('G','g')\n    text = text.replace('H','h')\n    text = text.replace('I','i')\n    text = text.replace('J','j')\n    text = text.replace('K','k')\n    text = text.replace('L','l')\n    text = text.replace('M','m')\n    text = text.replace('N','n')\n    text = text.replace('O','o')\n    text = text.replace('P','p')\n    text = text.replace('Q','q')\n    text = text.replace('R','r')\n    text = text.replace('S','s')\n    text = text.replace('T','t')\n    text = text.replace('U','u')\n    text = text.replace('V','v')\n    text = text.replace('W','w')\n    text = text.replace('X','x')\n    text = text.replace('Y','y')\n    text = text.replace('Z','z')\n    text = text.replace('1','1')\n    text = text.replace('2','2')\n    text = text.replace('3','3')\n    text = text.replace('4','4')\n    text = text.replace('5','5')\n    text = text.replace('6','6')\n    text = text.replace('7','7')\n    text = text.replace('8','8')\n    text = text.replace('9','9')\n    text = text.replace('0','0')\n    return text\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('a','a')\n    text = text.replace('b','b')\n    text = text.replace('c','c')\n    text = text.replace('d','d')\n    text = text.replace('e','e')\n    text = text.replace('f','f')\n    text = text.replace('g','g')\n    text = text.replace('h','h')\n    text = text.replace('i','i')\n    text = text.replace('j','j')\n    text = text.replace('k','k')\n    text = text.replace('l','l')\n    text = text.replace('m','m')\n    text = text.replace('n','n')\n    text = text.replace('o','o')\n    text = text.replace('p','p')\n    text = text.replace('q','q')\n    text = text.replace('r','r')\n    text = text.replace('s','s')\n    text = text.replace('t','t')\n    text = text.replace('u','u')\n    text = text.replace('v','v')\n    text = text.replace('w','w')\n    text = text.replace('x','x')\n    text = text.replace('y','y')\n    text = text.replace('z','z')\n    text = text.replace('1','1')\n    text = text.replace('2',"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #do regex stuff here\n    r1 = re.compile('^a(?:b)?(?:[^b]*(?:b)?b$)')\n    r2 = re.compile('^a(?:[b]?[^b]*(?:[b]?b))b(?:[^b]*(?:[b]?[^b]*(?:[^b]*(?:[^b]*b)))?)')\n    r3 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z])))[a-z][a-z]*)')\n    r4 = re.compile('^(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z])))[a-z][a-z]*')\n    r5 = re.compile('^(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]))[a-z][a-z]*)')\n    r6 = re.compile('^(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r7 = re.compile('^(?:[a-z][a-z]*(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r8 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z])))[a-z][a-z]*))[a-z][a-z]*')\n    r9 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z])))[a-z][a-z]*)')\n    r10 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r11 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r12 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r13 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r14 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r15 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r16 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r17 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r18 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r19 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r20 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r21 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a-z][a-z]*)')\n    r22 = re.compile('^(?:(?:[a-z][a-z]*(?:[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*[a-z][a-z]*))[a"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{3,})b([bcdfghjklmnpqrstvwxyz]{3,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search('a([bcdfghjklmnpqrstvwxyz]{2,})b([bcdfghjklmnpqrstvwxyz]{2,})',text)\n    if s is not None:\n        return s.group(1)\n    else:\n        return text\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile('a')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex(text):\n    '''\n    Write a function that matches a string that has a zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex_re(text):\n    '''\n    Write a function that matches a string that has a zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex_re_re(text):\n    '''\n    Write a function that matches a string that has a zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\ndef text_match_zero_one_regex_with_re(text):\n    '''\n    Write a function that matches a string that has zero followed by a one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'\\b0\\b')\n    # match = pattern.match(text)\n    # print(match)\n    # return match\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    print(\"==================================\")\n    print(\"Your text contains 'a' followed by one or more 'b's.\")\n    print(\"==================================\")\n    print(\"Type \\\"exit\\\" to leave the program.\")\n    print(\"Type \\\"help\\\" for a list of commands.\")\n    print(\"Type \\\"quit\\\" to quit.\")\n    print(\"==================================\")\n    while True:\n        command = input(\"Enter a command: \").lower()\n        if command == \"exit\":\n            break\n        elif command == \"help\":\n            print(\"\\\"a\\\" followed by one or more 'b's. \\n\\n.help show list of commands\\n\\n\\\"quit\\\" to quit.\")\n        elif command == \"quit\":\n            break\n        else:\n            print(\"Invalid command. Please enter a valid command.\")\n    print(\"==================================\")\n    print(\"Thank you for using my program!\")\n    print(\"==================================\")\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a = ['a', 'b']\n    b = ['a', 'b', 'c']\n    c = ['a', 'b', 'c', 'd']\n    match_bool = True\n    if not text:\n        return match_bool\n    elif text[0] in a:\n        match_bool = match_bool and text[1:].startswith(a[0])\n    elif text[0] in b:\n        match_bool = match_bool and text[1:].startswith(b[0])\n    elif text[0] in c:\n        match_bool = match_bool and text[1:].startswith(c[0])\n    elif text[0] in ['a', 'b']:\n        match_bool = match_bool and text[1:].startswith(['a', 'b'])\n    else:\n        match_bool = match_bool and text[1:].startswith(['a', 'b', 'c', 'd'])\n    return match_bool\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_pattern = re.compile('^(\\w+) (a|b)$')\n    if match_pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    i = 0\n    while i < len(test_list):\n        j = len(test_list) - 1\n        while j >= i:\n            if test_list[j]!= test_list[i]:\n                break\n            j -= 1\n        if j!= i:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            total += 1\n    return total\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # your code goes here\n    n = len(test_list)\n    l = 0\n    r = 0\n    s = 0\n    for i in range(n):\n        l = test_list[i][::-1]\n        s = i\n        for j in range(i, n):\n            r = test_list[j][::-1]\n            if l == r:\n                s = j\n                break\n        if l == r:\n            s = i\n            break\n    return s - 1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    c = 0\n    i = len(test_list)-1\n    j = 0\n    while i>=0 and j<len(test_list):\n        if test_list[i] == test_list[j]:\n            c+=1\n            i-=1\n            j+=1\n        elif test_list[i]!= test_list[j]:\n            j+=1\n        else:\n            i+=1\n    return c\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 0:\n        return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reversed_list = []\n    for i in range(0, len(test_list)-1):\n        reversed_list.append(test_list[i])\n        reversed_list.append(test_list[i+1])\n    reversed_list.append(test_list[len(test_list)-1])\n    reversed_list.reverse()\n    pair_count = 0\n    for i in range(0, len(reversed_list)):\n        if reversed_list[i] == reversed_list[i+1]:\n            pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort()\n    l = 0\n    r = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            l += 1\n        else:\n            r += 1\n    return l,r\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    c=0\n    for i in range(len(test_list)-1):\n        if test_list[i]==test_list[i+1]:\n            c+=1\n        else:\n            pass\n    return c\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-i-1):\n            if test_list[i]==test_list[j+i]:\n                if test_list[j]==test_list[i] and test_list[j+i+1]==test_list[i]:\n                    print(\"{}-{}-{}\".format(test_list[i],test_list[j],test_list[j+i+1]))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                dict[list1[i]] = dict.get(list1[i], 0) + 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists = {}\n    for sublist in list1:\n        if sublist not in unique_sublists:\n            unique_sublists[sublist] = 1\n        else:\n            unique_sublists[sublist] += 1\n    return unique_sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sub_counts = {}\n    for x in range(0, len(list1)):\n        curr_list = list1[x]\n        temp_sub_counts = {}\n        for y in range(0, len(curr_list)):\n            if curr_list[y] not in temp_sub_counts:\n                temp_sub_counts[curr_list[y]] = 0\n            temp_sub_counts[curr_list[y]] += 1\n        sub_counts[x] = temp_sub_counts\n    return sub_counts\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary where each key is a list, and the value is the number of times that list appears in the original list.\n    # return_dictionary = {}\n    # for a list in list1:\n    #     a_list = list(a_list)\n    #     for i in a_list:\n    #         if i in return_dictionary:\n    #             return_dictionary[i] += 1\n    #         else:\n    #             return_dictionary[i] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for item in list1:\n        if item not in unique_dict:\n            unique_dict[item] = 1\n        else:\n            unique_dict[item] += 1\n    return unique_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            for j in list1[i]:\n                if j in result:\n                    result[j] += 1\n                else:\n                    result[j] = 1\n        else:\n            if list1[i] in result:\n                result[list1[i]] += 1\n            else:\n                result[list1[i]] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = dict()\n    for el in list1:\n        if el not in d:\n            d[el] = 1\n        else:\n            d[el] += 1\n    return d\n    pass\n    \n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pas"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(l): l.count(l[0]) for l in list1}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    from typing import Counter\n    \n    counter = Counter(list1)\n    \n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # YOUR CODE HERE\n    s = []\n    f = {}\n    for i in range(len(list1)):\n        t = list1[i]\n        s.append(t)\n    for i in s:\n        for j in range(len(i)):\n            if i[j] in f:\n                f[i[j]] += 1\n            else:\n                f[i[j]] = 1\n    return f\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '':\n        return True\n    if num[0] == '-' and num[1:].isdigit():\n        return False\n    if len(num) == 0 or (num[0] not in ('+', '-')) or (num[-1] not in ('0', '.', ',')):\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import math\n    if '.' in num:\n        return False\n    elif num == '0':\n        return True\n    elif num[:2] == '0.':\n        return False\n    else:\n        return math.isclose(float(num), 0, abs_tol=2e-3)\n    # raise NotImplementedError\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',','')\n    if num.isdigit():\n        try:\n            num = int(num)\n            return True\n        except:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        try:\n            int(num)\n        except ValueError:\n            return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # create a variable to hold the string and convert it to float\n    str_num = str(num)\n    \n    # create a variable to hold the length of the string and convert it to float\n    len_str = len(str_num)\n    \n    # if the number is in the range of 2 to 4 then it is a decimal number\n    if 2 <= len_str <= 4:\n        # print the string using print()\n        print(\"This is a decimal number\")\n        # print the number to two decimal places\n        print(f\"The number is {num}\")\n        # print the number as a decimal\n        print(f\"The number is {float(num)}\")\n        # return true\n        return True\n    \n    # if the number is outside the range of 2 to 4 then it is not a decimal number\n    else:\n        # print the string using print()\n        print(\"This is not a decimal number\")\n        # print the number to two decimal places\n        print(f\"The number is {num}\")\n        # print the number as a decimal\n        print(f\"The number is {float(num)}\")\n        # return false\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) >= 1 and len(num) <= 10:\n        numbers = []\n        for i in num:\n            if i.isnumeric():\n                numbers.append(i)\n        if numbers:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).isdigit()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, int):\n        return num > 0\n    else:\n        num = num.replace('.', '', 1).replace(',', '', 1)\n        return float(num) < 0\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    precision = 2\n    \n    for i in range(len(num)-precision):\n        if num[i] == '.':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return is_number(num) and len(num) > 2\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    check = []\n    check1 = []\n    for item in arr:\n        check.append(item)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        if arr[0] == arr[-1]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Your code here\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #raise NotImplementedError\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = 0\n    if not arr:\n        unique = 1\n        return unique\n    arr = sorted(arr)\n    for i in arr:\n        if unique == 1:\n            break\n        elif i!= arr[0]:\n            unique = 0\n            break\n    return unique\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    Unique=[]\n    for i in range(len(arr)):\n        if arr[i] not in Unique:\n            Unique.append(arr[i])\n    return Unique\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        unique = arr[0]\n        for i in arr:\n            if unique!= i:\n                return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 1:\n        return \"Invalid Input\"\n    dic = {}\n    for i in arr:\n        if i in dic:\n            return \"It is a duplicate\"\n        else:\n            dic[i] = 1\n    return \"Is Unique\"\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Wrong input\")\n        return\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number!\"\n    elif (monthnum3 % 10) == 0 and (monthnum3 % 100)!= 0:\n        return \"Invalid month number\"\n    elif (monthnum3 % 10) == 0 and (monthnum3 % 100) == 0:\n        return True\n    elif (monthnum3 % 10) == 1:\n        if monthnum3 % 100 == 0:\n            return True\n        elif (monthnum3 % 10) == 9:\n            if monthnum3 % 100!= 0:\n                return True\n    elif (monthnum3 % 10) == 9:\n        if (monthnum3 % 100)!= 0:\n            return True\n    elif (monthnum3 % 10) == 8:\n        if monthnum3 % 100!= 0:\n            return True\n    elif (monthnum3 % 10) == 7:\n        if monthnum3 % 100!= 0:\n            return True\n    elif (monthnum3 % 10) == 6:\n        if monthnum3 % 100!= 0:\n            return True\n    else:\n        if monthnum3 % 100!= 0:\n            return True\n    return \"Valid month number!\"\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        monthnumber = monthnum3\n        if monthnumber in range(1,13):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==2 or monthnum3==3 or monthnum3==4 or monthnum3==5 or monthnum3==6 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==11 or monthnum3==12:\n        print('Yes')\n    else:\n        print('No')\n        \ndef get_dayofmonth():\n    '''\n    Write a function that takes the month number, prints the day number from 1-31 and returns it.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n    \ndef get_daysinmonth():\n    '''\n    Write a function that takes the month number, prints the days in that month, and returns it.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n        days=[]\n        for i in range(monthnum3):\n            day=int(input())\n            days.append(day)\n        print(days)\n    \ndef count_dayinmonth():\n    '''\n    Write a function that takes the month number, prints the days in that month, and counts them.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n        days=[]\n        for i in range(monthnum3):\n            day=int(input())\n            days.append(day)\n        print(days)\n        print(days.count(1))\n        \ndef count_dayinmonth_months():\n    '''\n    Write a function that takes the month number, prints the days in that month, and counts them, in a month.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n        days=[]\n        for i in range(monthnum3):\n            day=int(input())\n            days.append(day)\n        print(days)\n        print(days.count(1))\n        print(days.count(2))\n        print(days.count(3))\n        print(days.count(4))\n        print(days.count(5))\n        print(days.count(6))\n        print(days.count(7))\n        print(days.count(8))\n        print(days.count(9))\n        print(days.count(10))\n        print(days.count(11))\n        print(days.count(12))\n        \ndef get_day_month():\n    '''\n    Write a function that takes the month number, prints the days in that month, and returns it.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n    days=[]\n    for i in range(monthnum3):\n        day=int(input())\n        days.append(day)\n    return days\n        \ndef get_day_month_days():\n    '''\n    Write a function that takes the month number, prints the days in that month, and counts them.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n    days=[]\n    for i in range(monthnum3):\n        day=int(input())\n        days.append(day)\n    return days\n        \ndef get_daysinmonth_day_and_month():\n    '''\n    Write a function that takes the month number, prints the days in that month, and counts them.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n    days=[]\n    for i in range(monthnum3):\n        day=int(input())\n        days.append(day)\n    return days\n    \ndef get_daysinmonth_month():\n    '''\n    Write a function that takes the month number, prints the days in that month, and counts them.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n    days=[]\n    for i in range(monthnum3):\n        day=int(input())\n        days.append(day)\n    return days\n    \ndef get_day_month_days_in_month():\n    '''\n    Write a function that takes the month number, prints the days in that month, and counts them.\n    '''\n    print(\"Enter the month number from 1 to 12:\")\n    monthnum3=int(input())\n    check_monthnumber_number(monthnum3)\n    if monthnum3<1 or monthnum3>12:\n        print('Invalid')\n    else:\n        print(monthnum3-1)\n    days=[]\n    for i in range(monthnum3):\n        day=int(input())\n        days.append(day)\n    return days\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return 'Wrong input. Month number should be in range from 1 to 12'\n    if monthnum3 == 1:\n        if 30 < monthnum3 < 31:\n            return 'Please choose month number less than 31'\n        else:\n            return 'Month number is 30 days. Please choose month number from 1 to 12'\n    else:\n        if 31 < monthnum3 < 30:\n            return 'Please choose month number less than 31'\n        elif 30 < monthnum3 < 31:\n            return 'Month number is 30 days. Please choose month number from 1 to 12'\n        else:\n            return 'Month number is 31 days. Please choose month number from 1 to 12'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not monthnum3 == 12:\n        return False\n    if not monthnum3 == 1:\n        return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3=str(monthnum3)\n    months=('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')\n    \n    if int(monthnum3)>12 or int(monthnum3)<1:\n        print(\"Invalid Month Number\")\n        return \"Invalid\"\n    \n    if len(monthnum3)==2:\n        if int(monthnum3)==1:\n            month=months[0]\n        elif int(monthnum3)==2:\n            month=months[1]\n        else:\n            month=months[int(monthnum3)-1]\n    else:\n        if int(monthnum3)==1:\n            month=months[int(monthnum3)-1]\n        else:\n            month=months[int(monthnum3)-2]\n    \n    return month\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if monthnum3 == 3 or monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 1:\n        if monthnum3 == 2:\n            return True\n        else:\n            return False\n    elif monthnum3 == 5:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 6:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 7:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 8:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 9:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 10:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 11:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n    elif monthnum3 == 12:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    left = 0\n    right = n - 1\n    arr_min = arr[left] + arr[right]\n    while left < right:\n        if arr_min > arr[left] + arr[right]:\n            arr_min = arr[left] + arr[right]\n        if arr_min < arr[left]:\n            left += 1\n        if arr_min > arr[right]:\n            right -= 1\n    return arr_min\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Your code here\n    # Create a list of the indices of elements\n    # Put the indices into a loop\n    # Within that loop, compare the elements\n    # If the elements are equal, return the smallest difference\n    # If the elements are not equal, do nothing and return the smallest difference\n    # If the elements are equal, return the smallest difference\n    min_diff = arr[0]\n    min_diff_ind = 0\n    for i in range(1,n):\n        if arr[i] == arr[i-1]:\n            continue\n        elif arr[i] < arr[i-1]:\n            min_diff = arr[i]\n            min_diff_ind = i\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    index = 1\n    \n    while(index < n):\n        min_diff = min(arr[index] - arr[index - 1], min_diff)\n        index += 1\n        \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    i = 0\n    j = len(arr)-1\n    min_diff = arr[i] - arr[j]\n    while (i < j): \n        if arr[i] - arr[j] < min_diff: \n            min_diff = arr[i] - arr[j] \n        if arr[i] - arr[j] > min_diff: \n            min_diff = arr[i] - arr[j] \n        if arr[i] < arr[j]: \n            i += 1\n        else: \n            j -= 1\n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    min_diff = arr[0] + arr[1]\n    min_diff_index = 0\n    for i in range(2, n):\n        min_diff_ = arr[i] + arr[i-1]\n        if min_diff > min_diff_:\n            min_diff = min_diff_\n            min_diff_index = i\n    return min_diff_index\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[0] - arr[1]\n    for i in range(2,len(arr)):\n        min_diff = min(min_diff,arr[i]-arr[i-2])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) == 1:\n        return arr[0] - arr[0]\n    min_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # initialize the min_diff\n    min_diff = arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if arr[n-1] < arr[n-2]:\n        return find_min_diff(arr,n-1)\n    elif arr[n-1] > arr[n-2]:\n        return find_min_diff(arr,n-2)\n    else:\n        return arr[n-2]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff2(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff3(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_r(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_r_r(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_r_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_r_r_r(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_r_r(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_r_r_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_r_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_r_r(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_r_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_r_r_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_r_l(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        if(arr[i] - temp < min_diff):\n            min_diff = arr[i] - temp\n    return min_diff\ndef find_min_diff_l_r_r(arr,n):\n    '''\n    Write a python functio"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == \"0\":\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    import math\n    return math.ceil(len(str)/2)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = list(str)\n    n = len(l)\n    ctr = 0\n    for i in l:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    a = 0\n    for i in str:\n        if i.isdigit():\n            a += 1\n    return a\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0: \n        return 0\n    if n>0 and n<=1: \n        return 1\n    else: \n        return 2*is_polite(n-1)+is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    return (is_polite(n//2) and (n % 2 == 1)) or is_polite(n//2 + 1) \n    \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while (i * i) <= n:\n        if (n % i) == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<10:\n        return n\n    else:\n        n=n-10\n        for i in range(1,(n+1)//2):\n            if n%i==0:\n                break\n        return is_polite(n//i)"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    assert n > 0, 'n must be positive'\n    num = 0\n    for i in range(1, n+1): \n        num = num + pow(i, 2)\n    if num == n: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    max_val = n\n    for i in range(1,n+1):\n        count+=1\n        if(n%i==0):\n            max_val=i\n            break\n    print(count)\n    return max_val\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # use power of base 10 to get the equivalent of 2^n\n    return int(n**(1/2))\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n == 0 or n == 1): \n        return n \n    else: \n        return (is_polite(n - 1) + is_polite(n - 2)) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n in range(1,100):\n        return n \n    elif n in range(100,1000):\n        return n+1\n    else:\n        return n+2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    l = []\n    for i in range(len(l1)):\n        if i == 0:\n            l.append(l1[i])\n        elif l1[i-1]!= l1[i]:\n            l.append((l1[i-1], l1[i]))\n    return l\n    # your code goes here\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def get_pairs(s):\n        '''\n        A helper function to find all pairs of consecutive items in a given list.\n        '''\n        l1.sort()\n        n = len(l1)\n        return [(l1[i], l1[i+1]) for i in range(n-1)]\n    l2 = get_pairs(l1)\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for x in range(len(l1)):\n        if x < len(l1) - 1:\n            result.append([l1[x], l1[x + 1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    list_of_lists = list(zip(*[iter(l1)] * 2))\n    for x in list_of_lists:\n        if len(x) % 2 == 0:\n            pair_list.append(x)\n    return pair_list\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)-1):\n        if l1[i+1] - l1[i] == 1:\n            l2.append([l1[i],l1[i+1]])\n        elif l1[i+1] - l1[i] == -1:\n            l2.append([l1[i],l1[i+1]-1])\n        elif l1[i+1] - l1[i] == 0:\n            l2.append([l1[i],l1[i+1]-1])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    l = len(l1)\n    for i in range(l):\n        if i > 0:\n            if l1[i] == l1[i-1] and l1[i] not in pairs:\n                pairs.append((l1[i],l1[i-1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,x) for x in l1[1:]]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for item in l1:\n        if item!= l1[0]:\n            l2.append((item, item+1))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    # loop through all elements in the list\n    for i in range(len(l1) - 1):\n        # check if list elements are same\n        if l1[i] == l1[i + 1]:\n            # if so, add it to new list\n            l2.append((l1[i], l1[i + 1]))\n        # if not, not same, append it\n        else:\n            # append\n            l2.append((l1[i], l1[i + 1]))\n    # return\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            pair_list.append([l1[i],l1[j]])\n    return pair_list\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    numbers = []\n    for i in arr:\n        numbers.append(i)\n    numbers.sort()\n    count = 0\n    #print(numbers)\n    for i in range(len(numbers)-1):\n        if numbers[i] + numbers[i+1] == sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if sum - arr[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in arr:\n        if (sum - i) in arr:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if(arr[i] + arr[i+1] == sum):\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum - arr.count(sum)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if sum - arr[i] - arr[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    new_list = []\n    \n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            new_list.append(li1[i])\n    \n    return new_list\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list=[]\n    for i in range(len(li1)):\n        diff_list.append(li1[i]-li2[i])\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    s1=set(li1)\n    s2=set(li2)\n    return s1.difference(s2)\n    \ndef Merge(li1,li2):\n    '''\n    Write a python function to merge two lists into a single list.\n    '''\n    return li1+li2\n    \ndef Check(li1,li2):\n    '''\n    Write a python function to check if two lists have the same elements or not.\n    '''\n    s1=set(li1)\n    s2=set(li2)\n    return s1==s2\n    \ndef Extend(li1,li2):\n    '''\n    Write a python function to extend two lists.\n    '''\n    return li1+li2\n    \ndef Insert(li1,i,li2):\n    '''\n    Write a python function to insert an element at a specific position in a list.\n    '''\n    return li1[:i]+li2+li1[i:]\n    \ndef Count(li1,li2):\n    '''\n    Write a python function to count the number of elements in two lists.\n    '''\n    return li1.count(li2)\n    \ndef Index(li1,li2):\n    '''\n    Write a python function to get the index of an element in a list.\n    '''\n    return li1.index(li2)\n    \ndef Remove(li1,i):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    return li1[:i] + li1[i+1:]\n    \ndef Reverse(li1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return li1[::-1]\n    \ndef Insert(li1,i,li2):\n    '''\n    Write a python function to insert an element at a specific position in a list.\n    '''\n    return li1[:i] + li2 + li1[i:]\n    \ndef Repeat(li1,li2):\n    '''\n    Write a python function to concatenate two lists.\n    '''\n    return li1+li2\n    \ndef Pick(li1,i):\n    '''\n    Write a python function to pick an element from a list.\n    '''\n    return li1[:i]\n    \ndef Sort(li1):\n    '''\n    Write a python function to sort the list.\n    '''\n    return li1\n    \ndef Sub(li1,li2):\n    '''\n    Write a python function to substract two lists.\n    '''\n    return li1-li2\n    \ndef Sum(li1,li2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return sum(li1)+sum(li2)\n    \ndef Power(li1,li2):\n    '''\n    Write a python function to power two a list.\n    '''\n    return li1*li2\n    \ndef SumDiv(li1,li2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return li1+li2\n    \ndef PreFix(li1,li2):\n    '''\n    Write a python function to prefix two lists.\n    '''\n    return li1+li2\n    \ndef Div(li1,li2):\n    '''\n    Write a python function to divide two lists.\n    '''\n    return li1/li2\n    \ndef Square(li1):\n    '''\n    Write a python function to square a list.\n    '''\n    return li1**2\n    \ndef Cube(li1):\n    '''\n    Write a python function to cube a list.\n    '''\n    return li1**3\n    \ndef Sum(li1,li2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return li1+li2\n    \ndef Mul(li1,li2):\n    '''\n    Write a python function to multiply two lists.\n    '''\n    return li1*li2\n    \ndef MulDiv(li1,li2):\n    '''\n    Write a python function to multiply two lists.\n    '''\n    return li1*li2\n    \ndef Count(li1,li2):\n    '''\n    Write a python function to count the number of elements in two lists.\n    '''\n    return li1.count(li2)\n    \ndef Array(li1):\n    '''\n    Write a python function to convert a list into an array.\n    '''\n    return li1\n    \ndef Reverse(li1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return li1[::-1]\n    \ndef Reverse(li1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return li1[::-1]\n    \ndef Sum(li1,li2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return li1+li2\n    \ndef Div(li1,li2):\n    '''\n    Write a python function to divide two lists.\n    '''\n    return li1/li2\n    \ndef Add(li1,li2):\n    '''\n    Write a python function to add two lists.\n    '''\n    return li1+li2\n    \ndef Sub(li1,li2):\n    '''\n    Write a python function to substract two lists.\n    '''\n    return li1-li2\n    \ndef Multi(li1,li2):\n    '''\n    Write a python function to multiply two lists.\n    '''\n    return li1*li2\n    \ndef Index(li1,li2):\n    '''\n    Write a python function to get the index of an element in a list.\n    '''\n    return li1.index(li2)\n    \ndef Remove(li1,i):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    return li1[:i] + li1[i+1:]\n    \ndef Merge(li1,li2):\n    '''\n    Write a python function to merge two lists into a single list.\n    '''\n    return li1+li2\n    \ndef Split(li1,li2):\n    '''\n    Write a python function to split two lists into two lists.\n    '''\n    return li1,li2\n    \ndef Toggle(li1,i):\n    '''\n    Write a python function to toggle an element of a list.\n    '''\n    return li1[:i] + li1[i:]\n    \ndef Reset(li1):\n    '''\n    Write a python function to reset a list.\n    '''\n    return li1\n    \ndef Check(li1,li2):\n    '''\n    Write a python function to check if two lists have the same elements or not.\n    '''\n    return li1==li2\n    \ndef Replace(li1,i,li2):\n    '''\n    Write a python function to replace an element at a specific position in a list.\n    '''\n    return li1[:i] + li2 + li1[i:]\n    \ndef Reverse(li1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return li1[::-1]\n    \ndef Merge(li1,li2):\n    '''\n    Write a python function to merge two lists into a single list.\n    '''\n    return li1+li2\n    \ndef SumDiv(li1,li2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return li1+li2\n    \ndef Count(li1,li2):\n    '''\n    Write a python function to count the number of elements in two lists.\n    '''\n    return li1.count(li2)\n    \ndef Index(li1,li2):\n    '''\n    Write a python function to get the index of an element in a list.\n    '''\n    return li1.index(li2)\n    \ndef Remove(li1,i):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    return li1[:i] + li1[i+1:]\n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for x in range(len(li1)):\n        li3.append(li1[x]-li2[x])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [item for item in li1 if item not in li2]\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    lst = []\n    for i in range(n+1) : \n        lst.append(i)\n    lst.pop()\n    res = 0\n    for num in lst : \n        res += (num**4)\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum += pow(2, i)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #print(n)\n    if(n == 0) :\n        return 0\n    elif(n == 1) :\n        return 1\n    elif(n == 2) :\n        return 2\n    elif(n == 3) :\n        return 4\n    elif(n == 4) :\n        return 8\n    elif(n == 5) :\n        return 16\n    elif(n == 6) :\n        return 32\n    elif(n == 7) :\n        return 64\n    elif(n == 8) :\n        return 128\n    elif(n == 9) :\n        return 256\n    elif(n == 10) :\n        return 512\n    elif(n == 11) :\n        return 1024\n    elif(n == 12) :\n        return 2048\n    elif(n == 13) :\n        return 4096\n    elif(n == 14) :\n        return 8192\n    elif(n == 15) :\n        return 16384\n    elif(n == 16) :\n        return 32768\n    elif(n == 17) :\n        return 65536\n    elif(n == 18) :\n        return 131072\n    elif(n == 19) :\n        return 262144\n    elif(n == 20) :\n        return 524288\n    elif(n == 21) :\n        return 1048576\n    elif(n == 22) :\n        return 2097152\n    elif(n == 23) :\n        return 4194304\n    elif(n == 24) :\n        return 8388608\n    elif(n == 25) :\n        return 16777216\n    elif(n == 26) :\n        return 33554432\n    elif(n == 27) :\n        return 67108864\n    elif(n == 28) :\n        return 134217728\n    elif(n == 29) :\n        return 4194304\n    elif(n == 30) :\n        return 8388608\n    elif(n == 31) :\n        return 16777216\n    elif(n == 32) :\n        return 33554432\n    elif(n == 33) :\n        return 67108864\n    elif(n == 34) :\n        return 134217728\n    elif(n == 35) :\n        return 4194304\n    elif(n == 36) :\n        return 8388608\n    elif(n == 37) :\n        return 16777216\n    elif(n == 38) :\n        return 33554432\n    elif(n == 39) :\n        return 67108864\n    elif(n == 40) :\n        return 134217728\n    elif(n == 41) :\n        return 4194304\n    elif(n == 42) :\n        return 8388608\n    elif(n == 43) :\n        return 16777216\n    elif(n == 44) :\n        return 33554432\n    elif(n == 45) :\n        return 67108864\n    elif(n == 46) :\n        return 134217728\n    elif(n == 47) :\n        return 4194304\n    elif(n == 48) :\n        return 8388608\n    elif(n == 49) :\n        return 16777216\n    elif(n == 50) :\n        return 33554432\n    elif(n == 51) :\n        return 67108864\n    elif(n == 52) :\n        return 134217728\n    elif(n == 53) :\n        return 4194304\n    elif(n == 54) :\n        return 8388608\n    elif(n == 55) :\n        return 16777216\n    elif(n == 56) :\n        return 33554432\n    elif(n == 57) :\n        return 67108864\n    elif(n == 58) :\n        return 134217728\n    elif(n == 59) :\n        return 4194304\n    elif(n == 60) :\n        return 8388608\n    elif(n == 61) :\n        return 16777216\n    elif(n == 62) :\n        return 33554432\n    elif(n == 63) :\n        return 67108864\n    elif(n == 64) :\n        return 134217728\n    elif(n == 65) :\n        return 4194304\n    elif(n == 66) :\n        return 8388608\n    elif(n == 67) :\n        return 16777216\n    elif(n == 68) :\n        return 33554432\n    elif(n == 69) :\n        return 67108864\n    elif(n == 70) :\n        return 134217728\n    elif(n == 71) :\n        return 4194304\n    elif(n == 72) :\n        return 8388608\n    elif(n == 73) :\n        return 16777216\n    elif(n == 74) :\n        return 33554432\n    elif(n == 75) :\n        return 67108864\n    elif(n == 76) :\n        return 134217728\n    elif(n == 77) :\n        return 4194304\n    elif(n == 78) :\n        return 8388608\n    elif(n == 79) :\n        return 16777216\n    elif(n == 80) :\n        return 33554432\n    elif(n == 81) :\n        return 67108864\n    elif(n == 82) :\n        return 134217728\n    elif(n == 83) :\n        return 4194304\n    elif(n == 84) :\n        return 8388608\n    elif(n == 85) :\n        return 16777216\n    elif(n == 86) :\n        return 33554432\n    elif(n == 87) :\n        return 67108864\n    elif(n == 88) :\n        return 134217728\n    elif(n == 89) :\n        return 4194304\n    elif(n == 90) :\n        return 8388608\n    elif(n == 91) :\n        return 16777216\n    elif(n == 92) :\n        return 33554432\n    elif(n == 93) :\n        return 67108864\n    elif(n == 94) :\n        return 134217728\n    elif(n == 95) :\n        return 4194304\n    elif(n == 96) :\n        return 8388608\n    elif(n == 97) :\n        return 16777216\n    elif(n == 98) :\n        return 33554432\n    elif(n == 99) :\n        return 67108864\n    elif(n == 100) :\n        return 134217728\n    elif(n == 101) :\n        return 4194304\n    elif(n == 102) :\n        return 8388608\n    elif(n == 103) :\n        return 16777216\n    elif(n == 104) :\n        return 33554432\n    elif(n == 105) :\n        return 67108864\n    elif(n == 106) :\n        return 134217728\n    elif(n == 107) :\n        return 4194304\n    elif(n == 108) :\n        return 8388608\n    elif(n == 109) :\n        return 16777216\n    elif(n == 110) :\n        return 33554432\n    elif(n == 111) :\n        return 67108864\n    elif(n == 112) :\n        return 134217728\n    elif(n == 113) :\n        return 4194304\n    elif(n == 114) :\n        return 8388608\n    elif(n == 115) :\n        return 16777216\n    elif(n == 116) :\n        return 33554432\n    elif(n == 117) :\n        return 67108864\n    elif(n == 118) :\n        return 134217728\n    elif(n == 119) :\n        return 4194304\n    elif(n == 120) :\n        return 8388608\n    elif(n == 121) :\n        return 16777216\n    elif(n == 122) :\n        return 33554432\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : return 0\n    elif n == 0 : return 0\n    elif n == 1 : return 1\n    else :\n        return n * sum(odd_num_sum(n-2)) \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #print('odd_num_sum')\n    return sum([i**4 for i in range(1,n+1)])\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Calculate the sum of fourth power of first n odd natural numbers.\n    sum_of_fourth_powers = 0\n    for power_of_odd_n in range(1, n+1, 2):\n        sum_of_fourth_powers += power_of_odd_n**4\n    return sum_of_fourth_powers\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    n = n-1\n    while n >= 0 :\n        sum = sum + n * (n-1) // 2\n        n = n - 1\n    return sum\ndef is_odd(n):\n    if n % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n) :\n        if i % 4 == 0 :\n            total += i ** 4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # define a variable to store result\n    sum = 0\n    # define a for loop\n    for i in range(n) :\n        # define a variable to store the power of first n natural numbers\n        power = i\n        # define a while loop\n        while(power % 2 == 0) :\n            # add a power of second natural numbers to the result\n            sum += power * power\n            # increase the power by two\n            power += 2\n    # return the result\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    res = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Empty expression\n    if exp == '':\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if type(exp) is not str:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    operands = exp.split('(')\n    left_operand = operands.pop(0)\n    right_operand = operands.pop(0)\n    while len(operands) > 0:\n        operator = operands.pop(0)\n        right_operand = operator + right_operand + ')'\n        left_operand = operator + left_operand + ')'\n        if operator!= '(':\n            return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append(exp)\n    visited = []\n    answer = True\n    count = 0\n    while(len(stack)!= 0):\n        if(len(stack) == 1):\n            answer = True\n            break\n        current = stack.pop()\n        if current in visited:\n            answer = False\n            break\n        if(current[0] == '('):\n            stack.append(current[1:])\n            if(current[0] == ')'):\n                count+=1\n            else:\n                count-=1\n        else:\n            answer = False\n            break\n        visited.append(current)\n    return answer,count\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    index = 0\n    for idx in range(len(exp)):\n        if exp[idx] == '(':\n            stack.append(exp[index])\n            index += 1\n        elif exp[idx] == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if '(' in exp:\n        left_bracket = exp.index('(')\n        exp = exp[:left_bracket]\n    if ')' in exp:\n        right_bracket = exp.index(')')\n        exp = exp[:right_bracket]\n    if len(exp) % 2 == 0:\n        for i in range(0, len(exp), 2):\n            if exp[i]!= exp[i + 1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    result = deque([])\n    \n    #convert to a string\n    exp = str(exp)\n    #check if there is a left paranthesis\n    if exp[0] == '(' or exp[0] == '{':\n        stack.append('(')\n    #check if there is a right paranthesis\n    if exp[-1] == ')':\n        if len(stack) > 0:\n            result.append('{')\n        else:\n            result.append('(')\n    #check for the brackets\n    for i in range(1, len(exp)):\n        if exp[i] == '(' or exp[i] == '{':\n            if len(stack) == 0:\n                result.append(exp[i])\n            else:\n                stack.append(exp[i])\n        if exp[i] == ')' or exp[i] == '}':\n            if len(stack) == 0:\n                result.append(')')\n            else:\n                if stack[-1] == '(':\n                    result.append(')')\n                else:\n                    result.append('(')\n                stack.pop()\n    if len(stack)!= 0:\n        result.append(')')\n    #check if there is a closing brace\n    if exp[-1] == '}':\n        if len(stack)!= 0:\n            result.append(')')\n        else:\n            result.append('}')\n    return result\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left = ['(']\n    right = [')']\n    stack = deque()\n    for char in exp:\n        if char in left:\n            if char not in stack:\n                stack.append(char)\n            else:\n                if stack.pop()!= '(':\n                    return False\n        elif char in right:\n            if stack.pop()!= ')':\n                return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = list(test_str.lower())\n    for i in range(len(word_list)):\n        for j in range(i + 1, len(word_list)):\n            if len(word_list[i]) + len(word_list[j]) == K:\n                word_list[i] = ''\n                word_list[j] = ''\n    return \"\".join(word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) > K:\n        return 'Not a palindrome'\n    else:\n        return test_str[:K]\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.strip().split()\n    word_list = []\n    for word in test_str:\n        if len(word) == K:\n            word_list.append(word)\n    return''.join(word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split(\" \")\n    rem_list = []\n    for word in str_list:\n        if len(word) == K:\n            rem_list.append(word)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.lower()\n    test_str = test_str.split(' ')\n    for i in test_str:\n        if len(i) == K:\n            test_str.remove(i)\n    return''.join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) == K:\n            new_words.append(word.strip())\n    return''.join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    ans = list(set(test_str))\n    \n    for word in ans:\n        print(word, end=\" \")\n        \n    for idx, val in enumerate(test_str):\n        if len(val) == K:\n            ans.pop(idx)\n    print()\n    \n    return \" \".join(ans)\n    \nprint(remove_length(test_str, 3))\nprint(remove_length(test_str, 5))\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str)!= len(set(test_str)):\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_lengths = [len(word) for word in test_str.split()]\n    if len(set(word_lengths)) == 1:\n        return test_str.strip()\n    else:\n        return 'No length found'\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text==pattern:\n        return None\n    for i in range(0,len(text)):\n        if not text[i:i+len(pattern)]==pattern:\n            return None\n    return text[i:]\ndef is_numeric(s):\n    '''\n    A function to check if the string can be converted to a numeric string.\n    '''\n    i=0\n    while i<len(s) and s[i].isdigit():\n        i+=1\n    return s[:i]==s[:i].split('.')[0]\ndef is_one_of_them(s,pattern):\n    '''\n    A function to check if the string can be converted to a one of them string.\n    '''\n    i=0\n    while i<len(s) and s[i:i+len(pattern)]==pattern:\n        i+=1\n    return s[:i]!=s[i:]\ndef is_symbol(s):\n    '''\n    A function to check if the string is a symbol.\n    '''\n    if '$' in s:\n        return True\n    if '.' in s:\n        return False\n    i=0\n    while i<len(s) and s[i:i+len(s[0])]==s[0]:\n        i+=1\n    return s[:i]==s[i:].split('.')[0]\ndef is_any_of_them(s,pattern):\n    '''\n    A function to check if the string can be converted to a any of them string.\n    '''\n    i=0\n    while i<len(s) and s[i:i+len(pattern)]==pattern:\n        i+=1\n    return s[:i]==s[i:]\ndef is_letter(s):\n    '''\n    A function to check if the string can be converted to a letter.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='*':\n        i+=1\n    return s[:i]==s[i:]\ndef is_number(s):\n    '''\n    A function to check if the string can be converted to a number.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='0':\n        i+=1\n    return s[:i]==s[i:]\ndef is_upper_letter(s):\n    '''\n    A function to check if the string can be converted to a letter.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='$':\n        i+=1\n    return s[:i]==s[i:]\ndef is_lower_letter(s):\n    '''\n    A function to check if the string can be converted to a letter.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='.':\n        i+=1\n    return s[:i]==s[i:]\ndef is_symbol_symbol(s):\n    '''\n    A function to check if the string can be converted to a symbol and symbol.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='*' and i+2<len(s):\n        i+=1\n    return s[:i]==s[i:]\ndef is_numeric_numeric_numeric_numeric_numeric_numeric_numeric_numeric_numeric_numeric_numeric(s,pattern):\n    '''\n    A function to check if the string can be converted to a numeric, numeric, numeric, numeric, numeric.\n    '''\n    i=0\n    while i<len(s) and s[i:i+len(pattern)]==pattern:\n        i+=1\n    return s[:i]==s[i:]\ndef is_symbol_symbol_symbol(s):\n    '''\n    A function to check if the string can be converted to a symbol and symbol.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='*' and i+2<len(s):\n        i+=1\n    return s[:i]==s[i:]\ndef is_any_of_symbols_symbols_symbols_symbols_symbols_symbols(s,pattern):\n    '''\n    A function to check if the string can be converted to a any of them string.\n    '''\n    i=0\n    while i<len(s) and s[i:i+len(pattern)]==pattern:\n        i+=1\n    return s[:i]==s[i:]\ndef is_any_of_symbols_symbols(s,pattern):\n    '''\n    A function to check if the string can be converted to a any of them string.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='*':\n        i+=1\n    return s[:i]==s[i:]\ndef is_any_symbol_symbol(s):\n    '''\n    A function to check if the string can be converted to a symbol and symbol.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='.':\n        i+=1\n    return s[:i]==s[i:]\ndef is_any_numeric_numeric_numeric(s,pattern):\n    '''\n    A function to check if the string can be converted to a numeric, numeric, numeric, numeric, numeric.\n    '''\n    i=0\n    while i<len(s) and s[i:i+len(pattern)]==pattern:\n        i+=1\n    return s[:i]==s[i:]\ndef is_any_numeric(s):\n    '''\n    A function to check if the string can be converted to a numeric.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='.':\n        i+=1\n    return s[:i]==s[i:]\ndef is_any_symbol(s):\n    '''\n    A function to check if the string can be converted to a symbol.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='*' and i+2<len(s):\n        i+=1\n    return s[:i]==s[i:]\ndef is_any_symbol_symbol(s):\n    '''\n    A function to check if the string can be converted to a symbol and symbol.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='*' and i+2<len(s):\n        i+=1\n    return s[:i]==s[i:]\ndef is_one_of_them_numeric(s,pattern):\n    '''\n    A function to check if the string can be converted to a numeric and numeric.\n    '''\n    i=0\n    while i<len(s) and s[i:i+len(pattern)]==pattern:\n        i+=1\n    return s[:i]==s[i:]\ndef is_one_of_them_symbol(s,pattern):\n    '''\n    A function to check if the string can be converted to a symbol and symbol.\n    '''\n    i=0\n    while i<len(s) and s[i:i+len(pattern)]==pattern:\n        i+=1\n    return s[:i]==s[i:]\ndef is_one_of_them_symbol_symbol(s,pattern):\n    '''\n    A function to check if the string can be converted to a symbol and symbol and symbol.\n    '''\n    i=0\n    while i<len(s) and s[i:i+1]=='*' and i+2<len(s):\n        i+=1\n    return s[:i]==s[i:]\ndef is_all_of_them_numeric(s,pattern):\n    '''\n    A function to check if the string can b"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos_string = re.compile(pattern)\n    sub_string = pos_string.findall(text)\n    if sub_string!= None:\n        print(sub_string)\n        return sub_string\n    else:\n        return None\n    \ndef pattern_substring(text,pattern):\n    '''\n    Write a function to find the substring within a string. Return None if there is no match.\n    '''\n    pos_string = re.compile(pattern)\n    sub_string = pos_string.findall(text)\n    print(sub_string)\n    return sub_string\n    \ndef pattern_contains(text,pattern):\n    '''\n    Write a function to find the substring in a string that contains a given pattern. Return None if there is no match.\n    '''\n    pos_string = re.compile(pattern)\n    cont_string = pos_string.findall(text)\n    print(cont_string)\n    return cont_string\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # Create regular expression\n    regex = re.compile(pattern)\n    \n    # Scan the text string for the pattern\n    m = regex.search(text)\n    \n    # If there is a match\n    if m:\n        \n        # Scan the whole text for the pattern\n        begin = text[0:m.start()]\n        end = text[m.end():len(text)]\n        \n        # Return the list of match\n        return begin, end\n    \n    # If there is no match\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    return [i for i,x in enumerate(text) if re.search(pattern,x)]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\"-\",\"\")\n    pattern = pattern.replace(\"'\",\"\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\" \",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\".\",\"-\")\n    pattern = pattern.replace(\".\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\".\",\"-\")\n    pattern = pattern.replace(\".\",\"-\")\n    pattern = pattern.replace(\",\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\"-\")\n    pattern = pattern.replace(\"-\",\""
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern == \"\":\n        return None\n    else:\n        matches = re.finditer(pattern,text)\n        # If the pattern contains no match, return None.\n        if not matches:\n            return None\n        # Otherwise, return the last match in the sequence\n        else:\n            return matches[-1]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace(' ','')\n    pattern = pattern.replace('[','')\n    pattern = pattern.replace(']','')\n    \n    pattern = pattern.replace(' ','')\n    pattern = pattern.replace('[','')\n    pattern = pattern.replace(']','')\n    \n    pattern = pattern.replace('()','')\n    pattern = pattern.replace('{}','')\n    pattern = pattern.replace('()}','')\n    pattern = pattern.replace('}]','')\n    pattern = pattern.replace('}]','')\n    \n    pattern = pattern.replace('{[','')\n    pattern = pattern.replace(']','')\n    pattern = pattern.replace(']{','')\n    pattern = pattern.replace('}','')\n    \n    pattern = pattern.replace('{[', '')\n    pattern = pattern.replace(']}','')\n    pattern = pattern.replace('[{','')\n    pattern = pattern.replace(']}','')\n    \n    pattern = pattern.replace('{}]','')\n    pattern = pattern.replace('}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{(','')\n    pattern = pattern.replace(')}','')\n    \n    pattern = pattern.replace('{[','')\n    pattern = pattern.replace(']}','')\n    pattern = pattern.replace('[{','')\n    pattern = pattern.replace(']}','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[','')\n    pattern = pattern.replace(']}','')\n    pattern = pattern.replace('[{','')\n    pattern = pattern.replace(']}','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('[]]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[','')\n    pattern = pattern.replace(']}','')\n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}','')\n    \n    \n    pattern = pattern.replace('([{]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{]','[')\n    pattern = pattern.replace('[{]','[')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[','')\n    pattern = pattern.replace(']}','')\n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[','')\n    pattern = pattern.replace(']}','')\n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    pattern = pattern.replace(']}]','')\n    pattern = pattern.replace('[}]','')\n    \n    pattern = pattern.replace('{[]}','')\n    pattern = pattern.replace('][]','')\n    \n    pattern = pattern.replace('[{[','')\n    patter"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    pattern=pattern.replace(' ','')\n    pattern=pattern.replace('.','')\n    pattern=pattern.replace('!',' ')\n    pattern=pattern.replace('?',' ')\n    pattern=pattern.replace(' ',' ')\n    pattern=pattern.replace('\\n',' ')\n    pattern=pattern.replace('\\t',' ')\n    pattern=pattern.replace('\\r',' ')\n    pattern=pattern.replace('\\0',' ')\n    pattern=pattern.replace('\\x0a',' ')\n    pattern=pattern.replace('\\x85',' ')\n    pattern=pattern.replace('\\xA0',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replace('\\uFEFF',' ')\n    pattern=pattern.replac"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace(\"[\",\"(\").replace(\"]\",\")\").replace(\"{\",\"{\").replace(\"}\",\"}\").replace(\" \",\"\")\n    matches = re.findall(pattern,text)\n    if len(matches)>0:\n        return(matches[0])\n    else:\n        return(None)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    s=re.finditer(pattern,text)\n    for i in range(len(s)):\n        j=s[i].end()\n        if s[i].start()>=len(text)-1:\n            continue\n        if s[i].group() in text[s[i].start():j]:\n            return s[i].group()\n    return None\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    index = 0\n    while index < len(nums):\n        if nums[index] % 2 == 1:\n            return False\n        index += 1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    else:\n        num = 1\n        for index in range(len(nums)):\n            if num % 2!= 0:\n                return False\n            num += 1\n        return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = []\n    # Odd numbers are numbers that are odd indexes i.e. 3,5,7,9,11 etc.\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            odd_nums.append(nums[i])\n    return odd_nums\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # if not isinstance(nums, list):\n    #     raise TypeError(\"nums must be a list\")\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd = True\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    num_list = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            num_list.append(nums[i])\n    return num_list\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            if nums[i]%2!=0:\n                return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for index in range(len(nums)):\n        if nums[index % 2] % 2 == 1:\n            return False\n        odd_index += 1\n    return True\n    pass\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    # For each character in the string\n    for index in range(len(test_str)):\n        # Check if the character is a vowel\n        if test_str[index] in VOWELS:\n            # Check if the next character is a vowel\n            if test_str[index + 1] in VOWELS:\n                # Increment the count\n                count_vowels(test_str[index: index + 2])\n            else:\n                # Increment the count\n                count_vowels(test_str[index + 2: index + 3])\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for i in test_str:\n        if i in vowels:\n            count += test_str.count(i)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {\n        'A',\n        'E',\n        'I',\n        'O',\n        'U',\n        'a',\n        'e',\n        'i',\n        'o',\n        'u',\n    }\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i].lower() in \"aeiou\":\n            if test_str[i + 1].lower() in \"aeiou\":\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    for letter in test_str:\n        if letter in vowels:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in vowels:\n        if test_str.count(i) > 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for c in test_str:\n        if c in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    \n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in sum:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    sum = 0\n    for x in arr:\n        if x not in arr:\n            sum += x\n    \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if i not in total:\n            total += i\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == []: \n        return 0\n    total = 0\n    # iterate through list \n    for i in arr: \n        # set element to 1 \n        total += i \n        # check if element is repeated \n        if arr.count(i) > 1: \n            return 0\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # print(arr)\n    l = len(arr)\n    sum = 0\n    for i in range(l):\n        if arr[i] not in arr[i+1:]:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_num = 0\n    for element in arr: \n        if element!= element: \n            sum_num += element\n    return sum_num\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if arr.count(i) > 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #pack each sublist with a list of consecutive duplicates.\n    #eg. [1,3,2,1,2,3,3] -> [ [1,2], [2,3], [1,3], [2,3], [1,3], [2,3] ]\n    #:param list1: List to be packed\n    #:return: List of lists\n    #:precondition: list1 is a list\n    #:complexity: O(n^2)\n    \n    def check_if_duplicate_removed(list_):\n        '''\n        check if the list contains duplicate and remove it from the list\n        '''\n        #:param list_: List to be checked\n        #:precondition: list_ is a list\n        #:complexity: O(n)\n        \n        result = []\n        for (key, group) in groupby(list_, key = lambda x: x[0]):\n            try:\n                if group[1] == group[-1]:\n                    result.append(list(group))\n            except IndexError:\n                #if the list does not have consecutive duplicates\n                #re-pack the duplicate list\n                result.append([*group])\n        \n        return result\n    \n    def merge(list1, list2):\n        '''\n        Merge two lists into one sublist\n        :param list1: First list\n        :param list2: Second list\n        :precondition: list1 and list2 are lists\n        :complexity: O(m+n)\n        '''\n        #:param list1: First list\n        #:param list2: Second list\n        #:precondition: list1 and list2 are lists\n        #:complexity: O(m+n)\n        \n        result = []\n        for (idx, v1) in enumerate(list1):\n            try:\n                for (idx, v2) in enumerate(list2):\n                    if v1 == v2:\n                        result.append(list1[idx] + list2[idx])\n                        break\n            except IndexError:\n                #if the list does not have consecutive duplicates\n                #re-pack the duplicate list\n                result.append([*list2[idx:]])\n        \n        return result\n    \n    def compress(list1):\n        '''\n        Compress the sublists of the original lists\n        :param list1: List to be compressed\n        :precondition: list1 is a list\n        :complexity: O(n)\n        '''\n        #:param list1: List to be compressed\n        #:precondition: list1 is a list\n        #:complexity: O(n)\n        \n        result = []\n        for (i, x) in enumerate(list1):\n            #if the element of list1 is not\n            if x!= i:\n                #append the new element to result list\n                #note: the reversed list has no corresponding element\n                result.append(x)\n                result.append(i)\n        \n        return result\n    \n    if len(list1) == len(list2):\n        #if the lists are the same length\n        result = list(list1)\n        result.extend(list2)\n    elif len(list2) == len(list1):\n        #if lists are the same length\n        result = list(list1)\n        result.extend(list2)\n    else:\n        #if lists have different lengths\n        for i in range(len(list1)):\n            #compress the sublist with only the first element\n            result.append(list1[i])\n            result.append(list1[i])\n            result.extend(list2[:i] + list2[i + 1:])\n    \n    return result\n    \ndef get_group_index(group):\n    '''\n    Return the group index from the list of elements\n    :param group: List of elements\n    :precondition: group is a list of elements\n    :complexity: O(n)\n    '''\n    #:param group: List of elements\n    #:precondition: group is a list of elements\n    #:complexity: O(n)\n    \n    group_index = 0\n    for i in group:\n        group_index += 1\n    \n    return group_index\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    unpadded_list = []\n    for i in list1:\n        if i not in unpadded_list:\n            unpadded_list.append(i)\n    return unpadded_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def find_sublists(list1):\n        '''\n        Given a list, create a list containing the last element of each sublist, then\n        append each element to the previous sublist until the last element of a sublist\n        is the same as the current element.\n        '''\n        sublists = []\n        for sublist in list1:\n            if sublist not in sublists:\n                sublists.append(sublist)\n            else:\n                for i in range(len(sublists)):\n                    if sublist[i] == sublists[i][-1]:\n                        sublists[i].append(sublist[i][0])\n                    else:\n                        sublists[i].append(sublist[i][0])\n                        break\n                if sublist not in sublists:\n                    sublists.append(sublist)\n        return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    start = 0\n    end = 0\n    if len(list1) % 2 == 0:\n        while end < len(list1):\n            if start == 0:\n                if list1[end] == list1[end + 1]:\n                    start += 1\n                    end += 1\n                else:\n                    start = end\n                    end = end + 1\n            else:\n                if list1[start] == list1[start + 1] and list1[start]!= list1[start + 1]:\n                    start = 0\n                    end = start + 1\n                else:\n                    start = start\n                    end = end + 1\n        pack = [list1[:end]] + pack\n    else:\n        while end < len(list1):\n            if start == 0:\n                if list1[end] == list1[end + 1]:\n                    start += 1\n                    end += 1\n                else:\n                    start = end\n                    end = end + 1\n            else:\n                if list1[start] == list1[start + 1] and list1[start]!= list1[start + 1]:\n                    start = 0\n                    end = start + 1\n                else:\n                    start = start\n                    end = end + 1\n        pack = [list1[:end]] + pack\n    return pack\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    #initialize the list for pack\n    pack = []\n    \n    #check for duplicate\n    if len(list1) % 2 == 0:\n        #check the first and last elements in the list to determine the correct index\n        first = list1[0]\n        last = list1[-1]\n        #if the first element is the same as the last element, then no need to do anything\n        if first == last:\n            return list1\n        else:\n            #if the first element has a duplicate, then have a list of previous and the next elements in the list\n            #starting from the previous element\n            if first in list1:\n                index = list1.index(first)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[0]]\n            #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n            #starting from the next element\n            elif last in list1:\n                index = list1.index(last)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[-1]]\n                \n    else:\n        #if the last element has a duplicate, then have a list of previous and the next elements in the list\n        #starting from the previous element\n        if last in list1:\n            index = list1.index(last)\n            list1 = list1[:index]\n            list1 = list1 + [list1[-1]]\n            \n        #if the first element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the next element\n        elif first in list1:\n            index = list1.index(first)\n            list1 = list1[index+1:]\n            list1 = list1 + [list1[0]]\n            \n    #if no duplicate element found, the list is already a perfect one\n    if len(list1) % 2 == 0:\n        list1.sort()\n        pack = list1\n        \n    #else, the list is a partitioning of the elements\n    else:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to the pack\n                pack.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to the pack\n                if list1[k] in list1:\n                    pack.append(list1[k])\n                #if this element does not have a duplicate, then add it to the pack\n                else:\n                    pack.append(list1[k-1])\n        pack.append(list1[-1])\n    return pack\n    \ndef group_consecutive_duplicates(list1):\n    '''\n    Write a function to group consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    #initialize the list for group\n    group = []\n    \n    #check for duplicate\n    if len(list1) % 2 == 0:\n        #check the first and last elements in the list to determine the correct index\n        first = list1[0]\n        last = list1[-1]\n        #if the first element is the same as the last element, then no need to do anything\n        if first == last:\n            return list1\n        else:\n            #if the first element has a duplicate, then have a list of previous and the next elements in the list\n            #starting from the previous element\n            if first in list1:\n                index = list1.index(first)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[0]]\n            #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n            #starting from the next element\n            elif last in list1:\n                index = list1.index(last)\n                list1 = list1[:index]\n                list1 = list1 + [list1[-1]]\n                \n    else:\n        #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the next element\n        if last in list1:\n            index = list1.index(last)\n            list1 = list1[:index]\n            list1 = list1 + [list1[-1]]\n            \n        #if the first element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the previous element\n        if first in list1:\n            index = list1.index(first)\n            list1 = list1[index+1:]\n            list1 = list1 + [list1[0]]\n            \n    #if no duplicate element found, the list is already a perfect one\n    if len(list1) % 2 == 0:\n        list1.sort()\n        group = list1\n        \n    #else, the list is a partitioning of the elements\n    else:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to the group\n                group.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to the group\n                if list1[k] in list1:\n                    group.append(list1[k])\n                #if this element does not have a duplicate, then add it to the group\n                else:\n                    group.append(list1[k-1])\n        group.append(list1[-1])\n    return group\n    \ndef find_consecutive_duplicates(list1):\n    '''\n    Write a function to find consecutive duplicates of a given list elements.\n    '''\n    \n    #initialize the list for find\n    duplicates = []\n    \n    #check for duplicate\n    if len(list1) % 2 == 0:\n        #check the first and last elements in the list to determine the correct index\n        first = list1[0]\n        last = list1[-1]\n        #if the first element is the same as the last element, then no need to do anything\n        if first == last:\n            return list1\n        else:\n            #if the first element has a duplicate, then have a list of previous and the next elements in the list\n            #starting from the previous element\n            if first in list1:\n                index = list1.index(first)\n                list1 = list1[index+1:]\n                list1 = list1 + [list1[0]]\n            #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n            #starting from the next element\n            elif last in list1:\n                index = list1.index(last)\n                list1 = list1[:index]\n                list1 = list1 + [list1[-1]]\n                \n    else:\n        #if the last element has a duplicate, then have a list of the previous and the next elements in the list\n        #starting from the next element\n        if last in list1:\n            index = list1.index(last)\n            list1 = list1[index+1:]\n            list1 = list1 + [list1[0]]\n            \n    #if no duplicate element found, the list is already a perfect one\n    if len(list1) % 2 == 0:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to duplicates\n                duplicates.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to duplicates\n                if list1[k] in list1:\n                    duplicates.append(list1[k])\n                #if this element does not have a duplicate, then add it to duplicates\n                else:\n                    duplicates.append(list1[k-1])\n        duplicates.append(list1[-1])\n    #else, the list is a partitioning of the elements\n    else:\n        list1.sort()\n        for k in range(len(list1)):\n            if k % 2 == 0:\n                #add this element to duplicates\n                duplicates.append(list1[k])\n            else:\n                #if this element has a duplicate, then add it to duplicates\n                if list1[k] in list1:\n                    duplicates.append"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    j = 0\n    final = []\n    while i < len(list1):\n        while list1[j]!= list1[i]:\n            final.append(list1[j])\n            j += 1\n            if j == len(list1):\n                break\n        i += 1\n        j = 0\n    return final\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    result = []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    for group in grouped_list:\n        if len(list(group)) == 1:\n            continue\n        else:\n            # print('group', list(group))\n            sub_list = list(group)\n            sub_list_count = len(sub_list)\n            # print(f'list count = {sub_list_count}')\n            sub_list_index = 0\n            # print(f'sublist_index = {sub_list_index}')\n            for i in range(sub_list_count-1):\n                if sub_list[i] == sub_list[i+1]:\n                    # print(f'found duplicates in sub_list[{i+1}]')\n                    sub_list[i+1] = sub_list[i]\n                    # print(f'sublist[{i+1}] = {sub_list[i+1]}')\n                    sub_list_index = i+1\n                    # print(f'sublist_index = {sub_list_index}')\n            # print(f'sublist_index = {sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'{sub_list[sub_list_index-1]} = {sub_list[sub_list_index]}')\n            # print(f'\\n{sub_list}')\n            # print(f'\\n{sub_list_index}')\n            # print(f'\\n{sub_list_index}')\n            # prin"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return groupby(list1, lambda x: x + x[::-1]) # Pack consecutive duplicates from beginning to end of the list.\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1, lambda x: x[0]!= x[-1])\n    new_list = [list(list1)]\n    for sublist in grouped:\n        if sublist[-1] in new_list[-1]:\n            new_list[-1].append(sublist[-1])\n            new_list.append(list())\n        else:\n            new_list[-1].append(sublist[-1])\n            new_list.append(list())\n    return new_list\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass # delete this line\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Remove duplicates\n    list1 = list(set(list1))\n    #Loop through lists\n    for i in range(0,len(list1)):\n        list1[i] = tuple(list1[i])\n    #Loop through the lists\n    for k in range(0,len(list1)):\n        list1[k] = list(list1[k])\n    #Return the dictionary\n    return dict(list1)\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    n = 0\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] in d:\n            d[list1[i]] += 1\n        else:\n            d[list1[i]] = 1\n        n += d[list1[i]]\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for l in list1:\n        t = tuple(l)\n        count[t] = count.get(t, 0) + 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TODO: Remove this\n    # return {tuple(map(tuple, list1)): list1.count(tuple(map(tuple, list1)))}\n    \n    counter = {}\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            if list1[i][j] not in counter:\n                counter[list1[i][j]] = 1\n            else:\n                counter[list1[i][j]] += 1\n    return counter\n    \ndef remove_dups(list1):\n    '''\n    Write a function to remove all duplicate values from a list. The function should return a new list with the duplicate values removed.\n    '''\n    # TODO: Remove this\n    # return [list1[i] for i in range(0, len(list1)) if list1[i]!= list1[i]]\n    return [list1[i] for i in range(0, len(list1)) if list1[i]!= list1[i]]\n    \ndef remove_dups_2(list1):\n    '''\n    Write a function to remove all duplicate values from a list. The function should return a new list with the duplicate values removed.\n    '''\n    # TODO: Remove this\n    # return [list1[i] for i in range(0, len(list1)) if list1[i]!= list1[i]]\n    return [list1[i] for i in range(0, len(list1)) if list1[i]!= list1[i]]\n    \ndef remove_dups_3(list1):\n    '''\n    Write a function to remove all duplicate values from a list. The function should return a new list with the duplicate values removed.\n    '''\n    # TODO: Remove this\n    # return [list1[i] for i in range(0, len(list1)) if list1[i]!= list1[i]]\n    return [list1[i] for i in range(0, len(list1)) if list1[i]!= list1[i]]\n    \ndef sort_lst(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in ascending order, with the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return sorted(list1)\n    return sorted(list1, key=lambda x: (x[0], x[1]))\n    \ndef reverse_lst(list1):\n    '''\n    Write a function to reverse a list. The function should return a new list, reversed, with the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return reversed(list1)\n    return reversed(list1, key=lambda x: x[1])\n    \ndef sort_lst_2(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in ascending order, with the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return sorted(list1)\n    return sorted(list1, key=lambda x: x[1])\n    \ndef reverse_lst_2(list1):\n    '''\n    Write a function to reverse a list. The function should return a new list, reversed, with the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return reversed(list1)\n    return reversed(list1, key=lambda x: x[1])\n    \ndef sort_lst_3(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in ascending order, with the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return sorted(list1)\n    return sorted(list1, key=lambda x: x[1])\n    \ndef reverse_lst_3(list1):\n    '''\n    Write a function to reverse a list. The function should return a new list, reversed, with the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return reversed(list1)\n    return reversed(list1, key=lambda x: x[1])\n    \ndef print_lst(list1):\n    '''\n    Write a function to print a list. The function should return the same list, but with all the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return [i[1] for i in list1]\n    return [list1[i][1] for i in range(0, len(list1))]\n    \ndef bubble_sort_2(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef bubble_sort_3(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef bubble_sort_4(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef bubble_sort_5(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef bubble_sort_6(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef bubble_sort_7(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef bubble_sort_8(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef bubble_sort_9(list1):\n    '''\n    Write a function to sort a list in a certain order. The function should return a new list, sorted in descending order, with the elements of the original list on the left.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, reverse=True)\n    \ndef insertion_sort_2(list1):\n    '''\n    Write a function to sort a list. The function should return a new list, sorted in ascending order, with the elements of the original list on the right.\n    '''\n    # TODO: Remove this\n    # return sorted(list1, reverse=True)\n    return sorted(list1, key=lambda x: x[1])\n    \ndef insertion_sort_3(list1):\n    '''"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for list in list1:\n        if list in unique_dict:\n            unique_dict[list] += 1\n        else:\n            unique_dict[list] = 1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = {}\n    for l in list1:\n        l_tuple = (tuple(l), 1)\n        counter[l_tuple] = counter.get(l_tuple, 0) + 1\n    return counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(x): len(x) for x in list1}\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Base case\n    if len(test_list) == 1:\n        return list(combinations(test_list, 1))\n    # Step 1: sort the list\n    test_list.sort()\n    # Step 2: Find all possible combinations\n    # Step 2.1: Make sure the list does not have duplicate combinations.\n    # Step 2.2: Check if the list is sorted\n    # Step 2.3: if yes, then check whether the list contains any duplicates.\n    # Step 2.4: if yes, then check whether the list contains any non-duplicates\n    if test_list[0] == test_list[len(test_list)-1]:\n        return find_combinations(test_list[1:])\n    # Step 3: If not, then loop through all the possible combinations\n    else:\n        comb_res = []\n        for i in range(1,len(test_list)+1):\n            for comb in find_combinations(test_list[:i]):\n                comb_res.append(comb)\n        return comb_res"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = [(test_list[0], test_list[1]), (test_list[1], test_list[2]), (test_list[2], test_list[0]), (test_list[0], test_list[2])]\n    return list(itertools.combinations(tuple_list, 3))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = []\n    print(test_list)\n    for i in test_list:\n        print(i)\n        if i.count(i[0]) == len(i):\n            for j in combinations(i,len(i)):\n                tuple_list.append(j)\n    print(tuple_list)\n    return tuple_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    lst = list(test_list)\n    n = len(lst)\n    if n < 2:\n        return None\n    if n == 2:\n        return list(combinations(lst,1))\n    if n == 3:\n        return list(combinations(lst,2))\n    if n == 4:\n        return list(combinations(lst,3))\n    if n == 5:\n        return list(combinations(lst,4))\n    if n == 6:\n        return list(combinations(lst,5))\n    if n == 7:\n        return list(combinations(lst,6))\n    if n == 8:\n        return list(combinations(lst,7))\n    if n == 9:\n        return list(combinations(lst,8))\n    if n == 10:\n        return list(combinations(lst,9))\n    if n == 11:\n        return list(combinations(lst,10))\n    if n == 12:\n        return list(combinations(lst,11))\n    if n == 13:\n        return list(combinations(lst,12))\n    if n == 14:\n        return list(combinations(lst,13))\n    if n == 15:\n        return list(combinations(lst,14))\n    if n == 16:\n        return list(combinations(lst,15))\n    if n == 17:\n        return list(combinations(lst,16))\n    if n == 18:\n        return list(combinations(lst,17))\n    if n == 19:\n        return list(combinations(lst,18))\n    if n == 20:\n        return list(combinations(lst,19))\n    if n == 21:\n        return list(combinations(lst,20))\n    if n == 22:\n        return list(combinations(lst,21))\n    if n == 23:\n        return list(combinations(lst,22))\n    if n == 24:\n        return list(combinations(lst,23))\n    if n == 25:\n        return list(combinations(lst,24))\n    if n == 26:\n        return list(combinations(lst,25))\n    if n == 27:\n        return list(combinations(lst,26))\n    if n == 28:\n        return list(combinations(lst,27))\n    if n == 29:\n        return list(combinations(lst,28))\n    if n == 30:\n        return list(combinations(lst,29))\n    if n == 31:\n        return list(combinations(lst,30))\n    if n == 32:\n        return list(combinations(lst,31))\n    if n == 33:\n        return list(combinations(lst,32))\n    if n == 34:\n        return list(combinations(lst,33))\n    if n == 35:\n        return list(combinations(lst,34))\n    if n == 36:\n        return list(combinations(lst,35))\n    if n == 37:\n        return list(combinations(lst,36))\n    if n == 38:\n        return list(combinations(lst,37))\n    if n == 39:\n        return list(combinations(lst,38))\n    if n == 40:\n        return list(combinations(lst,39))\n    if n == 41:\n        return list(combinations(lst,40))\n    if n == 42:\n        return list(combinations(lst,41))\n    if n == 43:\n        return list(combinations(lst,42))\n    if n == 44:\n        return list(combinations(lst,43))\n    if n == 45:\n        return list(combinations(lst,44))\n    if n == 46:\n        return list(combinations(lst,45))\n    if n == 47:\n        return list(combinations(lst,46))\n    if n == 48:\n        return list(combinations(lst,47))\n    if n == 49:\n        return list(combinations(lst,48))\n    if n == 50:\n        return list(combinations(lst,49))\n    if n == 51:\n        return list(combinations(lst,50))\n    if n == 52:\n        return list(combinations(lst,51))\n    if n == 53:\n        return list(combinations(lst,52))\n    if n == 54:\n        return list(combinations(lst,53))\n    if n == 55:\n        return list(combinations(lst,54))\n    if n == 56:\n        return list(combinations(lst,55))\n    if n == 57:\n        return list(combinations(lst,56))\n    if n == 58:\n        return list(combinations(lst,57))\n    if n == 59:\n        return list(combinations(lst,58))\n    if n == 60:\n        return list(combinations(lst,59))\n    if n == 61:\n        return list(combinations(lst,60))\n    if n == 62:\n        return list(combinations(lst,61))\n    if n == 63:\n        return list(combinations(lst,62))\n    if n == 64:\n        return list(combinations(lst,63))\n    if n == 65:\n        return list(combinations(lst,64))\n    if n == 66:\n        return list(combinations(lst,65))\n    if n == 67:\n        return list(combinations(lst,66))\n    if n == 68:\n        return list(combinations(lst,67))\n    if n == 69:\n        return list(combinations(lst,68))\n    if n == 70:\n        return list(combinations(lst,69))\n    if n == 71:\n        return list(combinations(lst,70))\n    if n == 72:\n        return list(combinations(lst,71))\n    if n == 73:\n        return list(combinations(lst,72))\n    if n == 74:\n        return list(combinations(lst,73))\n    if n == 75:\n        return list(combinations(lst,74))\n    if n == 76:\n        return list(combinations(lst,75))\n    if n == 77:\n        return list(combinations(lst,76))\n    if n == 78:\n        return list(combinations(lst,77))\n    if n == 79:\n        return list(combinations(lst,78))\n    if n == 80:\n        return list(combinations(lst,79))\n    if n == 81:\n        return list(combinations(lst,80))\n    if n == 82:\n        return list(combinations(lst,81))\n    if n == 83:\n        return list(combinations(lst,82))\n    if n == 84:\n        return list(combinations(lst,83))\n    if n == 85:\n        return list(combinations(lst,84))\n    if n == 86:\n        return list(combinations(lst,85))\n    if n == 87:\n        return list(combinations(lst,86))\n    if n == 88:\n        return list(combinations(lst,87))\n    if n == 89:\n        return list(combinations(lst,88))\n    if n == 90:\n        return list(combinations(lst,89))\n    if n == 91:\n        return list(combinations(lst,90))\n    if n == 92:\n        return list(combinations(lst,91))\n    if n == 93:\n        return list(combinations(lst,92))\n    if n == 94:\n        return list(combinations(lst,93))\n    if n == 95:\n        return list(combinations(lst,94))\n    if n == 96:\n        return list(combinations(lst,95))\n    if n == 97:\n        return list(combinations(lst,96))\n    if n == 98:\n        return list(combinations(lst,9"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    \n    for i in range(len(test_list)):\n        comb = combinations(test_list, i + 1)\n        for j in comb:\n            j.append(sum(j))\n            \n    return list(map(tuple, test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def is_valid_list(x):\n        if isinstance(x,list)==False:\n            return False\n        else:\n            return all(is_valid_list(x_i) for x_i in x)\n    # Check if the input is a list\n    if is_valid_list(test_list)==False:\n        raise ValueError(\"Invalid input\")\n    # Create a list of tuples where each tuple contains 2 elements\n    l = []\n    for x in test_list:\n        if isinstance(x,list)==True:\n            l+=x\n        else:\n            raise ValueError(\"Invalid input\")\n    # Create a set of all possible combinations\n    n = len(l)\n    s = set()\n    for i in range(n):\n        for j in range(i+1,n):\n            l1 = list(combinations(l,i))\n            l2 = list(combinations(l,j))\n            # Add all the possible combinations to the set\n            for l1_i in l1:\n                for l2_i in l2:\n                    s.add(tuple(l1_i)+tuple(l2_i))\n    # Find all the possible combinations\n    return list(s)\n    # Return the possible combinations\n    # You may assume all the combinations have length >= 2\n    # e.g. A=[1,2,3], B=[2,3], C=[3]\n    # return A, B, C\n    # The output of the function should be a set of tuples\n    # from A, B, C\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    def is_valid_sum(s):\n        return s < 10 and len(str(s)) > 3\n    def combine_two_sum(set_of_sums, target, index):\n        result = []\n        if index == len(test_list):\n            return result\n        elif index + 1 < len(test_list):\n            sum = test_list[index] + test_list[index+1]\n            if is_valid_sum(sum):\n                result.append((sum, index+1))\n            result.extend(combine_two_sum(set_of_sums, sum, index+2))\n        else:\n            sum = test_list[index] + test_list[index+1]\n            if is_valid_sum(sum):\n                result.append((sum, index+1))\n            result.extend(combine_two_sum(set_of_sums, sum, index+2))\n        return result\n    for test_list in test_list:\n        set_of_sums = set(test_list)\n        for set_of_sums_tuple in combinations(set_of_sums, 2):\n            if set_of_sums_tuple not in result:\n                result = combine_two_sum(set_of_sums, test_list, len(test_list)+1)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == []:\n        return []\n    elif test_list[0] == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(test_list)):\n            for j in find_combinations(test_list[i+1:len(test_list)]) + [test_list[i] - test_list[i+1]]:\n                result += [(i,j)]\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(1,test_list[0]+1):\n        for j in range(1,test_list[1]+1):\n            sums.append(i,j)\n    return sums\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for i in test_list:\n        for j in combinations(test_list, i):\n            combs.append(j)\n    return combs\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        divisors_list = [] \n        for i in range(1, int(math.sqrt(n))+1) : \n            if n % i == 0 : \n                divisors_list.append(i) \n        if len(divisors_list)!= 2 : \n            return 0\n        else : \n            return 1\n    else : \n        return 0\n        \ndef count_pairs(n) : \n    '''\n    Write a python function to check if the number is a perfect number. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-15.php\n    '''\n    if count_divisors(n) == 0: \n        return 0\n    else : \n        result = 0\n        for i in range(2, int(math.sqrt(n) + 1)): \n            if (n % i == 0) and (n / i == i) : \n                result += 1\n        if result == 2: \n            return 1\n        else : \n            return 0\n        \ndef divisors(n) : \n    '''\n    Write a python function to find all the divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-3.php\n    '''\n    divisors_list = []\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            divisors_list.append(i) \n    return divisors_list\n        \ndef is_perfect(n) : \n    '''\n    Write a python function to check whether a number is perfect or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-12.php\n    '''\n    if count_pairs(n) == 0: \n        return 0\n    else : \n        result = 0\n        for i in range(2, int(math.sqrt(n))+1) : \n            if (n % i == 0) and (n / i == i) : \n                result += 1\n        if result == 2 : \n            return 1\n        else : \n            return 0\n        \ndef add_list(a, b) : \n    '''\n    Write a python function to add two lists together.\n    '''\n    add_list_result = []\n    for i in range(len(a)) : \n        add_list_result.append(a[i] + b[i])\n    return add_list_result\n    \ndef prod(a, b) : \n    '''\n    Write a python function to calculate product of two lists.\n    '''\n    prod_list_result = []\n    for i in range(len(a)) : \n        prod_list_result.append(a[i] * b[i])\n    return prod_list_result\n    \ndef add_list_multi(a, b) : \n    '''\n    Write a python function to add two lists.\n    '''\n    add_list_result = []\n    for i in range(len(a)) : \n        add_list_result.append(a[i] + b[i])\n    return add_list_result\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 : \n        return 0\n    if n < 2 or n % 2 == 0 : \n        return 0\n    for i in range(3, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            return 0\n    return 1\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n % 2 == 0):\n        return (n == n//2)\n    else:\n        return False\ndef chinese_remainder_theorem(a,b):\n    '''\n    Write a python function to calculate the modular arithmetic remainder when a and b is modulo modulo. https://www.w3resource.com/python-exercises/python-math/python-modular-arithmetic-remainder-exercise-24.php\n    '''\n    return (a%b)\ndef is_prime(n) : \n    '''\n    Write a python function to check if a number is prime or not. https://www.w3resource.com/python-exercises/python/python-prime-number.php\n    '''\n    if n == 1:\n        return False\n    if n <= 1:\n        return False\n    if n%2 == 0:\n        return False\n    \n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_numbers(n) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n <= 1:\n        return False\n    \n    for i in range(2,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\ndef find_gcd(a, b):\n    '''\n    Write a python function to find gcd of two positive integers. https://www.w3resource.com/python-exercises/python/python-gcd-exercise-24.php\n    '''\n    return (a if b == 0 else math.gcd(a, b))\ndef find_lcm(a,b):\n    '''\n    Write a python function to find LCM of two positive integers. https://www.w3resource.com/python-exercises/python/python-lcm-exercise-24.php\n    '''\n    return (a if b == 0 else (a*b)/math.gcd(a,b))\ndef is_power_of_two(n) : \n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\ndef lcm(a,b):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if a>b:\n        return lcm(b,a)\n    else:\n        return lcm(a,b)\ndef gcd(a, b):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if a == 0 :\n        return b\n    return gcd(b%a,a)\ndef lcm_numbers(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    return lcm(n,lcm(n,n))\ndef lcm_primes(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime(n):\n        return n\n    return lcm_primes(find_lcm(n,find_lcm(n,n)))\ndef gcd_primes(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime(n):\n        return n\n    return gcd_primes(find_gcd(n,n))\ndef euclid(a, b):\n    '''\n    Write a python function to calculate Euclidean distance.\n    '''\n    if b == 0 :\n        return a\n    return euclid(b,a%b)\ndef lcm_primes(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime(n):\n        return n\n    return lcm_primes(find_lcm_primes(n,n))\ndef gcd_primes(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime(n):\n        return n\n    return gcd_primes(find_gcd(n,n))\ndef lcm_primes_2(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return lcm_primes_2(find_lcm_primes(n,n))\ndef lcm_primes_3(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return lcm_primes_3(find_lcm_primes(n,n))\ndef gcd_primes_2(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return gcd_primes_2(find_gcd(n,n))\ndef gcd_primes_3(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return gcd_primes_3(find_gcd(n,n))\ndef lcm_primes_4(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return lcm_primes_4(find_lcm_primes(n,n))\ndef gcd_primes_4(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return gcd_primes_4(find_gcd(n,n))\ndef lcm_primes_5(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return lcm_primes_5(find_lcm_primes(n,n))\ndef gcd_primes_5(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return gcd_primes_5(find_gcd(n,n))\ndef lcm_primes_6(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return lcm_primes_6(find_lcm_primes(n,n))\ndef gcd_primes_6(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return gcd_primes_6(find_gcd(n,n))\ndef lcm_primes_7(n):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return lcm_primes_7(find_lcm_primes(n,n))\ndef gcd_primes_7(n):\n    '''\n    Write a python function to calculate the greatest common divisor.\n    '''\n    if is_prime_numbers(n):\n        return n\n    return gcd_primes_7(find_gcd(n,n))\ndef lcm_primes_8(n):\n    '''\n    Write a python functio"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        return \"This is an Even Number\"\n    else : \n        return \"This is an Odd Number\"\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the number is perfect. The function should return true if the number is perfect, false otherwise.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 : \n        return True\n    elif n % 2 == 0 : \n        return False\n    else : \n        return n % 2 == 1\n    \ndef perfect_square(n) : \n    '''\n    Write a python function to check whether a number is a perfect square. A perfect square is a number whose square is equal to the number itself.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 : \n        return False\n    elif n == 1 : \n        return True\n    elif n == 2 : \n        return True\n    else : \n        m = n\n        while m % 2 == 0 : \n            m = m / 2\n        if m * m == n : \n            return True\n        else : \n            return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    if n % 2 == 0 :\n        print(\"Given number is an even number\")\n        return True\n    else :\n        print(\"Given number is an odd number\")\n        return False\n    \ndef square(n) :\n    '''\n    Write a python function to square a number n.\n    '''\n    return n*n\n    \ndef factorial(n) :\n    '''\n    Write a python function to compute the factorial of a number n.\n    '''\n    \n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 1\n    else :\n        return n*factorial(n-1)\n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2 or n % 2 == 0 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n        \ndef check_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    if n == 1 :\n        return False\n    \n    if n == 2 :\n        return True\n    \n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n        \ndef is_prime_recursive(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2 or n % 2 == 0 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n    \n    \ndef is_prime_recursive_recursive(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2 or n % 2 == 0 :\n        return False\n    if n == 2 :\n        return True\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\n    \ndef count_primes_recursive(n) :\n    '''\n    Write a python function to count the number of primes up to and including\n    n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    if n < 2 :\n        return 0\n    if n == 2 :\n        return 1\n    if n > 2 :\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return count_primes_recursive(n//i) + 1\n        return count_primes_recursive(n)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    if n == 0 :\n        return False\n    for i in range(1, math.sqrt(n)+1) :\n        if n % i == 0 :\n            divisors.append(i)\n            if n // i == i :\n                divisors.append(n//i)\n    return len(divisors) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            count += 1\n    return count\ndef main() :\n    '''\n    Test\n    '''\n    #Test case\n    print(\"The count of divisors is : \",count_divisors(8))\n    #Test case\n    print(\"The count of divisors is : \",count_divisors(12345))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    while (i * i) <= n : \n        if (n % i == 0) : \n            return False\n        i += 1\n    else : \n        return True\ndef check_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if n == 2 or n == 3 : \n        return True\n    elif n % 2 == 0 : \n        return False\n    elif n % 3 == 0 : \n        return False\n    else : \n        for i in range(5, int(math.sqrt(n)) + 1) : \n            if n % i == 0 : \n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to check whether the number is a prime number or not.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    else : \n        return True\ndef is_in_set(x, lst) :\n    '''\n    Write a python function to check whether an item is in a set or not.\n    '''\n    if x in lst : \n        return True\n    else : \n        return False\ndef is_divisible_by_k(n, k) : \n    '''\n    Write a python function to check whether the number is divisible by k or not.\n    '''\n    if n % k == 0 : \n        return True\n    else : \n        return False\ndef merge_sets(a, b) : \n    '''\n    Write a python function to merge two sets of n elements.\n    '''\n    lst = []\n    i = 0\n    j = 0\n    while (i < len(a)) : \n        if (a[i] not in lst) : \n            lst.append(a[i])\n        i += 1\n    while (j < len(b)) : \n        if (b[j] not in lst) : \n            lst.append(b[j])\n        j += 1\n    return lst \ndef count_clusters(a, b) : \n    '''\n    Write a python function to count the number of clusters.\n    '''\n    return len(merge_sets(a, b))\ndef new_divisors(n) : \n    '''\n    Write a python function to count the number of new divisors.\n    '''\n    i = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return n // i\n    return 0\ndef prime_checker(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if is_prime(n) == True : \n        return True\n    else : \n        return False\ndef is_prime_set(lst) :\n    '''\n    Write a python function to check whether the number is a prime set or not.\n    '''\n    for n in lst : \n        if n == 2 or n == 3 : \n            return False\n        elif n % 2 == 0 : \n            return False\n        elif n % 3 == 0 : \n            return False\n    return True\ndef crosstalk(x, lst) : \n    '''\n    Write a python function to check whether two sets of elements are cross-set or not.\n    '''\n    count = 0\n    for a in lst : \n        for b in lst : \n            if a!= b : \n                if a == b : \n                    if is_in_set(a, x) == False : \n                        count += 1\n    if count == len(lst) : \n        return True\n    else : \n        return False\ndef count_miller_pairs(n) : \n    '''\n    Write a python function to count the number of miller-pairs.\n    '''\n    i = 1\n    while (i * i) <= n : \n        if (n % i == 0) : \n            return False\n        i += 1\n    else : \n        return True\ndef find_new_divisors(n) : \n    '''\n    Write a python function to find the smallest number of divisors.\n    '''\n    i = 2\n    while (i * i) <= n : \n        if (n % i == 0) : \n            return i\n        i += 2\n    else : \n        return 0\ndef is_prime_set_set(lst) :\n    '''\n    Write a python function to check whether the number is a prime set set or not.\n    '''\n    for n in lst : \n        if is_prime(n) == True : \n            return True\n        elif n == 2 or n == 3 : \n            return False\n        elif n % 2 == 0 : \n            return False\n        elif n % 3 == 0 : \n            return False\n    return True\ndef count_primes(lst) : \n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count = 0\n    for n in lst : \n        if is_prime(n) == True : \n            count += 1\n    return count\ndef count_prime_factors(n) : \n    '''\n    Write a python function to count the prime factors of a number.\n    '''\n    for i in range(1, n+1) : \n        if is_divisible_by_k(i, n) == True : \n            return i\n    return 0\ndef is_prime_set_set_set(lst) :\n    '''\n    Write a python function to check whether the number is a prime set set set or not.\n    '''\n    for n in lst : \n        if is_prime(n) == True : \n            return True\n        elif n == 2 or n == 3 : \n            return False\n        elif n % 2 == 0 : \n            return False\n        elif n % 3 == 0 : \n            return False\n    return True\ndef count_primes_set(lst) : \n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count = 0\n    for n in lst : \n        if is_prime_set(n) == True : \n            count += 1\n    return count\ndef count_primes_set_set(lst) : \n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count = 0\n    for n in lst : \n        if is_prime_set_set(n) == True : \n            count += 1\n    return count\ndef count_all_primes_set_set(lst) : \n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count = 0\n    for n in lst : \n        if is_prime_set_set_set(n) == True : \n            count += 1\n    return count\ndef count_all_primes_set_set_set(lst) : \n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count = 0\n    for n in lst : \n        if is_prime_set_set_set(n) == True : \n            count += 1\n    return count\ndef count_primes_set_set_set(lst) : \n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count = 0\n    for n in lst : \n        if is_prime_set_set_set(n) == True : \n            count += 1\n    return count\ndef count_primes_set_set_set(lst) : \n    '''\n    Write a python function to count the number of prime numbers in a list.\n    '''\n    count = 0\n    for n in lst : "
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # count = 0\n    # for i in range(1, n+1) :\n    #     if n % i == 0:\n    #         count += 1\n    # return count == 2\n    # return n % 2 == 0\n    return True\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return math.sqrt(n) == n\ndef prime(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # if not n < 2:\n    #     return False\n    # if n == 2 or n == 3:\n    #     return True\n    # if n % 2 == 0 or n % 3 == 0:\n    #     return False\n    # d = n - 1\n    # while d % 2 == 0:\n    #     d //= 2\n    # if d % 3 == 0:\n    #     return False\n    # return True\n    \n    # if n == 1:\n    #     return True\n    # if n == 2:\n    #     return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # if not n < 2:\n    #     return False\n    # if n == 2 or n == 3:\n    #     return True\n    # if n % 2 == 0 or n % 3 == 0:\n    #     return False\n    # d = n - 1\n    # while d % 2 == 0:\n    #     d //= 2\n    # if d % 3 == 0:\n    #     return False\n    # for i in range(4, int(math.sqrt(n)) + 1, 2):\n    #     if n % i == 0:\n    #         return False\n    # return True\n    \n    # if n == 1:\n    #     return True\n    # if n == 2:\n    #     return False\n    \n    for i in range(4, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef count_digits(n) :\n    '''\n    Write a python function to check the number of digits. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return int(math.sqrt(n)) == int(math.floor(math.sqrt(n)))\ndef is_sorted(n) :\n    '''\n    Write a python function to check whether a number is sorted or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0:\n        return False\n    for i in range(n - 1, -1, -1):\n        if n % i == 0:\n            return False\n    return True\ndef is_even(n):\n    '''\n    Write a python function to check whether a number is even or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n % 2 == 0\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    d = n - 1\n    while d % 2 == 0:\n        d //= 2\n    if d % 3 == 0:\n        return False\n    for i in range(4, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_happy(n):\n    '''\n    Write a python function to check whether a number is happy or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return is_prime(n) and count_divisors(n) and is_even(n)\ndef is_prime_factor(n) :\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factor_count(n) :\n    '''\n    Write a python function to check number of prime factors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return int(math.sqrt(n)) * (int(math.sqrt(n)) + 1) * (int(math.sqrt(n)) + 2) * (int(math.sqrt(n)) + 3) * (int(math.sqrt(n)) + 4) * (int(math.sqrt(n)) + 5) * (int(math.sqrt(n)) + 6) * (int(math.sqrt(n)) + 7)\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0:\n        return False\n    for i in range(1, n+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_sum_divisible(n, k):\n    '''\n    Write a python function to check whether the sum of a number and k is divisible or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum([i for i in range(n+1) if is_sum_divisible_helper(n, k, i)]) % 2 == 0\ndef is_sum_divisible_helper(n, k, i) :\n    '''\n    Write a python function to check whether the sum of a number and k is divisible or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n    if k == 0:\n        return False\n    if n % i == 0 or n % k == 0:\n        return False\n    return is_sum_divisible_helper(n // i, k // i, i)\ndef is_factors_divisible(n, k):\n    '''\n    Write a python function to check whether a number is a factor or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(1, n + 1):\n        if is_sum_divisible_helper(n, k, i):\n            return False\n    return True\ndef factors(n):\n    '''\n    Write a python function to check whether a number is a factor or not. https://www.w3resource.com"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # i will be summing up all the divisors in a number n \n    sum = 0 \n    for i in range(1, int(math.sqrt(n)) + 1) : \n        #  if n is divisible by i \n        if n % i == 0 : \n            #  if i is odd \n            if i!= n//i : \n                sum += i \n    #  if sum is equal to n \n    if sum == n : \n        return True\n    else : \n        return False \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # check if input is list\n    if not isinstance(arr, list):\n        raise TypeError(\"arr should be a list\")\n    # check if input is a valid list\n    if not arr:\n        raise ValueError(\"arr should not be empty\")\n    # check if arr is empty\n    if len(arr) == 0:\n        raise ValueError(\"arr cannot be empty\")\n    # init count variable\n    count = 0\n    # traverse the array and check if length is odd\n    for i in arr:\n        if i % 2 == 1:\n            count += i\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n%2 == 1:\n        return arr[n//2] + arr[n//2 - 1]\n    else:\n        return sum(arr[:n//2]) + sum(arr[n//2+1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    answer = 0\n    for i in range(0,len(arr)):\n        # odd length subarrays\n        for j in range(i,len(arr),2):\n            answer += arr[j]\n    return answer\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) % 2!= 0:\n        print(\"It is not possible to add odd length subarrays\")\n    else:\n        even_sum = arr[0] + arr[1] + arr[2]\n        odd_sum = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    n = len(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_lengths = []\n    odd_lengths = []\n    temp = []\n    for i in arr:\n        if i % 2 == 0:\n            temp.append(i)\n        else:\n            if len(temp) == 0:\n                odd_lengths.append(i)\n            else:\n                if len(temp) == 2:\n                    odd_lengths.append(temp[0])\n                    odd_lengths.append(temp[1])\n                else:\n                    even_lengths.append(temp[0])\n                    even_lengths.append(temp[1])\n                    even_lengths.append(temp[2])\n                    even_lengths.append(temp[3])\n                    even_lengths.append(temp[4])\n                    even_lengths.append(temp[5])\n                    even_lengths.append(temp[6])\n                    even_lengths.append(temp[7])\n                    even_lengths.append(temp[8])\n                    even_lengths.append(temp[9])\n                    even_lengths.append(temp[10])\n                    even_lengths.append(temp[11])\n                    even_lengths.append(temp[12])\n                    even_lengths.append(temp[13])\n                    even_lengths.append(temp[14])\n                    even_lengths.append(temp[15])\n                    even_lengths.append(temp[16])\n                    even_lengths.append(temp[17])\n                    even_lengths.append(temp[18])\n                    even_lengths.append(temp[19])\n                    even_lengths.append(temp[20])\n                    even_lengths.append(temp[21])\n                    even_lengths.append(temp[22])\n                    even_lengths.append(temp[23])\n                    even_lengths.append(temp[24])\n                    even_lengths.append(temp[25])\n                    even_lengths.append(temp[26])\n                    even_lengths.append(temp[27])\n                    even_lengths.append(temp[28])\n                    even_lengths.append(temp[29])\n                    even_lengths.append(temp[30])\n                    even_lengths.append(temp[31])\n                    even_lengths.append(temp[32])\n                    even_lengths.append(temp[33])\n                    even_lengths.append(temp[34])\n                    even_lengths.append(temp[35])\n                    even_lengths.append(temp[36])\n                    even_lengths.append(temp[37])\n                    even_lengths.append(temp[38])\n                    even_lengths.append(temp[39])\n                    even_lengths.append(temp[40])\n                    even_lengths.append(temp[41])\n                    even_lengths.append(temp[42])\n                    even_lengths.append(temp[43])\n                    even_lengths.append(temp[44])\n                    even_lengths.append(temp[45])\n                    even_lengths.append(temp[46])\n                    even_lengths.append(temp[47])\n                    even_lengths.append(temp[48])\n                    even_lengths.append(temp[49])\n                    even_lengths.append(temp[50])\n                    even_lengths.append(temp[51])\n                    even_lengths.append(temp[52])\n                    even_lengths.append(temp[53])\n                    even_lengths.append(temp[54])\n                    even_lengths.append(temp[55])\n                    even_lengths.append(temp[56])\n                    even_lengths.append(temp[57])\n                    even_lengths.append(temp[58])\n                    even_lengths.append(temp[59])\n                    even_lengths.append(temp[60])\n                    even_lengths.append(temp[61])\n                    even_lengths.append(temp[62])\n                    even_lengths.append(temp[63])\n                    even_lengths.append(temp[64])\n                    even_lengths.append(temp[65])\n                    even_lengths.append(temp[66])\n                    even_lengths.append(temp[67])\n                    even_lengths.append(temp[68])\n                    even_lengths.append(temp[69])\n                    even_lengths.append(temp[70])\n                    even_lengths.append(temp[71])\n                    even_lengths.append(temp[72])\n                    even_lengths.append(temp[73])\n                    even_lengths.append(temp[74])\n                    even_lengths.append(temp[75])\n                    even_lengths.append(temp[76])\n                    even_lengths.append(temp[77])\n                    even_lengths.append(temp[78])\n                    even_lengths.append(temp[79])\n                    even_lengths.append(temp[80])\n                    even_lengths.append(temp[81])\n                    even_lengths.append(temp[82])\n                    even_lengths.append(temp[83])\n                    even_lengths.append(temp[84])\n                    even_lengths.append(temp[85])\n                    even_lengths.append(temp[86])\n                    even_lengths.append(temp[87])\n                    even_lengths.append(temp[88])\n                    even_lengths.append(temp[89])\n                    even_lengths.append(temp[90])\n                    even_lengths.append(temp[91])\n                    even_lengths.append(temp[92])\n                    even_lengths.append(temp[93])\n                    even_lengths.append(temp[94])\n                    even_lengths.append(temp[95])\n                    even_lengths.append(temp[96])\n                    even_lengths.append(temp[97])\n                    even_lengths.append(temp[98])\n                    even_lengths.append(temp[99])\n                    even_lengths.append(temp[100])\n                    even_lengths.append(temp[101])\n                    even_lengths.append(temp[102])\n                    even_lengths.append(temp[103])\n                    even_lengths.append(temp[104])\n                    even_lengths.append(temp[105])\n                    even_lengths.append(temp[106])\n                    even_lengths.append(temp[107])\n                    even_lengths.append(temp[108])\n                    even_lengths.append(temp[109])\n                    even_lengths.append(temp[110])\n                    even_lengths.append(temp[111])\n                    even_lengths.append(temp[112])\n                    even_lengths.append(temp[113])\n                    even_lengths.append(temp[114])\n                    even_lengths.append(temp[115])\n                    even_lengths.append(temp[116])\n                    even_lengths.append(temp[117])\n                    even_lengths.append(temp[118])\n                    even_lengths.append(temp[119])\n                    even_lengths.append(temp[120])\n                    even_lengths.append(temp[121])\n                    even_lengths.append(temp[122])\n                    even_lengths.append(temp[123])\n                    even_lengths.append(temp[124])\n                    even_lengths.append(temp[125])\n                    even_lengths.append(temp[126])\n                    even_lengths.append(temp[127])\n                    even_lengths.append(temp[128])\n                    even_lengths.append(temp[129])\n                    even_lengths.append(temp[130])\n                    even_lengths.append(temp[131])\n                    even_lengths.append(temp[132])\n                    even_lengths.append(temp[133])\n                    even_lengths.append(temp[134])\n                    even_lengths.append(temp[135])\n                    even_lengths.append(temp[136])\n                    even_lengths.append(temp[137])\n                    even_lengths.append(temp[138])\n                    even_lengths.append(temp[139])\n                    even_lengths.append(temp[140])\n                    even_lengths.append(temp[141])\n                    even_lengths.append(temp[142])\n                    even_lengths.append(temp[143])\n                "
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        if (i % 2) == 1:\n            odd_length_sum += arr[i]\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i]%2!=0:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Create an empty list to store the result\n    odd_length_sub_arrays = []\n    # For every element in arr\n    for element in arr:\n        # If length of array is odd\n        if len(arr) % 2 == 0:\n            # Add the element to the list\n            odd_length_sub_arrays.append(element)\n        # If length is odd\n        else:\n            # If the sum of the odd elements is less than the total sum\n            if sum(odd_length_sub_arrays) < element:\n                # Append the element to the list\n                odd_length_sub_arrays.append(element)\n                # Set the sum to 0 and the size of the list to 1\n                sum = 0\n                size = 1\n            # If the sum is the same as the total sum\n            else:\n                # Sum of odd elements is greater than the total sum\n                sum = sum(odd_length_sub_arrays)\n                # Update the total sum\n                sum += sum(odd_length_sub_arrays)\n                # Set the size to 2\n                size = 2\n            # Append the sum to the list\n            odd_length_sub_arrays.append(sum)\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    \n    # find first odd element\n    first = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 1:\n            first = arr[i]\n    \n    # find the sum of all odd elements\n    sum = 0\n    for i in range(0, len(arr) - 2, 2):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # r = float(r)\n    # g = float(g)\n    # b = float(b)\n    #  h = float((r+g+b)/3)\n    #  s = float(1 - abs((h-255)/(255-0)))\n    #  v = float(s)\n    #  return hsv(h,s,v)\n    #   h = 0.8*r + 0.2*g + 0.1*b\n    #   s = max(s,0)\n    #   v = max(v,0)\n    #   h = min(h,1)\n    #   s = min(s,1)\n    #   v = min(v,1)\n    #   r = max(r,0)\n    #   g = max(g,0)\n    #   b = max(b,0)\n    #   h = max(h,0)\n    #   s = max(s,0)\n    #   v = max(v,0)\n    #   return hsv(h,s,v)\n    return (r,g,b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE GOES HERE\n    if r <= 255:\n        R = 0\n        G = 0\n        B = 0\n        H = 360\n    else:\n        R = 255\n        G = 0\n        B = 255\n        H = 256\n    h, s, v = colorsys.rgb_to_hsv(R, G, B)\n    # Your code here\n    if s >.5:\n        s = 1\n    else:\n        s =.5\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = map(int, (r, g, b))\n    # convert to RGB\n    r = r * 255\n    g = g * 255\n    b = b * 255\n    # compute the hue and saturation components\n    h = 0\n    s = 0\n    if r == g == b:\n        h = 0\n    elif r == g:\n        h = (60 * ((g - b) / 255)) + 360\n    elif r == b:\n        h = (60 * ((r - g) / 255)) + 120\n    elif r == b * 0.5:\n        h = (60 * ((b - g) / 255)) + 240\n    elif g == b * 0.5:\n        h = (60 * ((r - g) / 255)) + 120\n    elif g == b * 0.5:\n        h = (60 * ((r - g) / 255)) + 240\n    else:\n        h = (60 * ((r - g) / 255)) + 360\n    # compute the value\n    v = h / 60\n    # return hsv values\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Color model\n    if 0 <= r <= 0.5:\n        # green\n        hue_color = 0.0\n    elif 0.5 <= r <= 1.0:\n        # blue\n        hue_color = 0.0\n    elif 1.0 <= r <= 2.0:\n        # red\n        hue_color = 0.5\n    elif 2.0 <= r <= 3.0:\n        # yellow\n        hue_color = 1.0\n    elif 3.0 <= r <= 4.0:\n        # green yellow\n        hue_color = 1.0\n    else:\n        hue_color = 2.0\n    # Hue\n    if 0 <= g <= 0.5:\n        # green\n        saturation_color = 0.0\n    elif 0.5 <= g <= 1.0:\n        # blue\n        saturation_color = 0.0\n    elif 1.0 <= g <= 2.0:\n        # red\n        saturation_color = 0.5\n    elif 2.0 <= g <= 3.0:\n        # yellow\n        saturation_color = 1.0\n    elif 3.0 <= g <= 4.0:\n        # green yellow\n        saturation_color = 1.0\n    else:\n        saturation_color = 2.0\n    # Saturation\n    if 0 <= b <= 0.5:\n        # green\n        value_color = 0.0\n    elif 0.5 <= b <= 1.0:\n        # blue\n        value_color = 0.5\n    elif 1.0 <= b <= 2.0:\n        # red\n        value_color = 1.0\n    elif 2.0 <= b <= 3.0:\n        # yellow\n        value_color = 1.0\n    elif 3.0 <= b <= 4.0:\n        # green yellow\n        value_color = 1.0\n    else:\n        value_color = 2.0\n    return hue_color, saturation_color, value_color\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    \n    r, g, b = (int(r), int(g), int(b))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    # replace this code with your code\n    # return code\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    if max_value == r:\n        h = 0\n    elif max_value == g:\n        h = 90\n    elif max_value == b:\n        h = 120\n    else:\n        h = 360\n    if max_value == r:\n        s = 0\n    elif max_value == g:\n        s = 100\n    elif max_value == b:\n        s = 255\n    else:\n        s = 100\n    return h, s, 255 - min(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert RGB to HSL\n    h = (r / 255.0) * 360\n    s = (g / 255.0) * 100\n    v = (b / 255.0) * 100\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    c = max(r, g, b)\n    if c == 0:\n        return 0, 0, 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = int((r+0.5) / 0.299 * 65535)\n    s = int((g+0.5) / 0.587 * 65535)\n    v = int((b+0.5) / 0.114 * 65535)\n    return h,s,v\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    product = 0\n    for num in even:\n        product = product * num\n    for num in odd:\n        product = product * num\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product*i\n        else:\n            product = product*i\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return [list1[0],list1[-1]*list1[1]]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return list1[0] * list1[1]\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            product *= list1[i]\n        else:\n            product /= list1[i]\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 0\n    odd_prod = 0\n    for i in list1:\n        if i%2==0:\n            even_prod+=i\n        else:\n            odd_prod+=i\n    return even_prod*odd_prod\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2 = []\n    even = 0\n    odd = 0\n    for item in list1:\n        if item % 2 == 0:\n            list2.append(item)\n            even += item\n        else:\n            list2.append(item)\n            odd += item\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num + 1\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_odd.append(list1[i])\n        else:\n            even_odd.append(list1[i]*(2))\n    return even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)==0:\n        return None\n    if len(list1)%2==0:\n        return list1[0]*list1[0]\n    else:\n        return list1[0]*list1[1]\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not test_str:\n        return []\n    else:\n        return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for ele in test_str:\n        result.append(int(ele))\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = [int(x) for x in test_str]\n    return tuple(tuple_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return tuple(map(int, test_str))\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    \n    return tuple(map(float, test_str))\n    \ndef tuple_str_list(test_str):\n    '''\n    Write a function to convert tuple string to list tuple.\n    '''\n    \n    return tuple(map(list, test_str))\n    \ndef tuple_str_dictionary(test_str):\n    '''\n    Write a function to convert tuple string to dictionary.\n    '''\n    \n    return tuple(map(dict, test_str))\n    \ndef tuple_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to tuple.\n    '''\n    \n    return tuple(map(tuple, test_str))\n    \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    \n    return tuple(map(bool, test_str))\n    \ndef tuple_str_list_bool(test_str):\n    '''\n    Write a function to convert tuple string to list bool tuple.\n    '''\n    \n    return tuple(map(list, test_str))\n    \ndef tuple_str_str(test_str):\n    '''\n    Write a function to convert tuple string to str tuple.\n    '''\n    \n    return tuple(map(str, test_str))\n    \ndef tuple_str_tuple_int_bool(test_str):\n    '''\n    Write a function to convert tuple string to tuple and int and bool tuple.\n    '''\n    \n    return tuple(map(tuple, test_str)), tuple(map(int, test_str)), tuple(map(bool, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is not tuple:\n        return \"Error: Argument passed to tuple_str_int must be a tuple\"\n    else:\n        return tuple([int(item) for item in test_str])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = ()\n    for el in test_str.split(','):\n        try:\n            test_tuple += (int(el),)\n        except ValueError:\n            pass\n    return test_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # get a list of integers from tuple\n    arr = list(map(int, test_str))\n    # convert the tuple list to a tuple\n    tup = tuple(arr)\n    # return the tuple\n    return tup\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return (int(test_str[0]), int(test_str[1]))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # TODO: Calculate the insertion point for x\n    # TODO: Use bisect to locate the right insertion point\n    # TODO: Return the insertion point\n    x = bisect.bisect_right(a, x)\n    return x - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x<a[0]: return -1\n    if x==a[0]: return 0\n    j=bisect.bisect_left(a,x)\n    if a[j-1]<x: return j-1\n    return j\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the leftmost value, s, for x.\n    # You will have a left bound.\n    # For example, if a=10, and x=5, there are two values s=0, s=1 and s=3, \n    # so you have to find the left bound (s=0).\n    # Insert(x,s) will only insert the value at the rightmost value of s. \n    # You have to guarantee that the insertion is done in ascending order, and so the rightmost value is \n    # inserted before the next element of the list.\n    # For example, if a=10, and x=10, insert(10,0).\n    # insert(x,s) will have a right value x, and then insert(x,1).\n    # Then, you have to insert the x at the rightmost value of s. \n    # Insert(10,s) will have a right value 10, and then insert(10,1).\n    # Insert(10,s) will have a right value 10, and then insert(10,2).\n    # Now, x=5, so you have to find s=0, s=1, s=2, s=3, and so on.\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    elif x < a[n-1]:\n        return n\n    else:\n        i = bisect.bisect_left(a, x)\n        if i == n:\n            return 0\n        else:\n            return i\n        \n    \n    \ndef count_unique_elements(a):\n    '''\n    Write a function that takes a sorted list of ints and return the number of unique elements in it.\n    '''\n    # write your code here\n    # total = 0\n    # for i in range(len(a)):\n    #     total += 1\n    #     if a[i] not in a:\n    #         return total\n    \n    #     \n    # \n    # return total\n    n = len(a)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n):\n            if a[i] not in a:\n                return n\n        return n\n        \n        \ndef binary_search(a, x):\n    '''\n    Write a function to return the index of a value in sorted order given a sorted array.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif x < a[n-1]:\n        return n-1\n    else:\n        i = 0\n        while i <= n-1:\n            if a[i] < x:\n                i += 1\n            elif a[i] > x:\n                i += 1\n            else:\n                return i\n    return n\n        \n        \ndef recursive_binary_search(a, x):\n    '''\n    Write a function that takes a sorted list and a target as parameters, and return the index of the element in the list and return its index if found, else return -1.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return n\n    elif x < a[0] and x >= a[n-1]:\n        return 0\n    else:\n        i = 0\n        while i <= n-1:\n            if a[i] < x:\n                i += 1\n            elif a[i] > x:\n                i += 1\n            else:\n                return i\n    return -1\n                \n        \ndef binary_search_iterative(a, x):\n    '''\n    Use a naive binary search to locate the value x in sorted array, return the index if found, else return -1.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return n\n    else:\n        i = bisect.bisect_left(a, x)\n        if i == n:\n            return i\n        else:\n            return i\n            \n    \ndef search(a, x):\n    '''\n    Write a function that takes a sorted list of ints and a target as parameters, and return the index of the element in the list that matches the target, or return -1 if the target value does not exist.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    else:\n        i = bisect.bisect_left(a, x)\n        if i == n:\n            return i\n        else:\n            return i\n            \ndef binary_search_recursive(a, x):\n    '''\n    Use a recursive binary search to locate the value x in sorted array, return the index of the element in the list and return its index if found, else return -1.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return n\n    elif x < a[0] and x >= a[n-1]:\n        return 0\n    else:\n        i = 0\n        while i <= n-1:\n            if a[i] < x:\n                i += 1\n            elif a[i] > x:\n                i += 1\n            else:\n                return i\n    return -1\n    \ndef binary_search_iterative_recursive(a, x):\n    '''\n    Use a recursive binary search to locate the value x in sorted array, return the index of the element in the list and return its index if found, else return -1.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return n\n    else:\n        i = bisect.bisect_left(a, x)\n        if i == n:\n            return i\n        else:\n            return i\n            \n    \ndef three_pointers(a):\n    '''\n    Return the index of the leftmost and rightmost element in a sorted array, if a is sorted.\n    '''\n    # write your code here\n    n = len(a)\n    left = 0\n    right = n-1\n    while left < n:\n        while left <= right and a[left] < a[right]:\n            left += 1\n        if left == right:\n            return left\n        right -= 1\n    \n    return -1\n    \ndef insert_sort(a):\n    '''\n    Write a function that takes a sorted list of ints and sorts it according to the following rules:\n    If the value of an element is less than its predecessor, insert it between it and the element before the element, i.e. the predecessor of the value of the element.\n    Else if the value of an element is greater than the predecessor, delete it from the list and insert it between it and the element before the element.\n    '''\n    # write your code here\n    n = len(a)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [a[0]] + a[1:]\n    else:\n        a.sort()\n        i = 0\n        temp = []\n        while i <= n-2:\n            if a[i] > a[i+1]:\n                temp.append(a[i])\n            else:\n                temp.append(a[i+1])\n            i += 1\n        temp.append(a[n-1])\n        a = temp\n        \n    return a\n    \n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if x == a[i] else i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if a[mid] > x:\n            r = mid\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    if i == 0:\n        return 0\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return (len(a) - 1 + bisect.bisect_right(a, x))\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-3] == 'b':\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by an 'c'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c':\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by 'c' followed by an 'd'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd':\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by 'c' followed by an 'd' followed by 'e'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e':\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by 'c' followed by 'd' followed by an 'e' followed by 'f'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f':\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by 'c' followed by 'd' followed by an 'e' followed by 'f' followed by 'g'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f' and text[-7] == 'g':\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by 'c' followed by an 'd' followed by an 'e' followed by 'f' followed by 'g' followed by 'h'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f' and text[-7] == 'g' and text[-8] == 'h':\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by 'c' followed by an 'd' followed by an 'e' followed by an 'f' followed by an 'g' followed by an 'h' followed by 'i'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f' and text[-7] == 'g' and text[-8] == 'h' and text[-9] == 'i':\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by an 'c' followed by an 'd' followed by an 'e' followed by an 'f' followed by an 'g' followed by an 'h' followed by an 'i' followed by 'j'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f' and text[-7] == 'g' and text[-8] == 'h' and text[-9] == 'i' and text[-10] == 'j':\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by an 'c' followed by an 'd' followed by an 'e' followed by an 'f' followed by an 'g' followed by an 'h' followed by an 'i' followed by 'j' followed by 'k'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f' and text[-7] == 'g' and text[-8] == 'h' and text[-9] == 'i' and text[-10] == 'j' and text[-11] == 'k':\n        return True\n    else:\n        return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by an 'c' followed by an 'd' followed by an 'e' followed by an 'f' followed by an 'g' followed by an 'h' followed by an 'i' followed by an 'j' followed by 'k' followed by 'l'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f' and text[-7] == 'g' and text[-8] == 'h' and text[-9] == 'i' and text[-10] == 'j' and text[-11] == 'k' and text[-12] == 'l':\n        return True\n    else:\n        return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed by an 'c' followed by an 'd' followed by an 'e' followed by an 'f' followed by an 'g' followed by an 'h' followed by an 'i' followed by an 'j' followed by 'k' followed by 'l' followed by'm'.\n    '''\n    if not text:\n        return False\n    elif text[-1] == 'a' and text[-2] == 'b' and text[-3] == 'c' and text[-4] == 'd' and text[-5] == 'e' and text[-6] == 'f' and text[-7] == 'g' and text[-8] == 'h' and text[-9] == 'i' and text[-10] == 'j' and text[-11] == 'k' and text[-12] =='m':\n        return True\n    else:\n        return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b' followed b"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)3'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)4'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)5'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)6'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)7'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)8'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)9'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)10'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)11'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)12'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)13'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)14'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)15'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)16'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)17'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)18'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)19'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)20'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)30'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by forty 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)40'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by seventy 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)60'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by sixty 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)70'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_seventy_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by seventy 'hundred' 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)80'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_thousand(text):\n    '''\n    Write a function that matches a string that has an a followed by thousand 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)90'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by hundred 'h'.\n    '''\n    pattern = r'(b\\s?\\w+)100'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_thirty_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty 'hundred' 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)110'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_match_forty_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by forty 'hundred' 'b'.\n    '''\n    pattern = r'(b\\s?\\w+)120'\n    match = re.search(pattern,text)\n    return match.group(1)\ndef text_matc"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # define a regex pattern for the text\n    regexPattern = '(a)b'\n    # search the text for the pattern in the string\n    regex_match = re.search(regexPattern, text)\n    # if the pattern was found, return the result\n    if(regex_match):\n        return regex_match\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    text = text.replace(\".\",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = re.sub(\"[^a-zA-Z0-9]\",\"\",text)\n    \n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'\\A\\w{3}\\w+', text) # search only for alphanumeric characters\n    return result.group(0) # return the match object\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) == 0:\n        return False\n    \n    \n    if text[0].isdigit():\n        return text_match_three(text[1:]) or text_match_three(text[1:]) or text_match_three(text[1:])\n    else:\n        return text[0] == 'b' and text[1] == 'a' and text[2] == 'b'\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'c'.\n    '''\n    if len(text) == 0:\n        return False\n    \n    if text[0].isdigit():\n        return text_match_four(text[1:]) or text_match_four(text[1:]) or text_match_four(text[1:])\n    else:\n        return text[0] == 'c' and text[1] == 'a' and text[2] == 'c' and text[3] == 'b'\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_three():\n    '''\n    Write a function that prints a text that has an a followed by three 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_three(s)\n    assert match == True\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_four():\n    '''\n    Write a function that prints a text that has an a followed by four 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_four(s)\n    assert match == True\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_five():\n    '''\n    Write a function that prints a text that has an a followed by five 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_five(s)\n    assert match == True\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_six():\n    '''\n    Write a function that prints a text that has an a followed by six 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_six(s)\n    assert match == True\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_seven():\n    '''\n    Write a function that prints a text that has an a followed by seven 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_seven(s)\n    assert match == True\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_eight():\n    '''\n    Write a function that prints a text that has an a followed by eight 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_eight(s)\n    assert match == True\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_nine():\n    '''\n    Write a function that prints a text that has an a followed by nine 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_nine(s)\n    assert match == True\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_ten():\n    '''\n    Write a function that prints a text that has an a followed by ten 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_ten(s)\n    assert match == True\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_eleven():\n    '''\n    Write a function that prints a text that has an a followed by eleven 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_eleven(s)\n    assert match == True\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_twelve():\n    '''\n    Write a function that prints a text that has an a followed by twelve 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_twelve(s)\n    assert match == True\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_thirteen():\n    '''\n    Write a function that prints a text that has an a followed by thirteen 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_thirteen(s)\n    assert match == True\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_fourteen():\n    '''\n    Write a function that prints a text that has an a followed by fourteen 'b' in it.\n    '''\n    s = 'The quick brown fox jumps over the lazy dog.'\n    match = text_match_fourteen(s)\n    assert match == True\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b'.\n    '''\n    regex_pattern = re.compile('a(\\s\\w+)b')\n    \n    if regex_pattern.search(text):\n        return True\n    else:\n        return False\n    \ndef test_text_match_fifteen():\n    '''\n    Write a function that prints a text that has an a followed by fifteen 'b' in it.\n    ''"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.findall(r'a[a-zA-Z]+b', text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '([a-zA-Z]+)(\\d+)(b)'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if not text:\n        return False\n    if len(text) < 3:\n        return False\n    a = text[0]\n    if not a.isdigit():\n        return False\n    if a.isalpha():\n        if not a.isupper():\n            return False\n    else:\n        return False\n    for i in range(1, len(text)):\n        b = text[i]\n        if not b.isdigit():\n            return False\n        if b.isalpha():\n            if not b.isupper():\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not test_str:\n        return tuple()\n    elif len(test_str) == 1:\n        return tuple(test_str)\n    else:\n        return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in test_str:\n        test_list.append(i)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = ()\n    for item in test_list:\n        tuple += (item,)\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) == 1:\n        new_tuple = (test_list[0],)\n    elif len(test_list) == 2:\n        new_tuple = (test_list[0],test_list[1])\n    else:\n        raise ValueError('Tuple must have one or two items.')\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list[i] = test_str[i]\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(map(eval, test_list))\n    return new_list, test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str:\n        return tuple(map(lambda x: x.strip(), test_str.split(',')))\n    else:\n        return None\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    lst = test_str.split(',')\n    new_tuple = ()\n    for i in lst:\n        new_tuple += tuple(i.split())\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    output = []\n    for x in test_str:\n        output.append(test_list.pop())\n    return tuple(output)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = list(filter(lambda x: x % 2 == 0, nums))\n    return even_list\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            new_list.append(nums[i])\n    return new_list\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # This is also a good attempt to make this a function\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2==0:\n                print(\"Even Index = \" + str(i))\n                break\n    else:\n        print(\"The list contains even numbers of even index\")\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            print(\"even\")\n            if nums[i] % 2 == 0:\n                print(nums[i])\n        else:\n            print(\"not even\")\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # empty\n    if len(nums)==0:\n        return False\n    else:\n        # find all even numbers\n        evens = [num for num in nums if num%2==0]\n        # if evens is empty\n        if len(evens)==0:\n            return True\n        # return false\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    evens = []\n    for index in range(len(nums)):\n        if index % 2 == 0:\n            evens.append(nums[index])\n    return evens == evens[::-1]\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even = 0\n    for i in nums:\n        if i % 2 == 0:\n            even += 1\n            if even % 2 == 0:\n                even += 1\n    return even > 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([x % 2 == 0 for x in nums])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(tuple(x for x in test_tup if x is not None))\n    else:\n        raise TypeError(\"remove_nested() takes a tuple as an argument.\")\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove top level tuple from the given tuple\n    if len(test_tup) > 0:\n        tuple_of_tuples = tuple(test_tup[1:])\n        test_tup = test_tup[0]\n        return tuple_of_tuples, test_tup\n    else:\n        # if the tuple is empty, return empty tuple\n        return ()\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup1 = test_tup[0]\n    tup2 = test_tup[1]\n    tup3 = test_tup[2]\n    tup4 = test_tup[3]\n    new_list = [tup1, tup2, tup3, tup4]\n    test_tup = tuple(new_list)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    output_tup = test_tup[1]\n    if type(test_tup[0]) == tuple:\n        for sub_tuple in test_tup[0]:\n            remove_nested(sub_tuple)\n        test_tup = test_tup[1]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(None, test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_tuple(a,b):\n        if a[0] == b[0]:\n            return None\n        return (a[0],a[1] + remove_tuple(a[1],b))\n    return remove_tuple(test_tup[0],test_tup[1])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        test_tup = test_tup[0]\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i][0] == test_tup[j][0]:\n                test_tup = test_tup[:i] + test_tup[i + 1:]\n    return test_tup\n    \n    \n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested = []\n    for tup in test_tup:\n        if type(tup) is tuple:\n            nested.append(tup)\n        else:\n            nested.append(tup)\n    return nested\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    return tuple(tuple(x) for x in test_list)\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # your code goes here\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list)):\n            if type(input_list[i]) is list:\n                count += len(input_list[i])\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list)):\n        for j in range(0, len(input_list[i])):\n            if input_list[i][j] == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_len = len(input_list)\n    count = 0\n    for i in input_list:\n        count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Example \n    # input_list = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\n    # output = 2\n    # output = 1\n    # input_list = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    # output = 3\n    # output = 2\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += len(input_list[i])\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in range(0,len(input_list)):\n        if isinstance(input_list[i],list):\n            count+=len(input_list[i])\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total = len(input_list)\n    #for i in range(0,len(input_list)):\n    #    print(input_list[i],type(input_list[i]))\n    if type(input_list) is not list:\n        print(f\"The count_list function did not return a list because it was input {input_list}\")\n    else:\n        #print(f\"The count_list function did return a list.\")\n        for i in range(0,len(input_list)):\n            if type(input_list[i]) is list:\n                #print(f\"{input_list[i]} has a length of {len(input_list[i])}.\")\n                count_list(input_list[i])\n            elif type(input_list[i]) is str:\n                #print(f\"{input_list[i]} has a length of {len(input_list[i])}.\")\n                count_list(input_list[i])\n            elif type(input_list[i]) is int:\n                #print(f\"{input_list[i]} has a length of {len(input_list[i])}.\")\n                count_list(input_list[i])\n            elif type(input_list[i]) is float:\n                #print(f\"{input_list[i]} has a length of {len(input_list[i])}.\")\n                count_list(input_list[i])\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = []\n    for i in input_list:\n        if i not in num_list:\n            num_list.append(i)\n    return len(num_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total = 0\n    for i in input_list: \n        total += len(i)\n    return total\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    if x==arr[n-1]:\n        return n-1\n    if x>arr[n-1]:\n        return 0\n    if arr[0]<x<arr[n-1]:\n        return n-1\n    if arr[0]>x>arr[n-1]:\n        return 0\n    mid = int(n/2)\n    if arr[mid]<x:\n        return n-1\n    if arr[mid]>x:\n        return mid\n    if arr[0]<x<arr[mid]:\n        return 0\n    if arr[mid]>x>arr[0]:\n        return mid\n    if arr[mid]<x<arr[n-1]:\n        return mid\n    if arr[mid]>x>arr[n-1]:\n        return mid\n    if arr[0]>x:\n        return 0\n    if arr[mid]>x:\n        return mid\n    if arr[n-1]<x<arr[0]:\n        return 0\n    if arr[n-1]>x<arr[mid]:\n        return mid\n    if arr[n-1]<x>arr[0]:\n        return 0\n    if arr[n-1]<x<arr[mid]:\n        return mid\n    if arr[0]>x:\n        return mid\n    if arr[mid]>x:\n        return mid\n    if arr[mid]<x:\n        return 0\n    return mid\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Implement the function\n    return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return 0 if arr[0] == x else -1\n    else:\n        if arr[0] == x:\n            return 0\n        else:\n            return len(arr) - 1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        mid = len(arr)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return last(arr[mid:],x)\n        else:\n            return last(arr[:mid],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif len(arr)==1:\n        return 0\n    else:\n        if arr[0]==arr[len(arr)-1]:\n            return len(arr)-1\n        else:\n            return 0\narr=[3,4,0,2,1,6,5]\nn=len(arr)\nprint(last(arr,n))\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[x]!= x:\n        arr[x],arr[-1]=arr[-1],arr[x]\n    return len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    if(l==0):\n        return -1\n    i=0\n    while(i<l-1):\n        if(arr[i]<=arr[i+1]):\n            return i\n        else:\n            i+=1\n    return -1\n    \ndef leftMost(arr,x):\n    '''\n    Write a python function to find the left most value of a sorted array.\n    '''\n    l=len(arr)\n    if(l==0):\n        return -1\n    i=0\n    while(i<l-1):\n        if(arr[i]>x):\n            return i\n        else:\n            i+=1\n    return -1\n    \ndef delete(arr,x,pos):\n    '''\n    Write a python function to delete an element in a sorted array.\n    '''\n    l=len(arr)\n    if(l==0):\n        return\n    if(l==1 and arr[0]==x):\n        return arr.pop(0)\n    if(arr[pos]==x):\n        return delete(arr,x,pos-1)\n    if(arr[pos]>x):\n        arr[pos]=arr[pos]-x\n        return arr\n    elif(arr[pos]<x):\n        arr[pos]=arr[pos]+x\n        return arr\n    \ndef insert(arr,x,pos):\n    '''\n    Write a python function to insert an element in a sorted array.\n    '''\n    l=len(arr)\n    if(l==0):\n        arr.append(x)\n        return arr\n    if(l==1 and arr[0]==x):\n        arr.insert(pos,x)\n        return arr\n    if(arr[pos]==x):\n        return arr\n    if(arr[pos]>x):\n        arr[pos]=arr[pos]+x\n        return arr\n    elif(arr[pos]<x):\n        arr[pos]=arr[pos]-x\n        return arr\n    \ndef reverse(arr,pos):\n    '''\n    Write a python function to reverse an array.\n    '''\n    l=len(arr)\n    if(l==0):\n        return arr\n    if(l==1):\n        return arr[::-1]\n    if(arr[pos]>arr[pos-1]):\n        arr[pos],arr[pos-1]=arr[pos-1],arr[pos]\n        return arr\n    if(arr[pos]<arr[pos-1]):\n        arr[pos],arr[pos-1]=arr[pos-1],arr[pos]\n        return arr\n    \ndef check(arr,x):\n    '''\n    Write a python function to check if an array contains an element x.\n    '''\n    l=len(arr)\n    if(l==0):\n        return False\n    if(l==1 and arr[0]==x):\n        return True\n    if(arr[pos]==x):\n        return check(arr,x)\n    if(arr[pos]>x):\n        return check(arr,x)\n    elif(arr[pos]<x):\n        return check(arr,x)\n    \ndef merge(arr,l,r):\n    '''\n    Write a python function to merge two sorted arrays.\n    '''\n    if(l==r):\n        return\n    m=int((l+r)/2)\n    if(check(arr,arr[m])):\n        merge(arr,l,m)\n        merge(arr,m+1,r)\n        return arr\n    if(check(arr,arr[m])):\n        merge(arr,l,m)\n    else:\n        merge(arr,m+1,r)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    #find first occurance\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] > x:\n            break\n        i += 1\n    return i\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile('(\\w+)\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+')\n    result = pattern.findall(text)\n    if result:\n        for match in result:\n            print(match)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search('a[^b]*b[^b]*b', text)\n    if result:\n        return result.group(0)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'[a-zA-Z0-9]\\b')\n    return p.findall(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # creating a pattern that matches anything before and after an 'a'\n    pattern = re.compile(r'[^a-zA-Z0-9\\']')\n    # creating a function to find any alphanumeric characters\n    a_num_pattern = re.compile(r'[^a-zA-Z0-9\\']')\n    # creating a function to match a 'b' to an 'a'\n    pattern_b_a = re.compile(r'b')\n    # creating a pattern to capture any 'a'\n    pattern_a = re.compile(r'a')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_copy = text.copy()\n    for word in text.split():\n        if word == 'a':\n            text_copy = text_copy.replace('a', word.replace('a', 'b'))\n    return text_copy\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = \"a\\.(?=b)\"\n    return re.search(regex, text).group()\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.replace('\\\\n', '\\n')\n    text = text.replace('\\\\t', '\\t')\n    text = text.replace('\\\\\\'', '\\'')\n    text = text.replace('\\\\\"', '\\\"')\n    text = text.replace('\\\\*', '\\*')\n    text = text.replace('\\\\.', '.')\n    text = text.replace('\\\\?', '?')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\1', '1')\n    text = text.replace('\\\\2', '2')\n    text = text.replace('\\\\3', '3')\n    text = text.replace('\\\\4', '4')\n    text = text.replace('\\\\5', '5')\n    text = text.replace('\\\\6', '6')\n    text = text.replace('\\\\7', '7')\n    text = text.replace('\\\\8', '8')\n    text = text.replace('\\\\9', '9')\n    text = text.replace('\\\\+', '+')\n    text = text.replace('\\\\-', '-')\n    text = text.replace('\\\\*', '*')\n    text = text.replace('\\\\/', '/')\n    text = text.replace('\\\\%', '%')\n    text = text.replace('\\\\[', '[')\n    text = text.replace('\\\\]', ']')\n    text = text.replace('\\\\_', '_')\n    text = text.replace('\\\\_', '_')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', '0')\n    text = text.replace('\\\\0', "
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # Add a special character in front\n    text = re.sub(r'\\a', '1', text)\n    \n    # Find all instances of a\n    a = re.findall('a', text)\n    \n    # Create a list of all the instances of 'a'\n    aa = []\n    for i in a:\n        aa.append(i)\n    \n    # Remove all 'a' from the list\n    aa = [i for i in aa if not i.startswith('a')]\n    \n    # Clean up\n    aa = [i.replace(' ', 'a').replace('-', '') for i in aa]\n    \n    # Remove all 'b' from the list\n    bb = []\n    for i in aa:\n        bb.append(i[1:])\n    \n    # Remove all 'b' from the list\n    bb = [i[1:].replace(' ', '') for i in bb]\n    \n    # Remove all 'b' from the list\n    bb = [i.replace(' ', 'b').replace('-', '') for i in bb]\n    \n    # Clean up\n    bb = [i.replace(' ', '') for i in bb]\n    \n    # Clean up\n    bb = [i.replace('-', '') for i in bb]\n    \n    # Remove all 'a' from the list\n    bb = [i.replace('a', '') for i in bb]\n    \n    # Remove all 'b' from the list\n    bb = [i.replace('b', '') for i in bb]\n    \n    # Remove all 'b' from the list\n    bb = [i.replace('b', '') for i in bb]\n    \n    # Clean up\n    bb = [i.replace('b', '') for i in bb]\n    \n    # Create a new list with all the 'a' removed\n    aa = []\n    for i in aa:\n        aa.append(i.replace('a', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed\n    bb = []\n    for i in bb:\n        bb.append(i.replace('b', ''))\n    \n    # Create a new list with all the 'b' removed"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    for i in text:\n        if i =='' or i == '\\n':\n            continue\n        if i == 'a' or i == 'b':\n            return 'end'\n    return 'end'\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'\\w*a{2,}b', text)\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    return re.search(r'\\w*a{2,}c', text)\ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    return re.search(r'\\w*a{2,}d', text)\ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    return re.search(r'\\w*a{2,}e', text)\ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'f'.\n    '''\n    return re.search(r'\\w*a{2,}f', text)\ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'g'.\n    '''\n    return re.search(r'\\w*a{2,}g', text)\ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'h'.\n    '''\n    return re.search(r'\\w*a{2,}h', text)\ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'i'.\n    '''\n    return re.search(r'\\w*a{2,}i', text)\ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'j'.\n    '''\n    return re.search(r'\\w*a{2,}j', text)\ndef text_starta_endk(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'k'.\n    '''\n    return re.search(r'\\w*a{2,}k', text)\ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'l'.\n    '''\n    return re.search(r'\\w*a{2,}l', text)\ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in'm'.\n    '''\n    return re.search(r'\\w*a{2,}m', text)\ndef text_starta_endn(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'n'.\n    '''\n    return re.search(r'\\w*a{2,}n', text)\ndef text_starta_endo(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'o'.\n    '''\n    return re.search(r'\\w*a{2,}o', text)\ndef text_starta_endp(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'p'.\n    '''\n    return re.search(r'\\w*a{2,}p', text)\ndef text_starta_endq(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'q'.\n    '''\n    return re.search(r'\\w*a{2,}q', text)\ndef text_starta_endr(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'r'.\n    '''\n    return re.search(r'\\w*a{2,}r', text)\ndef text_starta_endt(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 't'.\n    '''\n    return re.search(r'\\w*a{2,}t', text)\ndef text_starta_endu(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'u'.\n    '''\n    return re.search(r'\\w*a{2,}u', text)\ndef text_starta_endv(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'v'.\n    '''\n    return re.search(r'\\w*a{2,}v', text)\ndef text_starta_endw(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'w'.\n    '''\n    return re.search(r'\\w*a{2,}w', text)\ndef text_starta_endx(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'x'.\n    '''\n    return re.search(r'\\w*a{2,}x', text)\ndef text_starta_endy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'y'.\n    '''\n    return re.search(r'\\w*a{2,}y', text)\ndef text_starta_endz(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'z'.\n    '''\n    return re.search(r'\\w*a{2,}z', text)\ndef text_starta_end\u00e7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in '\u00e7'.\n    '''\n    return re.search(r'\\w*a{2,}\u00e7', text)\ndef text_starta_enddz(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'dz'.\n    '''\n    return re.search(r'\\w*a{2,}dz', text)\ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    return re.search(r'\\w*a{2,}e', text)\ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'f'.\n    '''\n    return re.search(r'\\w*a{2,}f', text)\ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'g'.\n    '''\n    return re.search(r'\\w*a{2,}g', text)\ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'h'.\n    '''\n    return re.search(r'\\w*a{2,}h', text)\ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'i'.\n    '''\n    return re.search(r'\\w*a{2,}i', text)\ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has a"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    print(sum(dict.values()))\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for item in dict:\n        total+=dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    value_sum = 0\n    for key, value in dict.items():\n        value_sum += value\n    return value_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for item in dict:\n        result += dict[item]\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum = sum + value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k in dict.keys():\n        total += dict[k]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if type(dict)!= dict:\n        return print(\"Invalid dictionary type\")\n    elif type(dict)!= dict.keys():\n        return print(\"Invalid dictionary type\")\n    else:\n        sum = 0\n        for key in dict:\n            sum += dict[key]\n        return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for i in dict.items():\n        print(i)\n        return sum(i)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code here\n    sum = 0\n    i = 0\n    while i <= n:\n        if i % 2 == 1:\n            sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for num in range(l, r + 1):\n        if num % 2 == 1:\n            sum += num\n    return sum\n    # sum = 0\n    # for num in range(l, r + 1):\n    #     if num % 2 == 1:\n    #         sum += num\n    # return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    import math\n    sum_odd = 0\n    for i in range(l,r+1):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for n in range(1, n + 1):\n        if n % 2 == 1:\n            sum = sum + n\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            s = s + i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2)) \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if(n <= 1):\n        return n\n    else:\n        if n % 2 == 0:\n            return n + sum_odd(n-1)\n        else:\n            return n - sum_odd(n-1)\n    \nprint(sum_odd(5))"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total = total + i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum = sum + x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _modulo(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr%(len(arr))\n    \ndef test_sum():\n    arr = [1,2,3,4]\n    assert _sum(arr) == 10\n    arr = [1,2,3,4,5]\n    assert _sum(arr) == 9\n    arr = [1,2,3,4,5,6]\n    assert _sum(arr) == 7\n    arr = [1,2,3,4,5,6,7,8,9]\n    assert _sum(arr) == 8\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    assert _sum(arr) == 10\n    arr = [1,2,3,4,5,6,7,8,9,10,11]\n    assert _sum(arr) == 15\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12]\n    assert _sum(arr) == 10\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    assert _sum(arr) == 6\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    assert _sum(arr) == 9\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    assert _sum(arr) == 4\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    assert _sum(arr) == 8\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    assert _sum(arr) == 12\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    assert _sum(arr) == 8\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    assert _sum(arr) == 14\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    assert _sum(arr) == 3\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    assert _sum(arr) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    summation = 0\n    for value in arr:\n        summation += value\n    return summation\n    \ndef _mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    summation = 0\n    count = 0\n    for value in arr:\n        summation += value\n        count += 1\n    return summation/count\n    \ndef _variance(arr):\n    '''\n    Write a python function to find the variance of an array.\n    '''\n    variance = 0\n    for value in arr:\n        variance += (value-_mean(arr))**2\n    return variance\n    \ndef _stdDev(arr):\n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return(_sum(arr)-_mean(arr))**0.5\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for n in arr:\n        total += n\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # TODO: implement your solution here\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for x in arr:\n        res += x\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # use the python bitwise operators for the l,r,b,t operations\n    # note that we must rotate left by d bits\n    \n    # initialize the carry\n    c = 1\n    \n    # initialize the result\n    r = 0\n    \n    # loop through the bits\n    for i in range(32):\n        \n        # if the current bit is set\n        if (n & (1 << i))!= 0:\n            # if the bit is set, set its complement\n            c = ~(c & (1 << i))\n            # if the carry was set, add the complement\n            if c: r = (r << 1) | 1\n            else: r = (r << 1) | 0\n        # if the bit is set, set it\n        else:\n            # if the bit is not set, and the carry was set, subtract 1\n            if c: r = (r << 1) | 1\n            else: r = (r << 1) | 0\n            # if the bit is not set, and the carry was not set, add 1\n            if not c: r = (r << 1) | 1\n            else: r = (r << 1) | 0\n            \n    # return the resulting carry value\n    return r\n        "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def rotate(n,d):\n        return ((n>>d) << (n & 0xffffff)) | ((n & 0xffffff) >> (32-d))\n    for _ in range(d):\n        n = rotate(n,1)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n>>d\n    if (n&1):\n        n=n+1\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Bitwise-operator\n    return (n >> d) | (n << (32 - d))\n    # Bitwise-operator\n    # bits_to_rotate = n & (1 << d) - 1\n    # return bits_to_rotate\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    b = bin(n)\n    b = b[2:] + b[:2]\n    return int(b,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n >> d\n    n &= (n-1)\n    t = 1\n    while n!= 0:\n        t <<= 1\n        n >>= 1\n        t |= n\n    return t\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    count = n & 255\n    n = n >> 8\n    return n | count << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%8\n    if d==7:\n        d=0\n    if d==6:\n        d=1\n    if d==5:\n        d=2\n    if d==4:\n        d=3\n    if d==3:\n        d=4\n    if d==2:\n        d=5\n    if d==1:\n        d=6\n    print(d)\n    print(n)\n    print(d)\n    print(n.bit_length())\n    return(n)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # YOUR CODE HERE\n    #print(text)\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\"\\r\",\"\")\n    text = text.replace(\"\\v\",\"\")\n    return text\ndef remove_string(text, sub_string):\n    '''\n    Write a function to remove a substring from a string.\n    '''\n    # YOUR CODE HERE\n    #print(text)\n    text = text.replace(sub_string,'')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[^\\s]', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +',' ',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[\\s]+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +',' ',text)\ndef remove_brackets(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('([\\[{]|[\\]})',' ',text)\n    return text\ndef remove_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +',' ',text)\n    return text\ndef remove_simbol_special(text):\n    '''\n    Write a function to remove all special symbols from a string.\n    '''\n    text = re.sub('[?|!|\"|#|$|%|&|*|+|=|:|;|,|\\\\|/|\\\\?|]',' ',text)\n    return text\ndef remove_math(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +',' ',text)\n    text = re.sub('\\[|\\]',' ',text)\n    text = re.sub('\\{|\\}',' ',text)\n    text = re.sub('\\(|\\)',' ',text)\n    text = re.sub('\\+|\\||-|',' ',text)\n    text = re.sub('\\(|\\)',' ',text)\n    text = re.sub('\\*',' ',text)\n    text = re.sub('\\[',' ',text)\n    text = re.sub('\\]',' ',text)\n    text = re.sub('\\{',' ',text)\n    text = re.sub('\\}',' ',text)\n    text = re.sub('\\(',' ',text)\n    text = re.sub('\\)',' ',text)\n    text = re.sub('\\*',' ',text)\n    text = re.sub('\\?',' ',text)\n    text = re.sub('\\,',' ',text)\n    text = re.sub('\\;',' ',text)\n    text = re.sub('\\:',' ',text)\n    text = re.sub('\\,',' ',text)\n    text = re.sub('\\|||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text = re.sub('\\||',' ',text)\n    text "
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(\"\\s+\", \" \", text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = re.sub('\\s+','', str(text))\n    return result\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = re.sub('\\s+','', str(text).lower())\n    return result\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = text.replace(' ','')\n    return result\ndef clean_text(text):\n    '''\n    Write a function to clean up a string.\n    '''\n    text = remove_all_spaces(text)\n    text = remove_multiple_spaces(text)\n    text = remove_whitespaces(text)\n    return text\ndef remove_stop_words(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef get_stop_words(text):\n    '''\n    Write a function to get a list of stop words from a string.\n    '''\n    result = re.findall('\\w+', text)\n    return result\ndef remove_stop_words(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_numbers(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_lowercase(text):\n    '''\n    Write a function to remove lowercase letters from a string.\n    '''\n    result = text.lower()\n    return result\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    result = re.sub('[^a-zA-Z0-9]', '', str(text))\n    return result\ndef remove_lowercase(text):\n    '''\n    Write a function to remove lowercase letters from a string.\n    '''\n    result = text.lower()\n    return result\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_numbers(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove whitespaces from a string.\n    '''\n    result = re.sub('\\s+','', str(text).lower())\n    return result\ndef remove_stop_words(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef get_stop_words(text):\n    '''\n    Write a function to get a list of stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef remove_stop_words(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_numbers(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_lowercase(text):\n    '''\n    Write a function to remove lowercase letters from a string.\n    '''\n    result = text.lower()\n    return result\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    result = re.sub('[^a-zA-Z0-9]', '', str(text))\n    return result\ndef remove_lowercase(text):\n    '''\n    Write a function to remove lowercase letters from a string.\n    '''\n    result = text.lower()\n    return result\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_numbers(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove whitespaces from a string.\n    '''\n    result = re.sub('\\s+','', str(text))\n    return result\ndef remove_stop_words(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef get_stop_words(text):\n    '''\n    Write a function to get a list of stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef remove_stop_words(text):\n    '''\n    Write a function to remove stop words from a string.\n    '''\n    text = re.sub(\"[^a-zA-Z]\", \" \", str(text))\n    result = text.lower().split()\n    stop_words = set(stopwords.words('english'))\n    return [w for w in result if not w in stop_words]\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_numbers(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    result = re.sub('[0-9]', '', str(text))\n    return result\ndef remove_lowercase(text):\n    '''\n    Write a function to remove lowercase letters from a string.\n    '''\n    result = text.lower()\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x)==len(y)==len(z), \"Lenth of lists must be same\"\n    assert x==y, \"Sorted list must be same\"\n    assert z==y, \"Sorted list must be same\"\n    assert x==z, \"Sorted list must be same\"\n    print(\"Success\")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if x[i] == y[j] == z[k]:\n                    c += 1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x * y\n    b = x * z\n    c = y * z\n    print(a, b, c)\n    if a == b == c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(sum(x == y for x,y in zip(x,y)))\n    print(sum(x == z for x,z in zip(x,z)))\n    print(sum(x == y for x in x))\n    print(sum(x == z for x,z in zip(x,z)))\n    \ntest_three_equal([1,2,3,4,5], [3,4,5,5,4], [3,3,4,4,4])\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_counter = 0\n    y_counter = 0\n    z_counter = 0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if x[i] == y[j] == z[k]:\n                    x_counter += 1\n        for j in range(len(x)):\n            for k in range(len(y)):\n                if x[i] == y[j] == z[k]:\n                    y_counter += 1\n        for j in range(len(x)):\n            for k in range(len(y)):\n                if x[i] == y[j] == z[k]:\n                    z_counter += 1\n    if x_counter == y_counter == z_counter == 3:\n        return 'Right!'\n    else:\n        return 'No'\n    \nprint(test_three_equal([1, 2, 2], [2, 1, 1], [2, 2, 1])"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_count = 0\n    y_count = 0\n    z_count = 0\n    if (x>y and x>z):\n        x_count += 1\n    if (y>x and y>z):\n        y_count += 1\n    if (z>x and z>y):\n        z_count += 1\n    if (x==y and y==z):\n        z_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (y==z or z==x):\n        x_count += 1\n    if (y==z or z==x):\n        z_count += 1\n    if (y==z or x==z):\n        z_count += 1\n    if (x==z or y==z):\n        y_count += 1\n    if (y==z or x==z):\n        x_count += 1\n    if (x==z or y==z):\n        z_count += 1\n    if (x==z or y==z):\n        y_count += 1\n    if (y==z or x==z):\n        x_count += 1\n    if (y==z or x==z):\n        z_count += 1\n    if (x==z or y==z):\n        y_count += 1\n    if (x==y or y==z):\n        x_count += 1\n    if (x==y or y==z):\n        z_count += 1\n    if (y==x or y==z):\n        x_count += 1\n    if (y==z or y==x):\n        z_count += 1\n    if (x==z or y==z):\n        y_count += 1\n    if (x==y or y==z):\n        x_count += 1\n    if (y==z or x==z):\n        z_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (x==z or y==z):\n        x_count += 1\n    if (y==z or x==z):\n        z_count += 1\n    if (y==z or x==z):\n        z_count += 1\n    if (y==z or x==z):\n        y_count += 1\n    if (x==z or y==z):\n        x_count += 1\n    if (y==z or x==z):\n        z_count += 1\n    if (x==z or y==z):\n        z_count += 1\n    if (y==z or x==z):\n        z_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (x==y or x==z):\n        z_count += 1\n    if (y==z or x==y):\n        y_count += 1\n    if (x==y or y==z):\n        x_count += 1\n    if (y==z or x==y):\n        z_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (x==y or x==z):\n        x_count += 1\n    if (y==z or x==y):\n        z_count += 1\n    if (x==y or x==z):\n        y_count += 1\n    if (x==y or y==z):\n        x_count += 1\n    if (y==z or x==y):\n        z_count += 1\n    if (y==z or y==x):\n        z_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (x==y or y==y):\n        x_count += 1\n    if (x==y or x==z):\n        z_count += 1\n    if (y==x or x==z):\n        x_count += 1\n    if (x==y or y==z):\n        z_count += 1\n    if (x==y or y==y):\n        y_count += 1\n    if (x==y or x==y):\n        x_count += 1\n    if (x==y or y==z):\n        z_count += 1\n    if (y==x or x==y):\n        y_count += 1\n    if (y==x or y==z):\n        x_count += 1\n    if (x==y or x==z):\n        z_count += 1\n    if (y==x or y==z):\n        y_count += 1\n    if (x==y or y==y):\n        x_count += 1\n    if (x==y or x==x):\n        y_count += 1\n    if (y==x or y==y):\n        x_count += 1\n    if (x==y or y==x):\n        z_count += 1\n    if (x==y or y==y):\n        y_count += 1\n    if (x==y or y==z):\n        x_count += 1\n    if (y==x or x==y):\n        y_count += 1\n    if (x==y or x==z):\n        y_count += 1\n    if (y==x or x==z):\n        z_count += 1\n    if (x==y or x==z):\n        x_count += 1\n    if (x==y or x==y):\n        y_count += 1\n    if (y==x or x==z):\n        x_count += 1\n    if (x==y or y==x):\n        z_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (y==x or x==y):\n        y_count += 1\n    if (y==x or x==z):\n        x_count += 1\n    if (y==x or x==y):\n        z_count += 1\n    if (x==y or x==z):\n        y_count += 1\n    if (y==x or x==y):\n        x_count += 1\n    if (x==y or x==z):\n        z_count += 1\n    if (y==x or x==y):\n        y_count += 1\n    if (y==x or y==z):\n        x_count += 1\n    if (x==y or y==z):\n        z_count += 1\n    if (y==z or y==z):\n        z_count += 1\n    if (x==y or y==x):\n        y_count += 1\n    if (y==x or y==z):\n        x_count += 1\n    if (y==z or y==z):\n        z_count += 1\n    if (y==x or x==z):\n        y_count += 1\n    if (x==y or x==y):\n        x_count += 1\n    if (x==y or y==z):\n        z_count += 1\n    if (y==x or y==z):\n        y_count += 1\n    if (x==y or x==z):\n        y_count += 1\n    if (x==y or y==z):\n        x_count += 1\n    if (y==x or x==z):\n        z_count += 1\n    if (y==x or y==y):\n        x_count += 1\n    if (x==y or x==z):\n        z_count += 1\n    if (x==y or y==x):\n        y_count += 1\n    if (y==x or x==z):\n        x_count += 1\n    if (x==y or x==z):\n        y_count += 1\n    if (x==y or y==x):\n        y_count += 1\n    if (x==y or x==y):\n        y_count += 1\n    if (x==y or x==y):\n        y_count += 1\n    if (x==y or y==x):\n        x_count += 1\n    if (x==y or y==y):\n        y_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (x==y or y==y):\n        x_count += 1\n    if (x==y or y==z):\n        y_count += 1\n    if (x==y or x==y):\n        x_count += 1\n    if (x==y or y==z)"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # x = int(input(\"Enter First Number : \"))\n    # y = int(input(\"Enter Second Number : \"))\n    # z = int(input(\"Enter Third Number : \"))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # YOUR CODE HERE\n    print(x,y,z)\n    print(type(x))\n    print(type(y))\n    print(type(z))\n    assert(x==y)\n    assert(x==z)\n    assert(y==z)\n    return x+y+z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x*y == z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x)\n    print(y)\n    print(z)\n    # Function call\n    return(len(list(set(x) & set(y) & set(z))))\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        \n        while arr[i]!= arr[n-1-i]:\n            if arr[i] > arr[n-1-i]:\n                arr[n-1-i],arr[i] = arr[i],arr[n-1-i]\n            else:\n                break\n            count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    # Your code here\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # TODO: Write your solution here\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count\n    # pass #TODO: Remove this line once you have completed this function\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    res = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            res += 1\n    return res\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    \n    # find the average of the values\n    avg = sum(arr)/n\n    # create a set to store the elements that need to be rotated\n    need = set()\n    # create a dictionary to store the unique rotations\n    rotations = {}\n    # add each element to the need set\n    for i in arr:\n        need.add(i)\n        if i in rotations:\n            rotations[i] += 1\n        else:\n            rotations[i] = 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    max_length = len(arr)\n    for i in range(max_length):\n        for j in range(max_length-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # return 0 if array is empty\n    if len(arr) == 0:\n        return 0\n    \n    n = len(arr)\n    # count of rotations\n    rotations = 0\n    \n    # find rotation point \n    # if rotation point is in the middle,\n    # then it is rotation\n    # and it is required to \n    # count the rotations\n    if n & 1:\n        rotations += 1\n    \n    # find first and last \n    # point in the array\n    first = 0\n    last = n - 1\n    \n    while first < last:\n        # if point is in the middle\n        # then it is rotation\n        # and it is required to\n        # count the rotations\n        if arr[first] == arr[last] and (first + 1) % 2 == 0:\n            rotations += 1\n            last -= 1\n        elif arr[first] == arr[last] and (first + 1) % 2 == 1:\n            first += 1\n        else:\n            first += 1\n            last -= 1\n    \n    return rotations\n    "
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n % 2 == 0 :\n        return n > 1\n    if n == 1 :\n        return False\n    if n == 2 :\n        return True\n    if n == 3 :\n        return True\n    if n == 4 :\n        return True\n    if n == 5 :\n        return True\n    if n == 6 :\n        return True\n    if n == 7 :\n        return True\n    if n == 8 :\n        return True\n    if n == 9 :\n        return True\n    if n == 10 :\n        return True\n    if n == 11 :\n        return True\n    if n == 12 :\n        return True\n    if n == 13 :\n        return True\n    if n == 14 :\n        return True\n    if n == 15 :\n        return True\n    if n == 16 :\n        return True\n    if n == 17 :\n        return True\n    if n == 18 :\n        return True\n    if n == 19 :\n        return True\n    if n == 20 :\n        return True\n    if n == 21 :\n        return True\n    if n == 22 :\n        return True\n    if n == 23 :\n        return True\n    if n == 24 :\n        return True\n    if n == 25 :\n        return True\n    if n == 26 :\n        return True\n    if n == 27 :\n        return True\n    if n == 28 :\n        return True\n    if n == 29 :\n        return True\n    if n == 30 :\n        return True\n    if n == 31 :\n        return True\n    if n == 32 :\n        return True\n    if n == 33 :\n        return True\n    if n == 34 :\n        return True\n    if n == 35 :\n        return True\n    if n == 36 :\n        return True\n    if n == 37 :\n        return True\n    if n == 38 :\n        return True\n    if n == 39 :\n        return True\n    if n == 40 :\n        return True\n    if n == 41 :\n        return True\n    if n == 42 :\n        return True\n    if n == 43 :\n        return True\n    if n == 44 :\n        return True\n    if n == 45 :\n        return True\n    if n == 46 :\n        return True\n    if n == 47 :\n        return True\n    if n == 48 :\n        return True\n    if n == 49 :\n        return True\n    if n == 50 :\n        return True\n    if n == 51 :\n        return True\n    if n == 52 :\n        return True\n    if n == 53 :\n        return True\n    if n == 54 :\n        return True\n    if n == 55 :\n        return True\n    if n == 56 :\n        return True\n    if n == 57 :\n        return True\n    if n == 58 :\n        return True\n    if n == 59 :\n        return True\n    if n == 60 :\n        return True\n    if n == 61 :\n        return True\n    if n == 62 :\n        return True\n    if n == 63 :\n        return True\n    if n == 64 :\n        return True\n    if n == 65 :\n        return True\n    if n == 66 :\n        return True\n    if n == 67 :\n        return True\n    if n == 68 :\n        return True\n    if n == 69 :\n        return True\n    if n == 70 :\n        return True\n    if n == 71 :\n        return True\n    if n == 72 :\n        return True\n    if n == 73 :\n        return True\n    if n == 74 :\n        return True\n    if n == 75 :\n        return True\n    if n == 76 :\n        return True\n    if n == 77 :\n        return True\n    if n == 78 :\n        return True\n    if n == 79 :\n        return True\n    if n == 80 :\n        return True\n    if n == 81 :\n        return True\n    if n == 82 :\n        return True\n    if n == 83 :\n        return True\n    if n == 84 :\n        return True\n    if n == 85 :\n        return True\n    if n == 86 :\n        return True\n    if n == 87 :\n        return True\n    if n == 88 :\n        return True\n    if n == 89 :\n        return True\n    if n == 90 :\n        return True\n    if n == 91 :\n        return True\n    if n == 92 :\n        return True\n    if n == 93 :\n        return True\n    if n == 94 :\n        return True\n    if n == 95 :\n        return True\n    if n == 96 :\n        return True\n    if n == 97 :\n        return True\n    if n == 98 :\n        return True\n    if n == 99 :\n        return True\n    if n == 100 :\n        return True\n    if n == 101 :\n        return True\n    if n == 102 :\n        return True\n    if n == 103 :\n        return True\n    if n == 104 :\n        return True\n    if n == 105 :\n        return True\n    if n == 106 :\n        return True\n    if n == 107 :\n        return True\n    if n == 108 :\n        return True\n    if n == 109 :\n        return True\n    if n == 110 :\n        return True\n    if n == 111 :\n        return True\n    if n == 112 :\n        return True\n    if n == 113 :\n        return True\n    if n == 114 :\n        return True\n    if n == 115 :\n        return True\n    if n == 116 :\n        return True\n    if n == 117 :\n        return True\n    if n == 118 :\n        return True\n    if n == 119 :\n        return True\n    if n == 120 :\n        return True\n    if n == 121 :\n        return True\n    if n == 122 :\n        return True\n    if n == 123 :\n        return True\n    if n == 124 :\n        return True\n    if n == 125 :\n        return True\n    if n == 126 :\n        return True\n    if n == 127 :\n        return True\n    if n == 128 :\n        return True\n    if n == 129 :\n        return True\n    if n == 130 :\n        return True\n    if n == 131 :\n        return True\n    if n == 132 :\n        return True\n    if n == 133 :\n        return True\n    if n == 134 :\n        return True\n    if n == 135 :\n        return True\n    if n == 136 :\n        return True\n    if n == 137 :\n        return True\n    if n == 138 :\n        return True\n    if n == 139 :\n        return True\n    if n == 140 :\n        return True\n    if n == 141 :\n        return True\n    if n == 142 :\n        return True\n    if n == 143 :\n        return True\n    if n == 144 :\n        return True\n    if n == 145 :\n        return True\n    if n == 146 :\n        return True\n    if n == 147 :\n        return True\n    if n == 148 :\n        return True\n    if n == 149 :\n        return True\n    if n == 150 :\n        return True\n    if n == 151 :\n        return True\n    if n == 152 :\n        return True\n    if n == 153 :\n        return True\n    if n == 154 :\n        return True\n    if n == 155 :\n        return True\n    if n == 156 :\n        return True\n    if n == 157 :\n        return True\n    if n == 158 :\n        return True\n    if n == 159 :\n        return True\n    if n == 160 :\n        return True\n    if n == 161 :\n        return True\n    if n == 162 :\n        return True\n    if n == 163 :\n        return True\n    if n == 164 :\n        return True\n    if n == 165 :\n        return True\n    if n == 166 :\n        return True\n    if n == 167 :\n        return True\n    if n == 168 :\n        return True\n    if n == 169 :\n        return True\n    if n == 170 :\n        return True\n    if n == 171 :\n        return True\n    if n == 172 :\n        return True\n    if n == 173 :\n        return True\n    if n == 174 :\n        return True\n    if n == 175 :\n        return True\n    if n == 176 :\n        return True\n    if n == 177 :\n        return True\n    if n == 178 :\n        return True\n    if n == 179 :\n        retur"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(str(n))\n    if s == s and (n % 2 == 0 or n % 3 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == int(n)) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n < 0):\n        print(\"enter a non negative number\")\n    elif n == 0:\n        return True\n    elif(n == 1):\n        return False\n    elif n % 2 == 0 :\n        return False\n    elif n == n+1 :\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is square, and if the value of n is odd then return False\n    if(n > 0) and (n % 2) == 0:\n        return False\n    # Check if n is even or odd\n    else:\n        # Find square root of n\n        r = n ** 0.5\n        # Check if n is square\n        if (r ** 2) == n:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1:\n        return True\n    if n % 2 == 0:\n        if n == 2:\n            return True\n        return False\n    for i in range(3, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    temp = str(n)\n    for i in range(1,len(temp)-1):\n        if int(temp[i]) % int(temp[i-1]) == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0 or n < 2:\n        return False\n    return is_perfect_square(n-1) and is_perfect_square(n-2)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return True\n    elif n % 2 == 0 :\n        return False\n    else :\n        for i in range (3, int(math.sqrt(n) + 1)) :\n            if n % i == 0 :\n                return False\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n % 10) == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # reverse the list\n    arr.reverse()\n    return arr == [x for x in range(len(arr)) if x % 2 == 0]\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) % 2 == 0:\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i%2 == 0:\n            print(f\"{i} is even\")\n        else:\n            print(f\"{i} is not even\")\n            "
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)): \n        if arr[i] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product=1\n    for i in range(len(arr)): \n        product=product*arr[i]\n    if (product%2)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1: \n        return arr[0] % 2 == 0\n    else: \n        if arr[0] % 2 == 0: \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr[0] == arr[1] and arr[0] % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return len(arr)%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # base case\n    if len(lists) < 1:\n        return []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for item in lists:\n        for val in item:\n            if val > 0:\n                max_sum.append(val)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = 0\n    for x in lists:\n        for y in x:\n            if y > max:\n                max = y\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [[i+j for i,j in zip(lists[0],lists[1])] for j in lists[1]]"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    sum = 0\n    for lst in lists:\n        sum = sum + lst\n    if len(lists) > 0:\n        for i in range(len(lists)):\n            sum = sum + lists[i][0]\n            if sum > sum_lst:\n                sum_lst = sum\n                max_sum = lists[i]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_value_lst = []\n    for i in lists:\n        temp = []\n        for j in i:\n            temp.append(j)\n        temp.sort(reverse=True)\n        for k in range(len(i)):\n            if temp[k] > max_value_lst[-1]:\n                max_value_lst = i[:]\n                print(max_value_lst)\n    return max_value_lst\n    "
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    lists.sort()\n    for i in range(len(lists)):\n        if lists[i][0] == lists[i][-1]:\n            continue\n        else:\n            max_sum += lists[i][0]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    else:\n        max_sum_list_now = []\n        max_sum_list_now.append(lists[0])\n        for i in range(len(lists)):\n            if lists[i][0] > lists[i][1]:\n                if lists[i][0] > max_sum_list_now[-1][0] and lists[i][1] > max_sum_list_now[-1][1]:\n                    max_sum_list_now.append(lists[i])\n            else:\n                if lists[i][0] > max_sum_list_now[-1][0] and lists[i][1] > max_sum_list_now[-1][1]:\n                    max_sum_list_now.append(lists[i])\n        return max_sum_list_now\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in lists:\n        sum_list = [j for j in i]\n        sum_list.sort()\n        if sum_list[-1]!= i[-1]:\n            return lists\n    return lists\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    sum_list = []\n    for l in lists:\n        sum_list.append(sum(l))\n    for i in range(0, len(sum_list)):\n        if sum_list[i] > max(sum_list):\n            max_list = [l for l in lists if sum(l) == sum_list[i]]\n            # sum_list.remove(sum_list[i])\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upper = 0\n    if test_str == \"\":\n        return 0\n    else:\n        for i in range(len(test_str)):\n            if test_str[i].isupper():\n                if max_upper < len(test_str[i]):\n                    max_upper = len(test_str[i])\n        return max_upper\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    letters = 0\n    for i in test_str:\n        if i.isupper():\n            letters += 1\n    return letters\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l = []\n    \n    for i in test_str:\n        if i.isupper():\n            l.append(i)\n            \n    return max(l)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # create an empty dictionary, number of occurances in dictionary is\n    # number of characters in string\n    char_dict = {}\n    for char in test_str:\n        if char.isupper():\n            char_dict[char] = char_dict.get(char, 0) + 1\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run_uppercase = 0\n    \n    for i in test_str:\n        if i.isupper():\n            if i.isupper():\n                if i.isupper():\n                    if max_run_uppercase < i.upper():\n                        max_run_uppercase = i.upper()\n                    else:\n                        max_run_uppercase = i.lower()\n                else:\n                    if max_run_uppercase > i.upper():\n                        max_run_uppercase = i.upper()\n                    else:\n                        max_run_uppercase = i.lower()\n            else:\n                if max_run_uppercase > i.upper():\n                    max_run_uppercase = i.upper()\n                else:\n                    max_run_uppercase = i.lower()\n        else:\n            if max_run_uppercase > i.lower():\n                max_run_uppercase = i.lower()\n            else:\n                max_run_uppercase = i.upper()\n    \n    return max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    l_str = list(test_str)\n    count = 0\n    for i in range(len(l_str)):\n        if l_str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    a = test_str.split()\n    max_val = -1\n    for i in range(len(a)):\n        if a[i].isupper():\n            if a[i] not in a[i-1]:\n                if a[i] not in a[i+1]:\n                    if a[i+1] not in a[i-1]:\n                        if a[i+1] not in a[i]:\n                            max_val = a[i]\n    return max_val\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upper = 0\n    for char in test_str:\n        if char.isupper():\n            if char.isupper() and max_run_upper <= 5:\n                max_run_upper += 1\n    return max_run_upper\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #return max(map(len, test_str))\n    return max([len(c) for c in test_str if c.isupper()])\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    occurences = {}\n    result = []\n    for char in test_str:\n        if char.isupper():\n            occurences[char] = occurences.get(char, 0) + 1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    return nums[0]\n    \n    # O(n) time | O(1) space\n    # can calculate the first odd number\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[nums.index(nums[0])]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return first(nums, start=0, end=len(nums)-1, step=2)\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    nums.sort()\n    if (nums[0] % 2!= 0):\n        return nums[0]\n    else:\n        return nums[0]\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[-1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Sorting the list using in-order traversal\n    nums.sort()\n    # Finding the first odd number\n    odd = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = nums[i] + odd\n            break\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # O(n) = O(log n)\n    # O(n) = O(log n)\n    \n    # if there's no odd number, return the smallest\n    if not nums:\n        return min(nums)\n    \n    # if there are more odd numbers, return the smallest of those\n    return min(nums[:nums.index(min(nums))])\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    first_odd_num = nums[0]\n    index = 0\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1:\n            first_odd_num = nums[i]\n            index = i\n    return first_odd_num, index\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    def odd(numbers):\n        '''\n        This function first calculates the length of a list. Then it checks the first number.\n        '''\n        length = 0\n        for i in numbers:\n            if i % 2 == 1:\n                length += 1\n        return length\n    return odd(nums)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_index = 0\n    check_index_list = []\n    for i in range(len(test_tup)):\n        if test_tup[i]!= K:\n            check_index = 1\n        if check_index == 1:\n            check_index_list.append(i)\n    return check_index_list\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in test_tup:\n        if i < 0:\n            return False\n        else:\n            if i < K:\n                return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(\"Testing {}\".format(test_tup))\n    print(\"---\")\n    if len(test_tup) == K:\n        print(\"This is a good test\")\n    else:\n        print(\"Not a good test\")\n        return False\n    \n    print(\"---\")\n    print(\"Testing {}\".format(test_tup))\n    print(\"---\")\n    if test_tup[0] == K:\n        print(\"This is a good test\")\n    else:\n        print(\"Not a good test\")\n        return False\n    \n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    for i in range(len(test_tup)):\n        if test_tup[i][0]!= test_tup[i][1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for a, b in zip(test_tup, K):\n        if a == b:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # If the length of the tuple is less than the given k, the tuple must contain a pair of\n    # tuples, and the pair must be of numbers in the range of [0, k].\n    if len(test_tup) < K:\n        return False\n    \n    # Otherwise, the tuple is a pair.\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) % K!= 0:\n        print('There are wrong number of items in the tuple.\\n')\n    else:\n        if len(test_tup) > K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Your code here\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K < len(tup):\n            return False\n    return True\n    \ndef check_K_2(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K > len(test_tup):\n        return False\n    for tup in test_tup:\n        if K > len(tup) and K < len(tup)\n            return False\n    return True\n    \ndef check_M(test_tup, M):\n    '''\n    Write a function to check if the given tuples contain the m or not.\n    '''\n    if M < len(test_tup):\n        return False\n    for tup in test_tup:\n        if M < len(tup) and M < len(tup)\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(test_tup[i] % K == 0 for i in range(len(test_tup)))\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your code here\n    if test_tup2[0] < test_tup1[0] and test_tup2[1] < test_tup1[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for index in range(len(test_tup1)):\n            if test_tup1[index] < test_tup2[index]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # We are not allowed to assign a value to a tuple\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    elif len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    for i in range(test_tup1_len):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    print(type(test_tup1[0]))\n    print(type(test_tup2[0]))\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(test_tup1[i], test_tup2[i])\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[0] > test_tup2[0]:\n        return False\n    else:\n        return True\n    \n    \ndef check_equal_nums(test_tup1, test_tup2):\n    '''\n    Write a function to check if all the elements of second tuple are equal to the corresponding element in the first tuple.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return True\n    elif test_tup1[0]!= test_tup2[0]:\n        return False\n    else:\n        return True\n"
    }
]